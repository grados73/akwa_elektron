
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ba4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014140  08016d48  08016d48  00026d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ae88  0802ae88  00040218  2**0
                  CONTENTS
  4 .ARM          00000008  0802ae88  0802ae88  0003ae88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ae90  0802ae90  00040218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ae90  0802ae90  0003ae90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ae94  0802ae94  0003ae94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0802ae98  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a78  20000218  0802b0b0  00040218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c90  0802b0b0  00040c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025ba2  00000000  00000000  00040248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004de9  00000000  00000000  00065dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  0006abd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a8  00000000  00000000  0006c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c717  00000000  00000000  0006e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027691  00000000  00000000  0008a7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099da2  00000000  00000000  000b1e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014bc22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008658  00000000  00000000  0014bc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016d2c 	.word	0x08016d2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08016d2c 	.word	0x08016d2c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <UART_ESP_ParseLine>:

BlynkServerData Blynk1;


void UART_ESP_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

		if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f009 ff8f 	bl	800af4e <UARTDMA_GetLineFromReceiveBuffer>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10f      	bne.n	8001056 <UART_ESP_ParseLine+0x3a>
		{
			// Header
			char* ParsePointer = strtok(BufferReceive, "=");
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4909      	ldr	r1, [pc, #36]	; (8001060 <UART_ESP_ParseLine+0x44>)
 800103c:	4618      	mov	r0, r3
 800103e:	f012 feb7 	bl	8013db0 <strtok>
 8001042:	64f8      	str	r0, [r7, #76]	; 0x4c

			if (strcmp(ParsePointer, "CHRELAY") == 0) // Command to change state of Relays
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <UART_ESP_ParseLine+0x48>)
 8001046:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001048:	f7ff f8ca 	bl	80001e0 <strcmp>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <UART_ESP_ParseLine+0x3a>
			{
				ESP_ParseChangeRelayState();
 8001052:	f000 f809 	bl	8001068 <ESP_ParseChangeRelayState>
			}
		}
}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	08016d48 	.word	0x08016d48
 8001064:	08016d4c 	.word	0x08016d4c

08001068 <ESP_ParseChangeRelayState>:

//
// Get info from Blynk Server About change Relays state
// CHRELAY=7,1\n
void ESP_ParseChangeRelayState(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
	uint8_t RelayNr = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
	uint8_t NewState = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73bb      	strb	r3, [r7, #14]
	char* ParsePointer = strtok(NULL, ",");
 8001076:	4913      	ldr	r1, [pc, #76]	; (80010c4 <ESP_ParseChangeRelayState+0x5c>)
 8001078:	2000      	movs	r0, #0
 800107a:	f012 fe99 	bl	8013db0 <strtok>
 800107e:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d012      	beq.n	80010ae <ESP_ParseChangeRelayState+0x46>
	{
		RelayNr = atoi(ParsePointer);
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f011 f982 	bl	8012392 <atoi>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
		if(strlen(ParsePointer) > 0)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <ESP_ParseChangeRelayState+0x46>
		{
			char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800109a:	490a      	ldr	r1, [pc, #40]	; (80010c4 <ESP_ParseChangeRelayState+0x5c>)
 800109c:	2000      	movs	r0, #0
 800109e:	f012 fe87 	bl	8013db0 <strtok>
 80010a2:	6078      	str	r0, [r7, #4]
			NewState = atoi(ParsePointer); // If there are no chars, change string to integer
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f011 f974 	bl	8012392 <atoi>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73bb      	strb	r3, [r7, #14]
		}
	}
	ESP_ChangeRelayState(RelayNr, NewState);
 80010ae:	7bba      	ldrb	r2, [r7, #14]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f807 	bl	80010c8 <ESP_ChangeRelayState>
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	08016d54 	.word	0x08016d54

080010c8 <ESP_ChangeRelayState>:


void ESP_ChangeRelayState(uint8_t RelayNumber, uint8_t NewState)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
	// First Relay (Switch)
	if(1 == RelayNumber)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10a      	bne.n	80010f4 <ESP_ChangeRelayState+0x2c>
	{
		if(0 == NewState) firstSwitchTurn(0); //Turn OFF
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <ESP_ChangeRelayState+0x24>
 80010e4:	2000      	movs	r0, #0
 80010e6:	f007 fe3b 	bl	8008d60 <firstSwitchTurn>
	else if(8 == RelayNumber)
	{
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
		else fourthLightTurn(1); //Turn ON
	}
}
 80010ea:	e064      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else firstSwitchTurn(1); //Turn ON
 80010ec:	2001      	movs	r0, #1
 80010ee:	f007 fe37 	bl	8008d60 <firstSwitchTurn>
}
 80010f2:	e060      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(2 == RelayNumber)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d10a      	bne.n	8001110 <ESP_ChangeRelayState+0x48>
		if(0 == NewState) secondSwitchTurn(0); //Turn OFF
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <ESP_ChangeRelayState+0x40>
 8001100:	2000      	movs	r0, #0
 8001102:	f007 feaf 	bl	8008e64 <secondSwitchTurn>
}
 8001106:	e056      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else secondSwitchTurn(1); //Turn ON
 8001108:	2001      	movs	r0, #1
 800110a:	f007 feab 	bl	8008e64 <secondSwitchTurn>
}
 800110e:	e052      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(3 == RelayNumber)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d10a      	bne.n	800112c <ESP_ChangeRelayState+0x64>
		if(0 == NewState) thirdSwitchTurn(0); //Turn OFF
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <ESP_ChangeRelayState+0x5c>
 800111c:	2000      	movs	r0, #0
 800111e:	f007 ff23 	bl	8008f68 <thirdSwitchTurn>
}
 8001122:	e048      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else thirdSwitchTurn(1); //Turn ON
 8001124:	2001      	movs	r0, #1
 8001126:	f007 ff1f 	bl	8008f68 <thirdSwitchTurn>
}
 800112a:	e044      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(4 == RelayNumber)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b04      	cmp	r3, #4
 8001130:	d10a      	bne.n	8001148 <ESP_ChangeRelayState+0x80>
		if(0 == NewState) fourthSwitchTurn(0); //Turn OFF
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <ESP_ChangeRelayState+0x78>
 8001138:	2000      	movs	r0, #0
 800113a:	f007 ff97 	bl	800906c <fourthSwitchTurn>
}
 800113e:	e03a      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else fourthSwitchTurn(1); //Turn ON
 8001140:	2001      	movs	r0, #1
 8001142:	f007 ff93 	bl	800906c <fourthSwitchTurn>
}
 8001146:	e036      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(5 == RelayNumber)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d10a      	bne.n	8001164 <ESP_ChangeRelayState+0x9c>
		if(0 == NewState) firstLightTurn(0); //Turn OFF
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <ESP_ChangeRelayState+0x94>
 8001154:	2000      	movs	r0, #0
 8001156:	f008 f80b 	bl	8009170 <firstLightTurn>
}
 800115a:	e02c      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else firstLightTurn(1); //Turn ON
 800115c:	2001      	movs	r0, #1
 800115e:	f008 f807 	bl	8009170 <firstLightTurn>
}
 8001162:	e028      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(6 == RelayNumber)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b06      	cmp	r3, #6
 8001168:	d10a      	bne.n	8001180 <ESP_ChangeRelayState+0xb8>
		if(0 == NewState) secondLightTurn(0); //Turn OFF
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <ESP_ChangeRelayState+0xb0>
 8001170:	2000      	movs	r0, #0
 8001172:	f008 f87b 	bl	800926c <secondLightTurn>
}
 8001176:	e01e      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else secondLightTurn(1); //Turn ON
 8001178:	2001      	movs	r0, #1
 800117a:	f008 f877 	bl	800926c <secondLightTurn>
}
 800117e:	e01a      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(7 == RelayNumber)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b07      	cmp	r3, #7
 8001184:	d10a      	bne.n	800119c <ESP_ChangeRelayState+0xd4>
		if(0 == NewState) thirdLightTurn(0); //Turn OFF
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <ESP_ChangeRelayState+0xcc>
 800118c:	2000      	movs	r0, #0
 800118e:	f008 f8eb 	bl	8009368 <thirdLightTurn>
}
 8001192:	e010      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else thirdLightTurn(1); //Turn ON
 8001194:	2001      	movs	r0, #1
 8001196:	f008 f8e7 	bl	8009368 <thirdLightTurn>
}
 800119a:	e00c      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(8 == RelayNumber)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d109      	bne.n	80011b6 <ESP_ChangeRelayState+0xee>
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d103      	bne.n	80011b0 <ESP_ChangeRelayState+0xe8>
 80011a8:	2000      	movs	r0, #0
 80011aa:	f008 f95b 	bl	8009464 <fourthLightTurn>
}
 80011ae:	e002      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else fourthLightTurn(1); //Turn ON
 80011b0:	2001      	movs	r0, #1
 80011b2:	f008 f957 	bl	8009464 <fourthLightTurn>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <ESP_SendCurrentTempInside>:

//
// Send info to Blynk Server
//
void ESP_SendCurrentTempInside(float CurrentTemp)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPINS=%f\n", CurrentTemp);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff f9d4 	bl	8000578 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4905      	ldr	r1, [pc, #20]	; (80011ec <ESP_SendCurrentTempInside+0x2c>)
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <ESP_SendCurrentTempInside+0x30>)
 80011d8:	f011 ff92 	bl	8013100 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 80011dc:	4904      	ldr	r1, [pc, #16]	; (80011f0 <ESP_SendCurrentTempInside+0x30>)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <ESP_SendCurrentTempInside+0x34>)
 80011e0:	f009 fee6 	bl	800afb0 <UARTDMA_Print>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	08016d58 	.word	0x08016d58
 80011f0:	2000030c 	.word	0x2000030c
 80011f4:	200006c8 	.word	0x200006c8

080011f8 <ESP_SendCurrentTempOutside>:

void ESP_SendCurrentTempOutside(float CurrentTemp)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPOUT=%f\n", CurrentTemp);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff f9b8 	bl	8000578 <__aeabi_f2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4905      	ldr	r1, [pc, #20]	; (8001224 <ESP_SendCurrentTempOutside+0x2c>)
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <ESP_SendCurrentTempOutside+0x30>)
 8001210:	f011 ff76 	bl	8013100 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001214:	4904      	ldr	r1, [pc, #16]	; (8001228 <ESP_SendCurrentTempOutside+0x30>)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <ESP_SendCurrentTempOutside+0x34>)
 8001218:	f009 feca 	bl	800afb0 <UARTDMA_Print>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08016d64 	.word	0x08016d64
 8001228:	2000030c 	.word	0x2000030c
 800122c:	200006c8 	.word	0x200006c8

08001230 <ESP_SendCurrentPressure>:

void ESP_SendCurrentPressure(float CurrentPress)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "PRES=%f\n", CurrentPress);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff f99c 	bl	8000578 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4905      	ldr	r1, [pc, #20]	; (800125c <ESP_SendCurrentPressure+0x2c>)
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <ESP_SendCurrentPressure+0x30>)
 8001248:	f011 ff5a 	bl	8013100 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 800124c:	4904      	ldr	r1, [pc, #16]	; (8001260 <ESP_SendCurrentPressure+0x30>)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <ESP_SendCurrentPressure+0x34>)
 8001250:	f009 feae 	bl	800afb0 <UARTDMA_Print>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08016d70 	.word	0x08016d70
 8001260:	2000030c 	.word	0x2000030c
 8001264:	200006c8 	.word	0x200006c8

08001268 <ESP_SendCurrentWaterLvl>:

void ESP_SendCurrentWaterLvl(uint32_t CurrentWaterLvl)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	sprintf(Message, "WLVL=%ld\n", CurrentWaterLvl);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4906      	ldr	r1, [pc, #24]	; (800128c <ESP_SendCurrentWaterLvl+0x24>)
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <ESP_SendCurrentWaterLvl+0x28>)
 8001276:	f011 ff43 	bl	8013100 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 800127a:	4905      	ldr	r1, [pc, #20]	; (8001290 <ESP_SendCurrentWaterLvl+0x28>)
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <ESP_SendCurrentWaterLvl+0x2c>)
 800127e:	f009 fe97 	bl	800afb0 <UARTDMA_Print>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	08016d7c 	.word	0x08016d7c
 8001290:	2000030c 	.word	0x2000030c
 8001294:	200006c8 	.word	0x200006c8

08001298 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1acb      	subs	r3, r1, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bfb8      	it	lt
 80012be:	425b      	neglt	r3, r3
 80012c0:	429a      	cmp	r2, r3
 80012c2:	bfcc      	ite	gt
 80012c4:	2301      	movgt	r3, #1
 80012c6:	2300      	movle	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80012cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	623b      	str	r3, [r7, #32]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dd0b      	ble.n	800130c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	b29a      	uxth	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	b29b      	uxth	r3, r3
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	b29b      	uxth	r3, r3
 8001318:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	bfb8      	it	lt
 8001324:	425b      	neglt	r3, r3
 8001326:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800132c:	0fda      	lsrs	r2, r3, #31
 800132e:	4413      	add	r3, r2
 8001330:	105b      	asrs	r3, r3, #1
 8001332:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	da02      	bge.n	8001342 <GFX_WriteLine+0xaa>
	        ystep = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001340:	e02e      	b.n	80013a0 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8001342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001346:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001348:	e02a      	b.n	80013a0 <GFX_WriteLine+0x108>
	        if (steep) {
 800134a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800134e:	2b00      	cmp	r3, #0
 8001350:	d008      	beq.n	8001364 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	b21b      	sxth	r3, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	b211      	sxth	r1, r2
 800135a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800135c:	4618      	mov	r0, r3
 800135e:	f000 feab 	bl	80020b8 <ILI9341_WritePixel>
 8001362:	e007      	b.n	8001374 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	b21b      	sxth	r3, r3
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	b211      	sxth	r1, r2
 800136c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fea2 	bl	80020b8 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8001374:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001376:	8abb      	ldrh	r3, [r7, #20]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	b29b      	uxth	r3, r3
 800137c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800137e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001382:	2b00      	cmp	r3, #0
 8001384:	da09      	bge.n	800139a <GFX_WriteLine+0x102>
	            y_start += ystep;
 8001386:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001390:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001392:	8afb      	ldrh	r3, [r7, #22]
 8001394:	4413      	add	r3, r2
 8001396:	b29b      	uxth	r3, r3
 8001398:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3301      	adds	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	ddd0      	ble.n	800134a <GFX_WriteLine+0xb2>
	        }
	    }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af02      	add	r7, sp, #8
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	1e5a      	subs	r2, r3, #1
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f7ff ff60 	bl	8001298 <GFX_WriteLine>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	1e5a      	subs	r2, r3, #1
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff ff4a 	bl	8001298 <GFX_WriteLine>
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af02      	add	r7, sp, #8
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d113      	bne.n	800144a <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	dd05      	ble.n	8001436 <GFX_DrawLine+0x2a>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	8c3b      	ldrh	r3, [r7, #32]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff ffb5 	bl	80013b2 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001448:	e01f      	b.n	800148a <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d113      	bne.n	800147a <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	dd05      	ble.n	8001466 <GFX_DrawLine+0x5a>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	8c3b      	ldrh	r3, [r7, #32]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff ffb4 	bl	80013e0 <GFX_DrawFastHLine>
}
 8001478:	e007      	b.n	800148a <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 800147a:	8c3b      	ldrh	r3, [r7, #32]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff ff07 	bl	8001298 <GFX_WriteLine>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	4611      	mov	r1, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	80fb      	strh	r3, [r7, #6]
 80014a4:	4613      	mov	r3, r2
 80014a6:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e008      	b.n	80014c0 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	8c3b      	ldrh	r3, [r7, #32]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	6978      	ldr	r0, [r7, #20]
 80014b6:	f7ff ff7c 	bl	80013b2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	88fa      	ldrh	r2, [r7, #6]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf0      	blt.n	80014ae <GFX_DrawFillRectangle+0x1c>
    }

}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b088      	sub	sp, #32
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	4611      	mov	r1, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	4613      	mov	r3, r2
 80014ea:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	f1c3 0301 	rsb	r3, r3, #1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	461a      	mov	r2, r3
 80014fe:	03d2      	lsls	r2, r2, #15
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001510:	e0b5      	b.n	800167e <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001512:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0e      	blt.n	8001538 <GFX_DrawCircleHelper+0x62>
            y--;
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	b29b      	uxth	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001526:	8b7b      	ldrh	r3, [r7, #26]
 8001528:	3302      	adds	r3, #2
 800152a:	b29b      	uxth	r3, r3
 800152c:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800152e:	8bfa      	ldrh	r2, [r7, #30]
 8001530:	8b7b      	ldrh	r3, [r7, #26]
 8001532:	4413      	add	r3, r2
 8001534:	b29b      	uxth	r3, r3
 8001536:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001538:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800153c:	b29b      	uxth	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001544:	8bbb      	ldrh	r3, [r7, #28]
 8001546:	3302      	adds	r3, #2
 8001548:	b29b      	uxth	r3, r3
 800154a:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800154c:	8bfa      	ldrh	r2, [r7, #30]
 800154e:	8bbb      	ldrh	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	b29b      	uxth	r3, r3
 8001554:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 8001556:	797b      	ldrb	r3, [r7, #5]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01f      	beq.n	80015a0 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	b29a      	uxth	r2, r3
 8001564:	8b3b      	ldrh	r3, [r7, #24]
 8001566:	4413      	add	r3, r2
 8001568:	b29b      	uxth	r3, r3
 800156a:	b218      	sxth	r0, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	b29a      	uxth	r2, r3
 8001570:	8afb      	ldrh	r3, [r7, #22]
 8001572:	4413      	add	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	b21b      	sxth	r3, r3
 8001578:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800157a:	4619      	mov	r1, r3
 800157c:	f000 fd9c 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	b29a      	uxth	r2, r3
 8001584:	8afb      	ldrh	r3, [r7, #22]
 8001586:	4413      	add	r3, r2
 8001588:	b29b      	uxth	r3, r3
 800158a:	b218      	sxth	r0, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	b29a      	uxth	r2, r3
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21b      	sxth	r3, r3
 8001598:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800159a:	4619      	mov	r1, r3
 800159c:	f000 fd8c 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 80015a0:	797b      	ldrb	r3, [r7, #5]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01f      	beq.n	80015ea <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	8b3b      	ldrh	r3, [r7, #24]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b218      	sxth	r0, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	8afb      	ldrh	r3, [r7, #22]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015c4:	4619      	mov	r1, r3
 80015c6:	f000 fd77 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	8afb      	ldrh	r3, [r7, #22]
 80015d0:	4413      	add	r3, r2
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b218      	sxth	r0, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	8b3b      	ldrh	r3, [r7, #24]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015e4:	4619      	mov	r1, r3
 80015e6:	f000 fd67 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 80015ea:	797b      	ldrb	r3, [r7, #5]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01f      	beq.n	8001634 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	8afb      	ldrh	r3, [r7, #22]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b218      	sxth	r0, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	b29a      	uxth	r2, r3
 8001604:	8b3b      	ldrh	r3, [r7, #24]
 8001606:	4413      	add	r3, r2
 8001608:	b29b      	uxth	r3, r3
 800160a:	b21b      	sxth	r3, r3
 800160c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800160e:	4619      	mov	r1, r3
 8001610:	f000 fd52 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	b29a      	uxth	r2, r3
 8001618:	8b3b      	ldrh	r3, [r7, #24]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	b218      	sxth	r0, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	b29a      	uxth	r2, r3
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	4413      	add	r3, r2
 8001628:	b29b      	uxth	r3, r3
 800162a:	b21b      	sxth	r3, r3
 800162c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800162e:	4619      	mov	r1, r3
 8001630:	f000 fd42 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 8001634:	797b      	ldrb	r3, [r7, #5]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d01f      	beq.n	800167e <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	b29a      	uxth	r2, r3
 8001642:	8afb      	ldrh	r3, [r7, #22]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	b29b      	uxth	r3, r3
 8001648:	b218      	sxth	r0, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	b29a      	uxth	r2, r3
 800164e:	8b3b      	ldrh	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b29b      	uxth	r3, r3
 8001654:	b21b      	sxth	r3, r3
 8001656:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001658:	4619      	mov	r1, r3
 800165a:	f000 fd2d 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	b29a      	uxth	r2, r3
 8001662:	8b3b      	ldrh	r3, [r7, #24]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	b218      	sxth	r0, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	b29a      	uxth	r2, r3
 800166e:	8afb      	ldrh	r3, [r7, #22]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	b21b      	sxth	r3, r3
 8001676:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001678:	4619      	mov	r1, r3
 800167a:	f000 fd1d 	bl	80020b8 <ILI9341_WritePixel>
    while (x<y) {
 800167e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001682:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001686:	429a      	cmp	r2, r3
 8001688:	f6ff af43 	blt.w	8001512 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b088      	sub	sp, #32
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	4611      	mov	r1, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	4613      	mov	r3, r2
 80016aa:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f1c3 0301 	rsb	r3, r3, #1
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	461a      	mov	r2, r3
 80016be:	03d2      	lsls	r2, r2, #15
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 80016d0:	e073      	b.n	80017ba <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 80016d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0e      	blt.n	80016f8 <GFX_DrawFillCircleHelper+0x62>
            y--;
 80016da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80016e6:	8b7b      	ldrh	r3, [r7, #26]
 80016e8:	3302      	adds	r3, #2
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80016ee:	8bfa      	ldrh	r2, [r7, #30]
 80016f0:	8b7b      	ldrh	r3, [r7, #26]
 80016f2:	4413      	add	r3, r2
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80016f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	b29b      	uxth	r3, r3
 8001702:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001704:	8bbb      	ldrh	r3, [r7, #28]
 8001706:	3302      	adds	r3, #2
 8001708:	b29b      	uxth	r3, r3
 800170a:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800170c:	8bfa      	ldrh	r2, [r7, #30]
 800170e:	8bbb      	ldrh	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001716:	797b      	ldrb	r3, [r7, #5]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d023      	beq.n	8001768 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8001720:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	18d0      	adds	r0, r2, r3
 8001728:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	1ad1      	subs	r1, r2, r3
 8001730:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800173c:	441a      	add	r2, r3
 800173e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001740:	f7ff fe37 	bl	80013b2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	18d0      	adds	r0, r2, r3
 800174c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	1ad1      	subs	r1, r2, r3
 8001754:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001760:	441a      	add	r2, r3
 8001762:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001764:	f7ff fe25 	bl	80013b2 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8001768:	797b      	ldrb	r3, [r7, #5]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d023      	beq.n	80017ba <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001772:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	1ad0      	subs	r0, r2, r3
 800177a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	1ad1      	subs	r1, r2, r3
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800178e:	441a      	add	r2, r3
 8001790:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001792:	f7ff fe0e 	bl	80013b2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	1ad0      	subs	r0, r2, r3
 800179e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	1ad1      	subs	r1, r2, r3
 80017a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80017b2:	441a      	add	r2, r3
 80017b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017b6:	f7ff fdfc 	bl	80013b2 <GFX_DrawFastVLine>
    while (x<y) {
 80017ba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80017be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	db85      	blt.n	80016d2 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	4611      	mov	r1, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	460b      	mov	r3, r1
 80017e0:	80fb      	strh	r3, [r7, #6]
 80017e2:	4613      	mov	r3, r2
 80017e4:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 80017e6:	8b3a      	ldrh	r2, [r7, #24]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	18d0      	adds	r0, r2, r3
 80017ec:	88fa      	ldrh	r2, [r7, #6]
 80017ee:	8b3b      	ldrh	r3, [r7, #24]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	1ad2      	subs	r2, r2, r3
 80017f4:	8bbb      	ldrh	r3, [r7, #28]
 80017f6:	68b9      	ldr	r1, [r7, #8]
 80017f8:	f7ff fdf2 	bl	80013e0 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 80017fc:	8b3a      	ldrh	r2, [r7, #24]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	18d0      	adds	r0, r2, r3
 8001802:	88ba      	ldrh	r2, [r7, #4]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	1e59      	subs	r1, r3, #1
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	8b3b      	ldrh	r3, [r7, #24]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	1ad2      	subs	r2, r2, r3
 8001812:	8bbb      	ldrh	r3, [r7, #28]
 8001814:	f7ff fde4 	bl	80013e0 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001818:	8b3a      	ldrh	r2, [r7, #24]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	18d1      	adds	r1, r2, r3
 800181e:	88ba      	ldrh	r2, [r7, #4]
 8001820:	8b3b      	ldrh	r3, [r7, #24]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	1ad2      	subs	r2, r2, r3
 8001826:	8bbb      	ldrh	r3, [r7, #28]
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7ff fdc2 	bl	80013b2 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800182e:	88fa      	ldrh	r2, [r7, #6]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	1e58      	subs	r0, r3, #1
 8001836:	8b3a      	ldrh	r2, [r7, #24]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	18d1      	adds	r1, r2, r3
 800183c:	88ba      	ldrh	r2, [r7, #4]
 800183e:	8b3b      	ldrh	r3, [r7, #24]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	1ad2      	subs	r2, r2, r3
 8001844:	8bbb      	ldrh	r3, [r7, #28]
 8001846:	f7ff fdb4 	bl	80013b2 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 800184a:	8b3a      	ldrh	r2, [r7, #24]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	18d0      	adds	r0, r2, r3
 8001850:	8b3a      	ldrh	r2, [r7, #24]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	18d1      	adds	r1, r2, r3
 8001856:	8b3a      	ldrh	r2, [r7, #24]
 8001858:	8bbb      	ldrh	r3, [r7, #28]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2301      	movs	r3, #1
 800185e:	f7ff fe3a 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8001862:	88fa      	ldrh	r2, [r7, #6]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	441a      	add	r2, r3
 8001868:	8b3b      	ldrh	r3, [r7, #24]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	1e58      	subs	r0, r3, #1
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	18d1      	adds	r1, r2, r3
 8001874:	8b3a      	ldrh	r2, [r7, #24]
 8001876:	8bbb      	ldrh	r3, [r7, #28]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	f7ff fe2b 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	441a      	add	r2, r3
 8001886:	8b3b      	ldrh	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	1e58      	subs	r0, r3, #1
 800188c:	88ba      	ldrh	r2, [r7, #4]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	441a      	add	r2, r3
 8001892:	8b3b      	ldrh	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	1e59      	subs	r1, r3, #1
 8001898:	8b3a      	ldrh	r2, [r7, #24]
 800189a:	8bbb      	ldrh	r3, [r7, #28]
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2304      	movs	r3, #4
 80018a0:	f7ff fe19 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80018a4:	8b3a      	ldrh	r2, [r7, #24]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	18d0      	adds	r0, r2, r3
 80018aa:	88ba      	ldrh	r2, [r7, #4]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	441a      	add	r2, r3
 80018b0:	8b3b      	ldrh	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	1e59      	subs	r1, r3, #1
 80018b6:	8b3a      	ldrh	r2, [r7, #24]
 80018b8:	8bbb      	ldrh	r3, [r7, #28]
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2308      	movs	r3, #8
 80018be:	f7ff fe0a 	bl	80014d6 <GFX_DrawCircleHelper>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80018ca:	b590      	push	{r4, r7, lr}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af02      	add	r7, sp, #8
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	4611      	mov	r1, r2
 80018d6:	461a      	mov	r2, r3
 80018d8:	460b      	mov	r3, r1
 80018da:	80fb      	strh	r3, [r7, #6]
 80018dc:	4613      	mov	r3, r2
 80018de:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 80018e0:	8c3a      	ldrh	r2, [r7, #32]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	18d0      	adds	r0, r2, r3
 80018e6:	8c3b      	ldrh	r3, [r7, #32]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	88b9      	ldrh	r1, [r7, #4]
 80018f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	460b      	mov	r3, r1
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	f7ff fdc9 	bl	8001492 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	441a      	add	r2, r3
 8001906:	8c3b      	ldrh	r3, [r7, #32]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	8c3a      	ldrh	r2, [r7, #32]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	18d1      	adds	r1, r2, r3
 8001912:	8c3b      	ldrh	r3, [r7, #32]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	88ba      	ldrh	r2, [r7, #4]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29b      	uxth	r3, r3
 8001922:	b21b      	sxth	r3, r3
 8001924:	8c3c      	ldrh	r4, [r7, #32]
 8001926:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001928:	9201      	str	r2, [sp, #4]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	4622      	mov	r2, r4
 8001930:	f7ff feb1 	bl	8001696 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001934:	8c3a      	ldrh	r2, [r7, #32]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	18d0      	adds	r0, r2, r3
 800193a:	8c3a      	ldrh	r2, [r7, #32]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	18d1      	adds	r1, r2, r3
 8001940:	8c3b      	ldrh	r3, [r7, #32]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	b29b      	uxth	r3, r3
 8001946:	88ba      	ldrh	r2, [r7, #4]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21b      	sxth	r3, r3
 8001952:	8c3c      	ldrh	r4, [r7, #32]
 8001954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001956:	9201      	str	r2, [sp, #4]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2302      	movs	r3, #2
 800195c:	4622      	mov	r2, r4
 800195e:	f7ff fe9a 	bl	8001696 <GFX_DrawFillCircleHelper>
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
	...

0800196c <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <EF_SetFont+0x1c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000358 	.word	0x20000358

0800198c <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <EF_GetFontHeight+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	781b      	ldrb	r3, [r3, #0]
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	20000358 	.word	0x20000358

080019a4 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <EF_GetFontStartChar+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	785b      	ldrb	r3, [r3, #1]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000358 	.word	0x20000358

080019bc <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <EF_GetFontEndChar+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	789b      	ldrb	r3, [r3, #2]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20000358 	.word	0x20000358

080019d4 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <EF_GetFontSpaceWidth+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	78db      	ldrb	r3, [r3, #3]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000358 	.word	0x20000358

080019ec <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2bc5      	cmp	r3, #197	; 0xc5
 8001a00:	d052      	beq.n	8001aa8 <EF_DecodePolish+0xbc>
 8001a02:	2bc5      	cmp	r3, #197	; 0xc5
 8001a04:	f300 80e7 	bgt.w	8001bd6 <EF_DecodePolish+0x1ea>
 8001a08:	2bc3      	cmp	r3, #195	; 0xc3
 8001a0a:	d002      	beq.n	8001a12 <EF_DecodePolish+0x26>
 8001a0c:	2bc4      	cmp	r3, #196	; 0xc4
 8001a0e:	d00a      	beq.n	8001a26 <EF_DecodePolish+0x3a>
 8001a10:	e0e1      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	2b93      	cmp	r3, #147	; 0x93
 8001a16:	d002      	beq.n	8001a1e <EF_DecodePolish+0x32>
 8001a18:	2bb3      	cmp	r3, #179	; 0xb3
 8001a1a:	d002      	beq.n	8001a22 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001a1c:	e0db      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
			return 0x84;
 8001a1e:	2384      	movs	r3, #132	; 0x84
 8001a20:	e0da      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			return 0x8D;
 8001a22:	238d      	movs	r3, #141	; 0x8d
 8001a24:	e0d8      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	3b84      	subs	r3, #132	; 0x84
 8001a2a:	2b15      	cmp	r3, #21
 8001a2c:	f200 80d0 	bhi.w	8001bd0 <EF_DecodePolish+0x1e4>
 8001a30:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <EF_DecodePolish+0x4c>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a91 	.word	0x08001a91
 8001a3c:	08001a9d 	.word	0x08001a9d
 8001a40:	08001a99 	.word	0x08001a99
 8001a44:	08001aa5 	.word	0x08001aa5
 8001a48:	08001bd1 	.word	0x08001bd1
 8001a4c:	08001bd1 	.word	0x08001bd1
 8001a50:	08001bd1 	.word	0x08001bd1
 8001a54:	08001bd1 	.word	0x08001bd1
 8001a58:	08001bd1 	.word	0x08001bd1
 8001a5c:	08001bd1 	.word	0x08001bd1
 8001a60:	08001bd1 	.word	0x08001bd1
 8001a64:	08001bd1 	.word	0x08001bd1
 8001a68:	08001bd1 	.word	0x08001bd1
 8001a6c:	08001bd1 	.word	0x08001bd1
 8001a70:	08001bd1 	.word	0x08001bd1
 8001a74:	08001bd1 	.word	0x08001bd1
 8001a78:	08001bd1 	.word	0x08001bd1
 8001a7c:	08001bd1 	.word	0x08001bd1
 8001a80:	08001bd1 	.word	0x08001bd1
 8001a84:	08001bd1 	.word	0x08001bd1
 8001a88:	08001a95 	.word	0x08001a95
 8001a8c:	08001aa1 	.word	0x08001aa1
		{
		case 0x84: // Ą
			return 0x7F;
 8001a90:	237f      	movs	r3, #127	; 0x7f
 8001a92:	e0a1      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001a94:	2381      	movs	r3, #129	; 0x81
 8001a96:	e09f      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	e09d      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001a9c:	2388      	movs	r3, #136	; 0x88
 8001a9e:	e09b      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001aa0:	238a      	movs	r3, #138	; 0x8a
 8001aa2:	e099      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001aa4:	2389      	movs	r3, #137	; 0x89
 8001aa6:	e097      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
 8001aaa:	3b81      	subs	r3, #129	; 0x81
 8001aac:	2b3b      	cmp	r3, #59	; 0x3b
 8001aae:	f200 8091 	bhi.w	8001bd4 <EF_DecodePolish+0x1e8>
 8001ab2:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <EF_DecodePolish+0xcc>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001ba9 	.word	0x08001ba9
 8001abc:	08001bbd 	.word	0x08001bbd
 8001ac0:	08001bad 	.word	0x08001bad
 8001ac4:	08001bc1 	.word	0x08001bc1
 8001ac8:	08001bd5 	.word	0x08001bd5
 8001acc:	08001bd5 	.word	0x08001bd5
 8001ad0:	08001bd5 	.word	0x08001bd5
 8001ad4:	08001bd5 	.word	0x08001bd5
 8001ad8:	08001bd5 	.word	0x08001bd5
 8001adc:	08001bd5 	.word	0x08001bd5
 8001ae0:	08001bd5 	.word	0x08001bd5
 8001ae4:	08001bd5 	.word	0x08001bd5
 8001ae8:	08001bd5 	.word	0x08001bd5
 8001aec:	08001bd5 	.word	0x08001bd5
 8001af0:	08001bd5 	.word	0x08001bd5
 8001af4:	08001bd5 	.word	0x08001bd5
 8001af8:	08001bd5 	.word	0x08001bd5
 8001afc:	08001bd5 	.word	0x08001bd5
 8001b00:	08001bd5 	.word	0x08001bd5
 8001b04:	08001bd5 	.word	0x08001bd5
 8001b08:	08001bd5 	.word	0x08001bd5
 8001b0c:	08001bd5 	.word	0x08001bd5
 8001b10:	08001bd5 	.word	0x08001bd5
 8001b14:	08001bd5 	.word	0x08001bd5
 8001b18:	08001bd5 	.word	0x08001bd5
 8001b1c:	08001bb1 	.word	0x08001bb1
 8001b20:	08001bc5 	.word	0x08001bc5
 8001b24:	08001bd5 	.word	0x08001bd5
 8001b28:	08001bd5 	.word	0x08001bd5
 8001b2c:	08001bd5 	.word	0x08001bd5
 8001b30:	08001bd5 	.word	0x08001bd5
 8001b34:	08001bd5 	.word	0x08001bd5
 8001b38:	08001bd5 	.word	0x08001bd5
 8001b3c:	08001bd5 	.word	0x08001bd5
 8001b40:	08001bd5 	.word	0x08001bd5
 8001b44:	08001bd5 	.word	0x08001bd5
 8001b48:	08001bd5 	.word	0x08001bd5
 8001b4c:	08001bd5 	.word	0x08001bd5
 8001b50:	08001bd5 	.word	0x08001bd5
 8001b54:	08001bd5 	.word	0x08001bd5
 8001b58:	08001bd5 	.word	0x08001bd5
 8001b5c:	08001bd5 	.word	0x08001bd5
 8001b60:	08001bd5 	.word	0x08001bd5
 8001b64:	08001bd5 	.word	0x08001bd5
 8001b68:	08001bd5 	.word	0x08001bd5
 8001b6c:	08001bd5 	.word	0x08001bd5
 8001b70:	08001bd5 	.word	0x08001bd5
 8001b74:	08001bd5 	.word	0x08001bd5
 8001b78:	08001bd5 	.word	0x08001bd5
 8001b7c:	08001bd5 	.word	0x08001bd5
 8001b80:	08001bd5 	.word	0x08001bd5
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001bd5 	.word	0x08001bd5
 8001b8c:	08001bd5 	.word	0x08001bd5
 8001b90:	08001bd5 	.word	0x08001bd5
 8001b94:	08001bd5 	.word	0x08001bd5
 8001b98:	08001bb5 	.word	0x08001bb5
 8001b9c:	08001bc9 	.word	0x08001bc9
 8001ba0:	08001bb9 	.word	0x08001bb9
 8001ba4:	08001bcd 	.word	0x08001bcd
		{
		case 0x81: // Ł
			return 0x82;
 8001ba8:	2382      	movs	r3, #130	; 0x82
 8001baa:	e015      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001bac:	2383      	movs	r3, #131	; 0x83
 8001bae:	e013      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001bb0:	2385      	movs	r3, #133	; 0x85
 8001bb2:	e011      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001bb4:	2386      	movs	r3, #134	; 0x86
 8001bb6:	e00f      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8001bb8:	2387      	movs	r3, #135	; 0x87
 8001bba:	e00d      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001bbc:	238b      	movs	r3, #139	; 0x8b
 8001bbe:	e00b      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001bc0:	238c      	movs	r3, #140	; 0x8c
 8001bc2:	e009      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001bc4:	238e      	movs	r3, #142	; 0x8e
 8001bc6:	e007      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8001bc8:	238f      	movs	r3, #143	; 0x8f
 8001bca:	e005      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001bcc:	2390      	movs	r3, #144	; 0x90
 8001bce:	e003      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
		break;
 8001bd0:	bf00      	nop
 8001bd2:	e000      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001bd4:	bf00      	nop
	}

	return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80bb      	strh	r3, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	807b      	strh	r3, [r7, #2]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001c02:	f7ff fecf 	bl	80019a4 <EF_GetFontStartChar>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d120      	bne.n	8001c58 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001c16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d114      	bne.n	8001c48 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8001c1e:	88bc      	ldrh	r4, [r7, #4]
 8001c20:	887d      	ldrh	r5, [r7, #2]
 8001c22:	f7ff fed7 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	0052      	lsls	r2, r2, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b299      	uxth	r1, r3
 8001c3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4629      	mov	r1, r5
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff fc25 	bl	8001492 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8001c48:	f7ff fec4 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	0052      	lsls	r2, r2, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e09c      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8001c58:	f7ff fea4 	bl	80019a4 <EF_GetFontStartChar>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d201      	bcs.n	8001c6a <EF_PutChar+0x86>
	{
		return 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e093      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8001c6a:	f7ff fea7 	bl	80019bc <EF_GetFontEndChar>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	7c7b      	ldrb	r3, [r7, #17]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <EF_PutChar+0x98>
	{
		return 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e08a      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	7c7b      	ldrb	r3, [r7, #17]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a42      	ldr	r2, [pc, #264]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	6851      	ldr	r1, [r2, #4]
 8001c96:	7c7a      	ldrb	r2, [r7, #17]
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	440a      	add	r2, r1
 8001c9c:	8852      	ldrh	r2, [r2, #2]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	83fb      	strh	r3, [r7, #30]
 8001ca6:	e066      	b.n	8001d76 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	777b      	strb	r3, [r7, #29]
 8001cb2:	e053      	b.n	8001d5c <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001cba:	7efb      	ldrb	r3, [r7, #27]
 8001cbc:	2b07      	cmp	r3, #7
 8001cbe:	d905      	bls.n	8001ccc <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001cc4:	7efb      	ldrb	r3, [r7, #27]
 8001cc6:	3b08      	subs	r3, #8
 8001cc8:	76fb      	strb	r3, [r7, #27]
 8001cca:	e001      	b.n	8001cd0 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001ccc:	7efb      	ldrb	r3, [r7, #27]
 8001cce:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	74bb      	strb	r3, [r7, #18]
 8001cd4:	e038      	b.n	8001d48 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001cd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da15      	bge.n	8001d0a <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001cde:	7f7b      	ldrb	r3, [r7, #29]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	88bb      	ldrh	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	7cbb      	ldrb	r3, [r7, #18]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b218      	sxth	r0, r3
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	8bfb      	ldrh	r3, [r7, #30]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	883a      	ldrh	r2, [r7, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	f000 f9d8 	bl	80020b8 <ILI9341_WritePixel>
 8001d08:	e018      	b.n	8001d3c <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001d0a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d114      	bne.n	8001d3c <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001d12:	7f7b      	ldrb	r3, [r7, #29]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	7cbb      	ldrb	r3, [r7, #18]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	b218      	sxth	r0, r3
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	8bfb      	ldrh	r3, [r7, #30]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d36:	4619      	mov	r1, r3
 8001d38:	f000 f9be 	bl	80020b8 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001d3c:	7cbb      	ldrb	r3, [r7, #18]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	74bb      	strb	r3, [r7, #18]
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	74fb      	strb	r3, [r7, #19]
 8001d48:	7cba      	ldrb	r2, [r7, #18]
 8001d4a:	7f3b      	ldrb	r3, [r7, #28]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3c2      	bcc.n	8001cd6 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001d56:	7f7b      	ldrb	r3, [r7, #29]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	777b      	strb	r3, [r7, #29]
 8001d5c:	7f7a      	ldrb	r2, [r7, #29]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da00      	bge.n	8001d6a <EF_PutChar+0x186>
 8001d68:	3307      	adds	r3, #7
 8001d6a:	10db      	asrs	r3, r3, #3
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dda1      	ble.n	8001cb4 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001d70:	8bfb      	ldrh	r3, [r7, #30]
 8001d72:	3301      	adds	r3, #1
 8001d74:	83fb      	strh	r3, [r7, #30]
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <EF_PutChar+0x1b8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	8bfa      	ldrh	r2, [r7, #30]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d391      	bcc.n	8001ca8 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <EF_PutChar+0x1b8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	7c7b      	ldrb	r3, [r7, #17]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000358 	.word	0x20000358

08001da0 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	4608      	mov	r0, r1
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	817b      	strh	r3, [r7, #10]
 8001db2:	460b      	mov	r3, r1
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7fe fa1a 	bl	80001f4 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001dc8:	2300      	movs	r3, #0
 8001dca:	75fb      	strb	r3, [r7, #23]
 8001dcc:	e05a      	b.n	8001e84 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2bc5      	cmp	r3, #197	; 0xc5
 8001dd8:	d817      	bhi.n	8001e0a <EF_PutString+0x6a>
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2bc2      	cmp	r3, #194	; 0xc2
 8001de4:	d911      	bls.n	8001e0a <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	7818      	ldrb	r0, [r3, #0]
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	3301      	adds	r3, #1
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7ff fdf7 	bl	80019ec <EF_DecodePolish>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	3301      	adds	r3, #1
 8001e06:	75fb      	strb	r3, [r7, #23]
 8001e08:	e004      	b.n	8001e14 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001e14:	897a      	ldrh	r2, [r7, #10]
 8001e16:	8abb      	ldrh	r3, [r7, #20]
 8001e18:	4413      	add	r3, r2
 8001e1a:	b299      	uxth	r1, r3
 8001e1c:	88fc      	ldrh	r4, [r7, #6]
 8001e1e:	893a      	ldrh	r2, [r7, #8]
 8001e20:	7cf8      	ldrb	r0, [r7, #19]
 8001e22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	f7ff fed9 	bl	8001be4 <EF_PutChar>
 8001e32:	4603      	mov	r3, r0
 8001e34:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001e36:	7c7b      	ldrb	r3, [r7, #17]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	8abb      	ldrh	r3, [r7, #20]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001e40:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d113      	bne.n	8001e70 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001e48:	897a      	ldrh	r2, [r7, #10]
 8001e4a:	8abb      	ldrh	r3, [r7, #20]
 8001e4c:	18d4      	adds	r4, r2, r3
 8001e4e:	893d      	ldrh	r5, [r7, #8]
 8001e50:	f7ff fdc0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b29e      	uxth	r6, r3
 8001e58:	f7ff fd98 	bl	800198c <EF_GetFontHeight>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	4632      	mov	r2, r6
 8001e68:	4629      	mov	r1, r5
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff fb11 	bl	8001492 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001e70:	f7ff fdb0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	8abb      	ldrh	r3, [r7, #20]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	3301      	adds	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
 8001e84:	7dfa      	ldrb	r2, [r7, #23]
 8001e86:	7cbb      	ldrb	r3, [r7, #18]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d3a0      	bcc.n	8001dce <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001e8c:	8abb      	ldrh	r3, [r7, #20]
 8001e8e:	b2dc      	uxtb	r4, r3
 8001e90:	f7ff fda0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e94:	4603      	mov	r3, r0
 8001e96:	1ae3      	subs	r3, r4, r3
 8001e98:	b2db      	uxtb	r3, r3
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea2 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f009 fba4 	bl	800b5f8 <HAL_Delay>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001ec2:	e014      	b.n	8001eee <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d10c      	bne.n	8001eee <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	330c      	adds	r3, #12
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	7812      	ldrb	r2, [r2, #0]
 8001ee0:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e7      	bne.n	8001ec4 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001ef4:	bf00      	nop
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	2b80      	cmp	r3, #128	; 0x80
 8001f04:	d0f7      	beq.n	8001ef6 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	2000035c 	.word	0x2000035c

08001f18 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f2a:	f00a fad5 	bl	800c4d8 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f34:	4808      	ldr	r0, [pc, #32]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f36:	f00a facf 	bl	800c4d8 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ffba 	bl	8001eb8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f44:	2201      	movs	r2, #1
 8001f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4a:	4803      	ldr	r0, [pc, #12]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f4c:	f00a fac4 	bl	800c4d8 <HAL_GPIO_WritePin>
#endif
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40020400 	.word	0x40020400

08001f5c <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f70:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f72:	f00a fab1 	bl	800c4d8 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f7c:	480e      	ldr	r0, [pc, #56]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f7e:	f00a faab 	bl	800c4d8 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001f82:	f107 030f 	add.w	r3, r7, #15
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff95 	bl	8001eb8 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f94:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f96:	f00a fa9f 	bl	800c4d8 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	68b8      	ldr	r0, [r7, #8]
 8001f9e:	f7ff ff8b 	bl	8001eb8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001faa:	f00a fa95 	bl	800c4d8 <HAL_GPIO_WritePin>
#endif

}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40020400 	.word	0x40020400

08001fbc <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d820      	bhi.n	800200e <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d816      	bhi.n	8002000 <ILI9341_SetRotation+0x44>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <ILI9341_SetRotation+0x1c>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	08001fef 	.word	0x08001fef
 8001fe0:	08001ff5 	.word	0x08001ff5
 8001fe4:	08001ffb 	.word	0x08001ffb
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001fe8:	2348      	movs	r3, #72	; 0x48
 8001fea:	71fb      	strb	r3, [r7, #7]
		break;
 8001fec:	e008      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001fee:	2328      	movs	r3, #40	; 0x28
 8001ff0:	71fb      	strb	r3, [r7, #7]
		break;
 8001ff2:	e005      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001ff4:	2388      	movs	r3, #136	; 0x88
 8001ff6:	71fb      	strb	r3, [r7, #7]
		break;
 8001ff8:	e002      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001ffa:	23e8      	movs	r3, #232	; 0xe8
 8001ffc:	71fb      	strb	r3, [r7, #7]
		break;
 8001ffe:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	2201      	movs	r2, #1
 8002004:	4619      	mov	r1, r3
 8002006:	2036      	movs	r0, #54	; 0x36
 8002008:	f7ff ffa8 	bl	8001f5c <ILI9341_SendCommandAndData>
 800200c:	e000      	b.n	8002010 <ILI9341_SetRotation+0x54>
		return;
 800200e:	bf00      	nop
}
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop

08002018 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	4604      	mov	r4, r0
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	4623      	mov	r3, r4
 8002028:	80fb      	strh	r3, [r7, #6]
 800202a:	4603      	mov	r3, r0
 800202c:	80bb      	strh	r3, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	807b      	strh	r3, [r7, #2]
 8002032:	4613      	mov	r3, r2
 8002034:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4413      	add	r3, r2
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	81fb      	strh	r3, [r7, #14]
 8002042:	88ba      	ldrh	r2, [r7, #4]
 8002044:	883b      	ldrh	r3, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29b      	uxth	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8002068:	89fb      	ldrh	r3, [r7, #14]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	2204      	movs	r2, #4
 8002074:	4619      	mov	r1, r3
 8002076:	202a      	movs	r0, #42	; 0x2a
 8002078:	f7ff ff70 	bl	8001f5c <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 800207c:	88bb      	ldrh	r3, [r7, #4]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	b29b      	uxth	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8002086:	88bb      	ldrh	r3, [r7, #4]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 800208c:	89bb      	ldrh	r3, [r7, #12]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8002096:	89bb      	ldrh	r3, [r7, #12]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	2204      	movs	r2, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	202b      	movs	r0, #43	; 0x2b
 80020a6:	f7ff ff59 	bl	8001f5c <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 80020aa:	202c      	movs	r0, #44	; 0x2c
 80020ac:	f7ff ff34 	bl	8001f18 <ILI9341_SendComand>

}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}

080020b8 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
 80020c2:	460b      	mov	r3, r1
 80020c4:	80bb      	strh	r3, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 80020ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db21      	blt.n	8002116 <ILI9341_WritePixel+0x5e>
 80020d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020da:	da1c      	bge.n	8002116 <ILI9341_WritePixel+0x5e>
 80020dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db18      	blt.n	8002116 <ILI9341_WritePixel+0x5e>
 80020e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e8:	2bef      	cmp	r3, #239	; 0xef
 80020ea:	dc14      	bgt.n	8002116 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 80020ec:	88f8      	ldrh	r0, [r7, #6]
 80020ee:	88b9      	ldrh	r1, [r7, #4]
 80020f0:	2301      	movs	r3, #1
 80020f2:	2201      	movs	r2, #1
 80020f4:	f7ff ff90 	bl	8002018 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	2202      	movs	r2, #2
 800210e:	4619      	mov	r1, r3
 8002110:	202c      	movs	r0, #44	; 0x2c
 8002112:	f7ff ff23 	bl	8001f5c <ILI9341_SendCommandAndData>
	}

}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	60ba      	str	r2, [r7, #8]
 8002126:	461a      	mov	r2, r3
 8002128:	4603      	mov	r3, r0
 800212a:	81fb      	strh	r3, [r7, #14]
 800212c:	460b      	mov	r3, r1
 800212e:	81bb      	strh	r3, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8002134:	89fa      	ldrh	r2, [r7, #14]
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	4413      	add	r3, r2
 800213a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800213e:	dc14      	bgt.n	800216a <ILI9341_DrawImage+0x4c>
 8002140:	89ba      	ldrh	r2, [r7, #12]
 8002142:	8b3b      	ldrh	r3, [r7, #24]
 8002144:	4413      	add	r3, r2
 8002146:	2bf0      	cmp	r3, #240	; 0xf0
 8002148:	dc0f      	bgt.n	800216a <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 800214a:	8b3b      	ldrh	r3, [r7, #24]
 800214c:	88fa      	ldrh	r2, [r7, #6]
 800214e:	89b9      	ldrh	r1, [r7, #12]
 8002150:	89f8      	ldrh	r0, [r7, #14]
 8002152:	f7ff ff61 	bl	8002018 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	8b3a      	ldrh	r2, [r7, #24]
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	461a      	mov	r2, r3
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	202c      	movs	r0, #44	; 0x2c
 8002166:	f7ff fef9 	bl	8001f5c <ILI9341_SendCommandAndData>
	}
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 800217e:	23f0      	movs	r3, #240	; 0xf0
 8002180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002184:	2100      	movs	r1, #0
 8002186:	2000      	movs	r0, #0
 8002188:	f7ff ff46 	bl	8002018 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 800218c:	202c      	movs	r0, #44	; 0x2c
 800218e:	f7ff fec3 	bl	8001f18 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8002192:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002196:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219e:	4822      	ldr	r0, [pc, #136]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 80021a0:	f00a f99a 	bl	800c4d8 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 80021a4:	2201      	movs	r2, #1
 80021a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021aa:	481f      	ldr	r0, [pc, #124]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 80021ac:	f00a f994 	bl	800c4d8 <HAL_GPIO_WritePin>

    while (Length > 0U)
 80021b0:	e023      	b.n	80021fa <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d11b      	bne.n	80021fa <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 80021d4:	bf00      	nop
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d1f7      	bne.n	80021d6 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	330c      	adds	r3, #12
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1d8      	bne.n	80021b2 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8002200:	bf00      	nop
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b80      	cmp	r3, #128	; 0x80
 8002210:	d0f7      	beq.n	8002202 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8002212:	2201      	movs	r2, #1
 8002214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 800221a:	f00a f95d 	bl	800c4d8 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40020400 	.word	0x40020400
 800222c:	2000035c 	.word	0x2000035c

08002230 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8002238:	4a24      	ldr	r2, [pc, #144]	; (80022cc <ILI9341_Init+0x9c>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <ILI9341_Init+0xa0>)
 8002240:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002250:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8002252:	2200      	movs	r2, #0
 8002254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002258:	481e      	ldr	r0, [pc, #120]	; (80022d4 <ILI9341_Init+0xa4>)
 800225a:	f00a f93d 	bl	800c4d8 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800225e:	200a      	movs	r0, #10
 8002260:	f7ff fe1f 	bl	8001ea2 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8002264:	2201      	movs	r2, #1
 8002266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800226a:	481a      	ldr	r0, [pc, #104]	; (80022d4 <ILI9341_Init+0xa4>)
 800226c:	f00a f934 	bl	800c4d8 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8002270:	200a      	movs	r0, #10
 8002272:	f7ff fe16 	bl	8001ea2 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8002276:	e019      	b.n	80022ac <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60fa      	str	r2, [r7, #12]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002282:	7abb      	ldrb	r3, [r7, #10]
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800228a:	7a7a      	ldrb	r2, [r7, #9]
 800228c:	7afb      	ldrb	r3, [r7, #11]
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fe63 	bl	8001f5c <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 8002296:	7a7b      	ldrb	r3, [r7, #9]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 800229e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da02      	bge.n	80022ac <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 80022a6:	2096      	movs	r0, #150	; 0x96
 80022a8:	f7ff fdfb 	bl	8001ea2 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60fa      	str	r2, [r7, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	72fb      	strb	r3, [r7, #11]
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1dd      	bne.n	8002278 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 80022bc:	2003      	movs	r0, #3
 80022be:	f7ff fe7d 	bl	8001fbc <ILI9341_SetRotation>
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000035c 	.word	0x2000035c
 80022d0:	0801782c 	.word	0x0801782c
 80022d4:	40020400 	.word	0x40020400

080022d8 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e4:	480a      	ldr	r0, [pc, #40]	; (8002310 <XPT2046_GetRawData+0x38>)
 80022e6:	f00a f8f7 	bl	800c4d8 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <XPT2046_GetRawData+0x3c>)
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2305      	movs	r3, #5
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <XPT2046_GetRawData+0x40>)
 80022f8:	4908      	ldr	r1, [pc, #32]	; (800231c <XPT2046_GetRawData+0x44>)
 80022fa:	f00d ff0e 	bl	801011a <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80022fe:	2201      	movs	r2, #1
 8002300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <XPT2046_GetRawData+0x38>)
 8002306:	f00a f8e7 	bl	800c4d8 <HAL_GPIO_WritePin>
#endif
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40020400 	.word	0x40020400
 8002314:	20000234 	.word	0x20000234
 8002318:	20000244 	.word	0x20000244
 800231c:	2000023c 	.word	0x2000023c

08002320 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <XPT2046_ReadRawData+0x48>)
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	b21a      	sxth	r2, r3
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <XPT2046_ReadRawData+0x48>)
 8002334:	789b      	ldrb	r3, [r3, #2]
 8002336:	b21b      	sxth	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	b21b      	sxth	r3, r3
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <XPT2046_ReadRawData+0x48>)
 8002344:	78db      	ldrb	r3, [r3, #3]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b21a      	sxth	r2, r3
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <XPT2046_ReadRawData+0x48>)
 800234c:	791b      	ldrb	r3, [r3, #4]
 800234e:	b21b      	sxth	r3, r3
 8002350:	4313      	orrs	r3, r2
 8002352:	b21b      	sxth	r3, r3
 8002354:	b29a      	uxth	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	801a      	strh	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000244 	.word	0x20000244

0800236c <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 800236c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 8002378:	f107 020c 	add.w	r2, r7, #12
 800237c:	f107 030e 	add.w	r3, r7, #14
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffcc 	bl	8002320 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <XPT2046_ReadTouchPoint+0x118>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d16e      	bne.n	800246e <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002390:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002392:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002396:	89fb      	ldrh	r3, [r7, #14]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8db 	bl	8000554 <__aeabi_i2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fe f93f 	bl	8000628 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4690      	mov	r8, r2
 80023b0:	4699      	mov	r9, r3
 80023b2:	4b35      	ldr	r3, [pc, #212]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 80023b4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80023b8:	89bb      	ldrh	r3, [r7, #12]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f8ca 	bl	8000554 <__aeabi_i2d>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4620      	mov	r0, r4
 80023c6:	4629      	mov	r1, r5
 80023c8:	f7fe f92e 	bl	8000628 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4640      	mov	r0, r8
 80023d2:	4649      	mov	r1, r9
 80023d4:	f7fd ff72 	bl	80002bc <__adddf3>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 80023e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023e6:	f7fd ff69 	bl	80002bc <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fbf1 	bl	8000bd8 <__aeabi_d2uiz>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002400:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002404:	89fb      	ldrh	r3, [r7, #14]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f8a4 	bl	8000554 <__aeabi_i2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fe f908 	bl	8000628 <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4690      	mov	r8, r2
 800241e:	4699      	mov	r9, r3
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002422:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002426:	89bb      	ldrh	r3, [r7, #12]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f893 	bl	8000554 <__aeabi_i2d>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4620      	mov	r0, r4
 8002434:	4629      	mov	r1, r5
 8002436:	f7fe f8f7 	bl	8000628 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4640      	mov	r0, r8
 8002440:	4649      	mov	r1, r9
 8002442:	f7fd ff3b 	bl	80002bc <__adddf3>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002450:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002454:	f7fd ff32 	bl	80002bc <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fbba 	bl	8000bd8 <__aeabi_d2uiz>
 8002464:	4603      	mov	r3, r0
 8002466:	b29a      	uxth	r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 800246c:	e005      	b.n	800247a <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 800246e:	89fa      	ldrh	r2, [r7, #14]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 8002474:	89ba      	ldrh	r2, [r7, #12]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	801a      	strh	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002484:	20000249 	.word	0x20000249
 8002488:	20000000 	.word	0x20000000

0800248c <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e013      	b.n	80024cc <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	4a16      	ldr	r2, [pc, #88]	; (8002500 <XPT2046_GetTouchPoint+0x74>)
 80024a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ac:	461a      	mov	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	4413      	add	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <XPT2046_GetTouchPoint+0x74>)
 80024b8:	330a      	adds	r3, #10
 80024ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024be:	461a      	mov	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	3301      	adds	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d9e8      	bls.n	80024a4 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <XPT2046_GetTouchPoint+0x78>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	08db      	lsrs	r3, r3, #3
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <XPT2046_GetTouchPoint+0x78>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	801a      	strh	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000360 	.word	0x20000360
 8002504:	cccccccd 	.word	0xcccccccd

08002508 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <XPT2046_IsTouched+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d101      	bne.n	800251a <XPT2046_IsTouched+0x12>
		return 1;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <XPT2046_IsTouched+0x14>

	return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000389 	.word	0x20000389

0800252c <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	  switch(TouchState)
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <XPT2046_Task+0x16c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b03      	cmp	r3, #3
 8002538:	f200 80ab 	bhi.w	8002692 <XPT2046_Task+0x166>
 800253c:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <XPT2046_Task+0x18>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002689 	.word	0x08002689
 8002548:	08002555 	.word	0x08002555
 800254c:	080025cb 	.word	0x080025cb
 8002550:	08002647 	.word	0x08002647
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8002554:	f009 f844 	bl	800b5e0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <XPT2046_Task+0x170>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	f240 8093 	bls.w	800268c <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8002566:	f7ff feb7 	bl	80022d8 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 800256a:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <XPT2046_Task+0x174>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <XPT2046_Task+0x178>)
 8002572:	441a      	add	r2, r3
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <XPT2046_Task+0x174>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	330a      	adds	r3, #10
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4949      	ldr	r1, [pc, #292]	; (80026a4 <XPT2046_Task+0x178>)
 800257e:	440b      	add	r3, r1
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7ff fef2 	bl	800236c <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002588:	4b45      	ldr	r3, [pc, #276]	; (80026a0 <XPT2046_Task+0x174>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <XPT2046_Task+0x174>)
 8002592:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <XPT2046_Task+0x174>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b0a      	cmp	r3, #10
 800259a:	d105      	bne.n	80025a8 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 800259c:	4b40      	ldr	r3, [pc, #256]	; (80026a0 <XPT2046_Task+0x174>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <XPT2046_Task+0x16c>)
 80025a4:	2202      	movs	r2, #2
 80025a6:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80025a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ac:	483e      	ldr	r0, [pc, #248]	; (80026a8 <XPT2046_Task+0x17c>)
 80025ae:	f009 ff7b 	bl	800c4a8 <HAL_GPIO_ReadPin>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80025b8:	4b37      	ldr	r3, [pc, #220]	; (8002698 <XPT2046_Task+0x16c>)
 80025ba:	2203      	movs	r2, #3
 80025bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80025be:	f009 f80f 	bl	800b5e0 <HAL_GetTick>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4a35      	ldr	r2, [pc, #212]	; (800269c <XPT2046_Task+0x170>)
 80025c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80025c8:	e060      	b.n	800268c <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80025ca:	f009 f809 	bl	800b5e0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <XPT2046_Task+0x170>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d95a      	bls.n	8002690 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80025da:	f7ff fe7d 	bl	80022d8 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <XPT2046_Task+0x174>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4a2f      	ldr	r2, [pc, #188]	; (80026a4 <XPT2046_Task+0x178>)
 80025e6:	441a      	add	r2, r3
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <XPT2046_Task+0x174>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	330a      	adds	r3, #10
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	492c      	ldr	r1, [pc, #176]	; (80026a4 <XPT2046_Task+0x178>)
 80025f2:	440b      	add	r3, r1
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f7ff feb8 	bl	800236c <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <XPT2046_Task+0x174>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <XPT2046_Task+0x174>)
 8002606:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <XPT2046_Task+0x174>)
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <XPT2046_Task+0x180>)
 800260e:	fba3 1302 	umull	r1, r3, r3, r2
 8002612:	08d9      	lsrs	r1, r3, #3
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <XPT2046_Task+0x174>)
 8002622:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002628:	481f      	ldr	r0, [pc, #124]	; (80026a8 <XPT2046_Task+0x17c>)
 800262a:	f009 ff3d 	bl	800c4a8 <HAL_GPIO_ReadPin>
 800262e:	4603      	mov	r3, r0
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <XPT2046_Task+0x16c>)
 8002636:	2203      	movs	r2, #3
 8002638:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 800263a:	f008 ffd1 	bl	800b5e0 <HAL_GetTick>
 800263e:	4603      	mov	r3, r0
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <XPT2046_Task+0x170>)
 8002642:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8002644:	e024      	b.n	8002690 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <XPT2046_Task+0x16c>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <XPT2046_Task+0x174>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002652:	e009      	b.n	8002668 <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <XPT2046_Task+0x184>)
 8002656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265a:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <XPT2046_Task+0x188>)
 800265e:	f993 3000 	ldrsb.w	r3, [r3]
 8002662:	4618      	mov	r0, r3
 8002664:	f009 f97e 	bl	800b964 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <XPT2046_Task+0x188>)
 800266a:	f993 3000 	ldrsb.w	r3, [r3]
 800266e:	4618      	mov	r0, r3
 8002670:	f009 f969 	bl	800b946 <HAL_NVIC_GetPendingIRQ>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ec      	bne.n	8002654 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <XPT2046_Task+0x188>)
 800267c:	f993 3000 	ldrsb.w	r3, [r3]
 8002680:	4618      	mov	r0, r3
 8002682:	f009 f938 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
		  break;
 8002686:	e004      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 8002688:	bf00      	nop
 800268a:	e002      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 800268c:	bf00      	nop
 800268e:	e000      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 8002690:	bf00      	nop

	  }
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000389 	.word	0x20000389
 800269c:	2000038c 	.word	0x2000038c
 80026a0:	20000388 	.word	0x20000388
 80026a4:	20000360 	.word	0x20000360
 80026a8:	40020000 	.word	0x40020000
 80026ac:	cccccccd 	.word	0xcccccccd
 80026b0:	40013c00 	.word	0x40013c00
 80026b4:	20000238 	.word	0x20000238

080026b8 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80026bc:	2017      	movs	r0, #23
 80026be:	f009 f928 	bl	800b912 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 80026c2:	4b02      	ldr	r3, [pc, #8]	; (80026cc <XPT2046_IRQ+0x14>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000389 	.word	0x20000389

080026d0 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <XPT2046_Init+0x84>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 80026e2:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <XPT2046_Init+0x88>)
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <XPT2046_Init+0x8c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026f4:	481a      	ldr	r0, [pc, #104]	; (8002760 <XPT2046_Init+0x90>)
 80026f6:	f009 feef 	bl	800c4d8 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <XPT2046_Init+0x94>)
 80026fc:	2290      	movs	r2, #144	; 0x90
 80026fe:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <XPT2046_Init+0x98>)
 8002702:	22d0      	movs	r2, #208	; 0xd0
 8002704:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8002706:	4b19      	ldr	r3, [pc, #100]	; (800276c <XPT2046_Init+0x9c>)
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 800270c:	f7ff fde4 	bl	80022d8 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002710:	2001      	movs	r0, #1
 8002712:	f008 ff71 	bl	800b5f8 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <XPT2046_Init+0x94>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <XPT2046_Init+0x9c>)
 8002720:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <XPT2046_Init+0x94>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	015b      	lsls	r3, r3, #5
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <XPT2046_Init+0x9c>)
 800272c:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <XPT2046_Init+0x98>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <XPT2046_Init+0x9c>)
 8002738:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <XPT2046_Init+0x98>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	015b      	lsls	r3, r3, #5
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <XPT2046_Init+0x9c>)
 8002744:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <XPT2046_Init+0x9c>)
 8002748:	2200      	movs	r2, #0
 800274a:	711a      	strb	r2, [r3, #4]
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000234 	.word	0x20000234
 8002758:	20000238 	.word	0x20000238
 800275c:	20000389 	.word	0x20000389
 8002760:	40020400 	.word	0x40020400
 8002764:	20000239 	.word	0x20000239
 8002768:	2000023a 	.word	0x2000023a
 800276c:	2000023c 	.word	0x2000023c

08002770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	4b27      	ldr	r3, [pc, #156]	; (8002818 <MX_DMA_Init+0xa8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a26      	ldr	r2, [pc, #152]	; (8002818 <MX_DMA_Init+0xa8>)
 8002780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <MX_DMA_Init+0xa8>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <MX_DMA_Init+0xa8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <MX_DMA_Init+0xa8>)
 800279c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <MX_DMA_Init+0xa8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	200b      	movs	r0, #11
 80027b4:	f009 f883 	bl	800b8be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027b8:	200b      	movs	r0, #11
 80027ba:	f009 f89c 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	200c      	movs	r0, #12
 80027c4:	f009 f87b 	bl	800b8be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027c8:	200c      	movs	r0, #12
 80027ca:	f009 f894 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	2010      	movs	r0, #16
 80027d4:	f009 f873 	bl	800b8be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027d8:	2010      	movs	r0, #16
 80027da:	f009 f88c 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	2011      	movs	r0, #17
 80027e4:	f009 f86b 	bl	800b8be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80027e8:	2011      	movs	r0, #17
 80027ea:	f009 f884 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	203a      	movs	r0, #58	; 0x3a
 80027f4:	f009 f863 	bl	800b8be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80027f8:	203a      	movs	r0, #58	; 0x3a
 80027fa:	f009 f87c 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	2046      	movs	r0, #70	; 0x46
 8002804:	f009 f85b 	bl	800b8be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002808:	2046      	movs	r0, #70	; 0x46
 800280a:	f009 f874 	bl	800b8f6 <HAL_NVIC_EnableIRQ>

}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800

0800281c <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002824:	4a09      	ldr	r2, [pc, #36]	; (800284c <DS3231_Init+0x30>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f8ea 	bl	8002a04 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002830:	2000      	movs	r0, #0
 8002832:	f000 f8ae 	bl	8002992 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002836:	f000 f907 	bl	8002a48 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 800283a:	f000 f8cd 	bl	80029d8 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800283e:	2001      	movs	r0, #1
 8002840:	f000 f846 	bl	80028d0 <DS3231_SetInterruptMode>
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000390 	.word	0x20000390

08002850 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af02      	add	r7, sp, #8
 8002856:	4603      	mov	r3, r0
 8002858:	460a      	mov	r2, r1
 800285a:	71fb      	strb	r3, [r7, #7]
 800285c:	4613      	mov	r3, r2
 800285e:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	733b      	strb	r3, [r7, #12]
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <DS3231_SetRegByte+0x38>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2302      	movs	r3, #2
 8002878:	21d0      	movs	r1, #208	; 0xd0
 800287a:	f009 ffbd 	bl	800c7f8 <HAL_I2C_Master_Transmit>
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000390 	.word	0x20000390

0800288c <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af02      	add	r7, sp, #8
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <DS3231_GetRegByte+0x40>)
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	1dfa      	adds	r2, r7, #7
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2301      	movs	r3, #1
 80028a4:	21d0      	movs	r1, #208	; 0xd0
 80028a6:	f009 ffa7 	bl	800c7f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <DS3231_GetRegByte+0x40>)
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f107 020f 	add.w	r2, r7, #15
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	21d0      	movs	r1, #208	; 0xd0
 80028bc:	f00a f89a 	bl	800c9f4 <HAL_I2C_Master_Receive>
	return val;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000390 	.word	0x20000390

080028d0 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80028da:	200e      	movs	r0, #14
 80028dc:	f7ff ffd6 	bl	800288c <DS3231_GetRegByte>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80028e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	b25a      	sxtb	r2, r3
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	4619      	mov	r1, r3
 8002902:	200e      	movs	r0, #14
 8002904:	f7ff ffa4 	bl	8002850 <DS3231_SetRegByte>
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <DS3231_SetRateSelect>:

/**
 * @brief Set frequency of the square wave output
 * @param rate Frequency to set, DS3231_1HZ, DS3231_1024HZ, DS3231_4096HZ or DS3231_8192HZ.
 */
void DS3231_SetRateSelect(DS3231_Rate rate){
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800291a:	200e      	movs	r0, #14
 800291c:	f7ff ffb6 	bl	800288c <DS3231_GetRegByte>
 8002920:	4603      	mov	r3, r0
 8002922:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xe7) | ((rate & 0x03) << DS3231_RS1));
 8002924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002928:	f023 0318 	bic.w	r3, r3, #24
 800292c:	b25a      	sxtb	r2, r3
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	b25b      	sxtb	r3, r3
 8002934:	f003 0318 	and.w	r3, r3, #24
 8002938:	b25b      	sxtb	r3, r3
 800293a:	4313      	orrs	r3, r2
 800293c:	b25b      	sxtb	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	200e      	movs	r0, #14
 8002944:	f7ff ff84 	bl	8002850 <DS3231_SetRegByte>
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800295a:	200e      	movs	r0, #14
 800295c:	f7ff ff96 	bl	800288c <DS3231_GetRegByte>
 8002960:	4603      	mov	r3, r0
 8002962:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8002964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800296c:	b25b      	sxtb	r3, r3
 800296e:	79fa      	ldrb	r2, [r7, #7]
 8002970:	2a00      	cmp	r2, #0
 8002972:	d102      	bne.n	800297a <DS3231_EnableOscillator+0x2a>
 8002974:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002978:	e000      	b.n	800297c <DS3231_EnableOscillator+0x2c>
 800297a:	2200      	movs	r2, #0
 800297c:	4313      	orrs	r3, r2
 800297e:	b25b      	sxtb	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4619      	mov	r1, r3
 8002984:	200e      	movs	r0, #14
 8002986:	f7ff ff63 	bl	8002850 <DS3231_SetRegByte>
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800299c:	200e      	movs	r0, #14
 800299e:	f7ff ff75 	bl	800288c <DS3231_GetRegByte>
 80029a2:	4603      	mov	r3, r0
 80029a4:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	f023 0302 	bic.w	r3, r3, #2
 80029ae:	b25a      	sxtb	r2, r3
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	b25b      	sxtb	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	4619      	mov	r1, r3
 80029c4:	200e      	movs	r0, #14
 80029c6:	f7ff ff43 	bl	8002850 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80029ca:	2001      	movs	r0, #1
 80029cc:	f7ff ff80 	bl	80028d0 <DS3231_SetInterruptMode>
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80029de:	200f      	movs	r0, #15
 80029e0:	f7ff ff54 	bl	800288c <DS3231_GetRegByte>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f023 0302 	bic.w	r3, r3, #2
 80029ea:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f023 0302 	bic.w	r3, r3, #2
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	200f      	movs	r0, #15
 80029f8:	f7ff ff2a 	bl	8002850 <DS3231_SetRegByte>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002a0e:	200e      	movs	r0, #14
 8002a10:	f7ff ff3c 	bl	800288c <DS3231_GetRegByte>
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	b25a      	sxtb	r2, r3
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	200e      	movs	r0, #14
 8002a36:	f7ff ff0b 	bl	8002850 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7ff ff48 	bl	80028d0 <DS3231_SetInterruptMode>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002a4e:	200f      	movs	r0, #15
 8002a50:	f7ff ff1c 	bl	800288c <DS3231_GetRegByte>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4619      	mov	r1, r3
 8002a66:	200f      	movs	r0, #15
 8002a68:	f7ff fef2 	bl	8002850 <DS3231_SetRegByte>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f7ff ff07 	bl	800288c <DS3231_GetRegByte>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 f866 	bl	8002b52 <DS3231_DecodeBCD>
 8002a86:	4603      	mov	r3, r0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002a90:	2002      	movs	r0, #2
 8002a92:	f7ff fefb 	bl	800288c <DS3231_GetRegByte>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f85a 	bl	8002b52 <DS3231_DecodeBCD>
 8002a9e:	4603      	mov	r3, r0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f7ff feef 	bl	800288c <DS3231_GetRegByte>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f84e 	bl	8002b52 <DS3231_DecodeBCD>
 8002ab6:	4603      	mov	r3, r0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}

08002abc <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f85b 	bl	8002b84 <DS3231_EncodeBCD>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	f7ff febc 	bl	8002850 <DS3231_SetRegByte>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f846 	bl	8002b84 <DS3231_EncodeBCD>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4619      	mov	r1, r3
 8002afc:	2002      	movs	r0, #2
 8002afe:	f7ff fea7 	bl	8002850 <DS3231_SetRegByte>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f834 	bl	8002b84 <DS3231_EncodeBCD>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4619      	mov	r1, r3
 8002b20:	2001      	movs	r0, #1
 8002b22:	f7ff fe95 	bl	8002850 <DS3231_SetRegByte>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f822 	bl	8002b84 <DS3231_EncodeBCD>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7ff fe83 	bl	8002850 <DS3231_SetRegByte>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	0092      	lsls	r2, r2, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	b2db      	uxtb	r3, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002b8e:	79fa      	ldrb	r2, [r7, #7]
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <DS3231_EncodeBCD+0x40>)
 8002b92:	fba3 1302 	umull	r1, r3, r3, r2
 8002b96:	08d9      	lsrs	r1, r3, #3
 8002b98:	460b      	mov	r3, r1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	4907      	ldr	r1, [pc, #28]	; (8002bc4 <DS3231_EncodeBCD+0x40>)
 8002ba8:	fba1 1303 	umull	r1, r3, r1, r3
 8002bac:	08db      	lsrs	r3, r3, #3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	b2db      	uxtb	r3, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	cccccccd 	.word	0xcccccccd

08002bc8 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8002bcc:	bf00      	nop
 8002bce:	f008 fd07 	bl	800b5e0 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <eeprom_wait+0x1c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d9f7      	bls.n	8002bce <eeprom_wait+0x6>
    {
    }
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	2000024c 	.word	0x2000024c

08002be8 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af04      	add	r7, sp, #16
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8002bf4:	f7ff ffe8 	bl	8002bc8 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	9102      	str	r1, [sp, #8]
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	21a0      	movs	r1, #160	; 0xa0
 8002c10:	4803      	ldr	r0, [pc, #12]	; (8002c20 <eeprom_read+0x38>)
 8002c12:	f00a fa0f 	bl	800d034 <HAL_I2C_Mem_Read>
 8002c16:	4603      	mov	r3, r0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000394 	.word	0x20000394

08002c24 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af04      	add	r7, sp, #16
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002c30:	f7ff ffca 	bl	8002bc8 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	9102      	str	r1, [sp, #8]
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2301      	movs	r3, #1
 8002c4a:	21a0      	movs	r1, #160	; 0xa0
 8002c4c:	4807      	ldr	r0, [pc, #28]	; (8002c6c <eeprom_write+0x48>)
 8002c4e:	f00a f8f7 	bl	800ce40 <HAL_I2C_Mem_Write>
 8002c52:	4603      	mov	r3, r0
 8002c54:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002c56:	f008 fcc3 	bl	800b5e0 <HAL_GetTick>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <eeprom_write+0x4c>)
 8002c5e:	6013      	str	r3, [r2, #0]

    return rc;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000394 	.word	0x20000394
 8002c70:	2000024c 	.word	0x2000024c

08002c74 <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	71fb      	strb	r3, [r7, #7]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002c84:	79bb      	ldrb	r3, [r7, #6]
 8002c86:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <EEPROM_RelayStateUpdate+0x2a>
 8002c8e:	f107 030f 	add.w	r3, r7, #15
 8002c92:	2201      	movs	r2, #1
 8002c94:	4619      	mov	r1, r3
 8002c96:	202e      	movs	r0, #46	; 0x2e
 8002c98:	f7ff ffc4 	bl	8002c24 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002c9c:	e01f      	b.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d107      	bne.n	8002cb4 <EEPROM_RelayStateUpdate+0x40>
 8002ca4:	f107 030f 	add.w	r3, r7, #15
 8002ca8:	2201      	movs	r2, #1
 8002caa:	4619      	mov	r1, r3
 8002cac:	202f      	movs	r0, #47	; 0x2f
 8002cae:	f7ff ffb9 	bl	8002c24 <eeprom_write>
}
 8002cb2:	e014      	b.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d107      	bne.n	8002cca <EEPROM_RelayStateUpdate+0x56>
 8002cba:	f107 030f 	add.w	r3, r7, #15
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	2030      	movs	r0, #48	; 0x30
 8002cc4:	f7ff ffae 	bl	8002c24 <eeprom_write>
}
 8002cc8:	e009      	b.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d106      	bne.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
 8002cd0:	f107 030f 	add.w	r3, r7, #15
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	2031      	movs	r0, #49	; 0x31
 8002cda:	f7ff ffa3 	bl	8002c24 <eeprom_write>
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	460a      	mov	r2, r1
 8002cf0:	71fb      	strb	r3, [r7, #7]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002cf6:	79bb      	ldrb	r3, [r7, #6]
 8002cf8:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <EEPROM_LightStateUpdate+0x2a>
 8002d00:	f107 030f 	add.w	r3, r7, #15
 8002d04:	2201      	movs	r2, #1
 8002d06:	4619      	mov	r1, r3
 8002d08:	2033      	movs	r0, #51	; 0x33
 8002d0a:	f7ff ff8b 	bl	8002c24 <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002d0e:	e01f      	b.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d107      	bne.n	8002d26 <EEPROM_LightStateUpdate+0x40>
 8002d16:	f107 030f 	add.w	r3, r7, #15
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2034      	movs	r0, #52	; 0x34
 8002d20:	f7ff ff80 	bl	8002c24 <eeprom_write>
}
 8002d24:	e014      	b.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d107      	bne.n	8002d3c <EEPROM_LightStateUpdate+0x56>
 8002d2c:	f107 030f 	add.w	r3, r7, #15
 8002d30:	2201      	movs	r2, #1
 8002d32:	4619      	mov	r1, r3
 8002d34:	2035      	movs	r0, #53	; 0x35
 8002d36:	f7ff ff75 	bl	8002c24 <eeprom_write>
}
 8002d3a:	e009      	b.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d106      	bne.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
 8002d42:	f107 030f 	add.w	r3, r7, #15
 8002d46:	2201      	movs	r2, #1
 8002d48:	4619      	mov	r1, r3
 8002d4a:	2036      	movs	r0, #54	; 0x36
 8002d4c:	f7ff ff6a 	bl	8002c24 <eeprom_write>
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d107      	bne.n	8002d7c <EEPROM_RelayStateRead+0x24>
 8002d6c:	f107 030f 	add.w	r3, r7, #15
 8002d70:	2201      	movs	r2, #1
 8002d72:	4619      	mov	r1, r3
 8002d74:	202e      	movs	r0, #46	; 0x2e
 8002d76:	f7ff ff37 	bl	8002be8 <eeprom_read>
 8002d7a:	e01f      	b.n	8002dbc <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d107      	bne.n	8002d92 <EEPROM_RelayStateRead+0x3a>
 8002d82:	f107 030f 	add.w	r3, r7, #15
 8002d86:	2201      	movs	r2, #1
 8002d88:	4619      	mov	r1, r3
 8002d8a:	202f      	movs	r0, #47	; 0x2f
 8002d8c:	f7ff ff2c 	bl	8002be8 <eeprom_read>
 8002d90:	e014      	b.n	8002dbc <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d107      	bne.n	8002da8 <EEPROM_RelayStateRead+0x50>
 8002d98:	f107 030f 	add.w	r3, r7, #15
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4619      	mov	r1, r3
 8002da0:	2030      	movs	r0, #48	; 0x30
 8002da2:	f7ff ff21 	bl	8002be8 <eeprom_read>
 8002da6:	e009      	b.n	8002dbc <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d106      	bne.n	8002dbc <EEPROM_RelayStateRead+0x64>
 8002dae:	f107 030f 	add.w	r3, r7, #15
 8002db2:	2201      	movs	r2, #1
 8002db4:	4619      	mov	r1, r3
 8002db6:	2031      	movs	r0, #49	; 0x31
 8002db8:	f7ff ff16 	bl	8002be8 <eeprom_read>

	return RelayStan;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <EEPROM_LightStateRead+0x24>
 8002dda:	f107 030f 	add.w	r3, r7, #15
 8002dde:	2201      	movs	r2, #1
 8002de0:	4619      	mov	r1, r3
 8002de2:	2033      	movs	r0, #51	; 0x33
 8002de4:	f7ff ff00 	bl	8002be8 <eeprom_read>
 8002de8:	e01f      	b.n	8002e2a <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d107      	bne.n	8002e00 <EEPROM_LightStateRead+0x3a>
 8002df0:	f107 030f 	add.w	r3, r7, #15
 8002df4:	2201      	movs	r2, #1
 8002df6:	4619      	mov	r1, r3
 8002df8:	2034      	movs	r0, #52	; 0x34
 8002dfa:	f7ff fef5 	bl	8002be8 <eeprom_read>
 8002dfe:	e014      	b.n	8002e2a <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d107      	bne.n	8002e16 <EEPROM_LightStateRead+0x50>
 8002e06:	f107 030f 	add.w	r3, r7, #15
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	2035      	movs	r0, #53	; 0x35
 8002e10:	f7ff feea 	bl	8002be8 <eeprom_read>
 8002e14:	e009      	b.n	8002e2a <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d106      	bne.n	8002e2a <EEPROM_LightStateRead+0x64>
 8002e1c:	f107 030f 	add.w	r3, r7, #15
 8002e20:	2201      	movs	r2, #1
 8002e22:	4619      	mov	r1, r3
 8002e24:	2036      	movs	r0, #54	; 0x36
 8002e26:	f7ff fedf 	bl	8002be8 <eeprom_read>

	return AktualnyStan;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f7ff ff8d 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <EEPROM_RelayStateRestore+0x18>
 8002e44:	2005      	movs	r0, #5
 8002e46:	f007 f98b 	bl	800a160 <SendComand>
 8002e4a:	e002      	b.n	8002e52 <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002e4c:	2006      	movs	r0, #6
 8002e4e:	f007 f987 	bl	800a160 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002e52:	2002      	movs	r0, #2
 8002e54:	f7ff ff80 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <EEPROM_RelayStateRestore+0x32>
 8002e5e:	2007      	movs	r0, #7
 8002e60:	f007 f97e 	bl	800a160 <SendComand>
 8002e64:	e002      	b.n	8002e6c <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002e66:	2008      	movs	r0, #8
 8002e68:	f007 f97a 	bl	800a160 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	f7ff ff73 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <EEPROM_RelayStateRestore+0x4c>
 8002e78:	2009      	movs	r0, #9
 8002e7a:	f007 f971 	bl	800a160 <SendComand>
 8002e7e:	e002      	b.n	8002e86 <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002e80:	200a      	movs	r0, #10
 8002e82:	f007 f96d 	bl	800a160 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002e86:	2004      	movs	r0, #4
 8002e88:	f7ff ff66 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <EEPROM_RelayStateRestore+0x66>
 8002e92:	200b      	movs	r0, #11
 8002e94:	f007 f964 	bl	800a160 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002e98:	e002      	b.n	8002ea0 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002e9a:	200c      	movs	r0, #12
 8002e9c:	f007 f960 	bl	800a160 <SendComand>
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f7ff ff8c 	bl	8002dc6 <EEPROM_LightStateRead>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <EEPROM_LightStateRestore+0x18>
 8002eb4:	200d      	movs	r0, #13
 8002eb6:	f007 f953 	bl	800a160 <SendComand>
 8002eba:	e002      	b.n	8002ec2 <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002ebc:	200e      	movs	r0, #14
 8002ebe:	f007 f94f 	bl	800a160 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002ec2:	2002      	movs	r0, #2
 8002ec4:	f7ff ff7f 	bl	8002dc6 <EEPROM_LightStateRead>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <EEPROM_LightStateRestore+0x32>
 8002ece:	200f      	movs	r0, #15
 8002ed0:	f007 f946 	bl	800a160 <SendComand>
 8002ed4:	e002      	b.n	8002edc <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002ed6:	2010      	movs	r0, #16
 8002ed8:	f007 f942 	bl	800a160 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f7ff ff72 	bl	8002dc6 <EEPROM_LightStateRead>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <EEPROM_LightStateRestore+0x4c>
 8002ee8:	2011      	movs	r0, #17
 8002eea:	f007 f939 	bl	800a160 <SendComand>
 8002eee:	e002      	b.n	8002ef6 <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002ef0:	2012      	movs	r0, #18
 8002ef2:	f007 f935 	bl	800a160 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002ef6:	2004      	movs	r0, #4
 8002ef8:	f7ff ff65 	bl	8002dc6 <EEPROM_LightStateRead>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <EEPROM_LightStateRestore+0x66>
 8002f02:	2013      	movs	r0, #19
 8002f04:	f007 f92c 	bl	800a160 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002f08:	e002      	b.n	8002f10 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002f0a:	2014      	movs	r0, #20
 8002f0c:	f007 f928 	bl	800a160 <SendComand>
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d107      	bne.n	8002f3a <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f2a:	f107 030a 	add.w	r3, r7, #10
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4619      	mov	r1, r3
 8002f32:	2005      	movs	r0, #5
 8002f34:	f7ff fe58 	bl	8002be8 <eeprom_read>
 8002f38:	e009      	b.n	8002f4e <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d106      	bne.n	8002f4e <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f40:	f107 030a 	add.w	r3, r7, #10
 8002f44:	2201      	movs	r2, #1
 8002f46:	4619      	mov	r1, r3
 8002f48:	200c      	movs	r0, #12
 8002f4a:	f7ff fe4d 	bl	8002be8 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	72fb      	strb	r3, [r7, #11]
 8002f56:	e016      	b.n	8002f86 <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002f58:	7abb      	ldrb	r3, [r7, #10]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002f64:	7afb      	ldrb	r3, [r7, #11]
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	4413      	add	r3, r2
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e004      	b.n	8002f7a <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002f70:	7afb      	ldrb	r3, [r7, #11]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f80:	7afb      	ldrb	r3, [r7, #11]
 8002f82:	3301      	adds	r3, #1
 8002f84:	72fb      	strb	r3, [r7, #11]
 8002f86:	7afb      	ldrb	r3, [r7, #11]
 8002f88:	2b06      	cmp	r3, #6
 8002f8a:	d9e5      	bls.n	8002f58 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	6039      	str	r1, [r7, #0]
 8002fa0:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	72fb      	strb	r3, [r7, #11]
 8002fae:	e011      	b.n	8002fd4 <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002fb0:	7afb      	ldrb	r3, [r7, #11]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	7abb      	ldrb	r3, [r7, #10]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002fce:	7afb      	ldrb	r3, [r7, #11]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	72fb      	strb	r3, [r7, #11]
 8002fd4:	7afb      	ldrb	r3, [r7, #11]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d9ea      	bls.n	8002fb0 <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002fe0:	f107 030a 	add.w	r3, r7, #10
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	2005      	movs	r0, #5
 8002fea:	f7ff fe1b 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002fee:	e009      	b.n	8003004 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d106      	bne.n	8003004 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002ff6:	f107 030a 	add.w	r3, r7, #10
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	200c      	movs	r0, #12
 8003000:	f7ff fe10 	bl	8002c24 <eeprom_write>
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10e      	bne.n	8003044 <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8003026:	f107 0309 	add.w	r3, r7, #9
 800302a:	2201      	movs	r2, #1
 800302c:	4619      	mov	r1, r3
 800302e:	2006      	movs	r0, #6
 8003030:	f7ff fdda 	bl	8002be8 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8003034:	f107 0308 	add.w	r3, r7, #8
 8003038:	2201      	movs	r2, #1
 800303a:	4619      	mov	r1, r3
 800303c:	2007      	movs	r0, #7
 800303e:	f7ff fdd3 	bl	8002be8 <eeprom_read>
 8003042:	e010      	b.n	8003066 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d10d      	bne.n	8003066 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 800304a:	f107 0309 	add.w	r3, r7, #9
 800304e:	2201      	movs	r2, #1
 8003050:	4619      	mov	r1, r3
 8003052:	200d      	movs	r0, #13
 8003054:	f7ff fdc8 	bl	8002be8 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8003058:	f107 0308 	add.w	r3, r7, #8
 800305c:	2201      	movs	r2, #1
 800305e:	4619      	mov	r1, r3
 8003060:	200e      	movs	r0, #14
 8003062:	f7ff fdc1 	bl	8002be8 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8003066:	2301      	movs	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 800306a:	2300      	movs	r3, #0
 800306c:	72fb      	strb	r3, [r7, #11]
 800306e:	e016      	b.n	800309e <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8003070:	7a7b      	ldrb	r3, [r7, #9]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 800307c:	7afb      	ldrb	r3, [r7, #11]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	4413      	add	r3, r2
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e004      	b.n	8003092 <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8003088:	7afb      	ldrb	r3, [r7, #11]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4413      	add	r3, r2
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	3301      	adds	r3, #1
 800309c:	72fb      	strb	r3, [r7, #11]
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d9e5      	bls.n	8003070 <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 80030a4:	2301      	movs	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 80030a8:	2304      	movs	r3, #4
 80030aa:	72bb      	strb	r3, [r7, #10]
 80030ac:	e016      	b.n	80030dc <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 80030ae:	7a3b      	ldrb	r3, [r7, #8]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 80030ba:	7abb      	ldrb	r3, [r7, #10]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e004      	b.n	80030d0 <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 80030c6:	7abb      	ldrb	r3, [r7, #10]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 80030d6:	7abb      	ldrb	r3, [r7, #10]
 80030d8:	3301      	adds	r3, #1
 80030da:	72bb      	strb	r3, [r7, #10]
 80030dc:	7abb      	ldrb	r3, [r7, #10]
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d9e5      	bls.n	80030ae <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 80030e2:	bf00      	nop
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 8003100:	2301      	movs	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8003104:	2300      	movs	r3, #0
 8003106:	72fb      	strb	r3, [r7, #11]
 8003108:	e011      	b.n	800312e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	7a7b      	ldrb	r3, [r7, #9]
 800311c:	4313      	orrs	r3, r2
 800311e:	b2db      	uxtb	r3, r3
 8003120:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8003128:	7afb      	ldrb	r3, [r7, #11]
 800312a:	3301      	adds	r3, #1
 800312c:	72fb      	strb	r3, [r7, #11]
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d9ea      	bls.n	800310a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8003134:	2301      	movs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8003138:	2304      	movs	r3, #4
 800313a:	72bb      	strb	r3, [r7, #10]
 800313c:	e011      	b.n	8003162 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 800313e:	7abb      	ldrb	r3, [r7, #10]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	4413      	add	r3, r2
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	7a3b      	ldrb	r3, [r7, #8]
 8003150:	4313      	orrs	r3, r2
 8003152:	b2db      	uxtb	r3, r3
 8003154:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 800315c:	7abb      	ldrb	r3, [r7, #10]
 800315e:	3301      	adds	r3, #1
 8003160:	72bb      	strb	r3, [r7, #10]
 8003162:	7abb      	ldrb	r3, [r7, #10]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d9ea      	bls.n	800313e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10e      	bne.n	800318c <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 800316e:	f107 0309 	add.w	r3, r7, #9
 8003172:	2201      	movs	r2, #1
 8003174:	4619      	mov	r1, r3
 8003176:	2006      	movs	r0, #6
 8003178:	f7ff fd54 	bl	8002c24 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	2201      	movs	r2, #1
 8003182:	4619      	mov	r1, r3
 8003184:	2007      	movs	r0, #7
 8003186:	f7ff fd4d 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 800318a:	e010      	b.n	80031ae <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d10d      	bne.n	80031ae <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8003192:	f107 0309 	add.w	r3, r7, #9
 8003196:	2201      	movs	r2, #1
 8003198:	4619      	mov	r1, r3
 800319a:	200d      	movs	r0, #13
 800319c:	f7ff fd42 	bl	8002c24 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 80031a0:	f107 0308 	add.w	r3, r7, #8
 80031a4:	2201      	movs	r2, #1
 80031a6:	4619      	mov	r1, r3
 80031a8:	200e      	movs	r0, #14
 80031aa:	f7ff fd3b 	bl	8002c24 <eeprom_write>
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	6039      	str	r1, [r7, #0]
 80031c0:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 80031cc:	f107 030f 	add.w	r3, r7, #15
 80031d0:	2201      	movs	r2, #1
 80031d2:	4619      	mov	r1, r3
 80031d4:	2008      	movs	r0, #8
 80031d6:	f7ff fd07 	bl	8002be8 <eeprom_read>
 80031da:	e009      	b.n	80031f0 <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d106      	bne.n	80031f0 <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 80031e2:	f107 030f 	add.w	r3, r7, #15
 80031e6:	2201      	movs	r2, #1
 80031e8:	4619      	mov	r1, r3
 80031ea:	200f      	movs	r0, #15
 80031ec:	f7ff fcfc 	bl	8002be8 <eeprom_read>
	}

	*hourOn = TempHour;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	701a      	strb	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	6039      	str	r1, [r7, #0]
 8003208:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d107      	bne.n	8003224 <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003214:	f107 030f 	add.w	r3, r7, #15
 8003218:	2201      	movs	r2, #1
 800321a:	4619      	mov	r1, r3
 800321c:	2009      	movs	r0, #9
 800321e:	f7ff fce3 	bl	8002be8 <eeprom_read>
 8003222:	e009      	b.n	8003238 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d106      	bne.n	8003238 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 800322a:	f107 030f 	add.w	r3, r7, #15
 800322e:	2201      	movs	r2, #1
 8003230:	4619      	mov	r1, r3
 8003232:	2010      	movs	r0, #16
 8003234:	f7ff fcd8 	bl	8002be8 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	701a      	strb	r2, [r3, #0]
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	6039      	str	r1, [r7, #0]
 8003250:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d107      	bne.n	800326c <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 800325c:	f107 030f 	add.w	r3, r7, #15
 8003260:	2201      	movs	r2, #1
 8003262:	4619      	mov	r1, r3
 8003264:	200a      	movs	r0, #10
 8003266:	f7ff fcbf 	bl	8002be8 <eeprom_read>
 800326a:	e009      	b.n	8003280 <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d106      	bne.n	8003280 <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 8003272:	f107 030f 	add.w	r3, r7, #15
 8003276:	2201      	movs	r2, #1
 8003278:	4619      	mov	r1, r3
 800327a:	2011      	movs	r0, #17
 800327c:	f7ff fcb4 	bl	8002be8 <eeprom_read>
	}

	*hourOff = TempHour;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	701a      	strb	r2, [r3, #0]

}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	6039      	str	r1, [r7, #0]
 8003298:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80032a4:	f107 030f 	add.w	r3, r7, #15
 80032a8:	2201      	movs	r2, #1
 80032aa:	4619      	mov	r1, r3
 80032ac:	200b      	movs	r0, #11
 80032ae:	f7ff fc9b 	bl	8002be8 <eeprom_read>
 80032b2:	e009      	b.n	80032c8 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d106      	bne.n	80032c8 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80032ba:	f107 030f 	add.w	r3, r7, #15
 80032be:	2201      	movs	r2, #1
 80032c0:	4619      	mov	r1, r3
 80032c2:	2012      	movs	r0, #18
 80032c4:	f7ff fc90 	bl	8002be8 <eeprom_read>
	}
	*minuteOff = TempMinute;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	701a      	strb	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	460a      	mov	r2, r1
 80032e0:	71fb      	strb	r3, [r7, #7]
 80032e2:	4613      	mov	r3, r2
 80032e4:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 80032e6:	79bb      	ldrb	r3, [r7, #6]
 80032e8:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <EEPROM_ScheduleHourOnUpdate+0x2a>
 80032f0:	f107 030f 	add.w	r3, r7, #15
 80032f4:	2201      	movs	r2, #1
 80032f6:	4619      	mov	r1, r3
 80032f8:	2008      	movs	r0, #8
 80032fa:	f7ff fc93 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 80032fe:	e009      	b.n	8003314 <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d106      	bne.n	8003314 <EEPROM_ScheduleHourOnUpdate+0x3e>
 8003306:	f107 030f 	add.w	r3, r7, #15
 800330a:	2201      	movs	r2, #1
 800330c:	4619      	mov	r1, r3
 800330e:	200f      	movs	r0, #15
 8003310:	f7ff fc88 	bl	8002c24 <eeprom_write>
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	460a      	mov	r2, r1
 8003326:	71fb      	strb	r3, [r7, #7]
 8003328:	4613      	mov	r3, r2
 800332a:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 800332c:	79bb      	ldrb	r3, [r7, #6]
 800332e:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 8003336:	f107 030f 	add.w	r3, r7, #15
 800333a:	2201      	movs	r2, #1
 800333c:	4619      	mov	r1, r3
 800333e:	2009      	movs	r0, #9
 8003340:	f7ff fc70 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 8003344:	e009      	b.n	800335a <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d106      	bne.n	800335a <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 800334c:	f107 030f 	add.w	r3, r7, #15
 8003350:	2201      	movs	r2, #1
 8003352:	4619      	mov	r1, r3
 8003354:	2010      	movs	r0, #16
 8003356:	f7ff fc65 	bl	8002c24 <eeprom_write>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	460a      	mov	r2, r1
 800336c:	71fb      	strb	r3, [r7, #7]
 800336e:	4613      	mov	r3, r2
 8003370:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 8003372:	79bb      	ldrb	r3, [r7, #6]
 8003374:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d107      	bne.n	800338c <EEPROM_ScheduleHourOffUpdate+0x2a>
 800337c:	f107 030f 	add.w	r3, r7, #15
 8003380:	2201      	movs	r2, #1
 8003382:	4619      	mov	r1, r3
 8003384:	200a      	movs	r0, #10
 8003386:	f7ff fc4d 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 800338a:	e009      	b.n	80033a0 <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d106      	bne.n	80033a0 <EEPROM_ScheduleHourOffUpdate+0x3e>
 8003392:	f107 030f 	add.w	r3, r7, #15
 8003396:	2201      	movs	r2, #1
 8003398:	4619      	mov	r1, r3
 800339a:	2011      	movs	r0, #17
 800339c:	f7ff fc42 	bl	8002c24 <eeprom_write>
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	460a      	mov	r2, r1
 80033b2:	71fb      	strb	r3, [r7, #7]
 80033b4:	4613      	mov	r3, r2
 80033b6:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80033b8:	79bb      	ldrb	r3, [r7, #6]
 80033ba:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80033c2:	f107 030f 	add.w	r3, r7, #15
 80033c6:	2201      	movs	r2, #1
 80033c8:	4619      	mov	r1, r3
 80033ca:	200b      	movs	r0, #11
 80033cc:	f7ff fc2a 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 80033d0:	e009      	b.n	80033e6 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d106      	bne.n	80033e6 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 80033d8:	f107 030f 	add.w	r3, r7, #15
 80033dc:	2201      	movs	r2, #1
 80033de:	4619      	mov	r1, r3
 80033e0:	2012      	movs	r0, #18
 80033e2:	f7ff fc1f 	bl	8002c24 <eeprom_write>
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <EEPROM_ActivitiesTimeRead>:

//
// ACTIVITIES DURATION TIME READ
uint32_t EEPROM_ActivitiesTimeRead(uint8_t NrOfActivities)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	4603      	mov	r3, r0
 80033f6:	71fb      	strb	r3, [r7, #7]
	uint8_t ActivitiesNumber = NrOfActivities;
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	73fb      	strb	r3, [r7, #15]
	uint32_t ActivitiesDurationX10Seconds = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
	if(1 == ActivitiesNumber) // if feeding
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d106      	bne.n	8003414 <EEPROM_ActivitiesTimeRead+0x26>
	{
		eeprom_read(EEPROM_ADR_ACTIVITIES_IN_10S, &ActivitiesDurationX10Seconds, sizeof(ActivitiesDurationX10Seconds));
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	2204      	movs	r2, #4
 800340c:	4619      	mov	r1, r3
 800340e:	2038      	movs	r0, #56	; 0x38
 8003410:	f7ff fbea 	bl	8002be8 <eeprom_read>
	}
	return ActivitiesDurationX10Seconds * 10;
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <EEPROM_ActivitiesTimeUpdate>:


//
// ACTIVITIES DURATION TIME UPDATE
void EEPROM_ActivitiesTimeUpdate(uint8_t NrOfActivities, uint32_t TimeInSeconds)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	6039      	str	r1, [r7, #0]
 8003432:	71fb      	strb	r3, [r7, #7]
	uint8_t ActivitiesNumber = NrOfActivities;
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	73fb      	strb	r3, [r7, #15]
	uint32_t Time = (TimeInSeconds/10);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4a09      	ldr	r2, [pc, #36]	; (8003460 <EEPROM_ActivitiesTimeUpdate+0x38>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	08db      	lsrs	r3, r3, #3
 8003442:	60bb      	str	r3, [r7, #8]

	if( 1 == ActivitiesNumber) // if feeding
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d106      	bne.n	8003458 <EEPROM_ActivitiesTimeUpdate+0x30>
	{
		eeprom_write(EEPROM_ADR_ACTIVITIES_IN_10S, &Time, sizeof(Time));
 800344a:	f107 0308 	add.w	r3, r7, #8
 800344e:	2204      	movs	r2, #4
 8003450:	4619      	mov	r1, r3
 8003452:	2038      	movs	r0, #56	; 0x38
 8003454:	f7ff fbe6 	bl	8002c24 <eeprom_write>
	}

}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	cccccccd 	.word	0xcccccccd

08003464 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800346a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800346e:	f7fe fe81 	bl	8002174 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 8003472:	238c      	movs	r3, #140	; 0x8c
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	23f0      	movs	r3, #240	; 0xf0
 8003478:	4aae      	ldr	r2, [pc, #696]	; (8003734 <system_init+0x2d0>)
 800347a:	2132      	movs	r1, #50	; 0x32
 800347c:	201e      	movs	r0, #30
 800347e:	f7fe fe4e 	bl	800211e <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003482:	48ad      	ldr	r0, [pc, #692]	; (8003738 <system_init+0x2d4>)
 8003484:	f7fe fa72 	bl	800196c <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8003488:	49ac      	ldr	r1, [pc, #688]	; (800373c <system_init+0x2d8>)
 800348a:	48ad      	ldr	r0, [pc, #692]	; (8003740 <system_init+0x2dc>)
 800348c:	f00f fe38 	bl	8013100 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003490:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	2300      	movs	r3, #0
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	2300      	movs	r3, #0
 800349c:	220a      	movs	r2, #10
 800349e:	213c      	movs	r1, #60	; 0x3c
 80034a0:	48a7      	ldr	r0, [pc, #668]	; (8003740 <system_init+0x2dc>)
 80034a2:	f7fe fc7d 	bl	8001da0 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 80034a6:	f008 f89b 	bl	800b5e0 <HAL_GetTick>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4aa5      	ldr	r2, [pc, #660]	; (8003744 <system_init+0x2e0>)
 80034ae:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 80034b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	2305      	movs	r3, #5
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2314      	movs	r3, #20
 80034bc:	2214      	movs	r2, #20
 80034be:	21be      	movs	r1, #190	; 0xbe
 80034c0:	203c      	movs	r0, #60	; 0x3c
 80034c2:	f7fe f985 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 80034c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	2305      	movs	r3, #5
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2314      	movs	r3, #20
 80034d2:	2214      	movs	r2, #20
 80034d4:	21be      	movs	r1, #190	; 0xbe
 80034d6:	205a      	movs	r0, #90	; 0x5a
 80034d8:	f7fe f97a 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 80034dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	2305      	movs	r3, #5
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	2314      	movs	r3, #20
 80034e8:	2214      	movs	r2, #20
 80034ea:	21be      	movs	r1, #190	; 0xbe
 80034ec:	2078      	movs	r0, #120	; 0x78
 80034ee:	f7fe f96f 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 80034f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	2305      	movs	r3, #5
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2314      	movs	r3, #20
 80034fe:	2214      	movs	r2, #20
 8003500:	21be      	movs	r1, #190	; 0xbe
 8003502:	2096      	movs	r0, #150	; 0x96
 8003504:	f7fe f964 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 8003508:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	2305      	movs	r3, #5
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2314      	movs	r3, #20
 8003514:	2214      	movs	r2, #20
 8003516:	21be      	movs	r1, #190	; 0xbe
 8003518:	20b4      	movs	r0, #180	; 0xb4
 800351a:	f7fe f959 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 800351e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	2305      	movs	r3, #5
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2314      	movs	r3, #20
 800352a:	2214      	movs	r2, #20
 800352c:	21be      	movs	r1, #190	; 0xbe
 800352e:	20d2      	movs	r0, #210	; 0xd2
 8003530:	f7fe f94e 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 8003534:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	2305      	movs	r3, #5
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	2314      	movs	r3, #20
 8003540:	2214      	movs	r2, #20
 8003542:	21be      	movs	r1, #190	; 0xbe
 8003544:	20f0      	movs	r0, #240	; 0xf0
 8003546:	f7fe f943 	bl	80017d0 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 800354a:	f008 f849 	bl	800b5e0 <HAL_GetTick>
 800354e:	4603      	mov	r3, r0
 8003550:	4a7c      	ldr	r2, [pc, #496]	; (8003744 <system_init+0x2e0>)
 8003552:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 8003554:	487c      	ldr	r0, [pc, #496]	; (8003748 <system_init+0x2e4>)
 8003556:	f7fe fa09 	bl	800196c <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800355a:	20c8      	movs	r0, #200	; 0xc8
 800355c:	f002 fade 	bl	8005b1c <initWait>
	  	  LastTime = HAL_GetTick();
 8003560:	f008 f83e 	bl	800b5e0 <HAL_GetTick>
 8003564:	4603      	mov	r3, r0
 8003566:	4a77      	ldr	r2, [pc, #476]	; (8003744 <system_init+0x2e0>)
 8003568:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 800356a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	2305      	movs	r3, #5
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	2314      	movs	r3, #20
 8003576:	2214      	movs	r2, #20
 8003578:	21be      	movs	r1, #190	; 0xbe
 800357a:	203c      	movs	r0, #60	; 0x3c
 800357c:	f7fe f9a5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 8003580:	2201      	movs	r2, #1
 8003582:	4972      	ldr	r1, [pc, #456]	; (800374c <system_init+0x2e8>)
 8003584:	2001      	movs	r0, #1
 8003586:	f7ff fb2f 	bl	8002be8 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 800358a:	2025      	movs	r0, #37	; 0x25
 800358c:	f006 fde8 	bl	800a160 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003590:	486f      	ldr	r0, [pc, #444]	; (8003750 <system_init+0x2ec>)
 8003592:	f007 fd45 	bl	800b020 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 8003596:	496f      	ldr	r1, [pc, #444]	; (8003754 <system_init+0x2f0>)
 8003598:	4869      	ldr	r0, [pc, #420]	; (8003740 <system_init+0x2dc>)
 800359a:	f00f fdb1 	bl	8013100 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800359e:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	2301      	movs	r3, #1
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	2300      	movs	r3, #0
 80035aa:	22dc      	movs	r2, #220	; 0xdc
 80035ac:	2114      	movs	r1, #20
 80035ae:	4864      	ldr	r0, [pc, #400]	; (8003740 <system_init+0x2dc>)
 80035b0:	f7fe fbf6 	bl	8001da0 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80035b4:	20c8      	movs	r0, #200	; 0xc8
 80035b6:	f002 fab1 	bl	8005b1c <initWait>
	  	  	  LastTime = HAL_GetTick();
 80035ba:	f008 f811 	bl	800b5e0 <HAL_GetTick>
 80035be:	4603      	mov	r3, r0
 80035c0:	4a60      	ldr	r2, [pc, #384]	; (8003744 <system_init+0x2e0>)
 80035c2:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 80035c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	2305      	movs	r3, #5
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	2314      	movs	r3, #20
 80035d0:	2214      	movs	r2, #20
 80035d2:	21be      	movs	r1, #190	; 0xbe
 80035d4:	205a      	movs	r0, #90	; 0x5a
 80035d6:	f7fe f978 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 80035da:	201b      	movs	r0, #27
 80035dc:	f006 fdc0 	bl	800a160 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 80035e0:	f7ff fc28 	bl	8002e34 <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80035e4:	485a      	ldr	r0, [pc, #360]	; (8003750 <system_init+0x2ec>)
 80035e6:	f007 fd1b 	bl	800b020 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 80035ea:	495b      	ldr	r1, [pc, #364]	; (8003758 <system_init+0x2f4>)
 80035ec:	4854      	ldr	r0, [pc, #336]	; (8003740 <system_init+0x2dc>)
 80035ee:	f00f fd87 	bl	8013100 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035f2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	2301      	movs	r3, #1
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2300      	movs	r3, #0
 80035fe:	22dc      	movs	r2, #220	; 0xdc
 8003600:	2114      	movs	r1, #20
 8003602:	484f      	ldr	r0, [pc, #316]	; (8003740 <system_init+0x2dc>)
 8003604:	f7fe fbcc 	bl	8001da0 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003608:	20c8      	movs	r0, #200	; 0xc8
 800360a:	f002 fa87 	bl	8005b1c <initWait>
  	  	  	  LastTime = HAL_GetTick();
 800360e:	f007 ffe7 	bl	800b5e0 <HAL_GetTick>
 8003612:	4603      	mov	r3, r0
 8003614:	4a4b      	ldr	r2, [pc, #300]	; (8003744 <system_init+0x2e0>)
 8003616:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 8003618:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2305      	movs	r3, #5
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2314      	movs	r3, #20
 8003624:	2214      	movs	r2, #20
 8003626:	21be      	movs	r1, #190	; 0xbe
 8003628:	2078      	movs	r0, #120	; 0x78
 800362a:	f7fe f94e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 800362e:	2004      	movs	r0, #4
 8003630:	f006 fd96 	bl	800a160 <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 8003634:	2001      	movs	r0, #1
 8003636:	f004 ff8d 	bl	8008554 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800363a:	20c8      	movs	r0, #200	; 0xc8
 800363c:	f002 fa6e 	bl	8005b1c <initWait>
			  LastTime = HAL_GetTick();
 8003640:	f007 ffce 	bl	800b5e0 <HAL_GetTick>
 8003644:	4603      	mov	r3, r0
 8003646:	4a3f      	ldr	r2, [pc, #252]	; (8003744 <system_init+0x2e0>)
 8003648:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 800364a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	2305      	movs	r3, #5
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2314      	movs	r3, #20
 8003656:	2214      	movs	r2, #20
 8003658:	21be      	movs	r1, #190	; 0xbe
 800365a:	2096      	movs	r0, #150	; 0x96
 800365c:	f7fe f935 	bl	80018ca <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 8003660:	f7ff fc20 	bl	8002ea4 <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003664:	483a      	ldr	r0, [pc, #232]	; (8003750 <system_init+0x2ec>)
 8003666:	f007 fcdb 	bl	800b020 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 800366a:	493c      	ldr	r1, [pc, #240]	; (800375c <system_init+0x2f8>)
 800366c:	4834      	ldr	r0, [pc, #208]	; (8003740 <system_init+0x2dc>)
 800366e:	f00f fd47 	bl	8013100 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003672:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	2301      	movs	r3, #1
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	2300      	movs	r3, #0
 800367e:	22dc      	movs	r2, #220	; 0xdc
 8003680:	2114      	movs	r1, #20
 8003682:	482f      	ldr	r0, [pc, #188]	; (8003740 <system_init+0x2dc>)
 8003684:	f7fe fb8c 	bl	8001da0 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003688:	20c8      	movs	r0, #200	; 0xc8
 800368a:	f002 fa47 	bl	8005b1c <initWait>
			  LastTime = HAL_GetTick();
 800368e:	f007 ffa7 	bl	800b5e0 <HAL_GetTick>
 8003692:	4603      	mov	r3, r0
 8003694:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <system_init+0x2e0>)
 8003696:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 8003698:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	2305      	movs	r3, #5
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2314      	movs	r3, #20
 80036a4:	2214      	movs	r2, #20
 80036a6:	21be      	movs	r1, #190	; 0xbe
 80036a8:	20b4      	movs	r0, #180	; 0xb4
 80036aa:	f7fe f90e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 80036ae:	2003      	movs	r0, #3
 80036b0:	f006 fd56 	bl	800a160 <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 80036b4:	2002      	movs	r0, #2
 80036b6:	f004 ff4d 	bl	8008554 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80036ba:	20c8      	movs	r0, #200	; 0xc8
 80036bc:	f002 fa2e 	bl	8005b1c <initWait>
			  LastTime = HAL_GetTick();
 80036c0:	f007 ff8e 	bl	800b5e0 <HAL_GetTick>
 80036c4:	4603      	mov	r3, r0
 80036c6:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <system_init+0x2e0>)
 80036c8:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 80036ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2305      	movs	r3, #5
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2314      	movs	r3, #20
 80036d6:	2214      	movs	r2, #20
 80036d8:	21be      	movs	r1, #190	; 0xbe
 80036da:	20d2      	movs	r0, #210	; 0xd2
 80036dc:	f7fe f8f5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80036e0:	2015      	movs	r0, #21
 80036e2:	f006 fd3d 	bl	800a160 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80036e6:	20c8      	movs	r0, #200	; 0xc8
 80036e8:	f002 fa18 	bl	8005b1c <initWait>
			  LastTime = HAL_GetTick();
 80036ec:	f007 ff78 	bl	800b5e0 <HAL_GetTick>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4a14      	ldr	r2, [pc, #80]	; (8003744 <system_init+0x2e0>)
 80036f4:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 80036f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	2305      	movs	r3, #5
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2314      	movs	r3, #20
 8003702:	2214      	movs	r2, #20
 8003704:	21be      	movs	r1, #190	; 0xbe
 8003706:	20f0      	movs	r0, #240	; 0xf0
 8003708:	f7fe f8df 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 800370c:	2016      	movs	r0, #22
 800370e:	f006 fd27 	bl	800a160 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003712:	480f      	ldr	r0, [pc, #60]	; (8003750 <system_init+0x2ec>)
 8003714:	f007 fc84 	bl	800b020 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 8003718:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800371c:	f002 f9fe 	bl	8005b1c <initWait>
			  LastTime = HAL_GetTick();
 8003720:	f007 ff5e 	bl	800b5e0 <HAL_GetTick>
 8003724:	4603      	mov	r3, r0
 8003726:	4a07      	ldr	r2, [pc, #28]	; (8003744 <system_init+0x2e0>)
 8003728:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 800372a:	2301      	movs	r3, #1
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	0801789c 	.word	0x0801789c
 8003738:	0802a964 	.word	0x0802a964
 800373c:	08016d88 	.word	0x08016d88
 8003740:	200002cc 	.word	0x200002cc
 8003744:	20000254 	.word	0x20000254
 8003748:	080289ec 	.word	0x080289ec
 800374c:	20000034 	.word	0x20000034
 8003750:	200004fc 	.word	0x200004fc
 8003754:	08016d9c 	.word	0x08016d9c
 8003758:	08016db8 	.word	0x08016db8
 800375c:	08016dd8 	.word	0x08016dd8

08003760 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af02      	add	r7, sp, #8
 8003766:	ed87 0a05 	vstr	s0, [r7, #20]
 800376a:	edc7 0a04 	vstr	s1, [r7, #16]
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	460b      	mov	r3, r1
 8003772:	ed87 1a01 	vstr	s2, [r7, #4]
 8003776:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003778:	f24c 6018 	movw	r0, #50712	; 0xc618
 800377c:	f7fe fcfa 	bl	8002174 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 8003780:	2003      	movs	r0, #3
 8003782:	f006 fced 	bl	800a160 <SendComand>
	  SendComand(UCMD_PRES_1);
 8003786:	2004      	movs	r0, #4
 8003788:	f006 fcea 	bl	800a160 <SendComand>
	  SendComand(UCMD_TEMP_2);
 800378c:	201b      	movs	r0, #27
 800378e:	f006 fce7 	bl	800a160 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8003792:	f7ff f97b 	bl	8002a8c <DS3231_GetHour>
 8003796:	4603      	mov	r3, r0
 8003798:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 800379a:	f7ff f983 	bl	8002aa4 <DS3231_GetMinute>
 800379e:	4603      	mov	r3, r0
 80037a0:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 80037a2:	4881      	ldr	r0, [pc, #516]	; (80039a8 <showCurrentParameters+0x248>)
 80037a4:	f7fe f8e2 	bl	800196c <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 80037a8:	4980      	ldr	r1, [pc, #512]	; (80039ac <showCurrentParameters+0x24c>)
 80037aa:	4881      	ldr	r0, [pc, #516]	; (80039b0 <showCurrentParameters+0x250>)
 80037ac:	f00f fca8 	bl	8013100 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037b0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	2300      	movs	r3, #0
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80037be:	220a      	movs	r2, #10
 80037c0:	212f      	movs	r1, #47	; 0x2f
 80037c2:	487b      	ldr	r0, [pc, #492]	; (80039b0 <showCurrentParameters+0x250>)
 80037c4:	f7fe faec 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80037c8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2329      	movs	r3, #41	; 0x29
 80037d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037d4:	2129      	movs	r1, #41	; 0x29
 80037d6:	2000      	movs	r0, #0
 80037d8:	f7fd fe18 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80037dc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	232b      	movs	r3, #43	; 0x2b
 80037e4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037e8:	212b      	movs	r1, #43	; 0x2b
 80037ea:	2000      	movs	r0, #0
 80037ec:	f7fd fe0e 	bl	800140c <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 80037f0:	7ffb      	ldrb	r3, [r7, #31]
 80037f2:	2b09      	cmp	r3, #9
 80037f4:	d809      	bhi.n	800380a <showCurrentParameters+0xaa>
 80037f6:	7fbb      	ldrb	r3, [r7, #30]
 80037f8:	2b09      	cmp	r3, #9
 80037fa:	d806      	bhi.n	800380a <showCurrentParameters+0xaa>
 80037fc:	7ffa      	ldrb	r2, [r7, #31]
 80037fe:	7fbb      	ldrb	r3, [r7, #30]
 8003800:	496c      	ldr	r1, [pc, #432]	; (80039b4 <showCurrentParameters+0x254>)
 8003802:	486b      	ldr	r0, [pc, #428]	; (80039b0 <showCurrentParameters+0x250>)
 8003804:	f00f fc7c 	bl	8013100 <siprintf>
 8003808:	e019      	b.n	800383e <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 800380a:	7ffb      	ldrb	r3, [r7, #31]
 800380c:	2b09      	cmp	r3, #9
 800380e:	d806      	bhi.n	800381e <showCurrentParameters+0xbe>
 8003810:	7ffa      	ldrb	r2, [r7, #31]
 8003812:	7fbb      	ldrb	r3, [r7, #30]
 8003814:	4968      	ldr	r1, [pc, #416]	; (80039b8 <showCurrentParameters+0x258>)
 8003816:	4866      	ldr	r0, [pc, #408]	; (80039b0 <showCurrentParameters+0x250>)
 8003818:	f00f fc72 	bl	8013100 <siprintf>
 800381c:	e00f      	b.n	800383e <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 800381e:	7fbb      	ldrb	r3, [r7, #30]
 8003820:	2b09      	cmp	r3, #9
 8003822:	d806      	bhi.n	8003832 <showCurrentParameters+0xd2>
 8003824:	7ffa      	ldrb	r2, [r7, #31]
 8003826:	7fbb      	ldrb	r3, [r7, #30]
 8003828:	4964      	ldr	r1, [pc, #400]	; (80039bc <showCurrentParameters+0x25c>)
 800382a:	4861      	ldr	r0, [pc, #388]	; (80039b0 <showCurrentParameters+0x250>)
 800382c:	f00f fc68 	bl	8013100 <siprintf>
 8003830:	e005      	b.n	800383e <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8003832:	7ffa      	ldrb	r2, [r7, #31]
 8003834:	7fbb      	ldrb	r3, [r7, #30]
 8003836:	4962      	ldr	r1, [pc, #392]	; (80039c0 <showCurrentParameters+0x260>)
 8003838:	485d      	ldr	r0, [pc, #372]	; (80039b0 <showCurrentParameters+0x250>)
 800383a:	f00f fc61 	bl	8013100 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800383e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	2300      	movs	r3, #0
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	2300      	movs	r3, #0
 800384a:	2232      	movs	r2, #50	; 0x32
 800384c:	2114      	movs	r1, #20
 800384e:	4858      	ldr	r0, [pc, #352]	; (80039b0 <showCurrentParameters+0x250>)
 8003850:	f7fe faa6 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8003854:	4b5b      	ldr	r3, [pc, #364]	; (80039c4 <showCurrentParameters+0x264>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7fc fe8d 	bl	8000578 <__aeabi_f2d>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4959      	ldr	r1, [pc, #356]	; (80039c8 <showCurrentParameters+0x268>)
 8003864:	4852      	ldr	r0, [pc, #328]	; (80039b0 <showCurrentParameters+0x250>)
 8003866:	f00f fc4b 	bl	8013100 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800386a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	2301      	movs	r3, #1
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	2300      	movs	r3, #0
 8003876:	2250      	movs	r2, #80	; 0x50
 8003878:	2114      	movs	r1, #20
 800387a:	484d      	ldr	r0, [pc, #308]	; (80039b0 <showCurrentParameters+0x250>)
 800387c:	f7fe fa90 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8003880:	4b52      	ldr	r3, [pc, #328]	; (80039cc <showCurrentParameters+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fc fe77 	bl	8000578 <__aeabi_f2d>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4950      	ldr	r1, [pc, #320]	; (80039d0 <showCurrentParameters+0x270>)
 8003890:	4847      	ldr	r0, [pc, #284]	; (80039b0 <showCurrentParameters+0x250>)
 8003892:	f00f fc35 	bl	8013100 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003896:	f24c 6318 	movw	r3, #50712	; 0xc618
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	2300      	movs	r3, #0
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	226e      	movs	r2, #110	; 0x6e
 80038a4:	2114      	movs	r1, #20
 80038a6:	4842      	ldr	r0, [pc, #264]	; (80039b0 <showCurrentParameters+0x250>)
 80038a8:	f7fe fa7a 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 80038ac:	4b49      	ldr	r3, [pc, #292]	; (80039d4 <showCurrentParameters+0x274>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	4949      	ldr	r1, [pc, #292]	; (80039d8 <showCurrentParameters+0x278>)
 80038b4:	483e      	ldr	r0, [pc, #248]	; (80039b0 <showCurrentParameters+0x250>)
 80038b6:	f00f fc23 	bl	8013100 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	2300      	movs	r3, #0
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2300      	movs	r3, #0
 80038c6:	228c      	movs	r2, #140	; 0x8c
 80038c8:	2114      	movs	r1, #20
 80038ca:	4839      	ldr	r0, [pc, #228]	; (80039b0 <showCurrentParameters+0x250>)
 80038cc:	f7fe fa68 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 80038d0:	4b42      	ldr	r3, [pc, #264]	; (80039dc <showCurrentParameters+0x27c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fe4f 	bl	8000578 <__aeabi_f2d>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4940      	ldr	r1, [pc, #256]	; (80039e0 <showCurrentParameters+0x280>)
 80038e0:	4833      	ldr	r0, [pc, #204]	; (80039b0 <showCurrentParameters+0x250>)
 80038e2:	f00f fc0d 	bl	8013100 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038e6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	2300      	movs	r3, #0
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	2300      	movs	r3, #0
 80038f2:	22aa      	movs	r2, #170	; 0xaa
 80038f4:	2114      	movs	r1, #20
 80038f6:	482e      	ldr	r0, [pc, #184]	; (80039b0 <showCurrentParameters+0x250>)
 80038f8:	f7fe fa52 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 80038fc:	4839      	ldr	r0, [pc, #228]	; (80039e4 <showCurrentParameters+0x284>)
 80038fe:	f7fe f835 	bl	800196c <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003902:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	2305      	movs	r3, #5
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	2314      	movs	r3, #20
 800390e:	225f      	movs	r2, #95	; 0x5f
 8003910:	21d8      	movs	r1, #216	; 0xd8
 8003912:	20dc      	movs	r0, #220	; 0xdc
 8003914:	f7fd ffd9 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 8003918:	4933      	ldr	r1, [pc, #204]	; (80039e8 <showCurrentParameters+0x288>)
 800391a:	4825      	ldr	r0, [pc, #148]	; (80039b0 <showCurrentParameters+0x250>)
 800391c:	f00f fbf0 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003920:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	2300      	movs	r3, #0
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	22da      	movs	r2, #218	; 0xda
 800392e:	21df      	movs	r1, #223	; 0xdf
 8003930:	481f      	ldr	r0, [pc, #124]	; (80039b0 <showCurrentParameters+0x250>)
 8003932:	f7fe fa35 	bl	8001da0 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003936:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	2305      	movs	r3, #5
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2314      	movs	r3, #20
 8003942:	2264      	movs	r2, #100	; 0x64
 8003944:	21d8      	movs	r1, #216	; 0xd8
 8003946:	200a      	movs	r0, #10
 8003948:	f7fd ffbf 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 800394c:	4927      	ldr	r1, [pc, #156]	; (80039ec <showCurrentParameters+0x28c>)
 800394e:	4818      	ldr	r0, [pc, #96]	; (80039b0 <showCurrentParameters+0x250>)
 8003950:	f00f fbd6 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003954:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	2300      	movs	r3, #0
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	2300      	movs	r3, #0
 8003960:	22da      	movs	r2, #218	; 0xda
 8003962:	2114      	movs	r1, #20
 8003964:	4812      	ldr	r0, [pc, #72]	; (80039b0 <showCurrentParameters+0x250>)
 8003966:	f7fe fa1b 	bl	8001da0 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 800396a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	2305      	movs	r3, #5
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2314      	movs	r3, #20
 8003976:	225a      	movs	r2, #90	; 0x5a
 8003978:	21d8      	movs	r1, #216	; 0xd8
 800397a:	2078      	movs	r0, #120	; 0x78
 800397c:	f7fd ffa5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8003980:	491b      	ldr	r1, [pc, #108]	; (80039f0 <showCurrentParameters+0x290>)
 8003982:	480b      	ldr	r0, [pc, #44]	; (80039b0 <showCurrentParameters+0x250>)
 8003984:	f00f fbbc 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003988:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	2300      	movs	r3, #0
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	2300      	movs	r3, #0
 8003994:	22da      	movs	r2, #218	; 0xda
 8003996:	2184      	movs	r1, #132	; 0x84
 8003998:	4805      	ldr	r0, [pc, #20]	; (80039b0 <showCurrentParameters+0x250>)
 800399a:	f7fe fa01 	bl	8001da0 <EF_PutString>
}
 800399e:	bf00      	nop
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	0802a964 	.word	0x0802a964
 80039ac:	08016df8 	.word	0x08016df8
 80039b0:	200002cc 	.word	0x200002cc
 80039b4:	08016e08 	.word	0x08016e08
 80039b8:	08016e18 	.word	0x08016e18
 80039bc:	08016e28 	.word	0x08016e28
 80039c0:	08016e38 	.word	0x08016e38
 80039c4:	200002a4 	.word	0x200002a4
 80039c8:	08016e48 	.word	0x08016e48
 80039cc:	200002b0 	.word	0x200002b0
 80039d0:	08016e5c 	.word	0x08016e5c
 80039d4:	200002b4 	.word	0x200002b4
 80039d8:	08016e70 	.word	0x08016e70
 80039dc:	200002ac 	.word	0x200002ac
 80039e0:	08016e84 	.word	0x08016e84
 80039e4:	080289ec 	.word	0x080289ec
 80039e8:	08016e9c 	.word	0x08016e9c
 80039ec:	08016ea8 	.word	0x08016ea8
 80039f0:	08016eb4 	.word	0x08016eb4

080039f4 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80039fa:	2015      	movs	r0, #21
 80039fc:	f006 fbb0 	bl	800a160 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003a00:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003a04:	f7fe fbb6 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003a08:	485c      	ldr	r0, [pc, #368]	; (8003b7c <showControlPanel+0x188>)
 8003a0a:	f7fd ffaf 	bl	800196c <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 8003a0e:	495c      	ldr	r1, [pc, #368]	; (8003b80 <showControlPanel+0x18c>)
 8003a10:	485c      	ldr	r0, [pc, #368]	; (8003b84 <showControlPanel+0x190>)
 8003a12:	f00f fb75 	bl	8013100 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a16:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	231f      	movs	r3, #31
 8003a22:	220a      	movs	r2, #10
 8003a24:	2123      	movs	r1, #35	; 0x23
 8003a26:	4857      	ldr	r0, [pc, #348]	; (8003b84 <showControlPanel+0x190>)
 8003a28:	f7fe f9ba 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003a2c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2329      	movs	r3, #41	; 0x29
 8003a34:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a38:	2129      	movs	r1, #41	; 0x29
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f7fd fce6 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003a40:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	232b      	movs	r3, #43	; 0x2b
 8003a48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a4c:	212b      	movs	r1, #43	; 0x2b
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f7fd fcdc 	bl	800140c <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8003a54:	494c      	ldr	r1, [pc, #304]	; (8003b88 <showControlPanel+0x194>)
 8003a56:	484b      	ldr	r0, [pc, #300]	; (8003b84 <showControlPanel+0x190>)
 8003a58:	f00f fb52 	bl	8013100 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a5c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	2300      	movs	r3, #0
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	223c      	movs	r2, #60	; 0x3c
 8003a6a:	2114      	movs	r1, #20
 8003a6c:	4845      	ldr	r0, [pc, #276]	; (8003b84 <showControlPanel+0x190>)
 8003a6e:	f7fe f997 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 8003a72:	4946      	ldr	r1, [pc, #280]	; (8003b8c <showControlPanel+0x198>)
 8003a74:	4843      	ldr	r0, [pc, #268]	; (8003b84 <showControlPanel+0x190>)
 8003a76:	f00f fb43 	bl	8013100 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003a7a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	2301      	movs	r3, #1
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2300      	movs	r3, #0
 8003a86:	225a      	movs	r2, #90	; 0x5a
 8003a88:	2114      	movs	r1, #20
 8003a8a:	483e      	ldr	r0, [pc, #248]	; (8003b84 <showControlPanel+0x190>)
 8003a8c:	f7fe f988 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8003a90:	493f      	ldr	r1, [pc, #252]	; (8003b90 <showControlPanel+0x19c>)
 8003a92:	483c      	ldr	r0, [pc, #240]	; (8003b84 <showControlPanel+0x190>)
 8003a94:	f00f fb34 	bl	8013100 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a98:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2278      	movs	r2, #120	; 0x78
 8003aa6:	2114      	movs	r1, #20
 8003aa8:	4836      	ldr	r0, [pc, #216]	; (8003b84 <showControlPanel+0x190>)
 8003aaa:	f7fe f979 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8003aae:	4939      	ldr	r1, [pc, #228]	; (8003b94 <showControlPanel+0x1a0>)
 8003ab0:	4834      	ldr	r0, [pc, #208]	; (8003b84 <showControlPanel+0x190>)
 8003ab2:	f00f fb25 	bl	8013100 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003ab6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	2300      	movs	r3, #0
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2296      	movs	r2, #150	; 0x96
 8003ac4:	2114      	movs	r1, #20
 8003ac6:	482f      	ldr	r0, [pc, #188]	; (8003b84 <showControlPanel+0x190>)
 8003ac8:	f7fe f96a 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003acc:	4832      	ldr	r0, [pc, #200]	; (8003b98 <showControlPanel+0x1a4>)
 8003ace:	f7fd ff4d 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003ad2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	2305      	movs	r3, #5
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2314      	movs	r3, #20
 8003ade:	225f      	movs	r2, #95	; 0x5f
 8003ae0:	21d8      	movs	r1, #216	; 0xd8
 8003ae2:	20dc      	movs	r0, #220	; 0xdc
 8003ae4:	f7fd fef1 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003ae8:	492c      	ldr	r1, [pc, #176]	; (8003b9c <showControlPanel+0x1a8>)
 8003aea:	4826      	ldr	r0, [pc, #152]	; (8003b84 <showControlPanel+0x190>)
 8003aec:	f00f fb08 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003af0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	2300      	movs	r3, #0
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	2300      	movs	r3, #0
 8003afc:	22da      	movs	r2, #218	; 0xda
 8003afe:	21df      	movs	r1, #223	; 0xdf
 8003b00:	4820      	ldr	r0, [pc, #128]	; (8003b84 <showControlPanel+0x190>)
 8003b02:	f7fe f94d 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003b06:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	2305      	movs	r3, #5
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2314      	movs	r3, #20
 8003b12:	2264      	movs	r2, #100	; 0x64
 8003b14:	21d8      	movs	r1, #216	; 0xd8
 8003b16:	200a      	movs	r0, #10
 8003b18:	f7fd fed7 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 8003b1c:	4920      	ldr	r1, [pc, #128]	; (8003ba0 <showControlPanel+0x1ac>)
 8003b1e:	4819      	ldr	r0, [pc, #100]	; (8003b84 <showControlPanel+0x190>)
 8003b20:	f00f faee 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003b24:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	22da      	movs	r2, #218	; 0xda
 8003b32:	2114      	movs	r1, #20
 8003b34:	4813      	ldr	r0, [pc, #76]	; (8003b84 <showControlPanel+0x190>)
 8003b36:	f7fe f933 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003b3a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	2305      	movs	r3, #5
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2314      	movs	r3, #20
 8003b46:	225a      	movs	r2, #90	; 0x5a
 8003b48:	21d8      	movs	r1, #216	; 0xd8
 8003b4a:	2078      	movs	r0, #120	; 0x78
 8003b4c:	f7fd febd 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 8003b50:	4914      	ldr	r1, [pc, #80]	; (8003ba4 <showControlPanel+0x1b0>)
 8003b52:	480c      	ldr	r0, [pc, #48]	; (8003b84 <showControlPanel+0x190>)
 8003b54:	f00f fad4 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003b58:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2300      	movs	r3, #0
 8003b64:	22da      	movs	r2, #218	; 0xda
 8003b66:	217e      	movs	r1, #126	; 0x7e
 8003b68:	4806      	ldr	r0, [pc, #24]	; (8003b84 <showControlPanel+0x190>)
 8003b6a:	f7fe f919 	bl	8001da0 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003b6e:	4803      	ldr	r0, [pc, #12]	; (8003b7c <showControlPanel+0x188>)
 8003b70:	f7fd fefc 	bl	800196c <EF_SetFont>


}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	0802a964 	.word	0x0802a964
 8003b80:	08016ebc 	.word	0x08016ebc
 8003b84:	200002cc 	.word	0x200002cc
 8003b88:	08016ed0 	.word	0x08016ed0
 8003b8c:	08016ee4 	.word	0x08016ee4
 8003b90:	08016ef8 	.word	0x08016ef8
 8003b94:	08016f0c 	.word	0x08016f0c
 8003b98:	080289ec 	.word	0x080289ec
 8003b9c:	08016f20 	.word	0x08016f20
 8003ba0:	08016f2c 	.word	0x08016f2c
 8003ba4:	08016f34 	.word	0x08016f34

08003ba8 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003bae:	2016      	movs	r0, #22
 8003bb0:	f006 fad6 	bl	800a160 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003bb4:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003bb8:	f7fe fadc 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003bbc:	485b      	ldr	r0, [pc, #364]	; (8003d2c <showLightsControlPanel+0x184>)
 8003bbe:	f7fd fed5 	bl	800196c <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8003bc2:	495b      	ldr	r1, [pc, #364]	; (8003d30 <showLightsControlPanel+0x188>)
 8003bc4:	485b      	ldr	r0, [pc, #364]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003bc6:	f00f fa9b 	bl	8013100 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003bca:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bd8:	220a      	movs	r2, #10
 8003bda:	2146      	movs	r1, #70	; 0x46
 8003bdc:	4855      	ldr	r0, [pc, #340]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003bde:	f7fe f8df 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003be2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2329      	movs	r3, #41	; 0x29
 8003bea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003bee:	2129      	movs	r1, #41	; 0x29
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7fd fc0b 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003bf6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	232b      	movs	r3, #43	; 0x2b
 8003bfe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c02:	212b      	movs	r1, #43	; 0x2b
 8003c04:	2000      	movs	r0, #0
 8003c06:	f7fd fc01 	bl	800140c <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 8003c0a:	494b      	ldr	r1, [pc, #300]	; (8003d38 <showLightsControlPanel+0x190>)
 8003c0c:	4849      	ldr	r0, [pc, #292]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c0e:	f00f fa77 	bl	8013100 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003c12:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	223c      	movs	r2, #60	; 0x3c
 8003c20:	2114      	movs	r1, #20
 8003c22:	4844      	ldr	r0, [pc, #272]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c24:	f7fe f8bc 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 8003c28:	4944      	ldr	r1, [pc, #272]	; (8003d3c <showLightsControlPanel+0x194>)
 8003c2a:	4842      	ldr	r0, [pc, #264]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c2c:	f00f fa68 	bl	8013100 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003c30:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	2301      	movs	r3, #1
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	225a      	movs	r2, #90	; 0x5a
 8003c3e:	2114      	movs	r1, #20
 8003c40:	483c      	ldr	r0, [pc, #240]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c42:	f7fe f8ad 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 8003c46:	493e      	ldr	r1, [pc, #248]	; (8003d40 <showLightsControlPanel+0x198>)
 8003c48:	483a      	ldr	r0, [pc, #232]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c4a:	f00f fa59 	bl	8013100 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003c4e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	2300      	movs	r3, #0
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2278      	movs	r2, #120	; 0x78
 8003c5c:	2114      	movs	r1, #20
 8003c5e:	4835      	ldr	r0, [pc, #212]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c60:	f7fe f89e 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8003c64:	4937      	ldr	r1, [pc, #220]	; (8003d44 <showLightsControlPanel+0x19c>)
 8003c66:	4833      	ldr	r0, [pc, #204]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c68:	f00f fa4a 	bl	8013100 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003c6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	2300      	movs	r3, #0
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	2300      	movs	r3, #0
 8003c78:	2296      	movs	r2, #150	; 0x96
 8003c7a:	2114      	movs	r1, #20
 8003c7c:	482d      	ldr	r0, [pc, #180]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003c7e:	f7fe f88f 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003c82:	4831      	ldr	r0, [pc, #196]	; (8003d48 <showLightsControlPanel+0x1a0>)
 8003c84:	f7fd fe72 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c88:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	2305      	movs	r3, #5
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	2314      	movs	r3, #20
 8003c94:	225f      	movs	r2, #95	; 0x5f
 8003c96:	21d8      	movs	r1, #216	; 0xd8
 8003c98:	20dc      	movs	r0, #220	; 0xdc
 8003c9a:	f7fd fe16 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003c9e:	492b      	ldr	r1, [pc, #172]	; (8003d4c <showLightsControlPanel+0x1a4>)
 8003ca0:	4824      	ldr	r0, [pc, #144]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003ca2:	f00f fa2d 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ca6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	2300      	movs	r3, #0
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	22da      	movs	r2, #218	; 0xda
 8003cb4:	21e6      	movs	r1, #230	; 0xe6
 8003cb6:	481f      	ldr	r0, [pc, #124]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003cb8:	f7fe f872 	bl	8001da0 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003cbc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	2305      	movs	r3, #5
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2314      	movs	r3, #20
 8003cc8:	225a      	movs	r2, #90	; 0x5a
 8003cca:	21d8      	movs	r1, #216	; 0xd8
 8003ccc:	2078      	movs	r0, #120	; 0x78
 8003cce:	f7fd fdfc 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003cd2:	491f      	ldr	r1, [pc, #124]	; (8003d50 <showLightsControlPanel+0x1a8>)
 8003cd4:	4817      	ldr	r0, [pc, #92]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003cd6:	f00f fa13 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003cda:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	22da      	movs	r2, #218	; 0xda
 8003ce8:	217e      	movs	r1, #126	; 0x7e
 8003cea:	4812      	ldr	r0, [pc, #72]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003cec:	f7fe f858 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003cf0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	2305      	movs	r3, #5
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	2314      	movs	r3, #20
 8003cfc:	2264      	movs	r2, #100	; 0x64
 8003cfe:	21d8      	movs	r1, #216	; 0xd8
 8003d00:	200a      	movs	r0, #10
 8003d02:	f7fd fde2 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 8003d06:	4913      	ldr	r1, [pc, #76]	; (8003d54 <showLightsControlPanel+0x1ac>)
 8003d08:	480a      	ldr	r0, [pc, #40]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003d0a:	f00f f9f9 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d0e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	2300      	movs	r3, #0
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	22da      	movs	r2, #218	; 0xda
 8003d1c:	210d      	movs	r1, #13
 8003d1e:	4805      	ldr	r0, [pc, #20]	; (8003d34 <showLightsControlPanel+0x18c>)
 8003d20:	f7fe f83e 	bl	8001da0 <EF_PutString>


}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	0802a964 	.word	0x0802a964
 8003d30:	08016f40 	.word	0x08016f40
 8003d34:	200002cc 	.word	0x200002cc
 8003d38:	08016f50 	.word	0x08016f50
 8003d3c:	08016f60 	.word	0x08016f60
 8003d40:	08016f70 	.word	0x08016f70
 8003d44:	08016f80 	.word	0x08016f80
 8003d48:	080289ec 	.word	0x080289ec
 8003d4c:	08016f90 	.word	0x08016f90
 8003d50:	08016f98 	.word	0x08016f98
 8003d54:	08016fa4 	.word	0x08016fa4

08003d58 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af02      	add	r7, sp, #8


	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003d5e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003d62:	f7fe fa07 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003d66:	48a2      	ldr	r0, [pc, #648]	; (8003ff0 <showClockSetPanel+0x298>)
 8003d68:	f7fd fe00 	bl	800196c <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003d6c:	f7fe fe8e 	bl	8002a8c <DS3231_GetHour>
 8003d70:	4603      	mov	r3, r0
 8003d72:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003d74:	f7fe fe96 	bl	8002aa4 <DS3231_GetMinute>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003d7c:	f7fe fe7a 	bl	8002a74 <DS3231_GetDayOfWeek>
 8003d80:	4603      	mov	r3, r0
 8003d82:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003d84:	499b      	ldr	r1, [pc, #620]	; (8003ff4 <showClockSetPanel+0x29c>)
 8003d86:	489c      	ldr	r0, [pc, #624]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003d88:	f00f f9ba 	bl	8013100 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003d8c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d9a:	220a      	movs	r2, #10
 8003d9c:	212f      	movs	r1, #47	; 0x2f
 8003d9e:	4896      	ldr	r0, [pc, #600]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003da0:	f7fd fffe 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003da4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2329      	movs	r3, #41	; 0x29
 8003dac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003db0:	2129      	movs	r1, #41	; 0x29
 8003db2:	2000      	movs	r0, #0
 8003db4:	f7fd fb2a 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003db8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	232b      	movs	r3, #43	; 0x2b
 8003dc0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003dc4:	212b      	movs	r1, #43	; 0x2b
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f7fd fb20 	bl	800140c <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	498a      	ldr	r1, [pc, #552]	; (8003ffc <showClockSetPanel+0x2a4>)
 8003dd2:	4889      	ldr	r0, [pc, #548]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003dd4:	f00f f994 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003dd8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	2246      	movs	r2, #70	; 0x46
 8003de6:	2114      	movs	r1, #20
 8003de8:	4883      	ldr	r0, [pc, #524]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003dea:	f7fd ffd9 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003dee:	79bb      	ldrb	r3, [r7, #6]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4983      	ldr	r1, [pc, #524]	; (8004000 <showClockSetPanel+0x2a8>)
 8003df4:	4880      	ldr	r0, [pc, #512]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003df6:	f00f f983 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003dfa:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	2301      	movs	r3, #1
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	2300      	movs	r3, #0
 8003e06:	226e      	movs	r2, #110	; 0x6e
 8003e08:	2114      	movs	r1, #20
 8003e0a:	487b      	ldr	r0, [pc, #492]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003e0c:	f7fd ffc8 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003e10:	797b      	ldrb	r3, [r7, #5]
 8003e12:	461a      	mov	r2, r3
 8003e14:	497b      	ldr	r1, [pc, #492]	; (8004004 <showClockSetPanel+0x2ac>)
 8003e16:	4878      	ldr	r0, [pc, #480]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003e18:	f00f f972 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003e1c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	2301      	movs	r3, #1
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	2300      	movs	r3, #0
 8003e28:	2296      	movs	r2, #150	; 0x96
 8003e2a:	2114      	movs	r1, #20
 8003e2c:	4872      	ldr	r0, [pc, #456]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003e2e:	f7fd ffb7 	bl	8001da0 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003e32:	4875      	ldr	r0, [pc, #468]	; (8004008 <showClockSetPanel+0x2b0>)
 8003e34:	f7fd fd9a 	bl	800196c <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e38:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	2305      	movs	r3, #5
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2315      	movs	r3, #21
 8003e44:	221e      	movs	r2, #30
 8003e46:	214b      	movs	r1, #75	; 0x4b
 8003e48:	20f0      	movs	r0, #240	; 0xf0
 8003e4a:	f7fd fd3e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003e4e:	496f      	ldr	r1, [pc, #444]	; (800400c <showClockSetPanel+0x2b4>)
 8003e50:	4869      	ldr	r0, [pc, #420]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003e52:	f00f f955 	bl	8013100 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e56:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2300      	movs	r3, #0
 8003e62:	224d      	movs	r2, #77	; 0x4d
 8003e64:	21f3      	movs	r1, #243	; 0xf3
 8003e66:	4864      	ldr	r0, [pc, #400]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003e68:	f7fd ff9a 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e6c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2305      	movs	r3, #5
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2315      	movs	r3, #21
 8003e78:	221e      	movs	r2, #30
 8003e7a:	214b      	movs	r1, #75	; 0x4b
 8003e7c:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003e80:	f7fd fd23 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003e84:	4962      	ldr	r1, [pc, #392]	; (8004010 <showClockSetPanel+0x2b8>)
 8003e86:	485c      	ldr	r0, [pc, #368]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003e88:	f00f f93a 	bl	8013100 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e8c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	2300      	movs	r3, #0
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2300      	movs	r3, #0
 8003e98:	224d      	movs	r2, #77	; 0x4d
 8003e9a:	f240 111d 	movw	r1, #285	; 0x11d
 8003e9e:	4856      	ldr	r0, [pc, #344]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003ea0:	f7fd ff7e 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ea4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	2305      	movs	r3, #5
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2315      	movs	r3, #21
 8003eb0:	221e      	movs	r2, #30
 8003eb2:	2173      	movs	r1, #115	; 0x73
 8003eb4:	20f0      	movs	r0, #240	; 0xf0
 8003eb6:	f7fd fd08 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003eba:	4954      	ldr	r1, [pc, #336]	; (800400c <showClockSetPanel+0x2b4>)
 8003ebc:	484e      	ldr	r0, [pc, #312]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003ebe:	f00f f91f 	bl	8013100 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ec2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2275      	movs	r2, #117	; 0x75
 8003ed0:	21f5      	movs	r1, #245	; 0xf5
 8003ed2:	4849      	ldr	r0, [pc, #292]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003ed4:	f7fd ff64 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ed8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	2305      	movs	r3, #5
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	2315      	movs	r3, #21
 8003ee4:	221e      	movs	r2, #30
 8003ee6:	2173      	movs	r1, #115	; 0x73
 8003ee8:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003eec:	f7fd fced 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003ef0:	4948      	ldr	r1, [pc, #288]	; (8004014 <showClockSetPanel+0x2bc>)
 8003ef2:	4841      	ldr	r0, [pc, #260]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003ef4:	f00f f904 	bl	8013100 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ef8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	2300      	movs	r3, #0
 8003f04:	2275      	movs	r2, #117	; 0x75
 8003f06:	f240 111b 	movw	r1, #283	; 0x11b
 8003f0a:	483b      	ldr	r0, [pc, #236]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003f0c:	f7fd ff48 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003f10:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	2305      	movs	r3, #5
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	2315      	movs	r3, #21
 8003f1c:	221e      	movs	r2, #30
 8003f1e:	219b      	movs	r1, #155	; 0x9b
 8003f20:	20f0      	movs	r0, #240	; 0xf0
 8003f22:	f7fd fcd2 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003f26:	493c      	ldr	r1, [pc, #240]	; (8004018 <showClockSetPanel+0x2c0>)
 8003f28:	4833      	ldr	r0, [pc, #204]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003f2a:	f00f f8e9 	bl	8013100 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003f2e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	2300      	movs	r3, #0
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	229d      	movs	r2, #157	; 0x9d
 8003f3c:	21f3      	movs	r1, #243	; 0xf3
 8003f3e:	482e      	ldr	r0, [pc, #184]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003f40:	f7fd ff2e 	bl	8001da0 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003f44:	4830      	ldr	r0, [pc, #192]	; (8004008 <showClockSetPanel+0x2b0>)
 8003f46:	f7fd fd11 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003f4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	2305      	movs	r3, #5
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2314      	movs	r3, #20
 8003f56:	225f      	movs	r2, #95	; 0x5f
 8003f58:	21d8      	movs	r1, #216	; 0xd8
 8003f5a:	20dc      	movs	r0, #220	; 0xdc
 8003f5c:	f7fd fcb5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003f60:	492e      	ldr	r1, [pc, #184]	; (800401c <showClockSetPanel+0x2c4>)
 8003f62:	4825      	ldr	r0, [pc, #148]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003f64:	f00f f8cc 	bl	8013100 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003f68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2300      	movs	r3, #0
 8003f74:	22da      	movs	r2, #218	; 0xda
 8003f76:	21e6      	movs	r1, #230	; 0xe6
 8003f78:	481f      	ldr	r0, [pc, #124]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003f7a:	f7fd ff11 	bl	8001da0 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003f7e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	2305      	movs	r3, #5
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	2316      	movs	r3, #22
 8003f8a:	22aa      	movs	r2, #170	; 0xaa
 8003f8c:	21be      	movs	r1, #190	; 0xbe
 8003f8e:	2050      	movs	r0, #80	; 0x50
 8003f90:	f7fd fc9b 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003f94:	4922      	ldr	r1, [pc, #136]	; (8004020 <showClockSetPanel+0x2c8>)
 8003f96:	4818      	ldr	r0, [pc, #96]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003f98:	f00f f8b2 	bl	8013100 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003f9c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	22c1      	movs	r2, #193	; 0xc1
 8003faa:	2164      	movs	r1, #100	; 0x64
 8003fac:	4812      	ldr	r0, [pc, #72]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003fae:	f7fd fef7 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003fb2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	2305      	movs	r3, #5
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2314      	movs	r3, #20
 8003fbe:	2264      	movs	r2, #100	; 0x64
 8003fc0:	21d8      	movs	r1, #216	; 0xd8
 8003fc2:	200a      	movs	r0, #10
 8003fc4:	f7fd fc81 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003fc8:	4916      	ldr	r1, [pc, #88]	; (8004024 <showClockSetPanel+0x2cc>)
 8003fca:	480b      	ldr	r0, [pc, #44]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003fcc:	f00f f898 	bl	8013100 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003fd0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	22da      	movs	r2, #218	; 0xda
 8003fde:	210d      	movs	r1, #13
 8003fe0:	4805      	ldr	r0, [pc, #20]	; (8003ff8 <showClockSetPanel+0x2a0>)
 8003fe2:	f7fd fedd 	bl	8001da0 <EF_PutString>
}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	0802a964 	.word	0x0802a964
 8003ff4:	08016fb0 	.word	0x08016fb0
 8003ff8:	200002cc 	.word	0x200002cc
 8003ffc:	08016fc0 	.word	0x08016fc0
 8004000:	08016fcc 	.word	0x08016fcc
 8004004:	08016fdc 	.word	0x08016fdc
 8004008:	080289ec 	.word	0x080289ec
 800400c:	08016fec 	.word	0x08016fec
 8004010:	08016ff0 	.word	0x08016ff0
 8004014:	08016ff4 	.word	0x08016ff4
 8004018:	08016ff8 	.word	0x08016ff8
 800401c:	08016ffc 	.word	0x08016ffc
 8004020:	08017004 	.word	0x08017004
 8004024:	08017014 	.word	0x08017014

08004028 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800402e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004032:	f7fe f89f 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8004036:	4896      	ldr	r0, [pc, #600]	; (8004290 <showPreparedActivitiesPanel+0x268>)
 8004038:	f7fd fc98 	bl	800196c <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 800403c:	4995      	ldr	r1, [pc, #596]	; (8004294 <showPreparedActivitiesPanel+0x26c>)
 800403e:	4896      	ldr	r0, [pc, #600]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004040:	f00f f85e 	bl	8013100 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004044:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	2300      	movs	r3, #0
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	231f      	movs	r3, #31
 8004050:	220a      	movs	r2, #10
 8004052:	212f      	movs	r1, #47	; 0x2f
 8004054:	4890      	ldr	r0, [pc, #576]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004056:	f7fd fea3 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800405a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	2329      	movs	r3, #41	; 0x29
 8004062:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004066:	2129      	movs	r1, #41	; 0x29
 8004068:	2000      	movs	r0, #0
 800406a:	f7fd f9cf 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800406e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	232b      	movs	r3, #43	; 0x2b
 8004076:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800407a:	212b      	movs	r1, #43	; 0x2b
 800407c:	2000      	movs	r0, #0
 800407e:	f7fd f9c5 	bl	800140c <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8004082:	4886      	ldr	r0, [pc, #536]	; (800429c <showPreparedActivitiesPanel+0x274>)
 8004084:	f7fd fc72 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004088:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	2305      	movs	r3, #5
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	2314      	movs	r3, #20
 8004094:	2264      	movs	r2, #100	; 0x64
 8004096:	21d8      	movs	r1, #216	; 0xd8
 8004098:	200a      	movs	r0, #10
 800409a:	f7fd fc16 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 800409e:	4980      	ldr	r1, [pc, #512]	; (80042a0 <showPreparedActivitiesPanel+0x278>)
 80040a0:	487d      	ldr	r0, [pc, #500]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80040a2:	f00f f82d 	bl	8013100 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80040a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	2300      	movs	r3, #0
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	2300      	movs	r3, #0
 80040b2:	22da      	movs	r2, #218	; 0xda
 80040b4:	210d      	movs	r1, #13
 80040b6:	4878      	ldr	r0, [pc, #480]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80040b8:	f7fd fe72 	bl	8001da0 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80040bc:	4877      	ldr	r0, [pc, #476]	; (800429c <showPreparedActivitiesPanel+0x274>)
 80040be:	f7fd fc55 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80040c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	2305      	movs	r3, #5
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2314      	movs	r3, #20
 80040ce:	225f      	movs	r2, #95	; 0x5f
 80040d0:	21d8      	movs	r1, #216	; 0xd8
 80040d2:	20dc      	movs	r0, #220	; 0xdc
 80040d4:	f7fd fbf9 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 80040d8:	4972      	ldr	r1, [pc, #456]	; (80042a4 <showPreparedActivitiesPanel+0x27c>)
 80040da:	486f      	ldr	r0, [pc, #444]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80040dc:	f00f f810 	bl	8013100 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80040e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2300      	movs	r3, #0
 80040ec:	22da      	movs	r2, #218	; 0xda
 80040ee:	21e6      	movs	r1, #230	; 0xe6
 80040f0:	4869      	ldr	r0, [pc, #420]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80040f2:	f7fd fe55 	bl	8001da0 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 80040f6:	4b6c      	ldr	r3, [pc, #432]	; (80042a8 <showPreparedActivitiesPanel+0x280>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d029      	beq.n	8004152 <showPreparedActivitiesPanel+0x12a>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80040fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	230a      	movs	r3, #10
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2328      	movs	r3, #40	; 0x28
 800410a:	2278      	movs	r2, #120	; 0x78
 800410c:	213c      	movs	r1, #60	; 0x3c
 800410e:	2064      	movs	r0, #100	; 0x64
 8004110:	f7fd fbdb 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004114:	4965      	ldr	r1, [pc, #404]	; (80042ac <showPreparedActivitiesPanel+0x284>)
 8004116:	4860      	ldr	r0, [pc, #384]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004118:	f00e fff2 	bl	8013100 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800411c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2300      	movs	r3, #0
 8004128:	223e      	movs	r2, #62	; 0x3e
 800412a:	2177      	movs	r1, #119	; 0x77
 800412c:	485a      	ldr	r0, [pc, #360]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800412e:	f7fd fe37 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8004132:	495f      	ldr	r1, [pc, #380]	; (80042b0 <showPreparedActivitiesPanel+0x288>)
 8004134:	4858      	ldr	r0, [pc, #352]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004136:	f00e ffe3 	bl	8013100 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800413a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	2300      	movs	r3, #0
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2300      	movs	r3, #0
 8004146:	2250      	movs	r2, #80	; 0x50
 8004148:	2193      	movs	r1, #147	; 0x93
 800414a:	4853      	ldr	r0, [pc, #332]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800414c:	f7fd fe28 	bl	8001da0 <EF_PutString>
 8004150:	e028      	b.n	80041a4 <showPreparedActivitiesPanel+0x17c>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004152:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	230a      	movs	r3, #10
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2328      	movs	r3, #40	; 0x28
 800415e:	2278      	movs	r2, #120	; 0x78
 8004160:	213c      	movs	r1, #60	; 0x3c
 8004162:	2064      	movs	r0, #100	; 0x64
 8004164:	f7fd fbb1 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004168:	4950      	ldr	r1, [pc, #320]	; (80042ac <showPreparedActivitiesPanel+0x284>)
 800416a:	484b      	ldr	r0, [pc, #300]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800416c:	f00e ffc8 	bl	8013100 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004170:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	2300      	movs	r3, #0
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	2300      	movs	r3, #0
 800417c:	223e      	movs	r2, #62	; 0x3e
 800417e:	2177      	movs	r1, #119	; 0x77
 8004180:	4845      	ldr	r0, [pc, #276]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004182:	f7fd fe0d 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004186:	494b      	ldr	r1, [pc, #300]	; (80042b4 <showPreparedActivitiesPanel+0x28c>)
 8004188:	4843      	ldr	r0, [pc, #268]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800418a:	f00e ffb9 	bl	8013100 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800418e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	2300      	movs	r3, #0
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2300      	movs	r3, #0
 800419a:	2250      	movs	r2, #80	; 0x50
 800419c:	2193      	movs	r1, #147	; 0x93
 800419e:	483e      	ldr	r0, [pc, #248]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80041a0:	f7fd fdfe 	bl	8001da0 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 80041a4:	4b40      	ldr	r3, [pc, #256]	; (80042a8 <showPreparedActivitiesPanel+0x280>)
 80041a6:	785b      	ldrb	r3, [r3, #1]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d029      	beq.n	8004200 <showPreparedActivitiesPanel+0x1d8>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80041ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	230a      	movs	r3, #10
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	2328      	movs	r3, #40	; 0x28
 80041b8:	2278      	movs	r2, #120	; 0x78
 80041ba:	2178      	movs	r1, #120	; 0x78
 80041bc:	2064      	movs	r0, #100	; 0x64
 80041be:	f7fd fb84 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 80041c2:	493d      	ldr	r1, [pc, #244]	; (80042b8 <showPreparedActivitiesPanel+0x290>)
 80041c4:	4834      	ldr	r0, [pc, #208]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80041c6:	f00e ff9b 	bl	8013100 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80041ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	2300      	movs	r3, #0
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	2300      	movs	r3, #0
 80041d6:	227a      	movs	r2, #122	; 0x7a
 80041d8:	2169      	movs	r1, #105	; 0x69
 80041da:	482f      	ldr	r0, [pc, #188]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80041dc:	f7fd fde0 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "ON");
 80041e0:	4933      	ldr	r1, [pc, #204]	; (80042b0 <showPreparedActivitiesPanel+0x288>)
 80041e2:	482d      	ldr	r0, [pc, #180]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80041e4:	f00e ff8c 	bl	8013100 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80041e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	2300      	movs	r3, #0
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	228c      	movs	r2, #140	; 0x8c
 80041f6:	2193      	movs	r1, #147	; 0x93
 80041f8:	4827      	ldr	r0, [pc, #156]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 80041fa:	f7fd fdd1 	bl	8001da0 <EF_PutString>
 80041fe:	e028      	b.n	8004252 <showPreparedActivitiesPanel+0x22a>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004200:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	230a      	movs	r3, #10
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	2328      	movs	r3, #40	; 0x28
 800420c:	2278      	movs	r2, #120	; 0x78
 800420e:	2178      	movs	r1, #120	; 0x78
 8004210:	2064      	movs	r0, #100	; 0x64
 8004212:	f7fd fb5a 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8004216:	4928      	ldr	r1, [pc, #160]	; (80042b8 <showPreparedActivitiesPanel+0x290>)
 8004218:	481f      	ldr	r0, [pc, #124]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800421a:	f00e ff71 	bl	8013100 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800421e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	2300      	movs	r3, #0
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2300      	movs	r3, #0
 800422a:	227a      	movs	r2, #122	; 0x7a
 800422c:	2169      	movs	r1, #105	; 0x69
 800422e:	481a      	ldr	r0, [pc, #104]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004230:	f7fd fdb6 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004234:	491f      	ldr	r1, [pc, #124]	; (80042b4 <showPreparedActivitiesPanel+0x28c>)
 8004236:	4818      	ldr	r0, [pc, #96]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004238:	f00e ff62 	bl	8013100 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800423c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	2300      	movs	r3, #0
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2300      	movs	r3, #0
 8004248:	228c      	movs	r2, #140	; 0x8c
 800424a:	2193      	movs	r1, #147	; 0x93
 800424c:	4812      	ldr	r0, [pc, #72]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800424e:	f7fd fda7 	bl	8001da0 <EF_PutString>
	}


	EF_SetFont(&arialBlack_20ptFontInfo);
 8004252:	480f      	ldr	r0, [pc, #60]	; (8004290 <showPreparedActivitiesPanel+0x268>)
 8004254:	f7fd fb8a 	bl	800196c <EF_SetFont>
	activitiesDurationTimeInSeconds = EEPROM_ActivitiesTimeRead(1);
 8004258:	2001      	movs	r0, #1
 800425a:	f7ff f8c8 	bl	80033ee <EEPROM_ActivitiesTimeRead>
 800425e:	4603      	mov	r3, r0
 8004260:	4a16      	ldr	r2, [pc, #88]	; (80042bc <showPreparedActivitiesPanel+0x294>)
 8004262:	6013      	str	r3, [r2, #0]
	sprintf((char*)Msg, "Czas karmienia: %ld s", activitiesDurationTimeInSeconds);
 8004264:	4b15      	ldr	r3, [pc, #84]	; (80042bc <showPreparedActivitiesPanel+0x294>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	4915      	ldr	r1, [pc, #84]	; (80042c0 <showPreparedActivitiesPanel+0x298>)
 800426c:	480a      	ldr	r0, [pc, #40]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 800426e:	f00e ff47 	bl	8013100 <siprintf>
	EF_PutString(Msg, ACTIVITIES_TIME_DURATION_X, ACTIVITIES_TIME_DURATION_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004272:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	2300      	movs	r3, #0
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2300      	movs	r3, #0
 800427e:	22b4      	movs	r2, #180	; 0xb4
 8004280:	210a      	movs	r1, #10
 8004282:	4805      	ldr	r0, [pc, #20]	; (8004298 <showPreparedActivitiesPanel+0x270>)
 8004284:	f7fd fd8c 	bl	8001da0 <EF_PutString>
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	0802a964 	.word	0x0802a964
 8004294:	0801701c 	.word	0x0801701c
 8004298:	200002cc 	.word	0x200002cc
 800429c:	080289ec 	.word	0x080289ec
 80042a0:	08017014 	.word	0x08017014
 80042a4:	08016ffc 	.word	0x08016ffc
 80042a8:	20000250 	.word	0x20000250
 80042ac:	0801702c 	.word	0x0801702c
 80042b0:	08017038 	.word	0x08017038
 80042b4:	0801703c 	.word	0x0801703c
 80042b8:	08017040 	.word	0x08017040
 80042bc:	20000290 	.word	0x20000290
 80042c0:	0801704c 	.word	0x0801704c

080042c4 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80042ca:	f24c 6018 	movw	r0, #50712	; 0xc618
 80042ce:	f7fd ff51 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80042d2:	48c7      	ldr	r0, [pc, #796]	; (80045f0 <showWSLedPanel+0x32c>)
 80042d4:	f7fd fb4a 	bl	800196c <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 80042d8:	49c6      	ldr	r1, [pc, #792]	; (80045f4 <showWSLedPanel+0x330>)
 80042da:	48c7      	ldr	r0, [pc, #796]	; (80045f8 <showWSLedPanel+0x334>)
 80042dc:	f00e ff10 	bl	8013100 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80042e0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	2300      	movs	r3, #0
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	231f      	movs	r3, #31
 80042ec:	220a      	movs	r2, #10
 80042ee:	2146      	movs	r1, #70	; 0x46
 80042f0:	48c1      	ldr	r0, [pc, #772]	; (80045f8 <showWSLedPanel+0x334>)
 80042f2:	f7fd fd55 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80042f6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2329      	movs	r3, #41	; 0x29
 80042fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004302:	2129      	movs	r1, #41	; 0x29
 8004304:	2000      	movs	r0, #0
 8004306:	f7fd f881 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800430a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	232b      	movs	r3, #43	; 0x2b
 8004312:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004316:	212b      	movs	r1, #43	; 0x2b
 8004318:	2000      	movs	r0, #0
 800431a:	f7fd f877 	bl	800140c <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 800431e:	4bb7      	ldr	r3, [pc, #732]	; (80045fc <showWSLedPanel+0x338>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	49b6      	ldr	r1, [pc, #728]	; (8004600 <showWSLedPanel+0x33c>)
 8004326:	48b4      	ldr	r0, [pc, #720]	; (80045f8 <showWSLedPanel+0x334>)
 8004328:	f00e feea 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800432c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	2300      	movs	r3, #0
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2300      	movs	r3, #0
 8004338:	223c      	movs	r2, #60	; 0x3c
 800433a:	2114      	movs	r1, #20
 800433c:	48ae      	ldr	r0, [pc, #696]	; (80045f8 <showWSLedPanel+0x334>)
 800433e:	f7fd fd2f 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8004342:	49b0      	ldr	r1, [pc, #704]	; (8004604 <showWSLedPanel+0x340>)
 8004344:	48ac      	ldr	r0, [pc, #688]	; (80045f8 <showWSLedPanel+0x334>)
 8004346:	f00e fedb 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800434a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	2300      	movs	r3, #0
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	225a      	movs	r2, #90	; 0x5a
 8004358:	2114      	movs	r1, #20
 800435a:	48a7      	ldr	r0, [pc, #668]	; (80045f8 <showWSLedPanel+0x334>)
 800435c:	f7fd fd20 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8004360:	49a9      	ldr	r1, [pc, #676]	; (8004608 <showWSLedPanel+0x344>)
 8004362:	48a5      	ldr	r0, [pc, #660]	; (80045f8 <showWSLedPanel+0x334>)
 8004364:	f00e fecc 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004368:	f24c 6318 	movw	r3, #50712	; 0xc618
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	2300      	movs	r3, #0
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	2300      	movs	r3, #0
 8004374:	2278      	movs	r2, #120	; 0x78
 8004376:	2114      	movs	r1, #20
 8004378:	489f      	ldr	r0, [pc, #636]	; (80045f8 <showWSLedPanel+0x334>)
 800437a:	f7fd fd11 	bl	8001da0 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 800437e:	48a3      	ldr	r0, [pc, #652]	; (800460c <showWSLedPanel+0x348>)
 8004380:	f7fd faf4 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8004384:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004388:	9301      	str	r3, [sp, #4]
 800438a:	2305      	movs	r3, #5
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	2315      	movs	r3, #21
 8004390:	221e      	movs	r2, #30
 8004392:	2141      	movs	r1, #65	; 0x41
 8004394:	20d9      	movs	r0, #217	; 0xd9
 8004396:	f7fd fa98 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 800439a:	499d      	ldr	r1, [pc, #628]	; (8004610 <showWSLedPanel+0x34c>)
 800439c:	4896      	ldr	r0, [pc, #600]	; (80045f8 <showWSLedPanel+0x334>)
 800439e:	f00e feaf 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80043a2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	2300      	movs	r3, #0
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	2300      	movs	r3, #0
 80043ae:	2243      	movs	r2, #67	; 0x43
 80043b0:	21df      	movs	r1, #223	; 0xdf
 80043b2:	4891      	ldr	r0, [pc, #580]	; (80045f8 <showWSLedPanel+0x334>)
 80043b4:	f7fd fcf4 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80043b8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	2305      	movs	r3, #5
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	2315      	movs	r3, #21
 80043c4:	221e      	movs	r2, #30
 80043c6:	2141      	movs	r1, #65	; 0x41
 80043c8:	20fc      	movs	r0, #252	; 0xfc
 80043ca:	f7fd fa7e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 80043ce:	4991      	ldr	r1, [pc, #580]	; (8004614 <showWSLedPanel+0x350>)
 80043d0:	4889      	ldr	r0, [pc, #548]	; (80045f8 <showWSLedPanel+0x334>)
 80043d2:	f00e fe95 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80043d6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2300      	movs	r3, #0
 80043e2:	2243      	movs	r2, #67	; 0x43
 80043e4:	f240 1101 	movw	r1, #257	; 0x101
 80043e8:	4883      	ldr	r0, [pc, #524]	; (80045f8 <showWSLedPanel+0x334>)
 80043ea:	f7fd fcd9 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80043ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	2305      	movs	r3, #5
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2315      	movs	r3, #21
 80043fa:	221e      	movs	r2, #30
 80043fc:	2141      	movs	r1, #65	; 0x41
 80043fe:	f240 101f 	movw	r0, #287	; 0x11f
 8004402:	f7fd fa62 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 8004406:	4984      	ldr	r1, [pc, #528]	; (8004618 <showWSLedPanel+0x354>)
 8004408:	487b      	ldr	r0, [pc, #492]	; (80045f8 <showWSLedPanel+0x334>)
 800440a:	f00e fe79 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800440e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	2300      	movs	r3, #0
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	2300      	movs	r3, #0
 800441a:	2243      	movs	r2, #67	; 0x43
 800441c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8004420:	4875      	ldr	r0, [pc, #468]	; (80045f8 <showWSLedPanel+0x334>)
 8004422:	f7fd fcbd 	bl	8001da0 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	2305      	movs	r3, #5
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	2315      	movs	r3, #21
 8004432:	2228      	movs	r2, #40	; 0x28
 8004434:	215f      	movs	r1, #95	; 0x5f
 8004436:	2096      	movs	r0, #150	; 0x96
 8004438:	f7fd fa47 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 800443c:	4977      	ldr	r1, [pc, #476]	; (800461c <showWSLedPanel+0x358>)
 800443e:	486e      	ldr	r0, [pc, #440]	; (80045f8 <showWSLedPanel+0x334>)
 8004440:	f00e fe5e 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	2300      	movs	r3, #0
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	2300      	movs	r3, #0
 8004450:	2261      	movs	r2, #97	; 0x61
 8004452:	219b      	movs	r1, #155	; 0x9b
 8004454:	4868      	ldr	r0, [pc, #416]	; (80045f8 <showWSLedPanel+0x334>)
 8004456:	f7fd fca3 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800445a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	2305      	movs	r3, #5
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2315      	movs	r3, #21
 8004466:	2228      	movs	r2, #40	; 0x28
 8004468:	215f      	movs	r1, #95	; 0x5f
 800446a:	20ca      	movs	r0, #202	; 0xca
 800446c:	f7fd fa2d 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004470:	496b      	ldr	r1, [pc, #428]	; (8004620 <showWSLedPanel+0x35c>)
 8004472:	4861      	ldr	r0, [pc, #388]	; (80045f8 <showWSLedPanel+0x334>)
 8004474:	f00e fe44 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	2300      	movs	r3, #0
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	2300      	movs	r3, #0
 8004484:	2261      	movs	r2, #97	; 0x61
 8004486:	21d2      	movs	r1, #210	; 0xd2
 8004488:	485b      	ldr	r0, [pc, #364]	; (80045f8 <showWSLedPanel+0x334>)
 800448a:	f7fd fc89 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800448e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	2305      	movs	r3, #5
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2315      	movs	r3, #21
 800449a:	2228      	movs	r2, #40	; 0x28
 800449c:	215f      	movs	r1, #95	; 0x5f
 800449e:	20fe      	movs	r0, #254	; 0xfe
 80044a0:	f7fd fa13 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80044a4:	495f      	ldr	r1, [pc, #380]	; (8004624 <showWSLedPanel+0x360>)
 80044a6:	4854      	ldr	r0, [pc, #336]	; (80045f8 <showWSLedPanel+0x334>)
 80044a8:	f00e fe2a 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80044ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	2300      	movs	r3, #0
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2300      	movs	r3, #0
 80044b8:	2261      	movs	r2, #97	; 0x61
 80044ba:	f44f 7183 	mov.w	r1, #262	; 0x106
 80044be:	484e      	ldr	r0, [pc, #312]	; (80045f8 <showWSLedPanel+0x334>)
 80044c0:	f7fd fc6e 	bl	8001da0 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80044c4:	231f      	movs	r3, #31
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	2305      	movs	r3, #5
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	2315      	movs	r3, #21
 80044ce:	2228      	movs	r2, #40	; 0x28
 80044d0:	217d      	movs	r1, #125	; 0x7d
 80044d2:	2096      	movs	r0, #150	; 0x96
 80044d4:	f7fd f9f9 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 80044d8:	4950      	ldr	r1, [pc, #320]	; (800461c <showWSLedPanel+0x358>)
 80044da:	4847      	ldr	r0, [pc, #284]	; (80045f8 <showWSLedPanel+0x334>)
 80044dc:	f00e fe10 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80044e0:	231f      	movs	r3, #31
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	2300      	movs	r3, #0
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2300      	movs	r3, #0
 80044ea:	227f      	movs	r2, #127	; 0x7f
 80044ec:	219b      	movs	r1, #155	; 0x9b
 80044ee:	4842      	ldr	r0, [pc, #264]	; (80045f8 <showWSLedPanel+0x334>)
 80044f0:	f7fd fc56 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80044f4:	231f      	movs	r3, #31
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	2305      	movs	r3, #5
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2315      	movs	r3, #21
 80044fe:	2228      	movs	r2, #40	; 0x28
 8004500:	217d      	movs	r1, #125	; 0x7d
 8004502:	20ca      	movs	r0, #202	; 0xca
 8004504:	f7fd f9e1 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004508:	4945      	ldr	r1, [pc, #276]	; (8004620 <showWSLedPanel+0x35c>)
 800450a:	483b      	ldr	r0, [pc, #236]	; (80045f8 <showWSLedPanel+0x334>)
 800450c:	f00e fdf8 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004510:	231f      	movs	r3, #31
 8004512:	9301      	str	r3, [sp, #4]
 8004514:	2300      	movs	r3, #0
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	2300      	movs	r3, #0
 800451a:	227f      	movs	r2, #127	; 0x7f
 800451c:	21d2      	movs	r1, #210	; 0xd2
 800451e:	4836      	ldr	r0, [pc, #216]	; (80045f8 <showWSLedPanel+0x334>)
 8004520:	f7fd fc3e 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004524:	231f      	movs	r3, #31
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	2305      	movs	r3, #5
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2315      	movs	r3, #21
 800452e:	2228      	movs	r2, #40	; 0x28
 8004530:	217d      	movs	r1, #125	; 0x7d
 8004532:	20fe      	movs	r0, #254	; 0xfe
 8004534:	f7fd f9c9 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004538:	493a      	ldr	r1, [pc, #232]	; (8004624 <showWSLedPanel+0x360>)
 800453a:	482f      	ldr	r0, [pc, #188]	; (80045f8 <showWSLedPanel+0x334>)
 800453c:	f00e fde0 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004540:	231f      	movs	r3, #31
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	2300      	movs	r3, #0
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2300      	movs	r3, #0
 800454a:	227f      	movs	r2, #127	; 0x7f
 800454c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004550:	4829      	ldr	r0, [pc, #164]	; (80045f8 <showWSLedPanel+0x334>)
 8004552:	f7fd fc25 	bl	8001da0 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8004556:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	2305      	movs	r3, #5
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2315      	movs	r3, #21
 8004562:	2250      	movs	r2, #80	; 0x50
 8004564:	219c      	movs	r1, #156	; 0x9c
 8004566:	2014      	movs	r0, #20
 8004568:	f7fd f9af 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 800456c:	492e      	ldr	r1, [pc, #184]	; (8004628 <showWSLedPanel+0x364>)
 800456e:	4822      	ldr	r0, [pc, #136]	; (80045f8 <showWSLedPanel+0x334>)
 8004570:	f00e fdc6 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8004574:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	2300      	movs	r3, #0
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	2300      	movs	r3, #0
 8004580:	229e      	movs	r2, #158	; 0x9e
 8004582:	211c      	movs	r1, #28
 8004584:	481c      	ldr	r0, [pc, #112]	; (80045f8 <showWSLedPanel+0x334>)
 8004586:	f7fd fc0b 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800458a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	2305      	movs	r3, #5
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	2315      	movs	r3, #21
 8004596:	2250      	movs	r2, #80	; 0x50
 8004598:	219c      	movs	r1, #156	; 0x9c
 800459a:	2078      	movs	r0, #120	; 0x78
 800459c:	f7fd f995 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 80045a0:	4922      	ldr	r1, [pc, #136]	; (800462c <showWSLedPanel+0x368>)
 80045a2:	4815      	ldr	r0, [pc, #84]	; (80045f8 <showWSLedPanel+0x334>)
 80045a4:	f00e fdac 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80045a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	2300      	movs	r3, #0
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	2300      	movs	r3, #0
 80045b4:	229e      	movs	r2, #158	; 0x9e
 80045b6:	2187      	movs	r1, #135	; 0x87
 80045b8:	480f      	ldr	r0, [pc, #60]	; (80045f8 <showWSLedPanel+0x334>)
 80045ba:	f7fd fbf1 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80045be:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	2305      	movs	r3, #5
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	2315      	movs	r3, #21
 80045ca:	2250      	movs	r2, #80	; 0x50
 80045cc:	219c      	movs	r1, #156	; 0x9c
 80045ce:	20dc      	movs	r0, #220	; 0xdc
 80045d0:	f7fd f97b 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 80045d4:	4916      	ldr	r1, [pc, #88]	; (8004630 <showWSLedPanel+0x36c>)
 80045d6:	4808      	ldr	r0, [pc, #32]	; (80045f8 <showWSLedPanel+0x334>)
 80045d8:	f00e fd92 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80045dc:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	2300      	movs	r3, #0
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	2300      	movs	r3, #0
 80045e8:	229e      	movs	r2, #158	; 0x9e
 80045ea:	21e9      	movs	r1, #233	; 0xe9
 80045ec:	e022      	b.n	8004634 <showWSLedPanel+0x370>
 80045ee:	bf00      	nop
 80045f0:	0802a964 	.word	0x0802a964
 80045f4:	08017064 	.word	0x08017064
 80045f8:	200002cc 	.word	0x200002cc
 80045fc:	20000034 	.word	0x20000034
 8004600:	08017070 	.word	0x08017070
 8004604:	08017080 	.word	0x08017080
 8004608:	08017088 	.word	0x08017088
 800460c:	080289ec 	.word	0x080289ec
 8004610:	08016fec 	.word	0x08016fec
 8004614:	08016ff4 	.word	0x08016ff4
 8004618:	08017090 	.word	0x08017090
 800461c:	08017094 	.word	0x08017094
 8004620:	08017098 	.word	0x08017098
 8004624:	0801709c 	.word	0x0801709c
 8004628:	080170a0 	.word	0x080170a0
 800462c:	0801703c 	.word	0x0801703c
 8004630:	080170a8 	.word	0x080170a8
 8004634:	482b      	ldr	r0, [pc, #172]	; (80046e4 <showWSLedPanel+0x420>)
 8004636:	f7fd fbb3 	bl	8001da0 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800463a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	2305      	movs	r3, #5
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2315      	movs	r3, #21
 8004646:	2250      	movs	r2, #80	; 0x50
 8004648:	21bb      	movs	r1, #187	; 0xbb
 800464a:	2046      	movs	r0, #70	; 0x46
 800464c:	f7fd f93d 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8004650:	4925      	ldr	r1, [pc, #148]	; (80046e8 <showWSLedPanel+0x424>)
 8004652:	4824      	ldr	r0, [pc, #144]	; (80046e4 <showWSLedPanel+0x420>)
 8004654:	f00e fd54 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004658:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	2300      	movs	r3, #0
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	2300      	movs	r3, #0
 8004664:	22bd      	movs	r2, #189	; 0xbd
 8004666:	214e      	movs	r1, #78	; 0x4e
 8004668:	481e      	ldr	r0, [pc, #120]	; (80046e4 <showWSLedPanel+0x420>)
 800466a:	f7fd fb99 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800466e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	2305      	movs	r3, #5
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2315      	movs	r3, #21
 800467a:	2250      	movs	r2, #80	; 0x50
 800467c:	21bb      	movs	r1, #187	; 0xbb
 800467e:	20aa      	movs	r0, #170	; 0xaa
 8004680:	f7fd f923 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 8004684:	4919      	ldr	r1, [pc, #100]	; (80046ec <showWSLedPanel+0x428>)
 8004686:	4817      	ldr	r0, [pc, #92]	; (80046e4 <showWSLedPanel+0x420>)
 8004688:	f00e fd3a 	bl	8013100 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 800468c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	2300      	movs	r3, #0
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	2300      	movs	r3, #0
 8004698:	22bd      	movs	r2, #189	; 0xbd
 800469a:	21b5      	movs	r1, #181	; 0xb5
 800469c:	4811      	ldr	r0, [pc, #68]	; (80046e4 <showWSLedPanel+0x420>)
 800469e:	f7fd fb7f 	bl	8001da0 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80046a2:	4813      	ldr	r0, [pc, #76]	; (80046f0 <showWSLedPanel+0x42c>)
 80046a4:	f7fd f962 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80046a8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80046ac:	9301      	str	r3, [sp, #4]
 80046ae:	2305      	movs	r3, #5
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	2314      	movs	r3, #20
 80046b4:	2264      	movs	r2, #100	; 0x64
 80046b6:	21d8      	movs	r1, #216	; 0xd8
 80046b8:	200a      	movs	r0, #10
 80046ba:	f7fd f906 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80046be:	490d      	ldr	r1, [pc, #52]	; (80046f4 <showWSLedPanel+0x430>)
 80046c0:	4808      	ldr	r0, [pc, #32]	; (80046e4 <showWSLedPanel+0x420>)
 80046c2:	f00e fd1d 	bl	8013100 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80046c6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	2300      	movs	r3, #0
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	2300      	movs	r3, #0
 80046d2:	22da      	movs	r2, #218	; 0xda
 80046d4:	210d      	movs	r1, #13
 80046d6:	4803      	ldr	r0, [pc, #12]	; (80046e4 <showWSLedPanel+0x420>)
 80046d8:	f7fd fb62 	bl	8001da0 <EF_PutString>


}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200002cc 	.word	0x200002cc
 80046e8:	080170b0 	.word	0x080170b0
 80046ec:	080170b8 	.word	0x080170b8
 80046f0:	080289ec 	.word	0x080289ec
 80046f4:	08017014 	.word	0x08017014

080046f8 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b090      	sub	sp, #64	; 0x40
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 8004732:	2300      	movs	r3, #0
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
 8004736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800473a:	2100      	movs	r1, #0
 800473c:	460a      	mov	r2, r1
 800473e:	801a      	strh	r2, [r3, #0]
 8004740:	460a      	mov	r2, r1
 8004742:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	f107 0320 	add.w	r3, r7, #32
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	f107 0318 	add.w	r3, r7, #24
 800475a:	2100      	movs	r1, #0
 800475c:	460a      	mov	r2, r1
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	460a      	mov	r2, r1
 8004762:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 8004764:	2300      	movs	r3, #0
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	f107 030c 	add.w	r3, r7, #12
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004772:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	2305      	movs	r3, #5
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2314      	movs	r3, #20
 800477e:	2214      	movs	r2, #20
 8004780:	2132      	movs	r1, #50	; 0x32
 8004782:	203c      	movs	r0, #60	; 0x3c
 8004784:	f7fd f824 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004788:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	2305      	movs	r3, #5
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	2314      	movs	r3, #20
 8004794:	2214      	movs	r2, #20
 8004796:	2132      	movs	r1, #50	; 0x32
 8004798:	205a      	movs	r0, #90	; 0x5a
 800479a:	f7fd f819 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800479e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	2305      	movs	r3, #5
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	2314      	movs	r3, #20
 80047aa:	2214      	movs	r2, #20
 80047ac:	2132      	movs	r1, #50	; 0x32
 80047ae:	2078      	movs	r0, #120	; 0x78
 80047b0:	f7fd f80e 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	2305      	movs	r3, #5
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	2314      	movs	r3, #20
 80047c0:	2214      	movs	r2, #20
 80047c2:	2132      	movs	r1, #50	; 0x32
 80047c4:	2096      	movs	r0, #150	; 0x96
 80047c6:	f7fd f803 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	2305      	movs	r3, #5
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	2314      	movs	r3, #20
 80047d6:	2214      	movs	r2, #20
 80047d8:	2132      	movs	r1, #50	; 0x32
 80047da:	20b4      	movs	r0, #180	; 0xb4
 80047dc:	f7fc fff8 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	2305      	movs	r3, #5
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	2314      	movs	r3, #20
 80047ec:	2214      	movs	r2, #20
 80047ee:	2132      	movs	r1, #50	; 0x32
 80047f0:	20d2      	movs	r0, #210	; 0xd2
 80047f2:	f7fc ffed 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	2305      	movs	r3, #5
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	2314      	movs	r3, #20
 8004802:	2214      	movs	r2, #20
 8004804:	2132      	movs	r1, #50	; 0x32
 8004806:	20f0      	movs	r0, #240	; 0xf0
 8004808:	f7fc ffe2 	bl	80017d0 <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fef8 	bl	8005604 <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 ff61 	bl	80056de <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 800481c:	48cc      	ldr	r0, [pc, #816]	; (8004b50 <drawschedulePanel+0x458>)
 800481e:	f7fd f8a5 	bl	800196c <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 8004822:	49cc      	ldr	r1, [pc, #816]	; (8004b54 <drawschedulePanel+0x45c>)
 8004824:	48cc      	ldr	r0, [pc, #816]	; (8004b58 <drawschedulePanel+0x460>)
 8004826:	f00e fc6b 	bl	8013100 <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800482a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	2301      	movs	r3, #1
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2300      	movs	r3, #0
 8004836:	224b      	movs	r2, #75	; 0x4b
 8004838:	213c      	movs	r1, #60	; 0x3c
 800483a:	48c7      	ldr	r0, [pc, #796]	; (8004b58 <drawschedulePanel+0x460>)
 800483c:	f7fd fab0 	bl	8001da0 <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004840:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	2305      	movs	r3, #5
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	2314      	movs	r3, #20
 800484c:	2214      	movs	r2, #20
 800484e:	21aa      	movs	r1, #170	; 0xaa
 8004850:	2015      	movs	r0, #21
 8004852:	f7fc ffbd 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004856:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	2305      	movs	r3, #5
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2314      	movs	r3, #20
 8004862:	2214      	movs	r2, #20
 8004864:	21aa      	movs	r1, #170	; 0xaa
 8004866:	2035      	movs	r0, #53	; 0x35
 8004868:	f7fc ffb2 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800486c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	2305      	movs	r3, #5
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	2314      	movs	r3, #20
 8004878:	2214      	movs	r2, #20
 800487a:	21aa      	movs	r1, #170	; 0xaa
 800487c:	2055      	movs	r0, #85	; 0x55
 800487e:	f7fc ffa7 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004882:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	2305      	movs	r3, #5
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	2314      	movs	r3, #20
 800488e:	2214      	movs	r2, #20
 8004890:	21aa      	movs	r1, #170	; 0xaa
 8004892:	2075      	movs	r0, #117	; 0x75
 8004894:	f7fc ff9c 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004898:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	2305      	movs	r3, #5
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	2314      	movs	r3, #20
 80048a4:	2214      	movs	r2, #20
 80048a6:	21aa      	movs	r1, #170	; 0xaa
 80048a8:	2095      	movs	r0, #149	; 0x95
 80048aa:	f7fc ff91 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	2305      	movs	r3, #5
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	2314      	movs	r3, #20
 80048ba:	2214      	movs	r2, #20
 80048bc:	21aa      	movs	r1, #170	; 0xaa
 80048be:	20b5      	movs	r0, #181	; 0xb5
 80048c0:	f7fc ff86 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	2305      	movs	r3, #5
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	2314      	movs	r3, #20
 80048d0:	2214      	movs	r2, #20
 80048d2:	21aa      	movs	r1, #170	; 0xaa
 80048d4:	20d5      	movs	r0, #213	; 0xd5
 80048d6:	f7fc ff7b 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	2305      	movs	r3, #5
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	2314      	movs	r3, #20
 80048e6:	2214      	movs	r2, #20
 80048e8:	21aa      	movs	r1, #170	; 0xaa
 80048ea:	20f5      	movs	r0, #245	; 0xf5
 80048ec:	f7fc ff70 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	2305      	movs	r3, #5
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	2314      	movs	r3, #20
 80048fc:	2214      	movs	r2, #20
 80048fe:	21aa      	movs	r1, #170	; 0xaa
 8004900:	f240 1015 	movw	r0, #277	; 0x115
 8004904:	f7fc ff64 	bl	80017d0 <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004908:	4994      	ldr	r1, [pc, #592]	; (8004b5c <drawschedulePanel+0x464>)
 800490a:	4893      	ldr	r0, [pc, #588]	; (8004b58 <drawschedulePanel+0x460>)
 800490c:	f00e fbf8 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004910:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	2301      	movs	r3, #1
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	22c3      	movs	r2, #195	; 0xc3
 800491e:	2115      	movs	r1, #21
 8004920:	488d      	ldr	r0, [pc, #564]	; (8004b58 <drawschedulePanel+0x460>)
 8004922:	f7fd fa3d 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004926:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	2305      	movs	r3, #5
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	2314      	movs	r3, #20
 8004932:	2222      	movs	r2, #34	; 0x22
 8004934:	2165      	movs	r1, #101	; 0x65
 8004936:	20bb      	movs	r0, #187	; 0xbb
 8004938:	f7fc ffc7 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 800493c:	4988      	ldr	r1, [pc, #544]	; (8004b60 <drawschedulePanel+0x468>)
 800493e:	4886      	ldr	r0, [pc, #536]	; (8004b58 <drawschedulePanel+0x460>)
 8004940:	f00e fbde 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004944:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	2300      	movs	r3, #0
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	2300      	movs	r3, #0
 8004950:	2268      	movs	r2, #104	; 0x68
 8004952:	21c1      	movs	r1, #193	; 0xc1
 8004954:	4880      	ldr	r0, [pc, #512]	; (8004b58 <drawschedulePanel+0x460>)
 8004956:	f7fd fa23 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800495a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	2305      	movs	r3, #5
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2314      	movs	r3, #20
 8004966:	2222      	movs	r2, #34	; 0x22
 8004968:	2165      	movs	r1, #101	; 0x65
 800496a:	20e9      	movs	r0, #233	; 0xe9
 800496c:	f7fc ffad 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004970:	497c      	ldr	r1, [pc, #496]	; (8004b64 <drawschedulePanel+0x46c>)
 8004972:	4879      	ldr	r0, [pc, #484]	; (8004b58 <drawschedulePanel+0x460>)
 8004974:	f00e fbc4 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004978:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	2300      	movs	r3, #0
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	2300      	movs	r3, #0
 8004984:	2268      	movs	r2, #104	; 0x68
 8004986:	21ec      	movs	r1, #236	; 0xec
 8004988:	4873      	ldr	r0, [pc, #460]	; (8004b58 <drawschedulePanel+0x460>)
 800498a:	f7fd fa09 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800498e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	2305      	movs	r3, #5
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	2314      	movs	r3, #20
 800499a:	2222      	movs	r2, #34	; 0x22
 800499c:	2165      	movs	r1, #101	; 0x65
 800499e:	f240 1017 	movw	r0, #279	; 0x117
 80049a2:	f7fc ff92 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 80049a6:	4970      	ldr	r1, [pc, #448]	; (8004b68 <drawschedulePanel+0x470>)
 80049a8:	486b      	ldr	r0, [pc, #428]	; (8004b58 <drawschedulePanel+0x460>)
 80049aa:	f00e fba9 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	2300      	movs	r3, #0
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2300      	movs	r3, #0
 80049ba:	2268      	movs	r2, #104	; 0x68
 80049bc:	f44f 718c 	mov.w	r1, #280	; 0x118
 80049c0:	4865      	ldr	r0, [pc, #404]	; (8004b58 <drawschedulePanel+0x460>)
 80049c2:	f7fd f9ed 	bl	8001da0 <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049ca:	9301      	str	r3, [sp, #4]
 80049cc:	2305      	movs	r3, #5
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	2314      	movs	r3, #20
 80049d2:	2222      	movs	r2, #34	; 0x22
 80049d4:	2188      	movs	r1, #136	; 0x88
 80049d6:	20bb      	movs	r0, #187	; 0xbb
 80049d8:	f7fc ff77 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 80049dc:	4960      	ldr	r1, [pc, #384]	; (8004b60 <drawschedulePanel+0x468>)
 80049de:	485e      	ldr	r0, [pc, #376]	; (8004b58 <drawschedulePanel+0x460>)
 80049e0:	f00e fb8e 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049e4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	2300      	movs	r3, #0
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2300      	movs	r3, #0
 80049f0:	228b      	movs	r2, #139	; 0x8b
 80049f2:	21c1      	movs	r1, #193	; 0xc1
 80049f4:	4858      	ldr	r0, [pc, #352]	; (8004b58 <drawschedulePanel+0x460>)
 80049f6:	f7fd f9d3 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049fa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	2305      	movs	r3, #5
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2314      	movs	r3, #20
 8004a06:	2222      	movs	r2, #34	; 0x22
 8004a08:	2188      	movs	r1, #136	; 0x88
 8004a0a:	20e9      	movs	r0, #233	; 0xe9
 8004a0c:	f7fc ff5d 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004a10:	4954      	ldr	r1, [pc, #336]	; (8004b64 <drawschedulePanel+0x46c>)
 8004a12:	4851      	ldr	r0, [pc, #324]	; (8004b58 <drawschedulePanel+0x460>)
 8004a14:	f00e fb74 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a18:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	2300      	movs	r3, #0
 8004a24:	228b      	movs	r2, #139	; 0x8b
 8004a26:	21ec      	movs	r1, #236	; 0xec
 8004a28:	484b      	ldr	r0, [pc, #300]	; (8004b58 <drawschedulePanel+0x460>)
 8004a2a:	f7fd f9b9 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a2e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	2305      	movs	r3, #5
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	2314      	movs	r3, #20
 8004a3a:	2222      	movs	r2, #34	; 0x22
 8004a3c:	2188      	movs	r1, #136	; 0x88
 8004a3e:	f240 1017 	movw	r0, #279	; 0x117
 8004a42:	f7fc ff42 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004a46:	4948      	ldr	r1, [pc, #288]	; (8004b68 <drawschedulePanel+0x470>)
 8004a48:	4843      	ldr	r0, [pc, #268]	; (8004b58 <drawschedulePanel+0x460>)
 8004a4a:	f00e fb59 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a4e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	2300      	movs	r3, #0
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	228b      	movs	r2, #139	; 0x8b
 8004a5c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004a60:	483d      	ldr	r0, [pc, #244]	; (8004b58 <drawschedulePanel+0x460>)
 8004a62:	f7fd f99d 	bl	8001da0 <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004a66:	4841      	ldr	r0, [pc, #260]	; (8004b6c <drawschedulePanel+0x474>)
 8004a68:	f7fc ff80 	bl	800196c <EF_SetFont>
	  if(NrOfschedule == 1)
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	f040 80db 	bne.w	8004c2a <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 8004a74:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004a78:	4619      	mov	r1, r3
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f7fe fb9b 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 8004a80:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8004a84:	4619      	mov	r1, r3
 8004a86:	2001      	movs	r0, #1
 8004a88:	f7fe fbb9 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 8004a8c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004a90:	4619      	mov	r1, r3
 8004a92:	2001      	movs	r0, #1
 8004a94:	f7fe fbd7 	bl	8003246 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 8004a98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	f7fe fbf5 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8004aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	2001      	movs	r0, #1
 8004aac:	f7fe fa32 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8004ab0:	f107 031c 	add.w	r3, r7, #28
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f7fe faa8 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 8004abc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ac0:	2b17      	cmp	r3, #23
 8004ac2:	d902      	bls.n	8004aca <drawschedulePanel+0x3d2>
 8004ac4:	2317      	movs	r3, #23
 8004ac6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 8004aca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004ace:	2b3b      	cmp	r3, #59	; 0x3b
 8004ad0:	d902      	bls.n	8004ad8 <drawschedulePanel+0x3e0>
 8004ad2:	233b      	movs	r3, #59	; 0x3b
 8004ad4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 8004ad8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004adc:	2b17      	cmp	r3, #23
 8004ade:	d902      	bls.n	8004ae6 <drawschedulePanel+0x3ee>
 8004ae0:	2317      	movs	r3, #23
 8004ae2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 8004ae6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004aea:	2b3b      	cmp	r3, #59	; 0x3b
 8004aec:	d902      	bls.n	8004af4 <drawschedulePanel+0x3fc>
 8004aee:	233b      	movs	r3, #59	; 0x3b
 8004af0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004af4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004af8:	2b09      	cmp	r3, #9
 8004afa:	d80d      	bhi.n	8004b18 <drawschedulePanel+0x420>
 8004afc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b00:	2b09      	cmp	r3, #9
 8004b02:	d809      	bhi.n	8004b18 <drawschedulePanel+0x420>
 8004b04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b0e:	4918      	ldr	r1, [pc, #96]	; (8004b70 <drawschedulePanel+0x478>)
 8004b10:	4811      	ldr	r0, [pc, #68]	; (8004b58 <drawschedulePanel+0x460>)
 8004b12:	f00e faf5 	bl	8013100 <siprintf>
 8004b16:	e03a      	b.n	8004b8e <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004b18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b1c:	2b09      	cmp	r3, #9
 8004b1e:	d809      	bhi.n	8004b34 <drawschedulePanel+0x43c>
 8004b20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b24:	461a      	mov	r2, r3
 8004b26:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b2a:	4912      	ldr	r1, [pc, #72]	; (8004b74 <drawschedulePanel+0x47c>)
 8004b2c:	480a      	ldr	r0, [pc, #40]	; (8004b58 <drawschedulePanel+0x460>)
 8004b2e:	f00e fae7 	bl	8013100 <siprintf>
 8004b32:	e02c      	b.n	8004b8e <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004b34:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b38:	2b09      	cmp	r3, #9
 8004b3a:	d81f      	bhi.n	8004b7c <drawschedulePanel+0x484>
 8004b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b40:	461a      	mov	r2, r3
 8004b42:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b46:	490c      	ldr	r1, [pc, #48]	; (8004b78 <drawschedulePanel+0x480>)
 8004b48:	4803      	ldr	r0, [pc, #12]	; (8004b58 <drawschedulePanel+0x460>)
 8004b4a:	f00e fad9 	bl	8013100 <siprintf>
 8004b4e:	e01e      	b.n	8004b8e <drawschedulePanel+0x496>
 8004b50:	080289ec 	.word	0x080289ec
 8004b54:	080170c0 	.word	0x080170c0
 8004b58:	200002cc 	.word	0x200002cc
 8004b5c:	080170d8 	.word	0x080170d8
 8004b60:	080170fc 	.word	0x080170fc
 8004b64:	08017100 	.word	0x08017100
 8004b68:	08017104 	.word	0x08017104
 8004b6c:	0802a964 	.word	0x0802a964
 8004b70:	0801710c 	.word	0x0801710c
 8004b74:	0801711c 	.word	0x0801711c
 8004b78:	0801712c 	.word	0x0801712c
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004b7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b80:	461a      	mov	r2, r3
 8004b82:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b86:	498f      	ldr	r1, [pc, #572]	; (8004dc4 <drawschedulePanel+0x6cc>)
 8004b88:	488f      	ldr	r0, [pc, #572]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004b8a:	f00e fab9 	bl	8013100 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004b8e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	2301      	movs	r3, #1
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2264      	movs	r2, #100	; 0x64
 8004b9c:	210a      	movs	r1, #10
 8004b9e:	488a      	ldr	r0, [pc, #552]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004ba0:	f7fd f8fe 	bl	8001da0 <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004ba4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ba8:	2b09      	cmp	r3, #9
 8004baa:	d80d      	bhi.n	8004bc8 <drawschedulePanel+0x4d0>
 8004bac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bb0:	2b09      	cmp	r3, #9
 8004bb2:	d809      	bhi.n	8004bc8 <drawschedulePanel+0x4d0>
 8004bb4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bbe:	4983      	ldr	r1, [pc, #524]	; (8004dcc <drawschedulePanel+0x6d4>)
 8004bc0:	4881      	ldr	r0, [pc, #516]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004bc2:	f00e fa9d 	bl	8013100 <siprintf>
 8004bc6:	e024      	b.n	8004c12 <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 8004bc8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bcc:	2b09      	cmp	r3, #9
 8004bce:	d809      	bhi.n	8004be4 <drawschedulePanel+0x4ec>
 8004bd0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bda:	497d      	ldr	r1, [pc, #500]	; (8004dd0 <drawschedulePanel+0x6d8>)
 8004bdc:	487a      	ldr	r0, [pc, #488]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004bde:	f00e fa8f 	bl	8013100 <siprintf>
 8004be2:	e016      	b.n	8004c12 <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004be4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004be8:	2b09      	cmp	r3, #9
 8004bea:	d809      	bhi.n	8004c00 <drawschedulePanel+0x508>
 8004bec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bf6:	4977      	ldr	r1, [pc, #476]	; (8004dd4 <drawschedulePanel+0x6dc>)
 8004bf8:	4873      	ldr	r0, [pc, #460]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004bfa:	f00e fa81 	bl	8013100 <siprintf>
 8004bfe:	e008      	b.n	8004c12 <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 8004c00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004c04:	461a      	mov	r2, r3
 8004c06:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c0a:	4973      	ldr	r1, [pc, #460]	; (8004dd8 <drawschedulePanel+0x6e0>)
 8004c0c:	486e      	ldr	r0, [pc, #440]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004c0e:	f00e fa77 	bl	8013100 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004c12:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c16:	9301      	str	r3, [sp, #4]
 8004c18:	2301      	movs	r3, #1
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2287      	movs	r2, #135	; 0x87
 8004c20:	210a      	movs	r1, #10
 8004c22:	4869      	ldr	r0, [pc, #420]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004c24:	f7fd f8bc 	bl	8001da0 <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004c28:	e0c7      	b.n	8004dba <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	f040 80c4 	bne.w	8004dba <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 8004c32:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004c36:	4619      	mov	r1, r3
 8004c38:	2002      	movs	r0, #2
 8004c3a:	f7fe fabc 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 8004c3e:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8004c42:	4619      	mov	r1, r3
 8004c44:	2002      	movs	r0, #2
 8004c46:	f7fe fada 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004c4a:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004c4e:	4619      	mov	r1, r3
 8004c50:	2002      	movs	r0, #2
 8004c52:	f7fe faf8 	bl	8003246 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 8004c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	2002      	movs	r0, #2
 8004c5e:	f7fe fb16 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 8004c62:	f107 0314 	add.w	r3, r7, #20
 8004c66:	4619      	mov	r1, r3
 8004c68:	2002      	movs	r0, #2
 8004c6a:	f7fe f953 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 8004c6e:	f107 0308 	add.w	r3, r7, #8
 8004c72:	4619      	mov	r1, r3
 8004c74:	2002      	movs	r0, #2
 8004c76:	f7fe f9c9 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 8004c7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c7e:	2b17      	cmp	r3, #23
 8004c80:	d902      	bls.n	8004c88 <drawschedulePanel+0x590>
 8004c82:	2317      	movs	r3, #23
 8004c84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 8004c88:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004c8c:	2b3b      	cmp	r3, #59	; 0x3b
 8004c8e:	d902      	bls.n	8004c96 <drawschedulePanel+0x59e>
 8004c90:	233b      	movs	r3, #59	; 0x3b
 8004c92:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 8004c96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c9a:	2b17      	cmp	r3, #23
 8004c9c:	d902      	bls.n	8004ca4 <drawschedulePanel+0x5ac>
 8004c9e:	2317      	movs	r3, #23
 8004ca0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 8004ca4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ca8:	2b3b      	cmp	r3, #59	; 0x3b
 8004caa:	d902      	bls.n	8004cb2 <drawschedulePanel+0x5ba>
 8004cac:	233b      	movs	r3, #59	; 0x3b
 8004cae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 8004cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cb6:	2b09      	cmp	r3, #9
 8004cb8:	d80d      	bhi.n	8004cd6 <drawschedulePanel+0x5de>
 8004cba:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cbe:	2b09      	cmp	r3, #9
 8004cc0:	d809      	bhi.n	8004cd6 <drawschedulePanel+0x5de>
 8004cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004ccc:	4943      	ldr	r1, [pc, #268]	; (8004ddc <drawschedulePanel+0x6e4>)
 8004cce:	483e      	ldr	r0, [pc, #248]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004cd0:	f00e fa16 	bl	8013100 <siprintf>
 8004cd4:	e024      	b.n	8004d20 <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 8004cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cda:	2b09      	cmp	r3, #9
 8004cdc:	d809      	bhi.n	8004cf2 <drawschedulePanel+0x5fa>
 8004cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004ce8:	493d      	ldr	r1, [pc, #244]	; (8004de0 <drawschedulePanel+0x6e8>)
 8004cea:	4837      	ldr	r0, [pc, #220]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004cec:	f00e fa08 	bl	8013100 <siprintf>
 8004cf0:	e016      	b.n	8004d20 <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 8004cf2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cf6:	2b09      	cmp	r3, #9
 8004cf8:	d809      	bhi.n	8004d0e <drawschedulePanel+0x616>
 8004cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d04:	4937      	ldr	r1, [pc, #220]	; (8004de4 <drawschedulePanel+0x6ec>)
 8004d06:	4830      	ldr	r0, [pc, #192]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004d08:	f00e f9fa 	bl	8013100 <siprintf>
 8004d0c:	e008      	b.n	8004d20 <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004d0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d12:	461a      	mov	r2, r3
 8004d14:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d18:	4933      	ldr	r1, [pc, #204]	; (8004de8 <drawschedulePanel+0x6f0>)
 8004d1a:	482b      	ldr	r0, [pc, #172]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004d1c:	f00e f9f0 	bl	8013100 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004d20:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	2301      	movs	r3, #1
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	2264      	movs	r2, #100	; 0x64
 8004d2e:	210a      	movs	r1, #10
 8004d30:	4825      	ldr	r0, [pc, #148]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004d32:	f7fd f835 	bl	8001da0 <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 8004d36:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d3a:	2b09      	cmp	r3, #9
 8004d3c:	d80d      	bhi.n	8004d5a <drawschedulePanel+0x662>
 8004d3e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d42:	2b09      	cmp	r3, #9
 8004d44:	d809      	bhi.n	8004d5a <drawschedulePanel+0x662>
 8004d46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d50:	4926      	ldr	r1, [pc, #152]	; (8004dec <drawschedulePanel+0x6f4>)
 8004d52:	481d      	ldr	r0, [pc, #116]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004d54:	f00e f9d4 	bl	8013100 <siprintf>
 8004d58:	e024      	b.n	8004da4 <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004d5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d5e:	2b09      	cmp	r3, #9
 8004d60:	d809      	bhi.n	8004d76 <drawschedulePanel+0x67e>
 8004d62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d66:	461a      	mov	r2, r3
 8004d68:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d6c:	4920      	ldr	r1, [pc, #128]	; (8004df0 <drawschedulePanel+0x6f8>)
 8004d6e:	4816      	ldr	r0, [pc, #88]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004d70:	f00e f9c6 	bl	8013100 <siprintf>
 8004d74:	e016      	b.n	8004da4 <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 8004d76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d7a:	2b09      	cmp	r3, #9
 8004d7c:	d809      	bhi.n	8004d92 <drawschedulePanel+0x69a>
 8004d7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d82:	461a      	mov	r2, r3
 8004d84:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d88:	491a      	ldr	r1, [pc, #104]	; (8004df4 <drawschedulePanel+0x6fc>)
 8004d8a:	480f      	ldr	r0, [pc, #60]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004d8c:	f00e f9b8 	bl	8013100 <siprintf>
 8004d90:	e008      	b.n	8004da4 <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 8004d92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d96:	461a      	mov	r2, r3
 8004d98:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d9c:	4916      	ldr	r1, [pc, #88]	; (8004df8 <drawschedulePanel+0x700>)
 8004d9e:	480a      	ldr	r0, [pc, #40]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004da0:	f00e f9ae 	bl	8013100 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004da4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004da8:	9301      	str	r3, [sp, #4]
 8004daa:	2301      	movs	r3, #1
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	2287      	movs	r2, #135	; 0x87
 8004db2:	210c      	movs	r1, #12
 8004db4:	4804      	ldr	r0, [pc, #16]	; (8004dc8 <drawschedulePanel+0x6d0>)
 8004db6:	f7fc fff3 	bl	8001da0 <EF_PutString>
}
 8004dba:	bf00      	nop
 8004dbc:	3738      	adds	r7, #56	; 0x38
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	0801713c 	.word	0x0801713c
 8004dc8:	200002cc 	.word	0x200002cc
 8004dcc:	0801714c 	.word	0x0801714c
 8004dd0:	0801715c 	.word	0x0801715c
 8004dd4:	0801716c 	.word	0x0801716c
 8004dd8:	0801717c 	.word	0x0801717c
 8004ddc:	0801718c 	.word	0x0801718c
 8004de0:	0801719c 	.word	0x0801719c
 8004de4:	080171ac 	.word	0x080171ac
 8004de8:	080171bc 	.word	0x080171bc
 8004dec:	080171cc 	.word	0x080171cc
 8004df0:	080171dc 	.word	0x080171dc
 8004df4:	080171ec 	.word	0x080171ec
 8004df8:	080171fc 	.word	0x080171fc

08004dfc <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004e02:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004e06:	f7fd f9b5 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004e0a:	483f      	ldr	r0, [pc, #252]	; (8004f08 <showSchedule1Panel+0x10c>)
 8004e0c:	f7fc fdae 	bl	800196c <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004e10:	493e      	ldr	r1, [pc, #248]	; (8004f0c <showSchedule1Panel+0x110>)
 8004e12:	483f      	ldr	r0, [pc, #252]	; (8004f10 <showSchedule1Panel+0x114>)
 8004e14:	f00e f974 	bl	8013100 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004e18:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e26:	220a      	movs	r2, #10
 8004e28:	212a      	movs	r1, #42	; 0x2a
 8004e2a:	4839      	ldr	r0, [pc, #228]	; (8004f10 <showSchedule1Panel+0x114>)
 8004e2c:	f7fc ffb8 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004e30:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	2329      	movs	r3, #41	; 0x29
 8004e38:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e3c:	2129      	movs	r1, #41	; 0x29
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f7fc fae4 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004e44:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	232b      	movs	r3, #43	; 0x2b
 8004e4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e50:	212b      	movs	r1, #43	; 0x2b
 8004e52:	2000      	movs	r0, #0
 8004e54:	f7fc fada 	bl	800140c <GFX_DrawLine>

	  drawschedulePanel(1);
 8004e58:	2001      	movs	r0, #1
 8004e5a:	f7ff fc4d 	bl	80046f8 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004e5e:	482d      	ldr	r0, [pc, #180]	; (8004f14 <showSchedule1Panel+0x118>)
 8004e60:	f7fc fd84 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004e64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	2305      	movs	r3, #5
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	2314      	movs	r3, #20
 8004e70:	225f      	movs	r2, #95	; 0x5f
 8004e72:	21d8      	movs	r1, #216	; 0xd8
 8004e74:	20dc      	movs	r0, #220	; 0xdc
 8004e76:	f7fc fd28 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004e7a:	4927      	ldr	r1, [pc, #156]	; (8004f18 <showSchedule1Panel+0x11c>)
 8004e7c:	4824      	ldr	r0, [pc, #144]	; (8004f10 <showSchedule1Panel+0x114>)
 8004e7e:	f00e f93f 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004e82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	22da      	movs	r2, #218	; 0xda
 8004e90:	21e6      	movs	r1, #230	; 0xe6
 8004e92:	481f      	ldr	r0, [pc, #124]	; (8004f10 <showSchedule1Panel+0x114>)
 8004e94:	f7fc ff84 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004e98:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	2305      	movs	r3, #5
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	2314      	movs	r3, #20
 8004ea4:	225a      	movs	r2, #90	; 0x5a
 8004ea6:	21d8      	movs	r1, #216	; 0xd8
 8004ea8:	2078      	movs	r0, #120	; 0x78
 8004eaa:	f7fc fd0e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004eae:	491b      	ldr	r1, [pc, #108]	; (8004f1c <showSchedule1Panel+0x120>)
 8004eb0:	4817      	ldr	r0, [pc, #92]	; (8004f10 <showSchedule1Panel+0x114>)
 8004eb2:	f00e f925 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004eb6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	22da      	movs	r2, #218	; 0xda
 8004ec4:	217e      	movs	r1, #126	; 0x7e
 8004ec6:	4812      	ldr	r0, [pc, #72]	; (8004f10 <showSchedule1Panel+0x114>)
 8004ec8:	f7fc ff6a 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ecc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	2305      	movs	r3, #5
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	2314      	movs	r3, #20
 8004ed8:	2264      	movs	r2, #100	; 0x64
 8004eda:	21d8      	movs	r1, #216	; 0xd8
 8004edc:	200a      	movs	r0, #10
 8004ede:	f7fc fcf4 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004ee2:	490f      	ldr	r1, [pc, #60]	; (8004f20 <showSchedule1Panel+0x124>)
 8004ee4:	480a      	ldr	r0, [pc, #40]	; (8004f10 <showSchedule1Panel+0x114>)
 8004ee6:	f00e f90b 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004eea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	22da      	movs	r2, #218	; 0xda
 8004ef8:	210d      	movs	r1, #13
 8004efa:	4805      	ldr	r0, [pc, #20]	; (8004f10 <showSchedule1Panel+0x114>)
 8004efc:	f7fc ff50 	bl	8001da0 <EF_PutString>
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	0802a964 	.word	0x0802a964
 8004f0c:	0801720c 	.word	0x0801720c
 8004f10:	200002cc 	.word	0x200002cc
 8004f14:	080289ec 	.word	0x080289ec
 8004f18:	0801721c 	.word	0x0801721c
 8004f1c:	08017228 	.word	0x08017228
 8004f20:	08017230 	.word	0x08017230

08004f24 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004f2a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004f2e:	f7fd f921 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004f32:	4832      	ldr	r0, [pc, #200]	; (8004ffc <showSchedule2Panel+0xd8>)
 8004f34:	f7fc fd1a 	bl	800196c <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004f38:	4931      	ldr	r1, [pc, #196]	; (8005000 <showSchedule2Panel+0xdc>)
 8004f3a:	4832      	ldr	r0, [pc, #200]	; (8005004 <showSchedule2Panel+0xe0>)
 8004f3c:	f00e f8e0 	bl	8013100 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004f40:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	2300      	movs	r3, #0
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f4e:	220a      	movs	r2, #10
 8004f50:	212a      	movs	r1, #42	; 0x2a
 8004f52:	482c      	ldr	r0, [pc, #176]	; (8005004 <showSchedule2Panel+0xe0>)
 8004f54:	f7fc ff24 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004f58:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	2329      	movs	r3, #41	; 0x29
 8004f60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f64:	2129      	movs	r1, #41	; 0x29
 8004f66:	2000      	movs	r0, #0
 8004f68:	f7fc fa50 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004f6c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	232b      	movs	r3, #43	; 0x2b
 8004f74:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f78:	212b      	movs	r1, #43	; 0x2b
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f7fc fa46 	bl	800140c <GFX_DrawLine>

	  drawschedulePanel(2);
 8004f80:	2002      	movs	r0, #2
 8004f82:	f7ff fbb9 	bl	80046f8 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004f86:	4820      	ldr	r0, [pc, #128]	; (8005008 <showSchedule2Panel+0xe4>)
 8004f88:	f7fc fcf0 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004f8c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	2305      	movs	r3, #5
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	2314      	movs	r3, #20
 8004f98:	225a      	movs	r2, #90	; 0x5a
 8004f9a:	21d8      	movs	r1, #216	; 0xd8
 8004f9c:	2078      	movs	r0, #120	; 0x78
 8004f9e:	f7fc fc94 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004fa2:	491a      	ldr	r1, [pc, #104]	; (800500c <showSchedule2Panel+0xe8>)
 8004fa4:	4817      	ldr	r0, [pc, #92]	; (8005004 <showSchedule2Panel+0xe0>)
 8004fa6:	f00e f8ab 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004faa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	22da      	movs	r2, #218	; 0xda
 8004fb8:	217e      	movs	r1, #126	; 0x7e
 8004fba:	4812      	ldr	r0, [pc, #72]	; (8005004 <showSchedule2Panel+0xe0>)
 8004fbc:	f7fc fef0 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004fc0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	2305      	movs	r3, #5
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	2314      	movs	r3, #20
 8004fcc:	2264      	movs	r2, #100	; 0x64
 8004fce:	21d8      	movs	r1, #216	; 0xd8
 8004fd0:	200a      	movs	r0, #10
 8004fd2:	f7fc fc7a 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004fd6:	490e      	ldr	r1, [pc, #56]	; (8005010 <showSchedule2Panel+0xec>)
 8004fd8:	480a      	ldr	r0, [pc, #40]	; (8005004 <showSchedule2Panel+0xe0>)
 8004fda:	f00e f891 	bl	8013100 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004fde:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	22da      	movs	r2, #218	; 0xda
 8004fec:	210d      	movs	r1, #13
 8004fee:	4805      	ldr	r0, [pc, #20]	; (8005004 <showSchedule2Panel+0xe0>)
 8004ff0:	f7fc fed6 	bl	8001da0 <EF_PutString>
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	0802a964 	.word	0x0802a964
 8005000:	0801723c 	.word	0x0801723c
 8005004:	200002cc 	.word	0x200002cc
 8005008:	080289ec 	.word	0x080289ec
 800500c:	08017228 	.word	0x08017228
 8005010:	08017230 	.word	0x08017230

08005014 <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 800501a:	f7fd fd37 	bl	8002a8c <DS3231_GetHour>
 800501e:	4603      	mov	r3, r0
 8005020:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8005022:	f7fd fd3f 	bl	8002aa4 <DS3231_GetMinute>
 8005026:	4603      	mov	r3, r0
 8005028:	71bb      	strb	r3, [r7, #6]

	  EF_SetFont(&arialBlack_20ptFontInfo);
 800502a:	482f      	ldr	r0, [pc, #188]	; (80050e8 <ChangeHourOnScreen+0xd4>)
 800502c:	f7fc fc9e 	bl	800196c <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8005030:	4b2e      	ldr	r3, [pc, #184]	; (80050ec <ChangeHourOnScreen+0xd8>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	79fa      	ldrb	r2, [r7, #7]
 8005036:	429a      	cmp	r2, r3
 8005038:	d021      	beq.n	800507e <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 800503a:	4b2d      	ldr	r3, [pc, #180]	; (80050f0 <ChangeHourOnScreen+0xdc>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d11a      	bne.n	8005078 <ChangeHourOnScreen+0x64>
		  {
			  if(CHour < 10)
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	2b09      	cmp	r3, #9
 8005046:	d806      	bhi.n	8005056 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	461a      	mov	r2, r3
 800504c:	4929      	ldr	r1, [pc, #164]	; (80050f4 <ChangeHourOnScreen+0xe0>)
 800504e:	482a      	ldr	r0, [pc, #168]	; (80050f8 <ChangeHourOnScreen+0xe4>)
 8005050:	f00e f856 	bl	8013100 <siprintf>
 8005054:	e005      	b.n	8005062 <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	461a      	mov	r2, r3
 800505a:	4928      	ldr	r1, [pc, #160]	; (80050fc <ChangeHourOnScreen+0xe8>)
 800505c:	4826      	ldr	r0, [pc, #152]	; (80050f8 <ChangeHourOnScreen+0xe4>)
 800505e:	f00e f84f 	bl	8013100 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005062:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005066:	9301      	str	r3, [sp, #4]
 8005068:	2301      	movs	r3, #1
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	2300      	movs	r3, #0
 800506e:	2232      	movs	r2, #50	; 0x32
 8005070:	2161      	movs	r1, #97	; 0x61
 8005072:	4821      	ldr	r0, [pc, #132]	; (80050f8 <ChangeHourOnScreen+0xe4>)
 8005074:	f7fc fe94 	bl	8001da0 <EF_PutString>
		  }
		  OldHours = CHour;
 8005078:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <ChangeHourOnScreen+0xd8>)
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	7013      	strb	r3, [r2, #0]
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 800507e:	4b20      	ldr	r3, [pc, #128]	; (8005100 <ChangeHourOnScreen+0xec>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	79ba      	ldrb	r2, [r7, #6]
 8005084:	429a      	cmp	r2, r3
 8005086:	d02b      	beq.n	80050e0 <ChangeHourOnScreen+0xcc>
	  {
		  uint8_t  CDayOfWeek = DS3231_GetDayOfWeek();
 8005088:	f7fd fcf4 	bl	8002a74 <DS3231_GetDayOfWeek>
 800508c:	4603      	mov	r3, r0
 800508e:	717b      	strb	r3, [r7, #5]
		makeScheduleActivity(CHour, CMinute, CDayOfWeek); // Check if changed hour and minute are set in schedules
 8005090:	797a      	ldrb	r2, [r7, #5]
 8005092:	79b9      	ldrb	r1, [r7, #6]
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fba4 	bl	80057e4 <makeScheduleActivity>

		  if(State == MENUTFT_PARAMETERS)
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <ChangeHourOnScreen+0xdc>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d11a      	bne.n	80050da <ChangeHourOnScreen+0xc6>
		  {
			  if(CMinute < 10)
 80050a4:	79bb      	ldrb	r3, [r7, #6]
 80050a6:	2b09      	cmp	r3, #9
 80050a8:	d806      	bhi.n	80050b8 <ChangeHourOnScreen+0xa4>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 80050aa:	79bb      	ldrb	r3, [r7, #6]
 80050ac:	461a      	mov	r2, r3
 80050ae:	4915      	ldr	r1, [pc, #84]	; (8005104 <ChangeHourOnScreen+0xf0>)
 80050b0:	4811      	ldr	r0, [pc, #68]	; (80050f8 <ChangeHourOnScreen+0xe4>)
 80050b2:	f00e f825 	bl	8013100 <siprintf>
 80050b6:	e005      	b.n	80050c4 <ChangeHourOnScreen+0xb0>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 80050b8:	79bb      	ldrb	r3, [r7, #6]
 80050ba:	461a      	mov	r2, r3
 80050bc:	4912      	ldr	r1, [pc, #72]	; (8005108 <ChangeHourOnScreen+0xf4>)
 80050be:	480e      	ldr	r0, [pc, #56]	; (80050f8 <ChangeHourOnScreen+0xe4>)
 80050c0:	f00e f81e 	bl	8013100 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80050c4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	2301      	movs	r3, #1
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2300      	movs	r3, #0
 80050d0:	2232      	movs	r2, #50	; 0x32
 80050d2:	2196      	movs	r1, #150	; 0x96
 80050d4:	4808      	ldr	r0, [pc, #32]	; (80050f8 <ChangeHourOnScreen+0xe4>)
 80050d6:	f7fc fe63 	bl	8001da0 <EF_PutString>
		  }
		  OldMinutes = CMinute;
 80050da:	4a09      	ldr	r2, [pc, #36]	; (8005100 <ChangeHourOnScreen+0xec>)
 80050dc:	79bb      	ldrb	r3, [r7, #6]
 80050de:	7013      	strb	r3, [r2, #0]
	  }

}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	0802a964 	.word	0x0802a964
 80050ec:	20000252 	.word	0x20000252
 80050f0:	200002a0 	.word	0x200002a0
 80050f4:	0801724c 	.word	0x0801724c
 80050f8:	200002cc 	.word	0x200002cc
 80050fc:	08017254 	.word	0x08017254
 8005100:	20000253 	.word	0x20000253
 8005104:	08017258 	.word	0x08017258
 8005108:	08017260 	.word	0x08017260

0800510c <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d104      	bne.n	800512a <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8005120:	f7fd fe88 	bl	8002e34 <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8005124:	f7fd febe 	bl	8002ea4 <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8005128:	e005      	b.n	8005136 <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 800512a:	2018      	movs	r0, #24
 800512c:	f005 f818 	bl	800a160 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8005130:	2019      	movs	r0, #25
 8005132:	f005 f815 	bl	800a160 <SendComand>
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af02      	add	r7, sp, #8
 8005146:	4603      	mov	r3, r0
 8005148:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d13e      	bne.n	80051d2 <predefinedActivityKarmienie+0x92>
	{
		EEPROM_RelayStateRestore();
 8005154:	f7fd fe6e 	bl	8002e34 <EEPROM_RelayStateRestore>
		ActivityButtonState[0] = 0;
 8005158:	4b24      	ldr	r3, [pc, #144]	; (80051ec <predefinedActivityKarmienie+0xac>)
 800515a:	2200      	movs	r2, #0
 800515c:	701a      	strb	r2, [r3, #0]

		EF_SetFont(&arial_11ptFontInfo);
 800515e:	4824      	ldr	r0, [pc, #144]	; (80051f0 <predefinedActivityKarmienie+0xb0>)
 8005160:	f7fc fc04 	bl	800196c <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005164:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	230a      	movs	r3, #10
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2328      	movs	r3, #40	; 0x28
 8005170:	2278      	movs	r2, #120	; 0x78
 8005172:	213c      	movs	r1, #60	; 0x3c
 8005174:	2064      	movs	r0, #100	; 0x64
 8005176:	f7fc fba8 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 800517a:	491e      	ldr	r1, [pc, #120]	; (80051f4 <predefinedActivityKarmienie+0xb4>)
 800517c:	481e      	ldr	r0, [pc, #120]	; (80051f8 <predefinedActivityKarmienie+0xb8>)
 800517e:	f00d ffbf 	bl	8013100 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005182:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005186:	9301      	str	r3, [sp, #4]
 8005188:	2300      	movs	r3, #0
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	2300      	movs	r3, #0
 800518e:	223e      	movs	r2, #62	; 0x3e
 8005190:	2177      	movs	r1, #119	; 0x77
 8005192:	4819      	ldr	r0, [pc, #100]	; (80051f8 <predefinedActivityKarmienie+0xb8>)
 8005194:	f7fc fe04 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8005198:	4918      	ldr	r1, [pc, #96]	; (80051fc <predefinedActivityKarmienie+0xbc>)
 800519a:	4817      	ldr	r0, [pc, #92]	; (80051f8 <predefinedActivityKarmienie+0xb8>)
 800519c:	f00d ffb0 	bl	8013100 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	2300      	movs	r3, #0
 80051ac:	2250      	movs	r2, #80	; 0x50
 80051ae:	2193      	movs	r1, #147	; 0x93
 80051b0:	4811      	ldr	r0, [pc, #68]	; (80051f8 <predefinedActivityKarmienie+0xb8>)
 80051b2:	f7fc fdf5 	bl	8001da0 <EF_PutString>

		if(State == MENUTFT_LIGHTS)
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	2b05      	cmp	r3, #5
 80051ba:	d103      	bne.n	80051c4 <predefinedActivityKarmienie+0x84>
		{
			SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80051bc:	2016      	movs	r0, #22
 80051be:	f004 ffcf 	bl	800a160 <SendComand>
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
		ActivityButtonState[0] = 1;
	}

}
 80051c2:	e00f      	b.n	80051e4 <predefinedActivityKarmienie+0xa4>
		else if(State == MENUTFT_SWITCH)
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d10c      	bne.n	80051e4 <predefinedActivityKarmienie+0xa4>
			SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current lights state
 80051ca:	2015      	movs	r0, #21
 80051cc:	f004 ffc8 	bl	800a160 <SendComand>
}
 80051d0:	e008      	b.n	80051e4 <predefinedActivityKarmienie+0xa4>
		SendComand(UCMD_RELAY_ALL_OFF);
 80051d2:	2018      	movs	r0, #24
 80051d4:	f004 ffc4 	bl	800a160 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 80051d8:	4809      	ldr	r0, [pc, #36]	; (8005200 <predefinedActivityKarmienie+0xc0>)
 80051da:	f00b fb79 	bl	80108d0 <HAL_TIM_Base_Start_IT>
		ActivityButtonState[0] = 1;
 80051de:	4b03      	ldr	r3, [pc, #12]	; (80051ec <predefinedActivityKarmienie+0xac>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
}
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000250 	.word	0x20000250
 80051f0:	080289ec 	.word	0x080289ec
 80051f4:	0801702c 	.word	0x0801702c
 80051f8:	200002cc 	.word	0x200002cc
 80051fc:	0801703c 	.word	0x0801703c
 8005200:	2000099c 	.word	0x2000099c

08005204 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 800520a:	487d      	ldr	r0, [pc, #500]	; (8005400 <drawCurrentStateOfSwitches+0x1fc>)
 800520c:	f7fc fbae 	bl	800196c <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8005210:	4b7c      	ldr	r3, [pc, #496]	; (8005404 <drawCurrentStateOfSwitches+0x200>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01c      	beq.n	8005252 <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005218:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	2305      	movs	r3, #5
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	2315      	movs	r3, #21
 8005224:	2221      	movs	r2, #33	; 0x21
 8005226:	2141      	movs	r1, #65	; 0x41
 8005228:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800522c:	f7fc fb4d 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005230:	4975      	ldr	r1, [pc, #468]	; (8005408 <drawCurrentStateOfSwitches+0x204>)
 8005232:	4876      	ldr	r0, [pc, #472]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 8005234:	f00d ff64 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005238:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	2300      	movs	r3, #0
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	2300      	movs	r3, #0
 8005244:	2243      	movs	r2, #67	; 0x43
 8005246:	f240 1111 	movw	r1, #273	; 0x111
 800524a:	4870      	ldr	r0, [pc, #448]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 800524c:	f7fc fda8 	bl	8001da0 <EF_PutString>
 8005250:	e01b      	b.n	800528a <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005252:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	2305      	movs	r3, #5
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	2315      	movs	r3, #21
 800525e:	2221      	movs	r2, #33	; 0x21
 8005260:	2141      	movs	r1, #65	; 0x41
 8005262:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005266:	f7fc fb30 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800526a:	4969      	ldr	r1, [pc, #420]	; (8005410 <drawCurrentStateOfSwitches+0x20c>)
 800526c:	4867      	ldr	r0, [pc, #412]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 800526e:	f00d ff47 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005272:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	2300      	movs	r3, #0
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	2300      	movs	r3, #0
 800527e:	2243      	movs	r2, #67	; 0x43
 8005280:	f240 1111 	movw	r1, #273	; 0x111
 8005284:	4861      	ldr	r0, [pc, #388]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 8005286:	f7fc fd8b 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 800528a:	4b5e      	ldr	r3, [pc, #376]	; (8005404 <drawCurrentStateOfSwitches+0x200>)
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01c      	beq.n	80052cc <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005292:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	2305      	movs	r3, #5
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2315      	movs	r3, #21
 800529e:	2221      	movs	r2, #33	; 0x21
 80052a0:	215f      	movs	r1, #95	; 0x5f
 80052a2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80052a6:	f7fc fb10 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80052aa:	4957      	ldr	r1, [pc, #348]	; (8005408 <drawCurrentStateOfSwitches+0x204>)
 80052ac:	4857      	ldr	r0, [pc, #348]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80052ae:	f00d ff27 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80052b2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	2300      	movs	r3, #0
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	2300      	movs	r3, #0
 80052be:	2261      	movs	r2, #97	; 0x61
 80052c0:	f240 1111 	movw	r1, #273	; 0x111
 80052c4:	4851      	ldr	r0, [pc, #324]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80052c6:	f7fc fd6b 	bl	8001da0 <EF_PutString>
 80052ca:	e01b      	b.n	8005304 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80052cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	2305      	movs	r3, #5
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	2315      	movs	r3, #21
 80052d8:	2221      	movs	r2, #33	; 0x21
 80052da:	215f      	movs	r1, #95	; 0x5f
 80052dc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80052e0:	f7fc faf3 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80052e4:	494a      	ldr	r1, [pc, #296]	; (8005410 <drawCurrentStateOfSwitches+0x20c>)
 80052e6:	4849      	ldr	r0, [pc, #292]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80052e8:	f00d ff0a 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80052ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	2300      	movs	r3, #0
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	2261      	movs	r2, #97	; 0x61
 80052fa:	f240 1111 	movw	r1, #273	; 0x111
 80052fe:	4843      	ldr	r0, [pc, #268]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 8005300:	f7fc fd4e 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8005304:	4b3f      	ldr	r3, [pc, #252]	; (8005404 <drawCurrentStateOfSwitches+0x200>)
 8005306:	789b      	ldrb	r3, [r3, #2]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01c      	beq.n	8005346 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800530c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	2305      	movs	r3, #5
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	2315      	movs	r3, #21
 8005318:	2221      	movs	r2, #33	; 0x21
 800531a:	217d      	movs	r1, #125	; 0x7d
 800531c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005320:	f7fc fad3 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005324:	4938      	ldr	r1, [pc, #224]	; (8005408 <drawCurrentStateOfSwitches+0x204>)
 8005326:	4839      	ldr	r0, [pc, #228]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 8005328:	f00d feea 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800532c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	2300      	movs	r3, #0
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	2300      	movs	r3, #0
 8005338:	227f      	movs	r2, #127	; 0x7f
 800533a:	f240 1111 	movw	r1, #273	; 0x111
 800533e:	4833      	ldr	r0, [pc, #204]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 8005340:	f7fc fd2e 	bl	8001da0 <EF_PutString>
 8005344:	e01b      	b.n	800537e <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005346:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	2305      	movs	r3, #5
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	2315      	movs	r3, #21
 8005352:	2221      	movs	r2, #33	; 0x21
 8005354:	217d      	movs	r1, #125	; 0x7d
 8005356:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800535a:	f7fc fab6 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800535e:	492c      	ldr	r1, [pc, #176]	; (8005410 <drawCurrentStateOfSwitches+0x20c>)
 8005360:	482a      	ldr	r0, [pc, #168]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 8005362:	f00d fecd 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005366:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800536a:	9301      	str	r3, [sp, #4]
 800536c:	2300      	movs	r3, #0
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	2300      	movs	r3, #0
 8005372:	227f      	movs	r2, #127	; 0x7f
 8005374:	f240 1111 	movw	r1, #273	; 0x111
 8005378:	4824      	ldr	r0, [pc, #144]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 800537a:	f7fc fd11 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 800537e:	4b21      	ldr	r3, [pc, #132]	; (8005404 <drawCurrentStateOfSwitches+0x200>)
 8005380:	78db      	ldrb	r3, [r3, #3]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01c      	beq.n	80053c0 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005386:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	2305      	movs	r3, #5
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	2315      	movs	r3, #21
 8005392:	2221      	movs	r2, #33	; 0x21
 8005394:	219b      	movs	r1, #155	; 0x9b
 8005396:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800539a:	f7fc fa96 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800539e:	491a      	ldr	r1, [pc, #104]	; (8005408 <drawCurrentStateOfSwitches+0x204>)
 80053a0:	481a      	ldr	r0, [pc, #104]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80053a2:	f00d fead 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80053a6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80053aa:	9301      	str	r3, [sp, #4]
 80053ac:	2300      	movs	r3, #0
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	2300      	movs	r3, #0
 80053b2:	229d      	movs	r2, #157	; 0x9d
 80053b4:	f240 1111 	movw	r1, #273	; 0x111
 80053b8:	4814      	ldr	r0, [pc, #80]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80053ba:	f7fc fcf1 	bl	8001da0 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80053be:	e01b      	b.n	80053f8 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80053c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	2305      	movs	r3, #5
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	2315      	movs	r3, #21
 80053cc:	2221      	movs	r2, #33	; 0x21
 80053ce:	219b      	movs	r1, #155	; 0x9b
 80053d0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80053d4:	f7fc fa79 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80053d8:	490d      	ldr	r1, [pc, #52]	; (8005410 <drawCurrentStateOfSwitches+0x20c>)
 80053da:	480c      	ldr	r0, [pc, #48]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80053dc:	f00d fe90 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80053e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	2300      	movs	r3, #0
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	2300      	movs	r3, #0
 80053ec:	229d      	movs	r2, #157	; 0x9d
 80053ee:	f240 1111 	movw	r1, #273	; 0x111
 80053f2:	4806      	ldr	r0, [pc, #24]	; (800540c <drawCurrentStateOfSwitches+0x208>)
 80053f4:	f7fc fcd4 	bl	8001da0 <EF_PutString>
}
 80053f8:	bf00      	nop
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	080289ec 	.word	0x080289ec
 8005404:	200002b8 	.word	0x200002b8
 8005408:	08017038 	.word	0x08017038
 800540c:	200002cc 	.word	0x200002cc
 8005410:	0801703c 	.word	0x0801703c

08005414 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 800541a:	4875      	ldr	r0, [pc, #468]	; (80055f0 <drawCurrentStateOfLights+0x1dc>)
 800541c:	f7fc faa6 	bl	800196c <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8005420:	4b74      	ldr	r3, [pc, #464]	; (80055f4 <drawCurrentStateOfLights+0x1e0>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01a      	beq.n	800545e <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005428:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	2305      	movs	r3, #5
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	2315      	movs	r3, #21
 8005434:	2221      	movs	r2, #33	; 0x21
 8005436:	2141      	movs	r1, #65	; 0x41
 8005438:	20c8      	movs	r0, #200	; 0xc8
 800543a:	f7fc fa46 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800543e:	496e      	ldr	r1, [pc, #440]	; (80055f8 <drawCurrentStateOfLights+0x1e4>)
 8005440:	486e      	ldr	r0, [pc, #440]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005442:	f00d fe5d 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005446:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	2300      	movs	r3, #0
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	2300      	movs	r3, #0
 8005452:	2243      	movs	r2, #67	; 0x43
 8005454:	21cb      	movs	r1, #203	; 0xcb
 8005456:	4869      	ldr	r0, [pc, #420]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005458:	f7fc fca2 	bl	8001da0 <EF_PutString>
 800545c:	e019      	b.n	8005492 <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800545e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	2305      	movs	r3, #5
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	2315      	movs	r3, #21
 800546a:	2221      	movs	r2, #33	; 0x21
 800546c:	2141      	movs	r1, #65	; 0x41
 800546e:	20c8      	movs	r0, #200	; 0xc8
 8005470:	f7fc fa2b 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005474:	4962      	ldr	r1, [pc, #392]	; (8005600 <drawCurrentStateOfLights+0x1ec>)
 8005476:	4861      	ldr	r0, [pc, #388]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005478:	f00d fe42 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800547c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	2300      	movs	r3, #0
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2300      	movs	r3, #0
 8005488:	2243      	movs	r2, #67	; 0x43
 800548a:	21cb      	movs	r1, #203	; 0xcb
 800548c:	485b      	ldr	r0, [pc, #364]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 800548e:	f7fc fc87 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8005492:	4b58      	ldr	r3, [pc, #352]	; (80055f4 <drawCurrentStateOfLights+0x1e0>)
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01a      	beq.n	80054d0 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800549a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800549e:	9301      	str	r3, [sp, #4]
 80054a0:	2305      	movs	r3, #5
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	2315      	movs	r3, #21
 80054a6:	2221      	movs	r2, #33	; 0x21
 80054a8:	215f      	movs	r1, #95	; 0x5f
 80054aa:	20c8      	movs	r0, #200	; 0xc8
 80054ac:	f7fc fa0d 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80054b0:	4951      	ldr	r1, [pc, #324]	; (80055f8 <drawCurrentStateOfLights+0x1e4>)
 80054b2:	4852      	ldr	r0, [pc, #328]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 80054b4:	f00d fe24 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80054b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	2300      	movs	r3, #0
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	2300      	movs	r3, #0
 80054c4:	2261      	movs	r2, #97	; 0x61
 80054c6:	21cb      	movs	r1, #203	; 0xcb
 80054c8:	484c      	ldr	r0, [pc, #304]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 80054ca:	f7fc fc69 	bl	8001da0 <EF_PutString>
 80054ce:	e019      	b.n	8005504 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80054d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	2305      	movs	r3, #5
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	2315      	movs	r3, #21
 80054dc:	2221      	movs	r2, #33	; 0x21
 80054de:	215f      	movs	r1, #95	; 0x5f
 80054e0:	20c8      	movs	r0, #200	; 0xc8
 80054e2:	f7fc f9f2 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80054e6:	4946      	ldr	r1, [pc, #280]	; (8005600 <drawCurrentStateOfLights+0x1ec>)
 80054e8:	4844      	ldr	r0, [pc, #272]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 80054ea:	f00d fe09 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80054ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	2261      	movs	r2, #97	; 0x61
 80054fc:	21cb      	movs	r1, #203	; 0xcb
 80054fe:	483f      	ldr	r0, [pc, #252]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005500:	f7fc fc4e 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 8005504:	4b3b      	ldr	r3, [pc, #236]	; (80055f4 <drawCurrentStateOfLights+0x1e0>)
 8005506:	789b      	ldrb	r3, [r3, #2]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01a      	beq.n	8005542 <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800550c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	2305      	movs	r3, #5
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	2315      	movs	r3, #21
 8005518:	2221      	movs	r2, #33	; 0x21
 800551a:	217d      	movs	r1, #125	; 0x7d
 800551c:	20c8      	movs	r0, #200	; 0xc8
 800551e:	f7fc f9d4 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005522:	4935      	ldr	r1, [pc, #212]	; (80055f8 <drawCurrentStateOfLights+0x1e4>)
 8005524:	4835      	ldr	r0, [pc, #212]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005526:	f00d fdeb 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800552a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	2300      	movs	r3, #0
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	227f      	movs	r2, #127	; 0x7f
 8005538:	21cb      	movs	r1, #203	; 0xcb
 800553a:	4830      	ldr	r0, [pc, #192]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 800553c:	f7fc fc30 	bl	8001da0 <EF_PutString>
 8005540:	e019      	b.n	8005576 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005542:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	2305      	movs	r3, #5
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	2315      	movs	r3, #21
 800554e:	2221      	movs	r2, #33	; 0x21
 8005550:	217d      	movs	r1, #125	; 0x7d
 8005552:	20c8      	movs	r0, #200	; 0xc8
 8005554:	f7fc f9b9 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005558:	4929      	ldr	r1, [pc, #164]	; (8005600 <drawCurrentStateOfLights+0x1ec>)
 800555a:	4828      	ldr	r0, [pc, #160]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 800555c:	f00d fdd0 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005560:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	2300      	movs	r3, #0
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	2300      	movs	r3, #0
 800556c:	227f      	movs	r2, #127	; 0x7f
 800556e:	21cb      	movs	r1, #203	; 0xcb
 8005570:	4822      	ldr	r0, [pc, #136]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005572:	f7fc fc15 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8005576:	4b1f      	ldr	r3, [pc, #124]	; (80055f4 <drawCurrentStateOfLights+0x1e0>)
 8005578:	78db      	ldrb	r3, [r3, #3]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01a      	beq.n	80055b4 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800557e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	2305      	movs	r3, #5
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	2315      	movs	r3, #21
 800558a:	2221      	movs	r2, #33	; 0x21
 800558c:	219b      	movs	r1, #155	; 0x9b
 800558e:	20c8      	movs	r0, #200	; 0xc8
 8005590:	f7fc f99b 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005594:	4918      	ldr	r1, [pc, #96]	; (80055f8 <drawCurrentStateOfLights+0x1e4>)
 8005596:	4819      	ldr	r0, [pc, #100]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 8005598:	f00d fdb2 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800559c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	2300      	movs	r3, #0
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	2300      	movs	r3, #0
 80055a8:	229d      	movs	r2, #157	; 0x9d
 80055aa:	21cb      	movs	r1, #203	; 0xcb
 80055ac:	4813      	ldr	r0, [pc, #76]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 80055ae:	f7fc fbf7 	bl	8001da0 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80055b2:	e019      	b.n	80055e8 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80055b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	2305      	movs	r3, #5
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	2315      	movs	r3, #21
 80055c0:	2221      	movs	r2, #33	; 0x21
 80055c2:	219b      	movs	r1, #155	; 0x9b
 80055c4:	20c8      	movs	r0, #200	; 0xc8
 80055c6:	f7fc f980 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80055ca:	490d      	ldr	r1, [pc, #52]	; (8005600 <drawCurrentStateOfLights+0x1ec>)
 80055cc:	480b      	ldr	r0, [pc, #44]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 80055ce:	f00d fd97 	bl	8013100 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80055d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	2300      	movs	r3, #0
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	2300      	movs	r3, #0
 80055de:	229d      	movs	r2, #157	; 0x9d
 80055e0:	21cb      	movs	r1, #203	; 0xcb
 80055e2:	4806      	ldr	r0, [pc, #24]	; (80055fc <drawCurrentStateOfLights+0x1e8>)
 80055e4:	f7fc fbdc 	bl	8001da0 <EF_PutString>
}
 80055e8:	bf00      	nop
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	080289ec 	.word	0x080289ec
 80055f4:	200002bc 	.word	0x200002bc
 80055f8:	08017038 	.word	0x08017038
 80055fc:	200002cc 	.word	0x200002cc
 8005600:	0801703c 	.word	0x0801703c

08005604 <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	f107 030c 	add.w	r3, r7, #12
 8005616:	2100      	movs	r1, #0
 8005618:	460a      	mov	r2, r1
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	460a      	mov	r2, r1
 800561e:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 8005620:	f107 0208 	add.w	r2, r7, #8
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f7fd fc73 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 800562e:	7a3b      	ldrb	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <restoreTFTScheduleDayOfWeek+0x3a>
 8005634:	2101      	movs	r1, #1
 8005636:	2001      	movs	r0, #1
 8005638:	f001 fcee 	bl	8007018 <changeTFTScheduleDayOfWeek>
 800563c:	e003      	b.n	8005646 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 800563e:	2100      	movs	r1, #0
 8005640:	2001      	movs	r0, #1
 8005642:	f001 fce9 	bl	8007018 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 8005646:	7a7b      	ldrb	r3, [r7, #9]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d004      	beq.n	8005656 <restoreTFTScheduleDayOfWeek+0x52>
 800564c:	2101      	movs	r1, #1
 800564e:	2002      	movs	r0, #2
 8005650:	f001 fce2 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8005654:	e003      	b.n	800565e <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 8005656:	2100      	movs	r1, #0
 8005658:	2002      	movs	r0, #2
 800565a:	f001 fcdd 	bl	8007018 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 800565e:	7abb      	ldrb	r3, [r7, #10]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <restoreTFTScheduleDayOfWeek+0x6a>
 8005664:	2101      	movs	r1, #1
 8005666:	2003      	movs	r0, #3
 8005668:	f001 fcd6 	bl	8007018 <changeTFTScheduleDayOfWeek>
 800566c:	e003      	b.n	8005676 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 800566e:	2100      	movs	r1, #0
 8005670:	2003      	movs	r0, #3
 8005672:	f001 fcd1 	bl	8007018 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 8005676:	7afb      	ldrb	r3, [r7, #11]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d004      	beq.n	8005686 <restoreTFTScheduleDayOfWeek+0x82>
 800567c:	2101      	movs	r1, #1
 800567e:	2004      	movs	r0, #4
 8005680:	f001 fcca 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8005684:	e003      	b.n	800568e <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 8005686:	2100      	movs	r1, #0
 8005688:	2004      	movs	r0, #4
 800568a:	f001 fcc5 	bl	8007018 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 800568e:	7b3b      	ldrb	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <restoreTFTScheduleDayOfWeek+0x9a>
 8005694:	2101      	movs	r1, #1
 8005696:	2005      	movs	r0, #5
 8005698:	f001 fcbe 	bl	8007018 <changeTFTScheduleDayOfWeek>
 800569c:	e003      	b.n	80056a6 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 800569e:	2100      	movs	r1, #0
 80056a0:	2005      	movs	r0, #5
 80056a2:	f001 fcb9 	bl	8007018 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 80056a6:	7b7b      	ldrb	r3, [r7, #13]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <restoreTFTScheduleDayOfWeek+0xb2>
 80056ac:	2101      	movs	r1, #1
 80056ae:	2006      	movs	r0, #6
 80056b0:	f001 fcb2 	bl	8007018 <changeTFTScheduleDayOfWeek>
 80056b4:	e003      	b.n	80056be <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 80056b6:	2100      	movs	r1, #0
 80056b8:	2006      	movs	r0, #6
 80056ba:	f001 fcad 	bl	8007018 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 80056be:	7bbb      	ldrb	r3, [r7, #14]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <restoreTFTScheduleDayOfWeek+0xca>
 80056c4:	2101      	movs	r1, #1
 80056c6:	2007      	movs	r0, #7
 80056c8:	f001 fca6 	bl	8007018 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 80056cc:	e003      	b.n	80056d6 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 80056ce:	2100      	movs	r1, #0
 80056d0:	2007      	movs	r0, #7
 80056d2:	f001 fca1 	bl	8007018 <changeTFTScheduleDayOfWeek>
}
 80056d6:	bf00      	nop
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b086      	sub	sp, #24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	4603      	mov	r3, r0
 80056e6:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	f107 0310 	add.w	r3, r7, #16
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 80056f6:	f107 020c 	add.w	r2, r7, #12
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fc84 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 8005704:	7b3b      	ldrb	r3, [r7, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <restoreTFTScheduleRelayLights+0x36>
 800570a:	2101      	movs	r1, #1
 800570c:	2001      	movs	r0, #1
 800570e:	f001 fd60 	bl	80071d2 <changeTFTScheduleRelayLights>
 8005712:	e003      	b.n	800571c <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 8005714:	2100      	movs	r1, #0
 8005716:	2001      	movs	r0, #1
 8005718:	f001 fd5b 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 800571c:	7b7b      	ldrb	r3, [r7, #13]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <restoreTFTScheduleRelayLights+0x4e>
 8005722:	2101      	movs	r1, #1
 8005724:	2002      	movs	r0, #2
 8005726:	f001 fd54 	bl	80071d2 <changeTFTScheduleRelayLights>
 800572a:	e003      	b.n	8005734 <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 800572c:	2100      	movs	r1, #0
 800572e:	2002      	movs	r0, #2
 8005730:	f001 fd4f 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 8005734:	7bbb      	ldrb	r3, [r7, #14]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <restoreTFTScheduleRelayLights+0x66>
 800573a:	2101      	movs	r1, #1
 800573c:	2003      	movs	r0, #3
 800573e:	f001 fd48 	bl	80071d2 <changeTFTScheduleRelayLights>
 8005742:	e003      	b.n	800574c <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 8005744:	2100      	movs	r1, #0
 8005746:	2003      	movs	r0, #3
 8005748:	f001 fd43 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <restoreTFTScheduleRelayLights+0x7e>
 8005752:	2101      	movs	r1, #1
 8005754:	2004      	movs	r0, #4
 8005756:	f001 fd3c 	bl	80071d2 <changeTFTScheduleRelayLights>
 800575a:	e003      	b.n	8005764 <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 800575c:	2100      	movs	r1, #0
 800575e:	2004      	movs	r0, #4
 8005760:	f001 fd37 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 8005764:	7c3b      	ldrb	r3, [r7, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d004      	beq.n	8005774 <restoreTFTScheduleRelayLights+0x96>
 800576a:	2101      	movs	r1, #1
 800576c:	2005      	movs	r0, #5
 800576e:	f001 fd30 	bl	80071d2 <changeTFTScheduleRelayLights>
 8005772:	e003      	b.n	800577c <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 8005774:	2100      	movs	r1, #0
 8005776:	2005      	movs	r0, #5
 8005778:	f001 fd2b 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 800577c:	7c7b      	ldrb	r3, [r7, #17]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <restoreTFTScheduleRelayLights+0xae>
 8005782:	2101      	movs	r1, #1
 8005784:	2006      	movs	r0, #6
 8005786:	f001 fd24 	bl	80071d2 <changeTFTScheduleRelayLights>
 800578a:	e003      	b.n	8005794 <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 800578c:	2100      	movs	r1, #0
 800578e:	2006      	movs	r0, #6
 8005790:	f001 fd1f 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 8005794:	7cbb      	ldrb	r3, [r7, #18]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <restoreTFTScheduleRelayLights+0xc6>
 800579a:	2101      	movs	r1, #1
 800579c:	2007      	movs	r0, #7
 800579e:	f001 fd18 	bl	80071d2 <changeTFTScheduleRelayLights>
 80057a2:	e003      	b.n	80057ac <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 80057a4:	2100      	movs	r1, #0
 80057a6:	2007      	movs	r0, #7
 80057a8:	f001 fd13 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 80057ac:	7cfb      	ldrb	r3, [r7, #19]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d004      	beq.n	80057bc <restoreTFTScheduleRelayLights+0xde>
 80057b2:	2101      	movs	r1, #1
 80057b4:	2008      	movs	r0, #8
 80057b6:	f001 fd0c 	bl	80071d2 <changeTFTScheduleRelayLights>
 80057ba:	e003      	b.n	80057c4 <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 80057bc:	2100      	movs	r1, #0
 80057be:	2008      	movs	r0, #8
 80057c0:	f001 fd07 	bl	80071d2 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 80057c4:	7d3b      	ldrb	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d004      	beq.n	80057d4 <restoreTFTScheduleRelayLights+0xf6>
 80057ca:	2101      	movs	r1, #1
 80057cc:	2009      	movs	r0, #9
 80057ce:	f001 fd00 	bl	80071d2 <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 80057d2:	e003      	b.n	80057dc <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 80057d4:	2100      	movs	r1, #0
 80057d6:	2009      	movs	r0, #9
 80057d8:	f001 fcfb 	bl	80071d2 <changeTFTScheduleRelayLights>
}
 80057dc:	bf00      	nop
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <makeScheduleActivity>:


void makeScheduleActivity(uint8_t CurrentHour, uint8_t CurrentMinute, uint8_t CurrentDayOfWeek)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	71fb      	strb	r3, [r7, #7]
 80057ee:	460b      	mov	r3, r1
 80057f0:	71bb      	strb	r3, [r7, #6]
 80057f2:	4613      	mov	r3, r2
 80057f4:	717b      	strb	r3, [r7, #5]

	for(uint8_t i = 1 ; i <= NumberOfSchedules ; i++ ) // 'i' is a number of checking schedule
 80057f6:	2301      	movs	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]
 80057fa:	e056      	b.n	80058aa <makeScheduleActivity+0xc6>
	{
		uint8_t ScheduleDayOfWeekTab[7]= {0}; // Tab to handle information about day of the week to which the schedule applies
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	f107 0314 	add.w	r3, r7, #20
 8005804:	2100      	movs	r1, #0
 8005806:	460a      	mov	r2, r1
 8005808:	801a      	strh	r2, [r3, #0]
 800580a:	460a      	mov	r2, r1
 800580c:	709a      	strb	r2, [r3, #2]
		EEPROM_ScheduleDayInWeekRead(i, ScheduleDayOfWeekTab); // Get day of week from 'i' Schedule
 800580e:	f107 0210 	add.w	r2, r7, #16
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	4611      	mov	r1, r2
 8005816:	4618      	mov	r0, r3
 8005818:	f7fd fb7c 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>

		if(1 == ScheduleDayOfWeekTab[CurrentDayOfWeek]) // If the current day of week the schedule 'i' applies
 800581c:	797b      	ldrb	r3, [r7, #5]
 800581e:	f107 0218 	add.w	r2, r7, #24
 8005822:	4413      	add	r3, r2
 8005824:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d13b      	bne.n	80058a4 <makeScheduleActivity+0xc0>
		{
			// Check if some relays should be turn on
			uint8_t MinuteOnFromEEPROM = 67;
 800582c:	2343      	movs	r3, #67	; 0x43
 800582e:	73fb      	strb	r3, [r7, #15]
			EEPROM_ScheduleMinuteOnRead(i, &MinuteOnFromEEPROM); // Get set Minute ON from EEPROM
 8005830:	f107 020f 	add.w	r2, r7, #15
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f7fd fce0 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
			if(CurrentMinute == MinuteOnFromEEPROM) // If Hour, Minute and Day of Week is set in this schedule
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	79ba      	ldrb	r2, [r7, #6]
 8005842:	429a      	cmp	r2, r3
 8005844:	d110      	bne.n	8005868 <makeScheduleActivity+0x84>
			{
				uint8_t HourOnFromEEPROM = 27;
 8005846:	231b      	movs	r3, #27
 8005848:	737b      	strb	r3, [r7, #13]
				EEPROM_ScheduleHourOnRead(i, &HourOnFromEEPROM); // Get set Hour ON from EEPROM
 800584a:	f107 020d 	add.w	r2, r7, #13
 800584e:	7dfb      	ldrb	r3, [r7, #23]
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd fcaf 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
				if(CurrentHour == HourOnFromEEPROM)
 8005858:	7b7b      	ldrb	r3, [r7, #13]
 800585a:	79fa      	ldrb	r2, [r7, #7]
 800585c:	429a      	cmp	r2, r3
 800585e:	d103      	bne.n	8005868 <makeScheduleActivity+0x84>
				{
					makeRelayOn2(i);
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 f82e 	bl	80058c4 <makeRelayOn2>
				}
			}

			// Check if some relays should be turn off
			uint8_t MinuteOffFromEEPROM = 67;
 8005868:	2343      	movs	r3, #67	; 0x43
 800586a:	73bb      	strb	r3, [r7, #14]
			EEPROM_ScheduleMinuteOffRead(i, &MinuteOffFromEEPROM);
 800586c:	f107 020e 	add.w	r2, r7, #14
 8005870:	7dfb      	ldrb	r3, [r7, #23]
 8005872:	4611      	mov	r1, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f7fd fd0a 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
			if(CurrentMinute == MinuteOffFromEEPROM) // If Hour, Minute and Day of Week is set in this schedule
 800587a:	7bbb      	ldrb	r3, [r7, #14]
 800587c:	79ba      	ldrb	r2, [r7, #6]
 800587e:	429a      	cmp	r2, r3
 8005880:	d110      	bne.n	80058a4 <makeScheduleActivity+0xc0>
			{
				uint8_t HourOfFromEEPROM = 27;
 8005882:	231b      	movs	r3, #27
 8005884:	733b      	strb	r3, [r7, #12]
				EEPROM_ScheduleHourOffRead(i, &HourOfFromEEPROM);
 8005886:	f107 020c 	add.w	r2, r7, #12
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	4611      	mov	r1, r2
 800588e:	4618      	mov	r0, r3
 8005890:	f7fd fcd9 	bl	8003246 <EEPROM_ScheduleHourOffRead>
				if(CurrentHour == HourOfFromEEPROM)
 8005894:	7b3b      	ldrb	r3, [r7, #12]
 8005896:	79fa      	ldrb	r2, [r7, #7]
 8005898:	429a      	cmp	r2, r3
 800589a:	d103      	bne.n	80058a4 <makeScheduleActivity+0xc0>
				{
					makeRelayOff2(i);
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 f8a6 	bl	80059f0 <makeRelayOff2>
	for(uint8_t i = 1 ; i <= NumberOfSchedules ; i++ ) // 'i' is a number of checking schedule
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	3301      	adds	r3, #1
 80058a8:	75fb      	strb	r3, [r7, #23]
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <makeScheduleActivity+0xdc>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	7dfa      	ldrb	r2, [r7, #23]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d9a3      	bls.n	80057fc <makeScheduleActivity+0x18>
				}
			}
		}
	}
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000030 	.word	0x20000030

080058c4 <makeRelayOn2>:

void makeRelayOn2(uint8_t NumberOfShedule)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	71fb      	strb	r3, [r7, #7]
		uint8_t ScheduleRelayAppliesTab[9] = {0};  // { R1, R2, R3, R4, WS, L1, L2, L3, L4}
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	f107 0310 	add.w	r3, r7, #16
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	711a      	strb	r2, [r3, #4]
		EEPROM_ScheduleRelayAndSwitchTabRead(NumberOfShedule, ScheduleRelayAppliesTab);
 80058dc:	f107 020c 	add.w	r2, r7, #12
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	4611      	mov	r1, r2
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fd fb91 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
		if(ScheduleRelayAppliesTab[0] == 1)
 80058ea:	7b3b      	ldrb	r3, [r7, #12]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d109      	bne.n	8005904 <makeRelayOn2+0x40>
		{
			SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 80058f0:	2005      	movs	r0, #5
 80058f2:	f004 fc35 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 80058f6:	4933      	ldr	r1, [pc, #204]	; (80059c4 <makeRelayOn2+0x100>)
 80058f8:	4833      	ldr	r0, [pc, #204]	; (80059c8 <makeRelayOn2+0x104>)
 80058fa:	f005 fb59 	bl	800afb0 <UARTDMA_Print>
			SwitchesButtonState[0] = 1;
 80058fe:	4b33      	ldr	r3, [pc, #204]	; (80059cc <makeRelayOn2+0x108>)
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
			//EEPROM_RelayStateUpdate(1, 1);
		}

		if(ScheduleRelayAppliesTab[1] == 1)
 8005904:	7b7b      	ldrb	r3, [r7, #13]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d109      	bne.n	800591e <makeRelayOn2+0x5a>
		{
			SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 800590a:	2007      	movs	r0, #7
 800590c:	f004 fc28 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 8005910:	492f      	ldr	r1, [pc, #188]	; (80059d0 <makeRelayOn2+0x10c>)
 8005912:	482d      	ldr	r0, [pc, #180]	; (80059c8 <makeRelayOn2+0x104>)
 8005914:	f005 fb4c 	bl	800afb0 <UARTDMA_Print>
			SwitchesButtonState[1] = 1;
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <makeRelayOn2+0x108>)
 800591a:	2201      	movs	r2, #1
 800591c:	705a      	strb	r2, [r3, #1]
			//EEPROM_RelayStateUpdate(2, 1);
		}

		if(ScheduleRelayAppliesTab[2] == 1)
 800591e:	7bbb      	ldrb	r3, [r7, #14]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d109      	bne.n	8005938 <makeRelayOn2+0x74>
		{
			SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8005924:	2009      	movs	r0, #9
 8005926:	f004 fc1b 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 800592a:	492a      	ldr	r1, [pc, #168]	; (80059d4 <makeRelayOn2+0x110>)
 800592c:	4826      	ldr	r0, [pc, #152]	; (80059c8 <makeRelayOn2+0x104>)
 800592e:	f005 fb3f 	bl	800afb0 <UARTDMA_Print>
			SwitchesButtonState[2] = 1;
 8005932:	4b26      	ldr	r3, [pc, #152]	; (80059cc <makeRelayOn2+0x108>)
 8005934:	2201      	movs	r2, #1
 8005936:	709a      	strb	r2, [r3, #2]
			//EEPROM_RelayStateUpdate(3, 1);
		}

		if(ScheduleRelayAppliesTab[3] == 1)
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d109      	bne.n	8005952 <makeRelayOn2+0x8e>
		{
			SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 800593e:	200b      	movs	r0, #11
 8005940:	f004 fc0e 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 8005944:	4924      	ldr	r1, [pc, #144]	; (80059d8 <makeRelayOn2+0x114>)
 8005946:	4820      	ldr	r0, [pc, #128]	; (80059c8 <makeRelayOn2+0x104>)
 8005948:	f005 fb32 	bl	800afb0 <UARTDMA_Print>
			SwitchesButtonState[3] = 1;
 800594c:	4b1f      	ldr	r3, [pc, #124]	; (80059cc <makeRelayOn2+0x108>)
 800594e:	2201      	movs	r2, #1
 8005950:	70da      	strb	r2, [r3, #3]
		if(ScheduleRelayAppliesTab[4] == 1)
		{
			//TODO! WS ON
		}

		if(ScheduleRelayAppliesTab[5] == 1)
 8005952:	7c7b      	ldrb	r3, [r7, #17]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d109      	bne.n	800596c <makeRelayOn2+0xa8>
		{
			SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8005958:	200d      	movs	r0, #13
 800595a:	f004 fc01 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 800595e:	491f      	ldr	r1, [pc, #124]	; (80059dc <makeRelayOn2+0x118>)
 8005960:	4819      	ldr	r0, [pc, #100]	; (80059c8 <makeRelayOn2+0x104>)
 8005962:	f005 fb25 	bl	800afb0 <UARTDMA_Print>
			LightsButtonState[0] = 1;
 8005966:	4b1e      	ldr	r3, [pc, #120]	; (80059e0 <makeRelayOn2+0x11c>)
 8005968:	2201      	movs	r2, #1
 800596a:	701a      	strb	r2, [r3, #0]
			//EEPROM_LightStateUpdate(1, 1);
		}

		if(ScheduleRelayAppliesTab[6] == 1)
 800596c:	7cbb      	ldrb	r3, [r7, #18]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d109      	bne.n	8005986 <makeRelayOn2+0xc2>
		{
			SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8005972:	200f      	movs	r0, #15
 8005974:	f004 fbf4 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 8005978:	491a      	ldr	r1, [pc, #104]	; (80059e4 <makeRelayOn2+0x120>)
 800597a:	4813      	ldr	r0, [pc, #76]	; (80059c8 <makeRelayOn2+0x104>)
 800597c:	f005 fb18 	bl	800afb0 <UARTDMA_Print>
			LightsButtonState[1] = 1;
 8005980:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <makeRelayOn2+0x11c>)
 8005982:	2201      	movs	r2, #1
 8005984:	705a      	strb	r2, [r3, #1]
			//EEPROM_LightStateUpdate(2, 1);
		}

		if(ScheduleRelayAppliesTab[7] == 1)
 8005986:	7cfb      	ldrb	r3, [r7, #19]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d109      	bne.n	80059a0 <makeRelayOn2+0xdc>
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 800598c:	2011      	movs	r0, #17
 800598e:	f004 fbe7 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 8005992:	4915      	ldr	r1, [pc, #84]	; (80059e8 <makeRelayOn2+0x124>)
 8005994:	480c      	ldr	r0, [pc, #48]	; (80059c8 <makeRelayOn2+0x104>)
 8005996:	f005 fb0b 	bl	800afb0 <UARTDMA_Print>
			LightsButtonState[2] = 1;
 800599a:	4b11      	ldr	r3, [pc, #68]	; (80059e0 <makeRelayOn2+0x11c>)
 800599c:	2201      	movs	r2, #1
 800599e:	709a      	strb	r2, [r3, #2]
			//EEPROM_LightStateUpdate(3, 1);
		}

		if(ScheduleRelayAppliesTab[8] == 1)
 80059a0:	7d3b      	ldrb	r3, [r7, #20]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d109      	bne.n	80059ba <makeRelayOn2+0xf6>
		{
			SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 80059a6:	2013      	movs	r0, #19
 80059a8:	f004 fbda 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 80059ac:	490f      	ldr	r1, [pc, #60]	; (80059ec <makeRelayOn2+0x128>)
 80059ae:	4806      	ldr	r0, [pc, #24]	; (80059c8 <makeRelayOn2+0x104>)
 80059b0:	f005 fafe 	bl	800afb0 <UARTDMA_Print>
			LightsButtonState[3] = 1;
 80059b4:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <makeRelayOn2+0x11c>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	70da      	strb	r2, [r3, #3]
			//EEPROM_LightStateUpdate(4, 1);
		}

}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	08017268 	.word	0x08017268
 80059c8:	200006c8 	.word	0x200006c8
 80059cc:	200002b8 	.word	0x200002b8
 80059d0:	08017274 	.word	0x08017274
 80059d4:	08017280 	.word	0x08017280
 80059d8:	0801728c 	.word	0x0801728c
 80059dc:	08017298 	.word	0x08017298
 80059e0:	200002bc 	.word	0x200002bc
 80059e4:	080172a4 	.word	0x080172a4
 80059e8:	080172b0 	.word	0x080172b0
 80059ec:	080172bc 	.word	0x080172bc

080059f0 <makeRelayOff2>:
void makeRelayOff2(uint8_t NumberOfShedule)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	71fb      	strb	r3, [r7, #7]
		uint8_t ScheduleRelayAppliesTab[9] = {0};  // { R1, R2, R3, R4, WS, L1, L2, L3, L4}
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	f107 0310 	add.w	r3, r7, #16
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	711a      	strb	r2, [r3, #4]
		EEPROM_ScheduleRelayAndSwitchTabRead(NumberOfShedule, ScheduleRelayAppliesTab);
 8005a08:	f107 020c 	add.w	r2, r7, #12
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fd fafb 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
		if(ScheduleRelayAppliesTab[0] == 1)
 8005a16:	7b3b      	ldrb	r3, [r7, #12]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d109      	bne.n	8005a30 <makeRelayOff2+0x40>
		{
			SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8005a1c:	2006      	movs	r0, #6
 8005a1e:	f004 fb9f 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 8005a22:	4933      	ldr	r1, [pc, #204]	; (8005af0 <makeRelayOff2+0x100>)
 8005a24:	4833      	ldr	r0, [pc, #204]	; (8005af4 <makeRelayOff2+0x104>)
 8005a26:	f005 fac3 	bl	800afb0 <UARTDMA_Print>
			SwitchesButtonState[0] = 0;
 8005a2a:	4b33      	ldr	r3, [pc, #204]	; (8005af8 <makeRelayOff2+0x108>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
			//EEPROM_RelayStateUpdate(1, 0);
		}

		if(ScheduleRelayAppliesTab[1] == 1)
 8005a30:	7b7b      	ldrb	r3, [r7, #13]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d109      	bne.n	8005a4a <makeRelayOff2+0x5a>
		{
			SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8005a36:	2008      	movs	r0, #8
 8005a38:	f004 fb92 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 8005a3c:	492f      	ldr	r1, [pc, #188]	; (8005afc <makeRelayOff2+0x10c>)
 8005a3e:	482d      	ldr	r0, [pc, #180]	; (8005af4 <makeRelayOff2+0x104>)
 8005a40:	f005 fab6 	bl	800afb0 <UARTDMA_Print>
			SwitchesButtonState[1] = 0;
 8005a44:	4b2c      	ldr	r3, [pc, #176]	; (8005af8 <makeRelayOff2+0x108>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	705a      	strb	r2, [r3, #1]
			//EEPROM_RelayStateUpdate(2, 0);
		}

		if(ScheduleRelayAppliesTab[2] == 1)
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d109      	bne.n	8005a64 <makeRelayOff2+0x74>
		{
			SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8005a50:	200a      	movs	r0, #10
 8005a52:	f004 fb85 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 8005a56:	492a      	ldr	r1, [pc, #168]	; (8005b00 <makeRelayOff2+0x110>)
 8005a58:	4826      	ldr	r0, [pc, #152]	; (8005af4 <makeRelayOff2+0x104>)
 8005a5a:	f005 faa9 	bl	800afb0 <UARTDMA_Print>
			SwitchesButtonState[2] = 0;
 8005a5e:	4b26      	ldr	r3, [pc, #152]	; (8005af8 <makeRelayOff2+0x108>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	709a      	strb	r2, [r3, #2]
			//EEPROM_RelayStateUpdate(3, 0);
		}

		if(ScheduleRelayAppliesTab[3] == 1)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d109      	bne.n	8005a7e <makeRelayOff2+0x8e>
		{
			SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8005a6a:	200c      	movs	r0, #12
 8005a6c:	f004 fb78 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 8005a70:	4924      	ldr	r1, [pc, #144]	; (8005b04 <makeRelayOff2+0x114>)
 8005a72:	4820      	ldr	r0, [pc, #128]	; (8005af4 <makeRelayOff2+0x104>)
 8005a74:	f005 fa9c 	bl	800afb0 <UARTDMA_Print>
			SwitchesButtonState[3] = 0;
 8005a78:	4b1f      	ldr	r3, [pc, #124]	; (8005af8 <makeRelayOff2+0x108>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	70da      	strb	r2, [r3, #3]
		if(ScheduleRelayAppliesTab[4] == 1)
		{
			//TODO! WS OFF
		}

		if(ScheduleRelayAppliesTab[5] == 1)
 8005a7e:	7c7b      	ldrb	r3, [r7, #17]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d109      	bne.n	8005a98 <makeRelayOff2+0xa8>
		{
			SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8005a84:	200e      	movs	r0, #14
 8005a86:	f004 fb6b 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 8005a8a:	491f      	ldr	r1, [pc, #124]	; (8005b08 <makeRelayOff2+0x118>)
 8005a8c:	4819      	ldr	r0, [pc, #100]	; (8005af4 <makeRelayOff2+0x104>)
 8005a8e:	f005 fa8f 	bl	800afb0 <UARTDMA_Print>
			LightsButtonState[0] = 0;
 8005a92:	4b1e      	ldr	r3, [pc, #120]	; (8005b0c <makeRelayOff2+0x11c>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
			//EEPROM_LightStateUpdate(1, 0);
		}

		if(ScheduleRelayAppliesTab[6] == 1)
 8005a98:	7cbb      	ldrb	r3, [r7, #18]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d109      	bne.n	8005ab2 <makeRelayOff2+0xc2>
		{
			SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f004 fb5e 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 8005aa4:	491a      	ldr	r1, [pc, #104]	; (8005b10 <makeRelayOff2+0x120>)
 8005aa6:	4813      	ldr	r0, [pc, #76]	; (8005af4 <makeRelayOff2+0x104>)
 8005aa8:	f005 fa82 	bl	800afb0 <UARTDMA_Print>
			LightsButtonState[1] = 0;
 8005aac:	4b17      	ldr	r3, [pc, #92]	; (8005b0c <makeRelayOff2+0x11c>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	705a      	strb	r2, [r3, #1]
			//EEPROM_LightStateUpdate(2, 0);
		}

		if(ScheduleRelayAppliesTab[7] == 1)
 8005ab2:	7cfb      	ldrb	r3, [r7, #19]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d109      	bne.n	8005acc <makeRelayOff2+0xdc>
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to OFF
 8005ab8:	2011      	movs	r0, #17
 8005aba:	f004 fb51 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 8005abe:	4915      	ldr	r1, [pc, #84]	; (8005b14 <makeRelayOff2+0x124>)
 8005ac0:	480c      	ldr	r0, [pc, #48]	; (8005af4 <makeRelayOff2+0x104>)
 8005ac2:	f005 fa75 	bl	800afb0 <UARTDMA_Print>
			LightsButtonState[2] = 0;
 8005ac6:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <makeRelayOff2+0x11c>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	709a      	strb	r2, [r3, #2]
			//EEPROM_LightStateUpdate(3, 0);
		}

		if(ScheduleRelayAppliesTab[8] == 1)
 8005acc:	7d3b      	ldrb	r3, [r7, #20]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d109      	bne.n	8005ae6 <makeRelayOff2+0xf6>
		{
			SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8005ad2:	2014      	movs	r0, #20
 8005ad4:	f004 fb44 	bl	800a160 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 8005ad8:	490f      	ldr	r1, [pc, #60]	; (8005b18 <makeRelayOff2+0x128>)
 8005ada:	4806      	ldr	r0, [pc, #24]	; (8005af4 <makeRelayOff2+0x104>)
 8005adc:	f005 fa68 	bl	800afb0 <UARTDMA_Print>
			LightsButtonState[3] = 0;
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <makeRelayOff2+0x11c>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	70da      	strb	r2, [r3, #3]
			//EEPROM_LightStateUpdate(4, 0);
		}
}
 8005ae6:	bf00      	nop
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	080172c8 	.word	0x080172c8
 8005af4:	200006c8 	.word	0x200006c8
 8005af8:	200002b8 	.word	0x200002b8
 8005afc:	080172d4 	.word	0x080172d4
 8005b00:	080172e0 	.word	0x080172e0
 8005b04:	080172ec 	.word	0x080172ec
 8005b08:	080172f8 	.word	0x080172f8
 8005b0c:	200002bc 	.word	0x200002bc
 8005b10:	08017304 	.word	0x08017304
 8005b14:	08017310 	.word	0x08017310
 8005b18:	0801731c 	.word	0x0801731c

08005b1c <initWait>:


//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 8005b24:	bf00      	nop
 8005b26:	f005 fd5b 	bl	800b5e0 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <initWait+0x28>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d2f6      	bcs.n	8005b26 <initWait+0xa>
    {

    }
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000254 	.word	0x20000254

08005b48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	; 0x28
 8005b4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b4e:	f107 0314 	add.w	r3, r7, #20
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	605a      	str	r2, [r3, #4]
 8005b58:	609a      	str	r2, [r3, #8]
 8005b5a:	60da      	str	r2, [r3, #12]
 8005b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b5e:	2300      	movs	r3, #0
 8005b60:	613b      	str	r3, [r7, #16]
 8005b62:	4b5f      	ldr	r3, [pc, #380]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	4a5e      	ldr	r2, [pc, #376]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b68:	f043 0304 	orr.w	r3, r3, #4
 8005b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b6e:	4b5c      	ldr	r3, [pc, #368]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	613b      	str	r3, [r7, #16]
 8005b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	4b58      	ldr	r3, [pc, #352]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	4a57      	ldr	r2, [pc, #348]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b88:	6313      	str	r3, [r2, #48]	; 0x30
 8005b8a:	4b55      	ldr	r3, [pc, #340]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b96:	2300      	movs	r3, #0
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	4b51      	ldr	r3, [pc, #324]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	4a50      	ldr	r2, [pc, #320]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ba6:	4b4e      	ldr	r3, [pc, #312]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	607b      	str	r3, [r7, #4]
 8005bb6:	4b4a      	ldr	r3, [pc, #296]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	4a49      	ldr	r2, [pc, #292]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005bbc:	f043 0302 	orr.w	r3, r3, #2
 8005bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <MX_GPIO_Init+0x198>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bd4:	4843      	ldr	r0, [pc, #268]	; (8005ce4 <MX_GPIO_Init+0x19c>)
 8005bd6:	f006 fc7f 	bl	800c4d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f247 4102 	movw	r1, #29698	; 0x7402
 8005be0:	4841      	ldr	r0, [pc, #260]	; (8005ce8 <MX_GPIO_Init+0x1a0>)
 8005be2:	f006 fc79 	bl	800c4d8 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 8005be6:	2200      	movs	r2, #0
 8005be8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bec:	483f      	ldr	r0, [pc, #252]	; (8005cec <MX_GPIO_Init+0x1a4>)
 8005bee:	f006 fc73 	bl	800c4d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c00:	2300      	movs	r3, #0
 8005c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005c04:	f107 0314 	add.w	r3, r7, #20
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4836      	ldr	r0, [pc, #216]	; (8005ce4 <MX_GPIO_Init+0x19c>)
 8005c0c:	f006 fac8 	bl	800c1a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 8005c10:	2310      	movs	r3, #16
 8005c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005c1e:	f107 0314 	add.w	r3, r7, #20
 8005c22:	4619      	mov	r1, r3
 8005c24:	4831      	ldr	r0, [pc, #196]	; (8005cec <MX_GPIO_Init+0x1a4>)
 8005c26:	f006 fabb 	bl	800c1a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005c2a:	f247 4302 	movw	r3, #29698	; 0x7402
 8005c2e:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c30:	2301      	movs	r3, #1
 8005c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c3c:	f107 0314 	add.w	r3, r7, #20
 8005c40:	4619      	mov	r1, r3
 8005c42:	4829      	ldr	r0, [pc, #164]	; (8005ce8 <MX_GPIO_Init+0x1a0>)
 8005c44:	f006 faac 	bl	800c1a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 8005c48:	2304      	movs	r3, #4
 8005c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005c4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005c56:	f107 0314 	add.w	r3, r7, #20
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4822      	ldr	r0, [pc, #136]	; (8005ce8 <MX_GPIO_Init+0x1a0>)
 8005c5e:	f006 fa9f 	bl	800c1a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 8005c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005c70:	f107 0314 	add.w	r3, r7, #20
 8005c74:	4619      	mov	r1, r3
 8005c76:	481c      	ldr	r0, [pc, #112]	; (8005ce8 <MX_GPIO_Init+0x1a0>)
 8005c78:	f006 fa92 	bl	800c1a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005c8c:	f107 0314 	add.w	r3, r7, #20
 8005c90:	4619      	mov	r1, r3
 8005c92:	4816      	ldr	r0, [pc, #88]	; (8005cec <MX_GPIO_Init+0x1a4>)
 8005c94:	f006 fa84 	bl	800c1a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 8005c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 8005caa:	f107 0314 	add.w	r3, r7, #20
 8005cae:	4619      	mov	r1, r3
 8005cb0:	480e      	ldr	r0, [pc, #56]	; (8005cec <MX_GPIO_Init+0x1a4>)
 8005cb2:	f006 fa75 	bl	800c1a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2100      	movs	r1, #0
 8005cba:	2008      	movs	r0, #8
 8005cbc:	f005 fdff 	bl	800b8be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005cc0:	2008      	movs	r0, #8
 8005cc2:	f005 fe18 	bl	800b8f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2100      	movs	r1, #0
 8005cca:	2017      	movs	r0, #23
 8005ccc:	f005 fdf7 	bl	800b8be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005cd0:	2017      	movs	r0, #23
 8005cd2:	f005 fe10 	bl	800b8f6 <HAL_NVIC_EnableIRQ>

}
 8005cd6:	bf00      	nop
 8005cd8:	3728      	adds	r7, #40	; 0x28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	40020800 	.word	0x40020800
 8005ce8:	40020400 	.word	0x40020400
 8005cec:	40020000 	.word	0x40020000

08005cf0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005cf6:	4a13      	ldr	r2, [pc, #76]	; (8005d44 <MX_I2C1_Init+0x54>)
 8005cf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005cfc:	4a12      	ldr	r2, [pc, #72]	; (8005d48 <MX_I2C1_Init+0x58>)
 8005cfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d00:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005d06:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d14:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d1a:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d20:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d26:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d2c:	4804      	ldr	r0, [pc, #16]	; (8005d40 <MX_I2C1_Init+0x50>)
 8005d2e:	f006 fc1f 	bl	800c570 <HAL_I2C_Init>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005d38:	f000 faa2 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d3c:	bf00      	nop
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20000448 	.word	0x20000448
 8005d44:	40005400 	.word	0x40005400
 8005d48:	00061a80 	.word	0x00061a80

08005d4c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005d50:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d52:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <MX_I2C3_Init+0x54>)
 8005d54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005d56:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d58:	4a12      	ldr	r2, [pc, #72]	; (8005da4 <MX_I2C3_Init+0x58>)
 8005d5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005d62:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d6e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005d76:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d7c:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d82:	4b06      	ldr	r3, [pc, #24]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005d88:	4804      	ldr	r0, [pc, #16]	; (8005d9c <MX_I2C3_Init+0x50>)
 8005d8a:	f006 fbf1 	bl	800c570 <HAL_I2C_Init>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005d94:	f000 fa74 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005d98:	bf00      	nop
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000394 	.word	0x20000394
 8005da0:	40005c00 	.word	0x40005c00
 8005da4:	000186a0 	.word	0x000186a0

08005da8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08c      	sub	sp, #48	; 0x30
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005db0:	f107 031c 	add.w	r3, r7, #28
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a74      	ldr	r2, [pc, #464]	; (8005f98 <HAL_I2C_MspInit+0x1f0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	f040 8091 	bne.w	8005eee <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	4b72      	ldr	r3, [pc, #456]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	4a71      	ldr	r2, [pc, #452]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005dd6:	f043 0302 	orr.w	r3, r3, #2
 8005dda:	6313      	str	r3, [r2, #48]	; 0x30
 8005ddc:	4b6f      	ldr	r3, [pc, #444]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 8005de8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dee:	2312      	movs	r3, #18
 8005df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005df6:	2303      	movs	r3, #3
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005dfa:	2304      	movs	r3, #4
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dfe:	f107 031c 	add.w	r3, r7, #28
 8005e02:	4619      	mov	r1, r3
 8005e04:	4866      	ldr	r0, [pc, #408]	; (8005fa0 <HAL_I2C_MspInit+0x1f8>)
 8005e06:	f006 f9cb 	bl	800c1a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	4b63      	ldr	r3, [pc, #396]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	4a62      	ldr	r2, [pc, #392]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e18:	6413      	str	r3, [r2, #64]	; 0x40
 8005e1a:	4b60      	ldr	r3, [pc, #384]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005e26:	4b5f      	ldr	r3, [pc, #380]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e28:	4a5f      	ldr	r2, [pc, #380]	; (8005fa8 <HAL_I2C_MspInit+0x200>)
 8005e2a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005e2c:	4b5d      	ldr	r3, [pc, #372]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e34:	4b5b      	ldr	r3, [pc, #364]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e3a:	4b5a      	ldr	r3, [pc, #360]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e40:	4b58      	ldr	r3, [pc, #352]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e46:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e48:	4b56      	ldr	r3, [pc, #344]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e4e:	4b55      	ldr	r3, [pc, #340]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005e54:	4b53      	ldr	r3, [pc, #332]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e5a:	4b52      	ldr	r3, [pc, #328]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e60:	4b50      	ldr	r3, [pc, #320]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005e66:	484f      	ldr	r0, [pc, #316]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e68:	f005 fd8a 	bl	800b980 <HAL_DMA_Init>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8005e72:	f000 fa05 	bl	8006280 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a4a      	ldr	r2, [pc, #296]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e7a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e7c:	4a49      	ldr	r2, [pc, #292]	; (8005fa4 <HAL_I2C_MspInit+0x1fc>)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8005e82:	4b4a      	ldr	r3, [pc, #296]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005e84:	4a4a      	ldr	r2, [pc, #296]	; (8005fb0 <HAL_I2C_MspInit+0x208>)
 8005e86:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8005e88:	4b48      	ldr	r3, [pc, #288]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e8e:	4b47      	ldr	r3, [pc, #284]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005e90:	2240      	movs	r2, #64	; 0x40
 8005e92:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e94:	4b45      	ldr	r3, [pc, #276]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e9a:	4b44      	ldr	r3, [pc, #272]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ea0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ea2:	4b42      	ldr	r3, [pc, #264]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ea8:	4b40      	ldr	r3, [pc, #256]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005eae:	4b3f      	ldr	r3, [pc, #252]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005eb4:	4b3d      	ldr	r3, [pc, #244]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005eba:	4b3c      	ldr	r3, [pc, #240]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005ec0:	483a      	ldr	r0, [pc, #232]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005ec2:	f005 fd5d 	bl	800b980 <HAL_DMA_Init>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005ecc:	f000 f9d8 	bl	8006280 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a36      	ldr	r2, [pc, #216]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8005ed6:	4a35      	ldr	r2, [pc, #212]	; (8005fac <HAL_I2C_MspInit+0x204>)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005edc:	2200      	movs	r2, #0
 8005ede:	2100      	movs	r1, #0
 8005ee0:	2020      	movs	r0, #32
 8005ee2:	f005 fcec 	bl	800b8be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005ee6:	2020      	movs	r0, #32
 8005ee8:	f005 fd05 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005eec:	e050      	b.n	8005f90 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a30      	ldr	r2, [pc, #192]	; (8005fb4 <HAL_I2C_MspInit+0x20c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d14b      	bne.n	8005f90 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ef8:	2300      	movs	r3, #0
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	4b27      	ldr	r3, [pc, #156]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	4a26      	ldr	r2, [pc, #152]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	6313      	str	r3, [r2, #48]	; 0x30
 8005f08:	4b24      	ldr	r3, [pc, #144]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	4b20      	ldr	r3, [pc, #128]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	4a1f      	ldr	r2, [pc, #124]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f1e:	f043 0302 	orr.w	r3, r3, #2
 8005f22:	6313      	str	r3, [r2, #48]	; 0x30
 8005f24:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 8005f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f36:	2312      	movs	r3, #18
 8005f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005f42:	2304      	movs	r3, #4
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005f46:	f107 031c 	add.w	r3, r7, #28
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	481a      	ldr	r0, [pc, #104]	; (8005fb8 <HAL_I2C_MspInit+0x210>)
 8005f4e:	f006 f927 	bl	800c1a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 8005f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f58:	2312      	movs	r3, #18
 8005f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f60:	2303      	movs	r3, #3
 8005f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005f64:	2309      	movs	r3, #9
 8005f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005f68:	f107 031c 	add.w	r3, r7, #28
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	480c      	ldr	r0, [pc, #48]	; (8005fa0 <HAL_I2C_MspInit+0x1f8>)
 8005f70:	f006 f916 	bl	800c1a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005f74:	2300      	movs	r3, #0
 8005f76:	60bb      	str	r3, [r7, #8]
 8005f78:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	4a07      	ldr	r2, [pc, #28]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f82:	6413      	str	r3, [r2, #64]	; 0x40
 8005f84:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <HAL_I2C_MspInit+0x1f4>)
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
}
 8005f90:	bf00      	nop
 8005f92:	3730      	adds	r7, #48	; 0x30
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40005400 	.word	0x40005400
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	40020400 	.word	0x40020400
 8005fa4:	2000049c 	.word	0x2000049c
 8005fa8:	40026010 	.word	0x40026010
 8005fac:	200003e8 	.word	0x200003e8
 8005fb0:	40026028 	.word	0x40026028
 8005fb4:	40005c00 	.word	0x40005c00
 8005fb8:	40020000 	.word	0x40020000

08005fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005fc2:	f005 faa7 	bl	800b514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005fc6:	f000 f87f 	bl	80060c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005fca:	f7ff fdbd 	bl	8005b48 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005fce:	f004 faa9 	bl	800a524 <MX_SPI1_Init>
  MX_DMA_Init();
 8005fd2:	f7fc fbcd 	bl	8002770 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005fd6:	f005 f8d7 	bl	800b188 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8005fda:	f004 fad9 	bl	800a590 <MX_SPI3_Init>
  MX_I2C1_Init();
 8005fde:	f7ff fe87 	bl	8005cf0 <MX_I2C1_Init>
  MX_TIM11_Init();
 8005fe2:	f004 fe53 	bl	800ac8c <MX_TIM11_Init>
  MX_TIM10_Init();
 8005fe6:	f004 fe2d 	bl	800ac44 <MX_TIM10_Init>
  MX_I2C3_Init();
 8005fea:	f7ff feaf 	bl	8005d4c <MX_I2C3_Init>
  MX_SPI5_Init();
 8005fee:	f004 fb05 	bl	800a5fc <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8005ff2:	f005 f89f 	bl	800b134 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8005ff6:	f004 fdd1 	bl	800ab9c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005ffa:	f000 f8cd 	bl	8006198 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8005ffe:	4829      	ldr	r0, [pc, #164]	; (80060a4 <main+0xe8>)
 8006000:	f7fc f916 	bl	8002230 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8006004:	4928      	ldr	r1, [pc, #160]	; (80060a8 <main+0xec>)
 8006006:	4829      	ldr	r0, [pc, #164]	; (80060ac <main+0xf0>)
 8006008:	f005 f845 	bl	800b096 <UARTDMA_Init>
  UARTDMA_Init(&huartdma1, &huart1);
 800600c:	4928      	ldr	r1, [pc, #160]	; (80060b0 <main+0xf4>)
 800600e:	4829      	ldr	r0, [pc, #164]	; (80060b4 <main+0xf8>)
 8006010:	f005 f841 	bl	800b096 <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 8006014:	2117      	movs	r1, #23
 8006016:	4828      	ldr	r0, [pc, #160]	; (80060b8 <main+0xfc>)
 8006018:	f7fc fb5a 	bl	80026d0 <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 800601c:	4827      	ldr	r0, [pc, #156]	; (80060bc <main+0x100>)
 800601e:	f7fc fbfd 	bl	800281c <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8006022:	2001      	movs	r0, #1
 8006024:	f7fc fc54 	bl	80028d0 <DS3231_SetInterruptMode>
  DS3231_SetRateSelect(DS3231_1HZ);
 8006028:	2000      	movs	r0, #0
 800602a:	f7fc fc71 	bl	8002910 <DS3231_SetRateSelect>
  DS3231_EnableOscillator(DS3231_ENABLED);
 800602e:	2001      	movs	r0, #1
 8006030:	f7fc fc8e 	bl	8002950 <DS3231_EnableOscillator>
  // EEPROM CHECK TODO! Add check of eeprom and informing on screen about results
  uint8_t result = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	71fb      	strb	r3, [r7, #7]
  eeprom_read(0x01, &result, sizeof(result));
 8006038:	1dfb      	adds	r3, r7, #7
 800603a:	2201      	movs	r2, #1
 800603c:	4619      	mov	r1, r3
 800603e:	2001      	movs	r0, #1
 8006040:	f7fc fdd2 	bl	8002be8 <eeprom_read>

  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8006044:	481e      	ldr	r0, [pc, #120]	; (80060c0 <main+0x104>)
 8006046:	f00a fc43 	bl	80108d0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800604a:	213c      	movs	r1, #60	; 0x3c
 800604c:	481d      	ldr	r0, [pc, #116]	; (80060c4 <main+0x108>)
 800604e:	f00a fd76 	bl	8010b3e <HAL_TIM_Encoder_Start>

  int16_t EncoderValue = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	80bb      	strh	r3, [r7, #4]
  {

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8006056:	4815      	ldr	r0, [pc, #84]	; (80060ac <main+0xf0>)
 8006058:	f004 ffd0 	bl	800affc <UARTDMA_IsDataReceivedReady>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <main+0xac>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8006062:	4812      	ldr	r0, [pc, #72]	; (80060ac <main+0xf0>)
 8006064:	f003 fd86 	bl	8009b74 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8006068:	4810      	ldr	r0, [pc, #64]	; (80060ac <main+0xf0>)
 800606a:	f004 ffd9 	bl	800b020 <UARTDMA_TransmitEvent>

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM ESP
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma1))
 800606e:	4811      	ldr	r0, [pc, #68]	; (80060b4 <main+0xf8>)
 8006070:	f004 ffc4 	bl	800affc <UARTDMA_IsDataReceivedReady>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <main+0xc4>
	  {
		  UART_ESP_ParseLine(&huartdma1); // Parsing function
 800607a:	480e      	ldr	r0, [pc, #56]	; (80060b4 <main+0xf8>)
 800607c:	f7fa ffce 	bl	800101c <UART_ESP_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO ESP
	  //
	  UARTDMA_TransmitEvent(&huartdma1);
 8006080:	480c      	ldr	r0, [pc, #48]	; (80060b4 <main+0xf8>)
 8006082:	f004 ffcd 	bl	800b020 <UARTDMA_TransmitEvent>

	  ////////////////////////////////////////////////////////
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 8006086:	f7fc fa51 	bl	800252c <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 800608a:	f000 f935 	bl	80062f8 <MenuTFT>
	  ////////////////////////////////////////////////////////

	  EncoderValue = __HAL_TIM_GET_COUNTER(&htim2);
 800608e:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <main+0x108>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	b21b      	sxth	r3, r3
 8006096:	80bb      	strh	r3, [r7, #4]
	  encoderUpgrade(&EncoderValue);
 8006098:	1d3b      	adds	r3, r7, #4
 800609a:	4618      	mov	r0, r3
 800609c:	f003 fbde 	bl	800985c <encoderUpgrade>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80060a0:	e7d9      	b.n	8006056 <main+0x9a>
 80060a2:	bf00      	nop
 80060a4:	20000944 	.word	0x20000944
 80060a8:	20000c38 	.word	0x20000c38
 80060ac:	200004fc 	.word	0x200004fc
 80060b0:	20000bf4 	.word	0x20000bf4
 80060b4:	200006c8 	.word	0x200006c8
 80060b8:	200008ec 	.word	0x200008ec
 80060bc:	20000448 	.word	0x20000448
 80060c0:	200009e4 	.word	0x200009e4
 80060c4:	20000a2c 	.word	0x20000a2c

080060c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b094      	sub	sp, #80	; 0x50
 80060cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060ce:	f107 0320 	add.w	r3, r7, #32
 80060d2:	2230      	movs	r2, #48	; 0x30
 80060d4:	2100      	movs	r1, #0
 80060d6:	4618      	mov	r0, r3
 80060d8:	f00c f98a 	bl	80123f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060dc:	f107 030c 	add.w	r3, r7, #12
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80060ec:	2300      	movs	r3, #0
 80060ee:	60bb      	str	r3, [r7, #8]
 80060f0:	4b27      	ldr	r3, [pc, #156]	; (8006190 <SystemClock_Config+0xc8>)
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	4a26      	ldr	r2, [pc, #152]	; (8006190 <SystemClock_Config+0xc8>)
 80060f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fa:	6413      	str	r3, [r2, #64]	; 0x40
 80060fc:	4b24      	ldr	r3, [pc, #144]	; (8006190 <SystemClock_Config+0xc8>)
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006108:	2300      	movs	r3, #0
 800610a:	607b      	str	r3, [r7, #4]
 800610c:	4b21      	ldr	r3, [pc, #132]	; (8006194 <SystemClock_Config+0xcc>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a20      	ldr	r2, [pc, #128]	; (8006194 <SystemClock_Config+0xcc>)
 8006112:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <SystemClock_Config+0xcc>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006124:	2301      	movs	r3, #1
 8006126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800612e:	2302      	movs	r3, #2
 8006130:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006132:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8006138:	230c      	movs	r3, #12
 800613a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800613c:	2360      	movs	r3, #96	; 0x60
 800613e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006140:	2302      	movs	r3, #2
 8006142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006144:	2304      	movs	r3, #4
 8006146:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006148:	f107 0320 	add.w	r3, r7, #32
 800614c:	4618      	mov	r0, r3
 800614e:	f009 fb13 	bl	800f778 <HAL_RCC_OscConfig>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006158:	f000 f892 	bl	8006280 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800615c:	230f      	movs	r3, #15
 800615e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006160:	2302      	movs	r3, #2
 8006162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800616c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006172:	f107 030c 	add.w	r3, r7, #12
 8006176:	2103      	movs	r1, #3
 8006178:	4618      	mov	r0, r3
 800617a:	f009 fd75 	bl	800fc68 <HAL_RCC_ClockConfig>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006184:	f000 f87c 	bl	8006280 <Error_Handler>
  }
}
 8006188:	bf00      	nop
 800618a:	3750      	adds	r7, #80	; 0x50
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40023800 	.word	0x40023800
 8006194:	40007000 	.word	0x40007000

08006198 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800619c:	2200      	movs	r2, #0
 800619e:	2100      	movs	r1, #0
 80061a0:	200a      	movs	r0, #10
 80061a2:	f005 fb8c 	bl	800b8be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80061a6:	200a      	movs	r0, #10
 80061a8:	f005 fba5 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80061ac:	2200      	movs	r2, #0
 80061ae:	2100      	movs	r1, #0
 80061b0:	201f      	movs	r0, #31
 80061b2:	f005 fb84 	bl	800b8be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80061b6:	201f      	movs	r0, #31
 80061b8:	f005 fb9d 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061bc:	2200      	movs	r2, #0
 80061be:	2100      	movs	r1, #0
 80061c0:	2026      	movs	r0, #38	; 0x26
 80061c2:	f005 fb7c 	bl	800b8be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061c6:	2026      	movs	r0, #38	; 0x26
 80061c8:	f005 fb95 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80061cc:	2200      	movs	r2, #0
 80061ce:	2100      	movs	r1, #0
 80061d0:	2033      	movs	r0, #51	; 0x33
 80061d2:	f005 fb74 	bl	800b8be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80061d6:	2033      	movs	r0, #51	; 0x33
 80061d8:	f005 fb8d 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
}
 80061dc:	bf00      	nop
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a14      	ldr	r2, [pc, #80]	; (8006240 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d101      	bne.n	80061f6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 80061f2:	f7fe ff0f 	bl	8005014 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a12      	ldr	r2, [pc, #72]	; (8006244 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d11a      	bne.n	8006236 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		//TODO! Make possibility to change FEEDING_TIME_IN_S
		if(FeedingCounter >= activitiesDurationTimeInSeconds) // timer to count seconds from start feeding to turn off this activity
 8006200:	4b11      	ldr	r3, [pc, #68]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	4b11      	ldr	r3, [pc, #68]	; (800624c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d30d      	bcc.n	800622a <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800620e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006212:	480f      	ldr	r0, [pc, #60]	; (8006250 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8006214:	f006 f979 	bl	800c50a <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8006218:	2000      	movs	r0, #0
 800621a:	f7fe ff91 	bl	8005140 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 800621e:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8006224:	480b      	ldr	r0, [pc, #44]	; (8006254 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8006226:	f00a fbb5 	bl	8010994 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 800622a:	4b07      	ldr	r3, [pc, #28]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	3301      	adds	r3, #1
 8006230:	b2da      	uxtb	r2, r3
 8006232:	4b05      	ldr	r3, [pc, #20]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006234:	701a      	strb	r2, [r3, #0]
	}
}
 8006236:	bf00      	nop
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40014800 	.word	0x40014800
 8006244:	40014400 	.word	0x40014400
 8006248:	20000258 	.word	0x20000258
 800624c:	20000290 	.word	0x20000290
 8006250:	40020800 	.word	0x40020800
 8006254:	2000099c 	.word	0x2000099c

08006258 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006268:	d101      	bne.n	800626e <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 800626a:	f7fc fa25 	bl	80026b8 <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	2b10      	cmp	r3, #16
 8006272:	d101      	bne.n	8006278 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8006274:	f7fc fbb0 	bl	80029d8 <DS3231_ClearAlarm2Flag>
	}
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8006286:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800628a:	f7fb ff73 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 800628e:	4814      	ldr	r0, [pc, #80]	; (80062e0 <Error_Handler+0x60>)
 8006290:	f7fb fb6c 	bl	800196c <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8006294:	4a13      	ldr	r2, [pc, #76]	; (80062e4 <Error_Handler+0x64>)
 8006296:	4914      	ldr	r1, [pc, #80]	; (80062e8 <Error_Handler+0x68>)
 8006298:	4814      	ldr	r0, [pc, #80]	; (80062ec <Error_Handler+0x6c>)
 800629a:	f00c ff31 	bl	8013100 <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 800629e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	2301      	movs	r3, #1
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	2300      	movs	r3, #0
 80062aa:	2214      	movs	r2, #20
 80062ac:	210a      	movs	r1, #10
 80062ae:	480f      	ldr	r0, [pc, #60]	; (80062ec <Error_Handler+0x6c>)
 80062b0:	f7fb fd76 	bl	8001da0 <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 80062b4:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 80062b8:	4a0d      	ldr	r2, [pc, #52]	; (80062f0 <Error_Handler+0x70>)
 80062ba:	490e      	ldr	r1, [pc, #56]	; (80062f4 <Error_Handler+0x74>)
 80062bc:	480b      	ldr	r0, [pc, #44]	; (80062ec <Error_Handler+0x6c>)
 80062be:	f00c ff1f 	bl	8013100 <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 80062c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	2301      	movs	r3, #1
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	2300      	movs	r3, #0
 80062ce:	2232      	movs	r2, #50	; 0x32
 80062d0:	210a      	movs	r1, #10
 80062d2:	4806      	ldr	r0, [pc, #24]	; (80062ec <Error_Handler+0x6c>)
 80062d4:	f7fb fd64 	bl	8001da0 <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062d8:	b672      	cpsid	i
}
 80062da:	bf00      	nop

  __disable_irq();

  while (1)
 80062dc:	e7fe      	b.n	80062dc <Error_Handler+0x5c>
 80062de:	bf00      	nop
 80062e0:	080289ec 	.word	0x080289ec
 80062e4:	08017328 	.word	0x08017328
 80062e8:	0801733c 	.word	0x0801733c
 80062ec:	200002cc 	.word	0x200002cc
 80062f0:	08027f1c 	.word	0x08027f1c
 80062f4:	08017354 	.word	0x08017354

080062f8 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
	switch(State)
 80062fc:	4b5b      	ldr	r3, [pc, #364]	; (800646c <MenuTFT+0x174>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b08      	cmp	r3, #8
 8006302:	f200 80b0 	bhi.w	8006466 <MenuTFT+0x16e>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <MenuTFT+0x14>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	08006331 	.word	0x08006331
 8006310:	08006343 	.word	0x08006343
 8006314:	0800637d 	.word	0x0800637d
 8006318:	080063b9 	.word	0x080063b9
 800631c:	080063dd 	.word	0x080063dd
 8006320:	0800639b 	.word	0x0800639b
 8006324:	080063fb 	.word	0x080063fb
 8006328:	0800641f 	.word	0x0800641f
 800632c:	08006443 	.word	0x08006443
	{
	case MENUTFT_INIT:
		system_init();
 8006330:	f7fd f898 	bl	8003464 <system_init>
		State = MENUTFT_PARAMETERS;
 8006334:	4b4d      	ldr	r3, [pc, #308]	; (800646c <MenuTFT+0x174>)
 8006336:	2201      	movs	r2, #1
 8006338:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 800633a:	4b4d      	ldr	r3, [pc, #308]	; (8006470 <MenuTFT+0x178>)
 800633c:	2201      	movs	r2, #1
 800633e:	701a      	strb	r2, [r3, #0]
		break;
 8006340:	e091      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8006342:	4b4b      	ldr	r3, [pc, #300]	; (8006470 <MenuTFT+0x178>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d115      	bne.n	8006376 <MenuTFT+0x7e>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 800634a:	4b4a      	ldr	r3, [pc, #296]	; (8006474 <MenuTFT+0x17c>)
 800634c:	edd3 7a00 	vldr	s15, [r3]
 8006350:	4b49      	ldr	r3, [pc, #292]	; (8006478 <MenuTFT+0x180>)
 8006352:	ed93 7a00 	vldr	s14, [r3]
 8006356:	eeb0 1a47 	vmov.f32	s2, s14
 800635a:	2100      	movs	r1, #0
 800635c:	2000      	movs	r0, #0
 800635e:	eddf 0a47 	vldr	s1, [pc, #284]	; 800647c <MenuTFT+0x184>
 8006362:	eeb0 0a67 	vmov.f32	s0, s15
 8006366:	f7fd f9fb 	bl	8003760 <showCurrentParameters>
			EncoderState = ENCODER_IDLE;
 800636a:	4b45      	ldr	r3, [pc, #276]	; (8006480 <MenuTFT+0x188>)
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006370:	4b3f      	ldr	r3, [pc, #252]	; (8006470 <MenuTFT+0x178>)
 8006372:	2200      	movs	r2, #0
 8006374:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8006376:	f000 f88b 	bl	8006490 <TouchParametersActivity>
		break;
 800637a:	e074      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 800637c:	4b3c      	ldr	r3, [pc, #240]	; (8006470 <MenuTFT+0x178>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d107      	bne.n	8006394 <MenuTFT+0x9c>
		{
			showControlPanel();
 8006384:	f7fd fb36 	bl	80039f4 <showControlPanel>
			EncoderState = ENCODER_IDLE;
 8006388:	4b3d      	ldr	r3, [pc, #244]	; (8006480 <MenuTFT+0x188>)
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 800638e:	4b38      	ldr	r3, [pc, #224]	; (8006470 <MenuTFT+0x178>)
 8006390:	2200      	movs	r2, #0
 8006392:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8006394:	f000 f8dc 	bl	8006550 <TouchSwitchActivity>
		break;
 8006398:	e065      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 800639a:	4b35      	ldr	r3, [pc, #212]	; (8006470 <MenuTFT+0x178>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d107      	bne.n	80063b2 <MenuTFT+0xba>
		{
			showLightsControlPanel();
 80063a2:	f7fd fc01 	bl	8003ba8 <showLightsControlPanel>
			EncoderState = ENCODER_IDLE;
 80063a6:	4b36      	ldr	r3, [pc, #216]	; (8006480 <MenuTFT+0x188>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80063ac:	4b30      	ldr	r3, [pc, #192]	; (8006470 <MenuTFT+0x178>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 80063b2:	f000 f93f 	bl	8006634 <TouchLightsActivity>
		break;
 80063b6:	e056      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 80063b8:	4b2d      	ldr	r3, [pc, #180]	; (8006470 <MenuTFT+0x178>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d10a      	bne.n	80063d6 <MenuTFT+0xde>
		{
			showClockSetPanel();
 80063c0:	f7fd fcca 	bl	8003d58 <showClockSetPanel>
			EncoderState = ENCODER_IDLE;
 80063c4:	4b2e      	ldr	r3, [pc, #184]	; (8006480 <MenuTFT+0x188>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
			ClockChangeFlag = 1;
 80063ca:	4b2e      	ldr	r3, [pc, #184]	; (8006484 <MenuTFT+0x18c>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80063d0:	4b27      	ldr	r3, [pc, #156]	; (8006470 <MenuTFT+0x178>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 80063d6:	f000 f99d 	bl	8006714 <TouchClockActivity>
		break;
 80063da:	e044      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 80063dc:	4b24      	ldr	r3, [pc, #144]	; (8006470 <MenuTFT+0x178>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d107      	bne.n	80063f4 <MenuTFT+0xfc>
		{
			showPreparedActivitiesPanel();
 80063e4:	f7fd fe20 	bl	8004028 <showPreparedActivitiesPanel>
			EncoderState = ENCODER_ACTIVITIES;
 80063e8:	4b25      	ldr	r3, [pc, #148]	; (8006480 <MenuTFT+0x188>)
 80063ea:	2205      	movs	r2, #5
 80063ec:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80063ee:	4b20      	ldr	r3, [pc, #128]	; (8006470 <MenuTFT+0x178>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 80063f4:	f000 fa5a 	bl	80068ac <TouchPredefinedActivityActivity>
		break;
 80063f8:	e035      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 80063fa:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <MenuTFT+0x178>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d10a      	bne.n	8006418 <MenuTFT+0x120>
		{
			showWSLedPanel();
 8006402:	f7fd ff5f 	bl	80042c4 <showWSLedPanel>
			EncoderState = ENCODER_WS_LED;
 8006406:	4b1e      	ldr	r3, [pc, #120]	; (8006480 <MenuTFT+0x188>)
 8006408:	2204      	movs	r2, #4
 800640a:	701a      	strb	r2, [r3, #0]
			WSLedChangeFlag = 1;
 800640c:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <MenuTFT+0x190>)
 800640e:	2201      	movs	r2, #1
 8006410:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006412:	4b17      	ldr	r3, [pc, #92]	; (8006470 <MenuTFT+0x178>)
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8006418:	f000 fac0 	bl	800699c <TouchWSLedActivity>
		break;
 800641c:	e023      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 800641e:	4b14      	ldr	r3, [pc, #80]	; (8006470 <MenuTFT+0x178>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d10a      	bne.n	800643c <MenuTFT+0x144>
		{
			showSchedule1Panel();
 8006426:	f7fe fce9 	bl	8004dfc <showSchedule1Panel>
			EncoderState = ENCODER_IDLE;
 800642a:	4b15      	ldr	r3, [pc, #84]	; (8006480 <MenuTFT+0x188>)
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]
			ScheduleChangeFlag = 1;
 8006430:	4b16      	ldr	r3, [pc, #88]	; (800648c <MenuTFT+0x194>)
 8006432:	2201      	movs	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006436:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <MenuTFT+0x178>)
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 800643c:	f000 fb1a 	bl	8006a74 <Schedule1Activity>
		break;
 8006440:	e011      	b.n	8006466 <MenuTFT+0x16e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 8006442:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <MenuTFT+0x178>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d10a      	bne.n	8006460 <MenuTFT+0x168>
		{
			showSchedule2Panel();
 800644a:	f7fe fd6b 	bl	8004f24 <showSchedule2Panel>
			EncoderState = ENCODER_IDLE;
 800644e:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <MenuTFT+0x188>)
 8006450:	2200      	movs	r2, #0
 8006452:	701a      	strb	r2, [r3, #0]
			ScheduleChangeFlag = 1;
 8006454:	4b0d      	ldr	r3, [pc, #52]	; (800648c <MenuTFT+0x194>)
 8006456:	2201      	movs	r2, #1
 8006458:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <MenuTFT+0x178>)
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8006460:	f000 fc0a 	bl	8006c78 <Schedule2Activity>
		break;
 8006464:	bf00      	nop
	}
}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	200002a0 	.word	0x200002a0
 8006470:	20000259 	.word	0x20000259
 8006474:	200002a4 	.word	0x200002a4
 8006478:	200002ac 	.word	0x200002ac
 800647c:	00000000 	.word	0x00000000
 8006480:	200002a1 	.word	0x200002a1
 8006484:	2000025a 	.word	0x2000025a
 8006488:	2000025b 	.word	0x2000025b
 800648c:	2000025c 	.word	0x2000025c

08006490 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006496:	f7fc f837 	bl	8002508 <XPT2046_IsTouched>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d04c      	beq.n	800653a <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80064a0:	f005 f89e 	bl	800b5e0 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	4b27      	ldr	r3, [pc, #156]	; (8006544 <TouchParametersActivity+0xb4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b0:	d343      	bcc.n	800653a <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80064b2:	1d3a      	adds	r2, r7, #4
 80064b4:	1dbb      	adds	r3, r7, #6
 80064b6:	4611      	mov	r1, r2
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fb ffe7 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	2b09      	cmp	r3, #9
 80064c2:	d90f      	bls.n	80064e4 <TouchParametersActivity+0x54>
 80064c4:	88fb      	ldrh	r3, [r7, #6]
 80064c6:	2b6e      	cmp	r3, #110	; 0x6e
 80064c8:	d80c      	bhi.n	80064e4 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80064ca:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80064cc:	2bd7      	cmp	r3, #215	; 0xd7
 80064ce:	d909      	bls.n	80064e4 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80064d0:	88bb      	ldrh	r3, [r7, #4]
 80064d2:	2bec      	cmp	r3, #236	; 0xec
 80064d4:	d806      	bhi.n	80064e4 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 80064d6:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <TouchParametersActivity+0xb8>)
 80064d8:	2205      	movs	r2, #5
 80064da:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80064dc:	4b1b      	ldr	r3, [pc, #108]	; (800654c <TouchParametersActivity+0xbc>)
 80064de:	2201      	movs	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	e025      	b.n	8006530 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	2bdb      	cmp	r3, #219	; 0xdb
 80064e8:	d910      	bls.n	800650c <TouchParametersActivity+0x7c>
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80064f0:	d20c      	bcs.n	800650c <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80064f2:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80064f4:	2bd7      	cmp	r3, #215	; 0xd7
 80064f6:	d909      	bls.n	800650c <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80064f8:	88bb      	ldrh	r3, [r7, #4]
 80064fa:	2bec      	cmp	r3, #236	; 0xec
 80064fc:	d806      	bhi.n	800650c <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 80064fe:	4b12      	ldr	r3, [pc, #72]	; (8006548 <TouchParametersActivity+0xb8>)
 8006500:	2202      	movs	r2, #2
 8006502:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006504:	4b11      	ldr	r3, [pc, #68]	; (800654c <TouchParametersActivity+0xbc>)
 8006506:	2201      	movs	r2, #1
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	e011      	b.n	8006530 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800650c:	88fb      	ldrh	r3, [r7, #6]
 800650e:	2b77      	cmp	r3, #119	; 0x77
 8006510:	d90e      	bls.n	8006530 <TouchParametersActivity+0xa0>
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	2bd2      	cmp	r3, #210	; 0xd2
 8006516:	d80b      	bhi.n	8006530 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006518:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800651a:	2bd7      	cmp	r3, #215	; 0xd7
 800651c:	d908      	bls.n	8006530 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800651e:	88bb      	ldrh	r3, [r7, #4]
 8006520:	2bec      	cmp	r3, #236	; 0xec
 8006522:	d805      	bhi.n	8006530 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8006524:	4b08      	ldr	r3, [pc, #32]	; (8006548 <TouchParametersActivity+0xb8>)
 8006526:	2203      	movs	r2, #3
 8006528:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800652a:	4b08      	ldr	r3, [pc, #32]	; (800654c <TouchParametersActivity+0xbc>)
 800652c:	2201      	movs	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8006530:	f005 f856 	bl	800b5e0 <HAL_GetTick>
 8006534:	4603      	mov	r3, r0
 8006536:	4a03      	ldr	r2, [pc, #12]	; (8006544 <TouchParametersActivity+0xb4>)
 8006538:	6013      	str	r3, [r2, #0]
		}
	}
}
 800653a:	bf00      	nop
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	2000029c 	.word	0x2000029c
 8006548:	200002a0 	.word	0x200002a0
 800654c:	20000259 	.word	0x20000259

08006550 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006556:	f7fb ffd7 	bl	8002508 <XPT2046_IsTouched>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d05d      	beq.n	800661c <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006560:	f005 f83e 	bl	800b5e0 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	4b2f      	ldr	r3, [pc, #188]	; (8006624 <TouchSwitchActivity+0xd4>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006570:	d354      	bcc.n	800661c <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006572:	1d3a      	adds	r2, r7, #4
 8006574:	1dbb      	adds	r3, r7, #6
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f7fb ff87 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800657e:	88fb      	ldrh	r3, [r7, #6]
 8006580:	2b09      	cmp	r3, #9
 8006582:	d90f      	bls.n	80065a4 <TouchSwitchActivity+0x54>
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	2b6e      	cmp	r3, #110	; 0x6e
 8006588:	d80c      	bhi.n	80065a4 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800658a:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800658c:	2bd7      	cmp	r3, #215	; 0xd7
 800658e:	d909      	bls.n	80065a4 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006590:	88bb      	ldrh	r3, [r7, #4]
 8006592:	2bec      	cmp	r3, #236	; 0xec
 8006594:	d806      	bhi.n	80065a4 <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 8006596:	4b24      	ldr	r3, [pc, #144]	; (8006628 <TouchSwitchActivity+0xd8>)
 8006598:	2201      	movs	r2, #1
 800659a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800659c:	4b23      	ldr	r3, [pc, #140]	; (800662c <TouchSwitchActivity+0xdc>)
 800659e:	2201      	movs	r2, #1
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	e036      	b.n	8006612 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80065a4:	88fb      	ldrh	r3, [r7, #6]
 80065a6:	2bdb      	cmp	r3, #219	; 0xdb
 80065a8:	d910      	bls.n	80065cc <TouchSwitchActivity+0x7c>
 80065aa:	88fb      	ldrh	r3, [r7, #6]
 80065ac:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80065b0:	d20c      	bcs.n	80065cc <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80065b2:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80065b4:	2bd7      	cmp	r3, #215	; 0xd7
 80065b6:	d909      	bls.n	80065cc <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80065b8:	88bb      	ldrh	r3, [r7, #4]
 80065ba:	2bec      	cmp	r3, #236	; 0xec
 80065bc:	d806      	bhi.n	80065cc <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 80065be:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <TouchSwitchActivity+0xd8>)
 80065c0:	2205      	movs	r2, #5
 80065c2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80065c4:	4b19      	ldr	r3, [pc, #100]	; (800662c <TouchSwitchActivity+0xdc>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	e022      	b.n	8006612 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	2b77      	cmp	r3, #119	; 0x77
 80065d0:	d90f      	bls.n	80065f2 <TouchSwitchActivity+0xa2>
 80065d2:	88fb      	ldrh	r3, [r7, #6]
 80065d4:	2bd2      	cmp	r3, #210	; 0xd2
 80065d6:	d80c      	bhi.n	80065f2 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80065d8:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80065da:	2bd7      	cmp	r3, #215	; 0xd7
 80065dc:	d909      	bls.n	80065f2 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80065de:	88bb      	ldrh	r3, [r7, #4]
 80065e0:	2bec      	cmp	r3, #236	; 0xec
 80065e2:	d806      	bhi.n	80065f2 <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 80065e4:	4b10      	ldr	r3, [pc, #64]	; (8006628 <TouchSwitchActivity+0xd8>)
 80065e6:	2204      	movs	r2, #4
 80065e8:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80065ea:	4b10      	ldr	r3, [pc, #64]	; (800662c <TouchSwitchActivity+0xdc>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	e00f      	b.n	8006612 <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80065f8:	d30b      	bcc.n	8006612 <TouchSwitchActivity+0xc2>
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006600:	d207      	bcs.n	8006612 <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8006602:	480b      	ldr	r0, [pc, #44]	; (8006630 <TouchSwitchActivity+0xe0>)
 8006604:	f7fb f9b2 	bl	800196c <EF_SetFont>
				changeSwitchStatusTouch(y);
 8006608:	88bb      	ldrh	r3, [r7, #4]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	4618      	mov	r0, r3
 800660e:	f002 f8a7 	bl	8008760 <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 8006612:	f004 ffe5 	bl	800b5e0 <HAL_GetTick>
 8006616:	4603      	mov	r3, r0
 8006618:	4a02      	ldr	r2, [pc, #8]	; (8006624 <TouchSwitchActivity+0xd4>)
 800661a:	6013      	str	r3, [r2, #0]
		}
	}
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	2000029c 	.word	0x2000029c
 8006628:	200002a0 	.word	0x200002a0
 800662c:	20000259 	.word	0x20000259
 8006630:	080289ec 	.word	0x080289ec

08006634 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800663a:	f7fb ff65 	bl	8002508 <XPT2046_IsTouched>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d05b      	beq.n	80066fc <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006644:	f004 ffcc 	bl	800b5e0 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	4b2e      	ldr	r3, [pc, #184]	; (8006704 <TouchLightsActivity+0xd0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006654:	d352      	bcc.n	80066fc <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006656:	1d3a      	adds	r2, r7, #4
 8006658:	1dbb      	adds	r3, r7, #6
 800665a:	4611      	mov	r1, r2
 800665c:	4618      	mov	r0, r3
 800665e:	f7fb ff15 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006662:	88fb      	ldrh	r3, [r7, #6]
 8006664:	2b09      	cmp	r3, #9
 8006666:	d90f      	bls.n	8006688 <TouchLightsActivity+0x54>
 8006668:	88fb      	ldrh	r3, [r7, #6]
 800666a:	2b6e      	cmp	r3, #110	; 0x6e
 800666c:	d80c      	bhi.n	8006688 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800666e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006670:	2bd7      	cmp	r3, #215	; 0xd7
 8006672:	d909      	bls.n	8006688 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006674:	88bb      	ldrh	r3, [r7, #4]
 8006676:	2bec      	cmp	r3, #236	; 0xec
 8006678:	d806      	bhi.n	8006688 <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 800667a:	4b23      	ldr	r3, [pc, #140]	; (8006708 <TouchLightsActivity+0xd4>)
 800667c:	2202      	movs	r2, #2
 800667e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006680:	4b22      	ldr	r3, [pc, #136]	; (800670c <TouchLightsActivity+0xd8>)
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e034      	b.n	80066f2 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006688:	88fb      	ldrh	r3, [r7, #6]
 800668a:	2bdb      	cmp	r3, #219	; 0xdb
 800668c:	d910      	bls.n	80066b0 <TouchLightsActivity+0x7c>
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006694:	d20c      	bcs.n	80066b0 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006696:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006698:	2bd7      	cmp	r3, #215	; 0xd7
 800669a:	d909      	bls.n	80066b0 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800669c:	88bb      	ldrh	r3, [r7, #4]
 800669e:	2bec      	cmp	r3, #236	; 0xec
 80066a0:	d806      	bhi.n	80066b0 <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 80066a2:	4b19      	ldr	r3, [pc, #100]	; (8006708 <TouchLightsActivity+0xd4>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80066a8:	4b18      	ldr	r3, [pc, #96]	; (800670c <TouchLightsActivity+0xd8>)
 80066aa:	2201      	movs	r2, #1
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e020      	b.n	80066f2 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	2b77      	cmp	r3, #119	; 0x77
 80066b4:	d90f      	bls.n	80066d6 <TouchLightsActivity+0xa2>
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	2bd2      	cmp	r3, #210	; 0xd2
 80066ba:	d80c      	bhi.n	80066d6 <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80066bc:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80066be:	2bd7      	cmp	r3, #215	; 0xd7
 80066c0:	d909      	bls.n	80066d6 <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80066c2:	88bb      	ldrh	r3, [r7, #4]
 80066c4:	2bec      	cmp	r3, #236	; 0xec
 80066c6:	d806      	bhi.n	80066d6 <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 80066c8:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <TouchLightsActivity+0xd4>)
 80066ca:	2206      	movs	r2, #6
 80066cc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80066ce:	4b0f      	ldr	r3, [pc, #60]	; (800670c <TouchLightsActivity+0xd8>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e00d      	b.n	80066f2 <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	2bc7      	cmp	r3, #199	; 0xc7
 80066da:	d90a      	bls.n	80066f2 <TouchLightsActivity+0xbe>
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	2be9      	cmp	r3, #233	; 0xe9
 80066e0:	d807      	bhi.n	80066f2 <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80066e2:	480b      	ldr	r0, [pc, #44]	; (8006710 <TouchLightsActivity+0xdc>)
 80066e4:	f7fb f942 	bl	800196c <EF_SetFont>
				changeLightsStatusTouch(y);
 80066e8:	88bb      	ldrh	r3, [r7, #4]
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	4618      	mov	r0, r3
 80066ee:	f002 f88f 	bl	8008810 <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 80066f2:	f004 ff75 	bl	800b5e0 <HAL_GetTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	4a02      	ldr	r2, [pc, #8]	; (8006704 <TouchLightsActivity+0xd0>)
 80066fa:	6013      	str	r3, [r2, #0]
		}
	}
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	2000029c 	.word	0x2000029c
 8006708:	200002a0 	.word	0x200002a0
 800670c:	20000259 	.word	0x20000259
 8006710:	080289ec 	.word	0x080289ec

08006714 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af02      	add	r7, sp, #8

	// Check if screen was touched
		if(XPT2046_IsTouched())
 800671a:	f7fb fef5 	bl	8002508 <XPT2046_IsTouched>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80a9 	beq.w	8006878 <TouchClockActivity+0x164>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006726:	4856      	ldr	r0, [pc, #344]	; (8006880 <TouchClockActivity+0x16c>)
 8006728:	f7fb f920 	bl	800196c <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800672c:	f004 ff58 	bl	800b5e0 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	4b54      	ldr	r3, [pc, #336]	; (8006884 <TouchClockActivity+0x170>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800673c:	f0c0 809c 	bcc.w	8006878 <TouchClockActivity+0x164>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006740:	1d3a      	adds	r2, r7, #4
 8006742:	1dbb      	adds	r3, r7, #6
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f7fb fea0 	bl	800248c <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 800674c:	4b4e      	ldr	r3, [pc, #312]	; (8006888 <TouchClockActivity+0x174>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d114      	bne.n	800677e <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8006754:	f7fc f99a 	bl	8002a8c <DS3231_GetHour>
 8006758:	4603      	mov	r3, r0
 800675a:	461a      	mov	r2, r3
 800675c:	4b4b      	ldr	r3, [pc, #300]	; (800688c <TouchClockActivity+0x178>)
 800675e:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8006760:	f7fc f9a0 	bl	8002aa4 <DS3231_GetMinute>
 8006764:	4603      	mov	r3, r0
 8006766:	461a      	mov	r2, r3
 8006768:	4b49      	ldr	r3, [pc, #292]	; (8006890 <TouchClockActivity+0x17c>)
 800676a:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 800676c:	f7fc f982 	bl	8002a74 <DS3231_GetDayOfWeek>
 8006770:	4603      	mov	r3, r0
 8006772:	461a      	mov	r2, r3
 8006774:	4b47      	ldr	r3, [pc, #284]	; (8006894 <TouchClockActivity+0x180>)
 8006776:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8006778:	4b43      	ldr	r3, [pc, #268]	; (8006888 <TouchClockActivity+0x174>)
 800677a:	2200      	movs	r2, #0
 800677c:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	2b09      	cmp	r3, #9
 8006782:	d912      	bls.n	80067aa <TouchClockActivity+0x96>
 8006784:	88fb      	ldrh	r3, [r7, #6]
 8006786:	2b6e      	cmp	r3, #110	; 0x6e
 8006788:	d80f      	bhi.n	80067aa <TouchClockActivity+0x96>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800678a:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800678c:	2bd7      	cmp	r3, #215	; 0xd7
 800678e:	d90c      	bls.n	80067aa <TouchClockActivity+0x96>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006790:	88bb      	ldrh	r3, [r7, #4]
 8006792:	2bec      	cmp	r3, #236	; 0xec
 8006794:	d809      	bhi.n	80067aa <TouchClockActivity+0x96>
				{
					State = MENUTFT_PARAMETERS;
 8006796:	4b40      	ldr	r3, [pc, #256]	; (8006898 <TouchClockActivity+0x184>)
 8006798:	2201      	movs	r2, #1
 800679a:	701a      	strb	r2, [r3, #0]
					EncoderState = ENCODER_IDLE;
 800679c:	4b3f      	ldr	r3, [pc, #252]	; (800689c <TouchClockActivity+0x188>)
 800679e:	2200      	movs	r2, #0
 80067a0:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80067a2:	4b3f      	ldr	r3, [pc, #252]	; (80068a0 <TouchClockActivity+0x18c>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e061      	b.n	800686e <TouchClockActivity+0x15a>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	2bdb      	cmp	r3, #219	; 0xdb
 80067ae:	d92c      	bls.n	800680a <TouchClockActivity+0xf6>
 80067b0:	88fb      	ldrh	r3, [r7, #6]
 80067b2:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80067b6:	d228      	bcs.n	800680a <TouchClockActivity+0xf6>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80067b8:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80067ba:	2bd7      	cmp	r3, #215	; 0xd7
 80067bc:	d925      	bls.n	800680a <TouchClockActivity+0xf6>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80067be:	88bb      	ldrh	r3, [r7, #4]
 80067c0:	2bec      	cmp	r3, #236	; 0xec
 80067c2:	d822      	bhi.n	800680a <TouchClockActivity+0xf6>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 80067c4:	4b33      	ldr	r3, [pc, #204]	; (8006894 <TouchClockActivity+0x180>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fc f977 	bl	8002abc <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 80067ce:	4b2f      	ldr	r3, [pc, #188]	; (800688c <TouchClockActivity+0x178>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fc f984 	bl	8002ae0 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 80067d8:	4b2d      	ldr	r3, [pc, #180]	; (8006890 <TouchClockActivity+0x17c>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fc f994 	bl	8002b0a <DS3231_SetMinute>
					DS3231_SetSecond(50);
 80067e2:	2032      	movs	r0, #50	; 0x32
 80067e4:	f7fc f9a3 	bl	8002b2e <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 80067e8:	492e      	ldr	r1, [pc, #184]	; (80068a4 <TouchClockActivity+0x190>)
 80067ea:	482f      	ldr	r0, [pc, #188]	; (80068a8 <TouchClockActivity+0x194>)
 80067ec:	f00c fc88 	bl	8013100 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 80067f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	2301      	movs	r3, #1
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80067fe:	220a      	movs	r2, #10
 8006800:	212f      	movs	r1, #47	; 0x2f
 8006802:	4829      	ldr	r0, [pc, #164]	; (80068a8 <TouchClockActivity+0x194>)
 8006804:	f7fb facc 	bl	8001da0 <EF_PutString>
 8006808:	e031      	b.n	800686e <TouchClockActivity+0x15a>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 800680a:	88fb      	ldrh	r3, [r7, #6]
 800680c:	2b6d      	cmp	r3, #109	; 0x6d
 800680e:	d912      	bls.n	8006836 <TouchClockActivity+0x122>
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	2bdc      	cmp	r3, #220	; 0xdc
 8006814:	d80f      	bhi.n	8006836 <TouchClockActivity+0x122>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006816:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006818:	2bbd      	cmp	r3, #189	; 0xbd
 800681a:	d90c      	bls.n	8006836 <TouchClockActivity+0x122>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 800681c:	88bb      	ldrh	r3, [r7, #4]
 800681e:	2bd4      	cmp	r3, #212	; 0xd4
 8006820:	d809      	bhi.n	8006836 <TouchClockActivity+0x122>
				{
					State = MENUTFT_SCHEDULE_1;
 8006822:	4b1d      	ldr	r3, [pc, #116]	; (8006898 <TouchClockActivity+0x184>)
 8006824:	2207      	movs	r2, #7
 8006826:	701a      	strb	r2, [r3, #0]
					EncoderState = ENCODER_IDLE;
 8006828:	4b1c      	ldr	r3, [pc, #112]	; (800689c <TouchClockActivity+0x188>)
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800682e:	4b1c      	ldr	r3, [pc, #112]	; (80068a0 <TouchClockActivity+0x18c>)
 8006830:	2201      	movs	r2, #1
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	e01b      	b.n	800686e <TouchClockActivity+0x15a>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	2bef      	cmp	r3, #239	; 0xef
 800683a:	d90a      	bls.n	8006852 <TouchClockActivity+0x13e>
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006842:	d806      	bhi.n	8006852 <TouchClockActivity+0x13e>
				{
					clockIncreaseOneHourAndMinute(x, y);
 8006844:	88fb      	ldrh	r3, [r7, #6]
 8006846:	88ba      	ldrh	r2, [r7, #4]
 8006848:	4611      	mov	r1, r2
 800684a:	4618      	mov	r0, r3
 800684c:	f001 fed6 	bl	80085fc <clockIncreaseOneHourAndMinute>
 8006850:	e00d      	b.n	800686e <TouchClockActivity+0x15a>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006858:	d309      	bcc.n	800686e <TouchClockActivity+0x15a>
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006860:	d805      	bhi.n	800686e <TouchClockActivity+0x15a>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 8006862:	88fb      	ldrh	r3, [r7, #6]
 8006864:	88ba      	ldrh	r2, [r7, #4]
 8006866:	4611      	mov	r1, r2
 8006868:	4618      	mov	r0, r3
 800686a:	f001 fef9 	bl	8008660 <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 800686e:	f004 feb7 	bl	800b5e0 <HAL_GetTick>
 8006872:	4603      	mov	r3, r0
 8006874:	4a03      	ldr	r2, [pc, #12]	; (8006884 <TouchClockActivity+0x170>)
 8006876:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006878:	bf00      	nop
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	0802a964 	.word	0x0802a964
 8006884:	2000029c 	.word	0x2000029c
 8006888:	2000025a 	.word	0x2000025a
 800688c:	20000032 	.word	0x20000032
 8006890:	20000033 	.word	0x20000033
 8006894:	20000031 	.word	0x20000031
 8006898:	200002a0 	.word	0x200002a0
 800689c:	200002a1 	.word	0x200002a1
 80068a0:	20000259 	.word	0x20000259
 80068a4:	0801736c 	.word	0x0801736c
 80068a8:	200002cc 	.word	0x200002cc

080068ac <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 80068b2:	f7fb fe29 	bl	8002508 <XPT2046_IsTouched>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d05b      	beq.n	8006974 <TouchPredefinedActivityActivity+0xc8>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80068bc:	f004 fe90 	bl	800b5e0 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	4b2e      	ldr	r3, [pc, #184]	; (800697c <TouchPredefinedActivityActivity+0xd0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068cc:	d352      	bcc.n	8006974 <TouchPredefinedActivityActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80068ce:	1d3a      	adds	r2, r7, #4
 80068d0:	1dbb      	adds	r3, r7, #6
 80068d2:	4611      	mov	r1, r2
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fb fdd9 	bl	800248c <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 80068da:	4829      	ldr	r0, [pc, #164]	; (8006980 <TouchPredefinedActivityActivity+0xd4>)
 80068dc:	f7fb f846 	bl	800196c <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	2b09      	cmp	r3, #9
 80068e4:	d90f      	bls.n	8006906 <TouchPredefinedActivityActivity+0x5a>
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	2b6e      	cmp	r3, #110	; 0x6e
 80068ea:	d80c      	bhi.n	8006906 <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80068ec:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80068ee:	2bd7      	cmp	r3, #215	; 0xd7
 80068f0:	d909      	bls.n	8006906 <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80068f2:	88bb      	ldrh	r3, [r7, #4]
 80068f4:	2bec      	cmp	r3, #236	; 0xec
 80068f6:	d806      	bhi.n	8006906 <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 80068f8:	4b22      	ldr	r3, [pc, #136]	; (8006984 <TouchPredefinedActivityActivity+0xd8>)
 80068fa:	2202      	movs	r2, #2
 80068fc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80068fe:	4b22      	ldr	r3, [pc, #136]	; (8006988 <TouchPredefinedActivityActivity+0xdc>)
 8006900:	2201      	movs	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	e031      	b.n	800696a <TouchPredefinedActivityActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button - Confirmed changed clock
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	2bdb      	cmp	r3, #219	; 0xdb
 800690a:	d923      	bls.n	8006954 <TouchPredefinedActivityActivity+0xa8>
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006912:	d21f      	bcs.n	8006954 <TouchPredefinedActivityActivity+0xa8>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006914:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006916:	2bd7      	cmp	r3, #215	; 0xd7
 8006918:	d91c      	bls.n	8006954 <TouchPredefinedActivityActivity+0xa8>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800691a:	88bb      	ldrh	r3, [r7, #4]
 800691c:	2bec      	cmp	r3, #236	; 0xec
 800691e:	d819      	bhi.n	8006954 <TouchPredefinedActivityActivity+0xa8>
			{
				EF_SetFont(&arialBlack_20ptFontInfo);
 8006920:	481a      	ldr	r0, [pc, #104]	; (800698c <TouchPredefinedActivityActivity+0xe0>)
 8006922:	f7fb f823 	bl	800196c <EF_SetFont>
				EEPROM_ActivitiesTimeUpdate(1, activitiesDurationTimeInSeconds);
 8006926:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <TouchPredefinedActivityActivity+0xe4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4619      	mov	r1, r3
 800692c:	2001      	movs	r0, #1
 800692e:	f7fc fd7b 	bl	8003428 <EEPROM_ActivitiesTimeUpdate>
				sprintf((char*)Msg, "-Time Changed-");
 8006932:	4918      	ldr	r1, [pc, #96]	; (8006994 <TouchPredefinedActivityActivity+0xe8>)
 8006934:	4818      	ldr	r0, [pc, #96]	; (8006998 <TouchPredefinedActivityActivity+0xec>)
 8006936:	f00c fbe3 	bl	8013100 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 800693a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	2301      	movs	r3, #1
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006948:	220a      	movs	r2, #10
 800694a:	212f      	movs	r1, #47	; 0x2f
 800694c:	4812      	ldr	r0, [pc, #72]	; (8006998 <TouchPredefinedActivityActivity+0xec>)
 800694e:	f7fb fa27 	bl	8001da0 <EF_PutString>
 8006952:	e00a      	b.n	800696a <TouchPredefinedActivityActivity+0xbe>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 8006954:	88fb      	ldrh	r3, [r7, #6]
 8006956:	2b63      	cmp	r3, #99	; 0x63
 8006958:	d907      	bls.n	800696a <TouchPredefinedActivityActivity+0xbe>
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	2bdc      	cmp	r3, #220	; 0xdc
 800695e:	d804      	bhi.n	800696a <TouchPredefinedActivityActivity+0xbe>
			{
				predefinedActivityTouchAction(y);
 8006960:	88bb      	ldrh	r3, [r7, #4]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	4618      	mov	r0, r3
 8006966:	f001 ffab 	bl	80088c0 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 800696a:	f004 fe39 	bl	800b5e0 <HAL_GetTick>
 800696e:	4603      	mov	r3, r0
 8006970:	4a02      	ldr	r2, [pc, #8]	; (800697c <TouchPredefinedActivityActivity+0xd0>)
 8006972:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	2000029c 	.word	0x2000029c
 8006980:	080289ec 	.word	0x080289ec
 8006984:	200002a0 	.word	0x200002a0
 8006988:	20000259 	.word	0x20000259
 800698c:	0802a964 	.word	0x0802a964
 8006990:	20000290 	.word	0x20000290
 8006994:	0801736c 	.word	0x0801736c
 8006998:	200002cc 	.word	0x200002cc

0800699c <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 80069a2:	f7fb fdb1 	bl	8002508 <XPT2046_IsTouched>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d050      	beq.n	8006a4e <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80069ac:	482a      	ldr	r0, [pc, #168]	; (8006a58 <TouchWSLedActivity+0xbc>)
 80069ae:	f7fa ffdd 	bl	800196c <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80069b2:	f004 fe15 	bl	800b5e0 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	4b28      	ldr	r3, [pc, #160]	; (8006a5c <TouchWSLedActivity+0xc0>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c2:	d344      	bcc.n	8006a4e <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80069c4:	1d3a      	adds	r2, r7, #4
 80069c6:	1dbb      	adds	r3, r7, #6
 80069c8:	4611      	mov	r1, r2
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fb fd5e 	bl	800248c <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 80069d0:	4b23      	ldr	r3, [pc, #140]	; (8006a60 <TouchWSLedActivity+0xc4>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d10b      	bne.n	80069f0 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 80069d8:	bf00      	nop
 80069da:	2201      	movs	r2, #1
 80069dc:	4921      	ldr	r1, [pc, #132]	; (8006a64 <TouchWSLedActivity+0xc8>)
 80069de:	2001      	movs	r0, #1
 80069e0:	f7fc f902 	bl	8002be8 <eeprom_read>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f7      	bne.n	80069da <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 80069ea:	4b1f      	ldr	r3, [pc, #124]	; (8006a68 <TouchWSLedActivity+0xcc>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80069f0:	88fb      	ldrh	r3, [r7, #6]
 80069f2:	2b09      	cmp	r3, #9
 80069f4:	d90f      	bls.n	8006a16 <TouchWSLedActivity+0x7a>
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	2b6e      	cmp	r3, #110	; 0x6e
 80069fa:	d80c      	bhi.n	8006a16 <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80069fc:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80069fe:	2bd7      	cmp	r3, #215	; 0xd7
 8006a00:	d909      	bls.n	8006a16 <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006a02:	88bb      	ldrh	r3, [r7, #4]
 8006a04:	2bec      	cmp	r3, #236	; 0xec
 8006a06:	d806      	bhi.n	8006a16 <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 8006a08:	4b18      	ldr	r3, [pc, #96]	; (8006a6c <TouchWSLedActivity+0xd0>)
 8006a0a:	2205      	movs	r2, #5
 8006a0c:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006a0e:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <TouchWSLedActivity+0xd4>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	e016      	b.n	8006a44 <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 8006a16:	88bb      	ldrh	r3, [r7, #4]
 8006a18:	2b40      	cmp	r3, #64	; 0x40
 8006a1a:	d90b      	bls.n	8006a34 <TouchWSLedActivity+0x98>
 8006a1c:	88bb      	ldrh	r3, [r7, #4]
 8006a1e:	2b56      	cmp	r3, #86	; 0x56
 8006a20:	d808      	bhi.n	8006a34 <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 8006a22:	88fb      	ldrh	r3, [r7, #6]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	88ba      	ldrh	r2, [r7, #4]
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f002 f8a5 	bl	8008b7c <increaseNumberOfWSLedOnTFT>
 8006a32:	e007      	b.n	8006a44 <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	88ba      	ldrh	r2, [r7, #4]
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f002 f8fc 	bl	8008c3c <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 8006a44:	f004 fdcc 	bl	800b5e0 <HAL_GetTick>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	4a04      	ldr	r2, [pc, #16]	; (8006a5c <TouchWSLedActivity+0xc0>)
 8006a4c:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	0802a964 	.word	0x0802a964
 8006a5c:	2000029c 	.word	0x2000029c
 8006a60:	2000025a 	.word	0x2000025a
 8006a64:	20000034 	.word	0x20000034
 8006a68:	2000025b 	.word	0x2000025b
 8006a6c:	200002a0 	.word	0x200002a0
 8006a70:	20000259 	.word	0x20000259

08006a74 <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006a7a:	4b70      	ldr	r3, [pc, #448]	; (8006c3c <Schedule1Activity+0x1c8>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d105      	bne.n	8006a8e <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 8006a82:	2001      	movs	r0, #1
 8006a84:	f001 fd66 	bl	8008554 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006a88:	4b6c      	ldr	r3, [pc, #432]	; (8006c3c <Schedule1Activity+0x1c8>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006a8e:	f7fb fd3b 	bl	8002508 <XPT2046_IsTouched>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80cc 	beq.w	8006c32 <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006a9a:	f004 fda1 	bl	800b5e0 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	4b67      	ldr	r3, [pc, #412]	; (8006c40 <Schedule1Activity+0x1cc>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aaa:	f0c0 80c2 	bcc.w	8006c32 <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006aae:	1d3a      	adds	r2, r7, #4
 8006ab0:	1dbb      	adds	r3, r7, #6
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fb fce9 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006aba:	88fb      	ldrh	r3, [r7, #6]
 8006abc:	2b09      	cmp	r3, #9
 8006abe:	d90f      	bls.n	8006ae0 <Schedule1Activity+0x6c>
 8006ac0:	88fb      	ldrh	r3, [r7, #6]
 8006ac2:	2b6e      	cmp	r3, #110	; 0x6e
 8006ac4:	d80c      	bhi.n	8006ae0 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006ac6:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006ac8:	2bd7      	cmp	r3, #215	; 0xd7
 8006aca:	d909      	bls.n	8006ae0 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006acc:	88bb      	ldrh	r3, [r7, #4]
 8006ace:	2bec      	cmp	r3, #236	; 0xec
 8006ad0:	d806      	bhi.n	8006ae0 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006ad2:	4b5c      	ldr	r3, [pc, #368]	; (8006c44 <Schedule1Activity+0x1d0>)
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006ad8:	4b5b      	ldr	r3, [pc, #364]	; (8006c48 <Schedule1Activity+0x1d4>)
 8006ada:	2201      	movs	r2, #1
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	e0a3      	b.n	8006c28 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006ae0:	88fb      	ldrh	r3, [r7, #6]
 8006ae2:	2bdb      	cmp	r3, #219	; 0xdb
 8006ae4:	d910      	bls.n	8006b08 <Schedule1Activity+0x94>
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006aec:	d20c      	bcs.n	8006b08 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006aee:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006af0:	2bd7      	cmp	r3, #215	; 0xd7
 8006af2:	d909      	bls.n	8006b08 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006af4:	88bb      	ldrh	r3, [r7, #4]
 8006af6:	2bec      	cmp	r3, #236	; 0xec
 8006af8:	d806      	bhi.n	8006b08 <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 8006afa:	4b52      	ldr	r3, [pc, #328]	; (8006c44 <Schedule1Activity+0x1d0>)
 8006afc:	2208      	movs	r2, #8
 8006afe:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006b00:	4b51      	ldr	r3, [pc, #324]	; (8006c48 <Schedule1Activity+0x1d4>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	e08f      	b.n	8006c28 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006b08:	88bb      	ldrh	r3, [r7, #4]
 8006b0a:	2b31      	cmp	r3, #49	; 0x31
 8006b0c:	d909      	bls.n	8006b22 <Schedule1Activity+0xae>
 8006b0e:	88bb      	ldrh	r3, [r7, #4]
 8006b10:	2b46      	cmp	r3, #70	; 0x46
 8006b12:	d806      	bhi.n	8006b22 <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	88ba      	ldrh	r2, [r7, #4]
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 f99a 	bl	8006e54 <MenuTFTSchedule1ActivityDayOfWeekRow>
 8006b20:	e082      	b.n	8006c28 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006b22:	88bb      	ldrh	r3, [r7, #4]
 8006b24:	2b64      	cmp	r3, #100	; 0x64
 8006b26:	d909      	bls.n	8006b3c <Schedule1Activity+0xc8>
 8006b28:	88bb      	ldrh	r3, [r7, #4]
 8006b2a:	2b79      	cmp	r3, #121	; 0x79
 8006b2c:	d806      	bhi.n	8006b3c <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	88ba      	ldrh	r2, [r7, #4]
 8006b32:	4611      	mov	r1, r2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fe37 	bl	80077a8 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 8006b3a:	e075      	b.n	8006c28 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006b3c:	88bb      	ldrh	r3, [r7, #4]
 8006b3e:	2b87      	cmp	r3, #135	; 0x87
 8006b40:	d909      	bls.n	8006b56 <Schedule1Activity+0xe2>
 8006b42:	88bb      	ldrh	r3, [r7, #4]
 8006b44:	2b9c      	cmp	r3, #156	; 0x9c
 8006b46:	d806      	bhi.n	8006b56 <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 8006b48:	88fb      	ldrh	r3, [r7, #6]
 8006b4a:	88ba      	ldrh	r2, [r7, #4]
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fea8 	bl	80078a4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 8006b54:	e068      	b.n	8006c28 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006b56:	88bb      	ldrh	r3, [r7, #4]
 8006b58:	2ba9      	cmp	r3, #169	; 0xa9
 8006b5a:	d909      	bls.n	8006b70 <Schedule1Activity+0xfc>
 8006b5c:	88bb      	ldrh	r3, [r7, #4]
 8006b5e:	2bbe      	cmp	r3, #190	; 0xbe
 8006b60:	d806      	bhi.n	8006b70 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	88ba      	ldrh	r2, [r7, #4]
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f001 fac7 	bl	80080fc <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 8006b6e:	e05b      	b.n	8006c28 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	2b77      	cmp	r3, #119	; 0x77
 8006b74:	d958      	bls.n	8006c28 <Schedule1Activity+0x1b4>
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	2bd2      	cmp	r3, #210	; 0xd2
 8006b7a:	d855      	bhi.n	8006c28 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006b7c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006b7e:	2bd7      	cmp	r3, #215	; 0xd7
 8006b80:	d952      	bls.n	8006c28 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006b82:	88bb      	ldrh	r3, [r7, #4]
 8006b84:	2bec      	cmp	r3, #236	; 0xec
 8006b86:	d84f      	bhi.n	8006c28 <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 8006b88:	4b30      	ldr	r3, [pc, #192]	; (8006c4c <Schedule1Activity+0x1d8>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	2001      	movs	r0, #1
 8006b90:	f7fc fba1 	bl	80032d6 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 8006b94:	4b2e      	ldr	r3, [pc, #184]	; (8006c50 <Schedule1Activity+0x1dc>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	f7fc fbbe 	bl	800331c <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006ba0:	4b2c      	ldr	r3, [pc, #176]	; (8006c54 <Schedule1Activity+0x1e0>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	f7fc fbdb 	bl	8003362 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 8006bac:	4b2a      	ldr	r3, [pc, #168]	; (8006c58 <Schedule1Activity+0x1e4>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	f7fc fbf8 	bl	80033a8 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006bb8:	4928      	ldr	r1, [pc, #160]	; (8006c5c <Schedule1Activity+0x1e8>)
 8006bba:	2001      	movs	r0, #1
 8006bbc:	f7fc f9eb 	bl	8002f96 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006bc0:	4927      	ldr	r1, [pc, #156]	; (8006c60 <Schedule1Activity+0x1ec>)
 8006bc2:	2001      	movs	r0, #1
 8006bc4:	f7fc fa92 	bl	80030ec <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006bc8:	4826      	ldr	r0, [pc, #152]	; (8006c64 <Schedule1Activity+0x1f0>)
 8006bca:	f7fa fecf 	bl	800196c <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 8006bce:	4926      	ldr	r1, [pc, #152]	; (8006c68 <Schedule1Activity+0x1f4>)
 8006bd0:	4826      	ldr	r0, [pc, #152]	; (8006c6c <Schedule1Activity+0x1f8>)
 8006bd2:	f00c fa95 	bl	8013100 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006bd6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	2301      	movs	r3, #1
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006be4:	220a      	movs	r2, #10
 8006be6:	2128      	movs	r1, #40	; 0x28
 8006be8:	4820      	ldr	r0, [pc, #128]	; (8006c6c <Schedule1Activity+0x1f8>)
 8006bea:	f7fb f8d9 	bl	8001da0 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006bee:	4820      	ldr	r0, [pc, #128]	; (8006c70 <Schedule1Activity+0x1fc>)
 8006bf0:	f7fa febc 	bl	800196c <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006bf4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	2305      	movs	r3, #5
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	2314      	movs	r3, #20
 8006c00:	225a      	movs	r2, #90	; 0x5a
 8006c02:	21d8      	movs	r1, #216	; 0xd8
 8006c04:	2078      	movs	r0, #120	; 0x78
 8006c06:	f7fa fe60 	bl	80018ca <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006c0a:	491a      	ldr	r1, [pc, #104]	; (8006c74 <Schedule1Activity+0x200>)
 8006c0c:	4817      	ldr	r0, [pc, #92]	; (8006c6c <Schedule1Activity+0x1f8>)
 8006c0e:	f00c fa77 	bl	8013100 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006c12:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	22da      	movs	r2, #218	; 0xda
 8006c20:	217e      	movs	r1, #126	; 0x7e
 8006c22:	4812      	ldr	r0, [pc, #72]	; (8006c6c <Schedule1Activity+0x1f8>)
 8006c24:	f7fb f8bc 	bl	8001da0 <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 8006c28:	f004 fcda 	bl	800b5e0 <HAL_GetTick>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	4a04      	ldr	r2, [pc, #16]	; (8006c40 <Schedule1Activity+0x1cc>)
 8006c30:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	2000025c 	.word	0x2000025c
 8006c40:	2000029c 	.word	0x2000029c
 8006c44:	200002a0 	.word	0x200002a0
 8006c48:	20000259 	.word	0x20000259
 8006c4c:	20000285 	.word	0x20000285
 8006c50:	20000287 	.word	0x20000287
 8006c54:	20000286 	.word	0x20000286
 8006c58:	20000288 	.word	0x20000288
 8006c5c:	20000260 	.word	0x20000260
 8006c60:	20000268 	.word	0x20000268
 8006c64:	0802a964 	.word	0x0802a964
 8006c68:	0801737c 	.word	0x0801737c
 8006c6c:	200002cc 	.word	0x200002cc
 8006c70:	080289ec 	.word	0x080289ec
 8006c74:	08017390 	.word	0x08017390

08006c78 <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006c7e:	4b66      	ldr	r3, [pc, #408]	; (8006e18 <Schedule2Activity+0x1a0>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d105      	bne.n	8006c92 <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 8006c86:	2002      	movs	r0, #2
 8006c88:	f001 fc64 	bl	8008554 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006c8c:	4b62      	ldr	r3, [pc, #392]	; (8006e18 <Schedule2Activity+0x1a0>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006c92:	f7fb fc39 	bl	8002508 <XPT2046_IsTouched>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80b8 	beq.w	8006e0e <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006c9e:	f004 fc9f 	bl	800b5e0 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	4b5d      	ldr	r3, [pc, #372]	; (8006e1c <Schedule2Activity+0x1a4>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cae:	f0c0 80ae 	bcc.w	8006e0e <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006cb2:	1d3a      	adds	r2, r7, #4
 8006cb4:	1dbb      	adds	r3, r7, #6
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fb fbe7 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	2b09      	cmp	r3, #9
 8006cc2:	d90f      	bls.n	8006ce4 <Schedule2Activity+0x6c>
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	2b6e      	cmp	r3, #110	; 0x6e
 8006cc8:	d80c      	bhi.n	8006ce4 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006cca:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006ccc:	2bd7      	cmp	r3, #215	; 0xd7
 8006cce:	d909      	bls.n	8006ce4 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006cd0:	88bb      	ldrh	r3, [r7, #4]
 8006cd2:	2bec      	cmp	r3, #236	; 0xec
 8006cd4:	d806      	bhi.n	8006ce4 <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006cd6:	4b52      	ldr	r3, [pc, #328]	; (8006e20 <Schedule2Activity+0x1a8>)
 8006cd8:	2203      	movs	r2, #3
 8006cda:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006cdc:	4b51      	ldr	r3, [pc, #324]	; (8006e24 <Schedule2Activity+0x1ac>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	e08f      	b.n	8006e04 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006ce4:	88bb      	ldrh	r3, [r7, #4]
 8006ce6:	2b31      	cmp	r3, #49	; 0x31
 8006ce8:	d909      	bls.n	8006cfe <Schedule2Activity+0x86>
 8006cea:	88bb      	ldrh	r3, [r7, #4]
 8006cec:	2b46      	cmp	r3, #70	; 0x46
 8006cee:	d806      	bhi.n	8006cfe <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 8006cf0:	88fb      	ldrh	r3, [r7, #6]
 8006cf2:	88ba      	ldrh	r2, [r7, #4]
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fe52 	bl	80079a0 <MenuTFTSchedule2ActivityDayOfWeekRow>
 8006cfc:	e082      	b.n	8006e04 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006cfe:	88bb      	ldrh	r3, [r7, #4]
 8006d00:	2b64      	cmp	r3, #100	; 0x64
 8006d02:	d909      	bls.n	8006d18 <Schedule2Activity+0xa0>
 8006d04:	88bb      	ldrh	r3, [r7, #4]
 8006d06:	2b79      	cmp	r3, #121	; 0x79
 8006d08:	d806      	bhi.n	8006d18 <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 8006d0a:	88fb      	ldrh	r3, [r7, #6]
 8006d0c:	88ba      	ldrh	r2, [r7, #4]
 8006d0e:	4611      	mov	r1, r2
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 f8f7 	bl	8007f04 <MenuTFTSchedule2ActivityHourMinuteONAdd>
 8006d16:	e075      	b.n	8006e04 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006d18:	88bb      	ldrh	r3, [r7, #4]
 8006d1a:	2b87      	cmp	r3, #135	; 0x87
 8006d1c:	d909      	bls.n	8006d32 <Schedule2Activity+0xba>
 8006d1e:	88bb      	ldrh	r3, [r7, #4]
 8006d20:	2b9c      	cmp	r3, #156	; 0x9c
 8006d22:	d806      	bhi.n	8006d32 <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	88ba      	ldrh	r2, [r7, #4]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f001 f968 	bl	8008000 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 8006d30:	e068      	b.n	8006e04 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006d32:	88bb      	ldrh	r3, [r7, #4]
 8006d34:	2ba9      	cmp	r3, #169	; 0xa9
 8006d36:	d909      	bls.n	8006d4c <Schedule2Activity+0xd4>
 8006d38:	88bb      	ldrh	r3, [r7, #4]
 8006d3a:	2bbe      	cmp	r3, #190	; 0xbe
 8006d3c:	d806      	bhi.n	8006d4c <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	88ba      	ldrh	r2, [r7, #4]
 8006d42:	4611      	mov	r1, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 faef 	bl	8008328 <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 8006d4a:	e05b      	b.n	8006e04 <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	2b77      	cmp	r3, #119	; 0x77
 8006d50:	d958      	bls.n	8006e04 <Schedule2Activity+0x18c>
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	2bd2      	cmp	r3, #210	; 0xd2
 8006d56:	d855      	bhi.n	8006e04 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006d58:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006d5a:	2bd7      	cmp	r3, #215	; 0xd7
 8006d5c:	d952      	bls.n	8006e04 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006d5e:	88bb      	ldrh	r3, [r7, #4]
 8006d60:	2bec      	cmp	r3, #236	; 0xec
 8006d62:	d84f      	bhi.n	8006e04 <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 8006d64:	4b30      	ldr	r3, [pc, #192]	; (8006e28 <Schedule2Activity+0x1b0>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	2002      	movs	r0, #2
 8006d6c:	f7fc fab3 	bl	80032d6 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006d70:	4b2e      	ldr	r3, [pc, #184]	; (8006e2c <Schedule2Activity+0x1b4>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	2002      	movs	r0, #2
 8006d78:	f7fc fad0 	bl	800331c <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006d7c:	4b2c      	ldr	r3, [pc, #176]	; (8006e30 <Schedule2Activity+0x1b8>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	4619      	mov	r1, r3
 8006d82:	2002      	movs	r0, #2
 8006d84:	f7fc faed 	bl	8003362 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 8006d88:	4b2a      	ldr	r3, [pc, #168]	; (8006e34 <Schedule2Activity+0x1bc>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	2002      	movs	r0, #2
 8006d90:	f7fc fb0a 	bl	80033a8 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 8006d94:	4928      	ldr	r1, [pc, #160]	; (8006e38 <Schedule2Activity+0x1c0>)
 8006d96:	2002      	movs	r0, #2
 8006d98:	f7fc f8fd 	bl	8002f96 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 8006d9c:	4927      	ldr	r1, [pc, #156]	; (8006e3c <Schedule2Activity+0x1c4>)
 8006d9e:	2002      	movs	r0, #2
 8006da0:	f7fc f9a4 	bl	80030ec <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006da4:	4826      	ldr	r0, [pc, #152]	; (8006e40 <Schedule2Activity+0x1c8>)
 8006da6:	f7fa fde1 	bl	800196c <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 8006daa:	4926      	ldr	r1, [pc, #152]	; (8006e44 <Schedule2Activity+0x1cc>)
 8006dac:	4826      	ldr	r0, [pc, #152]	; (8006e48 <Schedule2Activity+0x1d0>)
 8006dae:	f00c f9a7 	bl	8013100 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006db2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006db6:	9301      	str	r3, [sp, #4]
 8006db8:	2301      	movs	r3, #1
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006dc0:	220a      	movs	r2, #10
 8006dc2:	2128      	movs	r1, #40	; 0x28
 8006dc4:	4820      	ldr	r0, [pc, #128]	; (8006e48 <Schedule2Activity+0x1d0>)
 8006dc6:	f7fa ffeb 	bl	8001da0 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006dca:	4820      	ldr	r0, [pc, #128]	; (8006e4c <Schedule2Activity+0x1d4>)
 8006dcc:	f7fa fdce 	bl	800196c <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006dd0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	2305      	movs	r3, #5
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	2314      	movs	r3, #20
 8006ddc:	225a      	movs	r2, #90	; 0x5a
 8006dde:	21d8      	movs	r1, #216	; 0xd8
 8006de0:	2078      	movs	r0, #120	; 0x78
 8006de2:	f7fa fd72 	bl	80018ca <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006de6:	491a      	ldr	r1, [pc, #104]	; (8006e50 <Schedule2Activity+0x1d8>)
 8006de8:	4817      	ldr	r0, [pc, #92]	; (8006e48 <Schedule2Activity+0x1d0>)
 8006dea:	f00c f989 	bl	8013100 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006dee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	2300      	movs	r3, #0
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	22da      	movs	r2, #218	; 0xda
 8006dfc:	217e      	movs	r1, #126	; 0x7e
 8006dfe:	4812      	ldr	r0, [pc, #72]	; (8006e48 <Schedule2Activity+0x1d0>)
 8006e00:	f7fa ffce 	bl	8001da0 <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 8006e04:	f004 fbec 	bl	800b5e0 <HAL_GetTick>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	4a04      	ldr	r2, [pc, #16]	; (8006e1c <Schedule2Activity+0x1a4>)
 8006e0c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	2000025c 	.word	0x2000025c
 8006e1c:	2000029c 	.word	0x2000029c
 8006e20:	200002a0 	.word	0x200002a0
 8006e24:	20000259 	.word	0x20000259
 8006e28:	20000289 	.word	0x20000289
 8006e2c:	2000028b 	.word	0x2000028b
 8006e30:	2000028a 	.word	0x2000028a
 8006e34:	2000028c 	.word	0x2000028c
 8006e38:	20000274 	.word	0x20000274
 8006e3c:	2000027c 	.word	0x2000027c
 8006e40:	0802a964 	.word	0x0802a964
 8006e44:	08017398 	.word	0x08017398
 8006e48:	200002cc 	.word	0x200002cc
 8006e4c:	080289ec 	.word	0x080289ec
 8006e50:	08017390 	.word	0x08017390

08006e54 <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	460a      	mov	r2, r1
 8006e5e:	80fb      	strh	r3, [r7, #6]
 8006e60:	4613      	mov	r3, r2
 8006e62:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006e64:	88fb      	ldrh	r3, [r7, #6]
 8006e66:	2b3b      	cmp	r3, #59	; 0x3b
 8006e68:	d91a      	bls.n	8006ea0 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 8006e6a:	88fb      	ldrh	r3, [r7, #6]
 8006e6c:	2b50      	cmp	r3, #80	; 0x50
 8006e6e:	d817      	bhi.n	8006ea0 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006e70:	4b68      	ldr	r3, [pc, #416]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 8006e78:	2100      	movs	r1, #0
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	f000 f8cc 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006e80:	e003      	b.n	8006e8a <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006e82:	2101      	movs	r1, #1
 8006e84:	2001      	movs	r0, #1
 8006e86:	f000 f8c7 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006e8a:	4b62      	ldr	r3, [pc, #392]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bf0c      	ite	eq
 8006e92:	2301      	moveq	r3, #1
 8006e94:	2300      	movne	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4b5e      	ldr	r3, [pc, #376]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	e0b4      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	2b59      	cmp	r3, #89	; 0x59
 8006ea4:	d91a      	bls.n	8006edc <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 8006ea6:	88fb      	ldrh	r3, [r7, #6]
 8006ea8:	2b6e      	cmp	r3, #110	; 0x6e
 8006eaa:	d817      	bhi.n	8006edc <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006eac:	4b59      	ldr	r3, [pc, #356]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006eae:	785b      	ldrb	r3, [r3, #1]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	2002      	movs	r0, #2
 8006eb8:	f000 f8ae 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006ebc:	e003      	b.n	8006ec6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	2002      	movs	r0, #2
 8006ec2:	f000 f8a9 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 8006ec6:	4b53      	ldr	r3, [pc, #332]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bf0c      	ite	eq
 8006ece:	2301      	moveq	r3, #1
 8006ed0:	2300      	movne	r3, #0
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4b4f      	ldr	r3, [pc, #316]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ed8:	705a      	strb	r2, [r3, #1]
 8006eda:	e096      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006edc:	88fb      	ldrh	r3, [r7, #6]
 8006ede:	2b77      	cmp	r3, #119	; 0x77
 8006ee0:	d91a      	bls.n	8006f18 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	2b8c      	cmp	r3, #140	; 0x8c
 8006ee6:	d817      	bhi.n	8006f18 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006ee8:	4b4a      	ldr	r3, [pc, #296]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006eea:	789b      	ldrb	r3, [r3, #2]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	2003      	movs	r0, #3
 8006ef4:	f000 f890 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006ef8:	e003      	b.n	8006f02 <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8006efa:	2101      	movs	r1, #1
 8006efc:	2003      	movs	r0, #3
 8006efe:	f000 f88b 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 8006f02:	4b44      	ldr	r3, [pc, #272]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f04:	789b      	ldrb	r3, [r3, #2]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	bf0c      	ite	eq
 8006f0a:	2301      	moveq	r3, #1
 8006f0c:	2300      	movne	r3, #0
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	4b40      	ldr	r3, [pc, #256]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f14:	709a      	strb	r2, [r3, #2]
 8006f16:	e078      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8006f18:	88fb      	ldrh	r3, [r7, #6]
 8006f1a:	2b95      	cmp	r3, #149	; 0x95
 8006f1c:	d91a      	bls.n	8006f54 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	2baa      	cmp	r3, #170	; 0xaa
 8006f22:	d817      	bhi.n	8006f54 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8006f24:	4b3b      	ldr	r3, [pc, #236]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f26:	78db      	ldrb	r3, [r3, #3]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	2004      	movs	r0, #4
 8006f30:	f000 f872 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006f34:	e003      	b.n	8006f3e <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8006f36:	2101      	movs	r1, #1
 8006f38:	2004      	movs	r0, #4
 8006f3a:	f000 f86d 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 8006f3e:	4b35      	ldr	r3, [pc, #212]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f40:	78db      	ldrb	r3, [r3, #3]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	bf0c      	ite	eq
 8006f46:	2301      	moveq	r3, #1
 8006f48:	2300      	movne	r3, #0
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4b31      	ldr	r3, [pc, #196]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f50:	70da      	strb	r2, [r3, #3]
 8006f52:	e05a      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8006f54:	88fb      	ldrh	r3, [r7, #6]
 8006f56:	2bb3      	cmp	r3, #179	; 0xb3
 8006f58:	d91a      	bls.n	8006f90 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	2bc8      	cmp	r3, #200	; 0xc8
 8006f5e:	d817      	bhi.n	8006f90 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006f60:	4b2c      	ldr	r3, [pc, #176]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f62:	791b      	ldrb	r3, [r3, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d004      	beq.n	8006f72 <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 8006f68:	2100      	movs	r1, #0
 8006f6a:	2005      	movs	r0, #5
 8006f6c:	f000 f854 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006f70:	e003      	b.n	8006f7a <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8006f72:	2101      	movs	r1, #1
 8006f74:	2005      	movs	r0, #5
 8006f76:	f000 f84f 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 8006f7a:	4b26      	ldr	r3, [pc, #152]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f7c:	791b      	ldrb	r3, [r3, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bf0c      	ite	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	2300      	movne	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4b22      	ldr	r3, [pc, #136]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f8c:	711a      	strb	r2, [r3, #4]
 8006f8e:	e03c      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006f90:	88fb      	ldrh	r3, [r7, #6]
 8006f92:	2bd1      	cmp	r3, #209	; 0xd1
 8006f94:	d91a      	bls.n	8006fcc <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	2be6      	cmp	r3, #230	; 0xe6
 8006f9a:	d817      	bhi.n	8006fcc <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006f9c:	4b1d      	ldr	r3, [pc, #116]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f9e:	795b      	ldrb	r3, [r3, #5]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d004      	beq.n	8006fae <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	2006      	movs	r0, #6
 8006fa8:	f000 f836 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006fac:	e003      	b.n	8006fb6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006fae:	2101      	movs	r1, #1
 8006fb0:	2006      	movs	r0, #6
 8006fb2:	f000 f831 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 8006fb6:	4b17      	ldr	r3, [pc, #92]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fb8:	795b      	ldrb	r3, [r3, #5]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	4b13      	ldr	r3, [pc, #76]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fc8:	715a      	strb	r2, [r3, #5]
 8006fca:	e01e      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8006fcc:	88fb      	ldrh	r3, [r7, #6]
 8006fce:	2bef      	cmp	r3, #239	; 0xef
 8006fd0:	d91b      	bls.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fd8:	d817      	bhi.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8006fda:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fdc:	799b      	ldrb	r3, [r3, #6]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	2007      	movs	r0, #7
 8006fe6:	f000 f817 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8006fea:	e003      	b.n	8006ff4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8006fec:	2101      	movs	r1, #1
 8006fee:	2007      	movs	r0, #7
 8006ff0:	f000 f812 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 8006ff4:	4b07      	ldr	r3, [pc, #28]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ff6:	799b      	ldrb	r3, [r3, #6]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	bf0c      	ite	eq
 8006ffc:	2301      	moveq	r3, #1
 8006ffe:	2300      	movne	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	4b03      	ldr	r3, [pc, #12]	; (8007014 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007006:	719a      	strb	r2, [r3, #6]
	}
}
 8007008:	e7ff      	b.n	800700a <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 800700a:	bf00      	nop
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000260 	.word	0x20000260

08007018 <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af02      	add	r7, sp, #8
 800701e:	4603      	mov	r3, r0
 8007020:	460a      	mov	r2, r1
 8007022:	71fb      	strb	r3, [r7, #7]
 8007024:	4613      	mov	r3, r2
 8007026:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 8007028:	79fb      	ldrb	r3, [r7, #7]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d11a      	bne.n	8007064 <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 800702e:	79bb      	ldrb	r3, [r7, #6]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10b      	bne.n	800704c <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007034:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	2305      	movs	r3, #5
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	2312      	movs	r3, #18
 8007040:	2212      	movs	r2, #18
 8007042:	2133      	movs	r1, #51	; 0x33
 8007044:	203d      	movs	r0, #61	; 0x3d
 8007046:	f7fa fc40 	bl	80018ca <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 800704a:	e0be      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800704c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007050:	9301      	str	r3, [sp, #4]
 8007052:	2305      	movs	r3, #5
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	2312      	movs	r3, #18
 8007058:	2212      	movs	r2, #18
 800705a:	2133      	movs	r1, #51	; 0x33
 800705c:	203d      	movs	r0, #61	; 0x3d
 800705e:	f7fa fc34 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007062:	e0b2      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	2b02      	cmp	r3, #2
 8007068:	d11a      	bne.n	80070a0 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 800706a:	79bb      	ldrb	r3, [r7, #6]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10b      	bne.n	8007088 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007070:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	2305      	movs	r3, #5
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	2312      	movs	r3, #18
 800707c:	2212      	movs	r2, #18
 800707e:	2133      	movs	r1, #51	; 0x33
 8007080:	205b      	movs	r0, #91	; 0x5b
 8007082:	f7fa fc22 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007086:	e0a0      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007088:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	2305      	movs	r3, #5
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	2312      	movs	r3, #18
 8007094:	2212      	movs	r2, #18
 8007096:	2133      	movs	r1, #51	; 0x33
 8007098:	205b      	movs	r0, #91	; 0x5b
 800709a:	f7fa fc16 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800709e:	e094      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d11a      	bne.n	80070dc <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 80070a6:	79bb      	ldrb	r3, [r7, #6]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070b0:	9301      	str	r3, [sp, #4]
 80070b2:	2305      	movs	r3, #5
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	2312      	movs	r3, #18
 80070b8:	2212      	movs	r2, #18
 80070ba:	2133      	movs	r1, #51	; 0x33
 80070bc:	2079      	movs	r0, #121	; 0x79
 80070be:	f7fa fc04 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80070c2:	e082      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80070c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	2305      	movs	r3, #5
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	2312      	movs	r3, #18
 80070d0:	2212      	movs	r2, #18
 80070d2:	2133      	movs	r1, #51	; 0x33
 80070d4:	2079      	movs	r0, #121	; 0x79
 80070d6:	f7fa fbf8 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80070da:	e076      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d11a      	bne.n	8007118 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 80070e2:	79bb      	ldrb	r3, [r7, #6]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10b      	bne.n	8007100 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	2305      	movs	r3, #5
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	2312      	movs	r3, #18
 80070f4:	2212      	movs	r2, #18
 80070f6:	2133      	movs	r1, #51	; 0x33
 80070f8:	2097      	movs	r0, #151	; 0x97
 80070fa:	f7fa fbe6 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80070fe:	e064      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007100:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	2305      	movs	r3, #5
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	2312      	movs	r3, #18
 800710c:	2212      	movs	r2, #18
 800710e:	2133      	movs	r1, #51	; 0x33
 8007110:	2097      	movs	r0, #151	; 0x97
 8007112:	f7fa fbda 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007116:	e058      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 8007118:	79fb      	ldrb	r3, [r7, #7]
 800711a:	2b05      	cmp	r3, #5
 800711c:	d11a      	bne.n	8007154 <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 800711e:	79bb      	ldrb	r3, [r7, #6]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10b      	bne.n	800713c <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007124:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	2305      	movs	r3, #5
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	2312      	movs	r3, #18
 8007130:	2212      	movs	r2, #18
 8007132:	2133      	movs	r1, #51	; 0x33
 8007134:	20b5      	movs	r0, #181	; 0xb5
 8007136:	f7fa fbc8 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800713a:	e046      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800713c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	2305      	movs	r3, #5
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	2312      	movs	r3, #18
 8007148:	2212      	movs	r2, #18
 800714a:	2133      	movs	r1, #51	; 0x33
 800714c:	20b5      	movs	r0, #181	; 0xb5
 800714e:	f7fa fbbc 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007152:	e03a      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	2b06      	cmp	r3, #6
 8007158:	d11a      	bne.n	8007190 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 800715a:	79bb      	ldrb	r3, [r7, #6]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10b      	bne.n	8007178 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007160:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	2305      	movs	r3, #5
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	2312      	movs	r3, #18
 800716c:	2212      	movs	r2, #18
 800716e:	2133      	movs	r1, #51	; 0x33
 8007170:	20d3      	movs	r0, #211	; 0xd3
 8007172:	f7fa fbaa 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007176:	e028      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007178:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	2305      	movs	r3, #5
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	2312      	movs	r3, #18
 8007184:	2212      	movs	r2, #18
 8007186:	2133      	movs	r1, #51	; 0x33
 8007188:	20d3      	movs	r0, #211	; 0xd3
 800718a:	f7fa fb9e 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800718e:	e01c      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	2b07      	cmp	r3, #7
 8007194:	d119      	bne.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 8007196:	79bb      	ldrb	r3, [r7, #6]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10b      	bne.n	80071b4 <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800719c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	2305      	movs	r3, #5
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	2312      	movs	r3, #18
 80071a8:	2212      	movs	r2, #18
 80071aa:	2133      	movs	r1, #51	; 0x33
 80071ac:	20f1      	movs	r0, #241	; 0xf1
 80071ae:	f7fa fb8c 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80071b2:	e00a      	b.n	80071ca <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80071b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	2305      	movs	r3, #5
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	2312      	movs	r3, #18
 80071c0:	2212      	movs	r2, #18
 80071c2:	2133      	movs	r1, #51	; 0x33
 80071c4:	20f1      	movs	r0, #241	; 0xf1
 80071c6:	f7fa fb80 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80071ca:	bf00      	nop
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af02      	add	r7, sp, #8
 80071d8:	4603      	mov	r3, r0
 80071da:	460a      	mov	r2, r1
 80071dc:	71fb      	strb	r3, [r7, #7]
 80071de:	4613      	mov	r3, r2
 80071e0:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d11a      	bne.n	800721e <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 80071e8:	79bb      	ldrb	r3, [r7, #6]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10b      	bne.n	8007206 <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80071ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071f2:	9301      	str	r3, [sp, #4]
 80071f4:	2305      	movs	r3, #5
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	2312      	movs	r3, #18
 80071fa:	2212      	movs	r2, #18
 80071fc:	21ab      	movs	r1, #171	; 0xab
 80071fe:	2016      	movs	r0, #22
 8007200:	f7fa fb63 	bl	80018ca <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8007204:	e0fc      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007206:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	2305      	movs	r3, #5
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	2312      	movs	r3, #18
 8007212:	2212      	movs	r2, #18
 8007214:	21ab      	movs	r1, #171	; 0xab
 8007216:	2016      	movs	r0, #22
 8007218:	f7fa fb57 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800721c:	e0f0      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d11a      	bne.n	800725a <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 8007224:	79bb      	ldrb	r3, [r7, #6]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10b      	bne.n	8007242 <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800722a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800722e:	9301      	str	r3, [sp, #4]
 8007230:	2305      	movs	r3, #5
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	2312      	movs	r3, #18
 8007236:	2212      	movs	r2, #18
 8007238:	21ab      	movs	r1, #171	; 0xab
 800723a:	2036      	movs	r0, #54	; 0x36
 800723c:	f7fa fb45 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007240:	e0de      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007242:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	2305      	movs	r3, #5
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	2312      	movs	r3, #18
 800724e:	2212      	movs	r2, #18
 8007250:	21ab      	movs	r1, #171	; 0xab
 8007252:	2036      	movs	r0, #54	; 0x36
 8007254:	f7fa fb39 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007258:	e0d2      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 800725a:	79fb      	ldrb	r3, [r7, #7]
 800725c:	2b03      	cmp	r3, #3
 800725e:	d11a      	bne.n	8007296 <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 8007260:	79bb      	ldrb	r3, [r7, #6]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10b      	bne.n	800727e <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007266:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	2305      	movs	r3, #5
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	2312      	movs	r3, #18
 8007272:	2212      	movs	r2, #18
 8007274:	21ab      	movs	r1, #171	; 0xab
 8007276:	2056      	movs	r0, #86	; 0x56
 8007278:	f7fa fb27 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800727c:	e0c0      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800727e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	2305      	movs	r3, #5
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	2312      	movs	r3, #18
 800728a:	2212      	movs	r2, #18
 800728c:	21ab      	movs	r1, #171	; 0xab
 800728e:	2056      	movs	r0, #86	; 0x56
 8007290:	f7fa fb1b 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007294:	e0b4      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	2b04      	cmp	r3, #4
 800729a:	d11a      	bne.n	80072d2 <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 800729c:	79bb      	ldrb	r3, [r7, #6]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10b      	bne.n	80072ba <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80072a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	2305      	movs	r3, #5
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	2312      	movs	r3, #18
 80072ae:	2212      	movs	r2, #18
 80072b0:	21ab      	movs	r1, #171	; 0xab
 80072b2:	2076      	movs	r0, #118	; 0x76
 80072b4:	f7fa fb09 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80072b8:	e0a2      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80072ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	2305      	movs	r3, #5
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	2312      	movs	r3, #18
 80072c6:	2212      	movs	r2, #18
 80072c8:	21ab      	movs	r1, #171	; 0xab
 80072ca:	2076      	movs	r0, #118	; 0x76
 80072cc:	f7fa fafd 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80072d0:	e096      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	2b05      	cmp	r3, #5
 80072d6:	d11a      	bne.n	800730e <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 80072d8:	79bb      	ldrb	r3, [r7, #6]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10b      	bne.n	80072f6 <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80072de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	2305      	movs	r3, #5
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	2312      	movs	r3, #18
 80072ea:	2212      	movs	r2, #18
 80072ec:	21ab      	movs	r1, #171	; 0xab
 80072ee:	2096      	movs	r0, #150	; 0x96
 80072f0:	f7fa faeb 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80072f4:	e084      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80072f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	2305      	movs	r3, #5
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	2312      	movs	r3, #18
 8007302:	2212      	movs	r2, #18
 8007304:	21ab      	movs	r1, #171	; 0xab
 8007306:	2096      	movs	r0, #150	; 0x96
 8007308:	f7fa fadf 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800730c:	e078      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	2b06      	cmp	r3, #6
 8007312:	d11a      	bne.n	800734a <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8007314:	79bb      	ldrb	r3, [r7, #6]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10b      	bne.n	8007332 <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800731a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	2305      	movs	r3, #5
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	2312      	movs	r3, #18
 8007326:	2212      	movs	r2, #18
 8007328:	21ab      	movs	r1, #171	; 0xab
 800732a:	20b6      	movs	r0, #182	; 0xb6
 800732c:	f7fa facd 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007330:	e066      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007332:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	2305      	movs	r3, #5
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	2312      	movs	r3, #18
 800733e:	2212      	movs	r2, #18
 8007340:	21ab      	movs	r1, #171	; 0xab
 8007342:	20b6      	movs	r0, #182	; 0xb6
 8007344:	f7fa fac1 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007348:	e05a      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	2b07      	cmp	r3, #7
 800734e:	d11a      	bne.n	8007386 <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8007350:	79bb      	ldrb	r3, [r7, #6]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10b      	bne.n	800736e <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007356:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	2305      	movs	r3, #5
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	2312      	movs	r3, #18
 8007362:	2212      	movs	r2, #18
 8007364:	21ab      	movs	r1, #171	; 0xab
 8007366:	20d6      	movs	r0, #214	; 0xd6
 8007368:	f7fa faaf 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800736c:	e048      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800736e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	2305      	movs	r3, #5
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	2312      	movs	r3, #18
 800737a:	2212      	movs	r2, #18
 800737c:	21ab      	movs	r1, #171	; 0xab
 800737e:	20d6      	movs	r0, #214	; 0xd6
 8007380:	f7fa faa3 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007384:	e03c      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 8007386:	79fb      	ldrb	r3, [r7, #7]
 8007388:	2b08      	cmp	r3, #8
 800738a:	d11a      	bne.n	80073c2 <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 800738c:	79bb      	ldrb	r3, [r7, #6]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10b      	bne.n	80073aa <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007392:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	2305      	movs	r3, #5
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	2312      	movs	r3, #18
 800739e:	2212      	movs	r2, #18
 80073a0:	21ab      	movs	r1, #171	; 0xab
 80073a2:	20f6      	movs	r0, #246	; 0xf6
 80073a4:	f7fa fa91 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80073a8:	e02a      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80073aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	2305      	movs	r3, #5
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2312      	movs	r3, #18
 80073b6:	2212      	movs	r2, #18
 80073b8:	21ab      	movs	r1, #171	; 0xab
 80073ba:	20f6      	movs	r0, #246	; 0xf6
 80073bc:	f7fa fa85 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80073c0:	e01e      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	2b09      	cmp	r3, #9
 80073c6:	d11b      	bne.n	8007400 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 80073c8:	79bb      	ldrb	r3, [r7, #6]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10c      	bne.n	80073e8 <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80073ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	2305      	movs	r3, #5
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	2312      	movs	r3, #18
 80073da:	2212      	movs	r2, #18
 80073dc:	21ab      	movs	r1, #171	; 0xab
 80073de:	f44f 708b 	mov.w	r0, #278	; 0x116
 80073e2:	f7fa fa72 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80073e6:	e00b      	b.n	8007400 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80073e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	2305      	movs	r3, #5
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	2312      	movs	r3, #18
 80073f4:	2212      	movs	r2, #18
 80073f6:	21ab      	movs	r1, #171	; 0xab
 80073f8:	f44f 708b 	mov.w	r0, #278	; 0x116
 80073fc:	f7fa fa65 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007400:	bf00      	nop
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <schedule1HourOnIncrease>:

//
// Functions to change on screen hour and minute ON/OFF  1 schedule
void schedule1HourOnIncrease(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af02      	add	r7, sp, #8
	if(hourOnSchedule1 < 24)
 800740e:	4b17      	ldr	r3, [pc, #92]	; (800746c <schedule1HourOnIncrease+0x64>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b17      	cmp	r3, #23
 8007414:	d806      	bhi.n	8007424 <schedule1HourOnIncrease+0x1c>
	{
		hourOnSchedule1++;
 8007416:	4b15      	ldr	r3, [pc, #84]	; (800746c <schedule1HourOnIncrease+0x64>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	3301      	adds	r3, #1
 800741c:	b2da      	uxtb	r2, r3
 800741e:	4b13      	ldr	r3, [pc, #76]	; (800746c <schedule1HourOnIncrease+0x64>)
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e002      	b.n	800742a <schedule1HourOnIncrease+0x22>
	}
	else
	{
		hourOnSchedule1 = 1;
 8007424:	4b11      	ldr	r3, [pc, #68]	; (800746c <schedule1HourOnIncrease+0x64>)
 8007426:	2201      	movs	r2, #1
 8007428:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 800742a:	4b10      	ldr	r3, [pc, #64]	; (800746c <schedule1HourOnIncrease+0x64>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b09      	cmp	r3, #9
 8007430:	d907      	bls.n	8007442 <schedule1HourOnIncrease+0x3a>
 8007432:	4b0e      	ldr	r3, [pc, #56]	; (800746c <schedule1HourOnIncrease+0x64>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	490d      	ldr	r1, [pc, #52]	; (8007470 <schedule1HourOnIncrease+0x68>)
 800743a:	480e      	ldr	r0, [pc, #56]	; (8007474 <schedule1HourOnIncrease+0x6c>)
 800743c:	f00b fe60 	bl	8013100 <siprintf>
 8007440:	e006      	b.n	8007450 <schedule1HourOnIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 8007442:	4b0a      	ldr	r3, [pc, #40]	; (800746c <schedule1HourOnIncrease+0x64>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	490b      	ldr	r1, [pc, #44]	; (8007478 <schedule1HourOnIncrease+0x70>)
 800744a:	480a      	ldr	r0, [pc, #40]	; (8007474 <schedule1HourOnIncrease+0x6c>)
 800744c:	f00b fe58 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007450:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007454:	9301      	str	r3, [sp, #4]
 8007456:	2301      	movs	r3, #1
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	2300      	movs	r3, #0
 800745c:	2264      	movs	r2, #100	; 0x64
 800745e:	2150      	movs	r1, #80	; 0x50
 8007460:	4804      	ldr	r0, [pc, #16]	; (8007474 <schedule1HourOnIncrease+0x6c>)
 8007462:	f7fa fc9d 	bl	8001da0 <EF_PutString>
}
 8007466:	bf00      	nop
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20000285 	.word	0x20000285
 8007470:	080173b0 	.word	0x080173b0
 8007474:	200002cc 	.word	0x200002cc
 8007478:	080173b8 	.word	0x080173b8

0800747c <schedule1HourOnDecrease>:
void schedule1HourOnDecrease(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af02      	add	r7, sp, #8
	if(hourOnSchedule1 > 1)
 8007482:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <schedule1HourOnDecrease+0x64>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d906      	bls.n	8007498 <schedule1HourOnDecrease+0x1c>
	{
		hourOnSchedule1--;
 800748a:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <schedule1HourOnDecrease+0x64>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	3b01      	subs	r3, #1
 8007490:	b2da      	uxtb	r2, r3
 8007492:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <schedule1HourOnDecrease+0x64>)
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	e002      	b.n	800749e <schedule1HourOnDecrease+0x22>
	}
	else
	{
		hourOnSchedule1 = 24;
 8007498:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <schedule1HourOnDecrease+0x64>)
 800749a:	2218      	movs	r2, #24
 800749c:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 800749e:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <schedule1HourOnDecrease+0x64>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b09      	cmp	r3, #9
 80074a4:	d907      	bls.n	80074b6 <schedule1HourOnDecrease+0x3a>
 80074a6:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <schedule1HourOnDecrease+0x64>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	490d      	ldr	r1, [pc, #52]	; (80074e4 <schedule1HourOnDecrease+0x68>)
 80074ae:	480e      	ldr	r0, [pc, #56]	; (80074e8 <schedule1HourOnDecrease+0x6c>)
 80074b0:	f00b fe26 	bl	8013100 <siprintf>
 80074b4:	e006      	b.n	80074c4 <schedule1HourOnDecrease+0x48>
	else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 80074b6:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <schedule1HourOnDecrease+0x64>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	490b      	ldr	r1, [pc, #44]	; (80074ec <schedule1HourOnDecrease+0x70>)
 80074be:	480a      	ldr	r0, [pc, #40]	; (80074e8 <schedule1HourOnDecrease+0x6c>)
 80074c0:	f00b fe1e 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80074c4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	2301      	movs	r3, #1
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2300      	movs	r3, #0
 80074d0:	2264      	movs	r2, #100	; 0x64
 80074d2:	2150      	movs	r1, #80	; 0x50
 80074d4:	4804      	ldr	r0, [pc, #16]	; (80074e8 <schedule1HourOnDecrease+0x6c>)
 80074d6:	f7fa fc63 	bl	8001da0 <EF_PutString>
}
 80074da:	bf00      	nop
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000285 	.word	0x20000285
 80074e4:	080173b0 	.word	0x080173b0
 80074e8:	200002cc 	.word	0x200002cc
 80074ec:	080173b8 	.word	0x080173b8

080074f0 <schedule1MinuteOnIncrease>:
void schedule1MinuteOnIncrease(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af02      	add	r7, sp, #8
	if(minuteOnSchedule1 < 59)
 80074f6:	4b17      	ldr	r3, [pc, #92]	; (8007554 <schedule1MinuteOnIncrease+0x64>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b3a      	cmp	r3, #58	; 0x3a
 80074fc:	d806      	bhi.n	800750c <schedule1MinuteOnIncrease+0x1c>
	{
		minuteOnSchedule1++;
 80074fe:	4b15      	ldr	r3, [pc, #84]	; (8007554 <schedule1MinuteOnIncrease+0x64>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	3301      	adds	r3, #1
 8007504:	b2da      	uxtb	r2, r3
 8007506:	4b13      	ldr	r3, [pc, #76]	; (8007554 <schedule1MinuteOnIncrease+0x64>)
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	e002      	b.n	8007512 <schedule1MinuteOnIncrease+0x22>
	}
	else
	{
		minuteOnSchedule1 = 0;
 800750c:	4b11      	ldr	r3, [pc, #68]	; (8007554 <schedule1MinuteOnIncrease+0x64>)
 800750e:	2200      	movs	r2, #0
 8007510:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8007512:	4b10      	ldr	r3, [pc, #64]	; (8007554 <schedule1MinuteOnIncrease+0x64>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b09      	cmp	r3, #9
 8007518:	d907      	bls.n	800752a <schedule1MinuteOnIncrease+0x3a>
 800751a:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <schedule1MinuteOnIncrease+0x64>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	490d      	ldr	r1, [pc, #52]	; (8007558 <schedule1MinuteOnIncrease+0x68>)
 8007522:	480e      	ldr	r0, [pc, #56]	; (800755c <schedule1MinuteOnIncrease+0x6c>)
 8007524:	f00b fdec 	bl	8013100 <siprintf>
 8007528:	e006      	b.n	8007538 <schedule1MinuteOnIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 800752a:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <schedule1MinuteOnIncrease+0x64>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	490b      	ldr	r1, [pc, #44]	; (8007560 <schedule1MinuteOnIncrease+0x70>)
 8007532:	480a      	ldr	r0, [pc, #40]	; (800755c <schedule1MinuteOnIncrease+0x6c>)
 8007534:	f00b fde4 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007538:	f24c 6318 	movw	r3, #50712	; 0xc618
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	2301      	movs	r3, #1
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	2300      	movs	r3, #0
 8007544:	2264      	movs	r2, #100	; 0x64
 8007546:	218a      	movs	r1, #138	; 0x8a
 8007548:	4804      	ldr	r0, [pc, #16]	; (800755c <schedule1MinuteOnIncrease+0x6c>)
 800754a:	f7fa fc29 	bl	8001da0 <EF_PutString>
}
 800754e:	bf00      	nop
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	20000287 	.word	0x20000287
 8007558:	080173b0 	.word	0x080173b0
 800755c:	200002cc 	.word	0x200002cc
 8007560:	080173b8 	.word	0x080173b8

08007564 <schedule1MinuteOnDecrease>:
void schedule1MinuteOnDecrease(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af02      	add	r7, sp, #8
	if(minuteOnSchedule1 > 0)
 800756a:	4b17      	ldr	r3, [pc, #92]	; (80075c8 <schedule1MinuteOnDecrease+0x64>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d006      	beq.n	8007580 <schedule1MinuteOnDecrease+0x1c>
	{
		minuteOnSchedule1--;
 8007572:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <schedule1MinuteOnDecrease+0x64>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	3b01      	subs	r3, #1
 8007578:	b2da      	uxtb	r2, r3
 800757a:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <schedule1MinuteOnDecrease+0x64>)
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	e002      	b.n	8007586 <schedule1MinuteOnDecrease+0x22>
	}
	else
	{
		minuteOnSchedule1 = 59;
 8007580:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <schedule1MinuteOnDecrease+0x64>)
 8007582:	223b      	movs	r2, #59	; 0x3b
 8007584:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8007586:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <schedule1MinuteOnDecrease+0x64>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b09      	cmp	r3, #9
 800758c:	d907      	bls.n	800759e <schedule1MinuteOnDecrease+0x3a>
 800758e:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <schedule1MinuteOnDecrease+0x64>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	490d      	ldr	r1, [pc, #52]	; (80075cc <schedule1MinuteOnDecrease+0x68>)
 8007596:	480e      	ldr	r0, [pc, #56]	; (80075d0 <schedule1MinuteOnDecrease+0x6c>)
 8007598:	f00b fdb2 	bl	8013100 <siprintf>
 800759c:	e006      	b.n	80075ac <schedule1MinuteOnDecrease+0x48>
	else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 800759e:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <schedule1MinuteOnDecrease+0x64>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	490b      	ldr	r1, [pc, #44]	; (80075d4 <schedule1MinuteOnDecrease+0x70>)
 80075a6:	480a      	ldr	r0, [pc, #40]	; (80075d0 <schedule1MinuteOnDecrease+0x6c>)
 80075a8:	f00b fdaa 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80075ac:	f24c 6318 	movw	r3, #50712	; 0xc618
 80075b0:	9301      	str	r3, [sp, #4]
 80075b2:	2301      	movs	r3, #1
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	2300      	movs	r3, #0
 80075b8:	2264      	movs	r2, #100	; 0x64
 80075ba:	218a      	movs	r1, #138	; 0x8a
 80075bc:	4804      	ldr	r0, [pc, #16]	; (80075d0 <schedule1MinuteOnDecrease+0x6c>)
 80075be:	f7fa fbef 	bl	8001da0 <EF_PutString>
}
 80075c2:	bf00      	nop
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000287 	.word	0x20000287
 80075cc:	080173b0 	.word	0x080173b0
 80075d0:	200002cc 	.word	0x200002cc
 80075d4:	080173b8 	.word	0x080173b8

080075d8 <schedule1HourOffIncrease>:

void schedule1HourOffIncrease(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af02      	add	r7, sp, #8
	if(hourOffSchedule1 < 24)
 80075de:	4b17      	ldr	r3, [pc, #92]	; (800763c <schedule1HourOffIncrease+0x64>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b17      	cmp	r3, #23
 80075e4:	d806      	bhi.n	80075f4 <schedule1HourOffIncrease+0x1c>
	{
		hourOffSchedule1++;
 80075e6:	4b15      	ldr	r3, [pc, #84]	; (800763c <schedule1HourOffIncrease+0x64>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	4b13      	ldr	r3, [pc, #76]	; (800763c <schedule1HourOffIncrease+0x64>)
 80075f0:	701a      	strb	r2, [r3, #0]
 80075f2:	e002      	b.n	80075fa <schedule1HourOffIncrease+0x22>
	}
	else
	{
		hourOffSchedule1 = 1;
 80075f4:	4b11      	ldr	r3, [pc, #68]	; (800763c <schedule1HourOffIncrease+0x64>)
 80075f6:	2201      	movs	r2, #1
 80075f8:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 80075fa:	4b10      	ldr	r3, [pc, #64]	; (800763c <schedule1HourOffIncrease+0x64>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b09      	cmp	r3, #9
 8007600:	d907      	bls.n	8007612 <schedule1HourOffIncrease+0x3a>
 8007602:	4b0e      	ldr	r3, [pc, #56]	; (800763c <schedule1HourOffIncrease+0x64>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	490d      	ldr	r1, [pc, #52]	; (8007640 <schedule1HourOffIncrease+0x68>)
 800760a:	480e      	ldr	r0, [pc, #56]	; (8007644 <schedule1HourOffIncrease+0x6c>)
 800760c:	f00b fd78 	bl	8013100 <siprintf>
 8007610:	e006      	b.n	8007620 <schedule1HourOffIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 8007612:	4b0a      	ldr	r3, [pc, #40]	; (800763c <schedule1HourOffIncrease+0x64>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	490b      	ldr	r1, [pc, #44]	; (8007648 <schedule1HourOffIncrease+0x70>)
 800761a:	480a      	ldr	r0, [pc, #40]	; (8007644 <schedule1HourOffIncrease+0x6c>)
 800761c:	f00b fd70 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007620:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007624:	9301      	str	r3, [sp, #4]
 8007626:	2301      	movs	r3, #1
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	2300      	movs	r3, #0
 800762c:	2287      	movs	r2, #135	; 0x87
 800762e:	214e      	movs	r1, #78	; 0x4e
 8007630:	4804      	ldr	r0, [pc, #16]	; (8007644 <schedule1HourOffIncrease+0x6c>)
 8007632:	f7fa fbb5 	bl	8001da0 <EF_PutString>
}
 8007636:	bf00      	nop
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000286 	.word	0x20000286
 8007640:	080173b0 	.word	0x080173b0
 8007644:	200002cc 	.word	0x200002cc
 8007648:	080173b8 	.word	0x080173b8

0800764c <schedule1HourOffDecrease>:
void schedule1HourOffDecrease(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af02      	add	r7, sp, #8
	if(hourOffSchedule1 > 1)
 8007652:	4b17      	ldr	r3, [pc, #92]	; (80076b0 <schedule1HourOffDecrease+0x64>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d906      	bls.n	8007668 <schedule1HourOffDecrease+0x1c>
	{
		hourOffSchedule1--;
 800765a:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <schedule1HourOffDecrease+0x64>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	3b01      	subs	r3, #1
 8007660:	b2da      	uxtb	r2, r3
 8007662:	4b13      	ldr	r3, [pc, #76]	; (80076b0 <schedule1HourOffDecrease+0x64>)
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	e002      	b.n	800766e <schedule1HourOffDecrease+0x22>
	}
	else
	{
		hourOffSchedule1 = 24;
 8007668:	4b11      	ldr	r3, [pc, #68]	; (80076b0 <schedule1HourOffDecrease+0x64>)
 800766a:	2218      	movs	r2, #24
 800766c:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 800766e:	4b10      	ldr	r3, [pc, #64]	; (80076b0 <schedule1HourOffDecrease+0x64>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b09      	cmp	r3, #9
 8007674:	d907      	bls.n	8007686 <schedule1HourOffDecrease+0x3a>
 8007676:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <schedule1HourOffDecrease+0x64>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	490d      	ldr	r1, [pc, #52]	; (80076b4 <schedule1HourOffDecrease+0x68>)
 800767e:	480e      	ldr	r0, [pc, #56]	; (80076b8 <schedule1HourOffDecrease+0x6c>)
 8007680:	f00b fd3e 	bl	8013100 <siprintf>
 8007684:	e006      	b.n	8007694 <schedule1HourOffDecrease+0x48>
	else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 8007686:	4b0a      	ldr	r3, [pc, #40]	; (80076b0 <schedule1HourOffDecrease+0x64>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	490b      	ldr	r1, [pc, #44]	; (80076bc <schedule1HourOffDecrease+0x70>)
 800768e:	480a      	ldr	r0, [pc, #40]	; (80076b8 <schedule1HourOffDecrease+0x6c>)
 8007690:	f00b fd36 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007694:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	2301      	movs	r3, #1
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	2300      	movs	r3, #0
 80076a0:	2287      	movs	r2, #135	; 0x87
 80076a2:	214e      	movs	r1, #78	; 0x4e
 80076a4:	4804      	ldr	r0, [pc, #16]	; (80076b8 <schedule1HourOffDecrease+0x6c>)
 80076a6:	f7fa fb7b 	bl	8001da0 <EF_PutString>
}
 80076aa:	bf00      	nop
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20000286 	.word	0x20000286
 80076b4:	080173b0 	.word	0x080173b0
 80076b8:	200002cc 	.word	0x200002cc
 80076bc:	080173b8 	.word	0x080173b8

080076c0 <schedule1MinuteOffIncrease>:
void schedule1MinuteOffIncrease(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af02      	add	r7, sp, #8
	if(minuteOffSchedule1 < 59)
 80076c6:	4b17      	ldr	r3, [pc, #92]	; (8007724 <schedule1MinuteOffIncrease+0x64>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b3a      	cmp	r3, #58	; 0x3a
 80076cc:	d806      	bhi.n	80076dc <schedule1MinuteOffIncrease+0x1c>
	{
		minuteOffSchedule1++;
 80076ce:	4b15      	ldr	r3, [pc, #84]	; (8007724 <schedule1MinuteOffIncrease+0x64>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	4b13      	ldr	r3, [pc, #76]	; (8007724 <schedule1MinuteOffIncrease+0x64>)
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	e002      	b.n	80076e2 <schedule1MinuteOffIncrease+0x22>
	}
	else
	{
		minuteOffSchedule1 = 0;
 80076dc:	4b11      	ldr	r3, [pc, #68]	; (8007724 <schedule1MinuteOffIncrease+0x64>)
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 80076e2:	4b10      	ldr	r3, [pc, #64]	; (8007724 <schedule1MinuteOffIncrease+0x64>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b09      	cmp	r3, #9
 80076e8:	d907      	bls.n	80076fa <schedule1MinuteOffIncrease+0x3a>
 80076ea:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <schedule1MinuteOffIncrease+0x64>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	490d      	ldr	r1, [pc, #52]	; (8007728 <schedule1MinuteOffIncrease+0x68>)
 80076f2:	480e      	ldr	r0, [pc, #56]	; (800772c <schedule1MinuteOffIncrease+0x6c>)
 80076f4:	f00b fd04 	bl	8013100 <siprintf>
 80076f8:	e006      	b.n	8007708 <schedule1MinuteOffIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 80076fa:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <schedule1MinuteOffIncrease+0x64>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	490b      	ldr	r1, [pc, #44]	; (8007730 <schedule1MinuteOffIncrease+0x70>)
 8007702:	480a      	ldr	r0, [pc, #40]	; (800772c <schedule1MinuteOffIncrease+0x6c>)
 8007704:	f00b fcfc 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007708:	f24c 6318 	movw	r3, #50712	; 0xc618
 800770c:	9301      	str	r3, [sp, #4]
 800770e:	2301      	movs	r3, #1
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	2300      	movs	r3, #0
 8007714:	2287      	movs	r2, #135	; 0x87
 8007716:	218a      	movs	r1, #138	; 0x8a
 8007718:	4804      	ldr	r0, [pc, #16]	; (800772c <schedule1MinuteOffIncrease+0x6c>)
 800771a:	f7fa fb41 	bl	8001da0 <EF_PutString>
}
 800771e:	bf00      	nop
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20000288 	.word	0x20000288
 8007728:	080173b0 	.word	0x080173b0
 800772c:	200002cc 	.word	0x200002cc
 8007730:	080173b8 	.word	0x080173b8

08007734 <schedule1MinuteOffDecrease>:
void schedule1MinuteOffDecrease(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af02      	add	r7, sp, #8
	if(minuteOffSchedule1 > 0)
 800773a:	4b17      	ldr	r3, [pc, #92]	; (8007798 <schedule1MinuteOffDecrease+0x64>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d006      	beq.n	8007750 <schedule1MinuteOffDecrease+0x1c>
	{
		minuteOffSchedule1--;
 8007742:	4b15      	ldr	r3, [pc, #84]	; (8007798 <schedule1MinuteOffDecrease+0x64>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	3b01      	subs	r3, #1
 8007748:	b2da      	uxtb	r2, r3
 800774a:	4b13      	ldr	r3, [pc, #76]	; (8007798 <schedule1MinuteOffDecrease+0x64>)
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	e002      	b.n	8007756 <schedule1MinuteOffDecrease+0x22>
	}
	else
	{
		minuteOffSchedule1 = 59;
 8007750:	4b11      	ldr	r3, [pc, #68]	; (8007798 <schedule1MinuteOffDecrease+0x64>)
 8007752:	223b      	movs	r2, #59	; 0x3b
 8007754:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8007756:	4b10      	ldr	r3, [pc, #64]	; (8007798 <schedule1MinuteOffDecrease+0x64>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b09      	cmp	r3, #9
 800775c:	d907      	bls.n	800776e <schedule1MinuteOffDecrease+0x3a>
 800775e:	4b0e      	ldr	r3, [pc, #56]	; (8007798 <schedule1MinuteOffDecrease+0x64>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	461a      	mov	r2, r3
 8007764:	490d      	ldr	r1, [pc, #52]	; (800779c <schedule1MinuteOffDecrease+0x68>)
 8007766:	480e      	ldr	r0, [pc, #56]	; (80077a0 <schedule1MinuteOffDecrease+0x6c>)
 8007768:	f00b fcca 	bl	8013100 <siprintf>
 800776c:	e006      	b.n	800777c <schedule1MinuteOffDecrease+0x48>
	else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 800776e:	4b0a      	ldr	r3, [pc, #40]	; (8007798 <schedule1MinuteOffDecrease+0x64>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	490b      	ldr	r1, [pc, #44]	; (80077a4 <schedule1MinuteOffDecrease+0x70>)
 8007776:	480a      	ldr	r0, [pc, #40]	; (80077a0 <schedule1MinuteOffDecrease+0x6c>)
 8007778:	f00b fcc2 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800777c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007780:	9301      	str	r3, [sp, #4]
 8007782:	2301      	movs	r3, #1
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	2300      	movs	r3, #0
 8007788:	2287      	movs	r2, #135	; 0x87
 800778a:	218a      	movs	r1, #138	; 0x8a
 800778c:	4804      	ldr	r0, [pc, #16]	; (80077a0 <schedule1MinuteOffDecrease+0x6c>)
 800778e:	f7fa fb07 	bl	8001da0 <EF_PutString>
}
 8007792:	bf00      	nop
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20000288 	.word	0x20000288
 800779c:	080173b0 	.word	0x080173b0
 80077a0:	200002cc 	.word	0x200002cc
 80077a4:	080173b8 	.word	0x080173b8

080077a8 <MenuTFTSchedule1ActivityHourMinuteONAdd>:


//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	4603      	mov	r3, r0
 80077b0:	460a      	mov	r2, r1
 80077b2:	80fb      	strh	r3, [r7, #6]
 80077b4:	4613      	mov	r3, r2
 80077b6:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80077b8:	4833      	ldr	r0, [pc, #204]	; (8007888 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe0>)
 80077ba:	f7fa f8d7 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	2bba      	cmp	r3, #186	; 0xba
 80077c2:	d908      	bls.n	80077d6 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x2e>
 80077c4:	88fb      	ldrh	r3, [r7, #6]
 80077c6:	2bdd      	cmp	r3, #221	; 0xdd
 80077c8:	d805      	bhi.n	80077d6 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x2e>
	{
		EncoderState = ENCODER_SCHEDULE_1_HOUR_ON;
 80077ca:	4b30      	ldr	r3, [pc, #192]	; (800788c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>)
 80077cc:	2206      	movs	r2, #6
 80077ce:	701a      	strb	r2, [r3, #0]
		schedule1HourOnIncrease();
 80077d0:	f7ff fe1a 	bl	8007408 <schedule1HourOnIncrease>
 80077d4:	e054      	b.n	8007880 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>

	}

	// Check if it is Minute to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	2be8      	cmp	r3, #232	; 0xe8
 80077da:	d909      	bls.n	80077f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x48>
 80077dc:	88fb      	ldrh	r3, [r7, #6]
 80077de:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80077e2:	d205      	bcs.n	80077f0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x48>
	{
		schedule1MinuteOnIncrease();
 80077e4:	f7ff fe84 	bl	80074f0 <schedule1MinuteOnIncrease>
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_ON;
 80077e8:	4b28      	ldr	r3, [pc, #160]	; (800788c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>)
 80077ea:	2208      	movs	r2, #8
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	e047      	b.n	8007880 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80077f0:	88fb      	ldrh	r3, [r7, #6]
 80077f2:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80077f6:	d943      	bls.n	8007880 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
 80077f8:	88fb      	ldrh	r3, [r7, #6]
 80077fa:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80077fe:	d23f      	bcs.n	8007880 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_ON;
 8007800:	4b22      	ldr	r3, [pc, #136]	; (800788c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>)
 8007802:	2208      	movs	r2, #8
 8007804:	701a      	strb	r2, [r3, #0]
		if(minuteOnSchedule1 < 49)
 8007806:	4b22      	ldr	r3, [pc, #136]	; (8007890 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b30      	cmp	r3, #48	; 0x30
 800780c:	d806      	bhi.n	800781c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x74>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 800780e:	4b20      	ldr	r3, [pc, #128]	; (8007890 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	330a      	adds	r3, #10
 8007814:	b2da      	uxtb	r2, r3
 8007816:	4b1e      	ldr	r3, [pc, #120]	; (8007890 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	e012      	b.n	8007842 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x9a>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 800781c:	4b1c      	ldr	r3, [pc, #112]	; (8007890 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	f103 020a 	add.w	r2, r3, #10
 8007824:	4b1b      	ldr	r3, [pc, #108]	; (8007894 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xec>)
 8007826:	fb83 1302 	smull	r1, r3, r3, r2
 800782a:	4413      	add	r3, r2
 800782c:	1159      	asrs	r1, r3, #5
 800782e:	17d3      	asrs	r3, r2, #31
 8007830:	1ac9      	subs	r1, r1, r3
 8007832:	460b      	mov	r3, r1
 8007834:	011b      	lsls	r3, r3, #4
 8007836:	1a5b      	subs	r3, r3, r1
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	1ad1      	subs	r1, r2, r3
 800783c:	b2ca      	uxtb	r2, r1
 800783e:	4b14      	ldr	r3, [pc, #80]	; (8007890 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007840:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8007842:	4b13      	ldr	r3, [pc, #76]	; (8007890 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b09      	cmp	r3, #9
 8007848:	d907      	bls.n	800785a <MenuTFTSchedule1ActivityHourMinuteONAdd+0xb2>
 800784a:	4b11      	ldr	r3, [pc, #68]	; (8007890 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	4911      	ldr	r1, [pc, #68]	; (8007898 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf0>)
 8007852:	4812      	ldr	r0, [pc, #72]	; (800789c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf4>)
 8007854:	f00b fc54 	bl	8013100 <siprintf>
 8007858:	e006      	b.n	8007868 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xc0>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 800785a:	4b0d      	ldr	r3, [pc, #52]	; (8007890 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	490f      	ldr	r1, [pc, #60]	; (80078a0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf8>)
 8007862:	480e      	ldr	r0, [pc, #56]	; (800789c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf4>)
 8007864:	f00b fc4c 	bl	8013100 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007868:	f24c 6318 	movw	r3, #50712	; 0xc618
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	2301      	movs	r3, #1
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	2300      	movs	r3, #0
 8007874:	2264      	movs	r2, #100	; 0x64
 8007876:	218a      	movs	r1, #138	; 0x8a
 8007878:	4808      	ldr	r0, [pc, #32]	; (800789c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf4>)
 800787a:	f7fa fa91 	bl	8001da0 <EF_PutString>
	}
}
 800787e:	e7ff      	b.n	8007880 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	0802a964 	.word	0x0802a964
 800788c:	200002a1 	.word	0x200002a1
 8007890:	20000287 	.word	0x20000287
 8007894:	88888889 	.word	0x88888889
 8007898:	080173b0 	.word	0x080173b0
 800789c:	200002cc 	.word	0x200002cc
 80078a0:	080173b8 	.word	0x080173b8

080078a4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	4603      	mov	r3, r0
 80078ac:	460a      	mov	r2, r1
 80078ae:	80fb      	strh	r3, [r7, #6]
 80078b0:	4613      	mov	r3, r2
 80078b2:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80078b4:	4833      	ldr	r0, [pc, #204]	; (8007984 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe0>)
 80078b6:	f7fa f859 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80078ba:	88fb      	ldrh	r3, [r7, #6]
 80078bc:	2bba      	cmp	r3, #186	; 0xba
 80078be:	d908      	bls.n	80078d2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x2e>
 80078c0:	88fb      	ldrh	r3, [r7, #6]
 80078c2:	2bdd      	cmp	r3, #221	; 0xdd
 80078c4:	d805      	bhi.n	80078d2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x2e>
	{
		schedule1HourOffIncrease();
 80078c6:	f7ff fe87 	bl	80075d8 <schedule1HourOffIncrease>
		EncoderState = ENCODER_SCHEDULE_1_HOUR_OFF;
 80078ca:	4b2f      	ldr	r3, [pc, #188]	; (8007988 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>)
 80078cc:	2207      	movs	r2, #7
 80078ce:	701a      	strb	r2, [r3, #0]
 80078d0:	e054      	b.n	800797c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>

	}

	// Check if it is Minute to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	2be8      	cmp	r3, #232	; 0xe8
 80078d6:	d909      	bls.n	80078ec <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x48>
 80078d8:	88fb      	ldrh	r3, [r7, #6]
 80078da:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80078de:	d205      	bcs.n	80078ec <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x48>
	{
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_OFF;
 80078e0:	4b29      	ldr	r3, [pc, #164]	; (8007988 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>)
 80078e2:	2209      	movs	r2, #9
 80078e4:	701a      	strb	r2, [r3, #0]
		schedule1MinuteOffIncrease();
 80078e6:	f7ff feeb 	bl	80076c0 <schedule1MinuteOffIncrease>
 80078ea:	e047      	b.n	800797c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>

	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80078ec:	88fb      	ldrh	r3, [r7, #6]
 80078ee:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80078f2:	d943      	bls.n	800797c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>
 80078f4:	88fb      	ldrh	r3, [r7, #6]
 80078f6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80078fa:	d23f      	bcs.n	800797c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_OFF;
 80078fc:	4b22      	ldr	r3, [pc, #136]	; (8007988 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>)
 80078fe:	2209      	movs	r2, #9
 8007900:	701a      	strb	r2, [r3, #0]
		if(minuteOffSchedule1 < 49)
 8007902:	4b22      	ldr	r3, [pc, #136]	; (800798c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	2b30      	cmp	r3, #48	; 0x30
 8007908:	d806      	bhi.n	8007918 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x74>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 800790a:	4b20      	ldr	r3, [pc, #128]	; (800798c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	330a      	adds	r3, #10
 8007910:	b2da      	uxtb	r2, r3
 8007912:	4b1e      	ldr	r3, [pc, #120]	; (800798c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	e012      	b.n	800793e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x9a>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8007918:	4b1c      	ldr	r3, [pc, #112]	; (800798c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	f103 020a 	add.w	r2, r3, #10
 8007920:	4b1b      	ldr	r3, [pc, #108]	; (8007990 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xec>)
 8007922:	fb83 1302 	smull	r1, r3, r3, r2
 8007926:	4413      	add	r3, r2
 8007928:	1159      	asrs	r1, r3, #5
 800792a:	17d3      	asrs	r3, r2, #31
 800792c:	1ac9      	subs	r1, r1, r3
 800792e:	460b      	mov	r3, r1
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	1a5b      	subs	r3, r3, r1
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	1ad1      	subs	r1, r2, r3
 8007938:	b2ca      	uxtb	r2, r1
 800793a:	4b14      	ldr	r3, [pc, #80]	; (800798c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 800793c:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 800793e:	4b13      	ldr	r3, [pc, #76]	; (800798c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b09      	cmp	r3, #9
 8007944:	d907      	bls.n	8007956 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xb2>
 8007946:	4b11      	ldr	r3, [pc, #68]	; (800798c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	4911      	ldr	r1, [pc, #68]	; (8007994 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf0>)
 800794e:	4812      	ldr	r0, [pc, #72]	; (8007998 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf4>)
 8007950:	f00b fbd6 	bl	8013100 <siprintf>
 8007954:	e006      	b.n	8007964 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xc0>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8007956:	4b0d      	ldr	r3, [pc, #52]	; (800798c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	490f      	ldr	r1, [pc, #60]	; (800799c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf8>)
 800795e:	480e      	ldr	r0, [pc, #56]	; (8007998 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf4>)
 8007960:	f00b fbce 	bl	8013100 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007964:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	2301      	movs	r3, #1
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	2300      	movs	r3, #0
 8007970:	2287      	movs	r2, #135	; 0x87
 8007972:	218a      	movs	r1, #138	; 0x8a
 8007974:	4808      	ldr	r0, [pc, #32]	; (8007998 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf4>)
 8007976:	f7fa fa13 	bl	8001da0 <EF_PutString>
	}
}
 800797a:	e7ff      	b.n	800797c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	0802a964 	.word	0x0802a964
 8007988:	200002a1 	.word	0x200002a1
 800798c:	20000288 	.word	0x20000288
 8007990:	88888889 	.word	0x88888889
 8007994:	080173b0 	.word	0x080173b0
 8007998:	200002cc 	.word	0x200002cc
 800799c:	080173b8 	.word	0x080173b8

080079a0 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4603      	mov	r3, r0
 80079a8:	460a      	mov	r2, r1
 80079aa:	80fb      	strh	r3, [r7, #6]
 80079ac:	4613      	mov	r3, r2
 80079ae:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80079b0:	88fb      	ldrh	r3, [r7, #6]
 80079b2:	2b3b      	cmp	r3, #59	; 0x3b
 80079b4:	d91a      	bls.n	80079ec <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	2b50      	cmp	r3, #80	; 0x50
 80079ba:	d817      	bhi.n	80079ec <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 80079bc:	4b68      	ldr	r3, [pc, #416]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d004      	beq.n	80079ce <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 80079c4:	2100      	movs	r1, #0
 80079c6:	2001      	movs	r0, #1
 80079c8:	f7ff fb26 	bl	8007018 <changeTFTScheduleDayOfWeek>
 80079cc:	e003      	b.n	80079d6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 80079ce:	2101      	movs	r1, #1
 80079d0:	2001      	movs	r0, #1
 80079d2:	f7ff fb21 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 80079d6:	4b62      	ldr	r3, [pc, #392]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bf0c      	ite	eq
 80079de:	2301      	moveq	r3, #1
 80079e0:	2300      	movne	r3, #0
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	4b5e      	ldr	r3, [pc, #376]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80079e8:	701a      	strb	r2, [r3, #0]
 80079ea:	e0b4      	b.n	8007b56 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 80079ec:	88fb      	ldrh	r3, [r7, #6]
 80079ee:	2b59      	cmp	r3, #89	; 0x59
 80079f0:	d91a      	bls.n	8007a28 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	2b6e      	cmp	r3, #110	; 0x6e
 80079f6:	d817      	bhi.n	8007a28 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 80079f8:	4b59      	ldr	r3, [pc, #356]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80079fa:	785b      	ldrb	r3, [r3, #1]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d004      	beq.n	8007a0a <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8007a00:	2100      	movs	r1, #0
 8007a02:	2002      	movs	r0, #2
 8007a04:	f7ff fb08 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8007a08:	e003      	b.n	8007a12 <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	2002      	movs	r0, #2
 8007a0e:	f7ff fb03 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 8007a12:	4b53      	ldr	r3, [pc, #332]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	bf0c      	ite	eq
 8007a1a:	2301      	moveq	r3, #1
 8007a1c:	2300      	movne	r3, #0
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	4b4f      	ldr	r3, [pc, #316]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a24:	705a      	strb	r2, [r3, #1]
 8007a26:	e096      	b.n	8007b56 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	2b77      	cmp	r3, #119	; 0x77
 8007a2c:	d91a      	bls.n	8007a64 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	2b8c      	cmp	r3, #140	; 0x8c
 8007a32:	d817      	bhi.n	8007a64 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8007a34:	4b4a      	ldr	r3, [pc, #296]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a36:	789b      	ldrb	r3, [r3, #2]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d004      	beq.n	8007a46 <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	2003      	movs	r0, #3
 8007a40:	f7ff faea 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8007a44:	e003      	b.n	8007a4e <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8007a46:	2101      	movs	r1, #1
 8007a48:	2003      	movs	r0, #3
 8007a4a:	f7ff fae5 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 8007a4e:	4b44      	ldr	r3, [pc, #272]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a50:	789b      	ldrb	r3, [r3, #2]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	bf0c      	ite	eq
 8007a56:	2301      	moveq	r3, #1
 8007a58:	2300      	movne	r3, #0
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4b40      	ldr	r3, [pc, #256]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a60:	709a      	strb	r2, [r3, #2]
 8007a62:	e078      	b.n	8007b56 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007a64:	88fb      	ldrh	r3, [r7, #6]
 8007a66:	2b95      	cmp	r3, #149	; 0x95
 8007a68:	d91a      	bls.n	8007aa0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	2baa      	cmp	r3, #170	; 0xaa
 8007a6e:	d817      	bhi.n	8007aa0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8007a70:	4b3b      	ldr	r3, [pc, #236]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a72:	78db      	ldrb	r3, [r3, #3]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 8007a78:	2100      	movs	r1, #0
 8007a7a:	2004      	movs	r0, #4
 8007a7c:	f7ff facc 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8007a80:	e003      	b.n	8007a8a <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8007a82:	2101      	movs	r1, #1
 8007a84:	2004      	movs	r0, #4
 8007a86:	f7ff fac7 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 8007a8a:	4b35      	ldr	r3, [pc, #212]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a8c:	78db      	ldrb	r3, [r3, #3]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	bf0c      	ite	eq
 8007a92:	2301      	moveq	r3, #1
 8007a94:	2300      	movne	r3, #0
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a9c:	70da      	strb	r2, [r3, #3]
 8007a9e:	e05a      	b.n	8007b56 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007aa0:	88fb      	ldrh	r3, [r7, #6]
 8007aa2:	2bb3      	cmp	r3, #179	; 0xb3
 8007aa4:	d91a      	bls.n	8007adc <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 8007aa6:	88fb      	ldrh	r3, [r7, #6]
 8007aa8:	2bc8      	cmp	r3, #200	; 0xc8
 8007aaa:	d817      	bhi.n	8007adc <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8007aac:	4b2c      	ldr	r3, [pc, #176]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007aae:	791b      	ldrb	r3, [r3, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d004      	beq.n	8007abe <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	2005      	movs	r0, #5
 8007ab8:	f7ff faae 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8007abc:	e003      	b.n	8007ac6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8007abe:	2101      	movs	r1, #1
 8007ac0:	2005      	movs	r0, #5
 8007ac2:	f7ff faa9 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 8007ac6:	4b26      	ldr	r3, [pc, #152]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007ac8:	791b      	ldrb	r3, [r3, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	bf0c      	ite	eq
 8007ace:	2301      	moveq	r3, #1
 8007ad0:	2300      	movne	r3, #0
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	4b22      	ldr	r3, [pc, #136]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007ad8:	711a      	strb	r2, [r3, #4]
 8007ada:	e03c      	b.n	8007b56 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007adc:	88fb      	ldrh	r3, [r7, #6]
 8007ade:	2bd1      	cmp	r3, #209	; 0xd1
 8007ae0:	d91a      	bls.n	8007b18 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 8007ae2:	88fb      	ldrh	r3, [r7, #6]
 8007ae4:	2be6      	cmp	r3, #230	; 0xe6
 8007ae6:	d817      	bhi.n	8007b18 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8007ae8:	4b1d      	ldr	r3, [pc, #116]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007aea:	795b      	ldrb	r3, [r3, #5]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d004      	beq.n	8007afa <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007af0:	2100      	movs	r1, #0
 8007af2:	2006      	movs	r0, #6
 8007af4:	f7ff fa90 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8007af8:	e003      	b.n	8007b02 <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8007afa:	2101      	movs	r1, #1
 8007afc:	2006      	movs	r0, #6
 8007afe:	f7ff fa8b 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 8007b02:	4b17      	ldr	r3, [pc, #92]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b04:	795b      	ldrb	r3, [r3, #5]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf0c      	ite	eq
 8007b0a:	2301      	moveq	r3, #1
 8007b0c:	2300      	movne	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	461a      	mov	r2, r3
 8007b12:	4b13      	ldr	r3, [pc, #76]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b14:	715a      	strb	r2, [r3, #5]
 8007b16:	e01e      	b.n	8007b56 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	2bef      	cmp	r3, #239	; 0xef
 8007b1c:	d91b      	bls.n	8007b56 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007b1e:	88fb      	ldrh	r3, [r7, #6]
 8007b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b24:	d817      	bhi.n	8007b56 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8007b26:	4b0e      	ldr	r3, [pc, #56]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b28:	799b      	ldrb	r3, [r3, #6]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d004      	beq.n	8007b38 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 8007b2e:	2100      	movs	r1, #0
 8007b30:	2007      	movs	r0, #7
 8007b32:	f7ff fa71 	bl	8007018 <changeTFTScheduleDayOfWeek>
 8007b36:	e003      	b.n	8007b40 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007b38:	2101      	movs	r1, #1
 8007b3a:	2007      	movs	r0, #7
 8007b3c:	f7ff fa6c 	bl	8007018 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 8007b40:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b42:	799b      	ldrb	r3, [r3, #6]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bf0c      	ite	eq
 8007b48:	2301      	moveq	r3, #1
 8007b4a:	2300      	movne	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	4b03      	ldr	r3, [pc, #12]	; (8007b60 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b52:	719a      	strb	r2, [r3, #6]
	}
}
 8007b54:	e7ff      	b.n	8007b56 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000274 	.word	0x20000274

08007b64 <schedule2HourOnIncrease>:

//
// Functions to change on screen hour and minute ON/OFF 2 schedule
void schedule2HourOnIncrease(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af02      	add	r7, sp, #8
	if(hourOnSchedule2 < 24)
 8007b6a:	4b17      	ldr	r3, [pc, #92]	; (8007bc8 <schedule2HourOnIncrease+0x64>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b17      	cmp	r3, #23
 8007b70:	d806      	bhi.n	8007b80 <schedule2HourOnIncrease+0x1c>
	{
		hourOnSchedule2++;
 8007b72:	4b15      	ldr	r3, [pc, #84]	; (8007bc8 <schedule2HourOnIncrease+0x64>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	3301      	adds	r3, #1
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	4b13      	ldr	r3, [pc, #76]	; (8007bc8 <schedule2HourOnIncrease+0x64>)
 8007b7c:	701a      	strb	r2, [r3, #0]
 8007b7e:	e002      	b.n	8007b86 <schedule2HourOnIncrease+0x22>
	}
	else
	{
		hourOnSchedule2 = 1;
 8007b80:	4b11      	ldr	r3, [pc, #68]	; (8007bc8 <schedule2HourOnIncrease+0x64>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 8007b86:	4b10      	ldr	r3, [pc, #64]	; (8007bc8 <schedule2HourOnIncrease+0x64>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b09      	cmp	r3, #9
 8007b8c:	d907      	bls.n	8007b9e <schedule2HourOnIncrease+0x3a>
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <schedule2HourOnIncrease+0x64>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	490d      	ldr	r1, [pc, #52]	; (8007bcc <schedule2HourOnIncrease+0x68>)
 8007b96:	480e      	ldr	r0, [pc, #56]	; (8007bd0 <schedule2HourOnIncrease+0x6c>)
 8007b98:	f00b fab2 	bl	8013100 <siprintf>
 8007b9c:	e006      	b.n	8007bac <schedule2HourOnIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 8007b9e:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <schedule2HourOnIncrease+0x64>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	490b      	ldr	r1, [pc, #44]	; (8007bd4 <schedule2HourOnIncrease+0x70>)
 8007ba6:	480a      	ldr	r0, [pc, #40]	; (8007bd0 <schedule2HourOnIncrease+0x6c>)
 8007ba8:	f00b faaa 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007bac:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2264      	movs	r2, #100	; 0x64
 8007bba:	2150      	movs	r1, #80	; 0x50
 8007bbc:	4804      	ldr	r0, [pc, #16]	; (8007bd0 <schedule2HourOnIncrease+0x6c>)
 8007bbe:	f7fa f8ef 	bl	8001da0 <EF_PutString>
}
 8007bc2:	bf00      	nop
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20000289 	.word	0x20000289
 8007bcc:	080173b0 	.word	0x080173b0
 8007bd0:	200002cc 	.word	0x200002cc
 8007bd4:	080173b8 	.word	0x080173b8

08007bd8 <schedule2HourOnDecrease>:
void schedule2HourOnDecrease(void)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af02      	add	r7, sp, #8
	if(hourOnSchedule2 > 1)
 8007bde:	4b17      	ldr	r3, [pc, #92]	; (8007c3c <schedule2HourOnDecrease+0x64>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d906      	bls.n	8007bf4 <schedule2HourOnDecrease+0x1c>
	{
		hourOnSchedule2--;
 8007be6:	4b15      	ldr	r3, [pc, #84]	; (8007c3c <schedule2HourOnDecrease+0x64>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	4b13      	ldr	r3, [pc, #76]	; (8007c3c <schedule2HourOnDecrease+0x64>)
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	e002      	b.n	8007bfa <schedule2HourOnDecrease+0x22>
	}
	else
	{
		hourOnSchedule2 = 24;
 8007bf4:	4b11      	ldr	r3, [pc, #68]	; (8007c3c <schedule2HourOnDecrease+0x64>)
 8007bf6:	2218      	movs	r2, #24
 8007bf8:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 8007bfa:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <schedule2HourOnDecrease+0x64>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b09      	cmp	r3, #9
 8007c00:	d907      	bls.n	8007c12 <schedule2HourOnDecrease+0x3a>
 8007c02:	4b0e      	ldr	r3, [pc, #56]	; (8007c3c <schedule2HourOnDecrease+0x64>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	490d      	ldr	r1, [pc, #52]	; (8007c40 <schedule2HourOnDecrease+0x68>)
 8007c0a:	480e      	ldr	r0, [pc, #56]	; (8007c44 <schedule2HourOnDecrease+0x6c>)
 8007c0c:	f00b fa78 	bl	8013100 <siprintf>
 8007c10:	e006      	b.n	8007c20 <schedule2HourOnDecrease+0x48>
	else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 8007c12:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <schedule2HourOnDecrease+0x64>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	490b      	ldr	r1, [pc, #44]	; (8007c48 <schedule2HourOnDecrease+0x70>)
 8007c1a:	480a      	ldr	r0, [pc, #40]	; (8007c44 <schedule2HourOnDecrease+0x6c>)
 8007c1c:	f00b fa70 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007c20:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	2301      	movs	r3, #1
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	2264      	movs	r2, #100	; 0x64
 8007c2e:	2150      	movs	r1, #80	; 0x50
 8007c30:	4804      	ldr	r0, [pc, #16]	; (8007c44 <schedule2HourOnDecrease+0x6c>)
 8007c32:	f7fa f8b5 	bl	8001da0 <EF_PutString>
}
 8007c36:	bf00      	nop
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000289 	.word	0x20000289
 8007c40:	080173b0 	.word	0x080173b0
 8007c44:	200002cc 	.word	0x200002cc
 8007c48:	080173b8 	.word	0x080173b8

08007c4c <schedule2MinuteOnIncrease>:
void schedule2MinuteOnIncrease(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af02      	add	r7, sp, #8
	if(minuteOnSchedule2 < 59)
 8007c52:	4b17      	ldr	r3, [pc, #92]	; (8007cb0 <schedule2MinuteOnIncrease+0x64>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b3a      	cmp	r3, #58	; 0x3a
 8007c58:	d806      	bhi.n	8007c68 <schedule2MinuteOnIncrease+0x1c>
	{
		minuteOnSchedule2++;
 8007c5a:	4b15      	ldr	r3, [pc, #84]	; (8007cb0 <schedule2MinuteOnIncrease+0x64>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	4b13      	ldr	r3, [pc, #76]	; (8007cb0 <schedule2MinuteOnIncrease+0x64>)
 8007c64:	701a      	strb	r2, [r3, #0]
 8007c66:	e002      	b.n	8007c6e <schedule2MinuteOnIncrease+0x22>
	}
	else
	{
		minuteOnSchedule2 = 0;
 8007c68:	4b11      	ldr	r3, [pc, #68]	; (8007cb0 <schedule2MinuteOnIncrease+0x64>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007c6e:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <schedule2MinuteOnIncrease+0x64>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b09      	cmp	r3, #9
 8007c74:	d907      	bls.n	8007c86 <schedule2MinuteOnIncrease+0x3a>
 8007c76:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <schedule2MinuteOnIncrease+0x64>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	490d      	ldr	r1, [pc, #52]	; (8007cb4 <schedule2MinuteOnIncrease+0x68>)
 8007c7e:	480e      	ldr	r0, [pc, #56]	; (8007cb8 <schedule2MinuteOnIncrease+0x6c>)
 8007c80:	f00b fa3e 	bl	8013100 <siprintf>
 8007c84:	e006      	b.n	8007c94 <schedule2MinuteOnIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007c86:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <schedule2MinuteOnIncrease+0x64>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	490b      	ldr	r1, [pc, #44]	; (8007cbc <schedule2MinuteOnIncrease+0x70>)
 8007c8e:	480a      	ldr	r0, [pc, #40]	; (8007cb8 <schedule2MinuteOnIncrease+0x6c>)
 8007c90:	f00b fa36 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007c94:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007c98:	9301      	str	r3, [sp, #4]
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	2264      	movs	r2, #100	; 0x64
 8007ca2:	218a      	movs	r1, #138	; 0x8a
 8007ca4:	4804      	ldr	r0, [pc, #16]	; (8007cb8 <schedule2MinuteOnIncrease+0x6c>)
 8007ca6:	f7fa f87b 	bl	8001da0 <EF_PutString>
}
 8007caa:	bf00      	nop
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	2000028b 	.word	0x2000028b
 8007cb4:	080173b0 	.word	0x080173b0
 8007cb8:	200002cc 	.word	0x200002cc
 8007cbc:	080173b8 	.word	0x080173b8

08007cc0 <schedule2MinuteOnDecrease>:
void schedule2MinuteOnDecrease(void)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af02      	add	r7, sp, #8
	if(minuteOnSchedule2 > 0)
 8007cc6:	4b17      	ldr	r3, [pc, #92]	; (8007d24 <schedule2MinuteOnDecrease+0x64>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d006      	beq.n	8007cdc <schedule2MinuteOnDecrease+0x1c>
	{
		minuteOnSchedule2--;
 8007cce:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <schedule2MinuteOnDecrease+0x64>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	4b13      	ldr	r3, [pc, #76]	; (8007d24 <schedule2MinuteOnDecrease+0x64>)
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e002      	b.n	8007ce2 <schedule2MinuteOnDecrease+0x22>
	}
	else
	{
		minuteOnSchedule2 = 59;
 8007cdc:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <schedule2MinuteOnDecrease+0x64>)
 8007cde:	223b      	movs	r2, #59	; 0x3b
 8007ce0:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007ce2:	4b10      	ldr	r3, [pc, #64]	; (8007d24 <schedule2MinuteOnDecrease+0x64>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b09      	cmp	r3, #9
 8007ce8:	d907      	bls.n	8007cfa <schedule2MinuteOnDecrease+0x3a>
 8007cea:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <schedule2MinuteOnDecrease+0x64>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	490d      	ldr	r1, [pc, #52]	; (8007d28 <schedule2MinuteOnDecrease+0x68>)
 8007cf2:	480e      	ldr	r0, [pc, #56]	; (8007d2c <schedule2MinuteOnDecrease+0x6c>)
 8007cf4:	f00b fa04 	bl	8013100 <siprintf>
 8007cf8:	e006      	b.n	8007d08 <schedule2MinuteOnDecrease+0x48>
	else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007cfa:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <schedule2MinuteOnDecrease+0x64>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	490b      	ldr	r1, [pc, #44]	; (8007d30 <schedule2MinuteOnDecrease+0x70>)
 8007d02:	480a      	ldr	r0, [pc, #40]	; (8007d2c <schedule2MinuteOnDecrease+0x6c>)
 8007d04:	f00b f9fc 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007d08:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	2301      	movs	r3, #1
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	2300      	movs	r3, #0
 8007d14:	2264      	movs	r2, #100	; 0x64
 8007d16:	218a      	movs	r1, #138	; 0x8a
 8007d18:	4804      	ldr	r0, [pc, #16]	; (8007d2c <schedule2MinuteOnDecrease+0x6c>)
 8007d1a:	f7fa f841 	bl	8001da0 <EF_PutString>
}
 8007d1e:	bf00      	nop
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	2000028b 	.word	0x2000028b
 8007d28:	080173b0 	.word	0x080173b0
 8007d2c:	200002cc 	.word	0x200002cc
 8007d30:	080173b8 	.word	0x080173b8

08007d34 <schedule2HourOffIncrease>:

void schedule2HourOffIncrease(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af02      	add	r7, sp, #8
	if(hourOffSchedule2 < 24)
 8007d3a:	4b17      	ldr	r3, [pc, #92]	; (8007d98 <schedule2HourOffIncrease+0x64>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b17      	cmp	r3, #23
 8007d40:	d806      	bhi.n	8007d50 <schedule2HourOffIncrease+0x1c>
	{
		hourOffSchedule2++;
 8007d42:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <schedule2HourOffIncrease+0x64>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	3301      	adds	r3, #1
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	4b13      	ldr	r3, [pc, #76]	; (8007d98 <schedule2HourOffIncrease+0x64>)
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	e002      	b.n	8007d56 <schedule2HourOffIncrease+0x22>
	}
	else
	{
		hourOffSchedule2 = 1;
 8007d50:	4b11      	ldr	r3, [pc, #68]	; (8007d98 <schedule2HourOffIncrease+0x64>)
 8007d52:	2201      	movs	r2, #1
 8007d54:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 8007d56:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <schedule2HourOffIncrease+0x64>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	2b09      	cmp	r3, #9
 8007d5c:	d907      	bls.n	8007d6e <schedule2HourOffIncrease+0x3a>
 8007d5e:	4b0e      	ldr	r3, [pc, #56]	; (8007d98 <schedule2HourOffIncrease+0x64>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	490d      	ldr	r1, [pc, #52]	; (8007d9c <schedule2HourOffIncrease+0x68>)
 8007d66:	480e      	ldr	r0, [pc, #56]	; (8007da0 <schedule2HourOffIncrease+0x6c>)
 8007d68:	f00b f9ca 	bl	8013100 <siprintf>
 8007d6c:	e006      	b.n	8007d7c <schedule2HourOffIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 8007d6e:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <schedule2HourOffIncrease+0x64>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	490b      	ldr	r1, [pc, #44]	; (8007da4 <schedule2HourOffIncrease+0x70>)
 8007d76:	480a      	ldr	r0, [pc, #40]	; (8007da0 <schedule2HourOffIncrease+0x6c>)
 8007d78:	f00b f9c2 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007d7c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	2301      	movs	r3, #1
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	2300      	movs	r3, #0
 8007d88:	2287      	movs	r2, #135	; 0x87
 8007d8a:	214e      	movs	r1, #78	; 0x4e
 8007d8c:	4804      	ldr	r0, [pc, #16]	; (8007da0 <schedule2HourOffIncrease+0x6c>)
 8007d8e:	f7fa f807 	bl	8001da0 <EF_PutString>
}
 8007d92:	bf00      	nop
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	2000028a 	.word	0x2000028a
 8007d9c:	080173b0 	.word	0x080173b0
 8007da0:	200002cc 	.word	0x200002cc
 8007da4:	080173b8 	.word	0x080173b8

08007da8 <schedule2HourOffDecrease>:
void schedule2HourOffDecrease(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af02      	add	r7, sp, #8
	if(hourOffSchedule2 > 1)
 8007dae:	4b17      	ldr	r3, [pc, #92]	; (8007e0c <schedule2HourOffDecrease+0x64>)
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d906      	bls.n	8007dc4 <schedule2HourOffDecrease+0x1c>
	{
		hourOffSchedule2--;
 8007db6:	4b15      	ldr	r3, [pc, #84]	; (8007e0c <schedule2HourOffDecrease+0x64>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <schedule2HourOffDecrease+0x64>)
 8007dc0:	701a      	strb	r2, [r3, #0]
 8007dc2:	e002      	b.n	8007dca <schedule2HourOffDecrease+0x22>
	}
	else
	{
		hourOffSchedule2 = 24;
 8007dc4:	4b11      	ldr	r3, [pc, #68]	; (8007e0c <schedule2HourOffDecrease+0x64>)
 8007dc6:	2218      	movs	r2, #24
 8007dc8:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 8007dca:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <schedule2HourOffDecrease+0x64>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b09      	cmp	r3, #9
 8007dd0:	d907      	bls.n	8007de2 <schedule2HourOffDecrease+0x3a>
 8007dd2:	4b0e      	ldr	r3, [pc, #56]	; (8007e0c <schedule2HourOffDecrease+0x64>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	490d      	ldr	r1, [pc, #52]	; (8007e10 <schedule2HourOffDecrease+0x68>)
 8007dda:	480e      	ldr	r0, [pc, #56]	; (8007e14 <schedule2HourOffDecrease+0x6c>)
 8007ddc:	f00b f990 	bl	8013100 <siprintf>
 8007de0:	e006      	b.n	8007df0 <schedule2HourOffDecrease+0x48>
	else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 8007de2:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <schedule2HourOffDecrease+0x64>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	490b      	ldr	r1, [pc, #44]	; (8007e18 <schedule2HourOffDecrease+0x70>)
 8007dea:	480a      	ldr	r0, [pc, #40]	; (8007e14 <schedule2HourOffDecrease+0x6c>)
 8007dec:	f00b f988 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007df0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	2301      	movs	r3, #1
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	2287      	movs	r2, #135	; 0x87
 8007dfe:	214e      	movs	r1, #78	; 0x4e
 8007e00:	4804      	ldr	r0, [pc, #16]	; (8007e14 <schedule2HourOffDecrease+0x6c>)
 8007e02:	f7f9 ffcd 	bl	8001da0 <EF_PutString>
}
 8007e06:	bf00      	nop
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	2000028a 	.word	0x2000028a
 8007e10:	080173b0 	.word	0x080173b0
 8007e14:	200002cc 	.word	0x200002cc
 8007e18:	080173b8 	.word	0x080173b8

08007e1c <schedule2MinuteOffIncrease>:
void schedule2MinuteOffIncrease(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af02      	add	r7, sp, #8
	if(minuteOffSchedule2 < 59)
 8007e22:	4b17      	ldr	r3, [pc, #92]	; (8007e80 <schedule2MinuteOffIncrease+0x64>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b3a      	cmp	r3, #58	; 0x3a
 8007e28:	d806      	bhi.n	8007e38 <schedule2MinuteOffIncrease+0x1c>
	{
		minuteOffSchedule2++;
 8007e2a:	4b15      	ldr	r3, [pc, #84]	; (8007e80 <schedule2MinuteOffIncrease+0x64>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <schedule2MinuteOffIncrease+0x64>)
 8007e34:	701a      	strb	r2, [r3, #0]
 8007e36:	e002      	b.n	8007e3e <schedule2MinuteOffIncrease+0x22>
	}
	else
	{
		minuteOffSchedule2 = 0;
 8007e38:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <schedule2MinuteOffIncrease+0x64>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007e3e:	4b10      	ldr	r3, [pc, #64]	; (8007e80 <schedule2MinuteOffIncrease+0x64>)
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	2b09      	cmp	r3, #9
 8007e44:	d907      	bls.n	8007e56 <schedule2MinuteOffIncrease+0x3a>
 8007e46:	4b0e      	ldr	r3, [pc, #56]	; (8007e80 <schedule2MinuteOffIncrease+0x64>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	490d      	ldr	r1, [pc, #52]	; (8007e84 <schedule2MinuteOffIncrease+0x68>)
 8007e4e:	480e      	ldr	r0, [pc, #56]	; (8007e88 <schedule2MinuteOffIncrease+0x6c>)
 8007e50:	f00b f956 	bl	8013100 <siprintf>
 8007e54:	e006      	b.n	8007e64 <schedule2MinuteOffIncrease+0x48>
	else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007e56:	4b0a      	ldr	r3, [pc, #40]	; (8007e80 <schedule2MinuteOffIncrease+0x64>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	490b      	ldr	r1, [pc, #44]	; (8007e8c <schedule2MinuteOffIncrease+0x70>)
 8007e5e:	480a      	ldr	r0, [pc, #40]	; (8007e88 <schedule2MinuteOffIncrease+0x6c>)
 8007e60:	f00b f94e 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007e64:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	2287      	movs	r2, #135	; 0x87
 8007e72:	218a      	movs	r1, #138	; 0x8a
 8007e74:	4804      	ldr	r0, [pc, #16]	; (8007e88 <schedule2MinuteOffIncrease+0x6c>)
 8007e76:	f7f9 ff93 	bl	8001da0 <EF_PutString>
}
 8007e7a:	bf00      	nop
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	2000028c 	.word	0x2000028c
 8007e84:	080173b0 	.word	0x080173b0
 8007e88:	200002cc 	.word	0x200002cc
 8007e8c:	080173b8 	.word	0x080173b8

08007e90 <schedule2MinuteOffDecrease>:
void schedule2MinuteOffDecrease(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af02      	add	r7, sp, #8
	if(minuteOffSchedule2 > 0)
 8007e96:	4b17      	ldr	r3, [pc, #92]	; (8007ef4 <schedule2MinuteOffDecrease+0x64>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d006      	beq.n	8007eac <schedule2MinuteOffDecrease+0x1c>
	{
		minuteOffSchedule2--;
 8007e9e:	4b15      	ldr	r3, [pc, #84]	; (8007ef4 <schedule2MinuteOffDecrease+0x64>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	4b13      	ldr	r3, [pc, #76]	; (8007ef4 <schedule2MinuteOffDecrease+0x64>)
 8007ea8:	701a      	strb	r2, [r3, #0]
 8007eaa:	e002      	b.n	8007eb2 <schedule2MinuteOffDecrease+0x22>
	}
	else
	{
		minuteOffSchedule2 = 59;
 8007eac:	4b11      	ldr	r3, [pc, #68]	; (8007ef4 <schedule2MinuteOffDecrease+0x64>)
 8007eae:	223b      	movs	r2, #59	; 0x3b
 8007eb0:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007eb2:	4b10      	ldr	r3, [pc, #64]	; (8007ef4 <schedule2MinuteOffDecrease+0x64>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b09      	cmp	r3, #9
 8007eb8:	d907      	bls.n	8007eca <schedule2MinuteOffDecrease+0x3a>
 8007eba:	4b0e      	ldr	r3, [pc, #56]	; (8007ef4 <schedule2MinuteOffDecrease+0x64>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	490d      	ldr	r1, [pc, #52]	; (8007ef8 <schedule2MinuteOffDecrease+0x68>)
 8007ec2:	480e      	ldr	r0, [pc, #56]	; (8007efc <schedule2MinuteOffDecrease+0x6c>)
 8007ec4:	f00b f91c 	bl	8013100 <siprintf>
 8007ec8:	e006      	b.n	8007ed8 <schedule2MinuteOffDecrease+0x48>
	else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007eca:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <schedule2MinuteOffDecrease+0x64>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	490b      	ldr	r1, [pc, #44]	; (8007f00 <schedule2MinuteOffDecrease+0x70>)
 8007ed2:	480a      	ldr	r0, [pc, #40]	; (8007efc <schedule2MinuteOffDecrease+0x6c>)
 8007ed4:	f00b f914 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007ed8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007edc:	9301      	str	r3, [sp, #4]
 8007ede:	2301      	movs	r3, #1
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2287      	movs	r2, #135	; 0x87
 8007ee6:	218a      	movs	r1, #138	; 0x8a
 8007ee8:	4804      	ldr	r0, [pc, #16]	; (8007efc <schedule2MinuteOffDecrease+0x6c>)
 8007eea:	f7f9 ff59 	bl	8001da0 <EF_PutString>
}
 8007eee:	bf00      	nop
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	2000028c 	.word	0x2000028c
 8007ef8:	080173b0 	.word	0x080173b0
 8007efc:	200002cc 	.word	0x200002cc
 8007f00:	080173b8 	.word	0x080173b8

08007f04 <MenuTFTSchedule2ActivityHourMinuteONAdd>:
//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	460a      	mov	r2, r1
 8007f0e:	80fb      	strh	r3, [r7, #6]
 8007f10:	4613      	mov	r3, r2
 8007f12:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007f14:	4833      	ldr	r0, [pc, #204]	; (8007fe4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe0>)
 8007f16:	f7f9 fd29 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007f1a:	88fb      	ldrh	r3, [r7, #6]
 8007f1c:	2bba      	cmp	r3, #186	; 0xba
 8007f1e:	d908      	bls.n	8007f32 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x2e>
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	2bdd      	cmp	r3, #221	; 0xdd
 8007f24:	d805      	bhi.n	8007f32 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x2e>
	{
		schedule2HourOnIncrease();
 8007f26:	f7ff fe1d 	bl	8007b64 <schedule2HourOnIncrease>
		EncoderState = ENCODER_SCHEDULE_2_HOUR_ON;
 8007f2a:	4b2f      	ldr	r3, [pc, #188]	; (8007fe8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>)
 8007f2c:	220a      	movs	r2, #10
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e054      	b.n	8007fdc <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	2be8      	cmp	r3, #232	; 0xe8
 8007f36:	d909      	bls.n	8007f4c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x48>
 8007f38:	88fb      	ldrh	r3, [r7, #6]
 8007f3a:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007f3e:	d205      	bcs.n	8007f4c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x48>
	{
		schedule2MinuteOnIncrease();
 8007f40:	f7ff fe84 	bl	8007c4c <schedule2MinuteOnIncrease>
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_ON;
 8007f44:	4b28      	ldr	r3, [pc, #160]	; (8007fe8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>)
 8007f46:	220c      	movs	r2, #12
 8007f48:	701a      	strb	r2, [r3, #0]
 8007f4a:	e047      	b.n	8007fdc <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007f4c:	88fb      	ldrh	r3, [r7, #6]
 8007f4e:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007f52:	d943      	bls.n	8007fdc <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
 8007f54:	88fb      	ldrh	r3, [r7, #6]
 8007f56:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007f5a:	d23f      	bcs.n	8007fdc <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_ON;
 8007f5c:	4b22      	ldr	r3, [pc, #136]	; (8007fe8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>)
 8007f5e:	220c      	movs	r2, #12
 8007f60:	701a      	strb	r2, [r3, #0]
		if(minuteOnSchedule2 < 49)
 8007f62:	4b22      	ldr	r3, [pc, #136]	; (8007fec <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b30      	cmp	r3, #48	; 0x30
 8007f68:	d806      	bhi.n	8007f78 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x74>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 8007f6a:	4b20      	ldr	r3, [pc, #128]	; (8007fec <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	330a      	adds	r3, #10
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	4b1e      	ldr	r3, [pc, #120]	; (8007fec <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	e012      	b.n	8007f9e <MenuTFTSchedule2ActivityHourMinuteONAdd+0x9a>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 8007f78:	4b1c      	ldr	r3, [pc, #112]	; (8007fec <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	f103 020a 	add.w	r2, r3, #10
 8007f80:	4b1b      	ldr	r3, [pc, #108]	; (8007ff0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xec>)
 8007f82:	fb83 1302 	smull	r1, r3, r3, r2
 8007f86:	4413      	add	r3, r2
 8007f88:	1159      	asrs	r1, r3, #5
 8007f8a:	17d3      	asrs	r3, r2, #31
 8007f8c:	1ac9      	subs	r1, r1, r3
 8007f8e:	460b      	mov	r3, r1
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	1a5b      	subs	r3, r3, r1
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	1ad1      	subs	r1, r2, r3
 8007f98:	b2ca      	uxtb	r2, r1
 8007f9a:	4b14      	ldr	r3, [pc, #80]	; (8007fec <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007f9c:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007f9e:	4b13      	ldr	r3, [pc, #76]	; (8007fec <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b09      	cmp	r3, #9
 8007fa4:	d907      	bls.n	8007fb6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xb2>
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	4911      	ldr	r1, [pc, #68]	; (8007ff4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf0>)
 8007fae:	4812      	ldr	r0, [pc, #72]	; (8007ff8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf4>)
 8007fb0:	f00b f8a6 	bl	8013100 <siprintf>
 8007fb4:	e006      	b.n	8007fc4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xc0>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	; (8007fec <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	490f      	ldr	r1, [pc, #60]	; (8007ffc <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf8>)
 8007fbe:	480e      	ldr	r0, [pc, #56]	; (8007ff8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf4>)
 8007fc0:	f00b f89e 	bl	8013100 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007fc4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	2301      	movs	r3, #1
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2264      	movs	r2, #100	; 0x64
 8007fd2:	218a      	movs	r1, #138	; 0x8a
 8007fd4:	4808      	ldr	r0, [pc, #32]	; (8007ff8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf4>)
 8007fd6:	f7f9 fee3 	bl	8001da0 <EF_PutString>
	}
}
 8007fda:	e7ff      	b.n	8007fdc <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	0802a964 	.word	0x0802a964
 8007fe8:	200002a1 	.word	0x200002a1
 8007fec:	2000028b 	.word	0x2000028b
 8007ff0:	88888889 	.word	0x88888889
 8007ff4:	080173b0 	.word	0x080173b0
 8007ff8:	200002cc 	.word	0x200002cc
 8007ffc:	080173b8 	.word	0x080173b8

08008000 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af02      	add	r7, sp, #8
 8008006:	4603      	mov	r3, r0
 8008008:	460a      	mov	r2, r1
 800800a:	80fb      	strh	r3, [r7, #6]
 800800c:	4613      	mov	r3, r2
 800800e:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008010:	4833      	ldr	r0, [pc, #204]	; (80080e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe0>)
 8008012:	f7f9 fcab 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8008016:	88fb      	ldrh	r3, [r7, #6]
 8008018:	2bba      	cmp	r3, #186	; 0xba
 800801a:	d908      	bls.n	800802e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x2e>
 800801c:	88fb      	ldrh	r3, [r7, #6]
 800801e:	2bdd      	cmp	r3, #221	; 0xdd
 8008020:	d805      	bhi.n	800802e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x2e>
	{
		schedule2HourOffIncrease();
 8008022:	f7ff fe87 	bl	8007d34 <schedule2HourOffIncrease>
		EncoderState = ENCODER_SCHEDULE_2_HOUR_OFF;
 8008026:	4b2f      	ldr	r3, [pc, #188]	; (80080e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>)
 8008028:	220b      	movs	r2, #11
 800802a:	701a      	strb	r2, [r3, #0]
 800802c:	e054      	b.n	80080d8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800802e:	88fb      	ldrh	r3, [r7, #6]
 8008030:	2be8      	cmp	r3, #232	; 0xe8
 8008032:	d909      	bls.n	8008048 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x48>
 8008034:	88fb      	ldrh	r3, [r7, #6]
 8008036:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800803a:	d205      	bcs.n	8008048 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x48>
	{
		schedule2MinuteOffIncrease();
 800803c:	f7ff feee 	bl	8007e1c <schedule2MinuteOffIncrease>
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_OFF;
 8008040:	4b28      	ldr	r3, [pc, #160]	; (80080e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>)
 8008042:	220d      	movs	r2, #13
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	e047      	b.n	80080d8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8008048:	88fb      	ldrh	r3, [r7, #6]
 800804a:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800804e:	d943      	bls.n	80080d8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
 8008050:	88fb      	ldrh	r3, [r7, #6]
 8008052:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8008056:	d23f      	bcs.n	80080d8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_OFF;
 8008058:	4b22      	ldr	r3, [pc, #136]	; (80080e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>)
 800805a:	220d      	movs	r2, #13
 800805c:	701a      	strb	r2, [r3, #0]
		if(minuteOffSchedule2 < 49)
 800805e:	4b22      	ldr	r3, [pc, #136]	; (80080e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2b30      	cmp	r3, #48	; 0x30
 8008064:	d806      	bhi.n	8008074 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x74>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 8008066:	4b20      	ldr	r3, [pc, #128]	; (80080e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	330a      	adds	r3, #10
 800806c:	b2da      	uxtb	r2, r3
 800806e:	4b1e      	ldr	r3, [pc, #120]	; (80080e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8008070:	701a      	strb	r2, [r3, #0]
 8008072:	e012      	b.n	800809a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x9a>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 8008074:	4b1c      	ldr	r3, [pc, #112]	; (80080e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	f103 020a 	add.w	r2, r3, #10
 800807c:	4b1b      	ldr	r3, [pc, #108]	; (80080ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xec>)
 800807e:	fb83 1302 	smull	r1, r3, r3, r2
 8008082:	4413      	add	r3, r2
 8008084:	1159      	asrs	r1, r3, #5
 8008086:	17d3      	asrs	r3, r2, #31
 8008088:	1ac9      	subs	r1, r1, r3
 800808a:	460b      	mov	r3, r1
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	1a5b      	subs	r3, r3, r1
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	1ad1      	subs	r1, r2, r3
 8008094:	b2ca      	uxtb	r2, r1
 8008096:	4b14      	ldr	r3, [pc, #80]	; (80080e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8008098:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 800809a:	4b13      	ldr	r3, [pc, #76]	; (80080e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b09      	cmp	r3, #9
 80080a0:	d907      	bls.n	80080b2 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xb2>
 80080a2:	4b11      	ldr	r3, [pc, #68]	; (80080e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	4911      	ldr	r1, [pc, #68]	; (80080f0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf0>)
 80080aa:	4812      	ldr	r0, [pc, #72]	; (80080f4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf4>)
 80080ac:	f00b f828 	bl	8013100 <siprintf>
 80080b0:	e006      	b.n	80080c0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xc0>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 80080b2:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	490f      	ldr	r1, [pc, #60]	; (80080f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf8>)
 80080ba:	480e      	ldr	r0, [pc, #56]	; (80080f4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf4>)
 80080bc:	f00b f820 	bl	8013100 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80080c0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	2301      	movs	r3, #1
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	2300      	movs	r3, #0
 80080cc:	2287      	movs	r2, #135	; 0x87
 80080ce:	218a      	movs	r1, #138	; 0x8a
 80080d0:	4808      	ldr	r0, [pc, #32]	; (80080f4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf4>)
 80080d2:	f7f9 fe65 	bl	8001da0 <EF_PutString>
	}
}
 80080d6:	e7ff      	b.n	80080d8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	0802a964 	.word	0x0802a964
 80080e4:	200002a1 	.word	0x200002a1
 80080e8:	2000028c 	.word	0x2000028c
 80080ec:	88888889 	.word	0x88888889
 80080f0:	080173b0 	.word	0x080173b0
 80080f4:	200002cc 	.word	0x200002cc
 80080f8:	080173b8 	.word	0x080173b8

080080fc <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	460a      	mov	r2, r1
 8008106:	80fb      	strh	r3, [r7, #6]
 8008108:	4613      	mov	r3, r2
 800810a:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 800810c:	88fb      	ldrh	r3, [r7, #6]
 800810e:	2b14      	cmp	r3, #20
 8008110:	d919      	bls.n	8008146 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 8008112:	88fb      	ldrh	r3, [r7, #6]
 8008114:	2b29      	cmp	r3, #41	; 0x29
 8008116:	d816      	bhi.n	8008146 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8008118:	4b82      	ldr	r3, [pc, #520]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d004      	beq.n	800812a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 8008120:	2100      	movs	r1, #0
 8008122:	2001      	movs	r0, #1
 8008124:	f7ff f855 	bl	80071d2 <changeTFTScheduleRelayLights>
 8008128:	e003      	b.n	8008132 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 800812a:	2101      	movs	r1, #1
 800812c:	2001      	movs	r0, #1
 800812e:	f7ff f850 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8008132:	4b7c      	ldr	r3, [pc, #496]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	bf0c      	ite	eq
 800813a:	2301      	moveq	r3, #1
 800813c:	2300      	movne	r3, #0
 800813e:	b2db      	uxtb	r3, r3
 8008140:	461a      	mov	r2, r3
 8008142:	4b78      	ldr	r3, [pc, #480]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008144:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	2b34      	cmp	r3, #52	; 0x34
 800814a:	d919      	bls.n	8008180 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 800814c:	88fb      	ldrh	r3, [r7, #6]
 800814e:	2b49      	cmp	r3, #73	; 0x49
 8008150:	d816      	bhi.n	8008180 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8008152:	4b74      	ldr	r3, [pc, #464]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008154:	785b      	ldrb	r3, [r3, #1]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 800815a:	2100      	movs	r1, #0
 800815c:	2002      	movs	r0, #2
 800815e:	f7ff f838 	bl	80071d2 <changeTFTScheduleRelayLights>
 8008162:	e003      	b.n	800816c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8008164:	2101      	movs	r1, #1
 8008166:	2002      	movs	r0, #2
 8008168:	f7ff f833 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 800816c:	4b6d      	ldr	r3, [pc, #436]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800816e:	785b      	ldrb	r3, [r3, #1]
 8008170:	2b00      	cmp	r3, #0
 8008172:	bf0c      	ite	eq
 8008174:	2301      	moveq	r3, #1
 8008176:	2300      	movne	r3, #0
 8008178:	b2db      	uxtb	r3, r3
 800817a:	461a      	mov	r2, r3
 800817c:	4b69      	ldr	r3, [pc, #420]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800817e:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8008180:	88fb      	ldrh	r3, [r7, #6]
 8008182:	2b54      	cmp	r3, #84	; 0x54
 8008184:	d919      	bls.n	80081ba <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 8008186:	88fb      	ldrh	r3, [r7, #6]
 8008188:	2b69      	cmp	r3, #105	; 0x69
 800818a:	d816      	bhi.n	80081ba <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 800818c:	4b65      	ldr	r3, [pc, #404]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800818e:	789b      	ldrb	r3, [r3, #2]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d004      	beq.n	800819e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 8008194:	2100      	movs	r1, #0
 8008196:	2003      	movs	r0, #3
 8008198:	f7ff f81b 	bl	80071d2 <changeTFTScheduleRelayLights>
 800819c:	e003      	b.n	80081a6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 800819e:	2101      	movs	r1, #1
 80081a0:	2003      	movs	r0, #3
 80081a2:	f7ff f816 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 80081a6:	4b5f      	ldr	r3, [pc, #380]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081a8:	789b      	ldrb	r3, [r3, #2]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bf0c      	ite	eq
 80081ae:	2301      	moveq	r3, #1
 80081b0:	2300      	movne	r3, #0
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	461a      	mov	r2, r3
 80081b6:	4b5b      	ldr	r3, [pc, #364]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081b8:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80081ba:	88fb      	ldrh	r3, [r7, #6]
 80081bc:	2b74      	cmp	r3, #116	; 0x74
 80081be:	d919      	bls.n	80081f4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 80081c0:	88fb      	ldrh	r3, [r7, #6]
 80081c2:	2b89      	cmp	r3, #137	; 0x89
 80081c4:	d816      	bhi.n	80081f4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80081c6:	4b57      	ldr	r3, [pc, #348]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081c8:	78db      	ldrb	r3, [r3, #3]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d004      	beq.n	80081d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 80081ce:	2100      	movs	r1, #0
 80081d0:	2004      	movs	r0, #4
 80081d2:	f7fe fffe 	bl	80071d2 <changeTFTScheduleRelayLights>
 80081d6:	e003      	b.n	80081e0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80081d8:	2101      	movs	r1, #1
 80081da:	2004      	movs	r0, #4
 80081dc:	f7fe fff9 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 80081e0:	4b50      	ldr	r3, [pc, #320]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081e2:	78db      	ldrb	r3, [r3, #3]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	bf0c      	ite	eq
 80081e8:	2301      	moveq	r3, #1
 80081ea:	2300      	movne	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	461a      	mov	r2, r3
 80081f0:	4b4c      	ldr	r3, [pc, #304]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081f2:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80081f4:	88fb      	ldrh	r3, [r7, #6]
 80081f6:	2b94      	cmp	r3, #148	; 0x94
 80081f8:	d919      	bls.n	800822e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 80081fa:	88fb      	ldrh	r3, [r7, #6]
 80081fc:	2ba9      	cmp	r3, #169	; 0xa9
 80081fe:	d816      	bhi.n	800822e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8008200:	4b48      	ldr	r3, [pc, #288]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008202:	791b      	ldrb	r3, [r3, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d004      	beq.n	8008212 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 8008208:	2100      	movs	r1, #0
 800820a:	2005      	movs	r0, #5
 800820c:	f7fe ffe1 	bl	80071d2 <changeTFTScheduleRelayLights>
 8008210:	e003      	b.n	800821a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8008212:	2101      	movs	r1, #1
 8008214:	2005      	movs	r0, #5
 8008216:	f7fe ffdc 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 800821a:	4b42      	ldr	r3, [pc, #264]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800821c:	791b      	ldrb	r3, [r3, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	bf0c      	ite	eq
 8008222:	2301      	moveq	r3, #1
 8008224:	2300      	movne	r3, #0
 8008226:	b2db      	uxtb	r3, r3
 8008228:	461a      	mov	r2, r3
 800822a:	4b3e      	ldr	r3, [pc, #248]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800822c:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 800822e:	88fb      	ldrh	r3, [r7, #6]
 8008230:	2bb4      	cmp	r3, #180	; 0xb4
 8008232:	d919      	bls.n	8008268 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 8008234:	88fb      	ldrh	r3, [r7, #6]
 8008236:	2bc9      	cmp	r3, #201	; 0xc9
 8008238:	d816      	bhi.n	8008268 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 800823a:	4b3a      	ldr	r3, [pc, #232]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800823c:	795b      	ldrb	r3, [r3, #5]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d004      	beq.n	800824c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 8008242:	2100      	movs	r1, #0
 8008244:	2006      	movs	r0, #6
 8008246:	f7fe ffc4 	bl	80071d2 <changeTFTScheduleRelayLights>
 800824a:	e003      	b.n	8008254 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 800824c:	2101      	movs	r1, #1
 800824e:	2006      	movs	r0, #6
 8008250:	f7fe ffbf 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8008254:	4b33      	ldr	r3, [pc, #204]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008256:	795b      	ldrb	r3, [r3, #5]
 8008258:	2b00      	cmp	r3, #0
 800825a:	bf0c      	ite	eq
 800825c:	2301      	moveq	r3, #1
 800825e:	2300      	movne	r3, #0
 8008260:	b2db      	uxtb	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	4b2f      	ldr	r3, [pc, #188]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008266:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8008268:	88fb      	ldrh	r3, [r7, #6]
 800826a:	2bd4      	cmp	r3, #212	; 0xd4
 800826c:	d919      	bls.n	80082a2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 800826e:	88fb      	ldrh	r3, [r7, #6]
 8008270:	2be9      	cmp	r3, #233	; 0xe9
 8008272:	d816      	bhi.n	80082a2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8008274:	4b2b      	ldr	r3, [pc, #172]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008276:	799b      	ldrb	r3, [r3, #6]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 800827c:	2100      	movs	r1, #0
 800827e:	2007      	movs	r0, #7
 8008280:	f7fe ffa7 	bl	80071d2 <changeTFTScheduleRelayLights>
 8008284:	e003      	b.n	800828e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 8008286:	2101      	movs	r1, #1
 8008288:	2007      	movs	r0, #7
 800828a:	f7fe ffa2 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 800828e:	4b25      	ldr	r3, [pc, #148]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008290:	799b      	ldrb	r3, [r3, #6]
 8008292:	2b00      	cmp	r3, #0
 8008294:	bf0c      	ite	eq
 8008296:	2301      	moveq	r3, #1
 8008298:	2300      	movne	r3, #0
 800829a:	b2db      	uxtb	r3, r3
 800829c:	461a      	mov	r2, r3
 800829e:	4b21      	ldr	r3, [pc, #132]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082a0:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 80082a2:	88fb      	ldrh	r3, [r7, #6]
 80082a4:	2bf4      	cmp	r3, #244	; 0xf4
 80082a6:	d91a      	bls.n	80082de <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 80082a8:	88fb      	ldrh	r3, [r7, #6]
 80082aa:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80082ae:	d216      	bcs.n	80082de <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80082b0:	4b1c      	ldr	r3, [pc, #112]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082b2:	79db      	ldrb	r3, [r3, #7]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d004      	beq.n	80082c2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 80082b8:	2100      	movs	r1, #0
 80082ba:	2008      	movs	r0, #8
 80082bc:	f7fe ff89 	bl	80071d2 <changeTFTScheduleRelayLights>
 80082c0:	e003      	b.n	80082ca <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80082c2:	2101      	movs	r1, #1
 80082c4:	2008      	movs	r0, #8
 80082c6:	f7fe ff84 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 80082ca:	4b16      	ldr	r3, [pc, #88]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082cc:	79db      	ldrb	r3, [r3, #7]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bf0c      	ite	eq
 80082d2:	2301      	moveq	r3, #1
 80082d4:	2300      	movne	r3, #0
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	4b12      	ldr	r3, [pc, #72]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082dc:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 80082e4:	d91a      	bls.n	800831c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 80082e6:	88fb      	ldrh	r3, [r7, #6]
 80082e8:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80082ec:	d216      	bcs.n	800831c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 80082ee:	4b0d      	ldr	r3, [pc, #52]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082f0:	7a1b      	ldrb	r3, [r3, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 80082f6:	2100      	movs	r1, #0
 80082f8:	2009      	movs	r0, #9
 80082fa:	f7fe ff6a 	bl	80071d2 <changeTFTScheduleRelayLights>
 80082fe:	e003      	b.n	8008308 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8008300:	2101      	movs	r1, #1
 8008302:	2009      	movs	r0, #9
 8008304:	f7fe ff65 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8008308:	4b06      	ldr	r3, [pc, #24]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800830a:	7a1b      	ldrb	r3, [r3, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	bf0c      	ite	eq
 8008310:	2301      	moveq	r3, #1
 8008312:	2300      	movne	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	4b02      	ldr	r3, [pc, #8]	; (8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800831a:	721a      	strb	r2, [r3, #8]
	}

}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20000268 	.word	0x20000268

08008328 <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	460a      	mov	r2, r1
 8008332:	80fb      	strh	r3, [r7, #6]
 8008334:	4613      	mov	r3, r2
 8008336:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8008338:	88fb      	ldrh	r3, [r7, #6]
 800833a:	2b14      	cmp	r3, #20
 800833c:	d919      	bls.n	8008372 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	2b29      	cmp	r3, #41	; 0x29
 8008342:	d816      	bhi.n	8008372 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8008344:	4b82      	ldr	r3, [pc, #520]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d004      	beq.n	8008356 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 800834c:	2100      	movs	r1, #0
 800834e:	2001      	movs	r0, #1
 8008350:	f7fe ff3f 	bl	80071d2 <changeTFTScheduleRelayLights>
 8008354:	e003      	b.n	800835e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8008356:	2101      	movs	r1, #1
 8008358:	2001      	movs	r0, #1
 800835a:	f7fe ff3a 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 800835e:	4b7c      	ldr	r3, [pc, #496]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	bf0c      	ite	eq
 8008366:	2301      	moveq	r3, #1
 8008368:	2300      	movne	r3, #0
 800836a:	b2db      	uxtb	r3, r3
 800836c:	461a      	mov	r2, r3
 800836e:	4b78      	ldr	r3, [pc, #480]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008370:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	2b34      	cmp	r3, #52	; 0x34
 8008376:	d919      	bls.n	80083ac <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 8008378:	88fb      	ldrh	r3, [r7, #6]
 800837a:	2b49      	cmp	r3, #73	; 0x49
 800837c:	d816      	bhi.n	80083ac <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 800837e:	4b74      	ldr	r3, [pc, #464]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d004      	beq.n	8008390 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 8008386:	2100      	movs	r1, #0
 8008388:	2002      	movs	r0, #2
 800838a:	f7fe ff22 	bl	80071d2 <changeTFTScheduleRelayLights>
 800838e:	e003      	b.n	8008398 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8008390:	2101      	movs	r1, #1
 8008392:	2002      	movs	r0, #2
 8008394:	f7fe ff1d 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8008398:	4b6d      	ldr	r3, [pc, #436]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b00      	cmp	r3, #0
 800839e:	bf0c      	ite	eq
 80083a0:	2301      	moveq	r3, #1
 80083a2:	2300      	movne	r3, #0
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	461a      	mov	r2, r3
 80083a8:	4b69      	ldr	r3, [pc, #420]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083aa:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 80083ac:	88fb      	ldrh	r3, [r7, #6]
 80083ae:	2b54      	cmp	r3, #84	; 0x54
 80083b0:	d919      	bls.n	80083e6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 80083b2:	88fb      	ldrh	r3, [r7, #6]
 80083b4:	2b69      	cmp	r3, #105	; 0x69
 80083b6:	d816      	bhi.n	80083e6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 80083b8:	4b65      	ldr	r3, [pc, #404]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083ba:	789b      	ldrb	r3, [r3, #2]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d004      	beq.n	80083ca <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 80083c0:	2100      	movs	r1, #0
 80083c2:	2003      	movs	r0, #3
 80083c4:	f7fe ff05 	bl	80071d2 <changeTFTScheduleRelayLights>
 80083c8:	e003      	b.n	80083d2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 80083ca:	2101      	movs	r1, #1
 80083cc:	2003      	movs	r0, #3
 80083ce:	f7fe ff00 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 80083d2:	4b5f      	ldr	r3, [pc, #380]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083d4:	789b      	ldrb	r3, [r3, #2]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	bf0c      	ite	eq
 80083da:	2301      	moveq	r3, #1
 80083dc:	2300      	movne	r3, #0
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	461a      	mov	r2, r3
 80083e2:	4b5b      	ldr	r3, [pc, #364]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083e4:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80083e6:	88fb      	ldrh	r3, [r7, #6]
 80083e8:	2b74      	cmp	r3, #116	; 0x74
 80083ea:	d919      	bls.n	8008420 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 80083ec:	88fb      	ldrh	r3, [r7, #6]
 80083ee:	2b89      	cmp	r3, #137	; 0x89
 80083f0:	d816      	bhi.n	8008420 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80083f2:	4b57      	ldr	r3, [pc, #348]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083f4:	78db      	ldrb	r3, [r3, #3]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d004      	beq.n	8008404 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 80083fa:	2100      	movs	r1, #0
 80083fc:	2004      	movs	r0, #4
 80083fe:	f7fe fee8 	bl	80071d2 <changeTFTScheduleRelayLights>
 8008402:	e003      	b.n	800840c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 8008404:	2101      	movs	r1, #1
 8008406:	2004      	movs	r0, #4
 8008408:	f7fe fee3 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 800840c:	4b50      	ldr	r3, [pc, #320]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800840e:	78db      	ldrb	r3, [r3, #3]
 8008410:	2b00      	cmp	r3, #0
 8008412:	bf0c      	ite	eq
 8008414:	2301      	moveq	r3, #1
 8008416:	2300      	movne	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	461a      	mov	r2, r3
 800841c:	4b4c      	ldr	r3, [pc, #304]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800841e:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8008420:	88fb      	ldrh	r3, [r7, #6]
 8008422:	2b94      	cmp	r3, #148	; 0x94
 8008424:	d919      	bls.n	800845a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	2ba9      	cmp	r3, #169	; 0xa9
 800842a:	d816      	bhi.n	800845a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 800842c:	4b48      	ldr	r3, [pc, #288]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800842e:	791b      	ldrb	r3, [r3, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d004      	beq.n	800843e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 8008434:	2100      	movs	r1, #0
 8008436:	2005      	movs	r0, #5
 8008438:	f7fe fecb 	bl	80071d2 <changeTFTScheduleRelayLights>
 800843c:	e003      	b.n	8008446 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 800843e:	2101      	movs	r1, #1
 8008440:	2005      	movs	r0, #5
 8008442:	f7fe fec6 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 8008446:	4b42      	ldr	r3, [pc, #264]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008448:	791b      	ldrb	r3, [r3, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	bf0c      	ite	eq
 800844e:	2301      	moveq	r3, #1
 8008450:	2300      	movne	r3, #0
 8008452:	b2db      	uxtb	r3, r3
 8008454:	461a      	mov	r2, r3
 8008456:	4b3e      	ldr	r3, [pc, #248]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008458:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 800845a:	88fb      	ldrh	r3, [r7, #6]
 800845c:	2bb4      	cmp	r3, #180	; 0xb4
 800845e:	d919      	bls.n	8008494 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 8008460:	88fb      	ldrh	r3, [r7, #6]
 8008462:	2bc9      	cmp	r3, #201	; 0xc9
 8008464:	d816      	bhi.n	8008494 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8008466:	4b3a      	ldr	r3, [pc, #232]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008468:	795b      	ldrb	r3, [r3, #5]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d004      	beq.n	8008478 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 800846e:	2100      	movs	r1, #0
 8008470:	2006      	movs	r0, #6
 8008472:	f7fe feae 	bl	80071d2 <changeTFTScheduleRelayLights>
 8008476:	e003      	b.n	8008480 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8008478:	2101      	movs	r1, #1
 800847a:	2006      	movs	r0, #6
 800847c:	f7fe fea9 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8008480:	4b33      	ldr	r3, [pc, #204]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008482:	795b      	ldrb	r3, [r3, #5]
 8008484:	2b00      	cmp	r3, #0
 8008486:	bf0c      	ite	eq
 8008488:	2301      	moveq	r3, #1
 800848a:	2300      	movne	r3, #0
 800848c:	b2db      	uxtb	r3, r3
 800848e:	461a      	mov	r2, r3
 8008490:	4b2f      	ldr	r3, [pc, #188]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008492:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8008494:	88fb      	ldrh	r3, [r7, #6]
 8008496:	2bd4      	cmp	r3, #212	; 0xd4
 8008498:	d919      	bls.n	80084ce <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 800849a:	88fb      	ldrh	r3, [r7, #6]
 800849c:	2be9      	cmp	r3, #233	; 0xe9
 800849e:	d816      	bhi.n	80084ce <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 80084a0:	4b2b      	ldr	r3, [pc, #172]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084a2:	799b      	ldrb	r3, [r3, #6]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 80084a8:	2100      	movs	r1, #0
 80084aa:	2007      	movs	r0, #7
 80084ac:	f7fe fe91 	bl	80071d2 <changeTFTScheduleRelayLights>
 80084b0:	e003      	b.n	80084ba <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 80084b2:	2101      	movs	r1, #1
 80084b4:	2007      	movs	r0, #7
 80084b6:	f7fe fe8c 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 80084ba:	4b25      	ldr	r3, [pc, #148]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084bc:	799b      	ldrb	r3, [r3, #6]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bf0c      	ite	eq
 80084c2:	2301      	moveq	r3, #1
 80084c4:	2300      	movne	r3, #0
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	461a      	mov	r2, r3
 80084ca:	4b21      	ldr	r3, [pc, #132]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084cc:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 80084ce:	88fb      	ldrh	r3, [r7, #6]
 80084d0:	2bf4      	cmp	r3, #244	; 0xf4
 80084d2:	d91a      	bls.n	800850a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 80084d4:	88fb      	ldrh	r3, [r7, #6]
 80084d6:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80084da:	d216      	bcs.n	800850a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80084dc:	4b1c      	ldr	r3, [pc, #112]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084de:	79db      	ldrb	r3, [r3, #7]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 80084e4:	2100      	movs	r1, #0
 80084e6:	2008      	movs	r0, #8
 80084e8:	f7fe fe73 	bl	80071d2 <changeTFTScheduleRelayLights>
 80084ec:	e003      	b.n	80084f6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80084ee:	2101      	movs	r1, #1
 80084f0:	2008      	movs	r0, #8
 80084f2:	f7fe fe6e 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 80084f6:	4b16      	ldr	r3, [pc, #88]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084f8:	79db      	ldrb	r3, [r3, #7]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bf0c      	ite	eq
 80084fe:	2301      	moveq	r3, #1
 8008500:	2300      	movne	r3, #0
 8008502:	b2db      	uxtb	r3, r3
 8008504:	461a      	mov	r2, r3
 8008506:	4b12      	ldr	r3, [pc, #72]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008508:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 800850a:	88fb      	ldrh	r3, [r7, #6]
 800850c:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8008510:	d91a      	bls.n	8008548 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 8008512:	88fb      	ldrh	r3, [r7, #6]
 8008514:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8008518:	d216      	bcs.n	8008548 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 800851a:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800851c:	7a1b      	ldrb	r3, [r3, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d004      	beq.n	800852c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 8008522:	2100      	movs	r1, #0
 8008524:	2009      	movs	r0, #9
 8008526:	f7fe fe54 	bl	80071d2 <changeTFTScheduleRelayLights>
 800852a:	e003      	b.n	8008534 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 800852c:	2101      	movs	r1, #1
 800852e:	2009      	movs	r0, #9
 8008530:	f7fe fe4f 	bl	80071d2 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8008534:	4b06      	ldr	r3, [pc, #24]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008536:	7a1b      	ldrb	r3, [r3, #8]
 8008538:	2b00      	cmp	r3, #0
 800853a:	bf0c      	ite	eq
 800853c:	2301      	moveq	r3, #1
 800853e:	2300      	movne	r3, #0
 8008540:	b2db      	uxtb	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	4b02      	ldr	r3, [pc, #8]	; (8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008546:	721a      	strb	r2, [r3, #8]
	}
}
 8008548:	bf00      	nop
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	2000027c 	.word	0x2000027c

08008554 <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d118      	bne.n	8008596 <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 8008564:	491b      	ldr	r1, [pc, #108]	; (80085d4 <updateAllSchedulesInfo+0x80>)
 8008566:	2001      	movs	r0, #1
 8008568:	f7fa fe25 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 800856c:	491a      	ldr	r1, [pc, #104]	; (80085d8 <updateAllSchedulesInfo+0x84>)
 800856e:	2001      	movs	r0, #1
 8008570:	f7fa fe45 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 8008574:	4919      	ldr	r1, [pc, #100]	; (80085dc <updateAllSchedulesInfo+0x88>)
 8008576:	2001      	movs	r0, #1
 8008578:	f7fa fe65 	bl	8003246 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 800857c:	4918      	ldr	r1, [pc, #96]	; (80085e0 <updateAllSchedulesInfo+0x8c>)
 800857e:	2001      	movs	r0, #1
 8008580:	f7fa fe85 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8008584:	4917      	ldr	r1, [pc, #92]	; (80085e4 <updateAllSchedulesInfo+0x90>)
 8008586:	2001      	movs	r0, #1
 8008588:	f7fa fcc4 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 800858c:	4916      	ldr	r1, [pc, #88]	; (80085e8 <updateAllSchedulesInfo+0x94>)
 800858e:	2001      	movs	r0, #1
 8008590:	f7fa fd3c 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 8008594:	e01a      	b.n	80085cc <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	2b02      	cmp	r3, #2
 800859a:	d117      	bne.n	80085cc <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 800859c:	4913      	ldr	r1, [pc, #76]	; (80085ec <updateAllSchedulesInfo+0x98>)
 800859e:	2002      	movs	r0, #2
 80085a0:	f7fa fe09 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 80085a4:	4912      	ldr	r1, [pc, #72]	; (80085f0 <updateAllSchedulesInfo+0x9c>)
 80085a6:	2002      	movs	r0, #2
 80085a8:	f7fa fe29 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 80085ac:	4911      	ldr	r1, [pc, #68]	; (80085f4 <updateAllSchedulesInfo+0xa0>)
 80085ae:	2002      	movs	r0, #2
 80085b0:	f7fa fe49 	bl	8003246 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 80085b4:	4910      	ldr	r1, [pc, #64]	; (80085f8 <updateAllSchedulesInfo+0xa4>)
 80085b6:	2002      	movs	r0, #2
 80085b8:	f7fa fe69 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 80085bc:	4909      	ldr	r1, [pc, #36]	; (80085e4 <updateAllSchedulesInfo+0x90>)
 80085be:	2002      	movs	r0, #2
 80085c0:	f7fa fca8 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 80085c4:	4908      	ldr	r1, [pc, #32]	; (80085e8 <updateAllSchedulesInfo+0x94>)
 80085c6:	2002      	movs	r0, #2
 80085c8:	f7fa fd20 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 80085cc:	bf00      	nop
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20000285 	.word	0x20000285
 80085d8:	20000287 	.word	0x20000287
 80085dc:	20000286 	.word	0x20000286
 80085e0:	20000288 	.word	0x20000288
 80085e4:	20000260 	.word	0x20000260
 80085e8:	20000268 	.word	0x20000268
 80085ec:	20000289 	.word	0x20000289
 80085f0:	2000028b 	.word	0x2000028b
 80085f4:	2000028a 	.word	0x2000028a
 80085f8:	2000028c 	.word	0x2000028c

080085fc <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	460a      	mov	r2, r1
 8008606:	80fb      	strh	r3, [r7, #6]
 8008608:	4613      	mov	r3, r2
 800860a:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 800860c:	88bb      	ldrh	r3, [r7, #4]
 800860e:	2b4a      	cmp	r3, #74	; 0x4a
 8008610:	d908      	bls.n	8008624 <clockIncreaseOneHourAndMinute+0x28>
 8008612:	88bb      	ldrh	r3, [r7, #4]
 8008614:	2b60      	cmp	r3, #96	; 0x60
 8008616:	d805      	bhi.n	8008624 <clockIncreaseOneHourAndMinute+0x28>
	{
		EncoderState = ENCODER_CLOCK_HOUR;
 8008618:	4b10      	ldr	r3, [pc, #64]	; (800865c <clockIncreaseOneHourAndMinute+0x60>)
 800861a:	2201      	movs	r2, #1
 800861c:	701a      	strb	r2, [r3, #0]

		OneHourIncrease();
 800861e:	f000 ffcb 	bl	80095b8 <OneHourIncrease>
 8008622:	e017      	b.n	8008654 <clockIncreaseOneHourAndMinute+0x58>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8008624:	88bb      	ldrh	r3, [r7, #4]
 8008626:	2b72      	cmp	r3, #114	; 0x72
 8008628:	d908      	bls.n	800863c <clockIncreaseOneHourAndMinute+0x40>
 800862a:	88bb      	ldrh	r3, [r7, #4]
 800862c:	2b88      	cmp	r3, #136	; 0x88
 800862e:	d805      	bhi.n	800863c <clockIncreaseOneHourAndMinute+0x40>
	{
		EncoderState = ENCODER_CLOCK_MINUTE;
 8008630:	4b0a      	ldr	r3, [pc, #40]	; (800865c <clockIncreaseOneHourAndMinute+0x60>)
 8008632:	2202      	movs	r2, #2
 8008634:	701a      	strb	r2, [r3, #0]

		OneMinuteIncrease();
 8008636:	f000 ff93 	bl	8009560 <OneMinuteIncrease>
 800863a:	e00b      	b.n	8008654 <clockIncreaseOneHourAndMinute+0x58>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 800863c:	88bb      	ldrh	r3, [r7, #4]
 800863e:	2b9a      	cmp	r3, #154	; 0x9a
 8008640:	d908      	bls.n	8008654 <clockIncreaseOneHourAndMinute+0x58>
 8008642:	88bb      	ldrh	r3, [r7, #4]
 8008644:	2bb0      	cmp	r3, #176	; 0xb0
 8008646:	d805      	bhi.n	8008654 <clockIncreaseOneHourAndMinute+0x58>
	{
		EncoderState = ENCODER_CLOCK_DAY;
 8008648:	4b04      	ldr	r3, [pc, #16]	; (800865c <clockIncreaseOneHourAndMinute+0x60>)
 800864a:	2203      	movs	r2, #3
 800864c:	701a      	strb	r2, [r3, #0]

		OneDayIncrease();
 800864e:	f000 ffdf 	bl	8009610 <OneDayIncrease>
	}
}
 8008652:	e7ff      	b.n	8008654 <clockIncreaseOneHourAndMinute+0x58>
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	200002a1 	.word	0x200002a1

08008660 <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af02      	add	r7, sp, #8
 8008666:	4603      	mov	r3, r0
 8008668:	460a      	mov	r2, r1
 800866a:	80fb      	strh	r3, [r7, #6]
 800866c:	4613      	mov	r3, r2
 800866e:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8008670:	88bb      	ldrh	r3, [r7, #4]
 8008672:	2b4a      	cmp	r3, #74	; 0x4a
 8008674:	d926      	bls.n	80086c4 <clockIncreaseSixHoursTenMinutes+0x64>
 8008676:	88bb      	ldrh	r3, [r7, #4]
 8008678:	2b60      	cmp	r3, #96	; 0x60
 800867a:	d823      	bhi.n	80086c4 <clockIncreaseSixHoursTenMinutes+0x64>
	{
		EncoderState = ENCODER_CLOCK_HOUR;
 800867c:	4b31      	ldr	r3, [pc, #196]	; (8008744 <clockIncreaseSixHoursTenMinutes+0xe4>)
 800867e:	2201      	movs	r2, #1
 8008680:	701a      	strb	r2, [r3, #0]

		if(Hours < 19)
 8008682:	4b31      	ldr	r3, [pc, #196]	; (8008748 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b12      	cmp	r3, #18
 8008688:	d806      	bhi.n	8008698 <clockIncreaseSixHoursTenMinutes+0x38>
		{
			Hours = Hours + 6;
 800868a:	4b2f      	ldr	r3, [pc, #188]	; (8008748 <clockIncreaseSixHoursTenMinutes+0xe8>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	3306      	adds	r3, #6
 8008690:	b2da      	uxtb	r2, r3
 8008692:	4b2d      	ldr	r3, [pc, #180]	; (8008748 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8008694:	701a      	strb	r2, [r3, #0]
 8008696:	e002      	b.n	800869e <clockIncreaseSixHoursTenMinutes+0x3e>
		}
		else
		{
			Hours = 1;
 8008698:	4b2b      	ldr	r3, [pc, #172]	; (8008748 <clockIncreaseSixHoursTenMinutes+0xe8>)
 800869a:	2201      	movs	r2, #1
 800869c:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 800869e:	4b2a      	ldr	r3, [pc, #168]	; (8008748 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	4929      	ldr	r1, [pc, #164]	; (800874c <clockIncreaseSixHoursTenMinutes+0xec>)
 80086a6:	482a      	ldr	r0, [pc, #168]	; (8008750 <clockIncreaseSixHoursTenMinutes+0xf0>)
 80086a8:	f00a fd2a 	bl	8013100 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80086ac:	f24c 6318 	movw	r3, #50712	; 0xc618
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	2301      	movs	r3, #1
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	2300      	movs	r3, #0
 80086b8:	2246      	movs	r2, #70	; 0x46
 80086ba:	219d      	movs	r1, #157	; 0x9d
 80086bc:	4824      	ldr	r0, [pc, #144]	; (8008750 <clockIncreaseSixHoursTenMinutes+0xf0>)
 80086be:	f7f9 fb6f 	bl	8001da0 <EF_PutString>
 80086c2:	e038      	b.n	8008736 <clockIncreaseSixHoursTenMinutes+0xd6>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 80086c4:	88bb      	ldrh	r3, [r7, #4]
 80086c6:	2b72      	cmp	r3, #114	; 0x72
 80086c8:	d935      	bls.n	8008736 <clockIncreaseSixHoursTenMinutes+0xd6>
 80086ca:	88bb      	ldrh	r3, [r7, #4]
 80086cc:	2b88      	cmp	r3, #136	; 0x88
 80086ce:	d832      	bhi.n	8008736 <clockIncreaseSixHoursTenMinutes+0xd6>
	{
		EncoderState = ENCODER_CLOCK_MINUTE;
 80086d0:	4b1c      	ldr	r3, [pc, #112]	; (8008744 <clockIncreaseSixHoursTenMinutes+0xe4>)
 80086d2:	2202      	movs	r2, #2
 80086d4:	701a      	strb	r2, [r3, #0]

		if(Minutes < 49)
 80086d6:	4b1f      	ldr	r3, [pc, #124]	; (8008754 <clockIncreaseSixHoursTenMinutes+0xf4>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2b30      	cmp	r3, #48	; 0x30
 80086dc:	d806      	bhi.n	80086ec <clockIncreaseSixHoursTenMinutes+0x8c>
		{
			Minutes = Minutes +10;
 80086de:	4b1d      	ldr	r3, [pc, #116]	; (8008754 <clockIncreaseSixHoursTenMinutes+0xf4>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	330a      	adds	r3, #10
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <clockIncreaseSixHoursTenMinutes+0xf4>)
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	e012      	b.n	8008712 <clockIncreaseSixHoursTenMinutes+0xb2>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 80086ec:	4b19      	ldr	r3, [pc, #100]	; (8008754 <clockIncreaseSixHoursTenMinutes+0xf4>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f103 020a 	add.w	r2, r3, #10
 80086f4:	4b18      	ldr	r3, [pc, #96]	; (8008758 <clockIncreaseSixHoursTenMinutes+0xf8>)
 80086f6:	fb83 1302 	smull	r1, r3, r3, r2
 80086fa:	4413      	add	r3, r2
 80086fc:	1159      	asrs	r1, r3, #5
 80086fe:	17d3      	asrs	r3, r2, #31
 8008700:	1ac9      	subs	r1, r1, r3
 8008702:	460b      	mov	r3, r1
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	1a5b      	subs	r3, r3, r1
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	1ad1      	subs	r1, r2, r3
 800870c:	b2ca      	uxtb	r2, r1
 800870e:	4b11      	ldr	r3, [pc, #68]	; (8008754 <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008710:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8008712:	4b10      	ldr	r3, [pc, #64]	; (8008754 <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	490c      	ldr	r1, [pc, #48]	; (800874c <clockIncreaseSixHoursTenMinutes+0xec>)
 800871a:	480d      	ldr	r0, [pc, #52]	; (8008750 <clockIncreaseSixHoursTenMinutes+0xf0>)
 800871c:	f00a fcf0 	bl	8013100 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008720:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	2301      	movs	r3, #1
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	2300      	movs	r3, #0
 800872c:	226e      	movs	r2, #110	; 0x6e
 800872e:	219c      	movs	r1, #156	; 0x9c
 8008730:	4807      	ldr	r0, [pc, #28]	; (8008750 <clockIncreaseSixHoursTenMinutes+0xf0>)
 8008732:	f7f9 fb35 	bl	8001da0 <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008736:	4809      	ldr	r0, [pc, #36]	; (800875c <clockIncreaseSixHoursTenMinutes+0xfc>)
 8008738:	f7f9 f918 	bl	800196c <EF_SetFont>
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	200002a1 	.word	0x200002a1
 8008748:	20000032 	.word	0x20000032
 800874c:	080173c0 	.word	0x080173c0
 8008750:	200002cc 	.word	0x200002cc
 8008754:	20000033 	.word	0x20000033
 8008758:	88888889 	.word	0x88888889
 800875c:	0802a964 	.word	0x0802a964

08008760 <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	2b40      	cmp	r3, #64	; 0x40
 800876e:	d90e      	bls.n	800878e <changeSwitchStatusTouch+0x2e>
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	2b56      	cmp	r3, #86	; 0x56
 8008774:	d80b      	bhi.n	800878e <changeSwitchStatusTouch+0x2e>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 8008776:	4b24      	ldr	r3, [pc, #144]	; (8008808 <changeSwitchStatusTouch+0xa8>)
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <changeSwitchStatusTouch+0x26>
		{
			firstSwitchTurn(0);
 800877e:	2000      	movs	r0, #0
 8008780:	f000 faee 	bl	8008d60 <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8008784:	e038      	b.n	80087f8 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstSwitchTurn(1);
 8008786:	2001      	movs	r0, #1
 8008788:	f000 faea 	bl	8008d60 <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 800878c:	e034      	b.n	80087f8 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 800878e:	79fb      	ldrb	r3, [r7, #7]
 8008790:	2b5e      	cmp	r3, #94	; 0x5e
 8008792:	d90e      	bls.n	80087b2 <changeSwitchStatusTouch+0x52>
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	2b74      	cmp	r3, #116	; 0x74
 8008798:	d80b      	bhi.n	80087b2 <changeSwitchStatusTouch+0x52>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 800879a:	4b1b      	ldr	r3, [pc, #108]	; (8008808 <changeSwitchStatusTouch+0xa8>)
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <changeSwitchStatusTouch+0x4a>
		{
			secondSwitchTurn(0);
 80087a2:	2000      	movs	r0, #0
 80087a4:	f000 fb5e 	bl	8008e64 <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 80087a8:	e026      	b.n	80087f8 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondSwitchTurn(1);
 80087aa:	2001      	movs	r0, #1
 80087ac:	f000 fb5a 	bl	8008e64 <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 80087b0:	e022      	b.n	80087f8 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	2b7c      	cmp	r3, #124	; 0x7c
 80087b6:	d90e      	bls.n	80087d6 <changeSwitchStatusTouch+0x76>
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	2b92      	cmp	r3, #146	; 0x92
 80087bc:	d80b      	bhi.n	80087d6 <changeSwitchStatusTouch+0x76>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 80087be:	4b12      	ldr	r3, [pc, #72]	; (8008808 <changeSwitchStatusTouch+0xa8>)
 80087c0:	789b      	ldrb	r3, [r3, #2]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <changeSwitchStatusTouch+0x6e>
		{
			thirdSwitchTurn(0);
 80087c6:	2000      	movs	r0, #0
 80087c8:	f000 fbce 	bl	8008f68 <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 80087cc:	e014      	b.n	80087f8 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdSwitchTurn(1);
 80087ce:	2001      	movs	r0, #1
 80087d0:	f000 fbca 	bl	8008f68 <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 80087d4:	e010      	b.n	80087f8 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	2b9a      	cmp	r3, #154	; 0x9a
 80087da:	d90d      	bls.n	80087f8 <changeSwitchStatusTouch+0x98>
 80087dc:	79fb      	ldrb	r3, [r7, #7]
 80087de:	2bb0      	cmp	r3, #176	; 0xb0
 80087e0:	d80a      	bhi.n	80087f8 <changeSwitchStatusTouch+0x98>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 80087e2:	4b09      	ldr	r3, [pc, #36]	; (8008808 <changeSwitchStatusTouch+0xa8>)
 80087e4:	78db      	ldrb	r3, [r3, #3]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <changeSwitchStatusTouch+0x92>
		{
			fourthSwitchTurn(0);
 80087ea:	2000      	movs	r0, #0
 80087ec:	f000 fc3e 	bl	800906c <fourthSwitchTurn>
 80087f0:	e002      	b.n	80087f8 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthSwitchTurn(1);
 80087f2:	2001      	movs	r0, #1
 80087f4:	f000 fc3a 	bl	800906c <fourthSwitchTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 80087f8:	4804      	ldr	r0, [pc, #16]	; (800880c <changeSwitchStatusTouch+0xac>)
 80087fa:	f7f9 f8b7 	bl	800196c <EF_SetFont>
}
 80087fe:	bf00      	nop
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	200002b8 	.word	0x200002b8
 800880c:	0802a964 	.word	0x0802a964

08008810 <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	2b40      	cmp	r3, #64	; 0x40
 800881e:	d90e      	bls.n	800883e <changeLightsStatusTouch+0x2e>
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	2b56      	cmp	r3, #86	; 0x56
 8008824:	d80b      	bhi.n	800883e <changeLightsStatusTouch+0x2e>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 8008826:	4b24      	ldr	r3, [pc, #144]	; (80088b8 <changeLightsStatusTouch+0xa8>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d003      	beq.n	8008836 <changeLightsStatusTouch+0x26>
		{
			firstLightTurn(0);
 800882e:	2000      	movs	r0, #0
 8008830:	f000 fc9e 	bl	8009170 <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 8008834:	e038      	b.n	80088a8 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstLightTurn(1);
 8008836:	2001      	movs	r0, #1
 8008838:	f000 fc9a 	bl	8009170 <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 800883c:	e034      	b.n	80088a8 <changeLightsStatusTouch+0x98>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 800883e:	79fb      	ldrb	r3, [r7, #7]
 8008840:	2b5e      	cmp	r3, #94	; 0x5e
 8008842:	d90e      	bls.n	8008862 <changeLightsStatusTouch+0x52>
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	2b74      	cmp	r3, #116	; 0x74
 8008848:	d80b      	bhi.n	8008862 <changeLightsStatusTouch+0x52>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 800884a:	4b1b      	ldr	r3, [pc, #108]	; (80088b8 <changeLightsStatusTouch+0xa8>)
 800884c:	785b      	ldrb	r3, [r3, #1]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <changeLightsStatusTouch+0x4a>
		{
			secondLightTurn(0);
 8008852:	2000      	movs	r0, #0
 8008854:	f000 fd0a 	bl	800926c <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8008858:	e026      	b.n	80088a8 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondLightTurn(1);
 800885a:	2001      	movs	r0, #1
 800885c:	f000 fd06 	bl	800926c <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8008860:	e022      	b.n	80088a8 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	2b7c      	cmp	r3, #124	; 0x7c
 8008866:	d90e      	bls.n	8008886 <changeLightsStatusTouch+0x76>
 8008868:	79fb      	ldrb	r3, [r7, #7]
 800886a:	2b92      	cmp	r3, #146	; 0x92
 800886c:	d80b      	bhi.n	8008886 <changeLightsStatusTouch+0x76>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 800886e:	4b12      	ldr	r3, [pc, #72]	; (80088b8 <changeLightsStatusTouch+0xa8>)
 8008870:	789b      	ldrb	r3, [r3, #2]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <changeLightsStatusTouch+0x6e>
		{
			thirdLightTurn(0);
 8008876:	2000      	movs	r0, #0
 8008878:	f000 fd76 	bl	8009368 <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 800887c:	e014      	b.n	80088a8 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdLightTurn(1);
 800887e:	2001      	movs	r0, #1
 8008880:	f000 fd72 	bl	8009368 <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 8008884:	e010      	b.n	80088a8 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	2b9a      	cmp	r3, #154	; 0x9a
 800888a:	d90d      	bls.n	80088a8 <changeLightsStatusTouch+0x98>
 800888c:	79fb      	ldrb	r3, [r7, #7]
 800888e:	2bb0      	cmp	r3, #176	; 0xb0
 8008890:	d80a      	bhi.n	80088a8 <changeLightsStatusTouch+0x98>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 8008892:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <changeLightsStatusTouch+0xa8>)
 8008894:	78db      	ldrb	r3, [r3, #3]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <changeLightsStatusTouch+0x92>
		{
			fourthLightTurn(0);
 800889a:	2000      	movs	r0, #0
 800889c:	f000 fde2 	bl	8009464 <fourthLightTurn>
 80088a0:	e002      	b.n	80088a8 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthLightTurn(1);
 80088a2:	2001      	movs	r0, #1
 80088a4:	f000 fdde 	bl	8009464 <fourthLightTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 80088a8:	4804      	ldr	r0, [pc, #16]	; (80088bc <changeLightsStatusTouch+0xac>)
 80088aa:	f7f9 f85f 	bl	800196c <EF_SetFont>
}
 80088ae:	bf00      	nop
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	200002bc 	.word	0x200002bc
 80088bc:	0802a964 	.word	0x0802a964

080088c0 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af02      	add	r7, sp, #8
 80088c6:	4603      	mov	r3, r0
 80088c8:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	2b3b      	cmp	r3, #59	; 0x3b
 80088ce:	d966      	bls.n	800899e <predefinedActivityTouchAction+0xde>
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	2b64      	cmp	r3, #100	; 0x64
 80088d4:	d863      	bhi.n	800899e <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 80088d6:	4b69      	ldr	r3, [pc, #420]	; (8008a7c <predefinedActivityTouchAction+0x1bc>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d02f      	beq.n	800893e <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 80088de:	4b67      	ldr	r3, [pc, #412]	; (8008a7c <predefinedActivityTouchAction+0x1bc>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80088e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	230a      	movs	r3, #10
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	2328      	movs	r3, #40	; 0x28
 80088f0:	2278      	movs	r2, #120	; 0x78
 80088f2:	213c      	movs	r1, #60	; 0x3c
 80088f4:	2064      	movs	r0, #100	; 0x64
 80088f6:	f7f8 ffe8 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 80088fa:	4961      	ldr	r1, [pc, #388]	; (8008a80 <predefinedActivityTouchAction+0x1c0>)
 80088fc:	4861      	ldr	r0, [pc, #388]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 80088fe:	f00a fbff 	bl	8013100 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008902:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	2300      	movs	r3, #0
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	2300      	movs	r3, #0
 800890e:	223e      	movs	r2, #62	; 0x3e
 8008910:	2177      	movs	r1, #119	; 0x77
 8008912:	485c      	ldr	r0, [pc, #368]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 8008914:	f7f9 fa44 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 8008918:	495b      	ldr	r1, [pc, #364]	; (8008a88 <predefinedActivityTouchAction+0x1c8>)
 800891a:	485a      	ldr	r0, [pc, #360]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 800891c:	f00a fbf0 	bl	8013100 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008920:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	2300      	movs	r3, #0
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	2300      	movs	r3, #0
 800892c:	2250      	movs	r2, #80	; 0x50
 800892e:	2193      	movs	r1, #147	; 0x93
 8008930:	4854      	ldr	r0, [pc, #336]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 8008932:	f7f9 fa35 	bl	8001da0 <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 8008936:	2000      	movs	r0, #0
 8008938:	f7fc fc02 	bl	8005140 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 800893c:	e099      	b.n	8008a72 <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 800893e:	4b4f      	ldr	r3, [pc, #316]	; (8008a7c <predefinedActivityTouchAction+0x1bc>)
 8008940:	2201      	movs	r2, #1
 8008942:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008944:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	230a      	movs	r3, #10
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	2328      	movs	r3, #40	; 0x28
 8008950:	2278      	movs	r2, #120	; 0x78
 8008952:	213c      	movs	r1, #60	; 0x3c
 8008954:	2064      	movs	r0, #100	; 0x64
 8008956:	f7f8 ffb8 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 800895a:	4949      	ldr	r1, [pc, #292]	; (8008a80 <predefinedActivityTouchAction+0x1c0>)
 800895c:	4849      	ldr	r0, [pc, #292]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 800895e:	f00a fbcf 	bl	8013100 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008962:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008966:	9301      	str	r3, [sp, #4]
 8008968:	2300      	movs	r3, #0
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	2300      	movs	r3, #0
 800896e:	223e      	movs	r2, #62	; 0x3e
 8008970:	2177      	movs	r1, #119	; 0x77
 8008972:	4844      	ldr	r0, [pc, #272]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 8008974:	f7f9 fa14 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "ON");
 8008978:	4944      	ldr	r1, [pc, #272]	; (8008a8c <predefinedActivityTouchAction+0x1cc>)
 800897a:	4842      	ldr	r0, [pc, #264]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 800897c:	f00a fbc0 	bl	8013100 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008980:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008984:	9301      	str	r3, [sp, #4]
 8008986:	2300      	movs	r3, #0
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	2300      	movs	r3, #0
 800898c:	2250      	movs	r2, #80	; 0x50
 800898e:	2193      	movs	r1, #147	; 0x93
 8008990:	483c      	ldr	r0, [pc, #240]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 8008992:	f7f9 fa05 	bl	8001da0 <EF_PutString>
			predefinedActivityKarmienie(1);
 8008996:	2001      	movs	r0, #1
 8008998:	f7fc fbd2 	bl	8005140 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 800899c:	e069      	b.n	8008a72 <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	2b77      	cmp	r3, #119	; 0x77
 80089a2:	d966      	bls.n	8008a72 <predefinedActivityTouchAction+0x1b2>
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	2ba0      	cmp	r3, #160	; 0xa0
 80089a8:	d863      	bhi.n	8008a72 <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 80089aa:	4b34      	ldr	r3, [pc, #208]	; (8008a7c <predefinedActivityTouchAction+0x1bc>)
 80089ac:	785b      	ldrb	r3, [r3, #1]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d02f      	beq.n	8008a12 <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 80089b2:	4b32      	ldr	r3, [pc, #200]	; (8008a7c <predefinedActivityTouchAction+0x1bc>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80089b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80089bc:	9301      	str	r3, [sp, #4]
 80089be:	230a      	movs	r3, #10
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	2328      	movs	r3, #40	; 0x28
 80089c4:	2278      	movs	r2, #120	; 0x78
 80089c6:	2178      	movs	r1, #120	; 0x78
 80089c8:	2064      	movs	r0, #100	; 0x64
 80089ca:	f7f8 ff7e 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 80089ce:	4930      	ldr	r1, [pc, #192]	; (8008a90 <predefinedActivityTouchAction+0x1d0>)
 80089d0:	482c      	ldr	r0, [pc, #176]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 80089d2:	f00a fb95 	bl	8013100 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80089d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80089da:	9301      	str	r3, [sp, #4]
 80089dc:	2300      	movs	r3, #0
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	2300      	movs	r3, #0
 80089e2:	227a      	movs	r2, #122	; 0x7a
 80089e4:	2169      	movs	r1, #105	; 0x69
 80089e6:	4827      	ldr	r0, [pc, #156]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 80089e8:	f7f9 f9da 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 80089ec:	4926      	ldr	r1, [pc, #152]	; (8008a88 <predefinedActivityTouchAction+0x1c8>)
 80089ee:	4825      	ldr	r0, [pc, #148]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 80089f0:	f00a fb86 	bl	8013100 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80089f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	2300      	movs	r3, #0
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	2300      	movs	r3, #0
 8008a00:	228c      	movs	r2, #140	; 0x8c
 8008a02:	2193      	movs	r1, #147	; 0x93
 8008a04:	481f      	ldr	r0, [pc, #124]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 8008a06:	f7f9 f9cb 	bl	8001da0 <EF_PutString>
			predefinedActivityCzyszczenie(0);
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f7fc fb7e 	bl	800510c <predefinedActivityCzyszczenie>
			sprintf((char*)Msg, "ON");
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 8008a10:	e02f      	b.n	8008a72 <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 8008a12:	4b1a      	ldr	r3, [pc, #104]	; (8008a7c <predefinedActivityTouchAction+0x1bc>)
 8008a14:	2201      	movs	r2, #1
 8008a16:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008a18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	230a      	movs	r3, #10
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	2328      	movs	r3, #40	; 0x28
 8008a24:	2278      	movs	r2, #120	; 0x78
 8008a26:	2178      	movs	r1, #120	; 0x78
 8008a28:	2064      	movs	r0, #100	; 0x64
 8008a2a:	f7f8 ff4e 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8008a2e:	4918      	ldr	r1, [pc, #96]	; (8008a90 <predefinedActivityTouchAction+0x1d0>)
 8008a30:	4814      	ldr	r0, [pc, #80]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 8008a32:	f00a fb65 	bl	8013100 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008a36:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008a3a:	9301      	str	r3, [sp, #4]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	2300      	movs	r3, #0
 8008a42:	227a      	movs	r2, #122	; 0x7a
 8008a44:	2169      	movs	r1, #105	; 0x69
 8008a46:	480f      	ldr	r0, [pc, #60]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 8008a48:	f7f9 f9aa 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "ON");
 8008a4c:	490f      	ldr	r1, [pc, #60]	; (8008a8c <predefinedActivityTouchAction+0x1cc>)
 8008a4e:	480d      	ldr	r0, [pc, #52]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 8008a50:	f00a fb56 	bl	8013100 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008a54:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	228c      	movs	r2, #140	; 0x8c
 8008a62:	2193      	movs	r1, #147	; 0x93
 8008a64:	4807      	ldr	r0, [pc, #28]	; (8008a84 <predefinedActivityTouchAction+0x1c4>)
 8008a66:	f7f9 f99b 	bl	8001da0 <EF_PutString>
			predefinedActivityCzyszczenie(1);
 8008a6a:	2001      	movs	r0, #1
 8008a6c:	f7fc fb4e 	bl	800510c <predefinedActivityCzyszczenie>
}
 8008a70:	e7ff      	b.n	8008a72 <predefinedActivityTouchAction+0x1b2>
 8008a72:	bf00      	nop
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000250 	.word	0x20000250
 8008a80:	080173c8 	.word	0x080173c8
 8008a84:	200002cc 	.word	0x200002cc
 8008a88:	080173d4 	.word	0x080173d4
 8008a8c:	080173d8 	.word	0x080173d8
 8008a90:	080173dc 	.word	0x080173dc

08008a94 <WSONEincreaseNumberOfLedOnTFT>:
//
// Handling Touch to increase number of WS LED
//

void WSONEincreaseNumberOfLedOnTFT(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af02      	add	r7, sp, #8
	if(NrOfLeds < 98)
 8008a9a:	4b17      	ldr	r3, [pc, #92]	; (8008af8 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	2b61      	cmp	r3, #97	; 0x61
 8008aa0:	d806      	bhi.n	8008ab0 <WSONEincreaseNumberOfLedOnTFT+0x1c>
			{
				NrOfLeds++;
 8008aa2:	4b15      	ldr	r3, [pc, #84]	; (8008af8 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	4b13      	ldr	r3, [pc, #76]	; (8008af8 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	e002      	b.n	8008ab6 <WSONEincreaseNumberOfLedOnTFT+0x22>
			}
			else
			{
				NrOfLeds = 1;
 8008ab0:	4b11      	ldr	r3, [pc, #68]	; (8008af8 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	701a      	strb	r2, [r3, #0]
			}
			if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008ab6:	4b10      	ldr	r3, [pc, #64]	; (8008af8 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b09      	cmp	r3, #9
 8008abc:	d807      	bhi.n	8008ace <WSONEincreaseNumberOfLedOnTFT+0x3a>
 8008abe:	4b0e      	ldr	r3, [pc, #56]	; (8008af8 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	490d      	ldr	r1, [pc, #52]	; (8008afc <WSONEincreaseNumberOfLedOnTFT+0x68>)
 8008ac6:	480e      	ldr	r0, [pc, #56]	; (8008b00 <WSONEincreaseNumberOfLedOnTFT+0x6c>)
 8008ac8:	f00a fb1a 	bl	8013100 <siprintf>
 8008acc:	e006      	b.n	8008adc <WSONEincreaseNumberOfLedOnTFT+0x48>
			else sprintf((char*)Msg, " %d", NrOfLeds);
 8008ace:	4b0a      	ldr	r3, [pc, #40]	; (8008af8 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	490b      	ldr	r1, [pc, #44]	; (8008b04 <WSONEincreaseNumberOfLedOnTFT+0x70>)
 8008ad6:	480a      	ldr	r0, [pc, #40]	; (8008b00 <WSONEincreaseNumberOfLedOnTFT+0x6c>)
 8008ad8:	f00a fb12 	bl	8013100 <siprintf>
			EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008adc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	223c      	movs	r2, #60	; 0x3c
 8008aea:	21ac      	movs	r1, #172	; 0xac
 8008aec:	4804      	ldr	r0, [pc, #16]	; (8008b00 <WSONEincreaseNumberOfLedOnTFT+0x6c>)
 8008aee:	f7f9 f957 	bl	8001da0 <EF_PutString>
}
 8008af2:	bf00      	nop
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20000034 	.word	0x20000034
 8008afc:	080173e8 	.word	0x080173e8
 8008b00:	200002cc 	.word	0x200002cc
 8008b04:	080173f0 	.word	0x080173f0

08008b08 <WSONEdecreaseNumberOfLedOnTFT>:

void WSONEdecreaseNumberOfLedOnTFT(void)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af02      	add	r7, sp, #8
	if(NrOfLeds > 0)
 8008b0e:	4b17      	ldr	r3, [pc, #92]	; (8008b6c <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d006      	beq.n	8008b24 <WSONEdecreaseNumberOfLedOnTFT+0x1c>
			{
				NrOfLeds--;
 8008b16:	4b15      	ldr	r3, [pc, #84]	; (8008b6c <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b20:	701a      	strb	r2, [r3, #0]
 8008b22:	e002      	b.n	8008b2a <WSONEdecreaseNumberOfLedOnTFT+0x22>
			}
			else
			{
				NrOfLeds = 99;
 8008b24:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b26:	2263      	movs	r2, #99	; 0x63
 8008b28:	701a      	strb	r2, [r3, #0]
			}
			if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008b2a:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2b09      	cmp	r3, #9
 8008b30:	d807      	bhi.n	8008b42 <WSONEdecreaseNumberOfLedOnTFT+0x3a>
 8008b32:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	461a      	mov	r2, r3
 8008b38:	490d      	ldr	r1, [pc, #52]	; (8008b70 <WSONEdecreaseNumberOfLedOnTFT+0x68>)
 8008b3a:	480e      	ldr	r0, [pc, #56]	; (8008b74 <WSONEdecreaseNumberOfLedOnTFT+0x6c>)
 8008b3c:	f00a fae0 	bl	8013100 <siprintf>
 8008b40:	e006      	b.n	8008b50 <WSONEdecreaseNumberOfLedOnTFT+0x48>
			else sprintf((char*)Msg, " %d", NrOfLeds);
 8008b42:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	490b      	ldr	r1, [pc, #44]	; (8008b78 <WSONEdecreaseNumberOfLedOnTFT+0x70>)
 8008b4a:	480a      	ldr	r0, [pc, #40]	; (8008b74 <WSONEdecreaseNumberOfLedOnTFT+0x6c>)
 8008b4c:	f00a fad8 	bl	8013100 <siprintf>
			EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008b50:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	2301      	movs	r3, #1
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	223c      	movs	r2, #60	; 0x3c
 8008b5e:	21ac      	movs	r1, #172	; 0xac
 8008b60:	4804      	ldr	r0, [pc, #16]	; (8008b74 <WSONEdecreaseNumberOfLedOnTFT+0x6c>)
 8008b62:	f7f9 f91d 	bl	8001da0 <EF_PutString>
}
 8008b66:	bf00      	nop
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000034 	.word	0x20000034
 8008b70:	080173e8 	.word	0x080173e8
 8008b74:	200002cc 	.word	0x200002cc
 8008b78:	080173f0 	.word	0x080173f0

08008b7c <increaseNumberOfWSLedOnTFT>:

void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af02      	add	r7, sp, #8
 8008b82:	4603      	mov	r3, r0
 8008b84:	460a      	mov	r2, r1
 8008b86:	71fb      	strb	r3, [r7, #7]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	2bd8      	cmp	r3, #216	; 0xd8
 8008b90:	d905      	bls.n	8008b9e <increaseNumberOfWSLedOnTFT+0x22>
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	2bf7      	cmp	r3, #247	; 0xf7
 8008b96:	d802      	bhi.n	8008b9e <increaseNumberOfWSLedOnTFT+0x22>
	{
		WSONEincreaseNumberOfLedOnTFT();
 8008b98:	f7ff ff7c 	bl	8008a94 <WSONEincreaseNumberOfLedOnTFT>
		sprintf((char*)Msg, "OK");
		EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 8008b9c:	e03f      	b.n	8008c1e <increaseNumberOfWSLedOnTFT+0xa2>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 8008b9e:	79fb      	ldrb	r3, [r7, #7]
 8008ba0:	2bfb      	cmp	r3, #251	; 0xfb
 8008ba2:	d93c      	bls.n	8008c1e <increaseNumberOfWSLedOnTFT+0xa2>
		if(NrOfLeds < 90)
 8008ba4:	4b20      	ldr	r3, [pc, #128]	; (8008c28 <increaseNumberOfWSLedOnTFT+0xac>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b59      	cmp	r3, #89	; 0x59
 8008baa:	d806      	bhi.n	8008bba <increaseNumberOfWSLedOnTFT+0x3e>
			NrOfLeds = NrOfLeds + 10;
 8008bac:	4b1e      	ldr	r3, [pc, #120]	; (8008c28 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	330a      	adds	r3, #10
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	4b1c      	ldr	r3, [pc, #112]	; (8008c28 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bb6:	701a      	strb	r2, [r3, #0]
 8008bb8:	e013      	b.n	8008be2 <increaseNumberOfWSLedOnTFT+0x66>
			NrOfLeds = (NrOfLeds + 10) % 99;
 8008bba:	4b1b      	ldr	r3, [pc, #108]	; (8008c28 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	f103 020a 	add.w	r2, r3, #10
 8008bc2:	4b1a      	ldr	r3, [pc, #104]	; (8008c2c <increaseNumberOfWSLedOnTFT+0xb0>)
 8008bc4:	fb83 1302 	smull	r1, r3, r3, r2
 8008bc8:	4413      	add	r3, r2
 8008bca:	1199      	asrs	r1, r3, #6
 8008bcc:	17d3      	asrs	r3, r2, #31
 8008bce:	1ac9      	subs	r1, r1, r3
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	440b      	add	r3, r1
 8008bd6:	0159      	lsls	r1, r3, #5
 8008bd8:	440b      	add	r3, r1
 8008bda:	1ad1      	subs	r1, r2, r3
 8008bdc:	b2ca      	uxtb	r2, r1
 8008bde:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <increaseNumberOfWSLedOnTFT+0xac>)
 8008be0:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008be2:	4b11      	ldr	r3, [pc, #68]	; (8008c28 <increaseNumberOfWSLedOnTFT+0xac>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2b09      	cmp	r3, #9
 8008be8:	d807      	bhi.n	8008bfa <increaseNumberOfWSLedOnTFT+0x7e>
 8008bea:	4b0f      	ldr	r3, [pc, #60]	; (8008c28 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	490f      	ldr	r1, [pc, #60]	; (8008c30 <increaseNumberOfWSLedOnTFT+0xb4>)
 8008bf2:	4810      	ldr	r0, [pc, #64]	; (8008c34 <increaseNumberOfWSLedOnTFT+0xb8>)
 8008bf4:	f00a fa84 	bl	8013100 <siprintf>
 8008bf8:	e006      	b.n	8008c08 <increaseNumberOfWSLedOnTFT+0x8c>
	else sprintf((char*)Msg, " %d", NrOfLeds);
 8008bfa:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	490d      	ldr	r1, [pc, #52]	; (8008c38 <increaseNumberOfWSLedOnTFT+0xbc>)
 8008c02:	480c      	ldr	r0, [pc, #48]	; (8008c34 <increaseNumberOfWSLedOnTFT+0xb8>)
 8008c04:	f00a fa7c 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008c08:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	2301      	movs	r3, #1
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	2300      	movs	r3, #0
 8008c14:	223c      	movs	r2, #60	; 0x3c
 8008c16:	21ac      	movs	r1, #172	; 0xac
 8008c18:	4806      	ldr	r0, [pc, #24]	; (8008c34 <increaseNumberOfWSLedOnTFT+0xb8>)
 8008c1a:	f7f9 f8c1 	bl	8001da0 <EF_PutString>
}
 8008c1e:	bf00      	nop
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20000034 	.word	0x20000034
 8008c2c:	a57eb503 	.word	0xa57eb503
 8008c30:	080173e8 	.word	0x080173e8
 8008c34:	200002cc 	.word	0x200002cc
 8008c38:	080173f0 	.word	0x080173f0

08008c3c <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	460a      	mov	r2, r1
 8008c46:	71fb      	strb	r3, [r7, #7]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8008c4c:	79bb      	ldrb	r3, [r7, #6]
 8008c4e:	2b5e      	cmp	r3, #94	; 0x5e
 8008c50:	d91e      	bls.n	8008c90 <changeTypeOfWSLights+0x54>
 8008c52:	79bb      	ldrb	r3, [r7, #6]
 8008c54:	2b74      	cmp	r3, #116	; 0x74
 8008c56:	d81b      	bhi.n	8008c90 <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008c58:	79fb      	ldrb	r3, [r7, #7]
 8008c5a:	2b95      	cmp	r3, #149	; 0x95
 8008c5c:	d906      	bls.n	8008c6c <changeTypeOfWSLights+0x30>
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	2bbe      	cmp	r3, #190	; 0xbe
 8008c62:	d803      	bhi.n	8008c6c <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 8008c64:	201d      	movs	r0, #29
 8008c66:	f001 fa7b 	bl	800a160 <SendComand>
 8008c6a:	e010      	b.n	8008c8e <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008c6c:	79fb      	ldrb	r3, [r7, #7]
 8008c6e:	2bc9      	cmp	r3, #201	; 0xc9
 8008c70:	d906      	bls.n	8008c80 <changeTypeOfWSLights+0x44>
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	2bf2      	cmp	r3, #242	; 0xf2
 8008c76:	d803      	bhi.n	8008c80 <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 8008c78:	201e      	movs	r0, #30
 8008c7a:	f001 fa71 	bl	800a160 <SendComand>
 8008c7e:	e006      	b.n	8008c8e <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	2bfd      	cmp	r3, #253	; 0xfd
 8008c84:	d962      	bls.n	8008d4c <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 8008c86:	201f      	movs	r0, #31
 8008c88:	f001 fa6a 	bl	800a160 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008c8c:	e05e      	b.n	8008d4c <changeTypeOfWSLights+0x110>
 8008c8e:	e05d      	b.n	8008d4c <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 8008c90:	79bb      	ldrb	r3, [r7, #6]
 8008c92:	2b7c      	cmp	r3, #124	; 0x7c
 8008c94:	d91e      	bls.n	8008cd4 <changeTypeOfWSLights+0x98>
 8008c96:	79bb      	ldrb	r3, [r7, #6]
 8008c98:	2b92      	cmp	r3, #146	; 0x92
 8008c9a:	d81b      	bhi.n	8008cd4 <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008c9c:	79fb      	ldrb	r3, [r7, #7]
 8008c9e:	2b95      	cmp	r3, #149	; 0x95
 8008ca0:	d906      	bls.n	8008cb0 <changeTypeOfWSLights+0x74>
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	2bbe      	cmp	r3, #190	; 0xbe
 8008ca6:	d803      	bhi.n	8008cb0 <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 8008ca8:	2020      	movs	r0, #32
 8008caa:	f001 fa59 	bl	800a160 <SendComand>
 8008cae:	e010      	b.n	8008cd2 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	2bc9      	cmp	r3, #201	; 0xc9
 8008cb4:	d906      	bls.n	8008cc4 <changeTypeOfWSLights+0x88>
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	2bf2      	cmp	r3, #242	; 0xf2
 8008cba:	d803      	bhi.n	8008cc4 <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 8008cbc:	2021      	movs	r0, #33	; 0x21
 8008cbe:	f001 fa4f 	bl	800a160 <SendComand>
 8008cc2:	e006      	b.n	8008cd2 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	2bfd      	cmp	r3, #253	; 0xfd
 8008cc8:	d942      	bls.n	8008d50 <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 8008cca:	2022      	movs	r0, #34	; 0x22
 8008ccc:	f001 fa48 	bl	800a160 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008cd0:	e03e      	b.n	8008d50 <changeTypeOfWSLights+0x114>
 8008cd2:	e03d      	b.n	8008d50 <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8008cd4:	79bb      	ldrb	r3, [r7, #6]
 8008cd6:	2b9b      	cmp	r3, #155	; 0x9b
 8008cd8:	d91e      	bls.n	8008d18 <changeTypeOfWSLights+0xdc>
 8008cda:	79bb      	ldrb	r3, [r7, #6]
 8008cdc:	2bb1      	cmp	r3, #177	; 0xb1
 8008cde:	d81b      	bhi.n	8008d18 <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008ce0:	79fb      	ldrb	r3, [r7, #7]
 8008ce2:	2b13      	cmp	r3, #19
 8008ce4:	d906      	bls.n	8008cf4 <changeTypeOfWSLights+0xb8>
 8008ce6:	79fb      	ldrb	r3, [r7, #7]
 8008ce8:	2b64      	cmp	r3, #100	; 0x64
 8008cea:	d803      	bhi.n	8008cf4 <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 8008cec:	2023      	movs	r0, #35	; 0x23
 8008cee:	f001 fa37 	bl	800a160 <SendComand>
 8008cf2:	e010      	b.n	8008d16 <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008cf4:	79fb      	ldrb	r3, [r7, #7]
 8008cf6:	2b77      	cmp	r3, #119	; 0x77
 8008cf8:	d906      	bls.n	8008d08 <changeTypeOfWSLights+0xcc>
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	2bc8      	cmp	r3, #200	; 0xc8
 8008cfe:	d803      	bhi.n	8008d08 <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 8008d00:	201c      	movs	r0, #28
 8008d02:	f001 fa2d 	bl	800a160 <SendComand>
 8008d06:	e006      	b.n	8008d16 <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	2bdb      	cmp	r3, #219	; 0xdb
 8008d0c:	d922      	bls.n	8008d54 <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 8008d0e:	2024      	movs	r0, #36	; 0x24
 8008d10:	f001 fa26 	bl	800a160 <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008d14:	e01e      	b.n	8008d54 <changeTypeOfWSLights+0x118>
 8008d16:	e01d      	b.n	8008d54 <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8008d18:	79bb      	ldrb	r3, [r7, #6]
 8008d1a:	2bba      	cmp	r3, #186	; 0xba
 8008d1c:	d91b      	bls.n	8008d56 <changeTypeOfWSLights+0x11a>
 8008d1e:	79bb      	ldrb	r3, [r7, #6]
 8008d20:	2bd0      	cmp	r3, #208	; 0xd0
 8008d22:	d818      	bhi.n	8008d56 <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	2b45      	cmp	r3, #69	; 0x45
 8008d28:	d906      	bls.n	8008d38 <changeTypeOfWSLights+0xfc>
 8008d2a:	79fb      	ldrb	r3, [r7, #7]
 8008d2c:	2b96      	cmp	r3, #150	; 0x96
 8008d2e:	d803      	bhi.n	8008d38 <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 8008d30:	2026      	movs	r0, #38	; 0x26
 8008d32:	f001 fa15 	bl	800a160 <SendComand>
 8008d36:	e00e      	b.n	8008d56 <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008d38:	79fb      	ldrb	r3, [r7, #7]
 8008d3a:	2ba9      	cmp	r3, #169	; 0xa9
 8008d3c:	d90b      	bls.n	8008d56 <changeTypeOfWSLights+0x11a>
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	2bfa      	cmp	r3, #250	; 0xfa
 8008d42:	d808      	bhi.n	8008d56 <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 8008d44:	2027      	movs	r0, #39	; 0x27
 8008d46:	f001 fa0b 	bl	800a160 <SendComand>
		}
	}
}
 8008d4a:	e004      	b.n	8008d56 <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008d4c:	bf00      	nop
 8008d4e:	e002      	b.n	8008d56 <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008d50:	bf00      	nop
 8008d52:	e000      	b.n	8008d56 <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008d54:	bf00      	nop
}
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <firstSwitchTurn>:
////////////////////////////////////////////////////////////////////
//
// Functions to change state of relays to manage switches and lights
//
void firstSwitchTurn(uint8_t NewState)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af02      	add	r7, sp, #8
 8008d66:	4603      	mov	r3, r0
 8008d68:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d131      	bne.n	8008dd4 <firstSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8008d70:	2006      	movs	r0, #6
 8008d72:	f001 f9f5 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 8008d76:	4932      	ldr	r1, [pc, #200]	; (8008e40 <firstSwitchTurn+0xe0>)
 8008d78:	4832      	ldr	r0, [pc, #200]	; (8008e44 <firstSwitchTurn+0xe4>)
 8008d7a:	f002 f919 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008d7e:	4b32      	ldr	r3, [pc, #200]	; (8008e48 <firstSwitchTurn+0xe8>)
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d11e      	bne.n	8008dc4 <firstSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008d86:	4831      	ldr	r0, [pc, #196]	; (8008e4c <firstSwitchTurn+0xec>)
 8008d88:	f7f8 fdf0 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008d8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	2305      	movs	r3, #5
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	2315      	movs	r3, #21
 8008d98:	2221      	movs	r2, #33	; 0x21
 8008d9a:	2141      	movs	r1, #65	; 0x41
 8008d9c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008da0:	f7f8 fd93 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008da4:	492a      	ldr	r1, [pc, #168]	; (8008e50 <firstSwitchTurn+0xf0>)
 8008da6:	482b      	ldr	r0, [pc, #172]	; (8008e54 <firstSwitchTurn+0xf4>)
 8008da8:	f00a f9aa 	bl	8013100 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008dac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	2300      	movs	r3, #0
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	2300      	movs	r3, #0
 8008db8:	2243      	movs	r2, #67	; 0x43
 8008dba:	f240 1111 	movw	r1, #273	; 0x111
 8008dbe:	4825      	ldr	r0, [pc, #148]	; (8008e54 <firstSwitchTurn+0xf4>)
 8008dc0:	f7f8 ffee 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[0] = 0;
 8008dc4:	4b24      	ldr	r3, [pc, #144]	; (8008e58 <firstSwitchTurn+0xf8>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 0);
 8008dca:	2100      	movs	r1, #0
 8008dcc:	2001      	movs	r0, #1
 8008dce:	f7f9 ff51 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[0] = 1;
		EEPROM_RelayStateUpdate(1, 1);
	}
}
 8008dd2:	e030      	b.n	8008e36 <firstSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8008dd4:	2005      	movs	r0, #5
 8008dd6:	f001 f9c3 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 8008dda:	4920      	ldr	r1, [pc, #128]	; (8008e5c <firstSwitchTurn+0xfc>)
 8008ddc:	4819      	ldr	r0, [pc, #100]	; (8008e44 <firstSwitchTurn+0xe4>)
 8008dde:	f002 f8e7 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008de2:	4b19      	ldr	r3, [pc, #100]	; (8008e48 <firstSwitchTurn+0xe8>)
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d11e      	bne.n	8008e28 <firstSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008dea:	4818      	ldr	r0, [pc, #96]	; (8008e4c <firstSwitchTurn+0xec>)
 8008dec:	f7f8 fdbe 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008df0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	2305      	movs	r3, #5
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	2315      	movs	r3, #21
 8008dfc:	2221      	movs	r2, #33	; 0x21
 8008dfe:	2141      	movs	r1, #65	; 0x41
 8008e00:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008e04:	f7f8 fd61 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008e08:	4915      	ldr	r1, [pc, #84]	; (8008e60 <firstSwitchTurn+0x100>)
 8008e0a:	4812      	ldr	r0, [pc, #72]	; (8008e54 <firstSwitchTurn+0xf4>)
 8008e0c:	f00a f978 	bl	8013100 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008e10:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	2300      	movs	r3, #0
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	2243      	movs	r2, #67	; 0x43
 8008e1e:	f240 1111 	movw	r1, #273	; 0x111
 8008e22:	480c      	ldr	r0, [pc, #48]	; (8008e54 <firstSwitchTurn+0xf4>)
 8008e24:	f7f8 ffbc 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[0] = 1;
 8008e28:	4b0b      	ldr	r3, [pc, #44]	; (8008e58 <firstSwitchTurn+0xf8>)
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 1);
 8008e2e:	2101      	movs	r1, #1
 8008e30:	2001      	movs	r0, #1
 8008e32:	f7f9 ff1f 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	080173f4 	.word	0x080173f4
 8008e44:	200006c8 	.word	0x200006c8
 8008e48:	200002a0 	.word	0x200002a0
 8008e4c:	080289ec 	.word	0x080289ec
 8008e50:	080173d4 	.word	0x080173d4
 8008e54:	200002cc 	.word	0x200002cc
 8008e58:	200002b8 	.word	0x200002b8
 8008e5c:	08017400 	.word	0x08017400
 8008e60:	080173d8 	.word	0x080173d8

08008e64 <secondSwitchTurn>:
void secondSwitchTurn(uint8_t NewState)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af02      	add	r7, sp, #8
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d131      	bne.n	8008ed8 <secondSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8008e74:	2008      	movs	r0, #8
 8008e76:	f001 f973 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 8008e7a:	4932      	ldr	r1, [pc, #200]	; (8008f44 <secondSwitchTurn+0xe0>)
 8008e7c:	4832      	ldr	r0, [pc, #200]	; (8008f48 <secondSwitchTurn+0xe4>)
 8008e7e:	f002 f897 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008e82:	4b32      	ldr	r3, [pc, #200]	; (8008f4c <secondSwitchTurn+0xe8>)
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d11e      	bne.n	8008ec8 <secondSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008e8a:	4831      	ldr	r0, [pc, #196]	; (8008f50 <secondSwitchTurn+0xec>)
 8008e8c:	f7f8 fd6e 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008e90:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	2305      	movs	r3, #5
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	2315      	movs	r3, #21
 8008e9c:	2221      	movs	r2, #33	; 0x21
 8008e9e:	215f      	movs	r1, #95	; 0x5f
 8008ea0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008ea4:	f7f8 fd11 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008ea8:	492a      	ldr	r1, [pc, #168]	; (8008f54 <secondSwitchTurn+0xf0>)
 8008eaa:	482b      	ldr	r0, [pc, #172]	; (8008f58 <secondSwitchTurn+0xf4>)
 8008eac:	f00a f928 	bl	8013100 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008eb0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	2261      	movs	r2, #97	; 0x61
 8008ebe:	f240 1111 	movw	r1, #273	; 0x111
 8008ec2:	4825      	ldr	r0, [pc, #148]	; (8008f58 <secondSwitchTurn+0xf4>)
 8008ec4:	f7f8 ff6c 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[1] = 0;
 8008ec8:	4b24      	ldr	r3, [pc, #144]	; (8008f5c <secondSwitchTurn+0xf8>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 0);
 8008ece:	2100      	movs	r1, #0
 8008ed0:	2002      	movs	r0, #2
 8008ed2:	f7f9 fecf 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[1] = 1;
		EEPROM_RelayStateUpdate(2, 1);
	}
}
 8008ed6:	e030      	b.n	8008f3a <secondSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8008ed8:	2007      	movs	r0, #7
 8008eda:	f001 f941 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 8008ede:	4920      	ldr	r1, [pc, #128]	; (8008f60 <secondSwitchTurn+0xfc>)
 8008ee0:	4819      	ldr	r0, [pc, #100]	; (8008f48 <secondSwitchTurn+0xe4>)
 8008ee2:	f002 f865 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008ee6:	4b19      	ldr	r3, [pc, #100]	; (8008f4c <secondSwitchTurn+0xe8>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d11e      	bne.n	8008f2c <secondSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008eee:	4818      	ldr	r0, [pc, #96]	; (8008f50 <secondSwitchTurn+0xec>)
 8008ef0:	f7f8 fd3c 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008ef4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008ef8:	9301      	str	r3, [sp, #4]
 8008efa:	2305      	movs	r3, #5
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	2315      	movs	r3, #21
 8008f00:	2221      	movs	r2, #33	; 0x21
 8008f02:	215f      	movs	r1, #95	; 0x5f
 8008f04:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008f08:	f7f8 fcdf 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008f0c:	4915      	ldr	r1, [pc, #84]	; (8008f64 <secondSwitchTurn+0x100>)
 8008f0e:	4812      	ldr	r0, [pc, #72]	; (8008f58 <secondSwitchTurn+0xf4>)
 8008f10:	f00a f8f6 	bl	8013100 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008f14:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	2261      	movs	r2, #97	; 0x61
 8008f22:	f240 1111 	movw	r1, #273	; 0x111
 8008f26:	480c      	ldr	r0, [pc, #48]	; (8008f58 <secondSwitchTurn+0xf4>)
 8008f28:	f7f8 ff3a 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[1] = 1;
 8008f2c:	4b0b      	ldr	r3, [pc, #44]	; (8008f5c <secondSwitchTurn+0xf8>)
 8008f2e:	2201      	movs	r2, #1
 8008f30:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 1);
 8008f32:	2101      	movs	r1, #1
 8008f34:	2002      	movs	r0, #2
 8008f36:	f7f9 fe9d 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 8008f3a:	bf00      	nop
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	0801740c 	.word	0x0801740c
 8008f48:	200006c8 	.word	0x200006c8
 8008f4c:	200002a0 	.word	0x200002a0
 8008f50:	080289ec 	.word	0x080289ec
 8008f54:	080173d4 	.word	0x080173d4
 8008f58:	200002cc 	.word	0x200002cc
 8008f5c:	200002b8 	.word	0x200002b8
 8008f60:	08017418 	.word	0x08017418
 8008f64:	080173d8 	.word	0x080173d8

08008f68 <thirdSwitchTurn>:
void thirdSwitchTurn(uint8_t NewState)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af02      	add	r7, sp, #8
 8008f6e:	4603      	mov	r3, r0
 8008f70:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008f72:	79fb      	ldrb	r3, [r7, #7]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d131      	bne.n	8008fdc <thirdSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8008f78:	200a      	movs	r0, #10
 8008f7a:	f001 f8f1 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 8008f7e:	4932      	ldr	r1, [pc, #200]	; (8009048 <thirdSwitchTurn+0xe0>)
 8008f80:	4832      	ldr	r0, [pc, #200]	; (800904c <thirdSwitchTurn+0xe4>)
 8008f82:	f002 f815 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008f86:	4b32      	ldr	r3, [pc, #200]	; (8009050 <thirdSwitchTurn+0xe8>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d11e      	bne.n	8008fcc <thirdSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008f8e:	4831      	ldr	r0, [pc, #196]	; (8009054 <thirdSwitchTurn+0xec>)
 8008f90:	f7f8 fcec 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008f94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	2305      	movs	r3, #5
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	2315      	movs	r3, #21
 8008fa0:	2221      	movs	r2, #33	; 0x21
 8008fa2:	217d      	movs	r1, #125	; 0x7d
 8008fa4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008fa8:	f7f8 fc8f 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008fac:	492a      	ldr	r1, [pc, #168]	; (8009058 <thirdSwitchTurn+0xf0>)
 8008fae:	482b      	ldr	r0, [pc, #172]	; (800905c <thirdSwitchTurn+0xf4>)
 8008fb0:	f00a f8a6 	bl	8013100 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008fb4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	227f      	movs	r2, #127	; 0x7f
 8008fc2:	f240 1111 	movw	r1, #273	; 0x111
 8008fc6:	4825      	ldr	r0, [pc, #148]	; (800905c <thirdSwitchTurn+0xf4>)
 8008fc8:	f7f8 feea 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[2] = 0;
 8008fcc:	4b24      	ldr	r3, [pc, #144]	; (8009060 <thirdSwitchTurn+0xf8>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 0);
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	2003      	movs	r0, #3
 8008fd6:	f7f9 fe4d 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[2] = 1;
		EEPROM_RelayStateUpdate(3, 1);
	}
}
 8008fda:	e030      	b.n	800903e <thirdSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8008fdc:	2009      	movs	r0, #9
 8008fde:	f001 f8bf 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 8008fe2:	4920      	ldr	r1, [pc, #128]	; (8009064 <thirdSwitchTurn+0xfc>)
 8008fe4:	4819      	ldr	r0, [pc, #100]	; (800904c <thirdSwitchTurn+0xe4>)
 8008fe6:	f001 ffe3 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008fea:	4b19      	ldr	r3, [pc, #100]	; (8009050 <thirdSwitchTurn+0xe8>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d11e      	bne.n	8009030 <thirdSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008ff2:	4818      	ldr	r0, [pc, #96]	; (8009054 <thirdSwitchTurn+0xec>)
 8008ff4:	f7f8 fcba 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008ff8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	2305      	movs	r3, #5
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	2315      	movs	r3, #21
 8009004:	2221      	movs	r2, #33	; 0x21
 8009006:	217d      	movs	r1, #125	; 0x7d
 8009008:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800900c:	f7f8 fc5d 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8009010:	4915      	ldr	r1, [pc, #84]	; (8009068 <thirdSwitchTurn+0x100>)
 8009012:	4812      	ldr	r0, [pc, #72]	; (800905c <thirdSwitchTurn+0xf4>)
 8009014:	f00a f874 	bl	8013100 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8009018:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800901c:	9301      	str	r3, [sp, #4]
 800901e:	2300      	movs	r3, #0
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	2300      	movs	r3, #0
 8009024:	227f      	movs	r2, #127	; 0x7f
 8009026:	f240 1111 	movw	r1, #273	; 0x111
 800902a:	480c      	ldr	r0, [pc, #48]	; (800905c <thirdSwitchTurn+0xf4>)
 800902c:	f7f8 feb8 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[2] = 1;
 8009030:	4b0b      	ldr	r3, [pc, #44]	; (8009060 <thirdSwitchTurn+0xf8>)
 8009032:	2201      	movs	r2, #1
 8009034:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 1);
 8009036:	2101      	movs	r1, #1
 8009038:	2003      	movs	r0, #3
 800903a:	f7f9 fe1b 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 800903e:	bf00      	nop
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	08017424 	.word	0x08017424
 800904c:	200006c8 	.word	0x200006c8
 8009050:	200002a0 	.word	0x200002a0
 8009054:	080289ec 	.word	0x080289ec
 8009058:	080173d4 	.word	0x080173d4
 800905c:	200002cc 	.word	0x200002cc
 8009060:	200002b8 	.word	0x200002b8
 8009064:	08017430 	.word	0x08017430
 8009068:	080173d8 	.word	0x080173d8

0800906c <fourthSwitchTurn>:
void fourthSwitchTurn(uint8_t NewState)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af02      	add	r7, sp, #8
 8009072:	4603      	mov	r3, r0
 8009074:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8009076:	79fb      	ldrb	r3, [r7, #7]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d131      	bne.n	80090e0 <fourthSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 800907c:	200c      	movs	r0, #12
 800907e:	f001 f86f 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 8009082:	4932      	ldr	r1, [pc, #200]	; (800914c <fourthSwitchTurn+0xe0>)
 8009084:	4832      	ldr	r0, [pc, #200]	; (8009150 <fourthSwitchTurn+0xe4>)
 8009086:	f001 ff93 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 800908a:	4b32      	ldr	r3, [pc, #200]	; (8009154 <fourthSwitchTurn+0xe8>)
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b02      	cmp	r3, #2
 8009090:	d11e      	bne.n	80090d0 <fourthSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8009092:	4831      	ldr	r0, [pc, #196]	; (8009158 <fourthSwitchTurn+0xec>)
 8009094:	f7f8 fc6a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8009098:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	2305      	movs	r3, #5
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	2315      	movs	r3, #21
 80090a4:	2221      	movs	r2, #33	; 0x21
 80090a6:	219b      	movs	r1, #155	; 0x9b
 80090a8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80090ac:	f7f8 fc0d 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 80090b0:	492a      	ldr	r1, [pc, #168]	; (800915c <fourthSwitchTurn+0xf0>)
 80090b2:	482b      	ldr	r0, [pc, #172]	; (8009160 <fourthSwitchTurn+0xf4>)
 80090b4:	f00a f824 	bl	8013100 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80090b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	2300      	movs	r3, #0
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	2300      	movs	r3, #0
 80090c4:	229d      	movs	r2, #157	; 0x9d
 80090c6:	f240 1111 	movw	r1, #273	; 0x111
 80090ca:	4825      	ldr	r0, [pc, #148]	; (8009160 <fourthSwitchTurn+0xf4>)
 80090cc:	f7f8 fe68 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[3] = 0;
 80090d0:	4b24      	ldr	r3, [pc, #144]	; (8009164 <fourthSwitchTurn+0xf8>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 0);
 80090d6:	2100      	movs	r1, #0
 80090d8:	2004      	movs	r0, #4
 80090da:	f7f9 fdcb 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[3] = 1;
		EEPROM_RelayStateUpdate(4, 1);
	}
}
 80090de:	e030      	b.n	8009142 <fourthSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 80090e0:	200b      	movs	r0, #11
 80090e2:	f001 f83d 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 80090e6:	4920      	ldr	r1, [pc, #128]	; (8009168 <fourthSwitchTurn+0xfc>)
 80090e8:	4819      	ldr	r0, [pc, #100]	; (8009150 <fourthSwitchTurn+0xe4>)
 80090ea:	f001 ff61 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 80090ee:	4b19      	ldr	r3, [pc, #100]	; (8009154 <fourthSwitchTurn+0xe8>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d11e      	bne.n	8009134 <fourthSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 80090f6:	4818      	ldr	r0, [pc, #96]	; (8009158 <fourthSwitchTurn+0xec>)
 80090f8:	f7f8 fc38 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80090fc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	2305      	movs	r3, #5
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	2315      	movs	r3, #21
 8009108:	2221      	movs	r2, #33	; 0x21
 800910a:	219b      	movs	r1, #155	; 0x9b
 800910c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8009110:	f7f8 fbdb 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8009114:	4915      	ldr	r1, [pc, #84]	; (800916c <fourthSwitchTurn+0x100>)
 8009116:	4812      	ldr	r0, [pc, #72]	; (8009160 <fourthSwitchTurn+0xf4>)
 8009118:	f009 fff2 	bl	8013100 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800911c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	2300      	movs	r3, #0
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	2300      	movs	r3, #0
 8009128:	229d      	movs	r2, #157	; 0x9d
 800912a:	f240 1111 	movw	r1, #273	; 0x111
 800912e:	480c      	ldr	r0, [pc, #48]	; (8009160 <fourthSwitchTurn+0xf4>)
 8009130:	f7f8 fe36 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[3] = 1;
 8009134:	4b0b      	ldr	r3, [pc, #44]	; (8009164 <fourthSwitchTurn+0xf8>)
 8009136:	2201      	movs	r2, #1
 8009138:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 1);
 800913a:	2101      	movs	r1, #1
 800913c:	2004      	movs	r0, #4
 800913e:	f7f9 fd99 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 8009142:	bf00      	nop
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	0801743c 	.word	0x0801743c
 8009150:	200006c8 	.word	0x200006c8
 8009154:	200002a0 	.word	0x200002a0
 8009158:	080289ec 	.word	0x080289ec
 800915c:	080173d4 	.word	0x080173d4
 8009160:	200002cc 	.word	0x200002cc
 8009164:	200002b8 	.word	0x200002b8
 8009168:	08017448 	.word	0x08017448
 800916c:	080173d8 	.word	0x080173d8

08009170 <firstLightTurn>:


void firstLightTurn(uint8_t NewState)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af02      	add	r7, sp, #8
 8009176:	4603      	mov	r3, r0
 8009178:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d12f      	bne.n	80091e0 <firstLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8009180:	200e      	movs	r0, #14
 8009182:	f000 ffed 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 8009186:	4930      	ldr	r1, [pc, #192]	; (8009248 <firstLightTurn+0xd8>)
 8009188:	4830      	ldr	r0, [pc, #192]	; (800924c <firstLightTurn+0xdc>)
 800918a:	f001 ff11 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 800918e:	4b30      	ldr	r3, [pc, #192]	; (8009250 <firstLightTurn+0xe0>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b05      	cmp	r3, #5
 8009194:	d11c      	bne.n	80091d0 <firstLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8009196:	482f      	ldr	r0, [pc, #188]	; (8009254 <firstLightTurn+0xe4>)
 8009198:	f7f8 fbe8 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800919c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	2305      	movs	r3, #5
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	2315      	movs	r3, #21
 80091a8:	2221      	movs	r2, #33	; 0x21
 80091aa:	2141      	movs	r1, #65	; 0x41
 80091ac:	20c8      	movs	r0, #200	; 0xc8
 80091ae:	f7f8 fb8c 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 80091b2:	4929      	ldr	r1, [pc, #164]	; (8009258 <firstLightTurn+0xe8>)
 80091b4:	4829      	ldr	r0, [pc, #164]	; (800925c <firstLightTurn+0xec>)
 80091b6:	f009 ffa3 	bl	8013100 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80091ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	2300      	movs	r3, #0
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	2300      	movs	r3, #0
 80091c6:	2243      	movs	r2, #67	; 0x43
 80091c8:	21cb      	movs	r1, #203	; 0xcb
 80091ca:	4824      	ldr	r0, [pc, #144]	; (800925c <firstLightTurn+0xec>)
 80091cc:	f7f8 fde8 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[0] = 0;
 80091d0:	4b23      	ldr	r3, [pc, #140]	; (8009260 <firstLightTurn+0xf0>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 0);
 80091d6:	2100      	movs	r1, #0
 80091d8:	2001      	movs	r0, #1
 80091da:	f7f9 fd84 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[0] = 1;
		EEPROM_LightStateUpdate(1, 1);
	}
}
 80091de:	e02e      	b.n	800923e <firstLightTurn+0xce>
		SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 80091e0:	200d      	movs	r0, #13
 80091e2:	f000 ffbd 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 80091e6:	491f      	ldr	r1, [pc, #124]	; (8009264 <firstLightTurn+0xf4>)
 80091e8:	4818      	ldr	r0, [pc, #96]	; (800924c <firstLightTurn+0xdc>)
 80091ea:	f001 fee1 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80091ee:	4b18      	ldr	r3, [pc, #96]	; (8009250 <firstLightTurn+0xe0>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b05      	cmp	r3, #5
 80091f4:	d11c      	bne.n	8009230 <firstLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 80091f6:	4817      	ldr	r0, [pc, #92]	; (8009254 <firstLightTurn+0xe4>)
 80091f8:	f7f8 fbb8 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80091fc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	2305      	movs	r3, #5
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	2315      	movs	r3, #21
 8009208:	2221      	movs	r2, #33	; 0x21
 800920a:	2141      	movs	r1, #65	; 0x41
 800920c:	20c8      	movs	r0, #200	; 0xc8
 800920e:	f7f8 fb5c 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8009212:	4915      	ldr	r1, [pc, #84]	; (8009268 <firstLightTurn+0xf8>)
 8009214:	4811      	ldr	r0, [pc, #68]	; (800925c <firstLightTurn+0xec>)
 8009216:	f009 ff73 	bl	8013100 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800921a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	2300      	movs	r3, #0
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	2300      	movs	r3, #0
 8009226:	2243      	movs	r2, #67	; 0x43
 8009228:	21cb      	movs	r1, #203	; 0xcb
 800922a:	480c      	ldr	r0, [pc, #48]	; (800925c <firstLightTurn+0xec>)
 800922c:	f7f8 fdb8 	bl	8001da0 <EF_PutString>
		LightsButtonState[0] = 1;
 8009230:	4b0b      	ldr	r3, [pc, #44]	; (8009260 <firstLightTurn+0xf0>)
 8009232:	2201      	movs	r2, #1
 8009234:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 1);
 8009236:	2101      	movs	r1, #1
 8009238:	2001      	movs	r0, #1
 800923a:	f7f9 fd54 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	08017454 	.word	0x08017454
 800924c:	200006c8 	.word	0x200006c8
 8009250:	200002a0 	.word	0x200002a0
 8009254:	080289ec 	.word	0x080289ec
 8009258:	080173d4 	.word	0x080173d4
 800925c:	200002cc 	.word	0x200002cc
 8009260:	200002bc 	.word	0x200002bc
 8009264:	08017460 	.word	0x08017460
 8009268:	080173d8 	.word	0x080173d8

0800926c <secondLightTurn>:
void secondLightTurn(uint8_t NewState)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af02      	add	r7, sp, #8
 8009272:	4603      	mov	r3, r0
 8009274:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8009276:	79fb      	ldrb	r3, [r7, #7]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d12f      	bne.n	80092dc <secondLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 800927c:	2010      	movs	r0, #16
 800927e:	f000 ff6f 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 8009282:	4930      	ldr	r1, [pc, #192]	; (8009344 <secondLightTurn+0xd8>)
 8009284:	4830      	ldr	r0, [pc, #192]	; (8009348 <secondLightTurn+0xdc>)
 8009286:	f001 fe93 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 800928a:	4b30      	ldr	r3, [pc, #192]	; (800934c <secondLightTurn+0xe0>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	2b05      	cmp	r3, #5
 8009290:	d11c      	bne.n	80092cc <secondLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8009292:	482f      	ldr	r0, [pc, #188]	; (8009350 <secondLightTurn+0xe4>)
 8009294:	f7f8 fb6a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8009298:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	2305      	movs	r3, #5
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	2315      	movs	r3, #21
 80092a4:	2221      	movs	r2, #33	; 0x21
 80092a6:	215f      	movs	r1, #95	; 0x5f
 80092a8:	20c8      	movs	r0, #200	; 0xc8
 80092aa:	f7f8 fb0e 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 80092ae:	4929      	ldr	r1, [pc, #164]	; (8009354 <secondLightTurn+0xe8>)
 80092b0:	4829      	ldr	r0, [pc, #164]	; (8009358 <secondLightTurn+0xec>)
 80092b2:	f009 ff25 	bl	8013100 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80092b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	2300      	movs	r3, #0
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	2300      	movs	r3, #0
 80092c2:	2261      	movs	r2, #97	; 0x61
 80092c4:	21cb      	movs	r1, #203	; 0xcb
 80092c6:	4824      	ldr	r0, [pc, #144]	; (8009358 <secondLightTurn+0xec>)
 80092c8:	f7f8 fd6a 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[1] = 0;
 80092cc:	4b23      	ldr	r3, [pc, #140]	; (800935c <secondLightTurn+0xf0>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 0);
 80092d2:	2100      	movs	r1, #0
 80092d4:	2002      	movs	r0, #2
 80092d6:	f7f9 fd06 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[1] = 1;
		EEPROM_LightStateUpdate(2, 1);
	}
}
 80092da:	e02e      	b.n	800933a <secondLightTurn+0xce>
		SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 80092dc:	200f      	movs	r0, #15
 80092de:	f000 ff3f 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 80092e2:	491f      	ldr	r1, [pc, #124]	; (8009360 <secondLightTurn+0xf4>)
 80092e4:	4818      	ldr	r0, [pc, #96]	; (8009348 <secondLightTurn+0xdc>)
 80092e6:	f001 fe63 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80092ea:	4b18      	ldr	r3, [pc, #96]	; (800934c <secondLightTurn+0xe0>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	2b05      	cmp	r3, #5
 80092f0:	d11c      	bne.n	800932c <secondLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 80092f2:	4817      	ldr	r0, [pc, #92]	; (8009350 <secondLightTurn+0xe4>)
 80092f4:	f7f8 fb3a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80092f8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	2305      	movs	r3, #5
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	2315      	movs	r3, #21
 8009304:	2221      	movs	r2, #33	; 0x21
 8009306:	215f      	movs	r1, #95	; 0x5f
 8009308:	20c8      	movs	r0, #200	; 0xc8
 800930a:	f7f8 fade 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 800930e:	4915      	ldr	r1, [pc, #84]	; (8009364 <secondLightTurn+0xf8>)
 8009310:	4811      	ldr	r0, [pc, #68]	; (8009358 <secondLightTurn+0xec>)
 8009312:	f009 fef5 	bl	8013100 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8009316:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800931a:	9301      	str	r3, [sp, #4]
 800931c:	2300      	movs	r3, #0
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	2300      	movs	r3, #0
 8009322:	2261      	movs	r2, #97	; 0x61
 8009324:	21cb      	movs	r1, #203	; 0xcb
 8009326:	480c      	ldr	r0, [pc, #48]	; (8009358 <secondLightTurn+0xec>)
 8009328:	f7f8 fd3a 	bl	8001da0 <EF_PutString>
		LightsButtonState[1] = 1;
 800932c:	4b0b      	ldr	r3, [pc, #44]	; (800935c <secondLightTurn+0xf0>)
 800932e:	2201      	movs	r2, #1
 8009330:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 1);
 8009332:	2101      	movs	r1, #1
 8009334:	2002      	movs	r0, #2
 8009336:	f7f9 fcd6 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	0801746c 	.word	0x0801746c
 8009348:	200006c8 	.word	0x200006c8
 800934c:	200002a0 	.word	0x200002a0
 8009350:	080289ec 	.word	0x080289ec
 8009354:	080173d4 	.word	0x080173d4
 8009358:	200002cc 	.word	0x200002cc
 800935c:	200002bc 	.word	0x200002bc
 8009360:	08017478 	.word	0x08017478
 8009364:	080173d8 	.word	0x080173d8

08009368 <thirdLightTurn>:
void thirdLightTurn(uint8_t NewState)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af02      	add	r7, sp, #8
 800936e:	4603      	mov	r3, r0
 8009370:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8009372:	79fb      	ldrb	r3, [r7, #7]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d12f      	bne.n	80093d8 <thirdLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8009378:	2012      	movs	r0, #18
 800937a:	f000 fef1 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 800937e:	4930      	ldr	r1, [pc, #192]	; (8009440 <thirdLightTurn+0xd8>)
 8009380:	4830      	ldr	r0, [pc, #192]	; (8009444 <thirdLightTurn+0xdc>)
 8009382:	f001 fe15 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8009386:	4b30      	ldr	r3, [pc, #192]	; (8009448 <thirdLightTurn+0xe0>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	2b05      	cmp	r3, #5
 800938c:	d11c      	bne.n	80093c8 <thirdLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 800938e:	482f      	ldr	r0, [pc, #188]	; (800944c <thirdLightTurn+0xe4>)
 8009390:	f7f8 faec 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8009394:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	2305      	movs	r3, #5
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	2315      	movs	r3, #21
 80093a0:	2221      	movs	r2, #33	; 0x21
 80093a2:	217d      	movs	r1, #125	; 0x7d
 80093a4:	20c8      	movs	r0, #200	; 0xc8
 80093a6:	f7f8 fa90 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 80093aa:	4929      	ldr	r1, [pc, #164]	; (8009450 <thirdLightTurn+0xe8>)
 80093ac:	4829      	ldr	r0, [pc, #164]	; (8009454 <thirdLightTurn+0xec>)
 80093ae:	f009 fea7 	bl	8013100 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80093b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80093b6:	9301      	str	r3, [sp, #4]
 80093b8:	2300      	movs	r3, #0
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	2300      	movs	r3, #0
 80093be:	227f      	movs	r2, #127	; 0x7f
 80093c0:	21cb      	movs	r1, #203	; 0xcb
 80093c2:	4824      	ldr	r0, [pc, #144]	; (8009454 <thirdLightTurn+0xec>)
 80093c4:	f7f8 fcec 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[2] = 0;
 80093c8:	4b23      	ldr	r3, [pc, #140]	; (8009458 <thirdLightTurn+0xf0>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 0);
 80093ce:	2100      	movs	r1, #0
 80093d0:	2003      	movs	r0, #3
 80093d2:	f7f9 fc88 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[2] = 1;
		EEPROM_LightStateUpdate(3, 1);
	}
}
 80093d6:	e02e      	b.n	8009436 <thirdLightTurn+0xce>
		SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 80093d8:	2011      	movs	r0, #17
 80093da:	f000 fec1 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 80093de:	491f      	ldr	r1, [pc, #124]	; (800945c <thirdLightTurn+0xf4>)
 80093e0:	4818      	ldr	r0, [pc, #96]	; (8009444 <thirdLightTurn+0xdc>)
 80093e2:	f001 fde5 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80093e6:	4b18      	ldr	r3, [pc, #96]	; (8009448 <thirdLightTurn+0xe0>)
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	2b05      	cmp	r3, #5
 80093ec:	d11c      	bne.n	8009428 <thirdLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 80093ee:	4817      	ldr	r0, [pc, #92]	; (800944c <thirdLightTurn+0xe4>)
 80093f0:	f7f8 fabc 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80093f4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	2305      	movs	r3, #5
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	2315      	movs	r3, #21
 8009400:	2221      	movs	r2, #33	; 0x21
 8009402:	217d      	movs	r1, #125	; 0x7d
 8009404:	20c8      	movs	r0, #200	; 0xc8
 8009406:	f7f8 fa60 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 800940a:	4915      	ldr	r1, [pc, #84]	; (8009460 <thirdLightTurn+0xf8>)
 800940c:	4811      	ldr	r0, [pc, #68]	; (8009454 <thirdLightTurn+0xec>)
 800940e:	f009 fe77 	bl	8013100 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8009412:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	2300      	movs	r3, #0
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	2300      	movs	r3, #0
 800941e:	227f      	movs	r2, #127	; 0x7f
 8009420:	21cb      	movs	r1, #203	; 0xcb
 8009422:	480c      	ldr	r0, [pc, #48]	; (8009454 <thirdLightTurn+0xec>)
 8009424:	f7f8 fcbc 	bl	8001da0 <EF_PutString>
		LightsButtonState[2] = 1;
 8009428:	4b0b      	ldr	r3, [pc, #44]	; (8009458 <thirdLightTurn+0xf0>)
 800942a:	2201      	movs	r2, #1
 800942c:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 1);
 800942e:	2101      	movs	r1, #1
 8009430:	2003      	movs	r0, #3
 8009432:	f7f9 fc58 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8009436:	bf00      	nop
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	08017484 	.word	0x08017484
 8009444:	200006c8 	.word	0x200006c8
 8009448:	200002a0 	.word	0x200002a0
 800944c:	080289ec 	.word	0x080289ec
 8009450:	080173d4 	.word	0x080173d4
 8009454:	200002cc 	.word	0x200002cc
 8009458:	200002bc 	.word	0x200002bc
 800945c:	08017490 	.word	0x08017490
 8009460:	080173d8 	.word	0x080173d8

08009464 <fourthLightTurn>:
void fourthLightTurn(uint8_t NewState)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af02      	add	r7, sp, #8
 800946a:	4603      	mov	r3, r0
 800946c:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d12f      	bne.n	80094d4 <fourthLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8009474:	2014      	movs	r0, #20
 8009476:	f000 fe73 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 800947a:	4930      	ldr	r1, [pc, #192]	; (800953c <fourthLightTurn+0xd8>)
 800947c:	4830      	ldr	r0, [pc, #192]	; (8009540 <fourthLightTurn+0xdc>)
 800947e:	f001 fd97 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8009482:	4b30      	ldr	r3, [pc, #192]	; (8009544 <fourthLightTurn+0xe0>)
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	2b05      	cmp	r3, #5
 8009488:	d11c      	bne.n	80094c4 <fourthLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 800948a:	482f      	ldr	r0, [pc, #188]	; (8009548 <fourthLightTurn+0xe4>)
 800948c:	f7f8 fa6e 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8009490:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009494:	9301      	str	r3, [sp, #4]
 8009496:	2305      	movs	r3, #5
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	2315      	movs	r3, #21
 800949c:	2221      	movs	r2, #33	; 0x21
 800949e:	219b      	movs	r1, #155	; 0x9b
 80094a0:	20c8      	movs	r0, #200	; 0xc8
 80094a2:	f7f8 fa12 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 80094a6:	4929      	ldr	r1, [pc, #164]	; (800954c <fourthLightTurn+0xe8>)
 80094a8:	4829      	ldr	r0, [pc, #164]	; (8009550 <fourthLightTurn+0xec>)
 80094aa:	f009 fe29 	bl	8013100 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80094ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	2300      	movs	r3, #0
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	2300      	movs	r3, #0
 80094ba:	229d      	movs	r2, #157	; 0x9d
 80094bc:	21cb      	movs	r1, #203	; 0xcb
 80094be:	4824      	ldr	r0, [pc, #144]	; (8009550 <fourthLightTurn+0xec>)
 80094c0:	f7f8 fc6e 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[3] = 0;
 80094c4:	4b23      	ldr	r3, [pc, #140]	; (8009554 <fourthLightTurn+0xf0>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 0);
 80094ca:	2100      	movs	r1, #0
 80094cc:	2004      	movs	r0, #4
 80094ce:	f7f9 fc0a 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[3] = 1;
		EEPROM_LightStateUpdate(4, 1);
	}
}
 80094d2:	e02e      	b.n	8009532 <fourthLightTurn+0xce>
		SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 80094d4:	2013      	movs	r0, #19
 80094d6:	f000 fe43 	bl	800a160 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 80094da:	491f      	ldr	r1, [pc, #124]	; (8009558 <fourthLightTurn+0xf4>)
 80094dc:	4818      	ldr	r0, [pc, #96]	; (8009540 <fourthLightTurn+0xdc>)
 80094de:	f001 fd67 	bl	800afb0 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80094e2:	4b18      	ldr	r3, [pc, #96]	; (8009544 <fourthLightTurn+0xe0>)
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	2b05      	cmp	r3, #5
 80094e8:	d11c      	bne.n	8009524 <fourthLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 80094ea:	4817      	ldr	r0, [pc, #92]	; (8009548 <fourthLightTurn+0xe4>)
 80094ec:	f7f8 fa3e 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80094f0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	2305      	movs	r3, #5
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	2315      	movs	r3, #21
 80094fc:	2221      	movs	r2, #33	; 0x21
 80094fe:	219b      	movs	r1, #155	; 0x9b
 8009500:	20c8      	movs	r0, #200	; 0xc8
 8009502:	f7f8 f9e2 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8009506:	4915      	ldr	r1, [pc, #84]	; (800955c <fourthLightTurn+0xf8>)
 8009508:	4811      	ldr	r0, [pc, #68]	; (8009550 <fourthLightTurn+0xec>)
 800950a:	f009 fdf9 	bl	8013100 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800950e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009512:	9301      	str	r3, [sp, #4]
 8009514:	2300      	movs	r3, #0
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	2300      	movs	r3, #0
 800951a:	229d      	movs	r2, #157	; 0x9d
 800951c:	21cb      	movs	r1, #203	; 0xcb
 800951e:	480c      	ldr	r0, [pc, #48]	; (8009550 <fourthLightTurn+0xec>)
 8009520:	f7f8 fc3e 	bl	8001da0 <EF_PutString>
		LightsButtonState[3] = 1;
 8009524:	4b0b      	ldr	r3, [pc, #44]	; (8009554 <fourthLightTurn+0xf0>)
 8009526:	2201      	movs	r2, #1
 8009528:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 1);
 800952a:	2101      	movs	r1, #1
 800952c:	2004      	movs	r0, #4
 800952e:	f7f9 fbda 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	0801749c 	.word	0x0801749c
 8009540:	200006c8 	.word	0x200006c8
 8009544:	200002a0 	.word	0x200002a0
 8009548:	080289ec 	.word	0x080289ec
 800954c:	080173d4 	.word	0x080173d4
 8009550:	200002cc 	.word	0x200002cc
 8009554:	200002bc 	.word	0x200002bc
 8009558:	080174a8 	.word	0x080174a8
 800955c:	080173d8 	.word	0x080173d8

08009560 <OneMinuteIncrease>:

void OneMinuteIncrease(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af02      	add	r7, sp, #8
	if(Minutes < 59)
 8009566:	4b11      	ldr	r3, [pc, #68]	; (80095ac <OneMinuteIncrease+0x4c>)
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b3a      	cmp	r3, #58	; 0x3a
 800956c:	d806      	bhi.n	800957c <OneMinuteIncrease+0x1c>
	{
		Minutes++;
 800956e:	4b0f      	ldr	r3, [pc, #60]	; (80095ac <OneMinuteIncrease+0x4c>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	3301      	adds	r3, #1
 8009574:	b2da      	uxtb	r2, r3
 8009576:	4b0d      	ldr	r3, [pc, #52]	; (80095ac <OneMinuteIncrease+0x4c>)
 8009578:	701a      	strb	r2, [r3, #0]
 800957a:	e002      	b.n	8009582 <OneMinuteIncrease+0x22>
	}
	else
	{
		Minutes = 0;
 800957c:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <OneMinuteIncrease+0x4c>)
 800957e:	2200      	movs	r2, #0
 8009580:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, " %d  ", Minutes);
 8009582:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <OneMinuteIncrease+0x4c>)
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	4909      	ldr	r1, [pc, #36]	; (80095b0 <OneMinuteIncrease+0x50>)
 800958a:	480a      	ldr	r0, [pc, #40]	; (80095b4 <OneMinuteIncrease+0x54>)
 800958c:	f009 fdb8 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009590:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	2301      	movs	r3, #1
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	2300      	movs	r3, #0
 800959c:	226e      	movs	r2, #110	; 0x6e
 800959e:	21a0      	movs	r1, #160	; 0xa0
 80095a0:	4804      	ldr	r0, [pc, #16]	; (80095b4 <OneMinuteIncrease+0x54>)
 80095a2:	f7f8 fbfd 	bl	8001da0 <EF_PutString>
}
 80095a6:	bf00      	nop
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	20000033 	.word	0x20000033
 80095b0:	080173c0 	.word	0x080173c0
 80095b4:	200002cc 	.word	0x200002cc

080095b8 <OneHourIncrease>:

void OneHourIncrease(void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af02      	add	r7, sp, #8
	if(Hours < 24)
 80095be:	4b11      	ldr	r3, [pc, #68]	; (8009604 <OneHourIncrease+0x4c>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b17      	cmp	r3, #23
 80095c4:	d806      	bhi.n	80095d4 <OneHourIncrease+0x1c>
	{
		Hours++;
 80095c6:	4b0f      	ldr	r3, [pc, #60]	; (8009604 <OneHourIncrease+0x4c>)
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	3301      	adds	r3, #1
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	4b0d      	ldr	r3, [pc, #52]	; (8009604 <OneHourIncrease+0x4c>)
 80095d0:	701a      	strb	r2, [r3, #0]
 80095d2:	e002      	b.n	80095da <OneHourIncrease+0x22>
	}
	else
	{
		Hours = 1;
 80095d4:	4b0b      	ldr	r3, [pc, #44]	; (8009604 <OneHourIncrease+0x4c>)
 80095d6:	2201      	movs	r2, #1
 80095d8:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, " %d  ", Hours);
 80095da:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <OneHourIncrease+0x4c>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	4909      	ldr	r1, [pc, #36]	; (8009608 <OneHourIncrease+0x50>)
 80095e2:	480a      	ldr	r0, [pc, #40]	; (800960c <OneHourIncrease+0x54>)
 80095e4:	f009 fd8c 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80095e8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	2301      	movs	r3, #1
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	2300      	movs	r3, #0
 80095f4:	2246      	movs	r2, #70	; 0x46
 80095f6:	21a0      	movs	r1, #160	; 0xa0
 80095f8:	4804      	ldr	r0, [pc, #16]	; (800960c <OneHourIncrease+0x54>)
 80095fa:	f7f8 fbd1 	bl	8001da0 <EF_PutString>
}
 80095fe:	bf00      	nop
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	20000032 	.word	0x20000032
 8009608:	080173c0 	.word	0x080173c0
 800960c:	200002cc 	.word	0x200002cc

08009610 <OneDayIncrease>:

void OneDayIncrease(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af02      	add	r7, sp, #8
	if(DayOfWeek < 7)
 8009616:	4b11      	ldr	r3, [pc, #68]	; (800965c <OneDayIncrease+0x4c>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b06      	cmp	r3, #6
 800961c:	d806      	bhi.n	800962c <OneDayIncrease+0x1c>
	{
		DayOfWeek++;
 800961e:	4b0f      	ldr	r3, [pc, #60]	; (800965c <OneDayIncrease+0x4c>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	3301      	adds	r3, #1
 8009624:	b2da      	uxtb	r2, r3
 8009626:	4b0d      	ldr	r3, [pc, #52]	; (800965c <OneDayIncrease+0x4c>)
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	e002      	b.n	8009632 <OneDayIncrease+0x22>
	}
	else
	{
		DayOfWeek = 1;
 800962c:	4b0b      	ldr	r3, [pc, #44]	; (800965c <OneDayIncrease+0x4c>)
 800962e:	2201      	movs	r2, #1
 8009630:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8009632:	4b0a      	ldr	r3, [pc, #40]	; (800965c <OneDayIncrease+0x4c>)
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	4909      	ldr	r1, [pc, #36]	; (8009660 <OneDayIncrease+0x50>)
 800963a:	480a      	ldr	r0, [pc, #40]	; (8009664 <OneDayIncrease+0x54>)
 800963c:	f009 fd60 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009640:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	2301      	movs	r3, #1
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	2300      	movs	r3, #0
 800964c:	2296      	movs	r2, #150	; 0x96
 800964e:	2114      	movs	r1, #20
 8009650:	4804      	ldr	r0, [pc, #16]	; (8009664 <OneDayIncrease+0x54>)
 8009652:	f7f8 fba5 	bl	8001da0 <EF_PutString>
}
 8009656:	bf00      	nop
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	20000031 	.word	0x20000031
 8009660:	080174b4 	.word	0x080174b4
 8009664:	200002cc 	.word	0x200002cc

08009668 <OneMinuteDecrease>:

void OneMinuteDecrease(void)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af02      	add	r7, sp, #8
	if(Minutes > 0)
 800966e:	4b11      	ldr	r3, [pc, #68]	; (80096b4 <OneMinuteDecrease+0x4c>)
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d006      	beq.n	8009684 <OneMinuteDecrease+0x1c>
	{
		Minutes--;
 8009676:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <OneMinuteDecrease+0x4c>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	3b01      	subs	r3, #1
 800967c:	b2da      	uxtb	r2, r3
 800967e:	4b0d      	ldr	r3, [pc, #52]	; (80096b4 <OneMinuteDecrease+0x4c>)
 8009680:	701a      	strb	r2, [r3, #0]
 8009682:	e002      	b.n	800968a <OneMinuteDecrease+0x22>
	}
	else
	{
		Minutes = 59;
 8009684:	4b0b      	ldr	r3, [pc, #44]	; (80096b4 <OneMinuteDecrease+0x4c>)
 8009686:	223b      	movs	r2, #59	; 0x3b
 8009688:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, " %d  ", Minutes);
 800968a:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <OneMinuteDecrease+0x4c>)
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	4909      	ldr	r1, [pc, #36]	; (80096b8 <OneMinuteDecrease+0x50>)
 8009692:	480a      	ldr	r0, [pc, #40]	; (80096bc <OneMinuteDecrease+0x54>)
 8009694:	f009 fd34 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009698:	f24c 6318 	movw	r3, #50712	; 0xc618
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	2301      	movs	r3, #1
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	2300      	movs	r3, #0
 80096a4:	226e      	movs	r2, #110	; 0x6e
 80096a6:	21a0      	movs	r1, #160	; 0xa0
 80096a8:	4804      	ldr	r0, [pc, #16]	; (80096bc <OneMinuteDecrease+0x54>)
 80096aa:	f7f8 fb79 	bl	8001da0 <EF_PutString>

}
 80096ae:	bf00      	nop
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	20000033 	.word	0x20000033
 80096b8:	080173c0 	.word	0x080173c0
 80096bc:	200002cc 	.word	0x200002cc

080096c0 <OneHourDecrease>:

void OneHourDecrease(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af02      	add	r7, sp, #8
	if(Hours > 0)
 80096c6:	4b11      	ldr	r3, [pc, #68]	; (800970c <OneHourDecrease+0x4c>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d006      	beq.n	80096dc <OneHourDecrease+0x1c>
	{
		Hours--;
 80096ce:	4b0f      	ldr	r3, [pc, #60]	; (800970c <OneHourDecrease+0x4c>)
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	4b0d      	ldr	r3, [pc, #52]	; (800970c <OneHourDecrease+0x4c>)
 80096d8:	701a      	strb	r2, [r3, #0]
 80096da:	e002      	b.n	80096e2 <OneHourDecrease+0x22>
	}
	else
	{
		Hours = 24;
 80096dc:	4b0b      	ldr	r3, [pc, #44]	; (800970c <OneHourDecrease+0x4c>)
 80096de:	2218      	movs	r2, #24
 80096e0:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, " %d  ", Hours);
 80096e2:	4b0a      	ldr	r3, [pc, #40]	; (800970c <OneHourDecrease+0x4c>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	4909      	ldr	r1, [pc, #36]	; (8009710 <OneHourDecrease+0x50>)
 80096ea:	480a      	ldr	r0, [pc, #40]	; (8009714 <OneHourDecrease+0x54>)
 80096ec:	f009 fd08 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80096f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	2301      	movs	r3, #1
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	2300      	movs	r3, #0
 80096fc:	2246      	movs	r2, #70	; 0x46
 80096fe:	21a0      	movs	r1, #160	; 0xa0
 8009700:	4804      	ldr	r0, [pc, #16]	; (8009714 <OneHourDecrease+0x54>)
 8009702:	f7f8 fb4d 	bl	8001da0 <EF_PutString>

}
 8009706:	bf00      	nop
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	20000032 	.word	0x20000032
 8009710:	080173c0 	.word	0x080173c0
 8009714:	200002cc 	.word	0x200002cc

08009718 <OneDayDecrease>:

void OneDayDecrease(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af02      	add	r7, sp, #8
	if(DayOfWeek > 0)
 800971e:	4b11      	ldr	r3, [pc, #68]	; (8009764 <OneDayDecrease+0x4c>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d006      	beq.n	8009734 <OneDayDecrease+0x1c>
	{
		DayOfWeek--;
 8009726:	4b0f      	ldr	r3, [pc, #60]	; (8009764 <OneDayDecrease+0x4c>)
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	3b01      	subs	r3, #1
 800972c:	b2da      	uxtb	r2, r3
 800972e:	4b0d      	ldr	r3, [pc, #52]	; (8009764 <OneDayDecrease+0x4c>)
 8009730:	701a      	strb	r2, [r3, #0]
 8009732:	e002      	b.n	800973a <OneDayDecrease+0x22>
	}
	else
	{
		DayOfWeek = 7;
 8009734:	4b0b      	ldr	r3, [pc, #44]	; (8009764 <OneDayDecrease+0x4c>)
 8009736:	2207      	movs	r2, #7
 8009738:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 800973a:	4b0a      	ldr	r3, [pc, #40]	; (8009764 <OneDayDecrease+0x4c>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	461a      	mov	r2, r3
 8009740:	4909      	ldr	r1, [pc, #36]	; (8009768 <OneDayDecrease+0x50>)
 8009742:	480a      	ldr	r0, [pc, #40]	; (800976c <OneDayDecrease+0x54>)
 8009744:	f009 fcdc 	bl	8013100 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009748:	f24c 6318 	movw	r3, #50712	; 0xc618
 800974c:	9301      	str	r3, [sp, #4]
 800974e:	2301      	movs	r3, #1
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	2300      	movs	r3, #0
 8009754:	2296      	movs	r2, #150	; 0x96
 8009756:	2114      	movs	r1, #20
 8009758:	4804      	ldr	r0, [pc, #16]	; (800976c <OneDayDecrease+0x54>)
 800975a:	f7f8 fb21 	bl	8001da0 <EF_PutString>

}
 800975e:	bf00      	nop
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	20000031 	.word	0x20000031
 8009768:	080174b4 	.word	0x080174b4
 800976c:	200002cc 	.word	0x200002cc

08009770 <TenSecondsActivitiesDurationIncrease>:

void TenSecondsActivitiesDurationIncrease(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af02      	add	r7, sp, #8
	if(activitiesDurationTimeInSeconds < 990)
 8009776:	4b18      	ldr	r3, [pc, #96]	; (80097d8 <TenSecondsActivitiesDurationIncrease+0x68>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f240 32dd 	movw	r2, #989	; 0x3dd
 800977e:	4293      	cmp	r3, r2
 8009780:	d805      	bhi.n	800978e <TenSecondsActivitiesDurationIncrease+0x1e>
	{
		activitiesDurationTimeInSeconds = activitiesDurationTimeInSeconds + 10;
 8009782:	4b15      	ldr	r3, [pc, #84]	; (80097d8 <TenSecondsActivitiesDurationIncrease+0x68>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	330a      	adds	r3, #10
 8009788:	4a13      	ldr	r2, [pc, #76]	; (80097d8 <TenSecondsActivitiesDurationIncrease+0x68>)
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	e002      	b.n	8009794 <TenSecondsActivitiesDurationIncrease+0x24>
	}
	else
	{
		activitiesDurationTimeInSeconds = 10;
 800978e:	4b12      	ldr	r3, [pc, #72]	; (80097d8 <TenSecondsActivitiesDurationIncrease+0x68>)
 8009790:	220a      	movs	r2, #10
 8009792:	601a      	str	r2, [r3, #0]
	}
	if(activitiesDurationTimeInSeconds < 100) sprintf((char*)Msg, " %ld s ", activitiesDurationTimeInSeconds);
 8009794:	4b10      	ldr	r3, [pc, #64]	; (80097d8 <TenSecondsActivitiesDurationIncrease+0x68>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b63      	cmp	r3, #99	; 0x63
 800979a:	d807      	bhi.n	80097ac <TenSecondsActivitiesDurationIncrease+0x3c>
 800979c:	4b0e      	ldr	r3, [pc, #56]	; (80097d8 <TenSecondsActivitiesDurationIncrease+0x68>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	490e      	ldr	r1, [pc, #56]	; (80097dc <TenSecondsActivitiesDurationIncrease+0x6c>)
 80097a4:	480e      	ldr	r0, [pc, #56]	; (80097e0 <TenSecondsActivitiesDurationIncrease+0x70>)
 80097a6:	f009 fcab 	bl	8013100 <siprintf>
 80097aa:	e006      	b.n	80097ba <TenSecondsActivitiesDurationIncrease+0x4a>
	else sprintf((char*)Msg, "%ld s", activitiesDurationTimeInSeconds);
 80097ac:	4b0a      	ldr	r3, [pc, #40]	; (80097d8 <TenSecondsActivitiesDurationIncrease+0x68>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	461a      	mov	r2, r3
 80097b2:	490c      	ldr	r1, [pc, #48]	; (80097e4 <TenSecondsActivitiesDurationIncrease+0x74>)
 80097b4:	480a      	ldr	r0, [pc, #40]	; (80097e0 <TenSecondsActivitiesDurationIncrease+0x70>)
 80097b6:	f009 fca3 	bl	8013100 <siprintf>
	EF_PutString(Msg, ACTIVITIES_TIME_DURATION_NUMBER_X, ACTIVITIES_TIME_DURATION_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80097ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80097be:	9301      	str	r3, [sp, #4]
 80097c0:	2301      	movs	r3, #1
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	2300      	movs	r3, #0
 80097c6:	22b4      	movs	r2, #180	; 0xb4
 80097c8:	21e7      	movs	r1, #231	; 0xe7
 80097ca:	4805      	ldr	r0, [pc, #20]	; (80097e0 <TenSecondsActivitiesDurationIncrease+0x70>)
 80097cc:	f7f8 fae8 	bl	8001da0 <EF_PutString>
}
 80097d0:	bf00      	nop
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20000290 	.word	0x20000290
 80097dc:	080174c8 	.word	0x080174c8
 80097e0:	200002cc 	.word	0x200002cc
 80097e4:	080174d0 	.word	0x080174d0

080097e8 <TenSecondsActivitiesDurationDecrease>:

void TenSecondsActivitiesDurationDecrease(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af02      	add	r7, sp, #8
	if(activitiesDurationTimeInSeconds > 10)
 80097ee:	4b17      	ldr	r3, [pc, #92]	; (800984c <TenSecondsActivitiesDurationDecrease+0x64>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b0a      	cmp	r3, #10
 80097f4:	d905      	bls.n	8009802 <TenSecondsActivitiesDurationDecrease+0x1a>
	{
		activitiesDurationTimeInSeconds = activitiesDurationTimeInSeconds - 10;
 80097f6:	4b15      	ldr	r3, [pc, #84]	; (800984c <TenSecondsActivitiesDurationDecrease+0x64>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	3b0a      	subs	r3, #10
 80097fc:	4a13      	ldr	r2, [pc, #76]	; (800984c <TenSecondsActivitiesDurationDecrease+0x64>)
 80097fe:	6013      	str	r3, [r2, #0]
 8009800:	e003      	b.n	800980a <TenSecondsActivitiesDurationDecrease+0x22>
	}
	else
	{
		activitiesDurationTimeInSeconds = 990;
 8009802:	4b12      	ldr	r3, [pc, #72]	; (800984c <TenSecondsActivitiesDurationDecrease+0x64>)
 8009804:	f240 32de 	movw	r2, #990	; 0x3de
 8009808:	601a      	str	r2, [r3, #0]
	}

	if(activitiesDurationTimeInSeconds < 100) sprintf((char*)Msg, " %ld s ", activitiesDurationTimeInSeconds);
 800980a:	4b10      	ldr	r3, [pc, #64]	; (800984c <TenSecondsActivitiesDurationDecrease+0x64>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b63      	cmp	r3, #99	; 0x63
 8009810:	d807      	bhi.n	8009822 <TenSecondsActivitiesDurationDecrease+0x3a>
 8009812:	4b0e      	ldr	r3, [pc, #56]	; (800984c <TenSecondsActivitiesDurationDecrease+0x64>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	490d      	ldr	r1, [pc, #52]	; (8009850 <TenSecondsActivitiesDurationDecrease+0x68>)
 800981a:	480e      	ldr	r0, [pc, #56]	; (8009854 <TenSecondsActivitiesDurationDecrease+0x6c>)
 800981c:	f009 fc70 	bl	8013100 <siprintf>
 8009820:	e006      	b.n	8009830 <TenSecondsActivitiesDurationDecrease+0x48>
	else sprintf((char*)Msg, "%ld s", activitiesDurationTimeInSeconds);
 8009822:	4b0a      	ldr	r3, [pc, #40]	; (800984c <TenSecondsActivitiesDurationDecrease+0x64>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	490b      	ldr	r1, [pc, #44]	; (8009858 <TenSecondsActivitiesDurationDecrease+0x70>)
 800982a:	480a      	ldr	r0, [pc, #40]	; (8009854 <TenSecondsActivitiesDurationDecrease+0x6c>)
 800982c:	f009 fc68 	bl	8013100 <siprintf>
	EF_PutString(Msg, ACTIVITIES_TIME_DURATION_NUMBER_X, ACTIVITIES_TIME_DURATION_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009830:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009834:	9301      	str	r3, [sp, #4]
 8009836:	2301      	movs	r3, #1
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	2300      	movs	r3, #0
 800983c:	22b4      	movs	r2, #180	; 0xb4
 800983e:	21e7      	movs	r1, #231	; 0xe7
 8009840:	4804      	ldr	r0, [pc, #16]	; (8009854 <TenSecondsActivitiesDurationDecrease+0x6c>)
 8009842:	f7f8 faad 	bl	8001da0 <EF_PutString>
}
 8009846:	bf00      	nop
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	20000290 	.word	0x20000290
 8009850:	080174c8 	.word	0x080174c8
 8009854:	200002cc 	.word	0x200002cc
 8009858:	080174d0 	.word	0x080174d0

0800985c <encoderUpgrade>:

void encoderUpgrade(int16_t *EncoderCntWsk)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
	EncoderCounter = *EncoderCntWsk;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f9b3 2000 	ldrsh.w	r2, [r3]
 800986a:	4ba8      	ldr	r3, [pc, #672]	; (8009b0c <encoderUpgrade+0x2b0>)
 800986c:	801a      	strh	r2, [r3, #0]
	if(EncoderCounter != EncoderCounterPrevious) // if was rotated
 800986e:	4ba7      	ldr	r3, [pc, #668]	; (8009b0c <encoderUpgrade+0x2b0>)
 8009870:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009874:	4ba6      	ldr	r3, [pc, #664]	; (8009b10 <encoderUpgrade+0x2b4>)
 8009876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800987a:	429a      	cmp	r2, r3
 800987c:	f000 816e 	beq.w	8009b5c <encoderUpgrade+0x300>
	{
		if (EncoderCounter > EncoderCounterPrevious) // if increase
 8009880:	4ba2      	ldr	r3, [pc, #648]	; (8009b0c <encoderUpgrade+0x2b0>)
 8009882:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009886:	4ba2      	ldr	r3, [pc, #648]	; (8009b10 <encoderUpgrade+0x2b4>)
 8009888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800988c:	429a      	cmp	r2, r3
 800988e:	f340 80ae 	ble.w	80099ee <encoderUpgrade+0x192>
		{
			if((EncoderCounter - EncoderCounterPrevious >= 2)) // if full rotate was done
 8009892:	4b9e      	ldr	r3, [pc, #632]	; (8009b0c <encoderUpgrade+0x2b0>)
 8009894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009898:	461a      	mov	r2, r3
 800989a:	4b9d      	ldr	r3, [pc, #628]	; (8009b10 <encoderUpgrade+0x2b4>)
 800989c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	f340 815a 	ble.w	8009b5c <encoderUpgrade+0x300>
			{
				RotateUpgradeNumber = (EncoderCounter - EncoderCounterPrevious)/2;
 80098a8:	4b98      	ldr	r3, [pc, #608]	; (8009b0c <encoderUpgrade+0x2b0>)
 80098aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098ae:	461a      	mov	r2, r3
 80098b0:	4b97      	ldr	r3, [pc, #604]	; (8009b10 <encoderUpgrade+0x2b4>)
 80098b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	0fda      	lsrs	r2, r3, #31
 80098ba:	4413      	add	r3, r2
 80098bc:	105b      	asrs	r3, r3, #1
 80098be:	b21a      	sxth	r2, r3
 80098c0:	4b94      	ldr	r3, [pc, #592]	; (8009b14 <encoderUpgrade+0x2b8>)
 80098c2:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 80098c4:	2301      	movs	r3, #1
 80098c6:	73fb      	strb	r3, [r7, #15]
 80098c8:	e081      	b.n	80099ce <encoderUpgrade+0x172>
				{
					if(EncoderState == ENCODER_IDLE)
 80098ca:	4b93      	ldr	r3, [pc, #588]	; (8009b18 <encoderUpgrade+0x2bc>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d120      	bne.n	8009914 <encoderUpgrade+0xb8>
					{
						if(State == MENUTFT_PARAMETERS)
 80098d2:	4b92      	ldr	r3, [pc, #584]	; (8009b1c <encoderUpgrade+0x2c0>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d106      	bne.n	80098e8 <encoderUpgrade+0x8c>
							{
							State = MENUTFT_SWITCH;
 80098da:	4b90      	ldr	r3, [pc, #576]	; (8009b1c <encoderUpgrade+0x2c0>)
 80098dc:	2202      	movs	r2, #2
 80098de:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 80098e0:	4b8f      	ldr	r3, [pc, #572]	; (8009b20 <encoderUpgrade+0x2c4>)
 80098e2:	2201      	movs	r2, #1
 80098e4:	701a      	strb	r2, [r3, #0]
 80098e6:	e06f      	b.n	80099c8 <encoderUpgrade+0x16c>
							}
						else if (State == MENUTFT_SWITCH)
 80098e8:	4b8c      	ldr	r3, [pc, #560]	; (8009b1c <encoderUpgrade+0x2c0>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d106      	bne.n	80098fe <encoderUpgrade+0xa2>
						{
							State = MENUTFT_LIGHTS;
 80098f0:	4b8a      	ldr	r3, [pc, #552]	; (8009b1c <encoderUpgrade+0x2c0>)
 80098f2:	2205      	movs	r2, #5
 80098f4:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 80098f6:	4b8a      	ldr	r3, [pc, #552]	; (8009b20 <encoderUpgrade+0x2c4>)
 80098f8:	2201      	movs	r2, #1
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	e064      	b.n	80099c8 <encoderUpgrade+0x16c>
						}
						else if (State == MENUTFT_LIGHTS)
 80098fe:	4b87      	ldr	r3, [pc, #540]	; (8009b1c <encoderUpgrade+0x2c0>)
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	2b05      	cmp	r3, #5
 8009904:	d160      	bne.n	80099c8 <encoderUpgrade+0x16c>
							{
							State = MENUTFT_PARAMETERS;
 8009906:	4b85      	ldr	r3, [pc, #532]	; (8009b1c <encoderUpgrade+0x2c0>)
 8009908:	2201      	movs	r2, #1
 800990a:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 800990c:	4b84      	ldr	r3, [pc, #528]	; (8009b20 <encoderUpgrade+0x2c4>)
 800990e:	2201      	movs	r2, #1
 8009910:	701a      	strb	r2, [r3, #0]
 8009912:	e059      	b.n	80099c8 <encoderUpgrade+0x16c>
							}
					}
					else if(EncoderState == ENCODER_CLOCK_MINUTE)
 8009914:	4b80      	ldr	r3, [pc, #512]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	2b02      	cmp	r3, #2
 800991a:	d102      	bne.n	8009922 <encoderUpgrade+0xc6>
					{
						OneMinuteIncrease();
 800991c:	f7ff fe20 	bl	8009560 <OneMinuteIncrease>
 8009920:	e052      	b.n	80099c8 <encoderUpgrade+0x16c>
					}
					else if(EncoderState == ENCODER_CLOCK_HOUR)
 8009922:	4b7d      	ldr	r3, [pc, #500]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d102      	bne.n	8009930 <encoderUpgrade+0xd4>
					{
						OneHourIncrease();
 800992a:	f7ff fe45 	bl	80095b8 <OneHourIncrease>
 800992e:	e04b      	b.n	80099c8 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_CLOCK_DAY)
 8009930:	4b79      	ldr	r3, [pc, #484]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	2b03      	cmp	r3, #3
 8009936:	d102      	bne.n	800993e <encoderUpgrade+0xe2>
					{
						OneDayIncrease();
 8009938:	f7ff fe6a 	bl	8009610 <OneDayIncrease>
 800993c:	e044      	b.n	80099c8 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_WS_LED)
 800993e:	4b76      	ldr	r3, [pc, #472]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b04      	cmp	r3, #4
 8009944:	d102      	bne.n	800994c <encoderUpgrade+0xf0>
					{
						WSONEincreaseNumberOfLedOnTFT();
 8009946:	f7ff f8a5 	bl	8008a94 <WSONEincreaseNumberOfLedOnTFT>
 800994a:	e03d      	b.n	80099c8 <encoderUpgrade+0x16c>
					}
					else if(EncoderState == ENCODER_ACTIVITIES)
 800994c:	4b72      	ldr	r3, [pc, #456]	; (8009b18 <encoderUpgrade+0x2bc>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	2b05      	cmp	r3, #5
 8009952:	d102      	bne.n	800995a <encoderUpgrade+0xfe>
					{
						TenSecondsActivitiesDurationIncrease();
 8009954:	f7ff ff0c 	bl	8009770 <TenSecondsActivitiesDurationIncrease>
 8009958:	e036      	b.n	80099c8 <encoderUpgrade+0x16c>
					}
					//Schedules
					else if (EncoderState == ENCODER_SCHEDULE_1_HOUR_ON)
 800995a:	4b6f      	ldr	r3, [pc, #444]	; (8009b18 <encoderUpgrade+0x2bc>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b06      	cmp	r3, #6
 8009960:	d102      	bne.n	8009968 <encoderUpgrade+0x10c>
					{
						schedule1HourOnIncrease();
 8009962:	f7fd fd51 	bl	8007408 <schedule1HourOnIncrease>
 8009966:	e02f      	b.n	80099c8 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_1_MINUTE_ON)
 8009968:	4b6b      	ldr	r3, [pc, #428]	; (8009b18 <encoderUpgrade+0x2bc>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b08      	cmp	r3, #8
 800996e:	d102      	bne.n	8009976 <encoderUpgrade+0x11a>
					{
						schedule1MinuteOnIncrease();
 8009970:	f7fd fdbe 	bl	80074f0 <schedule1MinuteOnIncrease>
 8009974:	e028      	b.n	80099c8 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_1_HOUR_OFF)
 8009976:	4b68      	ldr	r3, [pc, #416]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	2b07      	cmp	r3, #7
 800997c:	d102      	bne.n	8009984 <encoderUpgrade+0x128>
					{
						schedule1HourOffIncrease();
 800997e:	f7fd fe2b 	bl	80075d8 <schedule1HourOffIncrease>
 8009982:	e021      	b.n	80099c8 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_1_MINUTE_OFF)
 8009984:	4b64      	ldr	r3, [pc, #400]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	2b09      	cmp	r3, #9
 800998a:	d102      	bne.n	8009992 <encoderUpgrade+0x136>
					{
						schedule1MinuteOffIncrease();
 800998c:	f7fd fe98 	bl	80076c0 <schedule1MinuteOffIncrease>
 8009990:	e01a      	b.n	80099c8 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_2_HOUR_ON)
 8009992:	4b61      	ldr	r3, [pc, #388]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b0a      	cmp	r3, #10
 8009998:	d102      	bne.n	80099a0 <encoderUpgrade+0x144>
					{
						schedule2HourOnIncrease();
 800999a:	f7fe f8e3 	bl	8007b64 <schedule2HourOnIncrease>
 800999e:	e013      	b.n	80099c8 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_2_MINUTE_ON)
 80099a0:	4b5d      	ldr	r3, [pc, #372]	; (8009b18 <encoderUpgrade+0x2bc>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b0c      	cmp	r3, #12
 80099a6:	d102      	bne.n	80099ae <encoderUpgrade+0x152>
					{
						schedule2MinuteOnIncrease();
 80099a8:	f7fe f950 	bl	8007c4c <schedule2MinuteOnIncrease>
 80099ac:	e00c      	b.n	80099c8 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_2_HOUR_OFF)
 80099ae:	4b5a      	ldr	r3, [pc, #360]	; (8009b18 <encoderUpgrade+0x2bc>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b0b      	cmp	r3, #11
 80099b4:	d102      	bne.n	80099bc <encoderUpgrade+0x160>
					{
						schedule2HourOffIncrease();
 80099b6:	f7fe f9bd 	bl	8007d34 <schedule2HourOffIncrease>
 80099ba:	e005      	b.n	80099c8 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_2_MINUTE_OFF)
 80099bc:	4b56      	ldr	r3, [pc, #344]	; (8009b18 <encoderUpgrade+0x2bc>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2b0d      	cmp	r3, #13
 80099c2:	d101      	bne.n	80099c8 <encoderUpgrade+0x16c>
					{
						schedule2MinuteOffIncrease();
 80099c4:	f7fe fa2a 	bl	8007e1c <schedule2MinuteOffIncrease>
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	3301      	adds	r3, #1
 80099cc:	73fb      	strb	r3, [r7, #15]
 80099ce:	7bfb      	ldrb	r3, [r7, #15]
 80099d0:	4a50      	ldr	r2, [pc, #320]	; (8009b14 <encoderUpgrade+0x2b8>)
 80099d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80099d6:	4293      	cmp	r3, r2
 80099d8:	f77f af77 	ble.w	80098ca <encoderUpgrade+0x6e>
					}
				}
				RotateUpgradeNumber = 0;
 80099dc:	4b4d      	ldr	r3, [pc, #308]	; (8009b14 <encoderUpgrade+0x2b8>)
 80099de:	2200      	movs	r2, #0
 80099e0:	801a      	strh	r2, [r3, #0]
				EncoderCounterPrevious = EncoderCounter;
 80099e2:	4b4a      	ldr	r3, [pc, #296]	; (8009b0c <encoderUpgrade+0x2b0>)
 80099e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099e8:	4b49      	ldr	r3, [pc, #292]	; (8009b10 <encoderUpgrade+0x2b4>)
 80099ea:	801a      	strh	r2, [r3, #0]
				}
				EncoderCounterPrevious = EncoderCounter;
			}
		}
	}
}
 80099ec:	e0b6      	b.n	8009b5c <encoderUpgrade+0x300>
			if(EncoderCounterPrevious - EncoderCounter >= 2) // if full rotate was done
 80099ee:	4b48      	ldr	r3, [pc, #288]	; (8009b10 <encoderUpgrade+0x2b4>)
 80099f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099f4:	461a      	mov	r2, r3
 80099f6:	4b45      	ldr	r3, [pc, #276]	; (8009b0c <encoderUpgrade+0x2b0>)
 80099f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	f340 80ac 	ble.w	8009b5c <encoderUpgrade+0x300>
				RotateUpgradeNumber = (EncoderCounterPrevious - EncoderCounter)/2;
 8009a04:	4b42      	ldr	r3, [pc, #264]	; (8009b10 <encoderUpgrade+0x2b4>)
 8009a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	4b3f      	ldr	r3, [pc, #252]	; (8009b0c <encoderUpgrade+0x2b0>)
 8009a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	0fda      	lsrs	r2, r3, #31
 8009a16:	4413      	add	r3, r2
 8009a18:	105b      	asrs	r3, r3, #1
 8009a1a:	b21a      	sxth	r2, r3
 8009a1c:	4b3d      	ldr	r3, [pc, #244]	; (8009b14 <encoderUpgrade+0x2b8>)
 8009a1e:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 8009a20:	2301      	movs	r3, #1
 8009a22:	73bb      	strb	r3, [r7, #14]
 8009a24:	e08e      	b.n	8009b44 <encoderUpgrade+0x2e8>
					if(EncoderState == ENCODER_IDLE)
 8009a26:	4b3c      	ldr	r3, [pc, #240]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d120      	bne.n	8009a70 <encoderUpgrade+0x214>
						if(State == MENUTFT_PARAMETERS)
 8009a2e:	4b3b      	ldr	r3, [pc, #236]	; (8009b1c <encoderUpgrade+0x2c0>)
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d106      	bne.n	8009a44 <encoderUpgrade+0x1e8>
							State = MENUTFT_LIGHTS;
 8009a36:	4b39      	ldr	r3, [pc, #228]	; (8009b1c <encoderUpgrade+0x2c0>)
 8009a38:	2205      	movs	r2, #5
 8009a3a:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009a3c:	4b38      	ldr	r3, [pc, #224]	; (8009b20 <encoderUpgrade+0x2c4>)
 8009a3e:	2201      	movs	r2, #1
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	e07c      	b.n	8009b3e <encoderUpgrade+0x2e2>
						else if (State == MENUTFT_SWITCH)
 8009a44:	4b35      	ldr	r3, [pc, #212]	; (8009b1c <encoderUpgrade+0x2c0>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d106      	bne.n	8009a5a <encoderUpgrade+0x1fe>
							State = MENUTFT_PARAMETERS;
 8009a4c:	4b33      	ldr	r3, [pc, #204]	; (8009b1c <encoderUpgrade+0x2c0>)
 8009a4e:	2201      	movs	r2, #1
 8009a50:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009a52:	4b33      	ldr	r3, [pc, #204]	; (8009b20 <encoderUpgrade+0x2c4>)
 8009a54:	2201      	movs	r2, #1
 8009a56:	701a      	strb	r2, [r3, #0]
 8009a58:	e071      	b.n	8009b3e <encoderUpgrade+0x2e2>
						else if (State == MENUTFT_LIGHTS)
 8009a5a:	4b30      	ldr	r3, [pc, #192]	; (8009b1c <encoderUpgrade+0x2c0>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	2b05      	cmp	r3, #5
 8009a60:	d16d      	bne.n	8009b3e <encoderUpgrade+0x2e2>
							State = MENUTFT_SWITCH;
 8009a62:	4b2e      	ldr	r3, [pc, #184]	; (8009b1c <encoderUpgrade+0x2c0>)
 8009a64:	2202      	movs	r2, #2
 8009a66:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009a68:	4b2d      	ldr	r3, [pc, #180]	; (8009b20 <encoderUpgrade+0x2c4>)
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	701a      	strb	r2, [r3, #0]
 8009a6e:	e066      	b.n	8009b3e <encoderUpgrade+0x2e2>
					else if(EncoderState == ENCODER_CLOCK_MINUTE)
 8009a70:	4b29      	ldr	r3, [pc, #164]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d102      	bne.n	8009a7e <encoderUpgrade+0x222>
						OneMinuteDecrease();
 8009a78:	f7ff fdf6 	bl	8009668 <OneMinuteDecrease>
 8009a7c:	e05f      	b.n	8009b3e <encoderUpgrade+0x2e2>
					else if(EncoderState == ENCODER_CLOCK_HOUR)
 8009a7e:	4b26      	ldr	r3, [pc, #152]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d102      	bne.n	8009a8c <encoderUpgrade+0x230>
						OneHourDecrease();
 8009a86:	f7ff fe1b 	bl	80096c0 <OneHourDecrease>
 8009a8a:	e058      	b.n	8009b3e <encoderUpgrade+0x2e2>
					else if (EncoderState == ENCODER_CLOCK_DAY)
 8009a8c:	4b22      	ldr	r3, [pc, #136]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d102      	bne.n	8009a9a <encoderUpgrade+0x23e>
						OneDayDecrease();
 8009a94:	f7ff fe40 	bl	8009718 <OneDayDecrease>
 8009a98:	e051      	b.n	8009b3e <encoderUpgrade+0x2e2>
					else if (EncoderState == ENCODER_WS_LED)
 8009a9a:	4b1f      	ldr	r3, [pc, #124]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b04      	cmp	r3, #4
 8009aa0:	d102      	bne.n	8009aa8 <encoderUpgrade+0x24c>
						WSONEdecreaseNumberOfLedOnTFT();
 8009aa2:	f7ff f831 	bl	8008b08 <WSONEdecreaseNumberOfLedOnTFT>
 8009aa6:	e04a      	b.n	8009b3e <encoderUpgrade+0x2e2>
					else if(EncoderState == ENCODER_ACTIVITIES)
 8009aa8:	4b1b      	ldr	r3, [pc, #108]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	2b05      	cmp	r3, #5
 8009aae:	d102      	bne.n	8009ab6 <encoderUpgrade+0x25a>
						TenSecondsActivitiesDurationDecrease();
 8009ab0:	f7ff fe9a 	bl	80097e8 <TenSecondsActivitiesDurationDecrease>
 8009ab4:	e043      	b.n	8009b3e <encoderUpgrade+0x2e2>
					else if (EncoderState == ENCODER_SCHEDULE_1_HOUR_ON)
 8009ab6:	4b18      	ldr	r3, [pc, #96]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	2b06      	cmp	r3, #6
 8009abc:	d102      	bne.n	8009ac4 <encoderUpgrade+0x268>
						schedule1HourOnDecrease();
 8009abe:	f7fd fcdd 	bl	800747c <schedule1HourOnDecrease>
 8009ac2:	e03c      	b.n	8009b3e <encoderUpgrade+0x2e2>
					else if (EncoderState == ENCODER_SCHEDULE_1_MINUTE_ON)
 8009ac4:	4b14      	ldr	r3, [pc, #80]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d102      	bne.n	8009ad2 <encoderUpgrade+0x276>
						schedule1MinuteOnDecrease();
 8009acc:	f7fd fd4a 	bl	8007564 <schedule1MinuteOnDecrease>
 8009ad0:	e035      	b.n	8009b3e <encoderUpgrade+0x2e2>
					else if (EncoderState == ENCODER_SCHEDULE_1_HOUR_OFF)
 8009ad2:	4b11      	ldr	r3, [pc, #68]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	2b07      	cmp	r3, #7
 8009ad8:	d102      	bne.n	8009ae0 <encoderUpgrade+0x284>
						schedule1HourOffDecrease();
 8009ada:	f7fd fdb7 	bl	800764c <schedule1HourOffDecrease>
 8009ade:	e02e      	b.n	8009b3e <encoderUpgrade+0x2e2>
					else if (EncoderState == ENCODER_SCHEDULE_1_MINUTE_OFF)
 8009ae0:	4b0d      	ldr	r3, [pc, #52]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	2b09      	cmp	r3, #9
 8009ae6:	d102      	bne.n	8009aee <encoderUpgrade+0x292>
						schedule1MinuteOffDecrease();
 8009ae8:	f7fd fe24 	bl	8007734 <schedule1MinuteOffDecrease>
 8009aec:	e027      	b.n	8009b3e <encoderUpgrade+0x2e2>
					else if (EncoderState == ENCODER_SCHEDULE_2_HOUR_ON)
 8009aee:	4b0a      	ldr	r3, [pc, #40]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b0a      	cmp	r3, #10
 8009af4:	d102      	bne.n	8009afc <encoderUpgrade+0x2a0>
						schedule2HourOnDecrease();
 8009af6:	f7fe f86f 	bl	8007bd8 <schedule2HourOnDecrease>
 8009afa:	e020      	b.n	8009b3e <encoderUpgrade+0x2e2>
					else if (EncoderState == ENCODER_SCHEDULE_2_MINUTE_ON)
 8009afc:	4b06      	ldr	r3, [pc, #24]	; (8009b18 <encoderUpgrade+0x2bc>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	2b0c      	cmp	r3, #12
 8009b02:	d10f      	bne.n	8009b24 <encoderUpgrade+0x2c8>
						schedule2MinuteOnDecrease();
 8009b04:	f7fe f8dc 	bl	8007cc0 <schedule2MinuteOnDecrease>
 8009b08:	e019      	b.n	8009b3e <encoderUpgrade+0x2e2>
 8009b0a:	bf00      	nop
 8009b0c:	20000294 	.word	0x20000294
 8009b10:	20000296 	.word	0x20000296
 8009b14:	20000298 	.word	0x20000298
 8009b18:	200002a1 	.word	0x200002a1
 8009b1c:	200002a0 	.word	0x200002a0
 8009b20:	20000259 	.word	0x20000259
					else if (EncoderState == ENCODER_SCHEDULE_2_HOUR_OFF)
 8009b24:	4b0f      	ldr	r3, [pc, #60]	; (8009b64 <encoderUpgrade+0x308>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b0b      	cmp	r3, #11
 8009b2a:	d102      	bne.n	8009b32 <encoderUpgrade+0x2d6>
						schedule2HourOffDecrease();
 8009b2c:	f7fe f93c 	bl	8007da8 <schedule2HourOffDecrease>
 8009b30:	e005      	b.n	8009b3e <encoderUpgrade+0x2e2>
					else if (EncoderState == ENCODER_SCHEDULE_2_MINUTE_OFF)
 8009b32:	4b0c      	ldr	r3, [pc, #48]	; (8009b64 <encoderUpgrade+0x308>)
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	2b0d      	cmp	r3, #13
 8009b38:	d101      	bne.n	8009b3e <encoderUpgrade+0x2e2>
						schedule2MinuteOffDecrease();
 8009b3a:	f7fe f9a9 	bl	8007e90 <schedule2MinuteOffDecrease>
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	3301      	adds	r3, #1
 8009b42:	73bb      	strb	r3, [r7, #14]
 8009b44:	7bbb      	ldrb	r3, [r7, #14]
 8009b46:	4a08      	ldr	r2, [pc, #32]	; (8009b68 <encoderUpgrade+0x30c>)
 8009b48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	f77f af6a 	ble.w	8009a26 <encoderUpgrade+0x1ca>
				EncoderCounterPrevious = EncoderCounter;
 8009b52:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <encoderUpgrade+0x310>)
 8009b54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009b58:	4b05      	ldr	r3, [pc, #20]	; (8009b70 <encoderUpgrade+0x314>)
 8009b5a:	801a      	strh	r2, [r3, #0]
}
 8009b5c:	bf00      	nop
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	200002a1 	.word	0x200002a1
 8009b68:	20000298 	.word	0x20000298
 8009b6c:	20000294 	.word	0x20000294
 8009b70:	20000296 	.word	0x20000296

08009b74 <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b094      	sub	sp, #80	; 0x50
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8009b7c:	f107 0308 	add.w	r3, r7, #8
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f001 f9e3 	bl	800af4e <UARTDMA_GetLineFromReceiveBuffer>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d15f      	bne.n	8009c4e <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8009b8e:	f107 0308 	add.w	r3, r7, #8
 8009b92:	4931      	ldr	r1, [pc, #196]	; (8009c58 <UART_ParseLine+0xe4>)
 8009b94:	4618      	mov	r0, r3
 8009b96:	f00a f90b 	bl	8013db0 <strtok>
 8009b9a:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8009b9c:	492f      	ldr	r1, [pc, #188]	; (8009c5c <UART_ParseLine+0xe8>)
 8009b9e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009ba0:	f7f6 fb1e 	bl	80001e0 <strcmp>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d102      	bne.n	8009bb0 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8009baa:	f000 f869 	bl	8009c80 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8009bae:	e04e      	b.n	8009c4e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8009bb0:	492b      	ldr	r1, [pc, #172]	; (8009c60 <UART_ParseLine+0xec>)
 8009bb2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009bb4:	f7f6 fb14 	bl	80001e0 <strcmp>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d102      	bne.n	8009bc4 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8009bbe:	f000 f8ad 	bl	8009d1c <UART_ParseAnswStatus>
}
 8009bc2:	e044      	b.n	8009c4e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8009bc4:	4927      	ldr	r1, [pc, #156]	; (8009c64 <UART_ParseLine+0xf0>)
 8009bc6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009bc8:	f7f6 fb0a 	bl	80001e0 <strcmp>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d102      	bne.n	8009bd8 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8009bd2:	f000 f8ab 	bl	8009d2c <UART_ParseAnswTemp>
}
 8009bd6:	e03a      	b.n	8009c4e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8009bd8:	4923      	ldr	r1, [pc, #140]	; (8009c68 <UART_ParseLine+0xf4>)
 8009bda:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009bdc:	f7f6 fb00 	bl	80001e0 <strcmp>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d102      	bne.n	8009bec <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8009be6:	f000 f953 	bl	8009e90 <UART_ParseAnswPres>
}
 8009bea:	e030      	b.n	8009c4e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8009bec:	491f      	ldr	r1, [pc, #124]	; (8009c6c <UART_ParseLine+0xf8>)
 8009bee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009bf0:	f7f6 faf6 	bl	80001e0 <strcmp>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d102      	bne.n	8009c00 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8009bfa:	f000 f9d7 	bl	8009fac <UART_ParseAnswChangeRelayState>
}
 8009bfe:	e026      	b.n	8009c4e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8009c00:	491b      	ldr	r1, [pc, #108]	; (8009c70 <UART_ParseLine+0xfc>)
 8009c02:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c04:	f7f6 faec 	bl	80001e0 <strcmp>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d102      	bne.n	8009c14 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 8009c0e:	f000 f9d4 	bl	8009fba <UART_ParseAnswChangeLightState>
}
 8009c12:	e01c      	b.n	8009c4e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8009c14:	4917      	ldr	r1, [pc, #92]	; (8009c74 <UART_ParseLine+0x100>)
 8009c16:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c18:	f7f6 fae2 	bl	80001e0 <strcmp>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d102      	bne.n	8009c28 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8009c22:	f000 f9d1 	bl	8009fc8 <UART_ParseAnswRelayStateStatus>
}
 8009c26:	e012      	b.n	8009c4e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8009c28:	4913      	ldr	r1, [pc, #76]	; (8009c78 <UART_ParseLine+0x104>)
 8009c2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c2c:	f7f6 fad8 	bl	80001e0 <strcmp>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d102      	bne.n	8009c3c <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 8009c36:	f000 fa2d 	bl	800a094 <UART_ParseAnswLightsStateStatus>
}
 8009c3a:	e008      	b.n	8009c4e <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 8009c3c:	490f      	ldr	r1, [pc, #60]	; (8009c7c <UART_ParseLine+0x108>)
 8009c3e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c40:	f7f6 face 	bl	80001e0 <strcmp>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 8009c4a:	f000 f96d 	bl	8009f28 <UART_ParseAnswDist>
}
 8009c4e:	bf00      	nop
 8009c50:	3750      	adds	r7, #80	; 0x50
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	080174d8 	.word	0x080174d8
 8009c5c:	080174dc 	.word	0x080174dc
 8009c60:	080174e0 	.word	0x080174e0
 8009c64:	080174e8 	.word	0x080174e8
 8009c68:	080174f0 	.word	0x080174f0
 8009c6c:	080174f8 	.word	0x080174f8
 8009c70:	08017504 	.word	0x08017504
 8009c74:	08017510 	.word	0x08017510
 8009c78:	0801751c 	.word	0x0801751c
 8009c7c:	08017528 	.word	0x08017528

08009c80 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009c86:	491f      	ldr	r1, [pc, #124]	; (8009d04 <UART_ParseLED+0x84>)
 8009c88:	2000      	movs	r0, #0
 8009c8a:	f00a f891 	bl	8013db0 <strtok>
 8009c8e:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d031      	beq.n	8009cfc <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2b2f      	cmp	r3, #47	; 0x2f
 8009c9e:	d903      	bls.n	8009ca8 <UART_ParseLED+0x28>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	2b39      	cmp	r3, #57	; 0x39
 8009ca6:	d904      	bls.n	8009cb2 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8009ca8:	4917      	ldr	r1, [pc, #92]	; (8009d08 <UART_ParseLED+0x88>)
 8009caa:	4818      	ldr	r0, [pc, #96]	; (8009d0c <UART_ParseLED+0x8c>)
 8009cac:	f001 f980 	bl	800afb0 <UARTDMA_Print>
			return;	// And exit parsing
 8009cb0:	e024      	b.n	8009cfc <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f008 fb6d 	bl	8012392 <atoi>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8009cbc:	78fb      	ldrb	r3, [r7, #3]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d10a      	bne.n	8009cd8 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009cc8:	4811      	ldr	r0, [pc, #68]	; (8009d10 <UART_ParseLED+0x90>)
 8009cca:	f002 fc05 	bl	800c4d8 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8009cce:	4911      	ldr	r1, [pc, #68]	; (8009d14 <UART_ParseLED+0x94>)
 8009cd0:	480e      	ldr	r0, [pc, #56]	; (8009d0c <UART_ParseLED+0x8c>)
 8009cd2:	f001 f96d 	bl	800afb0 <UARTDMA_Print>
 8009cd6:	e011      	b.n	8009cfc <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8009cd8:	78fb      	ldrb	r3, [r7, #3]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10a      	bne.n	8009cf4 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ce4:	480a      	ldr	r0, [pc, #40]	; (8009d10 <UART_ParseLED+0x90>)
 8009ce6:	f002 fbf7 	bl	800c4d8 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8009cea:	490b      	ldr	r1, [pc, #44]	; (8009d18 <UART_ParseLED+0x98>)
 8009cec:	4807      	ldr	r0, [pc, #28]	; (8009d0c <UART_ParseLED+0x8c>)
 8009cee:	f001 f95f 	bl	800afb0 <UARTDMA_Print>
 8009cf2:	e003      	b.n	8009cfc <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8009cf4:	4904      	ldr	r1, [pc, #16]	; (8009d08 <UART_ParseLED+0x88>)
 8009cf6:	4805      	ldr	r0, [pc, #20]	; (8009d0c <UART_ParseLED+0x8c>)
 8009cf8:	f001 f95a 	bl	800afb0 <UARTDMA_Print>
		}
	}
}
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	08017530 	.word	0x08017530
 8009d08:	08017534 	.word	0x08017534
 8009d0c:	200004fc 	.word	0x200004fc
 8009d10:	40020800 	.word	0x40020800
 8009d14:	08017544 	.word	0x08017544
 8009d18:	08017550 	.word	0x08017550

08009d1c <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8009d20:	bf00      	nop
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
	...

08009d2c <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8009d36:	494e      	ldr	r1, [pc, #312]	; (8009e70 <UART_ParseAnswTemp+0x144>)
 8009d38:	2000      	movs	r0, #0
 8009d3a:	f00a f839 	bl	8013db0 <strtok>
 8009d3e:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 808f 	beq.w	8009e68 <UART_ParseAnswTemp+0x13c>
	{
			NrCzujnika = atoi(ParsePointer);
 8009d4a:	68b8      	ldr	r0, [r7, #8]
 8009d4c:	f008 fb21 	bl	8012392 <atoi>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d010      	beq.n	8009d7e <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009d5c:	4944      	ldr	r1, [pc, #272]	; (8009e70 <UART_ParseAnswTemp+0x144>)
 8009d5e:	2000      	movs	r0, #0
 8009d60:	f00a f826 	bl	8013db0 <strtok>
 8009d64:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f008 fb10 	bl	801238c <atof>
 8009d6c:	ec53 2b10 	vmov	r2, r3, d0
 8009d70:	4610      	mov	r0, r2
 8009d72:	4619      	mov	r1, r3
 8009d74:	f7f6 ff50 	bl	8000c18 <__aeabi_d2f>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	4a3e      	ldr	r2, [pc, #248]	; (8009e74 <UART_ParseAnswTemp+0x148>)
 8009d7c:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8009d7e:	4b3e      	ldr	r3, [pc, #248]	; (8009e78 <UART_ParseAnswTemp+0x14c>)
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d170      	bne.n	8009e68 <UART_ParseAnswTemp+0x13c>
			{
				if(NrCzujnika == 1)
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d120      	bne.n	8009dce <UART_ParseAnswTemp+0xa2>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8009d8c:	483b      	ldr	r0, [pc, #236]	; (8009e7c <UART_ParseAnswTemp+0x150>)
 8009d8e:	f7f7 fded 	bl	800196c <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8009d92:	4b38      	ldr	r3, [pc, #224]	; (8009e74 <UART_ParseAnswTemp+0x148>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7f6 fbee 	bl	8000578 <__aeabi_f2d>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4937      	ldr	r1, [pc, #220]	; (8009e80 <UART_ParseAnswTemp+0x154>)
 8009da2:	4838      	ldr	r0, [pc, #224]	; (8009e84 <UART_ParseAnswTemp+0x158>)
 8009da4:	f009 f9ac 	bl	8013100 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009da8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009dac:	9301      	str	r3, [sp, #4]
 8009dae:	2301      	movs	r3, #1
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	2300      	movs	r3, #0
 8009db4:	2250      	movs	r2, #80	; 0x50
 8009db6:	2114      	movs	r1, #20
 8009db8:	4832      	ldr	r0, [pc, #200]	; (8009e84 <UART_ParseAnswTemp+0x158>)
 8009dba:	f7f7 fff1 	bl	8001da0 <EF_PutString>
						ESP_SendCurrentTempOutside(CTemp);
 8009dbe:	4b2d      	ldr	r3, [pc, #180]	; (8009e74 <UART_ParseAnswTemp+0x148>)
 8009dc0:	edd3 7a00 	vldr	s15, [r3]
 8009dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8009dc8:	f7f7 fa16 	bl	80011f8 <ESP_SendCurrentTempOutside>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8009dcc:	e04c      	b.n	8009e68 <UART_ParseAnswTemp+0x13c>
				else if(NrCzujnika == 2)
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d149      	bne.n	8009e68 <UART_ParseAnswTemp+0x13c>
						if (CTemp == 0.0) // Error in connection to ds18b20 - TODO! Send information about error in connection
 8009dd4:	4b27      	ldr	r3, [pc, #156]	; (8009e74 <UART_ParseAnswTemp+0x148>)
 8009dd6:	edd3 7a00 	vldr	s15, [r3]
 8009dda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009de2:	d11d      	bne.n	8009e20 <UART_ParseAnswTemp+0xf4>
							CTemp = LCTemp;
 8009de4:	4b28      	ldr	r3, [pc, #160]	; (8009e88 <UART_ParseAnswTemp+0x15c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a22      	ldr	r2, [pc, #136]	; (8009e74 <UART_ParseAnswTemp+0x148>)
 8009dea:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8009dec:	4823      	ldr	r0, [pc, #140]	; (8009e7c <UART_ParseAnswTemp+0x150>)
 8009dee:	f7f7 fdbd 	bl	800196c <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8009df2:	4b20      	ldr	r3, [pc, #128]	; (8009e74 <UART_ParseAnswTemp+0x148>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7f6 fbbe 	bl	8000578 <__aeabi_f2d>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4922      	ldr	r1, [pc, #136]	; (8009e8c <UART_ParseAnswTemp+0x160>)
 8009e02:	4820      	ldr	r0, [pc, #128]	; (8009e84 <UART_ParseAnswTemp+0x158>)
 8009e04:	f009 f97c 	bl	8013100 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009e08:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009e0c:	9301      	str	r3, [sp, #4]
 8009e0e:	2301      	movs	r3, #1
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	2300      	movs	r3, #0
 8009e14:	226e      	movs	r2, #110	; 0x6e
 8009e16:	2114      	movs	r1, #20
 8009e18:	481a      	ldr	r0, [pc, #104]	; (8009e84 <UART_ParseAnswTemp+0x158>)
 8009e1a:	f7f7 ffc1 	bl	8001da0 <EF_PutString>
	}
 8009e1e:	e023      	b.n	8009e68 <UART_ParseAnswTemp+0x13c>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8009e20:	4816      	ldr	r0, [pc, #88]	; (8009e7c <UART_ParseAnswTemp+0x150>)
 8009e22:	f7f7 fda3 	bl	800196c <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8009e26:	4b13      	ldr	r3, [pc, #76]	; (8009e74 <UART_ParseAnswTemp+0x148>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7f6 fba4 	bl	8000578 <__aeabi_f2d>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4915      	ldr	r1, [pc, #84]	; (8009e8c <UART_ParseAnswTemp+0x160>)
 8009e36:	4813      	ldr	r0, [pc, #76]	; (8009e84 <UART_ParseAnswTemp+0x158>)
 8009e38:	f009 f962 	bl	8013100 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009e3c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009e40:	9301      	str	r3, [sp, #4]
 8009e42:	2301      	movs	r3, #1
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	2300      	movs	r3, #0
 8009e48:	226e      	movs	r2, #110	; 0x6e
 8009e4a:	2114      	movs	r1, #20
 8009e4c:	480d      	ldr	r0, [pc, #52]	; (8009e84 <UART_ParseAnswTemp+0x158>)
 8009e4e:	f7f7 ffa7 	bl	8001da0 <EF_PutString>
							LCTemp = CTemp;
 8009e52:	4b08      	ldr	r3, [pc, #32]	; (8009e74 <UART_ParseAnswTemp+0x148>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a0c      	ldr	r2, [pc, #48]	; (8009e88 <UART_ParseAnswTemp+0x15c>)
 8009e58:	6013      	str	r3, [r2, #0]
							ESP_SendCurrentTempInside(CTemp);
 8009e5a:	4b06      	ldr	r3, [pc, #24]	; (8009e74 <UART_ParseAnswTemp+0x148>)
 8009e5c:	edd3 7a00 	vldr	s15, [r3]
 8009e60:	eeb0 0a67 	vmov.f32	s0, s15
 8009e64:	f7f7 f9ac 	bl	80011c0 <ESP_SendCurrentTempInside>
	}
 8009e68:	bf00      	nop
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	08017530 	.word	0x08017530
 8009e74:	200002a4 	.word	0x200002a4
 8009e78:	200002a0 	.word	0x200002a0
 8009e7c:	0802a964 	.word	0x0802a964
 8009e80:	0801755c 	.word	0x0801755c
 8009e84:	200002cc 	.word	0x200002cc
 8009e88:	200002a8 	.word	0x200002a8
 8009e8c:	08017570 	.word	0x08017570

08009e90 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8009e96:	491e      	ldr	r1, [pc, #120]	; (8009f10 <UART_ParseAnswPres+0x80>)
 8009e98:	2000      	movs	r0, #0
 8009e9a:	f009 ff89 	bl	8013db0 <strtok>
 8009e9e:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d02f      	beq.n	8009f08 <UART_ParseAnswPres+0x78>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f008 fa6f 	bl	801238c <atof>
 8009eae:	ec53 2b10 	vmov	r2, r3, d0
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	f7f6 feaf 	bl	8000c18 <__aeabi_d2f>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	4a15      	ldr	r2, [pc, #84]	; (8009f14 <UART_ParseAnswPres+0x84>)
 8009ebe:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8009ec0:	4b15      	ldr	r3, [pc, #84]	; (8009f18 <UART_ParseAnswPres+0x88>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d11f      	bne.n	8009f08 <UART_ParseAnswPres+0x78>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8009ec8:	4814      	ldr	r0, [pc, #80]	; (8009f1c <UART_ParseAnswPres+0x8c>)
 8009eca:	f7f7 fd4f 	bl	800196c <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8009ece:	4b11      	ldr	r3, [pc, #68]	; (8009f14 <UART_ParseAnswPres+0x84>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7f6 fb50 	bl	8000578 <__aeabi_f2d>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4910      	ldr	r1, [pc, #64]	; (8009f20 <UART_ParseAnswPres+0x90>)
 8009ede:	4811      	ldr	r0, [pc, #68]	; (8009f24 <UART_ParseAnswPres+0x94>)
 8009ee0:	f009 f90e 	bl	8013100 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009ee4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009ee8:	9301      	str	r3, [sp, #4]
 8009eea:	2301      	movs	r3, #1
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	22aa      	movs	r2, #170	; 0xaa
 8009ef2:	2114      	movs	r1, #20
 8009ef4:	480b      	ldr	r0, [pc, #44]	; (8009f24 <UART_ParseAnswPres+0x94>)
 8009ef6:	f7f7 ff53 	bl	8001da0 <EF_PutString>
			ESP_SendCurrentPressure(CPres);
 8009efa:	4b06      	ldr	r3, [pc, #24]	; (8009f14 <UART_ParseAnswPres+0x84>)
 8009efc:	edd3 7a00 	vldr	s15, [r3]
 8009f00:	eeb0 0a67 	vmov.f32	s0, s15
 8009f04:	f7f7 f994 	bl	8001230 <ESP_SendCurrentPressure>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8009f08:	bf00      	nop
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	08017530 	.word	0x08017530
 8009f14:	200002ac 	.word	0x200002ac
 8009f18:	200002a0 	.word	0x200002a0
 8009f1c:	0802a964 	.word	0x0802a964
 8009f20:	08017584 	.word	0x08017584
 8009f24:	200002cc 	.word	0x200002cc

08009f28 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8009f2e:	4919      	ldr	r1, [pc, #100]	; (8009f94 <UART_ParseAnswDist+0x6c>)
 8009f30:	2000      	movs	r0, #0
 8009f32:	f009 ff3d 	bl	8013db0 <strtok>
 8009f36:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d024      	beq.n	8009f8a <UART_ParseAnswDist+0x62>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f008 fa26 	bl	8012392 <atoi>
 8009f46:	4603      	mov	r3, r0
 8009f48:	461a      	mov	r2, r3
 8009f4a:	4b13      	ldr	r3, [pc, #76]	; (8009f98 <UART_ParseAnswDist+0x70>)
 8009f4c:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8009f4e:	4b13      	ldr	r3, [pc, #76]	; (8009f9c <UART_ParseAnswDist+0x74>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d119      	bne.n	8009f8a <UART_ParseAnswDist+0x62>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8009f56:	4812      	ldr	r0, [pc, #72]	; (8009fa0 <UART_ParseAnswDist+0x78>)
 8009f58:	f7f7 fd08 	bl	800196c <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 8009f5c:	4b0e      	ldr	r3, [pc, #56]	; (8009f98 <UART_ParseAnswDist+0x70>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	461a      	mov	r2, r3
 8009f62:	4910      	ldr	r1, [pc, #64]	; (8009fa4 <UART_ParseAnswDist+0x7c>)
 8009f64:	4810      	ldr	r0, [pc, #64]	; (8009fa8 <UART_ParseAnswDist+0x80>)
 8009f66:	f009 f8cb 	bl	8013100 <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009f6a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	2301      	movs	r3, #1
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	2300      	movs	r3, #0
 8009f76:	228c      	movs	r2, #140	; 0x8c
 8009f78:	21ad      	movs	r1, #173	; 0xad
 8009f7a:	480b      	ldr	r0, [pc, #44]	; (8009fa8 <UART_ParseAnswDist+0x80>)
 8009f7c:	f7f7 ff10 	bl	8001da0 <EF_PutString>
			ESP_SendCurrentWaterLvl(CDist2water);
 8009f80:	4b05      	ldr	r3, [pc, #20]	; (8009f98 <UART_ParseAnswDist+0x70>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7f7 f96f 	bl	8001268 <ESP_SendCurrentWaterLvl>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8009f8a:	bf00      	nop
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	08017530 	.word	0x08017530
 8009f98:	200002b4 	.word	0x200002b4
 8009f9c:	200002a0 	.word	0x200002a0
 8009fa0:	0802a964 	.word	0x0802a964
 8009fa4:	0801759c 	.word	0x0801759c
 8009fa8:	200002cc 	.word	0x200002cc

08009fac <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
	//TODO!
}
 8009fb0:	bf00      	nop
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8009fba:	b480      	push	{r7}
 8009fbc:	af00      	add	r7, sp, #0
	//TODO!
}
 8009fbe:	bf00      	nop
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8009fce:	2300      	movs	r3, #0
 8009fd0:	71fb      	strb	r3, [r7, #7]
 8009fd2:	e04a      	b.n	800a06a <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009fd4:	4928      	ldr	r1, [pc, #160]	; (800a078 <UART_ParseAnswRelayStateStatus+0xb0>)
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	f009 feea 	bl	8013db0 <strtok>
 8009fdc:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d02f      	beq.n	800a046 <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	71bb      	strb	r3, [r7, #6]
 8009fea:	e025      	b.n	800a038 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8009fec:	79bb      	ldrb	r3, [r7, #6]
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2b2f      	cmp	r3, #47	; 0x2f
 8009ff6:	d905      	bls.n	800a004 <UART_ParseAnswRelayStateStatus+0x3c>
 8009ff8:	79bb      	ldrb	r3, [r7, #6]
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2b39      	cmp	r3, #57	; 0x39
 800a002:	d90e      	bls.n	800a022 <UART_ParseAnswRelayStateStatus+0x5a>
 800a004:	79bb      	ldrb	r3, [r7, #6]
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	4413      	add	r3, r2
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	2b2e      	cmp	r3, #46	; 0x2e
 800a00e:	d008      	beq.n	800a022 <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 800a010:	491a      	ldr	r1, [pc, #104]	; (800a07c <UART_ParseAnswRelayStateStatus+0xb4>)
 800a012:	481b      	ldr	r0, [pc, #108]	; (800a080 <UART_ParseAnswRelayStateStatus+0xb8>)
 800a014:	f009 f874 	bl	8013100 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 800a018:	4919      	ldr	r1, [pc, #100]	; (800a080 <UART_ParseAnswRelayStateStatus+0xb8>)
 800a01a:	481a      	ldr	r0, [pc, #104]	; (800a084 <UART_ParseAnswRelayStateStatus+0xbc>)
 800a01c:	f000 ffc8 	bl	800afb0 <UARTDMA_Print>
					return;	// And exit parsing
 800a020:	e026      	b.n	800a070 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800a022:	6838      	ldr	r0, [r7, #0]
 800a024:	f008 f9b5 	bl	8012392 <atoi>
 800a028:	4602      	mov	r2, r0
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	b2d1      	uxtb	r1, r2
 800a02e:	4a16      	ldr	r2, [pc, #88]	; (800a088 <UART_ParseAnswRelayStateStatus+0xc0>)
 800a030:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800a032:	79bb      	ldrb	r3, [r7, #6]
 800a034:	3301      	adds	r3, #1
 800a036:	71bb      	strb	r3, [r7, #6]
 800a038:	79bb      	ldrb	r3, [r7, #6]
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	4413      	add	r3, r2
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1d3      	bne.n	8009fec <UART_ParseAnswRelayStateStatus+0x24>
 800a044:	e008      	b.n	800a058 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800a046:	4911      	ldr	r1, [pc, #68]	; (800a08c <UART_ParseAnswRelayStateStatus+0xc4>)
 800a048:	480d      	ldr	r0, [pc, #52]	; (800a080 <UART_ParseAnswRelayStateStatus+0xb8>)
 800a04a:	f009 f859 	bl	8013100 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800a04e:	490c      	ldr	r1, [pc, #48]	; (800a080 <UART_ParseAnswRelayStateStatus+0xb8>)
 800a050:	480c      	ldr	r0, [pc, #48]	; (800a084 <UART_ParseAnswRelayStateStatus+0xbc>)
 800a052:	f000 ffad 	bl	800afb0 <UARTDMA_Print>
			return;	// And exit parsing
 800a056:	e00b      	b.n	800a070 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 800a058:	4b0d      	ldr	r3, [pc, #52]	; (800a090 <UART_ParseAnswRelayStateStatus+0xc8>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d101      	bne.n	800a064 <UART_ParseAnswRelayStateStatus+0x9c>
 800a060:	f7fb f8d0 	bl	8005204 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	3301      	adds	r3, #1
 800a068:	71fb      	strb	r3, [r7, #7]
 800a06a:	79fb      	ldrb	r3, [r7, #7]
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	d9b1      	bls.n	8009fd4 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	08017530 	.word	0x08017530
 800a07c:	080175a8 	.word	0x080175a8
 800a080:	2000030c 	.word	0x2000030c
 800a084:	200004fc 	.word	0x200004fc
 800a088:	200002b8 	.word	0x200002b8
 800a08c:	080175bc 	.word	0x080175bc
 800a090:	200002a0 	.word	0x200002a0

0800a094 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 800a09a:	2300      	movs	r3, #0
 800a09c:	71fb      	strb	r3, [r7, #7]
 800a09e:	e04a      	b.n	800a136 <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800a0a0:	4928      	ldr	r1, [pc, #160]	; (800a144 <UART_ParseAnswLightsStateStatus+0xb0>)
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	f009 fe84 	bl	8013db0 <strtok>
 800a0a8:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d02f      	beq.n	800a112 <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	71bb      	strb	r3, [r7, #6]
 800a0b6:	e025      	b.n	800a104 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 800a0b8:	79bb      	ldrb	r3, [r7, #6]
 800a0ba:	683a      	ldr	r2, [r7, #0]
 800a0bc:	4413      	add	r3, r2
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	2b2f      	cmp	r3, #47	; 0x2f
 800a0c2:	d905      	bls.n	800a0d0 <UART_ParseAnswLightsStateStatus+0x3c>
 800a0c4:	79bb      	ldrb	r3, [r7, #6]
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	2b39      	cmp	r3, #57	; 0x39
 800a0ce:	d90e      	bls.n	800a0ee <UART_ParseAnswLightsStateStatus+0x5a>
 800a0d0:	79bb      	ldrb	r3, [r7, #6]
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a0da:	d008      	beq.n	800a0ee <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 800a0dc:	491a      	ldr	r1, [pc, #104]	; (800a148 <UART_ParseAnswLightsStateStatus+0xb4>)
 800a0de:	481b      	ldr	r0, [pc, #108]	; (800a14c <UART_ParseAnswLightsStateStatus+0xb8>)
 800a0e0:	f009 f80e 	bl	8013100 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 800a0e4:	4919      	ldr	r1, [pc, #100]	; (800a14c <UART_ParseAnswLightsStateStatus+0xb8>)
 800a0e6:	481a      	ldr	r0, [pc, #104]	; (800a150 <UART_ParseAnswLightsStateStatus+0xbc>)
 800a0e8:	f000 ff62 	bl	800afb0 <UARTDMA_Print>
					return;	// And exit parsing
 800a0ec:	e026      	b.n	800a13c <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800a0ee:	6838      	ldr	r0, [r7, #0]
 800a0f0:	f008 f94f 	bl	8012392 <atoi>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	79fb      	ldrb	r3, [r7, #7]
 800a0f8:	b2d1      	uxtb	r1, r2
 800a0fa:	4a16      	ldr	r2, [pc, #88]	; (800a154 <UART_ParseAnswLightsStateStatus+0xc0>)
 800a0fc:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800a0fe:	79bb      	ldrb	r3, [r7, #6]
 800a100:	3301      	adds	r3, #1
 800a102:	71bb      	strb	r3, [r7, #6]
 800a104:	79bb      	ldrb	r3, [r7, #6]
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	4413      	add	r3, r2
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1d3      	bne.n	800a0b8 <UART_ParseAnswLightsStateStatus+0x24>
 800a110:	e008      	b.n	800a124 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800a112:	4911      	ldr	r1, [pc, #68]	; (800a158 <UART_ParseAnswLightsStateStatus+0xc4>)
 800a114:	480d      	ldr	r0, [pc, #52]	; (800a14c <UART_ParseAnswLightsStateStatus+0xb8>)
 800a116:	f008 fff3 	bl	8013100 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800a11a:	490c      	ldr	r1, [pc, #48]	; (800a14c <UART_ParseAnswLightsStateStatus+0xb8>)
 800a11c:	480c      	ldr	r0, [pc, #48]	; (800a150 <UART_ParseAnswLightsStateStatus+0xbc>)
 800a11e:	f000 ff47 	bl	800afb0 <UARTDMA_Print>
			return;	// And exit parsing
 800a122:	e00b      	b.n	800a13c <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 800a124:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <UART_ParseAnswLightsStateStatus+0xc8>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	2b05      	cmp	r3, #5
 800a12a:	d101      	bne.n	800a130 <UART_ParseAnswLightsStateStatus+0x9c>
 800a12c:	f7fb f972 	bl	8005414 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 800a130:	79fb      	ldrb	r3, [r7, #7]
 800a132:	3301      	adds	r3, #1
 800a134:	71fb      	strb	r3, [r7, #7]
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d9b1      	bls.n	800a0a0 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	08017530 	.word	0x08017530
 800a148:	080175a8 	.word	0x080175a8
 800a14c:	2000030c 	.word	0x2000030c
 800a150:	200004fc 	.word	0x200004fc
 800a154:	200002bc 	.word	0x200002bc
 800a158:	080175bc 	.word	0x080175bc
 800a15c:	200002a0 	.word	0x200002a0

0800a160 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	4603      	mov	r3, r0
 800a168:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 800a16a:	79fb      	ldrb	r3, [r7, #7]
 800a16c:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	2b27      	cmp	r3, #39	; 0x27
 800a172:	f200 8129 	bhi.w	800a3c8 <SendComand+0x268>
 800a176:	a201      	add	r2, pc, #4	; (adr r2, 800a17c <SendComand+0x1c>)
 800a178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17c:	0800a21d 	.word	0x0800a21d
 800a180:	0800a227 	.word	0x0800a227
 800a184:	0800a231 	.word	0x0800a231
 800a188:	0800a23b 	.word	0x0800a23b
 800a18c:	0800a24f 	.word	0x0800a24f
 800a190:	0800a259 	.word	0x0800a259
 800a194:	0800a263 	.word	0x0800a263
 800a198:	0800a26d 	.word	0x0800a26d
 800a19c:	0800a277 	.word	0x0800a277
 800a1a0:	0800a281 	.word	0x0800a281
 800a1a4:	0800a28b 	.word	0x0800a28b
 800a1a8:	0800a295 	.word	0x0800a295
 800a1ac:	0800a29f 	.word	0x0800a29f
 800a1b0:	0800a2c7 	.word	0x0800a2c7
 800a1b4:	0800a2d1 	.word	0x0800a2d1
 800a1b8:	0800a2db 	.word	0x0800a2db
 800a1bc:	0800a2e5 	.word	0x0800a2e5
 800a1c0:	0800a2ef 	.word	0x0800a2ef
 800a1c4:	0800a2f9 	.word	0x0800a2f9
 800a1c8:	0800a303 	.word	0x0800a303
 800a1cc:	0800a30d 	.word	0x0800a30d
 800a1d0:	0800a2bd 	.word	0x0800a2bd
 800a1d4:	0800a32b 	.word	0x0800a32b
 800a1d8:	0800a2a9 	.word	0x0800a2a9
 800a1dc:	0800a2b3 	.word	0x0800a2b3
 800a1e0:	0800a317 	.word	0x0800a317
 800a1e4:	0800a321 	.word	0x0800a321
 800a1e8:	0800a245 	.word	0x0800a245
 800a1ec:	0800a335 	.word	0x0800a335
 800a1f0:	0800a33f 	.word	0x0800a33f
 800a1f4:	0800a349 	.word	0x0800a349
 800a1f8:	0800a353 	.word	0x0800a353
 800a1fc:	0800a35d 	.word	0x0800a35d
 800a200:	0800a367 	.word	0x0800a367
 800a204:	0800a371 	.word	0x0800a371
 800a208:	0800a37b 	.word	0x0800a37b
 800a20c:	0800a385 	.word	0x0800a385
 800a210:	0800a38f 	.word	0x0800a38f
 800a214:	0800a3b5 	.word	0x0800a3b5
 800a218:	0800a3bf 	.word	0x0800a3bf
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 800a21c:	496d      	ldr	r1, [pc, #436]	; (800a3d4 <SendComand+0x274>)
 800a21e:	486e      	ldr	r0, [pc, #440]	; (800a3d8 <SendComand+0x278>)
 800a220:	f000 fec6 	bl	800afb0 <UARTDMA_Print>
			break;
 800a224:	e0d0      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 800a226:	496d      	ldr	r1, [pc, #436]	; (800a3dc <SendComand+0x27c>)
 800a228:	486b      	ldr	r0, [pc, #428]	; (800a3d8 <SendComand+0x278>)
 800a22a:	f000 fec1 	bl	800afb0 <UARTDMA_Print>
			break;
 800a22e:	e0cb      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 800a230:	496b      	ldr	r1, [pc, #428]	; (800a3e0 <SendComand+0x280>)
 800a232:	4869      	ldr	r0, [pc, #420]	; (800a3d8 <SendComand+0x278>)
 800a234:	f000 febc 	bl	800afb0 <UARTDMA_Print>
			break;
 800a238:	e0c6      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 800a23a:	496a      	ldr	r1, [pc, #424]	; (800a3e4 <SendComand+0x284>)
 800a23c:	4866      	ldr	r0, [pc, #408]	; (800a3d8 <SendComand+0x278>)
 800a23e:	f000 feb7 	bl	800afb0 <UARTDMA_Print>
			break;
 800a242:	e0c1      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 800a244:	4968      	ldr	r1, [pc, #416]	; (800a3e8 <SendComand+0x288>)
 800a246:	4864      	ldr	r0, [pc, #400]	; (800a3d8 <SendComand+0x278>)
 800a248:	f000 feb2 	bl	800afb0 <UARTDMA_Print>
			break;
 800a24c:	e0bc      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 800a24e:	4967      	ldr	r1, [pc, #412]	; (800a3ec <SendComand+0x28c>)
 800a250:	4861      	ldr	r0, [pc, #388]	; (800a3d8 <SendComand+0x278>)
 800a252:	f000 fead 	bl	800afb0 <UARTDMA_Print>
			break;
 800a256:	e0b7      	b.n	800a3c8 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 800a258:	4965      	ldr	r1, [pc, #404]	; (800a3f0 <SendComand+0x290>)
 800a25a:	485f      	ldr	r0, [pc, #380]	; (800a3d8 <SendComand+0x278>)
 800a25c:	f000 fea8 	bl	800afb0 <UARTDMA_Print>
			break;
 800a260:	e0b2      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 800a262:	4964      	ldr	r1, [pc, #400]	; (800a3f4 <SendComand+0x294>)
 800a264:	485c      	ldr	r0, [pc, #368]	; (800a3d8 <SendComand+0x278>)
 800a266:	f000 fea3 	bl	800afb0 <UARTDMA_Print>
			break;
 800a26a:	e0ad      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 800a26c:	4962      	ldr	r1, [pc, #392]	; (800a3f8 <SendComand+0x298>)
 800a26e:	485a      	ldr	r0, [pc, #360]	; (800a3d8 <SendComand+0x278>)
 800a270:	f000 fe9e 	bl	800afb0 <UARTDMA_Print>
			break;
 800a274:	e0a8      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 800a276:	4961      	ldr	r1, [pc, #388]	; (800a3fc <SendComand+0x29c>)
 800a278:	4857      	ldr	r0, [pc, #348]	; (800a3d8 <SendComand+0x278>)
 800a27a:	f000 fe99 	bl	800afb0 <UARTDMA_Print>
			break;
 800a27e:	e0a3      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 800a280:	495f      	ldr	r1, [pc, #380]	; (800a400 <SendComand+0x2a0>)
 800a282:	4855      	ldr	r0, [pc, #340]	; (800a3d8 <SendComand+0x278>)
 800a284:	f000 fe94 	bl	800afb0 <UARTDMA_Print>
			break;
 800a288:	e09e      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 800a28a:	495e      	ldr	r1, [pc, #376]	; (800a404 <SendComand+0x2a4>)
 800a28c:	4852      	ldr	r0, [pc, #328]	; (800a3d8 <SendComand+0x278>)
 800a28e:	f000 fe8f 	bl	800afb0 <UARTDMA_Print>
			break;
 800a292:	e099      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 800a294:	495c      	ldr	r1, [pc, #368]	; (800a408 <SendComand+0x2a8>)
 800a296:	4850      	ldr	r0, [pc, #320]	; (800a3d8 <SendComand+0x278>)
 800a298:	f000 fe8a 	bl	800afb0 <UARTDMA_Print>
			break;
 800a29c:	e094      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 800a29e:	495b      	ldr	r1, [pc, #364]	; (800a40c <SendComand+0x2ac>)
 800a2a0:	484d      	ldr	r0, [pc, #308]	; (800a3d8 <SendComand+0x278>)
 800a2a2:	f000 fe85 	bl	800afb0 <UARTDMA_Print>
			break;
 800a2a6:	e08f      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 800a2a8:	4959      	ldr	r1, [pc, #356]	; (800a410 <SendComand+0x2b0>)
 800a2aa:	484b      	ldr	r0, [pc, #300]	; (800a3d8 <SendComand+0x278>)
 800a2ac:	f000 fe80 	bl	800afb0 <UARTDMA_Print>
			break;
 800a2b0:	e08a      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 800a2b2:	4958      	ldr	r1, [pc, #352]	; (800a414 <SendComand+0x2b4>)
 800a2b4:	4848      	ldr	r0, [pc, #288]	; (800a3d8 <SendComand+0x278>)
 800a2b6:	f000 fe7b 	bl	800afb0 <UARTDMA_Print>
			break;
 800a2ba:	e085      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 800a2bc:	4956      	ldr	r1, [pc, #344]	; (800a418 <SendComand+0x2b8>)
 800a2be:	4846      	ldr	r0, [pc, #280]	; (800a3d8 <SendComand+0x278>)
 800a2c0:	f000 fe76 	bl	800afb0 <UARTDMA_Print>
			break;
 800a2c4:	e080      	b.n	800a3c8 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 800a2c6:	4955      	ldr	r1, [pc, #340]	; (800a41c <SendComand+0x2bc>)
 800a2c8:	4843      	ldr	r0, [pc, #268]	; (800a3d8 <SendComand+0x278>)
 800a2ca:	f000 fe71 	bl	800afb0 <UARTDMA_Print>
			break;
 800a2ce:	e07b      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 800a2d0:	4953      	ldr	r1, [pc, #332]	; (800a420 <SendComand+0x2c0>)
 800a2d2:	4841      	ldr	r0, [pc, #260]	; (800a3d8 <SendComand+0x278>)
 800a2d4:	f000 fe6c 	bl	800afb0 <UARTDMA_Print>
			break;
 800a2d8:	e076      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 800a2da:	4952      	ldr	r1, [pc, #328]	; (800a424 <SendComand+0x2c4>)
 800a2dc:	483e      	ldr	r0, [pc, #248]	; (800a3d8 <SendComand+0x278>)
 800a2de:	f000 fe67 	bl	800afb0 <UARTDMA_Print>
			break;
 800a2e2:	e071      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 800a2e4:	4950      	ldr	r1, [pc, #320]	; (800a428 <SendComand+0x2c8>)
 800a2e6:	483c      	ldr	r0, [pc, #240]	; (800a3d8 <SendComand+0x278>)
 800a2e8:	f000 fe62 	bl	800afb0 <UARTDMA_Print>
			break;
 800a2ec:	e06c      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 800a2ee:	494f      	ldr	r1, [pc, #316]	; (800a42c <SendComand+0x2cc>)
 800a2f0:	4839      	ldr	r0, [pc, #228]	; (800a3d8 <SendComand+0x278>)
 800a2f2:	f000 fe5d 	bl	800afb0 <UARTDMA_Print>
			break;
 800a2f6:	e067      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 800a2f8:	494d      	ldr	r1, [pc, #308]	; (800a430 <SendComand+0x2d0>)
 800a2fa:	4837      	ldr	r0, [pc, #220]	; (800a3d8 <SendComand+0x278>)
 800a2fc:	f000 fe58 	bl	800afb0 <UARTDMA_Print>
			break;
 800a300:	e062      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 800a302:	494c      	ldr	r1, [pc, #304]	; (800a434 <SendComand+0x2d4>)
 800a304:	4834      	ldr	r0, [pc, #208]	; (800a3d8 <SendComand+0x278>)
 800a306:	f000 fe53 	bl	800afb0 <UARTDMA_Print>
			break;
 800a30a:	e05d      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 800a30c:	494a      	ldr	r1, [pc, #296]	; (800a438 <SendComand+0x2d8>)
 800a30e:	4832      	ldr	r0, [pc, #200]	; (800a3d8 <SendComand+0x278>)
 800a310:	f000 fe4e 	bl	800afb0 <UARTDMA_Print>
			break;
 800a314:	e058      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 800a316:	4949      	ldr	r1, [pc, #292]	; (800a43c <SendComand+0x2dc>)
 800a318:	482f      	ldr	r0, [pc, #188]	; (800a3d8 <SendComand+0x278>)
 800a31a:	f000 fe49 	bl	800afb0 <UARTDMA_Print>
			break;
 800a31e:	e053      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 800a320:	4947      	ldr	r1, [pc, #284]	; (800a440 <SendComand+0x2e0>)
 800a322:	482d      	ldr	r0, [pc, #180]	; (800a3d8 <SendComand+0x278>)
 800a324:	f000 fe44 	bl	800afb0 <UARTDMA_Print>
			break;
 800a328:	e04e      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 800a32a:	4946      	ldr	r1, [pc, #280]	; (800a444 <SendComand+0x2e4>)
 800a32c:	482a      	ldr	r0, [pc, #168]	; (800a3d8 <SendComand+0x278>)
 800a32e:	f000 fe3f 	bl	800afb0 <UARTDMA_Print>
			break;
 800a332:	e049      	b.n	800a3c8 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 800a334:	4944      	ldr	r1, [pc, #272]	; (800a448 <SendComand+0x2e8>)
 800a336:	4828      	ldr	r0, [pc, #160]	; (800a3d8 <SendComand+0x278>)
 800a338:	f000 fe3a 	bl	800afb0 <UARTDMA_Print>
			break;
 800a33c:	e044      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 800a33e:	4943      	ldr	r1, [pc, #268]	; (800a44c <SendComand+0x2ec>)
 800a340:	4825      	ldr	r0, [pc, #148]	; (800a3d8 <SendComand+0x278>)
 800a342:	f000 fe35 	bl	800afb0 <UARTDMA_Print>
			break;
 800a346:	e03f      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 800a348:	4941      	ldr	r1, [pc, #260]	; (800a450 <SendComand+0x2f0>)
 800a34a:	4823      	ldr	r0, [pc, #140]	; (800a3d8 <SendComand+0x278>)
 800a34c:	f000 fe30 	bl	800afb0 <UARTDMA_Print>
			break;
 800a350:	e03a      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 800a352:	4940      	ldr	r1, [pc, #256]	; (800a454 <SendComand+0x2f4>)
 800a354:	4820      	ldr	r0, [pc, #128]	; (800a3d8 <SendComand+0x278>)
 800a356:	f000 fe2b 	bl	800afb0 <UARTDMA_Print>
			break;
 800a35a:	e035      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 800a35c:	493e      	ldr	r1, [pc, #248]	; (800a458 <SendComand+0x2f8>)
 800a35e:	481e      	ldr	r0, [pc, #120]	; (800a3d8 <SendComand+0x278>)
 800a360:	f000 fe26 	bl	800afb0 <UARTDMA_Print>
			break;
 800a364:	e030      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 800a366:	493d      	ldr	r1, [pc, #244]	; (800a45c <SendComand+0x2fc>)
 800a368:	481b      	ldr	r0, [pc, #108]	; (800a3d8 <SendComand+0x278>)
 800a36a:	f000 fe21 	bl	800afb0 <UARTDMA_Print>
			break;
 800a36e:	e02b      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 800a370:	493b      	ldr	r1, [pc, #236]	; (800a460 <SendComand+0x300>)
 800a372:	4819      	ldr	r0, [pc, #100]	; (800a3d8 <SendComand+0x278>)
 800a374:	f000 fe1c 	bl	800afb0 <UARTDMA_Print>
			break;
 800a378:	e026      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 800a37a:	493a      	ldr	r1, [pc, #232]	; (800a464 <SendComand+0x304>)
 800a37c:	4816      	ldr	r0, [pc, #88]	; (800a3d8 <SendComand+0x278>)
 800a37e:	f000 fe17 	bl	800afb0 <UARTDMA_Print>
			break;
 800a382:	e021      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 800a384:	4938      	ldr	r1, [pc, #224]	; (800a468 <SendComand+0x308>)
 800a386:	4814      	ldr	r0, [pc, #80]	; (800a3d8 <SendComand+0x278>)
 800a388:	f000 fe12 	bl	800afb0 <UARTDMA_Print>
			break;
 800a38c:	e01c      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 800a38e:	4b37      	ldr	r3, [pc, #220]	; (800a46c <SendComand+0x30c>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	2b08      	cmp	r3, #8
 800a394:	d802      	bhi.n	800a39c <SendComand+0x23c>
 800a396:	4b35      	ldr	r3, [pc, #212]	; (800a46c <SendComand+0x30c>)
 800a398:	2209      	movs	r2, #9
 800a39a:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 800a39c:	4b33      	ldr	r3, [pc, #204]	; (800a46c <SendComand+0x30c>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	4933      	ldr	r1, [pc, #204]	; (800a470 <SendComand+0x310>)
 800a3a4:	4833      	ldr	r0, [pc, #204]	; (800a474 <SendComand+0x314>)
 800a3a6:	f008 feab 	bl	8013100 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800a3aa:	4932      	ldr	r1, [pc, #200]	; (800a474 <SendComand+0x314>)
 800a3ac:	480a      	ldr	r0, [pc, #40]	; (800a3d8 <SendComand+0x278>)
 800a3ae:	f000 fdff 	bl	800afb0 <UARTDMA_Print>
			break;
 800a3b2:	e009      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 800a3b4:	4930      	ldr	r1, [pc, #192]	; (800a478 <SendComand+0x318>)
 800a3b6:	4808      	ldr	r0, [pc, #32]	; (800a3d8 <SendComand+0x278>)
 800a3b8:	f000 fdfa 	bl	800afb0 <UARTDMA_Print>
			break;
 800a3bc:	e004      	b.n	800a3c8 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 800a3be:	492f      	ldr	r1, [pc, #188]	; (800a47c <SendComand+0x31c>)
 800a3c0:	4805      	ldr	r0, [pc, #20]	; (800a3d8 <SendComand+0x278>)
 800a3c2:	f000 fdf5 	bl	800afb0 <UARTDMA_Print>
			break;
 800a3c6:	bf00      	nop
		}
	return 1;
 800a3c8:	2301      	movs	r3, #1
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	080175d8 	.word	0x080175d8
 800a3d8:	200004fc 	.word	0x200004fc
 800a3dc:	080175e0 	.word	0x080175e0
 800a3e0:	080175e8 	.word	0x080175e8
 800a3e4:	080175f4 	.word	0x080175f4
 800a3e8:	080175fc 	.word	0x080175fc
 800a3ec:	08017604 	.word	0x08017604
 800a3f0:	0801760c 	.word	0x0801760c
 800a3f4:	0801761c 	.word	0x0801761c
 800a3f8:	0801762c 	.word	0x0801762c
 800a3fc:	0801763c 	.word	0x0801763c
 800a400:	0801764c 	.word	0x0801764c
 800a404:	0801765c 	.word	0x0801765c
 800a408:	0801766c 	.word	0x0801766c
 800a40c:	0801767c 	.word	0x0801767c
 800a410:	0801768c 	.word	0x0801768c
 800a414:	0801769c 	.word	0x0801769c
 800a418:	080176ac 	.word	0x080176ac
 800a41c:	080176bc 	.word	0x080176bc
 800a420:	080176cc 	.word	0x080176cc
 800a424:	080176dc 	.word	0x080176dc
 800a428:	080176ec 	.word	0x080176ec
 800a42c:	080176fc 	.word	0x080176fc
 800a430:	0801770c 	.word	0x0801770c
 800a434:	0801771c 	.word	0x0801771c
 800a438:	0801772c 	.word	0x0801772c
 800a43c:	0801773c 	.word	0x0801773c
 800a440:	0801774c 	.word	0x0801774c
 800a444:	0801775c 	.word	0x0801775c
 800a448:	0801776c 	.word	0x0801776c
 800a44c:	0801777c 	.word	0x0801777c
 800a450:	0801778c 	.word	0x0801778c
 800a454:	0801779c 	.word	0x0801779c
 800a458:	080177ac 	.word	0x080177ac
 800a45c:	080177bc 	.word	0x080177bc
 800a460:	080177cc 	.word	0x080177cc
 800a464:	080177dc 	.word	0x080177dc
 800a468:	080177ec 	.word	0x080177ec
 800a46c:	20000034 	.word	0x20000034
 800a470:	080177fc 	.word	0x080177fc
 800a474:	2000030c 	.word	0x2000030c
 800a478:	0801780c 	.word	0x0801780c
 800a47c:	0801781c 	.word	0x0801781c

0800a480 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	781a      	ldrb	r2, [r3, #0]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	785b      	ldrb	r3, [r3, #1]
 800a492:	429a      	cmp	r2, r3
 800a494:	d101      	bne.n	800a49a <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 800a496:	2301      	movs	r3, #1
 800a498:	e015      	b.n	800a4c6 <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	785b      	ldrb	r3, [r3, #1]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	789a      	ldrb	r2, [r3, #2]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	785b      	ldrb	r3, [r3, #1]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	425a      	negs	r2, r3
 800a4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4ba:	bf58      	it	pl
 800a4bc:	4253      	negpl	r3, r2
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b085      	sub	sp, #20
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	425a      	negs	r2, r3
 800a4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4ee:	bf58      	it	pl
 800a4f0:	4253      	negpl	r3, r2
 800a4f2:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	785b      	ldrb	r3, [r3, #1]
 800a4f8:	7bfa      	ldrb	r2, [r7, #15]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d101      	bne.n	800a502 <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 800a4fe:	2301      	movs	r3, #1
 800a500:	e00a      	b.n	800a518 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4413      	add	r3, r2
 800a50c:	78fa      	ldrb	r2, [r7, #3]
 800a50e:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	7bfa      	ldrb	r2, [r7, #15]
 800a514:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800a528:	4b17      	ldr	r3, [pc, #92]	; (800a588 <MX_SPI1_Init+0x64>)
 800a52a:	4a18      	ldr	r2, [pc, #96]	; (800a58c <MX_SPI1_Init+0x68>)
 800a52c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a52e:	4b16      	ldr	r3, [pc, #88]	; (800a588 <MX_SPI1_Init+0x64>)
 800a530:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a534:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a536:	4b14      	ldr	r3, [pc, #80]	; (800a588 <MX_SPI1_Init+0x64>)
 800a538:	2200      	movs	r2, #0
 800a53a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a53c:	4b12      	ldr	r3, [pc, #72]	; (800a588 <MX_SPI1_Init+0x64>)
 800a53e:	2200      	movs	r2, #0
 800a540:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a542:	4b11      	ldr	r3, [pc, #68]	; (800a588 <MX_SPI1_Init+0x64>)
 800a544:	2200      	movs	r2, #0
 800a546:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a548:	4b0f      	ldr	r3, [pc, #60]	; (800a588 <MX_SPI1_Init+0x64>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a54e:	4b0e      	ldr	r3, [pc, #56]	; (800a588 <MX_SPI1_Init+0x64>)
 800a550:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a554:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800a556:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <MX_SPI1_Init+0x64>)
 800a558:	2210      	movs	r2, #16
 800a55a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a55c:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <MX_SPI1_Init+0x64>)
 800a55e:	2200      	movs	r2, #0
 800a560:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a562:	4b09      	ldr	r3, [pc, #36]	; (800a588 <MX_SPI1_Init+0x64>)
 800a564:	2200      	movs	r2, #0
 800a566:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a568:	4b07      	ldr	r3, [pc, #28]	; (800a588 <MX_SPI1_Init+0x64>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a56e:	4b06      	ldr	r3, [pc, #24]	; (800a588 <MX_SPI1_Init+0x64>)
 800a570:	220a      	movs	r2, #10
 800a572:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a574:	4804      	ldr	r0, [pc, #16]	; (800a588 <MX_SPI1_Init+0x64>)
 800a576:	f005 fd47 	bl	8010008 <HAL_SPI_Init>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d001      	beq.n	800a584 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a580:	f7fb fe7e 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a584:	bf00      	nop
 800a586:	bd80      	pop	{r7, pc}
 800a588:	20000944 	.word	0x20000944
 800a58c:	40013000 	.word	0x40013000

0800a590 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800a594:	4b17      	ldr	r3, [pc, #92]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a596:	4a18      	ldr	r2, [pc, #96]	; (800a5f8 <MX_SPI3_Init+0x68>)
 800a598:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a59a:	4b16      	ldr	r3, [pc, #88]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a59c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a5a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a5a2:	4b14      	ldr	r3, [pc, #80]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a5a8:	4b12      	ldr	r3, [pc, #72]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5ae:	4b11      	ldr	r3, [pc, #68]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a5b4:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a5ba:	4b0e      	ldr	r3, [pc, #56]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a5bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a5c2:	4b0c      	ldr	r3, [pc, #48]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a5c4:	2220      	movs	r2, #32
 800a5c6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a5c8:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a5ce:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5d4:	4b07      	ldr	r3, [pc, #28]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800a5da:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a5dc:	220a      	movs	r2, #10
 800a5de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a5e0:	4804      	ldr	r0, [pc, #16]	; (800a5f4 <MX_SPI3_Init+0x64>)
 800a5e2:	f005 fd11 	bl	8010008 <HAL_SPI_Init>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d001      	beq.n	800a5f0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800a5ec:	f7fb fe48 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a5f0:	bf00      	nop
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	200008ec 	.word	0x200008ec
 800a5f8:	40003c00 	.word	0x40003c00

0800a5fc <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800a600:	4b17      	ldr	r3, [pc, #92]	; (800a660 <MX_SPI5_Init+0x64>)
 800a602:	4a18      	ldr	r2, [pc, #96]	; (800a664 <MX_SPI5_Init+0x68>)
 800a604:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800a606:	4b16      	ldr	r3, [pc, #88]	; (800a660 <MX_SPI5_Init+0x64>)
 800a608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a60c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800a60e:	4b14      	ldr	r3, [pc, #80]	; (800a660 <MX_SPI5_Init+0x64>)
 800a610:	2200      	movs	r2, #0
 800a612:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800a614:	4b12      	ldr	r3, [pc, #72]	; (800a660 <MX_SPI5_Init+0x64>)
 800a616:	2200      	movs	r2, #0
 800a618:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a61a:	4b11      	ldr	r3, [pc, #68]	; (800a660 <MX_SPI5_Init+0x64>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a620:	4b0f      	ldr	r3, [pc, #60]	; (800a660 <MX_SPI5_Init+0x64>)
 800a622:	2200      	movs	r2, #0
 800a624:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800a626:	4b0e      	ldr	r3, [pc, #56]	; (800a660 <MX_SPI5_Init+0x64>)
 800a628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a62c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a62e:	4b0c      	ldr	r3, [pc, #48]	; (800a660 <MX_SPI5_Init+0x64>)
 800a630:	2200      	movs	r2, #0
 800a632:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a634:	4b0a      	ldr	r3, [pc, #40]	; (800a660 <MX_SPI5_Init+0x64>)
 800a636:	2200      	movs	r2, #0
 800a638:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800a63a:	4b09      	ldr	r3, [pc, #36]	; (800a660 <MX_SPI5_Init+0x64>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a640:	4b07      	ldr	r3, [pc, #28]	; (800a660 <MX_SPI5_Init+0x64>)
 800a642:	2200      	movs	r2, #0
 800a644:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800a646:	4b06      	ldr	r3, [pc, #24]	; (800a660 <MX_SPI5_Init+0x64>)
 800a648:	220a      	movs	r2, #10
 800a64a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800a64c:	4804      	ldr	r0, [pc, #16]	; (800a660 <MX_SPI5_Init+0x64>)
 800a64e:	f005 fcdb 	bl	8010008 <HAL_SPI_Init>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800a658:	f7fb fe12 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800a65c:	bf00      	nop
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	20000894 	.word	0x20000894
 800a664:	40015000 	.word	0x40015000

0800a668 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b08e      	sub	sp, #56	; 0x38
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a674:	2200      	movs	r2, #0
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	605a      	str	r2, [r3, #4]
 800a67a:	609a      	str	r2, [r3, #8]
 800a67c:	60da      	str	r2, [r3, #12]
 800a67e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a5a      	ldr	r2, [pc, #360]	; (800a7f0 <HAL_SPI_MspInit+0x188>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d12c      	bne.n	800a6e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a68a:	2300      	movs	r3, #0
 800a68c:	623b      	str	r3, [r7, #32]
 800a68e:	4b59      	ldr	r3, [pc, #356]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a692:	4a58      	ldr	r2, [pc, #352]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a694:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a698:	6453      	str	r3, [r2, #68]	; 0x44
 800a69a:	4b56      	ldr	r3, [pc, #344]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a69c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a69e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6a2:	623b      	str	r3, [r7, #32]
 800a6a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	61fb      	str	r3, [r7, #28]
 800a6aa:	4b52      	ldr	r3, [pc, #328]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ae:	4a51      	ldr	r2, [pc, #324]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a6b0:	f043 0301 	orr.w	r3, r3, #1
 800a6b4:	6313      	str	r3, [r2, #48]	; 0x30
 800a6b6:	4b4f      	ldr	r3, [pc, #316]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ba:	f003 0301 	and.w	r3, r3, #1
 800a6be:	61fb      	str	r3, [r7, #28]
 800a6c0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 800a6c2:	23e0      	movs	r3, #224	; 0xe0
 800a6c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a6d2:	2305      	movs	r3, #5
 800a6d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4846      	ldr	r0, [pc, #280]	; (800a7f8 <HAL_SPI_MspInit+0x190>)
 800a6de:	f001 fd5f 	bl	800c1a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800a6e2:	e081      	b.n	800a7e8 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a44      	ldr	r2, [pc, #272]	; (800a7fc <HAL_SPI_MspInit+0x194>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d12c      	bne.n	800a748 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	61bb      	str	r3, [r7, #24]
 800a6f2:	4b40      	ldr	r3, [pc, #256]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f6:	4a3f      	ldr	r2, [pc, #252]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a6f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6fc:	6413      	str	r3, [r2, #64]	; 0x40
 800a6fe:	4b3d      	ldr	r3, [pc, #244]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a706:	61bb      	str	r3, [r7, #24]
 800a708:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a70a:	2300      	movs	r3, #0
 800a70c:	617b      	str	r3, [r7, #20]
 800a70e:	4b39      	ldr	r3, [pc, #228]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a712:	4a38      	ldr	r2, [pc, #224]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a714:	f043 0302 	orr.w	r3, r3, #2
 800a718:	6313      	str	r3, [r2, #48]	; 0x30
 800a71a:	4b36      	ldr	r3, [pc, #216]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	617b      	str	r3, [r7, #20]
 800a724:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 800a726:	2338      	movs	r3, #56	; 0x38
 800a728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a72a:	2302      	movs	r3, #2
 800a72c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a72e:	2300      	movs	r3, #0
 800a730:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a732:	2303      	movs	r3, #3
 800a734:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a736:	2306      	movs	r3, #6
 800a738:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a73a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a73e:	4619      	mov	r1, r3
 800a740:	482f      	ldr	r0, [pc, #188]	; (800a800 <HAL_SPI_MspInit+0x198>)
 800a742:	f001 fd2d 	bl	800c1a0 <HAL_GPIO_Init>
}
 800a746:	e04f      	b.n	800a7e8 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a2d      	ldr	r2, [pc, #180]	; (800a804 <HAL_SPI_MspInit+0x19c>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d14a      	bne.n	800a7e8 <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800a752:	2300      	movs	r3, #0
 800a754:	613b      	str	r3, [r7, #16]
 800a756:	4b27      	ldr	r3, [pc, #156]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a75a:	4a26      	ldr	r2, [pc, #152]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a75c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a760:	6453      	str	r3, [r2, #68]	; 0x44
 800a762:	4b24      	ldr	r3, [pc, #144]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a76a:	613b      	str	r3, [r7, #16]
 800a76c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a76e:	2300      	movs	r3, #0
 800a770:	60fb      	str	r3, [r7, #12]
 800a772:	4b20      	ldr	r3, [pc, #128]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a776:	4a1f      	ldr	r2, [pc, #124]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a778:	f043 0302 	orr.w	r3, r3, #2
 800a77c:	6313      	str	r3, [r2, #48]	; 0x30
 800a77e:	4b1d      	ldr	r3, [pc, #116]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a782:	f003 0302 	and.w	r3, r3, #2
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a78a:	2300      	movs	r3, #0
 800a78c:	60bb      	str	r3, [r7, #8]
 800a78e:	4b19      	ldr	r3, [pc, #100]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a792:	4a18      	ldr	r2, [pc, #96]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a794:	f043 0301 	orr.w	r3, r3, #1
 800a798:	6313      	str	r3, [r2, #48]	; 0x30
 800a79a:	4b16      	ldr	r3, [pc, #88]	; (800a7f4 <HAL_SPI_MspInit+0x18c>)
 800a79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	60bb      	str	r3, [r7, #8]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7aa:	2302      	movs	r3, #2
 800a7ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800a7b6:	2306      	movs	r3, #6
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 800a7ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7be:	4619      	mov	r1, r3
 800a7c0:	480f      	ldr	r0, [pc, #60]	; (800a800 <HAL_SPI_MspInit+0x198>)
 800a7c2:	f001 fced 	bl	800c1a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 800a7c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a7ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800a7d8:	2306      	movs	r3, #6
 800a7da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4805      	ldr	r0, [pc, #20]	; (800a7f8 <HAL_SPI_MspInit+0x190>)
 800a7e4:	f001 fcdc 	bl	800c1a0 <HAL_GPIO_Init>
}
 800a7e8:	bf00      	nop
 800a7ea:	3738      	adds	r7, #56	; 0x38
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	40013000 	.word	0x40013000
 800a7f4:	40023800 	.word	0x40023800
 800a7f8:	40020000 	.word	0x40020000
 800a7fc:	40003c00 	.word	0x40003c00
 800a800:	40020400 	.word	0x40020400
 800a804:	40015000 	.word	0x40015000

0800a808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a80e:	2300      	movs	r3, #0
 800a810:	607b      	str	r3, [r7, #4]
 800a812:	4b10      	ldr	r3, [pc, #64]	; (800a854 <HAL_MspInit+0x4c>)
 800a814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a816:	4a0f      	ldr	r2, [pc, #60]	; (800a854 <HAL_MspInit+0x4c>)
 800a818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a81c:	6453      	str	r3, [r2, #68]	; 0x44
 800a81e:	4b0d      	ldr	r3, [pc, #52]	; (800a854 <HAL_MspInit+0x4c>)
 800a820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a826:	607b      	str	r3, [r7, #4]
 800a828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a82a:	2300      	movs	r3, #0
 800a82c:	603b      	str	r3, [r7, #0]
 800a82e:	4b09      	ldr	r3, [pc, #36]	; (800a854 <HAL_MspInit+0x4c>)
 800a830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a832:	4a08      	ldr	r2, [pc, #32]	; (800a854 <HAL_MspInit+0x4c>)
 800a834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a838:	6413      	str	r3, [r2, #64]	; 0x40
 800a83a:	4b06      	ldr	r3, [pc, #24]	; (800a854 <HAL_MspInit+0x4c>)
 800a83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a842:	603b      	str	r3, [r7, #0]
 800a844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a846:	bf00      	nop
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	40023800 	.word	0x40023800

0800a858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a858:	b480      	push	{r7}
 800a85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a85c:	e7fe      	b.n	800a85c <NMI_Handler+0x4>

0800a85e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a85e:	b480      	push	{r7}
 800a860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a862:	e7fe      	b.n	800a862 <HardFault_Handler+0x4>

0800a864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a864:	b480      	push	{r7}
 800a866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a868:	e7fe      	b.n	800a868 <MemManage_Handler+0x4>

0800a86a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a86a:	b480      	push	{r7}
 800a86c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a86e:	e7fe      	b.n	800a86e <BusFault_Handler+0x4>

0800a870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a870:	b480      	push	{r7}
 800a872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a874:	e7fe      	b.n	800a874 <UsageFault_Handler+0x4>

0800a876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a876:	b480      	push	{r7}
 800a878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a87a:	bf00      	nop
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a884:	b480      	push	{r7}
 800a886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a888:	bf00      	nop
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a892:	b480      	push	{r7}
 800a894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a896:	bf00      	nop
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a8a4:	f000 fe88 	bl	800b5b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a8a8:	bf00      	nop
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART2_TX_2uC_Pin);
 800a8b0:	2004      	movs	r0, #4
 800a8b2:	f001 fe45 	bl	800c540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800a8b6:	bf00      	nop
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 800a8be:	2010      	movs	r0, #16
 800a8c0:	f001 fe3e 	bl	800c540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800a8c4:	bf00      	nop
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800a8cc:	4802      	ldr	r0, [pc, #8]	; (800a8d8 <DMA1_Stream0_IRQHandler+0x10>)
 800a8ce:	f001 f9ef 	bl	800bcb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800a8d2:	bf00      	nop
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	2000049c 	.word	0x2000049c

0800a8dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800a8e0:	4802      	ldr	r0, [pc, #8]	; (800a8ec <DMA1_Stream1_IRQHandler+0x10>)
 800a8e2:	f001 f9e5 	bl	800bcb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800a8e6:	bf00      	nop
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	200003e8 	.word	0x200003e8

0800a8f0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 800a8f4:	4802      	ldr	r0, [pc, #8]	; (800a900 <DMA1_Stream5_IRQHandler+0x10>)
 800a8f6:	f000 faa5 	bl	800ae44 <UARTDMA_DmaReceiveIrqHandler>
	return;
 800a8fa:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	200004fc 	.word	0x200004fc

0800a904 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800a908:	4802      	ldr	r0, [pc, #8]	; (800a914 <DMA1_Stream6_IRQHandler+0x10>)
 800a90a:	f001 f9d1 	bl	800bcb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800a90e:	bf00      	nop
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	20000b94 	.word	0x20000b94

0800a918 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 800a91c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a920:	f001 fe0e 	bl	800c540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a924:	bf00      	nop
 800a926:	bd80      	pop	{r7, pc}

0800a928 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800a92c:	4802      	ldr	r0, [pc, #8]	; (800a938 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a92e:	f006 f994 	bl	8010c5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a932:	bf00      	nop
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	2000099c 	.word	0x2000099c

0800a93c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800a940:	4802      	ldr	r0, [pc, #8]	; (800a94c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800a942:	f006 f98a 	bl	8010c5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800a946:	bf00      	nop
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	200009e4 	.word	0x200009e4

0800a950 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800a954:	4802      	ldr	r0, [pc, #8]	; (800a960 <I2C1_EV_IRQHandler+0x10>)
 800a956:	f002 fd93 	bl	800d480 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800a95a:	bf00      	nop
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	20000448 	.word	0x20000448

0800a964 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800a968:	4802      	ldr	r0, [pc, #8]	; (800a974 <I2C1_ER_IRQHandler+0x10>)
 800a96a:	f002 fefa 	bl	800d762 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800a96e:	bf00      	nop
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	20000448 	.word	0x20000448

0800a978 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma1);
 800a97c:	4803      	ldr	r0, [pc, #12]	; (800a98c <USART1_IRQHandler+0x14>)
 800a97e:	f000 fa37 	bl	800adf0 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a982:	4803      	ldr	r0, [pc, #12]	; (800a990 <USART1_IRQHandler+0x18>)
 800a984:	f006 fcbe 	bl	8011304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a988:	bf00      	nop
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	200006c8 	.word	0x200006c8
 800a990:	20000bf4 	.word	0x20000bf4

0800a994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 800a998:	4803      	ldr	r0, [pc, #12]	; (800a9a8 <USART2_IRQHandler+0x14>)
 800a99a:	f000 fa29 	bl	800adf0 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a99e:	4803      	ldr	r0, [pc, #12]	; (800a9ac <USART2_IRQHandler+0x18>)
 800a9a0:	f006 fcb0 	bl	8011304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a9a4:	bf00      	nop
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	200004fc 	.word	0x200004fc
 800a9ac:	20000c38 	.word	0x20000c38

0800a9b0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800a9b4:	4802      	ldr	r0, [pc, #8]	; (800a9c0 <SPI3_IRQHandler+0x10>)
 800a9b6:	f005 fd53 	bl	8010460 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800a9ba:	bf00      	nop
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	200008ec 	.word	0x200008ec

0800a9c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma1);
 800a9c8:	4802      	ldr	r0, [pc, #8]	; (800a9d4 <DMA2_Stream2_IRQHandler+0x10>)
 800a9ca:	f000 fa3b 	bl	800ae44 <UARTDMA_DmaReceiveIrqHandler>
	return;
 800a9ce:	bf00      	nop
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	200006c8 	.word	0x200006c8

0800a9d8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a9dc:	4802      	ldr	r0, [pc, #8]	; (800a9e8 <DMA2_Stream7_IRQHandler+0x10>)
 800a9de:	f001 f967 	bl	800bcb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800a9e2:	bf00      	nop
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20000ad4 	.word	0x20000ad4

0800a9ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
	return 1;
 800a9f0:	2301      	movs	r3, #1
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <_kill>:

int _kill(int pid, int sig)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800aa06:	f007 fcc9 	bl	801239c <__errno>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2216      	movs	r2, #22
 800aa0e:	601a      	str	r2, [r3, #0]
	return -1;
 800aa10:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <_exit>:

void _exit (int status)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800aa24:	f04f 31ff 	mov.w	r1, #4294967295
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff ffe7 	bl	800a9fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800aa2e:	e7fe      	b.n	800aa2e <_exit+0x12>

0800aa30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	617b      	str	r3, [r7, #20]
 800aa40:	e00a      	b.n	800aa58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800aa42:	f3af 8000 	nop.w
 800aa46:	4601      	mov	r1, r0
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	1c5a      	adds	r2, r3, #1
 800aa4c:	60ba      	str	r2, [r7, #8]
 800aa4e:	b2ca      	uxtb	r2, r1
 800aa50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	3301      	adds	r3, #1
 800aa56:	617b      	str	r3, [r7, #20]
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	dbf0      	blt.n	800aa42 <_read+0x12>
	}

return len;
 800aa60:	687b      	ldr	r3, [r7, #4]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3718      	adds	r7, #24
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b086      	sub	sp, #24
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa76:	2300      	movs	r3, #0
 800aa78:	617b      	str	r3, [r7, #20]
 800aa7a:	e009      	b.n	800aa90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	1c5a      	adds	r2, r3, #1
 800aa80:	60ba      	str	r2, [r7, #8]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	617b      	str	r3, [r7, #20]
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	dbf1      	blt.n	800aa7c <_write+0x12>
	}
	return len;
 800aa98:	687b      	ldr	r3, [r7, #4]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3718      	adds	r7, #24
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <_close>:

int _close(int file)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
	return -1;
 800aaaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <_fstat>:


int _fstat(int file, struct stat *st)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800aaca:	605a      	str	r2, [r3, #4]
	return 0;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	370c      	adds	r7, #12
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <_isatty>:

int _isatty(int file)
{
 800aada:	b480      	push	{r7}
 800aadc:	b083      	sub	sp, #12
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
	return 1;
 800aae2:	2301      	movs	r3, #1
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
	return 0;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
	...

0800ab0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ab14:	4a14      	ldr	r2, [pc, #80]	; (800ab68 <_sbrk+0x5c>)
 800ab16:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <_sbrk+0x60>)
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ab20:	4b13      	ldr	r3, [pc, #76]	; (800ab70 <_sbrk+0x64>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d102      	bne.n	800ab2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ab28:	4b11      	ldr	r3, [pc, #68]	; (800ab70 <_sbrk+0x64>)
 800ab2a:	4a12      	ldr	r2, [pc, #72]	; (800ab74 <_sbrk+0x68>)
 800ab2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ab2e:	4b10      	ldr	r3, [pc, #64]	; (800ab70 <_sbrk+0x64>)
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4413      	add	r3, r2
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d207      	bcs.n	800ab4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ab3c:	f007 fc2e 	bl	801239c <__errno>
 800ab40:	4603      	mov	r3, r0
 800ab42:	220c      	movs	r2, #12
 800ab44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ab46:	f04f 33ff 	mov.w	r3, #4294967295
 800ab4a:	e009      	b.n	800ab60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ab4c:	4b08      	ldr	r3, [pc, #32]	; (800ab70 <_sbrk+0x64>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ab52:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <_sbrk+0x64>)
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4413      	add	r3, r2
 800ab5a:	4a05      	ldr	r2, [pc, #20]	; (800ab70 <_sbrk+0x64>)
 800ab5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	20020000 	.word	0x20020000
 800ab6c:	00000400 	.word	0x00000400
 800ab70:	200002c0 	.word	0x200002c0
 800ab74:	20000c90 	.word	0x20000c90

0800ab78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ab7c:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <SystemInit+0x20>)
 800ab7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab82:	4a05      	ldr	r2, [pc, #20]	; (800ab98 <SystemInit+0x20>)
 800ab84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ab8c:	bf00      	nop
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	e000ed00 	.word	0xe000ed00

0800ab9c <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08c      	sub	sp, #48	; 0x30
 800aba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800aba2:	f107 030c 	add.w	r3, r7, #12
 800aba6:	2224      	movs	r2, #36	; 0x24
 800aba8:	2100      	movs	r1, #0
 800abaa:	4618      	mov	r0, r3
 800abac:	f007 fc20 	bl	80123f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abb0:	1d3b      	adds	r3, r7, #4
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]
 800abb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800abb8:	4b21      	ldr	r3, [pc, #132]	; (800ac40 <MX_TIM2_Init+0xa4>)
 800abba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800abbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800abc0:	4b1f      	ldr	r3, [pc, #124]	; (800ac40 <MX_TIM2_Init+0xa4>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abc6:	4b1e      	ldr	r3, [pc, #120]	; (800ac40 <MX_TIM2_Init+0xa4>)
 800abc8:	2200      	movs	r2, #0
 800abca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800abcc:	4b1c      	ldr	r3, [pc, #112]	; (800ac40 <MX_TIM2_Init+0xa4>)
 800abce:	f04f 32ff 	mov.w	r2, #4294967295
 800abd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800abd4:	4b1a      	ldr	r3, [pc, #104]	; (800ac40 <MX_TIM2_Init+0xa4>)
 800abd6:	2200      	movs	r2, #0
 800abd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800abda:	4b19      	ldr	r3, [pc, #100]	; (800ac40 <MX_TIM2_Init+0xa4>)
 800abdc:	2200      	movs	r2, #0
 800abde:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800abe0:	2301      	movs	r3, #1
 800abe2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800abe4:	2300      	movs	r3, #0
 800abe6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800abe8:	2301      	movs	r3, #1
 800abea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800abec:	2300      	movs	r3, #0
 800abee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800abf4:	2300      	movs	r3, #0
 800abf6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800abf8:	2301      	movs	r3, #1
 800abfa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800abfc:	2300      	movs	r3, #0
 800abfe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800ac04:	f107 030c 	add.w	r3, r7, #12
 800ac08:	4619      	mov	r1, r3
 800ac0a:	480d      	ldr	r0, [pc, #52]	; (800ac40 <MX_TIM2_Init+0xa4>)
 800ac0c:	f005 fef1 	bl	80109f2 <HAL_TIM_Encoder_Init>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800ac16:	f7fb fb33 	bl	8006280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ac22:	1d3b      	adds	r3, r7, #4
 800ac24:	4619      	mov	r1, r3
 800ac26:	4806      	ldr	r0, [pc, #24]	; (800ac40 <MX_TIM2_Init+0xa4>)
 800ac28:	f006 f9ee 	bl	8011008 <HAL_TIMEx_MasterConfigSynchronization>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800ac32:	f7fb fb25 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800ac36:	bf00      	nop
 800ac38:	3730      	adds	r7, #48	; 0x30
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	20000a2c 	.word	0x20000a2c

0800ac44 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800ac48:	4b0e      	ldr	r3, [pc, #56]	; (800ac84 <MX_TIM10_Init+0x40>)
 800ac4a:	4a0f      	ldr	r2, [pc, #60]	; (800ac88 <MX_TIM10_Init+0x44>)
 800ac4c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 800ac4e:	4b0d      	ldr	r3, [pc, #52]	; (800ac84 <MX_TIM10_Init+0x40>)
 800ac50:	f242 720f 	movw	r2, #9999	; 0x270f
 800ac54:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac56:	4b0b      	ldr	r3, [pc, #44]	; (800ac84 <MX_TIM10_Init+0x40>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 800ac5c:	4b09      	ldr	r3, [pc, #36]	; (800ac84 <MX_TIM10_Init+0x40>)
 800ac5e:	f242 720f 	movw	r2, #9999	; 0x270f
 800ac62:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac64:	4b07      	ldr	r3, [pc, #28]	; (800ac84 <MX_TIM10_Init+0x40>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac6a:	4b06      	ldr	r3, [pc, #24]	; (800ac84 <MX_TIM10_Init+0x40>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800ac70:	4804      	ldr	r0, [pc, #16]	; (800ac84 <MX_TIM10_Init+0x40>)
 800ac72:	f005 fddd 	bl	8010830 <HAL_TIM_Base_Init>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d001      	beq.n	800ac80 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800ac7c:	f7fb fb00 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800ac80:	bf00      	nop
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	2000099c 	.word	0x2000099c
 800ac88:	40014400 	.word	0x40014400

0800ac8c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800ac90:	4b0f      	ldr	r3, [pc, #60]	; (800acd0 <MX_TIM11_Init+0x44>)
 800ac92:	4a10      	ldr	r2, [pc, #64]	; (800acd4 <MX_TIM11_Init+0x48>)
 800ac94:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800ac96:	4b0e      	ldr	r3, [pc, #56]	; (800acd0 <MX_TIM11_Init+0x44>)
 800ac98:	f643 2297 	movw	r2, #14999	; 0x3a97
 800ac9c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac9e:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <MX_TIM11_Init+0x44>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 800aca4:	4b0a      	ldr	r3, [pc, #40]	; (800acd0 <MX_TIM11_Init+0x44>)
 800aca6:	f247 522f 	movw	r2, #29999	; 0x752f
 800acaa:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800acac:	4b08      	ldr	r3, [pc, #32]	; (800acd0 <MX_TIM11_Init+0x44>)
 800acae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acb2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800acb4:	4b06      	ldr	r3, [pc, #24]	; (800acd0 <MX_TIM11_Init+0x44>)
 800acb6:	2200      	movs	r2, #0
 800acb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800acba:	4805      	ldr	r0, [pc, #20]	; (800acd0 <MX_TIM11_Init+0x44>)
 800acbc:	f005 fdb8 	bl	8010830 <HAL_TIM_Base_Init>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800acc6:	f7fb fadb 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800acca:	bf00      	nop
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	200009e4 	.word	0x200009e4
 800acd4:	40014800 	.word	0x40014800

0800acd8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b08a      	sub	sp, #40	; 0x28
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ace0:	f107 0314 	add.w	r3, r7, #20
 800ace4:	2200      	movs	r2, #0
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	605a      	str	r2, [r3, #4]
 800acea:	609a      	str	r2, [r3, #8]
 800acec:	60da      	str	r2, [r3, #12]
 800acee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf8:	d12b      	bne.n	800ad52 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800acfa:	2300      	movs	r3, #0
 800acfc:	613b      	str	r3, [r7, #16]
 800acfe:	4b17      	ldr	r3, [pc, #92]	; (800ad5c <HAL_TIM_Encoder_MspInit+0x84>)
 800ad00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad02:	4a16      	ldr	r2, [pc, #88]	; (800ad5c <HAL_TIM_Encoder_MspInit+0x84>)
 800ad04:	f043 0301 	orr.w	r3, r3, #1
 800ad08:	6413      	str	r3, [r2, #64]	; 0x40
 800ad0a:	4b14      	ldr	r3, [pc, #80]	; (800ad5c <HAL_TIM_Encoder_MspInit+0x84>)
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0e:	f003 0301 	and.w	r3, r3, #1
 800ad12:	613b      	str	r3, [r7, #16]
 800ad14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad16:	2300      	movs	r3, #0
 800ad18:	60fb      	str	r3, [r7, #12]
 800ad1a:	4b10      	ldr	r3, [pc, #64]	; (800ad5c <HAL_TIM_Encoder_MspInit+0x84>)
 800ad1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1e:	4a0f      	ldr	r2, [pc, #60]	; (800ad5c <HAL_TIM_Encoder_MspInit+0x84>)
 800ad20:	f043 0301 	orr.w	r3, r3, #1
 800ad24:	6313      	str	r3, [r2, #48]	; 0x30
 800ad26:	4b0d      	ldr	r3, [pc, #52]	; (800ad5c <HAL_TIM_Encoder_MspInit+0x84>)
 800ad28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 800ad32:	2303      	movs	r3, #3
 800ad34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad36:	2302      	movs	r3, #2
 800ad38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ad42:	2301      	movs	r3, #1
 800ad44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad46:	f107 0314 	add.w	r3, r7, #20
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	4804      	ldr	r0, [pc, #16]	; (800ad60 <HAL_TIM_Encoder_MspInit+0x88>)
 800ad4e:	f001 fa27 	bl	800c1a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800ad52:	bf00      	nop
 800ad54:	3728      	adds	r7, #40	; 0x28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	40023800 	.word	0x40023800
 800ad60:	40020000 	.word	0x40020000

0800ad64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a1c      	ldr	r2, [pc, #112]	; (800ade4 <HAL_TIM_Base_MspInit+0x80>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d116      	bne.n	800ada4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800ad76:	2300      	movs	r3, #0
 800ad78:	60fb      	str	r3, [r7, #12]
 800ad7a:	4b1b      	ldr	r3, [pc, #108]	; (800ade8 <HAL_TIM_Base_MspInit+0x84>)
 800ad7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7e:	4a1a      	ldr	r2, [pc, #104]	; (800ade8 <HAL_TIM_Base_MspInit+0x84>)
 800ad80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad84:	6453      	str	r3, [r2, #68]	; 0x44
 800ad86:	4b18      	ldr	r3, [pc, #96]	; (800ade8 <HAL_TIM_Base_MspInit+0x84>)
 800ad88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800ad92:	2200      	movs	r2, #0
 800ad94:	2100      	movs	r1, #0
 800ad96:	2019      	movs	r0, #25
 800ad98:	f000 fd91 	bl	800b8be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800ad9c:	2019      	movs	r0, #25
 800ad9e:	f000 fdaa 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800ada2:	e01a      	b.n	800adda <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a10      	ldr	r2, [pc, #64]	; (800adec <HAL_TIM_Base_MspInit+0x88>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d115      	bne.n	800adda <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800adae:	2300      	movs	r3, #0
 800adb0:	60bb      	str	r3, [r7, #8]
 800adb2:	4b0d      	ldr	r3, [pc, #52]	; (800ade8 <HAL_TIM_Base_MspInit+0x84>)
 800adb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb6:	4a0c      	ldr	r2, [pc, #48]	; (800ade8 <HAL_TIM_Base_MspInit+0x84>)
 800adb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800adbc:	6453      	str	r3, [r2, #68]	; 0x44
 800adbe:	4b0a      	ldr	r3, [pc, #40]	; (800ade8 <HAL_TIM_Base_MspInit+0x84>)
 800adc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adc6:	60bb      	str	r3, [r7, #8]
 800adc8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800adca:	2200      	movs	r2, #0
 800adcc:	2100      	movs	r1, #0
 800adce:	201a      	movs	r0, #26
 800add0:	f000 fd75 	bl	800b8be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800add4:	201a      	movs	r0, #26
 800add6:	f000 fd8e 	bl	800b8f6 <HAL_NVIC_EnableIRQ>
}
 800adda:	bf00      	nop
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	40014400 	.word	0x40014400
 800ade8:	40023800 	.word	0x40023800
 800adec:	40014800 	.word	0x40014800

0800adf0 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 0310 	and.w	r3, r3, #16
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d017      	beq.n	800ae38 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f022 0201 	bic.w	r2, r2, #1
 800ae32:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	60fb      	str	r3, [r7, #12]
	}
}
 800ae38:	bf00      	nop
 800ae3a:	3714      	adds	r7, #20
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae54:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 0310 	and.w	r3, r3, #16
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d056      	beq.n	800af16 <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae70:	2220      	movs	r2, #32
 800ae72:	409a      	lsls	r2, r3
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800ae88:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800ae90:	2300      	movs	r3, #0
 800ae92:	82fb      	strh	r3, [r7, #22]
 800ae94:	e01a      	b.n	800aecc <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800ae9c:	8afb      	ldrh	r3, [r7, #22]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	4413      	add	r3, r2
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	4619      	mov	r1, r3
 800aea6:	f7ff fb14 	bl	800a4d2 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 800aeaa:	8afb      	ldrh	r3, [r7, #22]
 800aeac:	68ba      	ldr	r2, [r7, #8]
 800aeae:	4413      	add	r3, r2
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	2b0a      	cmp	r3, #10
 800aeb4:	d107      	bne.n	800aec6 <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800aebc:	3301      	adds	r3, #1
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800aec6:	8afb      	ldrh	r3, [r7, #22]
 800aec8:	3301      	adds	r3, #1
 800aeca:	82fb      	strh	r3, [r7, #22]
 800aecc:	8afa      	ldrh	r2, [r7, #22]
 800aece:	89fb      	ldrh	r3, [r7, #14]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d3e0      	bcc.n	800ae96 <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aedc:	223f      	movs	r2, #63	; 0x3f
 800aede:	409a      	lsls	r2, r3
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	1d1a      	adds	r2, r3, #4
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2240      	movs	r2, #64	; 0x40
 800aefc:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f042 0201 	orr.w	r2, r2, #1
 800af14:	601a      	str	r2, [r3, #0]
	}
}
 800af16:	bf00      	nop
 800af18:	3718      	adds	r7, #24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b082      	sub	sp, #8
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	460b      	mov	r3, r1
 800af28:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f203 1347 	addw	r3, r3, #327	; 0x147
 800af30:	78fa      	ldrb	r2, [r7, #3]
 800af32:	4611      	mov	r1, r2
 800af34:	4618      	mov	r0, r3
 800af36:	f7ff facc 	bl	800a4d2 <RB_Write>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 800af40:	2301      	movs	r3, #1
 800af42:	e000      	b.n	800af46 <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b084      	sub	sp, #16
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800af62:	2b00      	cmp	r3, #0
 800af64:	d01f      	beq.n	800afa6 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800af66:	e013      	b.n	800af90 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b0a      	cmp	r3, #10
 800af6e:	d10c      	bne.n	800af8a <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800af7c:	3b01      	subs	r3, #1
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 800af86:	2300      	movs	r3, #0
 800af88:	e00e      	b.n	800afa8 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3301      	adds	r3, #1
 800af8e:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3344      	adds	r3, #68	; 0x44
 800af94:	68f9      	ldr	r1, [r7, #12]
 800af96:	4618      	mov	r0, r3
 800af98:	f7ff fa72 	bl	800a480 <RB_Read>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0e2      	beq.n	800af68 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 800afa2:	2300      	movs	r3, #0
 800afa4:	e000      	b.n	800afa8 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 800afa6:	2301      	movs	r3, #1
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800afbe:	e012      	b.n	800afe6 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 800afc0:	7afb      	ldrb	r3, [r7, #11]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7ff ffaa 	bl	800af1e <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3301      	adds	r3, #1
 800afce:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 800afd0:	7afb      	ldrb	r3, [r7, #11]
 800afd2:	2b0a      	cmp	r3, #10
 800afd4:	d107      	bne.n	800afe6 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800afdc:	3301      	adds	r3, #1
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	72fb      	strb	r3, [r7, #11]
 800afec:	7afb      	ldrb	r3, [r7, #11]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1e6      	bne.n	800afc0 <UARTDMA_Print+0x10>
		}
	}
}
 800aff2:	bf00      	nop
 800aff4:	bf00      	nop
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 800b00e:	2301      	movs	r3, #1
 800b010:	e000      	b.n	800b014 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 800b028:	2300      	movs	r3, #0
 800b02a:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b032:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b02      	cmp	r3, #2
 800b03a:	d028      	beq.n	800b08e <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800b03c:	e013      	b.n	800b066 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 800b03e:	7b7b      	ldrb	r3, [r7, #13]
 800b040:	2b0a      	cmp	r3, #10
 800b042:	d107      	bne.n	800b054 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800b04a:	3b01      	subs	r3, #1
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 800b054:	89fb      	ldrh	r3, [r7, #14]
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	81fa      	strh	r2, [r7, #14]
 800b05a:	4619      	mov	r1, r3
 800b05c:	7b7a      	ldrb	r2, [r7, #13]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	440b      	add	r3, r1
 800b062:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f203 1347 	addw	r3, r3, #327	; 0x147
 800b06c:	f107 020d 	add.w	r2, r7, #13
 800b070:	4611      	mov	r1, r2
 800b072:	4618      	mov	r0, r3
 800b074:	f7ff fa04 	bl	800a480 <RB_Read>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d0df      	beq.n	800b03e <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6818      	ldr	r0, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	33c7      	adds	r3, #199	; 0xc7
 800b086:	89fa      	ldrh	r2, [r7, #14]
 800b088:	4619      	mov	r1, r3
 800b08a:	f006 f88d 	bl	80111a8 <HAL_UART_Transmit_DMA>
	}
}
 800b08e:	bf00      	nop
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b082      	sub	sp, #8
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	683a      	ldr	r2, [r7, #0]
 800b0a4:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	68da      	ldr	r2, [r3, #12]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f042 0210 	orr.w	r2, r2, #16
 800b0b8:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f042 0210 	orr.w	r2, r2, #16
 800b0d0:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f042 0210 	orr.w	r2, r2, #16
 800b0e8:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	2240      	movs	r2, #64	; 0x40
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f006 f8d5 	bl	80112a4 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f022 0208 	bic.w	r2, r2, #8
 800b110:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f022 0208 	bic.w	r2, r2, #8
 800b128:	601a      	str	r2, [r3, #0]
}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
	...

0800b134 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b138:	4b11      	ldr	r3, [pc, #68]	; (800b180 <MX_USART1_UART_Init+0x4c>)
 800b13a:	4a12      	ldr	r2, [pc, #72]	; (800b184 <MX_USART1_UART_Init+0x50>)
 800b13c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b13e:	4b10      	ldr	r3, [pc, #64]	; (800b180 <MX_USART1_UART_Init+0x4c>)
 800b140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b144:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b146:	4b0e      	ldr	r3, [pc, #56]	; (800b180 <MX_USART1_UART_Init+0x4c>)
 800b148:	2200      	movs	r2, #0
 800b14a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b14c:	4b0c      	ldr	r3, [pc, #48]	; (800b180 <MX_USART1_UART_Init+0x4c>)
 800b14e:	2200      	movs	r2, #0
 800b150:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b152:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <MX_USART1_UART_Init+0x4c>)
 800b154:	2200      	movs	r2, #0
 800b156:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b158:	4b09      	ldr	r3, [pc, #36]	; (800b180 <MX_USART1_UART_Init+0x4c>)
 800b15a:	220c      	movs	r2, #12
 800b15c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b15e:	4b08      	ldr	r3, [pc, #32]	; (800b180 <MX_USART1_UART_Init+0x4c>)
 800b160:	2200      	movs	r2, #0
 800b162:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b164:	4b06      	ldr	r3, [pc, #24]	; (800b180 <MX_USART1_UART_Init+0x4c>)
 800b166:	2200      	movs	r2, #0
 800b168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b16a:	4805      	ldr	r0, [pc, #20]	; (800b180 <MX_USART1_UART_Init+0x4c>)
 800b16c:	f005 ffce 	bl	801110c <HAL_UART_Init>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800b176:	f7fb f883 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b17a:	bf00      	nop
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20000bf4 	.word	0x20000bf4
 800b184:	40011000 	.word	0x40011000

0800b188 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b18c:	4b11      	ldr	r3, [pc, #68]	; (800b1d4 <MX_USART2_UART_Init+0x4c>)
 800b18e:	4a12      	ldr	r2, [pc, #72]	; (800b1d8 <MX_USART2_UART_Init+0x50>)
 800b190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b192:	4b10      	ldr	r3, [pc, #64]	; (800b1d4 <MX_USART2_UART_Init+0x4c>)
 800b194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b19a:	4b0e      	ldr	r3, [pc, #56]	; (800b1d4 <MX_USART2_UART_Init+0x4c>)
 800b19c:	2200      	movs	r2, #0
 800b19e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b1a0:	4b0c      	ldr	r3, [pc, #48]	; (800b1d4 <MX_USART2_UART_Init+0x4c>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b1a6:	4b0b      	ldr	r3, [pc, #44]	; (800b1d4 <MX_USART2_UART_Init+0x4c>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b1ac:	4b09      	ldr	r3, [pc, #36]	; (800b1d4 <MX_USART2_UART_Init+0x4c>)
 800b1ae:	220c      	movs	r2, #12
 800b1b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b1b2:	4b08      	ldr	r3, [pc, #32]	; (800b1d4 <MX_USART2_UART_Init+0x4c>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b1b8:	4b06      	ldr	r3, [pc, #24]	; (800b1d4 <MX_USART2_UART_Init+0x4c>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b1be:	4805      	ldr	r0, [pc, #20]	; (800b1d4 <MX_USART2_UART_Init+0x4c>)
 800b1c0:	f005 ffa4 	bl	801110c <HAL_UART_Init>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d001      	beq.n	800b1ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800b1ca:	f7fb f859 	bl	8006280 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b1ce:	bf00      	nop
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	20000c38 	.word	0x20000c38
 800b1d8:	40004400 	.word	0x40004400

0800b1dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b08c      	sub	sp, #48	; 0x30
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1e4:	f107 031c 	add.w	r3, r7, #28
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	601a      	str	r2, [r3, #0]
 800b1ec:	605a      	str	r2, [r3, #4]
 800b1ee:	609a      	str	r2, [r3, #8]
 800b1f0:	60da      	str	r2, [r3, #12]
 800b1f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a59      	ldr	r2, [pc, #356]	; (800b360 <HAL_UART_MspInit+0x184>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	f040 80c0 	bne.w	800b380 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b200:	2300      	movs	r3, #0
 800b202:	61bb      	str	r3, [r7, #24]
 800b204:	4b57      	ldr	r3, [pc, #348]	; (800b364 <HAL_UART_MspInit+0x188>)
 800b206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b208:	4a56      	ldr	r2, [pc, #344]	; (800b364 <HAL_UART_MspInit+0x188>)
 800b20a:	f043 0310 	orr.w	r3, r3, #16
 800b20e:	6453      	str	r3, [r2, #68]	; 0x44
 800b210:	4b54      	ldr	r3, [pc, #336]	; (800b364 <HAL_UART_MspInit+0x188>)
 800b212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b214:	f003 0310 	and.w	r3, r3, #16
 800b218:	61bb      	str	r3, [r7, #24]
 800b21a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b21c:	2300      	movs	r3, #0
 800b21e:	617b      	str	r3, [r7, #20]
 800b220:	4b50      	ldr	r3, [pc, #320]	; (800b364 <HAL_UART_MspInit+0x188>)
 800b222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b224:	4a4f      	ldr	r2, [pc, #316]	; (800b364 <HAL_UART_MspInit+0x188>)
 800b226:	f043 0301 	orr.w	r3, r3, #1
 800b22a:	6313      	str	r3, [r2, #48]	; 0x30
 800b22c:	4b4d      	ldr	r3, [pc, #308]	; (800b364 <HAL_UART_MspInit+0x188>)
 800b22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	617b      	str	r3, [r7, #20]
 800b236:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b238:	2300      	movs	r3, #0
 800b23a:	613b      	str	r3, [r7, #16]
 800b23c:	4b49      	ldr	r3, [pc, #292]	; (800b364 <HAL_UART_MspInit+0x188>)
 800b23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b240:	4a48      	ldr	r2, [pc, #288]	; (800b364 <HAL_UART_MspInit+0x188>)
 800b242:	f043 0302 	orr.w	r3, r3, #2
 800b246:	6313      	str	r3, [r2, #48]	; 0x30
 800b248:	4b46      	ldr	r3, [pc, #280]	; (800b364 <HAL_UART_MspInit+0x188>)
 800b24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24c:	f003 0302 	and.w	r3, r3, #2
 800b250:	613b      	str	r3, [r7, #16]
 800b252:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 800b254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b25a:	2302      	movs	r3, #2
 800b25c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b25e:	2300      	movs	r3, #0
 800b260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b262:	2303      	movs	r3, #3
 800b264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b266:	2307      	movs	r3, #7
 800b268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 800b26a:	f107 031c 	add.w	r3, r7, #28
 800b26e:	4619      	mov	r1, r3
 800b270:	483d      	ldr	r0, [pc, #244]	; (800b368 <HAL_UART_MspInit+0x18c>)
 800b272:	f000 ff95 	bl	800c1a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 800b276:	2380      	movs	r3, #128	; 0x80
 800b278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b27a:	2302      	movs	r3, #2
 800b27c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b27e:	2300      	movs	r3, #0
 800b280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b282:	2303      	movs	r3, #3
 800b284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b286:	2307      	movs	r3, #7
 800b288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 800b28a:	f107 031c 	add.w	r3, r7, #28
 800b28e:	4619      	mov	r1, r3
 800b290:	4836      	ldr	r0, [pc, #216]	; (800b36c <HAL_UART_MspInit+0x190>)
 800b292:	f000 ff85 	bl	800c1a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800b296:	4b36      	ldr	r3, [pc, #216]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b298:	4a36      	ldr	r2, [pc, #216]	; (800b374 <HAL_UART_MspInit+0x198>)
 800b29a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800b29c:	4b34      	ldr	r3, [pc, #208]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b29e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b2a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b2a4:	4b32      	ldr	r3, [pc, #200]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b2aa:	4b31      	ldr	r3, [pc, #196]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b2b0:	4b2f      	ldr	r3, [pc, #188]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b2b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b2b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b2b8:	4b2d      	ldr	r3, [pc, #180]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b2be:	4b2c      	ldr	r3, [pc, #176]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800b2c4:	4b2a      	ldr	r3, [pc, #168]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b2ca:	4b29      	ldr	r3, [pc, #164]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b2d0:	4b27      	ldr	r3, [pc, #156]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800b2d6:	4826      	ldr	r0, [pc, #152]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b2d8:	f000 fb52 	bl	800b980 <HAL_DMA_Init>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800b2e2:	f7fa ffcd 	bl	8006280 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a21      	ldr	r2, [pc, #132]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b2ea:	639a      	str	r2, [r3, #56]	; 0x38
 800b2ec:	4a20      	ldr	r2, [pc, #128]	; (800b370 <HAL_UART_MspInit+0x194>)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800b2f2:	4b21      	ldr	r3, [pc, #132]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b2f4:	4a21      	ldr	r2, [pc, #132]	; (800b37c <HAL_UART_MspInit+0x1a0>)
 800b2f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800b2f8:	4b1f      	ldr	r3, [pc, #124]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b2fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b2fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b300:	4b1d      	ldr	r3, [pc, #116]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b302:	2240      	movs	r2, #64	; 0x40
 800b304:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b306:	4b1c      	ldr	r3, [pc, #112]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b308:	2200      	movs	r2, #0
 800b30a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b30c:	4b1a      	ldr	r3, [pc, #104]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b30e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b312:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b314:	4b18      	ldr	r3, [pc, #96]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b316:	2200      	movs	r2, #0
 800b318:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b31a:	4b17      	ldr	r3, [pc, #92]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800b320:	4b15      	ldr	r3, [pc, #84]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b322:	2200      	movs	r2, #0
 800b324:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b326:	4b14      	ldr	r3, [pc, #80]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b328:	2200      	movs	r2, #0
 800b32a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b32c:	4b12      	ldr	r3, [pc, #72]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b32e:	2200      	movs	r2, #0
 800b330:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800b332:	4811      	ldr	r0, [pc, #68]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b334:	f000 fb24 	bl	800b980 <HAL_DMA_Init>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800b33e:	f7fa ff9f 	bl	8006280 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a0c      	ldr	r2, [pc, #48]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b346:	635a      	str	r2, [r3, #52]	; 0x34
 800b348:	4a0b      	ldr	r2, [pc, #44]	; (800b378 <HAL_UART_MspInit+0x19c>)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800b34e:	2200      	movs	r2, #0
 800b350:	2100      	movs	r1, #0
 800b352:	2025      	movs	r0, #37	; 0x25
 800b354:	f000 fab3 	bl	800b8be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b358:	2025      	movs	r0, #37	; 0x25
 800b35a:	f000 facc 	bl	800b8f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800b35e:	e09d      	b.n	800b49c <HAL_UART_MspInit+0x2c0>
 800b360:	40011000 	.word	0x40011000
 800b364:	40023800 	.word	0x40023800
 800b368:	40020000 	.word	0x40020000
 800b36c:	40020400 	.word	0x40020400
 800b370:	20000b34 	.word	0x20000b34
 800b374:	40026440 	.word	0x40026440
 800b378:	20000ad4 	.word	0x20000ad4
 800b37c:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a47      	ldr	r2, [pc, #284]	; (800b4a4 <HAL_UART_MspInit+0x2c8>)
 800b386:	4293      	cmp	r3, r2
 800b388:	f040 8088 	bne.w	800b49c <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b38c:	2300      	movs	r3, #0
 800b38e:	60fb      	str	r3, [r7, #12]
 800b390:	4b45      	ldr	r3, [pc, #276]	; (800b4a8 <HAL_UART_MspInit+0x2cc>)
 800b392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b394:	4a44      	ldr	r2, [pc, #272]	; (800b4a8 <HAL_UART_MspInit+0x2cc>)
 800b396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b39a:	6413      	str	r3, [r2, #64]	; 0x40
 800b39c:	4b42      	ldr	r3, [pc, #264]	; (800b4a8 <HAL_UART_MspInit+0x2cc>)
 800b39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3a4:	60fb      	str	r3, [r7, #12]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	60bb      	str	r3, [r7, #8]
 800b3ac:	4b3e      	ldr	r3, [pc, #248]	; (800b4a8 <HAL_UART_MspInit+0x2cc>)
 800b3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b0:	4a3d      	ldr	r2, [pc, #244]	; (800b4a8 <HAL_UART_MspInit+0x2cc>)
 800b3b2:	f043 0301 	orr.w	r3, r3, #1
 800b3b6:	6313      	str	r3, [r2, #48]	; 0x30
 800b3b8:	4b3b      	ldr	r3, [pc, #236]	; (800b4a8 <HAL_UART_MspInit+0x2cc>)
 800b3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3bc:	f003 0301 	and.w	r3, r3, #1
 800b3c0:	60bb      	str	r3, [r7, #8]
 800b3c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 800b3c4:	230c      	movs	r3, #12
 800b3c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b3d4:	2307      	movs	r3, #7
 800b3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3d8:	f107 031c 	add.w	r3, r7, #28
 800b3dc:	4619      	mov	r1, r3
 800b3de:	4833      	ldr	r0, [pc, #204]	; (800b4ac <HAL_UART_MspInit+0x2d0>)
 800b3e0:	f000 fede 	bl	800c1a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800b3e4:	4b32      	ldr	r3, [pc, #200]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b3e6:	4a33      	ldr	r2, [pc, #204]	; (800b4b4 <HAL_UART_MspInit+0x2d8>)
 800b3e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800b3ea:	4b31      	ldr	r3, [pc, #196]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b3ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b3f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b3f2:	4b2f      	ldr	r3, [pc, #188]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b3f8:	4b2d      	ldr	r3, [pc, #180]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b3fe:	4b2c      	ldr	r3, [pc, #176]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b404:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b406:	4b2a      	ldr	r3, [pc, #168]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b408:	2200      	movs	r2, #0
 800b40a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b40c:	4b28      	ldr	r3, [pc, #160]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b40e:	2200      	movs	r2, #0
 800b410:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800b412:	4b27      	ldr	r3, [pc, #156]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b414:	2200      	movs	r2, #0
 800b416:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b418:	4b25      	ldr	r3, [pc, #148]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b41e:	4b24      	ldr	r3, [pc, #144]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b420:	2200      	movs	r2, #0
 800b422:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800b424:	4822      	ldr	r0, [pc, #136]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b426:	f000 faab 	bl	800b980 <HAL_DMA_Init>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d001      	beq.n	800b434 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800b430:	f7fa ff26 	bl	8006280 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a1e      	ldr	r2, [pc, #120]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b438:	639a      	str	r2, [r3, #56]	; 0x38
 800b43a:	4a1d      	ldr	r2, [pc, #116]	; (800b4b0 <HAL_UART_MspInit+0x2d4>)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800b440:	4b1d      	ldr	r3, [pc, #116]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b442:	4a1e      	ldr	r2, [pc, #120]	; (800b4bc <HAL_UART_MspInit+0x2e0>)
 800b444:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800b446:	4b1c      	ldr	r3, [pc, #112]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b448:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b44c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b44e:	4b1a      	ldr	r3, [pc, #104]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b450:	2240      	movs	r2, #64	; 0x40
 800b452:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b454:	4b18      	ldr	r3, [pc, #96]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b456:	2200      	movs	r2, #0
 800b458:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b45a:	4b17      	ldr	r3, [pc, #92]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b45c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b460:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b462:	4b15      	ldr	r3, [pc, #84]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b464:	2200      	movs	r2, #0
 800b466:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b468:	4b13      	ldr	r3, [pc, #76]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800b46e:	4b12      	ldr	r3, [pc, #72]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b470:	2200      	movs	r2, #0
 800b472:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b474:	4b10      	ldr	r3, [pc, #64]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b476:	2200      	movs	r2, #0
 800b478:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b47a:	4b0f      	ldr	r3, [pc, #60]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800b480:	480d      	ldr	r0, [pc, #52]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b482:	f000 fa7d 	bl	800b980 <HAL_DMA_Init>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d001      	beq.n	800b490 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 800b48c:	f7fa fef8 	bl	8006280 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a09      	ldr	r2, [pc, #36]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b494:	635a      	str	r2, [r3, #52]	; 0x34
 800b496:	4a08      	ldr	r2, [pc, #32]	; (800b4b8 <HAL_UART_MspInit+0x2dc>)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800b49c:	bf00      	nop
 800b49e:	3730      	adds	r7, #48	; 0x30
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	40004400 	.word	0x40004400
 800b4a8:	40023800 	.word	0x40023800
 800b4ac:	40020000 	.word	0x40020000
 800b4b0:	20000a74 	.word	0x20000a74
 800b4b4:	40026088 	.word	0x40026088
 800b4b8:	20000b94 	.word	0x20000b94
 800b4bc:	400260a0 	.word	0x400260a0

0800b4c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b4c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b4f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b4c4:	480d      	ldr	r0, [pc, #52]	; (800b4fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b4c6:	490e      	ldr	r1, [pc, #56]	; (800b500 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b4c8:	4a0e      	ldr	r2, [pc, #56]	; (800b504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b4ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b4cc:	e002      	b.n	800b4d4 <LoopCopyDataInit>

0800b4ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b4ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b4d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b4d2:	3304      	adds	r3, #4

0800b4d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b4d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b4d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b4d8:	d3f9      	bcc.n	800b4ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b4da:	4a0b      	ldr	r2, [pc, #44]	; (800b508 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b4dc:	4c0b      	ldr	r4, [pc, #44]	; (800b50c <LoopFillZerobss+0x26>)
  movs r3, #0
 800b4de:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b4e0:	e001      	b.n	800b4e6 <LoopFillZerobss>

0800b4e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b4e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b4e4:	3204      	adds	r2, #4

0800b4e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b4e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b4e8:	d3fb      	bcc.n	800b4e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b4ea:	f7ff fb45 	bl	800ab78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b4ee:	f006 ff5b 	bl	80123a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b4f2:	f7fa fd63 	bl	8005fbc <main>
  bx  lr    
 800b4f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b4f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b4fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b500:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 800b504:	0802ae98 	.word	0x0802ae98
  ldr r2, =_sbss
 800b508:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800b50c:	20000c90 	.word	0x20000c90

0800b510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b510:	e7fe      	b.n	800b510 <ADC_IRQHandler>
	...

0800b514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b518:	4b0e      	ldr	r3, [pc, #56]	; (800b554 <HAL_Init+0x40>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a0d      	ldr	r2, [pc, #52]	; (800b554 <HAL_Init+0x40>)
 800b51e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b524:	4b0b      	ldr	r3, [pc, #44]	; (800b554 <HAL_Init+0x40>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a0a      	ldr	r2, [pc, #40]	; (800b554 <HAL_Init+0x40>)
 800b52a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b52e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b530:	4b08      	ldr	r3, [pc, #32]	; (800b554 <HAL_Init+0x40>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a07      	ldr	r2, [pc, #28]	; (800b554 <HAL_Init+0x40>)
 800b536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b53a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b53c:	2003      	movs	r0, #3
 800b53e:	f000 f9b3 	bl	800b8a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b542:	2000      	movs	r0, #0
 800b544:	f000 f808 	bl	800b558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b548:	f7ff f95e 	bl	800a808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	40023c00 	.word	0x40023c00

0800b558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b560:	4b12      	ldr	r3, [pc, #72]	; (800b5ac <HAL_InitTick+0x54>)
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	4b12      	ldr	r3, [pc, #72]	; (800b5b0 <HAL_InitTick+0x58>)
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	4619      	mov	r1, r3
 800b56a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b56e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b572:	fbb2 f3f3 	udiv	r3, r2, r3
 800b576:	4618      	mov	r0, r3
 800b578:	f000 f9d9 	bl	800b92e <HAL_SYSTICK_Config>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	e00e      	b.n	800b5a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2b0f      	cmp	r3, #15
 800b58a:	d80a      	bhi.n	800b5a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b58c:	2200      	movs	r2, #0
 800b58e:	6879      	ldr	r1, [r7, #4]
 800b590:	f04f 30ff 	mov.w	r0, #4294967295
 800b594:	f000 f993 	bl	800b8be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b598:	4a06      	ldr	r2, [pc, #24]	; (800b5b4 <HAL_InitTick+0x5c>)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e000      	b.n	800b5a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	20000038 	.word	0x20000038
 800b5b0:	20000040 	.word	0x20000040
 800b5b4:	2000003c 	.word	0x2000003c

0800b5b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b5bc:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <HAL_IncTick+0x20>)
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	4b06      	ldr	r3, [pc, #24]	; (800b5dc <HAL_IncTick+0x24>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	4a04      	ldr	r2, [pc, #16]	; (800b5dc <HAL_IncTick+0x24>)
 800b5ca:	6013      	str	r3, [r2, #0]
}
 800b5cc:	bf00      	nop
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	20000040 	.word	0x20000040
 800b5dc:	20000c7c 	.word	0x20000c7c

0800b5e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	af00      	add	r7, sp, #0
  return uwTick;
 800b5e4:	4b03      	ldr	r3, [pc, #12]	; (800b5f4 <HAL_GetTick+0x14>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	20000c7c 	.word	0x20000c7c

0800b5f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b600:	f7ff ffee 	bl	800b5e0 <HAL_GetTick>
 800b604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b610:	d005      	beq.n	800b61e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b612:	4b0a      	ldr	r3, [pc, #40]	; (800b63c <HAL_Delay+0x44>)
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	461a      	mov	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	4413      	add	r3, r2
 800b61c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b61e:	bf00      	nop
 800b620:	f7ff ffde 	bl	800b5e0 <HAL_GetTick>
 800b624:	4602      	mov	r2, r0
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d8f7      	bhi.n	800b620 <HAL_Delay+0x28>
  {
  }
}
 800b630:	bf00      	nop
 800b632:	bf00      	nop
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20000040 	.word	0x20000040

0800b640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f003 0307 	and.w	r3, r3, #7
 800b64e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b650:	4b0c      	ldr	r3, [pc, #48]	; (800b684 <__NVIC_SetPriorityGrouping+0x44>)
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b656:	68ba      	ldr	r2, [r7, #8]
 800b658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b65c:	4013      	ands	r3, r2
 800b65e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b66c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b672:	4a04      	ldr	r2, [pc, #16]	; (800b684 <__NVIC_SetPriorityGrouping+0x44>)
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	60d3      	str	r3, [r2, #12]
}
 800b678:	bf00      	nop
 800b67a:	3714      	adds	r7, #20
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	e000ed00 	.word	0xe000ed00

0800b688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b688:	b480      	push	{r7}
 800b68a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b68c:	4b04      	ldr	r3, [pc, #16]	; (800b6a0 <__NVIC_GetPriorityGrouping+0x18>)
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	0a1b      	lsrs	r3, r3, #8
 800b692:	f003 0307 	and.w	r3, r3, #7
}
 800b696:	4618      	mov	r0, r3
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	e000ed00 	.word	0xe000ed00

0800b6a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	db0b      	blt.n	800b6ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b6b6:	79fb      	ldrb	r3, [r7, #7]
 800b6b8:	f003 021f 	and.w	r2, r3, #31
 800b6bc:	4907      	ldr	r1, [pc, #28]	; (800b6dc <__NVIC_EnableIRQ+0x38>)
 800b6be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6c2:	095b      	lsrs	r3, r3, #5
 800b6c4:	2001      	movs	r0, #1
 800b6c6:	fa00 f202 	lsl.w	r2, r0, r2
 800b6ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b6ce:	bf00      	nop
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	e000e100 	.word	0xe000e100

0800b6e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	db12      	blt.n	800b718 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b6f2:	79fb      	ldrb	r3, [r7, #7]
 800b6f4:	f003 021f 	and.w	r2, r3, #31
 800b6f8:	490a      	ldr	r1, [pc, #40]	; (800b724 <__NVIC_DisableIRQ+0x44>)
 800b6fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6fe:	095b      	lsrs	r3, r3, #5
 800b700:	2001      	movs	r0, #1
 800b702:	fa00 f202 	lsl.w	r2, r0, r2
 800b706:	3320      	adds	r3, #32
 800b708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b70c:	f3bf 8f4f 	dsb	sy
}
 800b710:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b712:	f3bf 8f6f 	isb	sy
}
 800b716:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	e000e100 	.word	0xe000e100

0800b728 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	4603      	mov	r3, r0
 800b730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b736:	2b00      	cmp	r3, #0
 800b738:	db0e      	blt.n	800b758 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800b73a:	4a0b      	ldr	r2, [pc, #44]	; (800b768 <__NVIC_GetPendingIRQ+0x40>)
 800b73c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b740:	095b      	lsrs	r3, r3, #5
 800b742:	3340      	adds	r3, #64	; 0x40
 800b744:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	f003 031f 	and.w	r3, r3, #31
 800b74e:	fa22 f303 	lsr.w	r3, r2, r3
 800b752:	f003 0301 	and.w	r3, r3, #1
 800b756:	e000      	b.n	800b75a <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800b758:	2300      	movs	r3, #0
  }
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	e000e100 	.word	0xe000e100

0800b76c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	4603      	mov	r3, r0
 800b774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	db0c      	blt.n	800b798 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	f003 021f 	and.w	r2, r3, #31
 800b784:	4907      	ldr	r1, [pc, #28]	; (800b7a4 <__NVIC_ClearPendingIRQ+0x38>)
 800b786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b78a:	095b      	lsrs	r3, r3, #5
 800b78c:	2001      	movs	r0, #1
 800b78e:	fa00 f202 	lsl.w	r2, r0, r2
 800b792:	3360      	adds	r3, #96	; 0x60
 800b794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b798:	bf00      	nop
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	e000e100 	.word	0xe000e100

0800b7a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	6039      	str	r1, [r7, #0]
 800b7b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	db0a      	blt.n	800b7d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	490c      	ldr	r1, [pc, #48]	; (800b7f4 <__NVIC_SetPriority+0x4c>)
 800b7c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7c6:	0112      	lsls	r2, r2, #4
 800b7c8:	b2d2      	uxtb	r2, r2
 800b7ca:	440b      	add	r3, r1
 800b7cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b7d0:	e00a      	b.n	800b7e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	4908      	ldr	r1, [pc, #32]	; (800b7f8 <__NVIC_SetPriority+0x50>)
 800b7d8:	79fb      	ldrb	r3, [r7, #7]
 800b7da:	f003 030f 	and.w	r3, r3, #15
 800b7de:	3b04      	subs	r3, #4
 800b7e0:	0112      	lsls	r2, r2, #4
 800b7e2:	b2d2      	uxtb	r2, r2
 800b7e4:	440b      	add	r3, r1
 800b7e6:	761a      	strb	r2, [r3, #24]
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	e000e100 	.word	0xe000e100
 800b7f8:	e000ed00 	.word	0xe000ed00

0800b7fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b089      	sub	sp, #36	; 0x24
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f003 0307 	and.w	r3, r3, #7
 800b80e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	f1c3 0307 	rsb	r3, r3, #7
 800b816:	2b04      	cmp	r3, #4
 800b818:	bf28      	it	cs
 800b81a:	2304      	movcs	r3, #4
 800b81c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	3304      	adds	r3, #4
 800b822:	2b06      	cmp	r3, #6
 800b824:	d902      	bls.n	800b82c <NVIC_EncodePriority+0x30>
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	3b03      	subs	r3, #3
 800b82a:	e000      	b.n	800b82e <NVIC_EncodePriority+0x32>
 800b82c:	2300      	movs	r3, #0
 800b82e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b830:	f04f 32ff 	mov.w	r2, #4294967295
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	fa02 f303 	lsl.w	r3, r2, r3
 800b83a:	43da      	mvns	r2, r3
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	401a      	ands	r2, r3
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b844:	f04f 31ff 	mov.w	r1, #4294967295
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	fa01 f303 	lsl.w	r3, r1, r3
 800b84e:	43d9      	mvns	r1, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b854:	4313      	orrs	r3, r2
         );
}
 800b856:	4618      	mov	r0, r3
 800b858:	3724      	adds	r7, #36	; 0x24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
	...

0800b864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3b01      	subs	r3, #1
 800b870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b874:	d301      	bcc.n	800b87a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b876:	2301      	movs	r3, #1
 800b878:	e00f      	b.n	800b89a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b87a:	4a0a      	ldr	r2, [pc, #40]	; (800b8a4 <SysTick_Config+0x40>)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	3b01      	subs	r3, #1
 800b880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b882:	210f      	movs	r1, #15
 800b884:	f04f 30ff 	mov.w	r0, #4294967295
 800b888:	f7ff ff8e 	bl	800b7a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b88c:	4b05      	ldr	r3, [pc, #20]	; (800b8a4 <SysTick_Config+0x40>)
 800b88e:	2200      	movs	r2, #0
 800b890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b892:	4b04      	ldr	r3, [pc, #16]	; (800b8a4 <SysTick_Config+0x40>)
 800b894:	2207      	movs	r2, #7
 800b896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	e000e010 	.word	0xe000e010

0800b8a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f7ff fec5 	bl	800b640 <__NVIC_SetPriorityGrouping>
}
 800b8b6:	bf00      	nop
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b086      	sub	sp, #24
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	60b9      	str	r1, [r7, #8]
 800b8c8:	607a      	str	r2, [r7, #4]
 800b8ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b8d0:	f7ff feda 	bl	800b688 <__NVIC_GetPriorityGrouping>
 800b8d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	68b9      	ldr	r1, [r7, #8]
 800b8da:	6978      	ldr	r0, [r7, #20]
 800b8dc:	f7ff ff8e 	bl	800b7fc <NVIC_EncodePriority>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7ff ff5d 	bl	800b7a8 <__NVIC_SetPriority>
}
 800b8ee:	bf00      	nop
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b904:	4618      	mov	r0, r3
 800b906:	f7ff fecd 	bl	800b6a4 <__NVIC_EnableIRQ>
}
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b082      	sub	sp, #8
 800b916:	af00      	add	r7, sp, #0
 800b918:	4603      	mov	r3, r0
 800b91a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b91c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b920:	4618      	mov	r0, r3
 800b922:	f7ff fedd 	bl	800b6e0 <__NVIC_DisableIRQ>
}
 800b926:	bf00      	nop
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b082      	sub	sp, #8
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff ff94 	bl	800b864 <SysTick_Config>
 800b93c:	4603      	mov	r3, r0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b082      	sub	sp, #8
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	4603      	mov	r3, r0
 800b94e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800b950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b954:	4618      	mov	r0, r3
 800b956:	f7ff fee7 	bl	800b728 <__NVIC_GetPendingIRQ>
 800b95a:	4603      	mov	r3, r0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	4603      	mov	r3, r0
 800b96c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800b96e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b972:	4618      	mov	r0, r3
 800b974:	f7ff fefa 	bl	800b76c <__NVIC_ClearPendingIRQ>
}
 800b978:	bf00      	nop
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b988:	2300      	movs	r3, #0
 800b98a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b98c:	f7ff fe28 	bl	800b5e0 <HAL_GetTick>
 800b990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d101      	bne.n	800b99c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	e099      	b.n	800bad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2202      	movs	r2, #2
 800b9a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f022 0201 	bic.w	r2, r2, #1
 800b9ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b9bc:	e00f      	b.n	800b9de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b9be:	f7ff fe0f 	bl	800b5e0 <HAL_GetTick>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	1ad3      	subs	r3, r2, r3
 800b9c8:	2b05      	cmp	r3, #5
 800b9ca:	d908      	bls.n	800b9de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2220      	movs	r2, #32
 800b9d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2203      	movs	r2, #3
 800b9d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e078      	b.n	800bad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1e8      	bne.n	800b9be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	4b38      	ldr	r3, [pc, #224]	; (800bad8 <HAL_DMA_Init+0x158>)
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	685a      	ldr	r2, [r3, #4]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	691b      	ldr	r3, [r3, #16]
 800ba10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a1b      	ldr	r3, [r3, #32]
 800ba28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba34:	2b04      	cmp	r3, #4
 800ba36:	d107      	bne.n	800ba48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba40:	4313      	orrs	r3, r2
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	f023 0307 	bic.w	r3, r3, #7
 800ba5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d117      	bne.n	800baa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00e      	beq.n	800baa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fb0f 	bl	800c0a8 <DMA_CheckFifoParam>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d008      	beq.n	800baa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2240      	movs	r2, #64	; 0x40
 800ba94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e016      	b.n	800bad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fac6 	bl	800c03c <DMA_CalcBaseAndBitshift>
 800bab0:	4603      	mov	r3, r0
 800bab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bab8:	223f      	movs	r2, #63	; 0x3f
 800baba:	409a      	lsls	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2201      	movs	r2, #1
 800baca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	f010803f 	.word	0xf010803f

0800badc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d101      	bne.n	800bb02 <HAL_DMA_Start_IT+0x26>
 800bafe:	2302      	movs	r3, #2
 800bb00:	e040      	b.n	800bb84 <HAL_DMA_Start_IT+0xa8>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d12f      	bne.n	800bb76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2202      	movs	r2, #2
 800bb1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	68b9      	ldr	r1, [r7, #8]
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f000 fa58 	bl	800bfe0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb34:	223f      	movs	r2, #63	; 0x3f
 800bb36:	409a      	lsls	r2, r3
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f042 0216 	orr.w	r2, r2, #22
 800bb4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d007      	beq.n	800bb64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f042 0208 	orr.w	r2, r2, #8
 800bb62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f042 0201 	orr.w	r2, r2, #1
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	e005      	b.n	800bb82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bb7e:	2302      	movs	r3, #2
 800bb80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bb82:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3718      	adds	r7, #24
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800bb9a:	f7ff fd21 	bl	800b5e0 <HAL_GetTick>
 800bb9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d008      	beq.n	800bbbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2280      	movs	r2, #128	; 0x80
 800bbb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e052      	b.n	800bc64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f022 0216 	bic.w	r2, r2, #22
 800bbcc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	695a      	ldr	r2, [r3, #20]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d103      	bne.n	800bbee <HAL_DMA_Abort+0x62>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d007      	beq.n	800bbfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f022 0208 	bic.w	r2, r2, #8
 800bbfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f022 0201 	bic.w	r2, r2, #1
 800bc0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bc0e:	e013      	b.n	800bc38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bc10:	f7ff fce6 	bl	800b5e0 <HAL_GetTick>
 800bc14:	4602      	mov	r2, r0
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	1ad3      	subs	r3, r2, r3
 800bc1a:	2b05      	cmp	r3, #5
 800bc1c:	d90c      	bls.n	800bc38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2220      	movs	r2, #32
 800bc22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2203      	movs	r2, #3
 800bc28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800bc34:	2303      	movs	r3, #3
 800bc36:	e015      	b.n	800bc64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1e4      	bne.n	800bc10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc4a:	223f      	movs	r2, #63	; 0x3f
 800bc4c:	409a      	lsls	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2201      	movs	r2, #1
 800bc56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800bc62:	2300      	movs	r3, #0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d004      	beq.n	800bc8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2280      	movs	r2, #128	; 0x80
 800bc84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	e00c      	b.n	800bca4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2205      	movs	r2, #5
 800bc8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f022 0201 	bic.w	r2, r2, #1
 800bca0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bcbc:	4b92      	ldr	r3, [pc, #584]	; (800bf08 <HAL_DMA_IRQHandler+0x258>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a92      	ldr	r2, [pc, #584]	; (800bf0c <HAL_DMA_IRQHandler+0x25c>)
 800bcc2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc6:	0a9b      	lsrs	r3, r3, #10
 800bcc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcda:	2208      	movs	r2, #8
 800bcdc:	409a      	lsls	r2, r3
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	4013      	ands	r3, r2
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d01a      	beq.n	800bd1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 0304 	and.w	r3, r3, #4
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d013      	beq.n	800bd1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f022 0204 	bic.w	r2, r2, #4
 800bd02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd08:	2208      	movs	r2, #8
 800bd0a:	409a      	lsls	r2, r3
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd14:	f043 0201 	orr.w	r2, r3, #1
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd20:	2201      	movs	r2, #1
 800bd22:	409a      	lsls	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	4013      	ands	r3, r2
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d012      	beq.n	800bd52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	695b      	ldr	r3, [r3, #20]
 800bd32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00b      	beq.n	800bd52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd3e:	2201      	movs	r2, #1
 800bd40:	409a      	lsls	r2, r3
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd4a:	f043 0202 	orr.w	r2, r3, #2
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd56:	2204      	movs	r2, #4
 800bd58:	409a      	lsls	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d012      	beq.n	800bd88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 0302 	and.w	r3, r3, #2
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d00b      	beq.n	800bd88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd74:	2204      	movs	r2, #4
 800bd76:	409a      	lsls	r2, r3
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd80:	f043 0204 	orr.w	r2, r3, #4
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd8c:	2210      	movs	r2, #16
 800bd8e:	409a      	lsls	r2, r3
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4013      	ands	r3, r2
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d043      	beq.n	800be20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f003 0308 	and.w	r3, r3, #8
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d03c      	beq.n	800be20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdaa:	2210      	movs	r2, #16
 800bdac:	409a      	lsls	r2, r3
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d018      	beq.n	800bdf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d108      	bne.n	800bde0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d024      	beq.n	800be20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	4798      	blx	r3
 800bdde:	e01f      	b.n	800be20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d01b      	beq.n	800be20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	4798      	blx	r3
 800bdf0:	e016      	b.n	800be20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d107      	bne.n	800be10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f022 0208 	bic.w	r2, r2, #8
 800be0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be14:	2b00      	cmp	r3, #0
 800be16:	d003      	beq.n	800be20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be24:	2220      	movs	r2, #32
 800be26:	409a      	lsls	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	4013      	ands	r3, r2
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f000 808e 	beq.w	800bf4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f003 0310 	and.w	r3, r3, #16
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f000 8086 	beq.w	800bf4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be46:	2220      	movs	r2, #32
 800be48:	409a      	lsls	r2, r3
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b05      	cmp	r3, #5
 800be58:	d136      	bne.n	800bec8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f022 0216 	bic.w	r2, r2, #22
 800be68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	695a      	ldr	r2, [r3, #20]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d103      	bne.n	800be8a <HAL_DMA_IRQHandler+0x1da>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be86:	2b00      	cmp	r3, #0
 800be88:	d007      	beq.n	800be9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f022 0208 	bic.w	r2, r2, #8
 800be98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be9e:	223f      	movs	r2, #63	; 0x3f
 800bea0:	409a      	lsls	r2, r3
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d07d      	beq.n	800bfba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	4798      	blx	r3
        }
        return;
 800bec6:	e078      	b.n	800bfba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d01c      	beq.n	800bf10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d108      	bne.n	800bef6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d030      	beq.n	800bf4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	4798      	blx	r3
 800bef4:	e02b      	b.n	800bf4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800befa:	2b00      	cmp	r3, #0
 800befc:	d027      	beq.n	800bf4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	4798      	blx	r3
 800bf06:	e022      	b.n	800bf4e <HAL_DMA_IRQHandler+0x29e>
 800bf08:	20000038 	.word	0x20000038
 800bf0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10f      	bne.n	800bf3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f022 0210 	bic.w	r2, r2, #16
 800bf2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2201      	movs	r2, #1
 800bf32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d032      	beq.n	800bfbc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf5a:	f003 0301 	and.w	r3, r3, #1
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d022      	beq.n	800bfa8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2205      	movs	r2, #5
 800bf66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f022 0201 	bic.w	r2, r2, #1
 800bf78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	60bb      	str	r3, [r7, #8]
 800bf80:	697a      	ldr	r2, [r7, #20]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d307      	bcc.n	800bf96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 0301 	and.w	r3, r3, #1
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d1f2      	bne.n	800bf7a <HAL_DMA_IRQHandler+0x2ca>
 800bf94:	e000      	b.n	800bf98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bf96:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d005      	beq.n	800bfbc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	4798      	blx	r3
 800bfb8:	e000      	b.n	800bfbc <HAL_DMA_IRQHandler+0x30c>
        return;
 800bfba:	bf00      	nop
    }
  }
}
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop

0800bfc4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bfd2:	b2db      	uxtb	r3, r3
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
 800bfec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bffc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	2b40      	cmp	r3, #64	; 0x40
 800c00c:	d108      	bne.n	800c020 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c01e:	e007      	b.n	800c030 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	60da      	str	r2, [r3, #12]
}
 800c030:	bf00      	nop
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	3b10      	subs	r3, #16
 800c04c:	4a14      	ldr	r2, [pc, #80]	; (800c0a0 <DMA_CalcBaseAndBitshift+0x64>)
 800c04e:	fba2 2303 	umull	r2, r3, r2, r3
 800c052:	091b      	lsrs	r3, r3, #4
 800c054:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c056:	4a13      	ldr	r2, [pc, #76]	; (800c0a4 <DMA_CalcBaseAndBitshift+0x68>)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	4413      	add	r3, r2
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	461a      	mov	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b03      	cmp	r3, #3
 800c068:	d909      	bls.n	800c07e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c072:	f023 0303 	bic.w	r3, r3, #3
 800c076:	1d1a      	adds	r2, r3, #4
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	659a      	str	r2, [r3, #88]	; 0x58
 800c07c:	e007      	b.n	800c08e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c086:	f023 0303 	bic.w	r3, r3, #3
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c092:	4618      	mov	r0, r3
 800c094:	3714      	adds	r7, #20
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	aaaaaaab 	.word	0xaaaaaaab
 800c0a4:	0802a970 	.word	0x0802a970

0800c0a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	699b      	ldr	r3, [r3, #24]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d11f      	bne.n	800c102 <DMA_CheckFifoParam+0x5a>
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b03      	cmp	r3, #3
 800c0c6:	d856      	bhi.n	800c176 <DMA_CheckFifoParam+0xce>
 800c0c8:	a201      	add	r2, pc, #4	; (adr r2, 800c0d0 <DMA_CheckFifoParam+0x28>)
 800c0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ce:	bf00      	nop
 800c0d0:	0800c0e1 	.word	0x0800c0e1
 800c0d4:	0800c0f3 	.word	0x0800c0f3
 800c0d8:	0800c0e1 	.word	0x0800c0e1
 800c0dc:	0800c177 	.word	0x0800c177
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d046      	beq.n	800c17a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c0f0:	e043      	b.n	800c17a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c0fa:	d140      	bne.n	800c17e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c100:	e03d      	b.n	800c17e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c10a:	d121      	bne.n	800c150 <DMA_CheckFifoParam+0xa8>
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	2b03      	cmp	r3, #3
 800c110:	d837      	bhi.n	800c182 <DMA_CheckFifoParam+0xda>
 800c112:	a201      	add	r2, pc, #4	; (adr r2, 800c118 <DMA_CheckFifoParam+0x70>)
 800c114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c118:	0800c129 	.word	0x0800c129
 800c11c:	0800c12f 	.word	0x0800c12f
 800c120:	0800c129 	.word	0x0800c129
 800c124:	0800c141 	.word	0x0800c141
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	73fb      	strb	r3, [r7, #15]
      break;
 800c12c:	e030      	b.n	800c190 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c136:	2b00      	cmp	r3, #0
 800c138:	d025      	beq.n	800c186 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c13e:	e022      	b.n	800c186 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c144:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c148:	d11f      	bne.n	800c18a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c14e:	e01c      	b.n	800c18a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2b02      	cmp	r3, #2
 800c154:	d903      	bls.n	800c15e <DMA_CheckFifoParam+0xb6>
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d003      	beq.n	800c164 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c15c:	e018      	b.n	800c190 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	73fb      	strb	r3, [r7, #15]
      break;
 800c162:	e015      	b.n	800c190 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00e      	beq.n	800c18e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	73fb      	strb	r3, [r7, #15]
      break;
 800c174:	e00b      	b.n	800c18e <DMA_CheckFifoParam+0xe6>
      break;
 800c176:	bf00      	nop
 800c178:	e00a      	b.n	800c190 <DMA_CheckFifoParam+0xe8>
      break;
 800c17a:	bf00      	nop
 800c17c:	e008      	b.n	800c190 <DMA_CheckFifoParam+0xe8>
      break;
 800c17e:	bf00      	nop
 800c180:	e006      	b.n	800c190 <DMA_CheckFifoParam+0xe8>
      break;
 800c182:	bf00      	nop
 800c184:	e004      	b.n	800c190 <DMA_CheckFifoParam+0xe8>
      break;
 800c186:	bf00      	nop
 800c188:	e002      	b.n	800c190 <DMA_CheckFifoParam+0xe8>
      break;   
 800c18a:	bf00      	nop
 800c18c:	e000      	b.n	800c190 <DMA_CheckFifoParam+0xe8>
      break;
 800c18e:	bf00      	nop
    }
  } 
  
  return status; 
 800c190:	7bfb      	ldrb	r3, [r7, #15]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3714      	adds	r7, #20
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop

0800c1a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b089      	sub	sp, #36	; 0x24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	61fb      	str	r3, [r7, #28]
 800c1ba:	e159      	b.n	800c470 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c1bc:	2201      	movs	r2, #1
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	f040 8148 	bne.w	800c46a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	f003 0303 	and.w	r3, r3, #3
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d005      	beq.n	800c1f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d130      	bne.n	800c254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	005b      	lsls	r3, r3, #1
 800c1fc:	2203      	movs	r2, #3
 800c1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c202:	43db      	mvns	r3, r3
 800c204:	69ba      	ldr	r2, [r7, #24]
 800c206:	4013      	ands	r3, r2
 800c208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	68da      	ldr	r2, [r3, #12]
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	005b      	lsls	r3, r3, #1
 800c212:	fa02 f303 	lsl.w	r3, r2, r3
 800c216:	69ba      	ldr	r2, [r7, #24]
 800c218:	4313      	orrs	r3, r2
 800c21a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	69ba      	ldr	r2, [r7, #24]
 800c220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c228:	2201      	movs	r2, #1
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	fa02 f303 	lsl.w	r3, r2, r3
 800c230:	43db      	mvns	r3, r3
 800c232:	69ba      	ldr	r2, [r7, #24]
 800c234:	4013      	ands	r3, r2
 800c236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	091b      	lsrs	r3, r3, #4
 800c23e:	f003 0201 	and.w	r2, r3, #1
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	fa02 f303 	lsl.w	r3, r2, r3
 800c248:	69ba      	ldr	r2, [r7, #24]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	69ba      	ldr	r2, [r7, #24]
 800c252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	f003 0303 	and.w	r3, r3, #3
 800c25c:	2b03      	cmp	r3, #3
 800c25e:	d017      	beq.n	800c290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	005b      	lsls	r3, r3, #1
 800c26a:	2203      	movs	r2, #3
 800c26c:	fa02 f303 	lsl.w	r3, r2, r3
 800c270:	43db      	mvns	r3, r3
 800c272:	69ba      	ldr	r2, [r7, #24]
 800c274:	4013      	ands	r3, r2
 800c276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	689a      	ldr	r2, [r3, #8]
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	005b      	lsls	r3, r3, #1
 800c280:	fa02 f303 	lsl.w	r3, r2, r3
 800c284:	69ba      	ldr	r2, [r7, #24]
 800c286:	4313      	orrs	r3, r2
 800c288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	f003 0303 	and.w	r3, r3, #3
 800c298:	2b02      	cmp	r3, #2
 800c29a:	d123      	bne.n	800c2e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	08da      	lsrs	r2, r3, #3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	3208      	adds	r2, #8
 800c2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	f003 0307 	and.w	r3, r3, #7
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	220f      	movs	r2, #15
 800c2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2b8:	43db      	mvns	r3, r3
 800c2ba:	69ba      	ldr	r2, [r7, #24]
 800c2bc:	4013      	ands	r3, r2
 800c2be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	691a      	ldr	r2, [r3, #16]
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	f003 0307 	and.w	r3, r3, #7
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d0:	69ba      	ldr	r2, [r7, #24]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	08da      	lsrs	r2, r3, #3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	3208      	adds	r2, #8
 800c2de:	69b9      	ldr	r1, [r7, #24]
 800c2e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	2203      	movs	r2, #3
 800c2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f4:	43db      	mvns	r3, r3
 800c2f6:	69ba      	ldr	r2, [r7, #24]
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	f003 0203 	and.w	r2, r3, #3
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	005b      	lsls	r3, r3, #1
 800c308:	fa02 f303 	lsl.w	r3, r2, r3
 800c30c:	69ba      	ldr	r2, [r7, #24]
 800c30e:	4313      	orrs	r3, r2
 800c310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	69ba      	ldr	r2, [r7, #24]
 800c316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 80a2 	beq.w	800c46a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c326:	2300      	movs	r3, #0
 800c328:	60fb      	str	r3, [r7, #12]
 800c32a:	4b57      	ldr	r3, [pc, #348]	; (800c488 <HAL_GPIO_Init+0x2e8>)
 800c32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c32e:	4a56      	ldr	r2, [pc, #344]	; (800c488 <HAL_GPIO_Init+0x2e8>)
 800c330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c334:	6453      	str	r3, [r2, #68]	; 0x44
 800c336:	4b54      	ldr	r3, [pc, #336]	; (800c488 <HAL_GPIO_Init+0x2e8>)
 800c338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c33a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c33e:	60fb      	str	r3, [r7, #12]
 800c340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c342:	4a52      	ldr	r2, [pc, #328]	; (800c48c <HAL_GPIO_Init+0x2ec>)
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	089b      	lsrs	r3, r3, #2
 800c348:	3302      	adds	r3, #2
 800c34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c34e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	f003 0303 	and.w	r3, r3, #3
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	220f      	movs	r2, #15
 800c35a:	fa02 f303 	lsl.w	r3, r2, r3
 800c35e:	43db      	mvns	r3, r3
 800c360:	69ba      	ldr	r2, [r7, #24]
 800c362:	4013      	ands	r3, r2
 800c364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4a49      	ldr	r2, [pc, #292]	; (800c490 <HAL_GPIO_Init+0x2f0>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d019      	beq.n	800c3a2 <HAL_GPIO_Init+0x202>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4a48      	ldr	r2, [pc, #288]	; (800c494 <HAL_GPIO_Init+0x2f4>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d013      	beq.n	800c39e <HAL_GPIO_Init+0x1fe>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	4a47      	ldr	r2, [pc, #284]	; (800c498 <HAL_GPIO_Init+0x2f8>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d00d      	beq.n	800c39a <HAL_GPIO_Init+0x1fa>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4a46      	ldr	r2, [pc, #280]	; (800c49c <HAL_GPIO_Init+0x2fc>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d007      	beq.n	800c396 <HAL_GPIO_Init+0x1f6>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a45      	ldr	r2, [pc, #276]	; (800c4a0 <HAL_GPIO_Init+0x300>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d101      	bne.n	800c392 <HAL_GPIO_Init+0x1f2>
 800c38e:	2304      	movs	r3, #4
 800c390:	e008      	b.n	800c3a4 <HAL_GPIO_Init+0x204>
 800c392:	2307      	movs	r3, #7
 800c394:	e006      	b.n	800c3a4 <HAL_GPIO_Init+0x204>
 800c396:	2303      	movs	r3, #3
 800c398:	e004      	b.n	800c3a4 <HAL_GPIO_Init+0x204>
 800c39a:	2302      	movs	r3, #2
 800c39c:	e002      	b.n	800c3a4 <HAL_GPIO_Init+0x204>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e000      	b.n	800c3a4 <HAL_GPIO_Init+0x204>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	69fa      	ldr	r2, [r7, #28]
 800c3a6:	f002 0203 	and.w	r2, r2, #3
 800c3aa:	0092      	lsls	r2, r2, #2
 800c3ac:	4093      	lsls	r3, r2
 800c3ae:	69ba      	ldr	r2, [r7, #24]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c3b4:	4935      	ldr	r1, [pc, #212]	; (800c48c <HAL_GPIO_Init+0x2ec>)
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	089b      	lsrs	r3, r3, #2
 800c3ba:	3302      	adds	r3, #2
 800c3bc:	69ba      	ldr	r2, [r7, #24]
 800c3be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c3c2:	4b38      	ldr	r3, [pc, #224]	; (800c4a4 <HAL_GPIO_Init+0x304>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	43db      	mvns	r3, r3
 800c3cc:	69ba      	ldr	r2, [r7, #24]
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d003      	beq.n	800c3e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800c3de:	69ba      	ldr	r2, [r7, #24]
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c3e6:	4a2f      	ldr	r2, [pc, #188]	; (800c4a4 <HAL_GPIO_Init+0x304>)
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c3ec:	4b2d      	ldr	r3, [pc, #180]	; (800c4a4 <HAL_GPIO_Init+0x304>)
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	43db      	mvns	r3, r3
 800c3f6:	69ba      	ldr	r2, [r7, #24]
 800c3f8:	4013      	ands	r3, r2
 800c3fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d003      	beq.n	800c410 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800c408:	69ba      	ldr	r2, [r7, #24]
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c410:	4a24      	ldr	r2, [pc, #144]	; (800c4a4 <HAL_GPIO_Init+0x304>)
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c416:	4b23      	ldr	r3, [pc, #140]	; (800c4a4 <HAL_GPIO_Init+0x304>)
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	43db      	mvns	r3, r3
 800c420:	69ba      	ldr	r2, [r7, #24]
 800c422:	4013      	ands	r3, r2
 800c424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d003      	beq.n	800c43a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800c432:	69ba      	ldr	r2, [r7, #24]
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	4313      	orrs	r3, r2
 800c438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c43a:	4a1a      	ldr	r2, [pc, #104]	; (800c4a4 <HAL_GPIO_Init+0x304>)
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c440:	4b18      	ldr	r3, [pc, #96]	; (800c4a4 <HAL_GPIO_Init+0x304>)
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	43db      	mvns	r3, r3
 800c44a:	69ba      	ldr	r2, [r7, #24]
 800c44c:	4013      	ands	r3, r2
 800c44e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d003      	beq.n	800c464 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800c45c:	69ba      	ldr	r2, [r7, #24]
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	4313      	orrs	r3, r2
 800c462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c464:	4a0f      	ldr	r2, [pc, #60]	; (800c4a4 <HAL_GPIO_Init+0x304>)
 800c466:	69bb      	ldr	r3, [r7, #24]
 800c468:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	3301      	adds	r3, #1
 800c46e:	61fb      	str	r3, [r7, #28]
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	2b0f      	cmp	r3, #15
 800c474:	f67f aea2 	bls.w	800c1bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c478:	bf00      	nop
 800c47a:	bf00      	nop
 800c47c:	3724      	adds	r7, #36	; 0x24
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	40023800 	.word	0x40023800
 800c48c:	40013800 	.word	0x40013800
 800c490:	40020000 	.word	0x40020000
 800c494:	40020400 	.word	0x40020400
 800c498:	40020800 	.word	0x40020800
 800c49c:	40020c00 	.word	0x40020c00
 800c4a0:	40021000 	.word	0x40021000
 800c4a4:	40013c00 	.word	0x40013c00

0800c4a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	691a      	ldr	r2, [r3, #16]
 800c4b8:	887b      	ldrh	r3, [r7, #2]
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d002      	beq.n	800c4c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	73fb      	strb	r3, [r7, #15]
 800c4c4:	e001      	b.n	800c4ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	807b      	strh	r3, [r7, #2]
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c4e8:	787b      	ldrb	r3, [r7, #1]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d003      	beq.n	800c4f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c4ee:	887a      	ldrh	r2, [r7, #2]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c4f4:	e003      	b.n	800c4fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c4f6:	887b      	ldrh	r3, [r7, #2]
 800c4f8:	041a      	lsls	r2, r3, #16
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	619a      	str	r2, [r3, #24]
}
 800c4fe:	bf00      	nop
 800c500:	370c      	adds	r7, #12
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c50a:	b480      	push	{r7}
 800c50c:	b085      	sub	sp, #20
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
 800c512:	460b      	mov	r3, r1
 800c514:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c51c:	887a      	ldrh	r2, [r7, #2]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	4013      	ands	r3, r2
 800c522:	041a      	lsls	r2, r3, #16
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	43d9      	mvns	r1, r3
 800c528:	887b      	ldrh	r3, [r7, #2]
 800c52a:	400b      	ands	r3, r1
 800c52c:	431a      	orrs	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	619a      	str	r2, [r3, #24]
}
 800c532:	bf00      	nop
 800c534:	3714      	adds	r7, #20
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
	...

0800c540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800c54a:	4b08      	ldr	r3, [pc, #32]	; (800c56c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c54c:	695a      	ldr	r2, [r3, #20]
 800c54e:	88fb      	ldrh	r3, [r7, #6]
 800c550:	4013      	ands	r3, r2
 800c552:	2b00      	cmp	r3, #0
 800c554:	d006      	beq.n	800c564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c556:	4a05      	ldr	r2, [pc, #20]	; (800c56c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c558:	88fb      	ldrh	r3, [r7, #6]
 800c55a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c55c:	88fb      	ldrh	r3, [r7, #6]
 800c55e:	4618      	mov	r0, r3
 800c560:	f7f9 fe7a 	bl	8006258 <HAL_GPIO_EXTI_Callback>
  }
}
 800c564:	bf00      	nop
 800c566:	3708      	adds	r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	40013c00 	.word	0x40013c00

0800c570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d101      	bne.n	800c582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e12b      	b.n	800c7da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d106      	bne.n	800c59c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7f9 fc06 	bl	8005da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2224      	movs	r2, #36	; 0x24
 800c5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f022 0201 	bic.w	r2, r2, #1
 800c5b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c5d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c5d4:	f003 fcf0 	bl	800ffb8 <HAL_RCC_GetPCLK1Freq>
 800c5d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	4a81      	ldr	r2, [pc, #516]	; (800c7e4 <HAL_I2C_Init+0x274>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d807      	bhi.n	800c5f4 <HAL_I2C_Init+0x84>
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	4a80      	ldr	r2, [pc, #512]	; (800c7e8 <HAL_I2C_Init+0x278>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	bf94      	ite	ls
 800c5ec:	2301      	movls	r3, #1
 800c5ee:	2300      	movhi	r3, #0
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	e006      	b.n	800c602 <HAL_I2C_Init+0x92>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	4a7d      	ldr	r2, [pc, #500]	; (800c7ec <HAL_I2C_Init+0x27c>)
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	bf94      	ite	ls
 800c5fc:	2301      	movls	r3, #1
 800c5fe:	2300      	movhi	r3, #0
 800c600:	b2db      	uxtb	r3, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	e0e7      	b.n	800c7da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	4a78      	ldr	r2, [pc, #480]	; (800c7f0 <HAL_I2C_Init+0x280>)
 800c60e:	fba2 2303 	umull	r2, r3, r2, r3
 800c612:	0c9b      	lsrs	r3, r3, #18
 800c614:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	430a      	orrs	r2, r1
 800c628:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6a1b      	ldr	r3, [r3, #32]
 800c630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	4a6a      	ldr	r2, [pc, #424]	; (800c7e4 <HAL_I2C_Init+0x274>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d802      	bhi.n	800c644 <HAL_I2C_Init+0xd4>
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	3301      	adds	r3, #1
 800c642:	e009      	b.n	800c658 <HAL_I2C_Init+0xe8>
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c64a:	fb02 f303 	mul.w	r3, r2, r3
 800c64e:	4a69      	ldr	r2, [pc, #420]	; (800c7f4 <HAL_I2C_Init+0x284>)
 800c650:	fba2 2303 	umull	r2, r3, r2, r3
 800c654:	099b      	lsrs	r3, r3, #6
 800c656:	3301      	adds	r3, #1
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	6812      	ldr	r2, [r2, #0]
 800c65c:	430b      	orrs	r3, r1
 800c65e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	69db      	ldr	r3, [r3, #28]
 800c666:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c66a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	495c      	ldr	r1, [pc, #368]	; (800c7e4 <HAL_I2C_Init+0x274>)
 800c674:	428b      	cmp	r3, r1
 800c676:	d819      	bhi.n	800c6ac <HAL_I2C_Init+0x13c>
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	1e59      	subs	r1, r3, #1
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	005b      	lsls	r3, r3, #1
 800c682:	fbb1 f3f3 	udiv	r3, r1, r3
 800c686:	1c59      	adds	r1, r3, #1
 800c688:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c68c:	400b      	ands	r3, r1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00a      	beq.n	800c6a8 <HAL_I2C_Init+0x138>
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	1e59      	subs	r1, r3, #1
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	005b      	lsls	r3, r3, #1
 800c69c:	fbb1 f3f3 	udiv	r3, r1, r3
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6a6:	e051      	b.n	800c74c <HAL_I2C_Init+0x1dc>
 800c6a8:	2304      	movs	r3, #4
 800c6aa:	e04f      	b.n	800c74c <HAL_I2C_Init+0x1dc>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d111      	bne.n	800c6d8 <HAL_I2C_Init+0x168>
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	1e58      	subs	r0, r3, #1
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6859      	ldr	r1, [r3, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	005b      	lsls	r3, r3, #1
 800c6c0:	440b      	add	r3, r1
 800c6c2:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	bf0c      	ite	eq
 800c6d0:	2301      	moveq	r3, #1
 800c6d2:	2300      	movne	r3, #0
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	e012      	b.n	800c6fe <HAL_I2C_Init+0x18e>
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	1e58      	subs	r0, r3, #1
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6859      	ldr	r1, [r3, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	440b      	add	r3, r1
 800c6e6:	0099      	lsls	r1, r3, #2
 800c6e8:	440b      	add	r3, r1
 800c6ea:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	bf0c      	ite	eq
 800c6f8:	2301      	moveq	r3, #1
 800c6fa:	2300      	movne	r3, #0
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d001      	beq.n	800c706 <HAL_I2C_Init+0x196>
 800c702:	2301      	movs	r3, #1
 800c704:	e022      	b.n	800c74c <HAL_I2C_Init+0x1dc>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d10e      	bne.n	800c72c <HAL_I2C_Init+0x1bc>
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	1e58      	subs	r0, r3, #1
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6859      	ldr	r1, [r3, #4]
 800c716:	460b      	mov	r3, r1
 800c718:	005b      	lsls	r3, r3, #1
 800c71a:	440b      	add	r3, r1
 800c71c:	fbb0 f3f3 	udiv	r3, r0, r3
 800c720:	3301      	adds	r3, #1
 800c722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c72a:	e00f      	b.n	800c74c <HAL_I2C_Init+0x1dc>
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	1e58      	subs	r0, r3, #1
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6859      	ldr	r1, [r3, #4]
 800c734:	460b      	mov	r3, r1
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	440b      	add	r3, r1
 800c73a:	0099      	lsls	r1, r3, #2
 800c73c:	440b      	add	r3, r1
 800c73e:	fbb0 f3f3 	udiv	r3, r0, r3
 800c742:	3301      	adds	r3, #1
 800c744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	6809      	ldr	r1, [r1, #0]
 800c750:	4313      	orrs	r3, r2
 800c752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	69da      	ldr	r2, [r3, #28]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	431a      	orrs	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	430a      	orrs	r2, r1
 800c76e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c77a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	6911      	ldr	r1, [r2, #16]
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	68d2      	ldr	r2, [r2, #12]
 800c786:	4311      	orrs	r1, r2
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	6812      	ldr	r2, [r2, #0]
 800c78c:	430b      	orrs	r3, r1
 800c78e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	695a      	ldr	r2, [r3, #20]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	699b      	ldr	r3, [r3, #24]
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	430a      	orrs	r2, r1
 800c7aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f042 0201 	orr.w	r2, r2, #1
 800c7ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2220      	movs	r2, #32
 800c7c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	000186a0 	.word	0x000186a0
 800c7e8:	001e847f 	.word	0x001e847f
 800c7ec:	003d08ff 	.word	0x003d08ff
 800c7f0:	431bde83 	.word	0x431bde83
 800c7f4:	10624dd3 	.word	0x10624dd3

0800c7f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b088      	sub	sp, #32
 800c7fc:	af02      	add	r7, sp, #8
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	607a      	str	r2, [r7, #4]
 800c802:	461a      	mov	r2, r3
 800c804:	460b      	mov	r3, r1
 800c806:	817b      	strh	r3, [r7, #10]
 800c808:	4613      	mov	r3, r2
 800c80a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c80c:	f7fe fee8 	bl	800b5e0 <HAL_GetTick>
 800c810:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	2b20      	cmp	r3, #32
 800c81c:	f040 80e0 	bne.w	800c9e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	2319      	movs	r3, #25
 800c826:	2201      	movs	r2, #1
 800c828:	4970      	ldr	r1, [pc, #448]	; (800c9ec <HAL_I2C_Master_Transmit+0x1f4>)
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f002 fd7a 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d001      	beq.n	800c83a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800c836:	2302      	movs	r3, #2
 800c838:	e0d3      	b.n	800c9e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c840:	2b01      	cmp	r3, #1
 800c842:	d101      	bne.n	800c848 <HAL_I2C_Master_Transmit+0x50>
 800c844:	2302      	movs	r3, #2
 800c846:	e0cc      	b.n	800c9e2 <HAL_I2C_Master_Transmit+0x1ea>
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f003 0301 	and.w	r3, r3, #1
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d007      	beq.n	800c86e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f042 0201 	orr.w	r2, r2, #1
 800c86c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c87c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2221      	movs	r2, #33	; 0x21
 800c882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2210      	movs	r2, #16
 800c88a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2200      	movs	r2, #0
 800c892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	893a      	ldrh	r2, [r7, #8]
 800c89e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8a4:	b29a      	uxth	r2, r3
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	4a50      	ldr	r2, [pc, #320]	; (800c9f0 <HAL_I2C_Master_Transmit+0x1f8>)
 800c8ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c8b0:	8979      	ldrh	r1, [r7, #10]
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	6a3a      	ldr	r2, [r7, #32]
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f002 f9be 	bl	800ec38 <I2C_MasterRequestWrite>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d001      	beq.n	800c8c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e08d      	b.n	800c9e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	613b      	str	r3, [r7, #16]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	695b      	ldr	r3, [r3, #20]
 800c8d0:	613b      	str	r3, [r7, #16]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	699b      	ldr	r3, [r3, #24]
 800c8d8:	613b      	str	r3, [r7, #16]
 800c8da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800c8dc:	e066      	b.n	800c9ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	6a39      	ldr	r1, [r7, #32]
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	f002 fdf4 	bl	800f4d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00d      	beq.n	800c90a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f2:	2b04      	cmp	r3, #4
 800c8f4:	d107      	bne.n	800c906 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c904:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	e06b      	b.n	800c9e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90e:	781a      	ldrb	r2, [r3, #0]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91a:	1c5a      	adds	r2, r3, #1
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c924:	b29b      	uxth	r3, r3
 800c926:	3b01      	subs	r3, #1
 800c928:	b29a      	uxth	r2, r3
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c932:	3b01      	subs	r3, #1
 800c934:	b29a      	uxth	r2, r3
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	695b      	ldr	r3, [r3, #20]
 800c940:	f003 0304 	and.w	r3, r3, #4
 800c944:	2b04      	cmp	r3, #4
 800c946:	d11b      	bne.n	800c980 <HAL_I2C_Master_Transmit+0x188>
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d017      	beq.n	800c980 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c954:	781a      	ldrb	r2, [r3, #0]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c960:	1c5a      	adds	r2, r3, #1
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	3b01      	subs	r3, #1
 800c96e:	b29a      	uxth	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c978:	3b01      	subs	r3, #1
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c980:	697a      	ldr	r2, [r7, #20]
 800c982:	6a39      	ldr	r1, [r7, #32]
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f002 fde4 	bl	800f552 <I2C_WaitOnBTFFlagUntilTimeout>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00d      	beq.n	800c9ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c994:	2b04      	cmp	r3, #4
 800c996:	d107      	bne.n	800c9a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e01a      	b.n	800c9e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d194      	bne.n	800c8de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2220      	movs	r2, #32
 800c9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	e000      	b.n	800c9e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800c9e0:	2302      	movs	r3, #2
  }
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3718      	adds	r7, #24
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	00100002 	.word	0x00100002
 800c9f0:	ffff0000 	.word	0xffff0000

0800c9f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b08c      	sub	sp, #48	; 0x30
 800c9f8:	af02      	add	r7, sp, #8
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	607a      	str	r2, [r7, #4]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	460b      	mov	r3, r1
 800ca02:	817b      	strh	r3, [r7, #10]
 800ca04:	4613      	mov	r3, r2
 800ca06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ca08:	f7fe fdea 	bl	800b5e0 <HAL_GetTick>
 800ca0c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b20      	cmp	r3, #32
 800ca18:	f040 820b 	bne.w	800ce32 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	2319      	movs	r3, #25
 800ca22:	2201      	movs	r2, #1
 800ca24:	497c      	ldr	r1, [pc, #496]	; (800cc18 <HAL_I2C_Master_Receive+0x224>)
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f002 fc7c 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d001      	beq.n	800ca36 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800ca32:	2302      	movs	r3, #2
 800ca34:	e1fe      	b.n	800ce34 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d101      	bne.n	800ca44 <HAL_I2C_Master_Receive+0x50>
 800ca40:	2302      	movs	r3, #2
 800ca42:	e1f7      	b.n	800ce34 <HAL_I2C_Master_Receive+0x440>
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2201      	movs	r2, #1
 800ca48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 0301 	and.w	r3, r3, #1
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d007      	beq.n	800ca6a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f042 0201 	orr.w	r2, r2, #1
 800ca68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2222      	movs	r2, #34	; 0x22
 800ca7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2210      	movs	r2, #16
 800ca86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	893a      	ldrh	r2, [r7, #8]
 800ca9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	4a5c      	ldr	r2, [pc, #368]	; (800cc1c <HAL_I2C_Master_Receive+0x228>)
 800caaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800caac:	8979      	ldrh	r1, [r7, #10]
 800caae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f002 f942 	bl	800ed3c <I2C_MasterRequestRead>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e1b8      	b.n	800ce34 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d113      	bne.n	800caf2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800caca:	2300      	movs	r3, #0
 800cacc:	623b      	str	r3, [r7, #32]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	695b      	ldr	r3, [r3, #20]
 800cad4:	623b      	str	r3, [r7, #32]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	699b      	ldr	r3, [r3, #24]
 800cadc:	623b      	str	r3, [r7, #32]
 800cade:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800caee:	601a      	str	r2, [r3, #0]
 800caf0:	e18c      	b.n	800ce0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d11b      	bne.n	800cb32 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	61fb      	str	r3, [r7, #28]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	695b      	ldr	r3, [r3, #20]
 800cb14:	61fb      	str	r3, [r7, #28]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	61fb      	str	r3, [r7, #28]
 800cb1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	e16c      	b.n	800ce0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d11b      	bne.n	800cb72 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	61bb      	str	r3, [r7, #24]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	695b      	ldr	r3, [r3, #20]
 800cb64:	61bb      	str	r3, [r7, #24]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	699b      	ldr	r3, [r3, #24]
 800cb6c:	61bb      	str	r3, [r7, #24]
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	e14c      	b.n	800ce0c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb82:	2300      	movs	r3, #0
 800cb84:	617b      	str	r3, [r7, #20]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	695b      	ldr	r3, [r3, #20]
 800cb8c:	617b      	str	r3, [r7, #20]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	699b      	ldr	r3, [r3, #24]
 800cb94:	617b      	str	r3, [r7, #20]
 800cb96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800cb98:	e138      	b.n	800ce0c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb9e:	2b03      	cmp	r3, #3
 800cba0:	f200 80f1 	bhi.w	800cd86 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d123      	bne.n	800cbf4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f002 fd41 	bl	800f638 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e139      	b.n	800ce34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	691a      	ldr	r2, [r3, #16]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbca:	b2d2      	uxtb	r2, r2
 800cbcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd2:	1c5a      	adds	r2, r3, #1
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	3b01      	subs	r3, #1
 800cbec:	b29a      	uxth	r2, r3
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cbf2:	e10b      	b.n	800ce0c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	d14e      	bne.n	800cc9a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc02:	2200      	movs	r2, #0
 800cc04:	4906      	ldr	r1, [pc, #24]	; (800cc20 <HAL_I2C_Master_Receive+0x22c>)
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f002 fb8c 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d008      	beq.n	800cc24 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e10e      	b.n	800ce34 <HAL_I2C_Master_Receive+0x440>
 800cc16:	bf00      	nop
 800cc18:	00100002 	.word	0x00100002
 800cc1c:	ffff0000 	.word	0xffff0000
 800cc20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	691a      	ldr	r2, [r3, #16]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3e:	b2d2      	uxtb	r2, r2
 800cc40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc46:	1c5a      	adds	r2, r3, #1
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc50:	3b01      	subs	r3, #1
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	691a      	ldr	r2, [r3, #16]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc70:	b2d2      	uxtb	r2, r2
 800cc72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc78:	1c5a      	adds	r2, r3, #1
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc82:	3b01      	subs	r3, #1
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	3b01      	subs	r3, #1
 800cc92:	b29a      	uxth	r2, r3
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cc98:	e0b8      	b.n	800ce0c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	2200      	movs	r2, #0
 800cca2:	4966      	ldr	r1, [pc, #408]	; (800ce3c <HAL_I2C_Master_Receive+0x448>)
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f002 fb3d 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d001      	beq.n	800ccb4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e0bf      	b.n	800ce34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	691a      	ldr	r2, [r3, #16]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccce:	b2d2      	uxtb	r2, r2
 800ccd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd6:	1c5a      	adds	r2, r3, #1
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cce0:	3b01      	subs	r3, #1
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	494f      	ldr	r1, [pc, #316]	; (800ce3c <HAL_I2C_Master_Receive+0x448>)
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	f002 fb0f 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e091      	b.n	800ce34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	691a      	ldr	r2, [r3, #16]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2a:	b2d2      	uxtb	r2, r2
 800cd2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	691a      	ldr	r2, [r3, #16]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5c:	b2d2      	uxtb	r2, r2
 800cd5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd64:	1c5a      	adds	r2, r3, #1
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	b29a      	uxth	r2, r3
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd84:	e042      	b.n	800ce0c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f002 fc54 	bl	800f638 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d001      	beq.n	800cd9a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e04c      	b.n	800ce34 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	691a      	ldr	r2, [r3, #16]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda4:	b2d2      	uxtb	r2, r2
 800cda6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdac:	1c5a      	adds	r2, r3, #1
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	695b      	ldr	r3, [r3, #20]
 800cdd2:	f003 0304 	and.w	r3, r3, #4
 800cdd6:	2b04      	cmp	r3, #4
 800cdd8:	d118      	bne.n	800ce0c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	691a      	ldr	r2, [r3, #16]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde4:	b2d2      	uxtb	r2, r2
 800cde6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdec:	1c5a      	adds	r2, r3, #1
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	3b01      	subs	r3, #1
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f47f aec2 	bne.w	800cb9a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2220      	movs	r2, #32
 800ce1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	e000      	b.n	800ce34 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ce32:	2302      	movs	r3, #2
  }
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3728      	adds	r7, #40	; 0x28
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	00010004 	.word	0x00010004

0800ce40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b088      	sub	sp, #32
 800ce44:	af02      	add	r7, sp, #8
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	4608      	mov	r0, r1
 800ce4a:	4611      	mov	r1, r2
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	4603      	mov	r3, r0
 800ce50:	817b      	strh	r3, [r7, #10]
 800ce52:	460b      	mov	r3, r1
 800ce54:	813b      	strh	r3, [r7, #8]
 800ce56:	4613      	mov	r3, r2
 800ce58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ce5a:	f7fe fbc1 	bl	800b5e0 <HAL_GetTick>
 800ce5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	2b20      	cmp	r3, #32
 800ce6a:	f040 80d9 	bne.w	800d020 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	2319      	movs	r3, #25
 800ce74:	2201      	movs	r2, #1
 800ce76:	496d      	ldr	r1, [pc, #436]	; (800d02c <HAL_I2C_Mem_Write+0x1ec>)
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	f002 fa53 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d001      	beq.n	800ce88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ce84:	2302      	movs	r3, #2
 800ce86:	e0cc      	b.n	800d022 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d101      	bne.n	800ce96 <HAL_I2C_Mem_Write+0x56>
 800ce92:	2302      	movs	r3, #2
 800ce94:	e0c5      	b.n	800d022 <HAL_I2C_Mem_Write+0x1e2>
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d007      	beq.n	800cebc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f042 0201 	orr.w	r2, r2, #1
 800ceba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ceca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2221      	movs	r2, #33	; 0x21
 800ced0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2240      	movs	r2, #64	; 0x40
 800ced8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2200      	movs	r2, #0
 800cee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6a3a      	ldr	r2, [r7, #32]
 800cee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ceec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	4a4d      	ldr	r2, [pc, #308]	; (800d030 <HAL_I2C_Mem_Write+0x1f0>)
 800cefc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cefe:	88f8      	ldrh	r0, [r7, #6]
 800cf00:	893a      	ldrh	r2, [r7, #8]
 800cf02:	8979      	ldrh	r1, [r7, #10]
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	9301      	str	r3, [sp, #4]
 800cf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f001 ffe2 	bl	800eed8 <I2C_RequestMemoryWrite>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d052      	beq.n	800cfc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e081      	b.n	800d022 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	f002 fad4 	bl	800f4d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00d      	beq.n	800cf4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf32:	2b04      	cmp	r3, #4
 800cf34:	d107      	bne.n	800cf46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e06b      	b.n	800d022 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4e:	781a      	ldrb	r2, [r3, #0]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf5a:	1c5a      	adds	r2, r3, #1
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf64:	3b01      	subs	r3, #1
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	3b01      	subs	r3, #1
 800cf74:	b29a      	uxth	r2, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	695b      	ldr	r3, [r3, #20]
 800cf80:	f003 0304 	and.w	r3, r3, #4
 800cf84:	2b04      	cmp	r3, #4
 800cf86:	d11b      	bne.n	800cfc0 <HAL_I2C_Mem_Write+0x180>
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d017      	beq.n	800cfc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf94:	781a      	ldrb	r2, [r3, #0]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa0:	1c5a      	adds	r2, r3, #1
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1aa      	bne.n	800cf1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cfc8:	697a      	ldr	r2, [r7, #20]
 800cfca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f002 fac0 	bl	800f552 <I2C_WaitOnBTFFlagUntilTimeout>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00d      	beq.n	800cff4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfdc:	2b04      	cmp	r3, #4
 800cfde:	d107      	bne.n	800cff0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	e016      	b.n	800d022 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2220      	movs	r2, #32
 800d008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d01c:	2300      	movs	r3, #0
 800d01e:	e000      	b.n	800d022 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d020:	2302      	movs	r3, #2
  }
}
 800d022:	4618      	mov	r0, r3
 800d024:	3718      	adds	r7, #24
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	00100002 	.word	0x00100002
 800d030:	ffff0000 	.word	0xffff0000

0800d034 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b08c      	sub	sp, #48	; 0x30
 800d038:	af02      	add	r7, sp, #8
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	4608      	mov	r0, r1
 800d03e:	4611      	mov	r1, r2
 800d040:	461a      	mov	r2, r3
 800d042:	4603      	mov	r3, r0
 800d044:	817b      	strh	r3, [r7, #10]
 800d046:	460b      	mov	r3, r1
 800d048:	813b      	strh	r3, [r7, #8]
 800d04a:	4613      	mov	r3, r2
 800d04c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d04e:	f7fe fac7 	bl	800b5e0 <HAL_GetTick>
 800d052:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	2b20      	cmp	r3, #32
 800d05e:	f040 8208 	bne.w	800d472 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	2319      	movs	r3, #25
 800d068:	2201      	movs	r2, #1
 800d06a:	497b      	ldr	r1, [pc, #492]	; (800d258 <HAL_I2C_Mem_Read+0x224>)
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f002 f959 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d078:	2302      	movs	r3, #2
 800d07a:	e1fb      	b.n	800d474 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d082:	2b01      	cmp	r3, #1
 800d084:	d101      	bne.n	800d08a <HAL_I2C_Mem_Read+0x56>
 800d086:	2302      	movs	r3, #2
 800d088:	e1f4      	b.n	800d474 <HAL_I2C_Mem_Read+0x440>
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2201      	movs	r2, #1
 800d08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f003 0301 	and.w	r3, r3, #1
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d007      	beq.n	800d0b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f042 0201 	orr.w	r2, r2, #1
 800d0ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d0be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2222      	movs	r2, #34	; 0x22
 800d0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2240      	movs	r2, #64	; 0x40
 800d0cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d0e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	4a5b      	ldr	r2, [pc, #364]	; (800d25c <HAL_I2C_Mem_Read+0x228>)
 800d0f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d0f2:	88f8      	ldrh	r0, [r7, #6]
 800d0f4:	893a      	ldrh	r2, [r7, #8]
 800d0f6:	8979      	ldrh	r1, [r7, #10]
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fa:	9301      	str	r3, [sp, #4]
 800d0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	4603      	mov	r3, r0
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f001 ff7e 	bl	800f004 <I2C_RequestMemoryRead>
 800d108:	4603      	mov	r3, r0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d001      	beq.n	800d112 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	e1b0      	b.n	800d474 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d116:	2b00      	cmp	r3, #0
 800d118:	d113      	bne.n	800d142 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d11a:	2300      	movs	r3, #0
 800d11c:	623b      	str	r3, [r7, #32]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	695b      	ldr	r3, [r3, #20]
 800d124:	623b      	str	r3, [r7, #32]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	623b      	str	r3, [r7, #32]
 800d12e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	e184      	b.n	800d44c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d146:	2b01      	cmp	r3, #1
 800d148:	d11b      	bne.n	800d182 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d15a:	2300      	movs	r3, #0
 800d15c:	61fb      	str	r3, [r7, #28]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	695b      	ldr	r3, [r3, #20]
 800d164:	61fb      	str	r3, [r7, #28]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	699b      	ldr	r3, [r3, #24]
 800d16c:	61fb      	str	r3, [r7, #28]
 800d16e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	e164      	b.n	800d44c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d186:	2b02      	cmp	r3, #2
 800d188:	d11b      	bne.n	800d1c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d198:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	61bb      	str	r3, [r7, #24]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	695b      	ldr	r3, [r3, #20]
 800d1b4:	61bb      	str	r3, [r7, #24]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	699b      	ldr	r3, [r3, #24]
 800d1bc:	61bb      	str	r3, [r7, #24]
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	e144      	b.n	800d44c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	617b      	str	r3, [r7, #20]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	695b      	ldr	r3, [r3, #20]
 800d1cc:	617b      	str	r3, [r7, #20]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	699b      	ldr	r3, [r3, #24]
 800d1d4:	617b      	str	r3, [r7, #20]
 800d1d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d1d8:	e138      	b.n	800d44c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	f200 80f1 	bhi.w	800d3c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d123      	bne.n	800d234 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d1ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f002 fa21 	bl	800f638 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d001      	beq.n	800d200 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e139      	b.n	800d474 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	691a      	ldr	r2, [r3, #16]
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20a:	b2d2      	uxtb	r2, r2
 800d20c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d21c:	3b01      	subs	r3, #1
 800d21e:	b29a      	uxth	r2, r3
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d228:	b29b      	uxth	r3, r3
 800d22a:	3b01      	subs	r3, #1
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d232:	e10b      	b.n	800d44c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d238:	2b02      	cmp	r3, #2
 800d23a:	d14e      	bne.n	800d2da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d242:	2200      	movs	r2, #0
 800d244:	4906      	ldr	r1, [pc, #24]	; (800d260 <HAL_I2C_Mem_Read+0x22c>)
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f002 f86c 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d008      	beq.n	800d264 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d252:	2301      	movs	r3, #1
 800d254:	e10e      	b.n	800d474 <HAL_I2C_Mem_Read+0x440>
 800d256:	bf00      	nop
 800d258:	00100002 	.word	0x00100002
 800d25c:	ffff0000 	.word	0xffff0000
 800d260:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	691a      	ldr	r2, [r3, #16]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27e:	b2d2      	uxtb	r2, r2
 800d280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d286:	1c5a      	adds	r2, r3, #1
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d290:	3b01      	subs	r3, #1
 800d292:	b29a      	uxth	r2, r3
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	b29a      	uxth	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	691a      	ldr	r2, [r3, #16]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b0:	b2d2      	uxtb	r2, r2
 800d2b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b8:	1c5a      	adds	r2, r3, #1
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d2d8:	e0b8      	b.n	800d44c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	4966      	ldr	r1, [pc, #408]	; (800d47c <HAL_I2C_Mem_Read+0x448>)
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f002 f81d 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d001      	beq.n	800d2f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e0bf      	b.n	800d474 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	691a      	ldr	r2, [r3, #16]
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d30e:	b2d2      	uxtb	r2, r2
 800d310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d316:	1c5a      	adds	r2, r3, #1
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d320:	3b01      	subs	r3, #1
 800d322:	b29a      	uxth	r2, r3
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	3b01      	subs	r3, #1
 800d330:	b29a      	uxth	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d338:	9300      	str	r3, [sp, #0]
 800d33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33c:	2200      	movs	r2, #0
 800d33e:	494f      	ldr	r1, [pc, #316]	; (800d47c <HAL_I2C_Mem_Read+0x448>)
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f001 ffef 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d34c:	2301      	movs	r3, #1
 800d34e:	e091      	b.n	800d474 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d35e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	691a      	ldr	r2, [r3, #16]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36a:	b2d2      	uxtb	r2, r2
 800d36c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d372:	1c5a      	adds	r2, r3, #1
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d37c:	3b01      	subs	r3, #1
 800d37e:	b29a      	uxth	r2, r3
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d388:	b29b      	uxth	r3, r3
 800d38a:	3b01      	subs	r3, #1
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	691a      	ldr	r2, [r3, #16]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39c:	b2d2      	uxtb	r2, r2
 800d39e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a4:	1c5a      	adds	r2, r3, #1
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3ae:	3b01      	subs	r3, #1
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d3c4:	e042      	b.n	800d44c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f002 f934 	bl	800f638 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d001      	beq.n	800d3da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e04c      	b.n	800d474 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	691a      	ldr	r2, [r3, #16]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e4:	b2d2      	uxtb	r2, r2
 800d3e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ec:	1c5a      	adds	r2, r3, #1
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3f6:	3b01      	subs	r3, #1
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d402:	b29b      	uxth	r3, r3
 800d404:	3b01      	subs	r3, #1
 800d406:	b29a      	uxth	r2, r3
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	695b      	ldr	r3, [r3, #20]
 800d412:	f003 0304 	and.w	r3, r3, #4
 800d416:	2b04      	cmp	r3, #4
 800d418:	d118      	bne.n	800d44c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	691a      	ldr	r2, [r3, #16]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d424:	b2d2      	uxtb	r2, r2
 800d426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42c:	1c5a      	adds	r2, r3, #1
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d436:	3b01      	subs	r3, #1
 800d438:	b29a      	uxth	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d442:	b29b      	uxth	r3, r3
 800d444:	3b01      	subs	r3, #1
 800d446:	b29a      	uxth	r2, r3
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d450:	2b00      	cmp	r3, #0
 800d452:	f47f aec2 	bne.w	800d1da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2220      	movs	r2, #32
 800d45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2200      	movs	r2, #0
 800d462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2200      	movs	r2, #0
 800d46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d46e:	2300      	movs	r3, #0
 800d470:	e000      	b.n	800d474 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d472:	2302      	movs	r3, #2
  }
}
 800d474:	4618      	mov	r0, r3
 800d476:	3728      	adds	r7, #40	; 0x28
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	00010004 	.word	0x00010004

0800d480 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b088      	sub	sp, #32
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800d488:	2300      	movs	r3, #0
 800d48a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d498:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d4aa:	7bfb      	ldrb	r3, [r7, #15]
 800d4ac:	2b10      	cmp	r3, #16
 800d4ae:	d003      	beq.n	800d4b8 <HAL_I2C_EV_IRQHandler+0x38>
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
 800d4b2:	2b40      	cmp	r3, #64	; 0x40
 800d4b4:	f040 80c1 	bne.w	800d63a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	699b      	ldr	r3, [r3, #24]
 800d4be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	695b      	ldr	r3, [r3, #20]
 800d4c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	f003 0301 	and.w	r3, r3, #1
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10d      	bne.n	800d4ee <HAL_I2C_EV_IRQHandler+0x6e>
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d4d8:	d003      	beq.n	800d4e2 <HAL_I2C_EV_IRQHandler+0x62>
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d4e0:	d101      	bne.n	800d4e6 <HAL_I2C_EV_IRQHandler+0x66>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e000      	b.n	800d4e8 <HAL_I2C_EV_IRQHandler+0x68>
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	f000 8132 	beq.w	800d752 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	f003 0301 	and.w	r3, r3, #1
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00c      	beq.n	800d512 <HAL_I2C_EV_IRQHandler+0x92>
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	0a5b      	lsrs	r3, r3, #9
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d006      	beq.n	800d512 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f002 f91c 	bl	800f742 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 fd79 	bl	800e002 <I2C_Master_SB>
 800d510:	e092      	b.n	800d638 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	08db      	lsrs	r3, r3, #3
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d009      	beq.n	800d532 <HAL_I2C_EV_IRQHandler+0xb2>
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	0a5b      	lsrs	r3, r3, #9
 800d522:	f003 0301 	and.w	r3, r3, #1
 800d526:	2b00      	cmp	r3, #0
 800d528:	d003      	beq.n	800d532 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 fdef 	bl	800e10e <I2C_Master_ADD10>
 800d530:	e082      	b.n	800d638 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	085b      	lsrs	r3, r3, #1
 800d536:	f003 0301 	and.w	r3, r3, #1
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d009      	beq.n	800d552 <HAL_I2C_EV_IRQHandler+0xd2>
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	0a5b      	lsrs	r3, r3, #9
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	2b00      	cmp	r3, #0
 800d548:	d003      	beq.n	800d552 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 fe09 	bl	800e162 <I2C_Master_ADDR>
 800d550:	e072      	b.n	800d638 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	089b      	lsrs	r3, r3, #2
 800d556:	f003 0301 	and.w	r3, r3, #1
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d03b      	beq.n	800d5d6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d56c:	f000 80f3 	beq.w	800d756 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	09db      	lsrs	r3, r3, #7
 800d574:	f003 0301 	and.w	r3, r3, #1
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d00f      	beq.n	800d59c <HAL_I2C_EV_IRQHandler+0x11c>
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	0a9b      	lsrs	r3, r3, #10
 800d580:	f003 0301 	and.w	r3, r3, #1
 800d584:	2b00      	cmp	r3, #0
 800d586:	d009      	beq.n	800d59c <HAL_I2C_EV_IRQHandler+0x11c>
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	089b      	lsrs	r3, r3, #2
 800d58c:	f003 0301 	and.w	r3, r3, #1
 800d590:	2b00      	cmp	r3, #0
 800d592:	d103      	bne.n	800d59c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 f9f3 	bl	800d980 <I2C_MasterTransmit_TXE>
 800d59a:	e04d      	b.n	800d638 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	089b      	lsrs	r3, r3, #2
 800d5a0:	f003 0301 	and.w	r3, r3, #1
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f000 80d6 	beq.w	800d756 <HAL_I2C_EV_IRQHandler+0x2d6>
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	0a5b      	lsrs	r3, r3, #9
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	f000 80cf 	beq.w	800d756 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d5b8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ba:	2b21      	cmp	r3, #33	; 0x21
 800d5bc:	d103      	bne.n	800d5c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 fa7a 	bl	800dab8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d5c4:	e0c7      	b.n	800d756 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800d5c6:	7bfb      	ldrb	r3, [r7, #15]
 800d5c8:	2b40      	cmp	r3, #64	; 0x40
 800d5ca:	f040 80c4 	bne.w	800d756 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fae8 	bl	800dba4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d5d4:	e0bf      	b.n	800d756 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5e4:	f000 80b7 	beq.w	800d756 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	099b      	lsrs	r3, r3, #6
 800d5ec:	f003 0301 	and.w	r3, r3, #1
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d00f      	beq.n	800d614 <HAL_I2C_EV_IRQHandler+0x194>
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	0a9b      	lsrs	r3, r3, #10
 800d5f8:	f003 0301 	and.w	r3, r3, #1
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d009      	beq.n	800d614 <HAL_I2C_EV_IRQHandler+0x194>
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	089b      	lsrs	r3, r3, #2
 800d604:	f003 0301 	and.w	r3, r3, #1
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d103      	bne.n	800d614 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 fb5d 	bl	800dccc <I2C_MasterReceive_RXNE>
 800d612:	e011      	b.n	800d638 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	089b      	lsrs	r3, r3, #2
 800d618:	f003 0301 	and.w	r3, r3, #1
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	f000 809a 	beq.w	800d756 <HAL_I2C_EV_IRQHandler+0x2d6>
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	0a5b      	lsrs	r3, r3, #9
 800d626:	f003 0301 	and.w	r3, r3, #1
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f000 8093 	beq.w	800d756 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 fbfc 	bl	800de2e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d636:	e08e      	b.n	800d756 <HAL_I2C_EV_IRQHandler+0x2d6>
 800d638:	e08d      	b.n	800d756 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d004      	beq.n	800d64c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	695b      	ldr	r3, [r3, #20]
 800d648:	61fb      	str	r3, [r7, #28]
 800d64a:	e007      	b.n	800d65c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	699b      	ldr	r3, [r3, #24]
 800d652:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	695b      	ldr	r3, [r3, #20]
 800d65a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	085b      	lsrs	r3, r3, #1
 800d660:	f003 0301 	and.w	r3, r3, #1
 800d664:	2b00      	cmp	r3, #0
 800d666:	d012      	beq.n	800d68e <HAL_I2C_EV_IRQHandler+0x20e>
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	0a5b      	lsrs	r3, r3, #9
 800d66c:	f003 0301 	and.w	r3, r3, #1
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00c      	beq.n	800d68e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d003      	beq.n	800d684 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	699b      	ldr	r3, [r3, #24]
 800d682:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800d684:	69b9      	ldr	r1, [r7, #24]
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 ffba 	bl	800e600 <I2C_Slave_ADDR>
 800d68c:	e066      	b.n	800d75c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	091b      	lsrs	r3, r3, #4
 800d692:	f003 0301 	and.w	r3, r3, #1
 800d696:	2b00      	cmp	r3, #0
 800d698:	d009      	beq.n	800d6ae <HAL_I2C_EV_IRQHandler+0x22e>
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	0a5b      	lsrs	r3, r3, #9
 800d69e:	f003 0301 	and.w	r3, r3, #1
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d003      	beq.n	800d6ae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 fff4 	bl	800e694 <I2C_Slave_STOPF>
 800d6ac:	e056      	b.n	800d75c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d6ae:	7bbb      	ldrb	r3, [r7, #14]
 800d6b0:	2b21      	cmp	r3, #33	; 0x21
 800d6b2:	d002      	beq.n	800d6ba <HAL_I2C_EV_IRQHandler+0x23a>
 800d6b4:	7bbb      	ldrb	r3, [r7, #14]
 800d6b6:	2b29      	cmp	r3, #41	; 0x29
 800d6b8:	d125      	bne.n	800d706 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	09db      	lsrs	r3, r3, #7
 800d6be:	f003 0301 	and.w	r3, r3, #1
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00f      	beq.n	800d6e6 <HAL_I2C_EV_IRQHandler+0x266>
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	0a9b      	lsrs	r3, r3, #10
 800d6ca:	f003 0301 	and.w	r3, r3, #1
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d009      	beq.n	800d6e6 <HAL_I2C_EV_IRQHandler+0x266>
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	089b      	lsrs	r3, r3, #2
 800d6d6:	f003 0301 	and.w	r3, r3, #1
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d103      	bne.n	800d6e6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 fed0 	bl	800e484 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d6e4:	e039      	b.n	800d75a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	089b      	lsrs	r3, r3, #2
 800d6ea:	f003 0301 	and.w	r3, r3, #1
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d033      	beq.n	800d75a <HAL_I2C_EV_IRQHandler+0x2da>
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	0a5b      	lsrs	r3, r3, #9
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d02d      	beq.n	800d75a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 fefd 	bl	800e4fe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d704:	e029      	b.n	800d75a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d706:	69fb      	ldr	r3, [r7, #28]
 800d708:	099b      	lsrs	r3, r3, #6
 800d70a:	f003 0301 	and.w	r3, r3, #1
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d00f      	beq.n	800d732 <HAL_I2C_EV_IRQHandler+0x2b2>
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	0a9b      	lsrs	r3, r3, #10
 800d716:	f003 0301 	and.w	r3, r3, #1
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d009      	beq.n	800d732 <HAL_I2C_EV_IRQHandler+0x2b2>
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	089b      	lsrs	r3, r3, #2
 800d722:	f003 0301 	and.w	r3, r3, #1
 800d726:	2b00      	cmp	r3, #0
 800d728:	d103      	bne.n	800d732 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f000 ff08 	bl	800e540 <I2C_SlaveReceive_RXNE>
 800d730:	e014      	b.n	800d75c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	089b      	lsrs	r3, r3, #2
 800d736:	f003 0301 	and.w	r3, r3, #1
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00e      	beq.n	800d75c <HAL_I2C_EV_IRQHandler+0x2dc>
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	0a5b      	lsrs	r3, r3, #9
 800d742:	f003 0301 	and.w	r3, r3, #1
 800d746:	2b00      	cmp	r3, #0
 800d748:	d008      	beq.n	800d75c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 ff36 	bl	800e5bc <I2C_SlaveReceive_BTF>
 800d750:	e004      	b.n	800d75c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800d752:	bf00      	nop
 800d754:	e002      	b.n	800d75c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d756:	bf00      	nop
 800d758:	e000      	b.n	800d75c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d75a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800d75c:	3720      	adds	r7, #32
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b08a      	sub	sp, #40	; 0x28
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	695b      	ldr	r3, [r3, #20]
 800d770:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800d77a:	2300      	movs	r3, #0
 800d77c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d784:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d786:	6a3b      	ldr	r3, [r7, #32]
 800d788:	0a1b      	lsrs	r3, r3, #8
 800d78a:	f003 0301 	and.w	r3, r3, #1
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d00e      	beq.n	800d7b0 <HAL_I2C_ER_IRQHandler+0x4e>
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	0a1b      	lsrs	r3, r3, #8
 800d796:	f003 0301 	and.w	r3, r3, #1
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d008      	beq.n	800d7b0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800d79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a0:	f043 0301 	orr.w	r3, r3, #1
 800d7a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d7ae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d7b0:	6a3b      	ldr	r3, [r7, #32]
 800d7b2:	0a5b      	lsrs	r3, r3, #9
 800d7b4:	f003 0301 	and.w	r3, r3, #1
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00e      	beq.n	800d7da <HAL_I2C_ER_IRQHandler+0x78>
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	0a1b      	lsrs	r3, r3, #8
 800d7c0:	f003 0301 	and.w	r3, r3, #1
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d008      	beq.n	800d7da <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	f043 0302 	orr.w	r3, r3, #2
 800d7ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800d7d8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d7da:	6a3b      	ldr	r3, [r7, #32]
 800d7dc:	0a9b      	lsrs	r3, r3, #10
 800d7de:	f003 0301 	and.w	r3, r3, #1
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d03f      	beq.n	800d866 <HAL_I2C_ER_IRQHandler+0x104>
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	0a1b      	lsrs	r3, r3, #8
 800d7ea:	f003 0301 	and.w	r3, r3, #1
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d039      	beq.n	800d866 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800d7f2:	7efb      	ldrb	r3, [r7, #27]
 800d7f4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d804:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d80a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800d80c:	7ebb      	ldrb	r3, [r7, #26]
 800d80e:	2b20      	cmp	r3, #32
 800d810:	d112      	bne.n	800d838 <HAL_I2C_ER_IRQHandler+0xd6>
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10f      	bne.n	800d838 <HAL_I2C_ER_IRQHandler+0xd6>
 800d818:	7cfb      	ldrb	r3, [r7, #19]
 800d81a:	2b21      	cmp	r3, #33	; 0x21
 800d81c:	d008      	beq.n	800d830 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800d81e:	7cfb      	ldrb	r3, [r7, #19]
 800d820:	2b29      	cmp	r3, #41	; 0x29
 800d822:	d005      	beq.n	800d830 <HAL_I2C_ER_IRQHandler+0xce>
 800d824:	7cfb      	ldrb	r3, [r7, #19]
 800d826:	2b28      	cmp	r3, #40	; 0x28
 800d828:	d106      	bne.n	800d838 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2b21      	cmp	r3, #33	; 0x21
 800d82e:	d103      	bne.n	800d838 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f001 f85f 	bl	800e8f4 <I2C_Slave_AF>
 800d836:	e016      	b.n	800d866 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d840:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800d842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d844:	f043 0304 	orr.w	r3, r3, #4
 800d848:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d84a:	7efb      	ldrb	r3, [r7, #27]
 800d84c:	2b10      	cmp	r3, #16
 800d84e:	d002      	beq.n	800d856 <HAL_I2C_ER_IRQHandler+0xf4>
 800d850:	7efb      	ldrb	r3, [r7, #27]
 800d852:	2b40      	cmp	r3, #64	; 0x40
 800d854:	d107      	bne.n	800d866 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d864:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d866:	6a3b      	ldr	r3, [r7, #32]
 800d868:	0adb      	lsrs	r3, r3, #11
 800d86a:	f003 0301 	and.w	r3, r3, #1
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d00e      	beq.n	800d890 <HAL_I2C_ER_IRQHandler+0x12e>
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	0a1b      	lsrs	r3, r3, #8
 800d876:	f003 0301 	and.w	r3, r3, #1
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d008      	beq.n	800d890 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	f043 0308 	orr.w	r3, r3, #8
 800d884:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800d88e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800d890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d892:	2b00      	cmp	r3, #0
 800d894:	d008      	beq.n	800d8a8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89c:	431a      	orrs	r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f001 f896 	bl	800e9d4 <I2C_ITError>
  }
}
 800d8a8:	bf00      	nop
 800d8aa:	3728      	adds	r7, #40	; 0x28
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d8b8:	bf00      	nop
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b083      	sub	sp, #12
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800d8cc:	bf00      	nop
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d8e0:	bf00      	nop
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d8f4:	bf00      	nop
 800d8f6:	370c      	adds	r7, #12
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	460b      	mov	r3, r1
 800d90a:	70fb      	strb	r3, [r7, #3]
 800d90c:	4613      	mov	r3, r2
 800d90e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d910:	bf00      	nop
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800d924:	bf00      	nop
 800d926:	370c      	adds	r7, #12
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d938:	bf00      	nop
 800d93a:	370c      	adds	r7, #12
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d94c:	bf00      	nop
 800d94e:	370c      	adds	r7, #12
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d974:	bf00      	nop
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d98e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d996:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d150      	bne.n	800da48 <I2C_MasterTransmit_TXE+0xc8>
 800d9a6:	7bfb      	ldrb	r3, [r7, #15]
 800d9a8:	2b21      	cmp	r3, #33	; 0x21
 800d9aa:	d14d      	bne.n	800da48 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	2b08      	cmp	r3, #8
 800d9b0:	d01d      	beq.n	800d9ee <I2C_MasterTransmit_TXE+0x6e>
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	2b20      	cmp	r3, #32
 800d9b6:	d01a      	beq.n	800d9ee <I2C_MasterTransmit_TXE+0x6e>
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d9be:	d016      	beq.n	800d9ee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	685a      	ldr	r2, [r3, #4]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d9ce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2211      	movs	r2, #17
 800d9d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2220      	movs	r2, #32
 800d9e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f7ff ff62 	bl	800d8b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d9ec:	e060      	b.n	800dab0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	685a      	ldr	r2, [r3, #4]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d9fc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da0c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2220      	movs	r2, #32
 800da18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da22:	b2db      	uxtb	r3, r3
 800da24:	2b40      	cmp	r3, #64	; 0x40
 800da26:	d107      	bne.n	800da38 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f7ff ff7d 	bl	800d930 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800da36:	e03b      	b.n	800dab0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f7ff ff35 	bl	800d8b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800da46:	e033      	b.n	800dab0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800da48:	7bfb      	ldrb	r3, [r7, #15]
 800da4a:	2b21      	cmp	r3, #33	; 0x21
 800da4c:	d005      	beq.n	800da5a <I2C_MasterTransmit_TXE+0xda>
 800da4e:	7bbb      	ldrb	r3, [r7, #14]
 800da50:	2b40      	cmp	r3, #64	; 0x40
 800da52:	d12d      	bne.n	800dab0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800da54:	7bfb      	ldrb	r3, [r7, #15]
 800da56:	2b22      	cmp	r3, #34	; 0x22
 800da58:	d12a      	bne.n	800dab0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da5e:	b29b      	uxth	r3, r3
 800da60:	2b00      	cmp	r3, #0
 800da62:	d108      	bne.n	800da76 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	685a      	ldr	r2, [r3, #4]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da72:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800da74:	e01c      	b.n	800dab0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	2b40      	cmp	r3, #64	; 0x40
 800da80:	d103      	bne.n	800da8a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f88e 	bl	800dba4 <I2C_MemoryTransmit_TXE_BTF>
}
 800da88:	e012      	b.n	800dab0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8e:	781a      	ldrb	r2, [r3, #0]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9a:	1c5a      	adds	r2, r3, #1
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	3b01      	subs	r3, #1
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800daae:	e7ff      	b.n	800dab0 <I2C_MasterTransmit_TXE+0x130>
 800dab0:	bf00      	nop
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	2b21      	cmp	r3, #33	; 0x21
 800dad0:	d164      	bne.n	800db9c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d012      	beq.n	800db02 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae0:	781a      	ldrb	r2, [r3, #0]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daec:	1c5a      	adds	r2, r3, #1
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	3b01      	subs	r3, #1
 800dafa:	b29a      	uxth	r2, r3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800db00:	e04c      	b.n	800db9c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2b08      	cmp	r3, #8
 800db06:	d01d      	beq.n	800db44 <I2C_MasterTransmit_BTF+0x8c>
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2b20      	cmp	r3, #32
 800db0c:	d01a      	beq.n	800db44 <I2C_MasterTransmit_BTF+0x8c>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800db14:	d016      	beq.n	800db44 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800db24:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2211      	movs	r2, #17
 800db2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2220      	movs	r2, #32
 800db38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f7ff feb7 	bl	800d8b0 <HAL_I2C_MasterTxCpltCallback>
}
 800db42:	e02b      	b.n	800db9c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	685a      	ldr	r2, [r3, #4]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800db52:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db62:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2220      	movs	r2, #32
 800db6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b40      	cmp	r3, #64	; 0x40
 800db7c:	d107      	bne.n	800db8e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7ff fed2 	bl	800d930 <HAL_I2C_MemTxCpltCallback>
}
 800db8c:	e006      	b.n	800db9c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7ff fe8a 	bl	800d8b0 <HAL_I2C_MasterTxCpltCallback>
}
 800db9c:	bf00      	nop
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d11d      	bne.n	800dbf8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d10b      	bne.n	800dbdc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbc8:	b2da      	uxtb	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbd4:	1c9a      	adds	r2, r3, #2
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800dbda:	e073      	b.n	800dcc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	121b      	asrs	r3, r3, #8
 800dbe4:	b2da      	uxtb	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbf0:	1c5a      	adds	r2, r3, #1
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	651a      	str	r2, [r3, #80]	; 0x50
}
 800dbf6:	e065      	b.n	800dcc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d10b      	bne.n	800dc18 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc04:	b2da      	uxtb	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc10:	1c5a      	adds	r2, r3, #1
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	651a      	str	r2, [r3, #80]	; 0x50
}
 800dc16:	e055      	b.n	800dcc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d151      	bne.n	800dcc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800dc20:	7bfb      	ldrb	r3, [r7, #15]
 800dc22:	2b22      	cmp	r3, #34	; 0x22
 800dc24:	d10d      	bne.n	800dc42 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc34:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc3a:	1c5a      	adds	r2, r3, #1
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800dc40:	e040      	b.n	800dcc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d015      	beq.n	800dc78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
 800dc4e:	2b21      	cmp	r3, #33	; 0x21
 800dc50:	d112      	bne.n	800dc78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc56:	781a      	ldrb	r2, [r3, #0]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc62:	1c5a      	adds	r2, r3, #1
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	3b01      	subs	r3, #1
 800dc70:	b29a      	uxth	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800dc76:	e025      	b.n	800dcc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d120      	bne.n	800dcc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800dc82:	7bfb      	ldrb	r3, [r7, #15]
 800dc84:	2b21      	cmp	r3, #33	; 0x21
 800dc86:	d11d      	bne.n	800dcc4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	685a      	ldr	r2, [r3, #4]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800dc96:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dca6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2220      	movs	r2, #32
 800dcb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7ff fe36 	bl	800d930 <HAL_I2C_MemTxCpltCallback>
}
 800dcc4:	bf00      	nop
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b22      	cmp	r3, #34	; 0x22
 800dcde:	f040 80a2 	bne.w	800de26 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	d921      	bls.n	800dd34 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	691a      	ldr	r2, [r3, #16]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcfa:	b2d2      	uxtb	r2, r2
 800dcfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd02:	1c5a      	adds	r2, r3, #1
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	2b03      	cmp	r3, #3
 800dd1e:	f040 8082 	bne.w	800de26 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	685a      	ldr	r2, [r3, #4]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd30:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800dd32:	e078      	b.n	800de26 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd38:	2b02      	cmp	r3, #2
 800dd3a:	d074      	beq.n	800de26 <I2C_MasterReceive_RXNE+0x15a>
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d002      	beq.n	800dd48 <I2C_MasterReceive_RXNE+0x7c>
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d16e      	bne.n	800de26 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f001 fc43 	bl	800f5d4 <I2C_WaitOnSTOPRequestThroughIT>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d142      	bne.n	800ddda <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd62:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	685a      	ldr	r2, [r3, #4]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800dd72:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	691a      	ldr	r2, [r3, #16]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd7e:	b2d2      	uxtb	r2, r2
 800dd80:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd86:	1c5a      	adds	r2, r3, #1
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	3b01      	subs	r3, #1
 800dd94:	b29a      	uxth	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2220      	movs	r2, #32
 800dd9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	2b40      	cmp	r3, #64	; 0x40
 800ddac:	d10a      	bne.n	800ddc4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff fdc1 	bl	800d944 <HAL_I2C_MemRxCpltCallback>
}
 800ddc2:	e030      	b.n	800de26 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2212      	movs	r2, #18
 800ddd0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7ff fd76 	bl	800d8c4 <HAL_I2C_MasterRxCpltCallback>
}
 800ddd8:	e025      	b.n	800de26 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	685a      	ldr	r2, [r3, #4]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800dde8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	691a      	ldr	r2, [r3, #16]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf4:	b2d2      	uxtb	r2, r2
 800ddf6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddfc:	1c5a      	adds	r2, r3, #1
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de06:	b29b      	uxth	r3, r3
 800de08:	3b01      	subs	r3, #1
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2220      	movs	r2, #32
 800de14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f7ff fd99 	bl	800d958 <HAL_I2C_ErrorCallback>
}
 800de26:	bf00      	nop
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800de2e:	b580      	push	{r7, lr}
 800de30:	b084      	sub	sp, #16
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de3a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de40:	b29b      	uxth	r3, r3
 800de42:	2b04      	cmp	r3, #4
 800de44:	d11b      	bne.n	800de7e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de54:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	691a      	ldr	r2, [r3, #16]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de60:	b2d2      	uxtb	r2, r2
 800de62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de68:	1c5a      	adds	r2, r3, #1
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de72:	b29b      	uxth	r3, r3
 800de74:	3b01      	subs	r3, #1
 800de76:	b29a      	uxth	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800de7c:	e0bd      	b.n	800dffa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de82:	b29b      	uxth	r3, r3
 800de84:	2b03      	cmp	r3, #3
 800de86:	d129      	bne.n	800dedc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	685a      	ldr	r2, [r3, #4]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de96:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2b04      	cmp	r3, #4
 800de9c:	d00a      	beq.n	800deb4 <I2C_MasterReceive_BTF+0x86>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2b02      	cmp	r3, #2
 800dea2:	d007      	beq.n	800deb4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800deb2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	691a      	ldr	r2, [r3, #16]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800debe:	b2d2      	uxtb	r2, r2
 800dec0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec6:	1c5a      	adds	r2, r3, #1
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	3b01      	subs	r3, #1
 800ded4:	b29a      	uxth	r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800deda:	e08e      	b.n	800dffa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	2b02      	cmp	r3, #2
 800dee4:	d176      	bne.n	800dfd4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d002      	beq.n	800def2 <I2C_MasterReceive_BTF+0xc4>
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2b10      	cmp	r3, #16
 800def0:	d108      	bne.n	800df04 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df00:	601a      	str	r2, [r3, #0]
 800df02:	e019      	b.n	800df38 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2b04      	cmp	r3, #4
 800df08:	d002      	beq.n	800df10 <I2C_MasterReceive_BTF+0xe2>
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d108      	bne.n	800df22 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800df1e:	601a      	str	r2, [r3, #0]
 800df20:	e00a      	b.n	800df38 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2b10      	cmp	r3, #16
 800df26:	d007      	beq.n	800df38 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	691a      	ldr	r2, [r3, #16]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df42:	b2d2      	uxtb	r2, r2
 800df44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df54:	b29b      	uxth	r3, r3
 800df56:	3b01      	subs	r3, #1
 800df58:	b29a      	uxth	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	691a      	ldr	r2, [r3, #16]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df68:	b2d2      	uxtb	r2, r2
 800df6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df70:	1c5a      	adds	r2, r3, #1
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	3b01      	subs	r3, #1
 800df7e:	b29a      	uxth	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	685a      	ldr	r2, [r3, #4]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800df92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2220      	movs	r2, #32
 800df98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	2b40      	cmp	r3, #64	; 0x40
 800dfa6:	d10a      	bne.n	800dfbe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f7ff fcc4 	bl	800d944 <HAL_I2C_MemRxCpltCallback>
}
 800dfbc:	e01d      	b.n	800dffa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2212      	movs	r2, #18
 800dfca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7ff fc79 	bl	800d8c4 <HAL_I2C_MasterRxCpltCallback>
}
 800dfd2:	e012      	b.n	800dffa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	691a      	ldr	r2, [r3, #16]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfde:	b2d2      	uxtb	r2, r2
 800dfe0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe6:	1c5a      	adds	r2, r3, #1
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	3b01      	subs	r3, #1
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800dffa:	bf00      	nop
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800e002:	b480      	push	{r7}
 800e004:	b083      	sub	sp, #12
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b40      	cmp	r3, #64	; 0x40
 800e014:	d117      	bne.n	800e046 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d109      	bne.n	800e032 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e022:	b2db      	uxtb	r3, r3
 800e024:	461a      	mov	r2, r3
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e02e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800e030:	e067      	b.n	800e102 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e036:	b2db      	uxtb	r3, r3
 800e038:	f043 0301 	orr.w	r3, r3, #1
 800e03c:	b2da      	uxtb	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	611a      	str	r2, [r3, #16]
}
 800e044:	e05d      	b.n	800e102 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e04e:	d133      	bne.n	800e0b8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e056:	b2db      	uxtb	r3, r3
 800e058:	2b21      	cmp	r3, #33	; 0x21
 800e05a:	d109      	bne.n	800e070 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e060:	b2db      	uxtb	r3, r3
 800e062:	461a      	mov	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e06c:	611a      	str	r2, [r3, #16]
 800e06e:	e008      	b.n	800e082 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e074:	b2db      	uxtb	r3, r3
 800e076:	f043 0301 	orr.w	r3, r3, #1
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e086:	2b00      	cmp	r3, #0
 800e088:	d004      	beq.n	800e094 <I2C_Master_SB+0x92>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e08e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e090:	2b00      	cmp	r3, #0
 800e092:	d108      	bne.n	800e0a6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d032      	beq.n	800e102 <I2C_Master_SB+0x100>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d02d      	beq.n	800e102 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	685a      	ldr	r2, [r3, #4]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0b4:	605a      	str	r2, [r3, #4]
}
 800e0b6:	e024      	b.n	800e102 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d10e      	bne.n	800e0de <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	11db      	asrs	r3, r3, #7
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	f003 0306 	and.w	r3, r3, #6
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	f063 030f 	orn	r3, r3, #15
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	611a      	str	r2, [r3, #16]
}
 800e0dc:	e011      	b.n	800e102 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d10d      	bne.n	800e102 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	11db      	asrs	r3, r3, #7
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	f003 0306 	and.w	r3, r3, #6
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	f063 030e 	orn	r3, r3, #14
 800e0fa:	b2da      	uxtb	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	611a      	str	r2, [r3, #16]
}
 800e102:	bf00      	nop
 800e104:	370c      	adds	r7, #12
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr

0800e10e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800e10e:	b480      	push	{r7}
 800e110:	b083      	sub	sp, #12
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e11a:	b2da      	uxtb	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e126:	2b00      	cmp	r3, #0
 800e128:	d004      	beq.n	800e134 <I2C_Master_ADD10+0x26>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e12e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e130:	2b00      	cmp	r3, #0
 800e132:	d108      	bne.n	800e146 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00c      	beq.n	800e156 <I2C_Master_ADD10+0x48>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e142:	2b00      	cmp	r3, #0
 800e144:	d007      	beq.n	800e156 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	685a      	ldr	r2, [r3, #4]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e154:	605a      	str	r2, [r3, #4]
  }
}
 800e156:	bf00      	nop
 800e158:	370c      	adds	r7, #12
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr

0800e162 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800e162:	b480      	push	{r7}
 800e164:	b091      	sub	sp, #68	; 0x44
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e170:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e178:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e17e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e186:	b2db      	uxtb	r3, r3
 800e188:	2b22      	cmp	r3, #34	; 0x22
 800e18a:	f040 8169 	bne.w	800e460 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e192:	2b00      	cmp	r3, #0
 800e194:	d10f      	bne.n	800e1b6 <I2C_Master_ADDR+0x54>
 800e196:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e19a:	2b40      	cmp	r3, #64	; 0x40
 800e19c:	d10b      	bne.n	800e1b6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e19e:	2300      	movs	r3, #0
 800e1a0:	633b      	str	r3, [r7, #48]	; 0x30
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	695b      	ldr	r3, [r3, #20]
 800e1a8:	633b      	str	r3, [r7, #48]	; 0x30
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	699b      	ldr	r3, [r3, #24]
 800e1b0:	633b      	str	r3, [r7, #48]	; 0x30
 800e1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b4:	e160      	b.n	800e478 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d11d      	bne.n	800e1fa <I2C_Master_ADDR+0x98>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	691b      	ldr	r3, [r3, #16]
 800e1c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e1c6:	d118      	bne.n	800e1fa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	695b      	ldr	r3, [r3, #20]
 800e1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	699b      	ldr	r3, [r3, #24]
 800e1da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1ec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1f2:	1c5a      	adds	r2, r3, #1
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	651a      	str	r2, [r3, #80]	; 0x50
 800e1f8:	e13e      	b.n	800e478 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	2b00      	cmp	r3, #0
 800e202:	d113      	bne.n	800e22c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e204:	2300      	movs	r3, #0
 800e206:	62bb      	str	r3, [r7, #40]	; 0x28
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	695b      	ldr	r3, [r3, #20]
 800e20e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	699b      	ldr	r3, [r3, #24]
 800e216:	62bb      	str	r3, [r7, #40]	; 0x28
 800e218:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e228:	601a      	str	r2, [r3, #0]
 800e22a:	e115      	b.n	800e458 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e230:	b29b      	uxth	r3, r3
 800e232:	2b01      	cmp	r3, #1
 800e234:	f040 808a 	bne.w	800e34c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800e238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e23e:	d137      	bne.n	800e2b0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e24e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e25a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e25e:	d113      	bne.n	800e288 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e26e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e270:	2300      	movs	r3, #0
 800e272:	627b      	str	r3, [r7, #36]	; 0x24
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	695b      	ldr	r3, [r3, #20]
 800e27a:	627b      	str	r3, [r7, #36]	; 0x24
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	699b      	ldr	r3, [r3, #24]
 800e282:	627b      	str	r3, [r7, #36]	; 0x24
 800e284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e286:	e0e7      	b.n	800e458 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e288:	2300      	movs	r3, #0
 800e28a:	623b      	str	r3, [r7, #32]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	695b      	ldr	r3, [r3, #20]
 800e292:	623b      	str	r3, [r7, #32]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	699b      	ldr	r3, [r3, #24]
 800e29a:	623b      	str	r3, [r7, #32]
 800e29c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2ac:	601a      	str	r2, [r3, #0]
 800e2ae:	e0d3      	b.n	800e458 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800e2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b2:	2b08      	cmp	r3, #8
 800e2b4:	d02e      	beq.n	800e314 <I2C_Master_ADDR+0x1b2>
 800e2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b8:	2b20      	cmp	r3, #32
 800e2ba:	d02b      	beq.n	800e314 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800e2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2be:	2b12      	cmp	r3, #18
 800e2c0:	d102      	bne.n	800e2c8 <I2C_Master_ADDR+0x166>
 800e2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d125      	bne.n	800e314 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ca:	2b04      	cmp	r3, #4
 800e2cc:	d00e      	beq.n	800e2ec <I2C_Master_ADDR+0x18a>
 800e2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d00b      	beq.n	800e2ec <I2C_Master_ADDR+0x18a>
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d6:	2b10      	cmp	r3, #16
 800e2d8:	d008      	beq.n	800e2ec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2e8:	601a      	str	r2, [r3, #0]
 800e2ea:	e007      	b.n	800e2fc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2fa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	61fb      	str	r3, [r7, #28]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	695b      	ldr	r3, [r3, #20]
 800e306:	61fb      	str	r3, [r7, #28]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	699b      	ldr	r3, [r3, #24]
 800e30e:	61fb      	str	r3, [r7, #28]
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	e0a1      	b.n	800e458 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e322:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e324:	2300      	movs	r3, #0
 800e326:	61bb      	str	r3, [r7, #24]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	695b      	ldr	r3, [r3, #20]
 800e32e:	61bb      	str	r3, [r7, #24]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	699b      	ldr	r3, [r3, #24]
 800e336:	61bb      	str	r3, [r7, #24]
 800e338:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	e085      	b.n	800e458 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e350:	b29b      	uxth	r3, r3
 800e352:	2b02      	cmp	r3, #2
 800e354:	d14d      	bne.n	800e3f2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e358:	2b04      	cmp	r3, #4
 800e35a:	d016      	beq.n	800e38a <I2C_Master_ADDR+0x228>
 800e35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35e:	2b02      	cmp	r3, #2
 800e360:	d013      	beq.n	800e38a <I2C_Master_ADDR+0x228>
 800e362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e364:	2b10      	cmp	r3, #16
 800e366:	d010      	beq.n	800e38a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e376:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e386:	601a      	str	r2, [r3, #0]
 800e388:	e007      	b.n	800e39a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e398:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3a8:	d117      	bne.n	800e3da <I2C_Master_ADDR+0x278>
 800e3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e3b0:	d00b      	beq.n	800e3ca <I2C_Master_ADDR+0x268>
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d008      	beq.n	800e3ca <I2C_Master_ADDR+0x268>
 800e3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ba:	2b08      	cmp	r3, #8
 800e3bc:	d005      	beq.n	800e3ca <I2C_Master_ADDR+0x268>
 800e3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c0:	2b10      	cmp	r3, #16
 800e3c2:	d002      	beq.n	800e3ca <I2C_Master_ADDR+0x268>
 800e3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c6:	2b20      	cmp	r3, #32
 800e3c8:	d107      	bne.n	800e3da <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	685a      	ldr	r2, [r3, #4]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e3d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e3da:	2300      	movs	r3, #0
 800e3dc:	617b      	str	r3, [r7, #20]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	695b      	ldr	r3, [r3, #20]
 800e3e4:	617b      	str	r3, [r7, #20]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	699b      	ldr	r3, [r3, #24]
 800e3ec:	617b      	str	r3, [r7, #20]
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	e032      	b.n	800e458 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e400:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e40c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e410:	d117      	bne.n	800e442 <I2C_Master_ADDR+0x2e0>
 800e412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e418:	d00b      	beq.n	800e432 <I2C_Master_ADDR+0x2d0>
 800e41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d008      	beq.n	800e432 <I2C_Master_ADDR+0x2d0>
 800e420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e422:	2b08      	cmp	r3, #8
 800e424:	d005      	beq.n	800e432 <I2C_Master_ADDR+0x2d0>
 800e426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e428:	2b10      	cmp	r3, #16
 800e42a:	d002      	beq.n	800e432 <I2C_Master_ADDR+0x2d0>
 800e42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42e:	2b20      	cmp	r3, #32
 800e430:	d107      	bne.n	800e442 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	685a      	ldr	r2, [r3, #4]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e440:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e442:	2300      	movs	r3, #0
 800e444:	613b      	str	r3, [r7, #16]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	695b      	ldr	r3, [r3, #20]
 800e44c:	613b      	str	r3, [r7, #16]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	699b      	ldr	r3, [r3, #24]
 800e454:	613b      	str	r3, [r7, #16]
 800e456:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2200      	movs	r2, #0
 800e45c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800e45e:	e00b      	b.n	800e478 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e460:	2300      	movs	r3, #0
 800e462:	60fb      	str	r3, [r7, #12]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	695b      	ldr	r3, [r3, #20]
 800e46a:	60fb      	str	r3, [r7, #12]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	699b      	ldr	r3, [r3, #24]
 800e472:	60fb      	str	r3, [r7, #12]
 800e474:	68fb      	ldr	r3, [r7, #12]
}
 800e476:	e7ff      	b.n	800e478 <I2C_Master_ADDR+0x316>
 800e478:	bf00      	nop
 800e47a:	3744      	adds	r7, #68	; 0x44
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr

0800e484 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e492:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e498:	b29b      	uxth	r3, r3
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d02b      	beq.n	800e4f6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a2:	781a      	ldrb	r2, [r3, #0]
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ae:	1c5a      	adds	r2, r3, #1
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4b8:	b29b      	uxth	r3, r3
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d114      	bne.n	800e4f6 <I2C_SlaveTransmit_TXE+0x72>
 800e4cc:	7bfb      	ldrb	r3, [r7, #15]
 800e4ce:	2b29      	cmp	r3, #41	; 0x29
 800e4d0:	d111      	bne.n	800e4f6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	685a      	ldr	r2, [r3, #4]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e4e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2221      	movs	r2, #33	; 0x21
 800e4e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2228      	movs	r2, #40	; 0x28
 800e4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f7ff f9f1 	bl	800d8d8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e4f6:	bf00      	nop
 800e4f8:	3710      	adds	r7, #16
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}

0800e4fe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800e4fe:	b480      	push	{r7}
 800e500:	b083      	sub	sp, #12
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d011      	beq.n	800e534 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e514:	781a      	ldrb	r2, [r3, #0]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e520:	1c5a      	adds	r2, r3, #1
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	3b01      	subs	r3, #1
 800e52e:	b29a      	uxth	r2, r3
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800e534:	bf00      	nop
 800e536:	370c      	adds	r7, #12
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr

0800e540 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e54e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e554:	b29b      	uxth	r3, r3
 800e556:	2b00      	cmp	r3, #0
 800e558:	d02c      	beq.n	800e5b4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	691a      	ldr	r2, [r3, #16]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e564:	b2d2      	uxtb	r2, r2
 800e566:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56c:	1c5a      	adds	r2, r3, #1
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e576:	b29b      	uxth	r3, r3
 800e578:	3b01      	subs	r3, #1
 800e57a:	b29a      	uxth	r2, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e584:	b29b      	uxth	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	d114      	bne.n	800e5b4 <I2C_SlaveReceive_RXNE+0x74>
 800e58a:	7bfb      	ldrb	r3, [r7, #15]
 800e58c:	2b2a      	cmp	r3, #42	; 0x2a
 800e58e:	d111      	bne.n	800e5b4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	685a      	ldr	r2, [r3, #4]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e59e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2222      	movs	r2, #34	; 0x22
 800e5a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2228      	movs	r2, #40	; 0x28
 800e5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f7ff f99c 	bl	800d8ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e5b4:	bf00      	nop
 800e5b6:	3710      	adds	r7, #16
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d012      	beq.n	800e5f4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	691a      	ldr	r2, [r3, #16]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d8:	b2d2      	uxtb	r2, r2
 800e5da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e0:	1c5a      	adds	r2, r3, #1
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	b29a      	uxth	r2, r3
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800e5f4:	bf00      	nop
 800e5f6:	370c      	adds	r7, #12
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800e60a:	2300      	movs	r3, #0
 800e60c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e614:	b2db      	uxtb	r3, r3
 800e616:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e61a:	2b28      	cmp	r3, #40	; 0x28
 800e61c:	d127      	bne.n	800e66e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	685a      	ldr	r2, [r3, #4]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e62c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	089b      	lsrs	r3, r3, #2
 800e632:	f003 0301 	and.w	r3, r3, #1
 800e636:	2b00      	cmp	r3, #0
 800e638:	d101      	bne.n	800e63e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800e63a:	2301      	movs	r3, #1
 800e63c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	09db      	lsrs	r3, r3, #7
 800e642:	f003 0301 	and.w	r3, r3, #1
 800e646:	2b00      	cmp	r3, #0
 800e648:	d103      	bne.n	800e652 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	68db      	ldr	r3, [r3, #12]
 800e64e:	81bb      	strh	r3, [r7, #12]
 800e650:	e002      	b.n	800e658 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	699b      	ldr	r3, [r3, #24]
 800e656:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800e660:	89ba      	ldrh	r2, [r7, #12]
 800e662:	7bfb      	ldrb	r3, [r7, #15]
 800e664:	4619      	mov	r1, r3
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f7ff f94a 	bl	800d900 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e66c:	e00e      	b.n	800e68c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e66e:	2300      	movs	r3, #0
 800e670:	60bb      	str	r3, [r7, #8]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	695b      	ldr	r3, [r3, #20]
 800e678:	60bb      	str	r3, [r7, #8]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	699b      	ldr	r3, [r3, #24]
 800e680:	60bb      	str	r3, [r7, #8]
 800e682:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800e68c:	bf00      	nop
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	685a      	ldr	r2, [r3, #4]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e6b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	60bb      	str	r3, [r7, #8]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	695b      	ldr	r3, [r3, #20]
 800e6be:	60bb      	str	r3, [r7, #8]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f042 0201 	orr.w	r2, r2, #1
 800e6ce:	601a      	str	r2, [r3, #0]
 800e6d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e6ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e6f0:	d172      	bne.n	800e7d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e6f2:	7bfb      	ldrb	r3, [r7, #15]
 800e6f4:	2b22      	cmp	r3, #34	; 0x22
 800e6f6:	d002      	beq.n	800e6fe <I2C_Slave_STOPF+0x6a>
 800e6f8:	7bfb      	ldrb	r3, [r7, #15]
 800e6fa:	2b2a      	cmp	r3, #42	; 0x2a
 800e6fc:	d135      	bne.n	800e76a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	685b      	ldr	r3, [r3, #4]
 800e706:	b29a      	uxth	r2, r3
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e710:	b29b      	uxth	r3, r3
 800e712:	2b00      	cmp	r3, #0
 800e714:	d005      	beq.n	800e722 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e71a:	f043 0204 	orr.w	r2, r3, #4
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	685a      	ldr	r2, [r3, #4]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e730:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e736:	4618      	mov	r0, r3
 800e738:	f7fd fc44 	bl	800bfc4 <HAL_DMA_GetState>
 800e73c:	4603      	mov	r3, r0
 800e73e:	2b01      	cmp	r3, #1
 800e740:	d049      	beq.n	800e7d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e746:	4a69      	ldr	r2, [pc, #420]	; (800e8ec <I2C_Slave_STOPF+0x258>)
 800e748:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fd fa8c 	bl	800bc6c <HAL_DMA_Abort_IT>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	d03d      	beq.n	800e7d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e75e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e764:	4610      	mov	r0, r2
 800e766:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e768:	e035      	b.n	800e7d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	b29a      	uxth	r2, r3
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d005      	beq.n	800e78e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e786:	f043 0204 	orr.w	r2, r3, #4
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	685a      	ldr	r2, [r3, #4]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e79c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7fd fc0e 	bl	800bfc4 <HAL_DMA_GetState>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d014      	beq.n	800e7d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7b2:	4a4e      	ldr	r2, [pc, #312]	; (800e8ec <I2C_Slave_STOPF+0x258>)
 800e7b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fd fa56 	bl	800bc6c <HAL_DMA_Abort_IT>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d008      	beq.n	800e7d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	4798      	blx	r3
 800e7d4:	e000      	b.n	800e7d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e7d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d03e      	beq.n	800e860 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	695b      	ldr	r3, [r3, #20]
 800e7e8:	f003 0304 	and.w	r3, r3, #4
 800e7ec:	2b04      	cmp	r3, #4
 800e7ee:	d112      	bne.n	800e816 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	691a      	ldr	r2, [r3, #16]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7fa:	b2d2      	uxtb	r2, r2
 800e7fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e802:	1c5a      	adds	r2, r3, #1
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	3b01      	subs	r3, #1
 800e810:	b29a      	uxth	r2, r3
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	695b      	ldr	r3, [r3, #20]
 800e81c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e820:	2b40      	cmp	r3, #64	; 0x40
 800e822:	d112      	bne.n	800e84a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	691a      	ldr	r2, [r3, #16]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82e:	b2d2      	uxtb	r2, r2
 800e830:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e836:	1c5a      	adds	r2, r3, #1
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e840:	b29b      	uxth	r3, r3
 800e842:	3b01      	subs	r3, #1
 800e844:	b29a      	uxth	r2, r3
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e84e:	b29b      	uxth	r3, r3
 800e850:	2b00      	cmp	r3, #0
 800e852:	d005      	beq.n	800e860 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e858:	f043 0204 	orr.w	r2, r3, #4
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e864:	2b00      	cmp	r3, #0
 800e866:	d003      	beq.n	800e870 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 f8b3 	bl	800e9d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800e86e:	e039      	b.n	800e8e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e870:	7bfb      	ldrb	r3, [r7, #15]
 800e872:	2b2a      	cmp	r3, #42	; 0x2a
 800e874:	d109      	bne.n	800e88a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2228      	movs	r2, #40	; 0x28
 800e880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f7ff f831 	bl	800d8ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e890:	b2db      	uxtb	r3, r3
 800e892:	2b28      	cmp	r3, #40	; 0x28
 800e894:	d111      	bne.n	800e8ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	4a15      	ldr	r2, [pc, #84]	; (800e8f0 <I2C_Slave_STOPF+0x25c>)
 800e89a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2220      	movs	r2, #32
 800e8a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7ff f832 	bl	800d91c <HAL_I2C_ListenCpltCallback>
}
 800e8b8:	e014      	b.n	800e8e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8be:	2b22      	cmp	r3, #34	; 0x22
 800e8c0:	d002      	beq.n	800e8c8 <I2C_Slave_STOPF+0x234>
 800e8c2:	7bfb      	ldrb	r3, [r7, #15]
 800e8c4:	2b22      	cmp	r3, #34	; 0x22
 800e8c6:	d10d      	bne.n	800e8e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2220      	movs	r2, #32
 800e8d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f7ff f804 	bl	800d8ec <HAL_I2C_SlaveRxCpltCallback>
}
 800e8e4:	bf00      	nop
 800e8e6:	3710      	adds	r7, #16
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	0800f1d5 	.word	0x0800f1d5
 800e8f0:	ffff0000 	.word	0xffff0000

0800e8f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e902:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e908:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	2b08      	cmp	r3, #8
 800e90e:	d002      	beq.n	800e916 <I2C_Slave_AF+0x22>
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	2b20      	cmp	r3, #32
 800e914:	d129      	bne.n	800e96a <I2C_Slave_AF+0x76>
 800e916:	7bfb      	ldrb	r3, [r7, #15]
 800e918:	2b28      	cmp	r3, #40	; 0x28
 800e91a:	d126      	bne.n	800e96a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	4a2c      	ldr	r2, [pc, #176]	; (800e9d0 <I2C_Slave_AF+0xdc>)
 800e920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	685a      	ldr	r2, [r3, #4]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e930:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e93a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e94a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2220      	movs	r2, #32
 800e956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7fe ffda 	bl	800d91c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800e968:	e02e      	b.n	800e9c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e96a:	7bfb      	ldrb	r3, [r7, #15]
 800e96c:	2b21      	cmp	r3, #33	; 0x21
 800e96e:	d126      	bne.n	800e9be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	4a17      	ldr	r2, [pc, #92]	; (800e9d0 <I2C_Slave_AF+0xdc>)
 800e974:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2221      	movs	r2, #33	; 0x21
 800e97a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2220      	movs	r2, #32
 800e980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2200      	movs	r2, #0
 800e988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	685a      	ldr	r2, [r3, #4]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e99a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e9a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	681a      	ldr	r2, [r3, #0]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e9b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f7fe ff8e 	bl	800d8d8 <HAL_I2C_SlaveTxCpltCallback>
}
 800e9bc:	e004      	b.n	800e9c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e9c6:	615a      	str	r2, [r3, #20]
}
 800e9c8:	bf00      	nop
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	ffff0000 	.word	0xffff0000

0800e9d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e9ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e9ec:	7bbb      	ldrb	r3, [r7, #14]
 800e9ee:	2b10      	cmp	r3, #16
 800e9f0:	d002      	beq.n	800e9f8 <I2C_ITError+0x24>
 800e9f2:	7bbb      	ldrb	r3, [r7, #14]
 800e9f4:	2b40      	cmp	r3, #64	; 0x40
 800e9f6:	d10a      	bne.n	800ea0e <I2C_ITError+0x3a>
 800e9f8:	7bfb      	ldrb	r3, [r7, #15]
 800e9fa:	2b22      	cmp	r3, #34	; 0x22
 800e9fc:	d107      	bne.n	800ea0e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea0c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ea0e:	7bfb      	ldrb	r3, [r7, #15]
 800ea10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ea14:	2b28      	cmp	r3, #40	; 0x28
 800ea16:	d107      	bne.n	800ea28 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2228      	movs	r2, #40	; 0x28
 800ea22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ea26:	e015      	b.n	800ea54 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea36:	d00a      	beq.n	800ea4e <I2C_ITError+0x7a>
 800ea38:	7bfb      	ldrb	r3, [r7, #15]
 800ea3a:	2b60      	cmp	r3, #96	; 0x60
 800ea3c:	d007      	beq.n	800ea4e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2220      	movs	r2, #32
 800ea42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea62:	d162      	bne.n	800eb2a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	685a      	ldr	r2, [r3, #4]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea72:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d020      	beq.n	800eac4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea86:	4a6a      	ldr	r2, [pc, #424]	; (800ec30 <I2C_ITError+0x25c>)
 800ea88:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7fd f8ec 	bl	800bc6c <HAL_DMA_Abort_IT>
 800ea94:	4603      	mov	r3, r0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f000 8089 	beq.w	800ebae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f022 0201 	bic.w	r2, r2, #1
 800eaaa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2220      	movs	r2, #32
 800eab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800eabe:	4610      	mov	r0, r2
 800eac0:	4798      	blx	r3
 800eac2:	e074      	b.n	800ebae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac8:	4a59      	ldr	r2, [pc, #356]	; (800ec30 <I2C_ITError+0x25c>)
 800eaca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7fd f8cb 	bl	800bc6c <HAL_DMA_Abort_IT>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d068      	beq.n	800ebae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	695b      	ldr	r3, [r3, #20]
 800eae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eae6:	2b40      	cmp	r3, #64	; 0x40
 800eae8:	d10b      	bne.n	800eb02 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	691a      	ldr	r2, [r3, #16]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf4:	b2d2      	uxtb	r2, r2
 800eaf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafc:	1c5a      	adds	r2, r3, #1
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f022 0201 	bic.w	r2, r2, #1
 800eb10:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2220      	movs	r2, #32
 800eb16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800eb24:	4610      	mov	r0, r2
 800eb26:	4798      	blx	r3
 800eb28:	e041      	b.n	800ebae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	2b60      	cmp	r3, #96	; 0x60
 800eb34:	d125      	bne.n	800eb82 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2220      	movs	r2, #32
 800eb3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	695b      	ldr	r3, [r3, #20]
 800eb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb4e:	2b40      	cmp	r3, #64	; 0x40
 800eb50:	d10b      	bne.n	800eb6a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	691a      	ldr	r2, [r3, #16]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb5c:	b2d2      	uxtb	r2, r2
 800eb5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb64:	1c5a      	adds	r2, r3, #1
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f022 0201 	bic.w	r2, r2, #1
 800eb78:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f7fe fef6 	bl	800d96c <HAL_I2C_AbortCpltCallback>
 800eb80:	e015      	b.n	800ebae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	695b      	ldr	r3, [r3, #20]
 800eb88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb8c:	2b40      	cmp	r3, #64	; 0x40
 800eb8e:	d10b      	bne.n	800eba8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	691a      	ldr	r2, [r3, #16]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9a:	b2d2      	uxtb	r2, r2
 800eb9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba2:	1c5a      	adds	r2, r3, #1
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f7fe fed5 	bl	800d958 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	f003 0301 	and.w	r3, r3, #1
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10e      	bne.n	800ebdc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d109      	bne.n	800ebdc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d104      	bne.n	800ebdc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d007      	beq.n	800ebec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	685a      	ldr	r2, [r3, #4]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ebea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebf2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebf8:	f003 0304 	and.w	r3, r3, #4
 800ebfc:	2b04      	cmp	r3, #4
 800ebfe:	d113      	bne.n	800ec28 <I2C_ITError+0x254>
 800ec00:	7bfb      	ldrb	r3, [r7, #15]
 800ec02:	2b28      	cmp	r3, #40	; 0x28
 800ec04:	d110      	bne.n	800ec28 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4a0a      	ldr	r2, [pc, #40]	; (800ec34 <I2C_ITError+0x260>)
 800ec0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2220      	movs	r2, #32
 800ec16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7fe fe7a 	bl	800d91c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ec28:	bf00      	nop
 800ec2a:	3710      	adds	r7, #16
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	0800f1d5 	.word	0x0800f1d5
 800ec34:	ffff0000 	.word	0xffff0000

0800ec38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b088      	sub	sp, #32
 800ec3c:	af02      	add	r7, sp, #8
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	607a      	str	r2, [r7, #4]
 800ec42:	603b      	str	r3, [r7, #0]
 800ec44:	460b      	mov	r3, r1
 800ec46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	2b08      	cmp	r3, #8
 800ec52:	d006      	beq.n	800ec62 <I2C_MasterRequestWrite+0x2a>
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d003      	beq.n	800ec62 <I2C_MasterRequestWrite+0x2a>
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ec60:	d108      	bne.n	800ec74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	681a      	ldr	r2, [r3, #0]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ec70:	601a      	str	r2, [r3, #0]
 800ec72:	e00b      	b.n	800ec8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec78:	2b12      	cmp	r3, #18
 800ec7a:	d107      	bne.n	800ec8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ec8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2200      	movs	r2, #0
 800ec94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f000 fb43 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d00d      	beq.n	800ecc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecb2:	d103      	bne.n	800ecbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	e035      	b.n	800ed2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	691b      	ldr	r3, [r3, #16]
 800ecc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecc8:	d108      	bne.n	800ecdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ecca:	897b      	ldrh	r3, [r7, #10]
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	461a      	mov	r2, r3
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ecd8:	611a      	str	r2, [r3, #16]
 800ecda:	e01b      	b.n	800ed14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ecdc:	897b      	ldrh	r3, [r7, #10]
 800ecde:	11db      	asrs	r3, r3, #7
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	f003 0306 	and.w	r3, r3, #6
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	f063 030f 	orn	r3, r3, #15
 800ecec:	b2da      	uxtb	r2, r3
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	490e      	ldr	r1, [pc, #56]	; (800ed34 <I2C_MasterRequestWrite+0xfc>)
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f000 fb69 	bl	800f3d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ed00:	4603      	mov	r3, r0
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d001      	beq.n	800ed0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ed06:	2301      	movs	r3, #1
 800ed08:	e010      	b.n	800ed2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ed0a:	897b      	ldrh	r3, [r7, #10]
 800ed0c:	b2da      	uxtb	r2, r3
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	4907      	ldr	r1, [pc, #28]	; (800ed38 <I2C_MasterRequestWrite+0x100>)
 800ed1a:	68f8      	ldr	r0, [r7, #12]
 800ed1c:	f000 fb59 	bl	800f3d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d001      	beq.n	800ed2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ed26:	2301      	movs	r3, #1
 800ed28:	e000      	b.n	800ed2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ed2a:	2300      	movs	r3, #0
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3718      	adds	r7, #24
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	00010008 	.word	0x00010008
 800ed38:	00010002 	.word	0x00010002

0800ed3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b088      	sub	sp, #32
 800ed40:	af02      	add	r7, sp, #8
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	607a      	str	r2, [r7, #4]
 800ed46:	603b      	str	r3, [r7, #0]
 800ed48:	460b      	mov	r3, r1
 800ed4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	681a      	ldr	r2, [r3, #0]
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	2b08      	cmp	r3, #8
 800ed66:	d006      	beq.n	800ed76 <I2C_MasterRequestRead+0x3a>
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d003      	beq.n	800ed76 <I2C_MasterRequestRead+0x3a>
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ed74:	d108      	bne.n	800ed88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed84:	601a      	str	r2, [r3, #0]
 800ed86:	e00b      	b.n	800eda0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed8c:	2b11      	cmp	r3, #17
 800ed8e:	d107      	bne.n	800eda0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	9300      	str	r3, [sp, #0]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f000 fab9 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d00d      	beq.n	800edd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edc6:	d103      	bne.n	800edd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800edce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800edd0:	2303      	movs	r3, #3
 800edd2:	e079      	b.n	800eec8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	691b      	ldr	r3, [r3, #16]
 800edd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eddc:	d108      	bne.n	800edf0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800edde:	897b      	ldrh	r3, [r7, #10]
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	f043 0301 	orr.w	r3, r3, #1
 800ede6:	b2da      	uxtb	r2, r3
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	611a      	str	r2, [r3, #16]
 800edee:	e05f      	b.n	800eeb0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800edf0:	897b      	ldrh	r3, [r7, #10]
 800edf2:	11db      	asrs	r3, r3, #7
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	f003 0306 	and.w	r3, r3, #6
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	f063 030f 	orn	r3, r3, #15
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	4930      	ldr	r1, [pc, #192]	; (800eed0 <I2C_MasterRequestRead+0x194>)
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f000 fadf 	bl	800f3d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d001      	beq.n	800ee1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	e054      	b.n	800eec8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ee1e:	897b      	ldrh	r3, [r7, #10]
 800ee20:	b2da      	uxtb	r2, r3
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	4929      	ldr	r1, [pc, #164]	; (800eed4 <I2C_MasterRequestRead+0x198>)
 800ee2e:	68f8      	ldr	r0, [r7, #12]
 800ee30:	f000 facf 	bl	800f3d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d001      	beq.n	800ee3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e044      	b.n	800eec8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ee3e:	2300      	movs	r3, #0
 800ee40:	613b      	str	r3, [r7, #16]
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	695b      	ldr	r3, [r3, #20]
 800ee48:	613b      	str	r3, [r7, #16]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	699b      	ldr	r3, [r3, #24]
 800ee50:	613b      	str	r3, [r7, #16]
 800ee52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ee62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ee70:	68f8      	ldr	r0, [r7, #12]
 800ee72:	f000 fa57 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d00d      	beq.n	800ee98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee8a:	d103      	bne.n	800ee94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee92:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ee94:	2303      	movs	r3, #3
 800ee96:	e017      	b.n	800eec8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ee98:	897b      	ldrh	r3, [r7, #10]
 800ee9a:	11db      	asrs	r3, r3, #7
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	f003 0306 	and.w	r3, r3, #6
 800eea2:	b2db      	uxtb	r3, r3
 800eea4:	f063 030e 	orn	r3, r3, #14
 800eea8:	b2da      	uxtb	r2, r3
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	4907      	ldr	r1, [pc, #28]	; (800eed4 <I2C_MasterRequestRead+0x198>)
 800eeb6:	68f8      	ldr	r0, [r7, #12]
 800eeb8:	f000 fa8b 	bl	800f3d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d001      	beq.n	800eec6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800eec2:	2301      	movs	r3, #1
 800eec4:	e000      	b.n	800eec8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800eec6:	2300      	movs	r3, #0
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3718      	adds	r7, #24
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	00010008 	.word	0x00010008
 800eed4:	00010002 	.word	0x00010002

0800eed8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af02      	add	r7, sp, #8
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	4608      	mov	r0, r1
 800eee2:	4611      	mov	r1, r2
 800eee4:	461a      	mov	r2, r3
 800eee6:	4603      	mov	r3, r0
 800eee8:	817b      	strh	r3, [r7, #10]
 800eeea:	460b      	mov	r3, r1
 800eeec:	813b      	strh	r3, [r7, #8]
 800eeee:	4613      	mov	r3, r2
 800eef0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	681a      	ldr	r2, [r3, #0]
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ef00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ef02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef04:	9300      	str	r3, [sp, #0]
 800ef06:	6a3b      	ldr	r3, [r7, #32]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f000 fa08 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00d      	beq.n	800ef36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef28:	d103      	bne.n	800ef32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ef32:	2303      	movs	r3, #3
 800ef34:	e05f      	b.n	800eff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ef36:	897b      	ldrh	r3, [r7, #10]
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ef44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef48:	6a3a      	ldr	r2, [r7, #32]
 800ef4a:	492d      	ldr	r1, [pc, #180]	; (800f000 <I2C_RequestMemoryWrite+0x128>)
 800ef4c:	68f8      	ldr	r0, [r7, #12]
 800ef4e:	f000 fa40 	bl	800f3d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d001      	beq.n	800ef5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	e04c      	b.n	800eff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	617b      	str	r3, [r7, #20]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	695b      	ldr	r3, [r3, #20]
 800ef66:	617b      	str	r3, [r7, #20]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	699b      	ldr	r3, [r3, #24]
 800ef6e:	617b      	str	r3, [r7, #20]
 800ef70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ef72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef74:	6a39      	ldr	r1, [r7, #32]
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f000 faaa 	bl	800f4d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d00d      	beq.n	800ef9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef86:	2b04      	cmp	r3, #4
 800ef88:	d107      	bne.n	800ef9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e02b      	b.n	800eff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ef9e:	88fb      	ldrh	r3, [r7, #6]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d105      	bne.n	800efb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800efa4:	893b      	ldrh	r3, [r7, #8]
 800efa6:	b2da      	uxtb	r2, r3
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	611a      	str	r2, [r3, #16]
 800efae:	e021      	b.n	800eff4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800efb0:	893b      	ldrh	r3, [r7, #8]
 800efb2:	0a1b      	lsrs	r3, r3, #8
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	b2da      	uxtb	r2, r3
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800efbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efc0:	6a39      	ldr	r1, [r7, #32]
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f000 fa84 	bl	800f4d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00d      	beq.n	800efea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efd2:	2b04      	cmp	r3, #4
 800efd4:	d107      	bne.n	800efe6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800efe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800efe6:	2301      	movs	r3, #1
 800efe8:	e005      	b.n	800eff6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800efea:	893b      	ldrh	r3, [r7, #8]
 800efec:	b2da      	uxtb	r2, r3
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800eff4:	2300      	movs	r3, #0
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3718      	adds	r7, #24
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	00010002 	.word	0x00010002

0800f004 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b088      	sub	sp, #32
 800f008:	af02      	add	r7, sp, #8
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	4608      	mov	r0, r1
 800f00e:	4611      	mov	r1, r2
 800f010:	461a      	mov	r2, r3
 800f012:	4603      	mov	r3, r0
 800f014:	817b      	strh	r3, [r7, #10]
 800f016:	460b      	mov	r3, r1
 800f018:	813b      	strh	r3, [r7, #8]
 800f01a:	4613      	mov	r3, r2
 800f01c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f02c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	681a      	ldr	r2, [r3, #0]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f03c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f040:	9300      	str	r3, [sp, #0]
 800f042:	6a3b      	ldr	r3, [r7, #32]
 800f044:	2200      	movs	r2, #0
 800f046:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f000 f96a 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00d      	beq.n	800f072 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f064:	d103      	bne.n	800f06e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f06c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f06e:	2303      	movs	r3, #3
 800f070:	e0aa      	b.n	800f1c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f072:	897b      	ldrh	r3, [r7, #10]
 800f074:	b2db      	uxtb	r3, r3
 800f076:	461a      	mov	r2, r3
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f080:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f084:	6a3a      	ldr	r2, [r7, #32]
 800f086:	4952      	ldr	r1, [pc, #328]	; (800f1d0 <I2C_RequestMemoryRead+0x1cc>)
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f000 f9a2 	bl	800f3d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	d001      	beq.n	800f098 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800f094:	2301      	movs	r3, #1
 800f096:	e097      	b.n	800f1c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f098:	2300      	movs	r3, #0
 800f09a:	617b      	str	r3, [r7, #20]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	695b      	ldr	r3, [r3, #20]
 800f0a2:	617b      	str	r3, [r7, #20]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	699b      	ldr	r3, [r3, #24]
 800f0aa:	617b      	str	r3, [r7, #20]
 800f0ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0b0:	6a39      	ldr	r1, [r7, #32]
 800f0b2:	68f8      	ldr	r0, [r7, #12]
 800f0b4:	f000 fa0c 	bl	800f4d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00d      	beq.n	800f0da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0c2:	2b04      	cmp	r3, #4
 800f0c4:	d107      	bne.n	800f0d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	681a      	ldr	r2, [r3, #0]
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f0d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	e076      	b.n	800f1c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f0da:	88fb      	ldrh	r3, [r7, #6]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d105      	bne.n	800f0ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f0e0:	893b      	ldrh	r3, [r7, #8]
 800f0e2:	b2da      	uxtb	r2, r3
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	611a      	str	r2, [r3, #16]
 800f0ea:	e021      	b.n	800f130 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f0ec:	893b      	ldrh	r3, [r7, #8]
 800f0ee:	0a1b      	lsrs	r3, r3, #8
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	b2da      	uxtb	r2, r3
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0fc:	6a39      	ldr	r1, [r7, #32]
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f000 f9e6 	bl	800f4d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800f104:	4603      	mov	r3, r0
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00d      	beq.n	800f126 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f10e:	2b04      	cmp	r3, #4
 800f110:	d107      	bne.n	800f122 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f120:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f122:	2301      	movs	r3, #1
 800f124:	e050      	b.n	800f1c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f126:	893b      	ldrh	r3, [r7, #8]
 800f128:	b2da      	uxtb	r2, r3
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f132:	6a39      	ldr	r1, [r7, #32]
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f000 f9cb 	bl	800f4d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d00d      	beq.n	800f15c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f144:	2b04      	cmp	r3, #4
 800f146:	d107      	bne.n	800f158 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f156:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f158:	2301      	movs	r3, #1
 800f15a:	e035      	b.n	800f1c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f16a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	6a3b      	ldr	r3, [r7, #32]
 800f172:	2200      	movs	r2, #0
 800f174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f000 f8d3 	bl	800f324 <I2C_WaitOnFlagUntilTimeout>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00d      	beq.n	800f1a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f18e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f192:	d103      	bne.n	800f19c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f19a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f19c:	2303      	movs	r3, #3
 800f19e:	e013      	b.n	800f1c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800f1a0:	897b      	ldrh	r3, [r7, #10]
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	f043 0301 	orr.w	r3, r3, #1
 800f1a8:	b2da      	uxtb	r2, r3
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b2:	6a3a      	ldr	r2, [r7, #32]
 800f1b4:	4906      	ldr	r1, [pc, #24]	; (800f1d0 <I2C_RequestMemoryRead+0x1cc>)
 800f1b6:	68f8      	ldr	r0, [r7, #12]
 800f1b8:	f000 f90b 	bl	800f3d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e000      	b.n	800f1c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800f1c6:	2300      	movs	r3, #0
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3718      	adds	r7, #24
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	00010002 	.word	0x00010002

0800f1d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b086      	sub	sp, #24
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800f1ee:	4b4b      	ldr	r3, [pc, #300]	; (800f31c <I2C_DMAAbort+0x148>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	08db      	lsrs	r3, r3, #3
 800f1f4:	4a4a      	ldr	r2, [pc, #296]	; (800f320 <I2C_DMAAbort+0x14c>)
 800f1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800f1fa:	0a1a      	lsrs	r2, r3, #8
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	4413      	add	r3, r2
 800f202:	00da      	lsls	r2, r3, #3
 800f204:	1ad3      	subs	r3, r2, r3
 800f206:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d106      	bne.n	800f21c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f212:	f043 0220 	orr.w	r2, r3, #32
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800f21a:	e00a      	b.n	800f232 <I2C_DMAAbort+0x5e>
    }
    count--;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	3b01      	subs	r3, #1
 800f220:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f22c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f230:	d0ea      	beq.n	800f208 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f236:	2b00      	cmp	r3, #0
 800f238:	d003      	beq.n	800f242 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f23e:	2200      	movs	r2, #0
 800f240:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f246:	2b00      	cmp	r3, #0
 800f248:	d003      	beq.n	800f252 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f24e:	2200      	movs	r2, #0
 800f250:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f260:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	2200      	movs	r2, #0
 800f266:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d003      	beq.n	800f278 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f274:	2200      	movs	r2, #0
 800f276:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d003      	beq.n	800f288 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f284:	2200      	movs	r2, #0
 800f286:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f022 0201 	bic.w	r2, r2, #1
 800f296:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f29e:	b2db      	uxtb	r3, r3
 800f2a0:	2b60      	cmp	r3, #96	; 0x60
 800f2a2:	d10e      	bne.n	800f2c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	2220      	movs	r2, #32
 800f2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800f2ba:	6978      	ldr	r0, [r7, #20]
 800f2bc:	f7fe fb56 	bl	800d96c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f2c0:	e027      	b.n	800f312 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f2c2:	7cfb      	ldrb	r3, [r7, #19]
 800f2c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f2c8:	2b28      	cmp	r3, #40	; 0x28
 800f2ca:	d117      	bne.n	800f2fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f042 0201 	orr.w	r2, r2, #1
 800f2da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	681a      	ldr	r2, [r3, #0]
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f2ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	2228      	movs	r2, #40	; 0x28
 800f2f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f2fa:	e007      	b.n	800f30c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	2220      	movs	r2, #32
 800f300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	2200      	movs	r2, #0
 800f308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800f30c:	6978      	ldr	r0, [r7, #20]
 800f30e:	f7fe fb23 	bl	800d958 <HAL_I2C_ErrorCallback>
}
 800f312:	bf00      	nop
 800f314:	3718      	adds	r7, #24
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	20000038 	.word	0x20000038
 800f320:	14f8b589 	.word	0x14f8b589

0800f324 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b084      	sub	sp, #16
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	603b      	str	r3, [r7, #0]
 800f330:	4613      	mov	r3, r2
 800f332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f334:	e025      	b.n	800f382 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f33c:	d021      	beq.n	800f382 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f33e:	f7fc f94f 	bl	800b5e0 <HAL_GetTick>
 800f342:	4602      	mov	r2, r0
 800f344:	69bb      	ldr	r3, [r7, #24]
 800f346:	1ad3      	subs	r3, r2, r3
 800f348:	683a      	ldr	r2, [r7, #0]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d302      	bcc.n	800f354 <I2C_WaitOnFlagUntilTimeout+0x30>
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d116      	bne.n	800f382 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2200      	movs	r2, #0
 800f358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2220      	movs	r2, #32
 800f35e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2200      	movs	r2, #0
 800f366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f36e:	f043 0220 	orr.w	r2, r3, #32
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2200      	movs	r2, #0
 800f37a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f37e:	2301      	movs	r3, #1
 800f380:	e023      	b.n	800f3ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	0c1b      	lsrs	r3, r3, #16
 800f386:	b2db      	uxtb	r3, r3
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d10d      	bne.n	800f3a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	695b      	ldr	r3, [r3, #20]
 800f392:	43da      	mvns	r2, r3
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	4013      	ands	r3, r2
 800f398:	b29b      	uxth	r3, r3
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	bf0c      	ite	eq
 800f39e:	2301      	moveq	r3, #1
 800f3a0:	2300      	movne	r3, #0
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	e00c      	b.n	800f3c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	699b      	ldr	r3, [r3, #24]
 800f3ae:	43da      	mvns	r2, r3
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	4013      	ands	r3, r2
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	bf0c      	ite	eq
 800f3ba:	2301      	moveq	r3, #1
 800f3bc:	2300      	movne	r3, #0
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	79fb      	ldrb	r3, [r7, #7]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d0b6      	beq.n	800f336 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f3c8:	2300      	movs	r3, #0
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f3d2:	b580      	push	{r7, lr}
 800f3d4:	b084      	sub	sp, #16
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	60f8      	str	r0, [r7, #12]
 800f3da:	60b9      	str	r1, [r7, #8]
 800f3dc:	607a      	str	r2, [r7, #4]
 800f3de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f3e0:	e051      	b.n	800f486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	695b      	ldr	r3, [r3, #20]
 800f3e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f3ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3f0:	d123      	bne.n	800f43a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f400:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f40a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2200      	movs	r2, #0
 800f410:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2220      	movs	r2, #32
 800f416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2200      	movs	r2, #0
 800f41e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f426:	f043 0204 	orr.w	r2, r3, #4
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2200      	movs	r2, #0
 800f432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f436:	2301      	movs	r3, #1
 800f438:	e046      	b.n	800f4c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f440:	d021      	beq.n	800f486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f442:	f7fc f8cd 	bl	800b5e0 <HAL_GetTick>
 800f446:	4602      	mov	r2, r0
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	1ad3      	subs	r3, r2, r3
 800f44c:	687a      	ldr	r2, [r7, #4]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d302      	bcc.n	800f458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d116      	bne.n	800f486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2200      	movs	r2, #0
 800f45c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2220      	movs	r2, #32
 800f462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f472:	f043 0220 	orr.w	r2, r3, #32
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2200      	movs	r2, #0
 800f47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f482:	2301      	movs	r3, #1
 800f484:	e020      	b.n	800f4c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	0c1b      	lsrs	r3, r3, #16
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d10c      	bne.n	800f4aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	695b      	ldr	r3, [r3, #20]
 800f496:	43da      	mvns	r2, r3
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	4013      	ands	r3, r2
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	bf14      	ite	ne
 800f4a2:	2301      	movne	r3, #1
 800f4a4:	2300      	moveq	r3, #0
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	e00b      	b.n	800f4c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	699b      	ldr	r3, [r3, #24]
 800f4b0:	43da      	mvns	r2, r3
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	4013      	ands	r3, r2
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	bf14      	ite	ne
 800f4bc:	2301      	movne	r3, #1
 800f4be:	2300      	moveq	r3, #0
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d18d      	bne.n	800f3e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800f4c6:	2300      	movs	r3, #0
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3710      	adds	r7, #16
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f4dc:	e02d      	b.n	800f53a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f4de:	68f8      	ldr	r0, [r7, #12]
 800f4e0:	f000 f900 	bl	800f6e4 <I2C_IsAcknowledgeFailed>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d001      	beq.n	800f4ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	e02d      	b.n	800f54a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4f4:	d021      	beq.n	800f53a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f4f6:	f7fc f873 	bl	800b5e0 <HAL_GetTick>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	1ad3      	subs	r3, r2, r3
 800f500:	68ba      	ldr	r2, [r7, #8]
 800f502:	429a      	cmp	r2, r3
 800f504:	d302      	bcc.n	800f50c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d116      	bne.n	800f53a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2200      	movs	r2, #0
 800f510:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2220      	movs	r2, #32
 800f516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2200      	movs	r2, #0
 800f51e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f526:	f043 0220 	orr.w	r2, r3, #32
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2200      	movs	r2, #0
 800f532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f536:	2301      	movs	r3, #1
 800f538:	e007      	b.n	800f54a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	695b      	ldr	r3, [r3, #20]
 800f540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f544:	2b80      	cmp	r3, #128	; 0x80
 800f546:	d1ca      	bne.n	800f4de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3710      	adds	r7, #16
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b084      	sub	sp, #16
 800f556:	af00      	add	r7, sp, #0
 800f558:	60f8      	str	r0, [r7, #12]
 800f55a:	60b9      	str	r1, [r7, #8]
 800f55c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f55e:	e02d      	b.n	800f5bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f560:	68f8      	ldr	r0, [r7, #12]
 800f562:	f000 f8bf 	bl	800f6e4 <I2C_IsAcknowledgeFailed>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d001      	beq.n	800f570 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f56c:	2301      	movs	r3, #1
 800f56e:	e02d      	b.n	800f5cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f576:	d021      	beq.n	800f5bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f578:	f7fc f832 	bl	800b5e0 <HAL_GetTick>
 800f57c:	4602      	mov	r2, r0
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	68ba      	ldr	r2, [r7, #8]
 800f584:	429a      	cmp	r2, r3
 800f586:	d302      	bcc.n	800f58e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d116      	bne.n	800f5bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2200      	movs	r2, #0
 800f592:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	2220      	movs	r2, #32
 800f598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5a8:	f043 0220 	orr.w	r2, r3, #32
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	e007      	b.n	800f5cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	695b      	ldr	r3, [r3, #20]
 800f5c2:	f003 0304 	and.w	r3, r3, #4
 800f5c6:	2b04      	cmp	r3, #4
 800f5c8:	d1ca      	bne.n	800f560 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f5ca:	2300      	movs	r3, #0
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800f5e0:	4b13      	ldr	r3, [pc, #76]	; (800f630 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	08db      	lsrs	r3, r3, #3
 800f5e6:	4a13      	ldr	r2, [pc, #76]	; (800f634 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800f5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800f5ec:	0a1a      	lsrs	r2, r3, #8
 800f5ee:	4613      	mov	r3, r2
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	4413      	add	r3, r2
 800f5f4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d107      	bne.n	800f612 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f606:	f043 0220 	orr.w	r2, r3, #32
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f60e:	2301      	movs	r3, #1
 800f610:	e008      	b.n	800f624 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f61c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f620:	d0e9      	beq.n	800f5f6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800f622:	2300      	movs	r3, #0
}
 800f624:	4618      	mov	r0, r3
 800f626:	3714      	adds	r7, #20
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr
 800f630:	20000038 	.word	0x20000038
 800f634:	14f8b589 	.word	0x14f8b589

0800f638 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f644:	e042      	b.n	800f6cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	695b      	ldr	r3, [r3, #20]
 800f64c:	f003 0310 	and.w	r3, r3, #16
 800f650:	2b10      	cmp	r3, #16
 800f652:	d119      	bne.n	800f688 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f06f 0210 	mvn.w	r2, #16
 800f65c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2200      	movs	r2, #0
 800f662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2220      	movs	r2, #32
 800f668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f684:	2301      	movs	r3, #1
 800f686:	e029      	b.n	800f6dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f688:	f7fb ffaa 	bl	800b5e0 <HAL_GetTick>
 800f68c:	4602      	mov	r2, r0
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	1ad3      	subs	r3, r2, r3
 800f692:	68ba      	ldr	r2, [r7, #8]
 800f694:	429a      	cmp	r2, r3
 800f696:	d302      	bcc.n	800f69e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d116      	bne.n	800f6cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2220      	movs	r2, #32
 800f6a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6b8:	f043 0220 	orr.w	r2, r3, #32
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e007      	b.n	800f6dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6d6:	2b40      	cmp	r3, #64	; 0x40
 800f6d8:	d1b5      	bne.n	800f646 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800f6da:	2300      	movs	r3, #0
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3710      	adds	r7, #16
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	695b      	ldr	r3, [r3, #20]
 800f6f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f6f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6fa:	d11b      	bne.n	800f734 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f704:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2200      	movs	r2, #0
 800f70a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2220      	movs	r2, #32
 800f710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f720:	f043 0204 	orr.w	r2, r3, #4
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2200      	movs	r2, #0
 800f72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800f730:	2301      	movs	r3, #1
 800f732:	e000      	b.n	800f736 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f734:	2300      	movs	r3, #0
}
 800f736:	4618      	mov	r0, r3
 800f738:	370c      	adds	r7, #12
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr

0800f742 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800f742:	b480      	push	{r7}
 800f744:	b083      	sub	sp, #12
 800f746:	af00      	add	r7, sp, #0
 800f748:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800f752:	d103      	bne.n	800f75c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2201      	movs	r2, #1
 800f758:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800f75a:	e007      	b.n	800f76c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f760:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800f764:	d102      	bne.n	800f76c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2208      	movs	r2, #8
 800f76a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f76c:	bf00      	nop
 800f76e:	370c      	adds	r7, #12
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr

0800f778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b086      	sub	sp, #24
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d101      	bne.n	800f78a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f786:	2301      	movs	r3, #1
 800f788:	e264      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f003 0301 	and.w	r3, r3, #1
 800f792:	2b00      	cmp	r3, #0
 800f794:	d075      	beq.n	800f882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f796:	4ba3      	ldr	r3, [pc, #652]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	f003 030c 	and.w	r3, r3, #12
 800f79e:	2b04      	cmp	r3, #4
 800f7a0:	d00c      	beq.n	800f7bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f7a2:	4ba0      	ldr	r3, [pc, #640]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f7a4:	689b      	ldr	r3, [r3, #8]
 800f7a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f7aa:	2b08      	cmp	r3, #8
 800f7ac:	d112      	bne.n	800f7d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f7ae:	4b9d      	ldr	r3, [pc, #628]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f7b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f7ba:	d10b      	bne.n	800f7d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f7bc:	4b99      	ldr	r3, [pc, #612]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d05b      	beq.n	800f880 <HAL_RCC_OscConfig+0x108>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d157      	bne.n	800f880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	e23f      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7dc:	d106      	bne.n	800f7ec <HAL_RCC_OscConfig+0x74>
 800f7de:	4b91      	ldr	r3, [pc, #580]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4a90      	ldr	r2, [pc, #576]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f7e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f7e8:	6013      	str	r3, [r2, #0]
 800f7ea:	e01d      	b.n	800f828 <HAL_RCC_OscConfig+0xb0>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f7f4:	d10c      	bne.n	800f810 <HAL_RCC_OscConfig+0x98>
 800f7f6:	4b8b      	ldr	r3, [pc, #556]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a8a      	ldr	r2, [pc, #552]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f7fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f800:	6013      	str	r3, [r2, #0]
 800f802:	4b88      	ldr	r3, [pc, #544]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	4a87      	ldr	r2, [pc, #540]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f80c:	6013      	str	r3, [r2, #0]
 800f80e:	e00b      	b.n	800f828 <HAL_RCC_OscConfig+0xb0>
 800f810:	4b84      	ldr	r3, [pc, #528]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a83      	ldr	r2, [pc, #524]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f81a:	6013      	str	r3, [r2, #0]
 800f81c:	4b81      	ldr	r3, [pc, #516]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	4a80      	ldr	r2, [pc, #512]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d013      	beq.n	800f858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f830:	f7fb fed6 	bl	800b5e0 <HAL_GetTick>
 800f834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f836:	e008      	b.n	800f84a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f838:	f7fb fed2 	bl	800b5e0 <HAL_GetTick>
 800f83c:	4602      	mov	r2, r0
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	1ad3      	subs	r3, r2, r3
 800f842:	2b64      	cmp	r3, #100	; 0x64
 800f844:	d901      	bls.n	800f84a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f846:	2303      	movs	r3, #3
 800f848:	e204      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f84a:	4b76      	ldr	r3, [pc, #472]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f852:	2b00      	cmp	r3, #0
 800f854:	d0f0      	beq.n	800f838 <HAL_RCC_OscConfig+0xc0>
 800f856:	e014      	b.n	800f882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f858:	f7fb fec2 	bl	800b5e0 <HAL_GetTick>
 800f85c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f85e:	e008      	b.n	800f872 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f860:	f7fb febe 	bl	800b5e0 <HAL_GetTick>
 800f864:	4602      	mov	r2, r0
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	2b64      	cmp	r3, #100	; 0x64
 800f86c:	d901      	bls.n	800f872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f86e:	2303      	movs	r3, #3
 800f870:	e1f0      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f872:	4b6c      	ldr	r3, [pc, #432]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1f0      	bne.n	800f860 <HAL_RCC_OscConfig+0xe8>
 800f87e:	e000      	b.n	800f882 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f003 0302 	and.w	r3, r3, #2
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d063      	beq.n	800f956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f88e:	4b65      	ldr	r3, [pc, #404]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	f003 030c 	and.w	r3, r3, #12
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00b      	beq.n	800f8b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f89a:	4b62      	ldr	r3, [pc, #392]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f89c:	689b      	ldr	r3, [r3, #8]
 800f89e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f8a2:	2b08      	cmp	r3, #8
 800f8a4:	d11c      	bne.n	800f8e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f8a6:	4b5f      	ldr	r3, [pc, #380]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f8a8:	685b      	ldr	r3, [r3, #4]
 800f8aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d116      	bne.n	800f8e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f8b2:	4b5c      	ldr	r3, [pc, #368]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f003 0302 	and.w	r3, r3, #2
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d005      	beq.n	800f8ca <HAL_RCC_OscConfig+0x152>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	d001      	beq.n	800f8ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e1c4      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f8ca:	4b56      	ldr	r3, [pc, #344]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	691b      	ldr	r3, [r3, #16]
 800f8d6:	00db      	lsls	r3, r3, #3
 800f8d8:	4952      	ldr	r1, [pc, #328]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f8da:	4313      	orrs	r3, r2
 800f8dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f8de:	e03a      	b.n	800f956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d020      	beq.n	800f92a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f8e8:	4b4f      	ldr	r3, [pc, #316]	; (800fa28 <HAL_RCC_OscConfig+0x2b0>)
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f8ee:	f7fb fe77 	bl	800b5e0 <HAL_GetTick>
 800f8f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f8f4:	e008      	b.n	800f908 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f8f6:	f7fb fe73 	bl	800b5e0 <HAL_GetTick>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	1ad3      	subs	r3, r2, r3
 800f900:	2b02      	cmp	r3, #2
 800f902:	d901      	bls.n	800f908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f904:	2303      	movs	r3, #3
 800f906:	e1a5      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f908:	4b46      	ldr	r3, [pc, #280]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f003 0302 	and.w	r3, r3, #2
 800f910:	2b00      	cmp	r3, #0
 800f912:	d0f0      	beq.n	800f8f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f914:	4b43      	ldr	r3, [pc, #268]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	691b      	ldr	r3, [r3, #16]
 800f920:	00db      	lsls	r3, r3, #3
 800f922:	4940      	ldr	r1, [pc, #256]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f924:	4313      	orrs	r3, r2
 800f926:	600b      	str	r3, [r1, #0]
 800f928:	e015      	b.n	800f956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f92a:	4b3f      	ldr	r3, [pc, #252]	; (800fa28 <HAL_RCC_OscConfig+0x2b0>)
 800f92c:	2200      	movs	r2, #0
 800f92e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f930:	f7fb fe56 	bl	800b5e0 <HAL_GetTick>
 800f934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f936:	e008      	b.n	800f94a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f938:	f7fb fe52 	bl	800b5e0 <HAL_GetTick>
 800f93c:	4602      	mov	r2, r0
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	1ad3      	subs	r3, r2, r3
 800f942:	2b02      	cmp	r3, #2
 800f944:	d901      	bls.n	800f94a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f946:	2303      	movs	r3, #3
 800f948:	e184      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f94a:	4b36      	ldr	r3, [pc, #216]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f003 0302 	and.w	r3, r3, #2
 800f952:	2b00      	cmp	r3, #0
 800f954:	d1f0      	bne.n	800f938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f003 0308 	and.w	r3, r3, #8
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d030      	beq.n	800f9c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	695b      	ldr	r3, [r3, #20]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d016      	beq.n	800f998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f96a:	4b30      	ldr	r3, [pc, #192]	; (800fa2c <HAL_RCC_OscConfig+0x2b4>)
 800f96c:	2201      	movs	r2, #1
 800f96e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f970:	f7fb fe36 	bl	800b5e0 <HAL_GetTick>
 800f974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f976:	e008      	b.n	800f98a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f978:	f7fb fe32 	bl	800b5e0 <HAL_GetTick>
 800f97c:	4602      	mov	r2, r0
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	1ad3      	subs	r3, r2, r3
 800f982:	2b02      	cmp	r3, #2
 800f984:	d901      	bls.n	800f98a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f986:	2303      	movs	r3, #3
 800f988:	e164      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f98a:	4b26      	ldr	r3, [pc, #152]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f98c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f98e:	f003 0302 	and.w	r3, r3, #2
 800f992:	2b00      	cmp	r3, #0
 800f994:	d0f0      	beq.n	800f978 <HAL_RCC_OscConfig+0x200>
 800f996:	e015      	b.n	800f9c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f998:	4b24      	ldr	r3, [pc, #144]	; (800fa2c <HAL_RCC_OscConfig+0x2b4>)
 800f99a:	2200      	movs	r2, #0
 800f99c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f99e:	f7fb fe1f 	bl	800b5e0 <HAL_GetTick>
 800f9a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f9a4:	e008      	b.n	800f9b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f9a6:	f7fb fe1b 	bl	800b5e0 <HAL_GetTick>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	1ad3      	subs	r3, r2, r3
 800f9b0:	2b02      	cmp	r3, #2
 800f9b2:	d901      	bls.n	800f9b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800f9b4:	2303      	movs	r3, #3
 800f9b6:	e14d      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f9b8:	4b1a      	ldr	r3, [pc, #104]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f9ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9bc:	f003 0302 	and.w	r3, r3, #2
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d1f0      	bne.n	800f9a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f003 0304 	and.w	r3, r3, #4
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f000 80a0 	beq.w	800fb12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f9d6:	4b13      	ldr	r3, [pc, #76]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d10f      	bne.n	800fa02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	60bb      	str	r3, [r7, #8]
 800f9e6:	4b0f      	ldr	r3, [pc, #60]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ea:	4a0e      	ldr	r2, [pc, #56]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f9ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9f0:	6413      	str	r3, [r2, #64]	; 0x40
 800f9f2:	4b0c      	ldr	r3, [pc, #48]	; (800fa24 <HAL_RCC_OscConfig+0x2ac>)
 800f9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f9fa:	60bb      	str	r3, [r7, #8]
 800f9fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fa02:	4b0b      	ldr	r3, [pc, #44]	; (800fa30 <HAL_RCC_OscConfig+0x2b8>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d121      	bne.n	800fa52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fa0e:	4b08      	ldr	r3, [pc, #32]	; (800fa30 <HAL_RCC_OscConfig+0x2b8>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	4a07      	ldr	r2, [pc, #28]	; (800fa30 <HAL_RCC_OscConfig+0x2b8>)
 800fa14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fa1a:	f7fb fde1 	bl	800b5e0 <HAL_GetTick>
 800fa1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fa20:	e011      	b.n	800fa46 <HAL_RCC_OscConfig+0x2ce>
 800fa22:	bf00      	nop
 800fa24:	40023800 	.word	0x40023800
 800fa28:	42470000 	.word	0x42470000
 800fa2c:	42470e80 	.word	0x42470e80
 800fa30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fa34:	f7fb fdd4 	bl	800b5e0 <HAL_GetTick>
 800fa38:	4602      	mov	r2, r0
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	1ad3      	subs	r3, r2, r3
 800fa3e:	2b02      	cmp	r3, #2
 800fa40:	d901      	bls.n	800fa46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800fa42:	2303      	movs	r3, #3
 800fa44:	e106      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fa46:	4b85      	ldr	r3, [pc, #532]	; (800fc5c <HAL_RCC_OscConfig+0x4e4>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d0f0      	beq.n	800fa34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	689b      	ldr	r3, [r3, #8]
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	d106      	bne.n	800fa68 <HAL_RCC_OscConfig+0x2f0>
 800fa5a:	4b81      	ldr	r3, [pc, #516]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fa5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa5e:	4a80      	ldr	r2, [pc, #512]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fa60:	f043 0301 	orr.w	r3, r3, #1
 800fa64:	6713      	str	r3, [r2, #112]	; 0x70
 800fa66:	e01c      	b.n	800faa2 <HAL_RCC_OscConfig+0x32a>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	689b      	ldr	r3, [r3, #8]
 800fa6c:	2b05      	cmp	r3, #5
 800fa6e:	d10c      	bne.n	800fa8a <HAL_RCC_OscConfig+0x312>
 800fa70:	4b7b      	ldr	r3, [pc, #492]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fa72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa74:	4a7a      	ldr	r2, [pc, #488]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fa76:	f043 0304 	orr.w	r3, r3, #4
 800fa7a:	6713      	str	r3, [r2, #112]	; 0x70
 800fa7c:	4b78      	ldr	r3, [pc, #480]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fa7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa80:	4a77      	ldr	r2, [pc, #476]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fa82:	f043 0301 	orr.w	r3, r3, #1
 800fa86:	6713      	str	r3, [r2, #112]	; 0x70
 800fa88:	e00b      	b.n	800faa2 <HAL_RCC_OscConfig+0x32a>
 800fa8a:	4b75      	ldr	r3, [pc, #468]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fa8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa8e:	4a74      	ldr	r2, [pc, #464]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fa90:	f023 0301 	bic.w	r3, r3, #1
 800fa94:	6713      	str	r3, [r2, #112]	; 0x70
 800fa96:	4b72      	ldr	r3, [pc, #456]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fa98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa9a:	4a71      	ldr	r2, [pc, #452]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fa9c:	f023 0304 	bic.w	r3, r3, #4
 800faa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	689b      	ldr	r3, [r3, #8]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d015      	beq.n	800fad6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800faaa:	f7fb fd99 	bl	800b5e0 <HAL_GetTick>
 800faae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fab0:	e00a      	b.n	800fac8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fab2:	f7fb fd95 	bl	800b5e0 <HAL_GetTick>
 800fab6:	4602      	mov	r2, r0
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	1ad3      	subs	r3, r2, r3
 800fabc:	f241 3288 	movw	r2, #5000	; 0x1388
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d901      	bls.n	800fac8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800fac4:	2303      	movs	r3, #3
 800fac6:	e0c5      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fac8:	4b65      	ldr	r3, [pc, #404]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800faca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800facc:	f003 0302 	and.w	r3, r3, #2
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d0ee      	beq.n	800fab2 <HAL_RCC_OscConfig+0x33a>
 800fad4:	e014      	b.n	800fb00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fad6:	f7fb fd83 	bl	800b5e0 <HAL_GetTick>
 800fada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fadc:	e00a      	b.n	800faf4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fade:	f7fb fd7f 	bl	800b5e0 <HAL_GetTick>
 800fae2:	4602      	mov	r2, r0
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	1ad3      	subs	r3, r2, r3
 800fae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800faec:	4293      	cmp	r3, r2
 800faee:	d901      	bls.n	800faf4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800faf0:	2303      	movs	r3, #3
 800faf2:	e0af      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800faf4:	4b5a      	ldr	r3, [pc, #360]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800faf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faf8:	f003 0302 	and.w	r3, r3, #2
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d1ee      	bne.n	800fade <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fb00:	7dfb      	ldrb	r3, [r7, #23]
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d105      	bne.n	800fb12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fb06:	4b56      	ldr	r3, [pc, #344]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb0a:	4a55      	ldr	r2, [pc, #340]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fb0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fb10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	699b      	ldr	r3, [r3, #24]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	f000 809b 	beq.w	800fc52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800fb1c:	4b50      	ldr	r3, [pc, #320]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fb1e:	689b      	ldr	r3, [r3, #8]
 800fb20:	f003 030c 	and.w	r3, r3, #12
 800fb24:	2b08      	cmp	r3, #8
 800fb26:	d05c      	beq.n	800fbe2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	699b      	ldr	r3, [r3, #24]
 800fb2c:	2b02      	cmp	r3, #2
 800fb2e:	d141      	bne.n	800fbb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fb30:	4b4c      	ldr	r3, [pc, #304]	; (800fc64 <HAL_RCC_OscConfig+0x4ec>)
 800fb32:	2200      	movs	r2, #0
 800fb34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb36:	f7fb fd53 	bl	800b5e0 <HAL_GetTick>
 800fb3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fb3c:	e008      	b.n	800fb50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fb3e:	f7fb fd4f 	bl	800b5e0 <HAL_GetTick>
 800fb42:	4602      	mov	r2, r0
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	1ad3      	subs	r3, r2, r3
 800fb48:	2b02      	cmp	r3, #2
 800fb4a:	d901      	bls.n	800fb50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800fb4c:	2303      	movs	r3, #3
 800fb4e:	e081      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fb50:	4b43      	ldr	r3, [pc, #268]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d1f0      	bne.n	800fb3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	69da      	ldr	r2, [r3, #28]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6a1b      	ldr	r3, [r3, #32]
 800fb64:	431a      	orrs	r2, r3
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6a:	019b      	lsls	r3, r3, #6
 800fb6c:	431a      	orrs	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb72:	085b      	lsrs	r3, r3, #1
 800fb74:	3b01      	subs	r3, #1
 800fb76:	041b      	lsls	r3, r3, #16
 800fb78:	431a      	orrs	r2, r3
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb7e:	061b      	lsls	r3, r3, #24
 800fb80:	4937      	ldr	r1, [pc, #220]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fb82:	4313      	orrs	r3, r2
 800fb84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fb86:	4b37      	ldr	r3, [pc, #220]	; (800fc64 <HAL_RCC_OscConfig+0x4ec>)
 800fb88:	2201      	movs	r2, #1
 800fb8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb8c:	f7fb fd28 	bl	800b5e0 <HAL_GetTick>
 800fb90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fb92:	e008      	b.n	800fba6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fb94:	f7fb fd24 	bl	800b5e0 <HAL_GetTick>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	1ad3      	subs	r3, r2, r3
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d901      	bls.n	800fba6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800fba2:	2303      	movs	r3, #3
 800fba4:	e056      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fba6:	4b2e      	ldr	r3, [pc, #184]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d0f0      	beq.n	800fb94 <HAL_RCC_OscConfig+0x41c>
 800fbb2:	e04e      	b.n	800fc52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fbb4:	4b2b      	ldr	r3, [pc, #172]	; (800fc64 <HAL_RCC_OscConfig+0x4ec>)
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fbba:	f7fb fd11 	bl	800b5e0 <HAL_GetTick>
 800fbbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fbc0:	e008      	b.n	800fbd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fbc2:	f7fb fd0d 	bl	800b5e0 <HAL_GetTick>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	1ad3      	subs	r3, r2, r3
 800fbcc:	2b02      	cmp	r3, #2
 800fbce:	d901      	bls.n	800fbd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800fbd0:	2303      	movs	r3, #3
 800fbd2:	e03f      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fbd4:	4b22      	ldr	r3, [pc, #136]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d1f0      	bne.n	800fbc2 <HAL_RCC_OscConfig+0x44a>
 800fbe0:	e037      	b.n	800fc52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	699b      	ldr	r3, [r3, #24]
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d101      	bne.n	800fbee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800fbea:	2301      	movs	r3, #1
 800fbec:	e032      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800fbee:	4b1c      	ldr	r3, [pc, #112]	; (800fc60 <HAL_RCC_OscConfig+0x4e8>)
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	699b      	ldr	r3, [r3, #24]
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d028      	beq.n	800fc4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d121      	bne.n	800fc4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d11a      	bne.n	800fc4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fc18:	68fa      	ldr	r2, [r7, #12]
 800fc1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800fc1e:	4013      	ands	r3, r2
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fc24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d111      	bne.n	800fc4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc34:	085b      	lsrs	r3, r3, #1
 800fc36:	3b01      	subs	r3, #1
 800fc38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d107      	bne.n	800fc4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d001      	beq.n	800fc52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800fc4e:	2301      	movs	r3, #1
 800fc50:	e000      	b.n	800fc54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800fc52:	2300      	movs	r3, #0
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3718      	adds	r7, #24
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	40007000 	.word	0x40007000
 800fc60:	40023800 	.word	0x40023800
 800fc64:	42470060 	.word	0x42470060

0800fc68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d101      	bne.n	800fc7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fc78:	2301      	movs	r3, #1
 800fc7a:	e0cc      	b.n	800fe16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fc7c:	4b68      	ldr	r3, [pc, #416]	; (800fe20 <HAL_RCC_ClockConfig+0x1b8>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f003 0307 	and.w	r3, r3, #7
 800fc84:	683a      	ldr	r2, [r7, #0]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d90c      	bls.n	800fca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fc8a:	4b65      	ldr	r3, [pc, #404]	; (800fe20 <HAL_RCC_ClockConfig+0x1b8>)
 800fc8c:	683a      	ldr	r2, [r7, #0]
 800fc8e:	b2d2      	uxtb	r2, r2
 800fc90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc92:	4b63      	ldr	r3, [pc, #396]	; (800fe20 <HAL_RCC_ClockConfig+0x1b8>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f003 0307 	and.w	r3, r3, #7
 800fc9a:	683a      	ldr	r2, [r7, #0]
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d001      	beq.n	800fca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800fca0:	2301      	movs	r3, #1
 800fca2:	e0b8      	b.n	800fe16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f003 0302 	and.w	r3, r3, #2
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d020      	beq.n	800fcf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f003 0304 	and.w	r3, r3, #4
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d005      	beq.n	800fcc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fcbc:	4b59      	ldr	r3, [pc, #356]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	4a58      	ldr	r2, [pc, #352]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fcc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800fcc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	f003 0308 	and.w	r3, r3, #8
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d005      	beq.n	800fce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800fcd4:	4b53      	ldr	r3, [pc, #332]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fcd6:	689b      	ldr	r3, [r3, #8]
 800fcd8:	4a52      	ldr	r2, [pc, #328]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fcda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800fcde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fce0:	4b50      	ldr	r3, [pc, #320]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fce2:	689b      	ldr	r3, [r3, #8]
 800fce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	494d      	ldr	r1, [pc, #308]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fcee:	4313      	orrs	r3, r2
 800fcf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f003 0301 	and.w	r3, r3, #1
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d044      	beq.n	800fd88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d107      	bne.n	800fd16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fd06:	4b47      	ldr	r3, [pc, #284]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d119      	bne.n	800fd46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fd12:	2301      	movs	r3, #1
 800fd14:	e07f      	b.n	800fe16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	2b02      	cmp	r3, #2
 800fd1c:	d003      	beq.n	800fd26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fd22:	2b03      	cmp	r3, #3
 800fd24:	d107      	bne.n	800fd36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fd26:	4b3f      	ldr	r3, [pc, #252]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d109      	bne.n	800fd46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fd32:	2301      	movs	r3, #1
 800fd34:	e06f      	b.n	800fe16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fd36:	4b3b      	ldr	r3, [pc, #236]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f003 0302 	and.w	r3, r3, #2
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d101      	bne.n	800fd46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fd42:	2301      	movs	r3, #1
 800fd44:	e067      	b.n	800fe16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800fd46:	4b37      	ldr	r3, [pc, #220]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fd48:	689b      	ldr	r3, [r3, #8]
 800fd4a:	f023 0203 	bic.w	r2, r3, #3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	4934      	ldr	r1, [pc, #208]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fd54:	4313      	orrs	r3, r2
 800fd56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fd58:	f7fb fc42 	bl	800b5e0 <HAL_GetTick>
 800fd5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fd5e:	e00a      	b.n	800fd76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fd60:	f7fb fc3e 	bl	800b5e0 <HAL_GetTick>
 800fd64:	4602      	mov	r2, r0
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	1ad3      	subs	r3, r2, r3
 800fd6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d901      	bls.n	800fd76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800fd72:	2303      	movs	r3, #3
 800fd74:	e04f      	b.n	800fe16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fd76:	4b2b      	ldr	r3, [pc, #172]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fd78:	689b      	ldr	r3, [r3, #8]
 800fd7a:	f003 020c 	and.w	r2, r3, #12
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	009b      	lsls	r3, r3, #2
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d1eb      	bne.n	800fd60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fd88:	4b25      	ldr	r3, [pc, #148]	; (800fe20 <HAL_RCC_ClockConfig+0x1b8>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f003 0307 	and.w	r3, r3, #7
 800fd90:	683a      	ldr	r2, [r7, #0]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d20c      	bcs.n	800fdb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fd96:	4b22      	ldr	r3, [pc, #136]	; (800fe20 <HAL_RCC_ClockConfig+0x1b8>)
 800fd98:	683a      	ldr	r2, [r7, #0]
 800fd9a:	b2d2      	uxtb	r2, r2
 800fd9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fd9e:	4b20      	ldr	r3, [pc, #128]	; (800fe20 <HAL_RCC_ClockConfig+0x1b8>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f003 0307 	and.w	r3, r3, #7
 800fda6:	683a      	ldr	r2, [r7, #0]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d001      	beq.n	800fdb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800fdac:	2301      	movs	r3, #1
 800fdae:	e032      	b.n	800fe16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f003 0304 	and.w	r3, r3, #4
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d008      	beq.n	800fdce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fdbc:	4b19      	ldr	r3, [pc, #100]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fdbe:	689b      	ldr	r3, [r3, #8]
 800fdc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	4916      	ldr	r1, [pc, #88]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fdca:	4313      	orrs	r3, r2
 800fdcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	f003 0308 	and.w	r3, r3, #8
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d009      	beq.n	800fdee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fdda:	4b12      	ldr	r3, [pc, #72]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fddc:	689b      	ldr	r3, [r3, #8]
 800fdde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	691b      	ldr	r3, [r3, #16]
 800fde6:	00db      	lsls	r3, r3, #3
 800fde8:	490e      	ldr	r1, [pc, #56]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fdea:	4313      	orrs	r3, r2
 800fdec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800fdee:	f000 f821 	bl	800fe34 <HAL_RCC_GetSysClockFreq>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	4b0b      	ldr	r3, [pc, #44]	; (800fe24 <HAL_RCC_ClockConfig+0x1bc>)
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	091b      	lsrs	r3, r3, #4
 800fdfa:	f003 030f 	and.w	r3, r3, #15
 800fdfe:	490a      	ldr	r1, [pc, #40]	; (800fe28 <HAL_RCC_ClockConfig+0x1c0>)
 800fe00:	5ccb      	ldrb	r3, [r1, r3]
 800fe02:	fa22 f303 	lsr.w	r3, r2, r3
 800fe06:	4a09      	ldr	r2, [pc, #36]	; (800fe2c <HAL_RCC_ClockConfig+0x1c4>)
 800fe08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800fe0a:	4b09      	ldr	r3, [pc, #36]	; (800fe30 <HAL_RCC_ClockConfig+0x1c8>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fb fba2 	bl	800b558 <HAL_InitTick>

  return HAL_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	40023c00 	.word	0x40023c00
 800fe24:	40023800 	.word	0x40023800
 800fe28:	08027f2c 	.word	0x08027f2c
 800fe2c:	20000038 	.word	0x20000038
 800fe30:	2000003c 	.word	0x2000003c

0800fe34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fe34:	b5b0      	push	{r4, r5, r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	6079      	str	r1, [r7, #4]
 800fe3e:	2100      	movs	r1, #0
 800fe40:	60f9      	str	r1, [r7, #12]
 800fe42:	2100      	movs	r1, #0
 800fe44:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800fe46:	2100      	movs	r1, #0
 800fe48:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fe4a:	4952      	ldr	r1, [pc, #328]	; (800ff94 <HAL_RCC_GetSysClockFreq+0x160>)
 800fe4c:	6889      	ldr	r1, [r1, #8]
 800fe4e:	f001 010c 	and.w	r1, r1, #12
 800fe52:	2908      	cmp	r1, #8
 800fe54:	d00d      	beq.n	800fe72 <HAL_RCC_GetSysClockFreq+0x3e>
 800fe56:	2908      	cmp	r1, #8
 800fe58:	f200 8094 	bhi.w	800ff84 <HAL_RCC_GetSysClockFreq+0x150>
 800fe5c:	2900      	cmp	r1, #0
 800fe5e:	d002      	beq.n	800fe66 <HAL_RCC_GetSysClockFreq+0x32>
 800fe60:	2904      	cmp	r1, #4
 800fe62:	d003      	beq.n	800fe6c <HAL_RCC_GetSysClockFreq+0x38>
 800fe64:	e08e      	b.n	800ff84 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fe66:	4b4c      	ldr	r3, [pc, #304]	; (800ff98 <HAL_RCC_GetSysClockFreq+0x164>)
 800fe68:	60bb      	str	r3, [r7, #8]
       break;
 800fe6a:	e08e      	b.n	800ff8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800fe6c:	4b4b      	ldr	r3, [pc, #300]	; (800ff9c <HAL_RCC_GetSysClockFreq+0x168>)
 800fe6e:	60bb      	str	r3, [r7, #8]
      break;
 800fe70:	e08b      	b.n	800ff8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fe72:	4948      	ldr	r1, [pc, #288]	; (800ff94 <HAL_RCC_GetSysClockFreq+0x160>)
 800fe74:	6849      	ldr	r1, [r1, #4]
 800fe76:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800fe7a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800fe7c:	4945      	ldr	r1, [pc, #276]	; (800ff94 <HAL_RCC_GetSysClockFreq+0x160>)
 800fe7e:	6849      	ldr	r1, [r1, #4]
 800fe80:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800fe84:	2900      	cmp	r1, #0
 800fe86:	d024      	beq.n	800fed2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fe88:	4942      	ldr	r1, [pc, #264]	; (800ff94 <HAL_RCC_GetSysClockFreq+0x160>)
 800fe8a:	6849      	ldr	r1, [r1, #4]
 800fe8c:	0989      	lsrs	r1, r1, #6
 800fe8e:	4608      	mov	r0, r1
 800fe90:	f04f 0100 	mov.w	r1, #0
 800fe94:	f240 14ff 	movw	r4, #511	; 0x1ff
 800fe98:	f04f 0500 	mov.w	r5, #0
 800fe9c:	ea00 0204 	and.w	r2, r0, r4
 800fea0:	ea01 0305 	and.w	r3, r1, r5
 800fea4:	493d      	ldr	r1, [pc, #244]	; (800ff9c <HAL_RCC_GetSysClockFreq+0x168>)
 800fea6:	fb01 f003 	mul.w	r0, r1, r3
 800feaa:	2100      	movs	r1, #0
 800feac:	fb01 f102 	mul.w	r1, r1, r2
 800feb0:	1844      	adds	r4, r0, r1
 800feb2:	493a      	ldr	r1, [pc, #232]	; (800ff9c <HAL_RCC_GetSysClockFreq+0x168>)
 800feb4:	fba2 0101 	umull	r0, r1, r2, r1
 800feb8:	1863      	adds	r3, r4, r1
 800feba:	4619      	mov	r1, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	461a      	mov	r2, r3
 800fec0:	f04f 0300 	mov.w	r3, #0
 800fec4:	f7f0 fef8 	bl	8000cb8 <__aeabi_uldivmod>
 800fec8:	4602      	mov	r2, r0
 800feca:	460b      	mov	r3, r1
 800fecc:	4613      	mov	r3, r2
 800fece:	60fb      	str	r3, [r7, #12]
 800fed0:	e04a      	b.n	800ff68 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fed2:	4b30      	ldr	r3, [pc, #192]	; (800ff94 <HAL_RCC_GetSysClockFreq+0x160>)
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	099b      	lsrs	r3, r3, #6
 800fed8:	461a      	mov	r2, r3
 800feda:	f04f 0300 	mov.w	r3, #0
 800fede:	f240 10ff 	movw	r0, #511	; 0x1ff
 800fee2:	f04f 0100 	mov.w	r1, #0
 800fee6:	ea02 0400 	and.w	r4, r2, r0
 800feea:	ea03 0501 	and.w	r5, r3, r1
 800feee:	4620      	mov	r0, r4
 800fef0:	4629      	mov	r1, r5
 800fef2:	f04f 0200 	mov.w	r2, #0
 800fef6:	f04f 0300 	mov.w	r3, #0
 800fefa:	014b      	lsls	r3, r1, #5
 800fefc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ff00:	0142      	lsls	r2, r0, #5
 800ff02:	4610      	mov	r0, r2
 800ff04:	4619      	mov	r1, r3
 800ff06:	1b00      	subs	r0, r0, r4
 800ff08:	eb61 0105 	sbc.w	r1, r1, r5
 800ff0c:	f04f 0200 	mov.w	r2, #0
 800ff10:	f04f 0300 	mov.w	r3, #0
 800ff14:	018b      	lsls	r3, r1, #6
 800ff16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ff1a:	0182      	lsls	r2, r0, #6
 800ff1c:	1a12      	subs	r2, r2, r0
 800ff1e:	eb63 0301 	sbc.w	r3, r3, r1
 800ff22:	f04f 0000 	mov.w	r0, #0
 800ff26:	f04f 0100 	mov.w	r1, #0
 800ff2a:	00d9      	lsls	r1, r3, #3
 800ff2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ff30:	00d0      	lsls	r0, r2, #3
 800ff32:	4602      	mov	r2, r0
 800ff34:	460b      	mov	r3, r1
 800ff36:	1912      	adds	r2, r2, r4
 800ff38:	eb45 0303 	adc.w	r3, r5, r3
 800ff3c:	f04f 0000 	mov.w	r0, #0
 800ff40:	f04f 0100 	mov.w	r1, #0
 800ff44:	0299      	lsls	r1, r3, #10
 800ff46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ff4a:	0290      	lsls	r0, r2, #10
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	460b      	mov	r3, r1
 800ff50:	4610      	mov	r0, r2
 800ff52:	4619      	mov	r1, r3
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	461a      	mov	r2, r3
 800ff58:	f04f 0300 	mov.w	r3, #0
 800ff5c:	f7f0 feac 	bl	8000cb8 <__aeabi_uldivmod>
 800ff60:	4602      	mov	r2, r0
 800ff62:	460b      	mov	r3, r1
 800ff64:	4613      	mov	r3, r2
 800ff66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ff68:	4b0a      	ldr	r3, [pc, #40]	; (800ff94 <HAL_RCC_GetSysClockFreq+0x160>)
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	0c1b      	lsrs	r3, r3, #16
 800ff6e:	f003 0303 	and.w	r3, r3, #3
 800ff72:	3301      	adds	r3, #1
 800ff74:	005b      	lsls	r3, r3, #1
 800ff76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ff78:	68fa      	ldr	r2, [r7, #12]
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff80:	60bb      	str	r3, [r7, #8]
      break;
 800ff82:	e002      	b.n	800ff8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ff84:	4b04      	ldr	r3, [pc, #16]	; (800ff98 <HAL_RCC_GetSysClockFreq+0x164>)
 800ff86:	60bb      	str	r3, [r7, #8]
      break;
 800ff88:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ff8a:	68bb      	ldr	r3, [r7, #8]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bdb0      	pop	{r4, r5, r7, pc}
 800ff94:	40023800 	.word	0x40023800
 800ff98:	00f42400 	.word	0x00f42400
 800ff9c:	017d7840 	.word	0x017d7840

0800ffa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ffa4:	4b03      	ldr	r3, [pc, #12]	; (800ffb4 <HAL_RCC_GetHCLKFreq+0x14>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr
 800ffb2:	bf00      	nop
 800ffb4:	20000038 	.word	0x20000038

0800ffb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ffbc:	f7ff fff0 	bl	800ffa0 <HAL_RCC_GetHCLKFreq>
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	4b05      	ldr	r3, [pc, #20]	; (800ffd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	0a9b      	lsrs	r3, r3, #10
 800ffc8:	f003 0307 	and.w	r3, r3, #7
 800ffcc:	4903      	ldr	r1, [pc, #12]	; (800ffdc <HAL_RCC_GetPCLK1Freq+0x24>)
 800ffce:	5ccb      	ldrb	r3, [r1, r3]
 800ffd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	40023800 	.word	0x40023800
 800ffdc:	08027f3c 	.word	0x08027f3c

0800ffe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ffe4:	f7ff ffdc 	bl	800ffa0 <HAL_RCC_GetHCLKFreq>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	4b05      	ldr	r3, [pc, #20]	; (8010000 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	0b5b      	lsrs	r3, r3, #13
 800fff0:	f003 0307 	and.w	r3, r3, #7
 800fff4:	4903      	ldr	r1, [pc, #12]	; (8010004 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fff6:	5ccb      	ldrb	r3, [r1, r3]
 800fff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	40023800 	.word	0x40023800
 8010004:	08027f3c 	.word	0x08027f3c

08010008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d101      	bne.n	801001a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010016:	2301      	movs	r3, #1
 8010018:	e07b      	b.n	8010112 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001e:	2b00      	cmp	r3, #0
 8010020:	d108      	bne.n	8010034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801002a:	d009      	beq.n	8010040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	61da      	str	r2, [r3, #28]
 8010032:	e005      	b.n	8010040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2200      	movs	r2, #0
 8010038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2200      	movs	r2, #0
 801003e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2200      	movs	r2, #0
 8010044:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801004c:	b2db      	uxtb	r3, r3
 801004e:	2b00      	cmp	r3, #0
 8010050:	d106      	bne.n	8010060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2200      	movs	r2, #0
 8010056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7fa fb04 	bl	800a668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2202      	movs	r2, #2
 8010064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	681a      	ldr	r2, [r3, #0]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010076:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	689b      	ldr	r3, [r3, #8]
 8010084:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010088:	431a      	orrs	r2, r3
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010092:	431a      	orrs	r2, r3
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	691b      	ldr	r3, [r3, #16]
 8010098:	f003 0302 	and.w	r3, r3, #2
 801009c:	431a      	orrs	r2, r3
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	695b      	ldr	r3, [r3, #20]
 80100a2:	f003 0301 	and.w	r3, r3, #1
 80100a6:	431a      	orrs	r2, r3
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	699b      	ldr	r3, [r3, #24]
 80100ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80100b0:	431a      	orrs	r2, r3
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	69db      	ldr	r3, [r3, #28]
 80100b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80100ba:	431a      	orrs	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6a1b      	ldr	r3, [r3, #32]
 80100c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100c4:	ea42 0103 	orr.w	r1, r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	430a      	orrs	r2, r1
 80100d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	699b      	ldr	r3, [r3, #24]
 80100dc:	0c1b      	lsrs	r3, r3, #16
 80100de:	f003 0104 	and.w	r1, r3, #4
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e6:	f003 0210 	and.w	r2, r3, #16
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	430a      	orrs	r2, r1
 80100f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	69da      	ldr	r2, [r3, #28]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010100:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2201      	movs	r2, #1
 801010c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010110:	2300      	movs	r3, #0
}
 8010112:	4618      	mov	r0, r3
 8010114:	3708      	adds	r7, #8
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}

0801011a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801011a:	b580      	push	{r7, lr}
 801011c:	b08c      	sub	sp, #48	; 0x30
 801011e:	af00      	add	r7, sp, #0
 8010120:	60f8      	str	r0, [r7, #12]
 8010122:	60b9      	str	r1, [r7, #8]
 8010124:	607a      	str	r2, [r7, #4]
 8010126:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010128:	2301      	movs	r3, #1
 801012a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801012c:	2300      	movs	r3, #0
 801012e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010138:	2b01      	cmp	r3, #1
 801013a:	d101      	bne.n	8010140 <HAL_SPI_TransmitReceive+0x26>
 801013c:	2302      	movs	r3, #2
 801013e:	e18a      	b.n	8010456 <HAL_SPI_TransmitReceive+0x33c>
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2201      	movs	r2, #1
 8010144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010148:	f7fb fa4a 	bl	800b5e0 <HAL_GetTick>
 801014c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801015e:	887b      	ldrh	r3, [r7, #2]
 8010160:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010162:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010166:	2b01      	cmp	r3, #1
 8010168:	d00f      	beq.n	801018a <HAL_SPI_TransmitReceive+0x70>
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010170:	d107      	bne.n	8010182 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d103      	bne.n	8010182 <HAL_SPI_TransmitReceive+0x68>
 801017a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801017e:	2b04      	cmp	r3, #4
 8010180:	d003      	beq.n	801018a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010182:	2302      	movs	r3, #2
 8010184:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8010188:	e15b      	b.n	8010442 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d005      	beq.n	801019c <HAL_SPI_TransmitReceive+0x82>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d002      	beq.n	801019c <HAL_SPI_TransmitReceive+0x82>
 8010196:	887b      	ldrh	r3, [r7, #2]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d103      	bne.n	80101a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801019c:	2301      	movs	r3, #1
 801019e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80101a2:	e14e      	b.n	8010442 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	2b04      	cmp	r3, #4
 80101ae:	d003      	beq.n	80101b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	2205      	movs	r2, #5
 80101b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2200      	movs	r2, #0
 80101bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	887a      	ldrh	r2, [r7, #2]
 80101c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	887a      	ldrh	r2, [r7, #2]
 80101ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	68ba      	ldr	r2, [r7, #8]
 80101d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	887a      	ldrh	r2, [r7, #2]
 80101da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	887a      	ldrh	r2, [r7, #2]
 80101e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	2200      	movs	r2, #0
 80101e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2200      	movs	r2, #0
 80101ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101f8:	2b40      	cmp	r3, #64	; 0x40
 80101fa:	d007      	beq.n	801020c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801020a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010214:	d178      	bne.n	8010308 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d002      	beq.n	8010224 <HAL_SPI_TransmitReceive+0x10a>
 801021e:	8b7b      	ldrh	r3, [r7, #26]
 8010220:	2b01      	cmp	r3, #1
 8010222:	d166      	bne.n	80102f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010228:	881a      	ldrh	r2, [r3, #0]
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010234:	1c9a      	adds	r2, r3, #2
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801023e:	b29b      	uxth	r3, r3
 8010240:	3b01      	subs	r3, #1
 8010242:	b29a      	uxth	r2, r3
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010248:	e053      	b.n	80102f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	689b      	ldr	r3, [r3, #8]
 8010250:	f003 0302 	and.w	r3, r3, #2
 8010254:	2b02      	cmp	r3, #2
 8010256:	d11b      	bne.n	8010290 <HAL_SPI_TransmitReceive+0x176>
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801025c:	b29b      	uxth	r3, r3
 801025e:	2b00      	cmp	r3, #0
 8010260:	d016      	beq.n	8010290 <HAL_SPI_TransmitReceive+0x176>
 8010262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010264:	2b01      	cmp	r3, #1
 8010266:	d113      	bne.n	8010290 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801026c:	881a      	ldrh	r2, [r3, #0]
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010278:	1c9a      	adds	r2, r3, #2
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010282:	b29b      	uxth	r3, r3
 8010284:	3b01      	subs	r3, #1
 8010286:	b29a      	uxth	r2, r3
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801028c:	2300      	movs	r3, #0
 801028e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	689b      	ldr	r3, [r3, #8]
 8010296:	f003 0301 	and.w	r3, r3, #1
 801029a:	2b01      	cmp	r3, #1
 801029c:	d119      	bne.n	80102d2 <HAL_SPI_TransmitReceive+0x1b8>
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d014      	beq.n	80102d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	68da      	ldr	r2, [r3, #12]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102b2:	b292      	uxth	r2, r2
 80102b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102ba:	1c9a      	adds	r2, r3, #2
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	3b01      	subs	r3, #1
 80102c8:	b29a      	uxth	r2, r3
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80102ce:	2301      	movs	r3, #1
 80102d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80102d2:	f7fb f985 	bl	800b5e0 <HAL_GetTick>
 80102d6:	4602      	mov	r2, r0
 80102d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102da:	1ad3      	subs	r3, r2, r3
 80102dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102de:	429a      	cmp	r2, r3
 80102e0:	d807      	bhi.n	80102f2 <HAL_SPI_TransmitReceive+0x1d8>
 80102e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102e8:	d003      	beq.n	80102f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80102ea:	2303      	movs	r3, #3
 80102ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80102f0:	e0a7      	b.n	8010442 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d1a6      	bne.n	801024a <HAL_SPI_TransmitReceive+0x130>
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010300:	b29b      	uxth	r3, r3
 8010302:	2b00      	cmp	r3, #0
 8010304:	d1a1      	bne.n	801024a <HAL_SPI_TransmitReceive+0x130>
 8010306:	e07c      	b.n	8010402 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d002      	beq.n	8010316 <HAL_SPI_TransmitReceive+0x1fc>
 8010310:	8b7b      	ldrh	r3, [r7, #26]
 8010312:	2b01      	cmp	r3, #1
 8010314:	d16b      	bne.n	80103ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	330c      	adds	r3, #12
 8010320:	7812      	ldrb	r2, [r2, #0]
 8010322:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010328:	1c5a      	adds	r2, r3, #1
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010332:	b29b      	uxth	r3, r3
 8010334:	3b01      	subs	r3, #1
 8010336:	b29a      	uxth	r2, r3
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801033c:	e057      	b.n	80103ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	689b      	ldr	r3, [r3, #8]
 8010344:	f003 0302 	and.w	r3, r3, #2
 8010348:	2b02      	cmp	r3, #2
 801034a:	d11c      	bne.n	8010386 <HAL_SPI_TransmitReceive+0x26c>
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010350:	b29b      	uxth	r3, r3
 8010352:	2b00      	cmp	r3, #0
 8010354:	d017      	beq.n	8010386 <HAL_SPI_TransmitReceive+0x26c>
 8010356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010358:	2b01      	cmp	r3, #1
 801035a:	d114      	bne.n	8010386 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	330c      	adds	r3, #12
 8010366:	7812      	ldrb	r2, [r2, #0]
 8010368:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801036e:	1c5a      	adds	r2, r3, #1
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010378:	b29b      	uxth	r3, r3
 801037a:	3b01      	subs	r3, #1
 801037c:	b29a      	uxth	r2, r3
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010382:	2300      	movs	r3, #0
 8010384:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	689b      	ldr	r3, [r3, #8]
 801038c:	f003 0301 	and.w	r3, r3, #1
 8010390:	2b01      	cmp	r3, #1
 8010392:	d119      	bne.n	80103c8 <HAL_SPI_TransmitReceive+0x2ae>
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010398:	b29b      	uxth	r3, r3
 801039a:	2b00      	cmp	r3, #0
 801039c:	d014      	beq.n	80103c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	68da      	ldr	r2, [r3, #12]
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103a8:	b2d2      	uxtb	r2, r2
 80103aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103b0:	1c5a      	adds	r2, r3, #1
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	3b01      	subs	r3, #1
 80103be:	b29a      	uxth	r2, r3
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80103c4:	2301      	movs	r3, #1
 80103c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80103c8:	f7fb f90a 	bl	800b5e0 <HAL_GetTick>
 80103cc:	4602      	mov	r2, r0
 80103ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d803      	bhi.n	80103e0 <HAL_SPI_TransmitReceive+0x2c6>
 80103d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103de:	d102      	bne.n	80103e6 <HAL_SPI_TransmitReceive+0x2cc>
 80103e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d103      	bne.n	80103ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80103e6:	2303      	movs	r3, #3
 80103e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80103ec:	e029      	b.n	8010442 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d1a2      	bne.n	801033e <HAL_SPI_TransmitReceive+0x224>
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d19d      	bne.n	801033e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010404:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010406:	68f8      	ldr	r0, [r7, #12]
 8010408:	f000 f9d0 	bl	80107ac <SPI_EndRxTxTransaction>
 801040c:	4603      	mov	r3, r0
 801040e:	2b00      	cmp	r3, #0
 8010410:	d006      	beq.n	8010420 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8010412:	2301      	movs	r3, #1
 8010414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2220      	movs	r2, #32
 801041c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 801041e:	e010      	b.n	8010442 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	689b      	ldr	r3, [r3, #8]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d10b      	bne.n	8010440 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010428:	2300      	movs	r3, #0
 801042a:	617b      	str	r3, [r7, #20]
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	617b      	str	r3, [r7, #20]
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	689b      	ldr	r3, [r3, #8]
 801043a:	617b      	str	r3, [r7, #20]
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	e000      	b.n	8010442 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8010440:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2201      	movs	r2, #1
 8010446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	2200      	movs	r2, #0
 801044e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010452:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010456:	4618      	mov	r0, r3
 8010458:	3730      	adds	r7, #48	; 0x30
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
	...

08010460 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b088      	sub	sp, #32
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	689b      	ldr	r3, [r3, #8]
 8010476:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	099b      	lsrs	r3, r3, #6
 801047c:	f003 0301 	and.w	r3, r3, #1
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10f      	bne.n	80104a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801048a:	2b00      	cmp	r3, #0
 801048c:	d00a      	beq.n	80104a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801048e:	69fb      	ldr	r3, [r7, #28]
 8010490:	099b      	lsrs	r3, r3, #6
 8010492:	f003 0301 	and.w	r3, r3, #1
 8010496:	2b00      	cmp	r3, #0
 8010498:	d004      	beq.n	80104a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	4798      	blx	r3
    return;
 80104a2:	e0d7      	b.n	8010654 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	085b      	lsrs	r3, r3, #1
 80104a8:	f003 0301 	and.w	r3, r3, #1
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d00a      	beq.n	80104c6 <HAL_SPI_IRQHandler+0x66>
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	09db      	lsrs	r3, r3, #7
 80104b4:	f003 0301 	and.w	r3, r3, #1
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d004      	beq.n	80104c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	4798      	blx	r3
    return;
 80104c4:	e0c6      	b.n	8010654 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	095b      	lsrs	r3, r3, #5
 80104ca:	f003 0301 	and.w	r3, r3, #1
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d10c      	bne.n	80104ec <HAL_SPI_IRQHandler+0x8c>
 80104d2:	69bb      	ldr	r3, [r7, #24]
 80104d4:	099b      	lsrs	r3, r3, #6
 80104d6:	f003 0301 	and.w	r3, r3, #1
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d106      	bne.n	80104ec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	0a1b      	lsrs	r3, r3, #8
 80104e2:	f003 0301 	and.w	r3, r3, #1
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	f000 80b4 	beq.w	8010654 <HAL_SPI_IRQHandler+0x1f4>
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	095b      	lsrs	r3, r3, #5
 80104f0:	f003 0301 	and.w	r3, r3, #1
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f000 80ad 	beq.w	8010654 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	099b      	lsrs	r3, r3, #6
 80104fe:	f003 0301 	and.w	r3, r3, #1
 8010502:	2b00      	cmp	r3, #0
 8010504:	d023      	beq.n	801054e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801050c:	b2db      	uxtb	r3, r3
 801050e:	2b03      	cmp	r3, #3
 8010510:	d011      	beq.n	8010536 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010516:	f043 0204 	orr.w	r2, r3, #4
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801051e:	2300      	movs	r3, #0
 8010520:	617b      	str	r3, [r7, #20]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	617b      	str	r3, [r7, #20]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	689b      	ldr	r3, [r3, #8]
 8010530:	617b      	str	r3, [r7, #20]
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	e00b      	b.n	801054e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010536:	2300      	movs	r3, #0
 8010538:	613b      	str	r3, [r7, #16]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	68db      	ldr	r3, [r3, #12]
 8010540:	613b      	str	r3, [r7, #16]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	689b      	ldr	r3, [r3, #8]
 8010548:	613b      	str	r3, [r7, #16]
 801054a:	693b      	ldr	r3, [r7, #16]
        return;
 801054c:	e082      	b.n	8010654 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801054e:	69bb      	ldr	r3, [r7, #24]
 8010550:	095b      	lsrs	r3, r3, #5
 8010552:	f003 0301 	and.w	r3, r3, #1
 8010556:	2b00      	cmp	r3, #0
 8010558:	d014      	beq.n	8010584 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801055e:	f043 0201 	orr.w	r2, r3, #1
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010566:	2300      	movs	r3, #0
 8010568:	60fb      	str	r3, [r7, #12]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	60fb      	str	r3, [r7, #12]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	681a      	ldr	r2, [r3, #0]
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010580:	601a      	str	r2, [r3, #0]
 8010582:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8010584:	69bb      	ldr	r3, [r7, #24]
 8010586:	0a1b      	lsrs	r3, r3, #8
 8010588:	f003 0301 	and.w	r3, r3, #1
 801058c:	2b00      	cmp	r3, #0
 801058e:	d00c      	beq.n	80105aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010594:	f043 0208 	orr.w	r2, r3, #8
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801059c:	2300      	movs	r3, #0
 801059e:	60bb      	str	r3, [r7, #8]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	689b      	ldr	r3, [r3, #8]
 80105a6:	60bb      	str	r3, [r7, #8]
 80105a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d04f      	beq.n	8010652 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	685a      	ldr	r2, [r3, #4]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80105c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2201      	movs	r2, #1
 80105c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	f003 0302 	and.w	r3, r3, #2
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d104      	bne.n	80105de <HAL_SPI_IRQHandler+0x17e>
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	f003 0301 	and.w	r3, r3, #1
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d034      	beq.n	8010648 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	685a      	ldr	r2, [r3, #4]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f022 0203 	bic.w	r2, r2, #3
 80105ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d011      	beq.n	801061a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105fa:	4a18      	ldr	r2, [pc, #96]	; (801065c <HAL_SPI_IRQHandler+0x1fc>)
 80105fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010602:	4618      	mov	r0, r3
 8010604:	f7fb fb32 	bl	800bc6c <HAL_DMA_Abort_IT>
 8010608:	4603      	mov	r3, r0
 801060a:	2b00      	cmp	r3, #0
 801060c:	d005      	beq.n	801061a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801061e:	2b00      	cmp	r3, #0
 8010620:	d016      	beq.n	8010650 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010626:	4a0d      	ldr	r2, [pc, #52]	; (801065c <HAL_SPI_IRQHandler+0x1fc>)
 8010628:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801062e:	4618      	mov	r0, r3
 8010630:	f7fb fb1c 	bl	800bc6c <HAL_DMA_Abort_IT>
 8010634:	4603      	mov	r3, r0
 8010636:	2b00      	cmp	r3, #0
 8010638:	d00a      	beq.n	8010650 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801063e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8010646:	e003      	b.n	8010650 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f000 f809 	bl	8010660 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801064e:	e000      	b.n	8010652 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8010650:	bf00      	nop
    return;
 8010652:	bf00      	nop
  }
}
 8010654:	3720      	adds	r7, #32
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	08010675 	.word	0x08010675

08010660 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010668:	bf00      	nop
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr

08010674 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010680:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2200      	movs	r2, #0
 8010686:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2200      	movs	r2, #0
 801068c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801068e:	68f8      	ldr	r0, [r7, #12]
 8010690:	f7ff ffe6 	bl	8010660 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010694:	bf00      	nop
 8010696:	3710      	adds	r7, #16
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b088      	sub	sp, #32
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	603b      	str	r3, [r7, #0]
 80106a8:	4613      	mov	r3, r2
 80106aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80106ac:	f7fa ff98 	bl	800b5e0 <HAL_GetTick>
 80106b0:	4602      	mov	r2, r0
 80106b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b4:	1a9b      	subs	r3, r3, r2
 80106b6:	683a      	ldr	r2, [r7, #0]
 80106b8:	4413      	add	r3, r2
 80106ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80106bc:	f7fa ff90 	bl	800b5e0 <HAL_GetTick>
 80106c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80106c2:	4b39      	ldr	r3, [pc, #228]	; (80107a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	015b      	lsls	r3, r3, #5
 80106c8:	0d1b      	lsrs	r3, r3, #20
 80106ca:	69fa      	ldr	r2, [r7, #28]
 80106cc:	fb02 f303 	mul.w	r3, r2, r3
 80106d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80106d2:	e054      	b.n	801077e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106da:	d050      	beq.n	801077e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80106dc:	f7fa ff80 	bl	800b5e0 <HAL_GetTick>
 80106e0:	4602      	mov	r2, r0
 80106e2:	69bb      	ldr	r3, [r7, #24]
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	69fa      	ldr	r2, [r7, #28]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d902      	bls.n	80106f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80106ec:	69fb      	ldr	r3, [r7, #28]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d13d      	bne.n	801076e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	685a      	ldr	r2, [r3, #4]
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010700:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801070a:	d111      	bne.n	8010730 <SPI_WaitFlagStateUntilTimeout+0x94>
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	689b      	ldr	r3, [r3, #8]
 8010710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010714:	d004      	beq.n	8010720 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	689b      	ldr	r3, [r3, #8]
 801071a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801071e:	d107      	bne.n	8010730 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	681a      	ldr	r2, [r3, #0]
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801072e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010738:	d10f      	bne.n	801075a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010748:	601a      	str	r2, [r3, #0]
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	681a      	ldr	r2, [r3, #0]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	2201      	movs	r2, #1
 801075e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2200      	movs	r2, #0
 8010766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801076a:	2303      	movs	r3, #3
 801076c:	e017      	b.n	801079e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d101      	bne.n	8010778 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010774:	2300      	movs	r3, #0
 8010776:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	3b01      	subs	r3, #1
 801077c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	689a      	ldr	r2, [r3, #8]
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	4013      	ands	r3, r2
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	429a      	cmp	r2, r3
 801078c:	bf0c      	ite	eq
 801078e:	2301      	moveq	r3, #1
 8010790:	2300      	movne	r3, #0
 8010792:	b2db      	uxtb	r3, r3
 8010794:	461a      	mov	r2, r3
 8010796:	79fb      	ldrb	r3, [r7, #7]
 8010798:	429a      	cmp	r2, r3
 801079a:	d19b      	bne.n	80106d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801079c:	2300      	movs	r3, #0
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3720      	adds	r7, #32
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	20000038 	.word	0x20000038

080107ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b088      	sub	sp, #32
 80107b0:	af02      	add	r7, sp, #8
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80107b8:	4b1b      	ldr	r3, [pc, #108]	; (8010828 <SPI_EndRxTxTransaction+0x7c>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	4a1b      	ldr	r2, [pc, #108]	; (801082c <SPI_EndRxTxTransaction+0x80>)
 80107be:	fba2 2303 	umull	r2, r3, r2, r3
 80107c2:	0d5b      	lsrs	r3, r3, #21
 80107c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80107c8:	fb02 f303 	mul.w	r3, r2, r3
 80107cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80107d6:	d112      	bne.n	80107fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	9300      	str	r3, [sp, #0]
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	2200      	movs	r2, #0
 80107e0:	2180      	movs	r1, #128	; 0x80
 80107e2:	68f8      	ldr	r0, [r7, #12]
 80107e4:	f7ff ff5a 	bl	801069c <SPI_WaitFlagStateUntilTimeout>
 80107e8:	4603      	mov	r3, r0
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d016      	beq.n	801081c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107f2:	f043 0220 	orr.w	r2, r3, #32
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80107fa:	2303      	movs	r3, #3
 80107fc:	e00f      	b.n	801081e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00a      	beq.n	801081a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	3b01      	subs	r3, #1
 8010808:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010814:	2b80      	cmp	r3, #128	; 0x80
 8010816:	d0f2      	beq.n	80107fe <SPI_EndRxTxTransaction+0x52>
 8010818:	e000      	b.n	801081c <SPI_EndRxTxTransaction+0x70>
        break;
 801081a:	bf00      	nop
  }

  return HAL_OK;
 801081c:	2300      	movs	r3, #0
}
 801081e:	4618      	mov	r0, r3
 8010820:	3718      	adds	r7, #24
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	20000038 	.word	0x20000038
 801082c:	165e9f81 	.word	0x165e9f81

08010830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d101      	bne.n	8010842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801083e:	2301      	movs	r3, #1
 8010840:	e041      	b.n	80108c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010848:	b2db      	uxtb	r3, r3
 801084a:	2b00      	cmp	r3, #0
 801084c:	d106      	bne.n	801085c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2200      	movs	r2, #0
 8010852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f7fa fa84 	bl	800ad64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2202      	movs	r2, #2
 8010860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681a      	ldr	r2, [r3, #0]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	3304      	adds	r3, #4
 801086c:	4619      	mov	r1, r3
 801086e:	4610      	mov	r0, r2
 8010870:	f000 fb24 	bl	8010ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2201      	movs	r2, #1
 8010878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2201      	movs	r2, #1
 8010880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2201      	movs	r2, #1
 8010888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2201      	movs	r2, #1
 8010890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2201      	movs	r2, #1
 8010898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2201      	movs	r2, #1
 80108a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2201      	movs	r2, #1
 80108a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2201      	movs	r2, #1
 80108b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2201      	movs	r2, #1
 80108b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2201      	movs	r2, #1
 80108c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80108c4:	2300      	movs	r3, #0
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3708      	adds	r7, #8
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
	...

080108d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b085      	sub	sp, #20
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d001      	beq.n	80108e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80108e4:	2301      	movs	r3, #1
 80108e6:	e044      	b.n	8010972 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2202      	movs	r2, #2
 80108ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	68da      	ldr	r2, [r3, #12]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	f042 0201 	orr.w	r2, r2, #1
 80108fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4a1e      	ldr	r2, [pc, #120]	; (8010980 <HAL_TIM_Base_Start_IT+0xb0>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d018      	beq.n	801093c <HAL_TIM_Base_Start_IT+0x6c>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010912:	d013      	beq.n	801093c <HAL_TIM_Base_Start_IT+0x6c>
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	4a1a      	ldr	r2, [pc, #104]	; (8010984 <HAL_TIM_Base_Start_IT+0xb4>)
 801091a:	4293      	cmp	r3, r2
 801091c:	d00e      	beq.n	801093c <HAL_TIM_Base_Start_IT+0x6c>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	4a19      	ldr	r2, [pc, #100]	; (8010988 <HAL_TIM_Base_Start_IT+0xb8>)
 8010924:	4293      	cmp	r3, r2
 8010926:	d009      	beq.n	801093c <HAL_TIM_Base_Start_IT+0x6c>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4a17      	ldr	r2, [pc, #92]	; (801098c <HAL_TIM_Base_Start_IT+0xbc>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d004      	beq.n	801093c <HAL_TIM_Base_Start_IT+0x6c>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	4a16      	ldr	r2, [pc, #88]	; (8010990 <HAL_TIM_Base_Start_IT+0xc0>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d111      	bne.n	8010960 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	689b      	ldr	r3, [r3, #8]
 8010942:	f003 0307 	and.w	r3, r3, #7
 8010946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2b06      	cmp	r3, #6
 801094c:	d010      	beq.n	8010970 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f042 0201 	orr.w	r2, r2, #1
 801095c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801095e:	e007      	b.n	8010970 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	f042 0201 	orr.w	r2, r2, #1
 801096e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010970:	2300      	movs	r3, #0
}
 8010972:	4618      	mov	r0, r3
 8010974:	3714      	adds	r7, #20
 8010976:	46bd      	mov	sp, r7
 8010978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097c:	4770      	bx	lr
 801097e:	bf00      	nop
 8010980:	40010000 	.word	0x40010000
 8010984:	40000400 	.word	0x40000400
 8010988:	40000800 	.word	0x40000800
 801098c:	40000c00 	.word	0x40000c00
 8010990:	40014000 	.word	0x40014000

08010994 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8010994:	b480      	push	{r7}
 8010996:	b083      	sub	sp, #12
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	68da      	ldr	r2, [r3, #12]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f022 0201 	bic.w	r2, r2, #1
 80109aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	6a1a      	ldr	r2, [r3, #32]
 80109b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80109b6:	4013      	ands	r3, r2
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d10f      	bne.n	80109dc <HAL_TIM_Base_Stop_IT+0x48>
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	6a1a      	ldr	r2, [r3, #32]
 80109c2:	f240 4344 	movw	r3, #1092	; 0x444
 80109c6:	4013      	ands	r3, r2
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d107      	bne.n	80109dc <HAL_TIM_Base_Stop_IT+0x48>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	681a      	ldr	r2, [r3, #0]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f022 0201 	bic.w	r2, r2, #1
 80109da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2201      	movs	r2, #1
 80109e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80109e4:	2300      	movs	r3, #0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	370c      	adds	r7, #12
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr

080109f2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80109f2:	b580      	push	{r7, lr}
 80109f4:	b086      	sub	sp, #24
 80109f6:	af00      	add	r7, sp, #0
 80109f8:	6078      	str	r0, [r7, #4]
 80109fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d101      	bne.n	8010a06 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010a02:	2301      	movs	r3, #1
 8010a04:	e097      	b.n	8010b36 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d106      	bne.n	8010a20 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2200      	movs	r2, #0
 8010a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f7fa f95c 	bl	800acd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2202      	movs	r2, #2
 8010a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	689b      	ldr	r3, [r3, #8]
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	6812      	ldr	r2, [r2, #0]
 8010a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a36:	f023 0307 	bic.w	r3, r3, #7
 8010a3a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681a      	ldr	r2, [r3, #0]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	3304      	adds	r3, #4
 8010a44:	4619      	mov	r1, r3
 8010a46:	4610      	mov	r0, r2
 8010a48:	f000 fa38 	bl	8010ebc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	689b      	ldr	r3, [r3, #8]
 8010a52:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	699b      	ldr	r3, [r3, #24]
 8010a5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	6a1b      	ldr	r3, [r3, #32]
 8010a62:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	697a      	ldr	r2, [r7, #20]
 8010a6a:	4313      	orrs	r3, r2
 8010a6c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a74:	f023 0303 	bic.w	r3, r3, #3
 8010a78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	689a      	ldr	r2, [r3, #8]
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	699b      	ldr	r3, [r3, #24]
 8010a82:	021b      	lsls	r3, r3, #8
 8010a84:	4313      	orrs	r3, r2
 8010a86:	693a      	ldr	r2, [r7, #16]
 8010a88:	4313      	orrs	r3, r2
 8010a8a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8010a92:	f023 030c 	bic.w	r3, r3, #12
 8010a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	68da      	ldr	r2, [r3, #12]
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	69db      	ldr	r3, [r3, #28]
 8010aac:	021b      	lsls	r3, r3, #8
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	693a      	ldr	r2, [r7, #16]
 8010ab2:	4313      	orrs	r3, r2
 8010ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	691b      	ldr	r3, [r3, #16]
 8010aba:	011a      	lsls	r2, r3, #4
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	6a1b      	ldr	r3, [r3, #32]
 8010ac0:	031b      	lsls	r3, r3, #12
 8010ac2:	4313      	orrs	r3, r2
 8010ac4:	693a      	ldr	r2, [r7, #16]
 8010ac6:	4313      	orrs	r3, r2
 8010ac8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8010ad0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8010ad8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	685a      	ldr	r2, [r3, #4]
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	695b      	ldr	r3, [r3, #20]
 8010ae2:	011b      	lsls	r3, r3, #4
 8010ae4:	4313      	orrs	r3, r2
 8010ae6:	68fa      	ldr	r2, [r7, #12]
 8010ae8:	4313      	orrs	r3, r2
 8010aea:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	697a      	ldr	r2, [r7, #20]
 8010af2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	693a      	ldr	r2, [r7, #16]
 8010afa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	68fa      	ldr	r2, [r7, #12]
 8010b02:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2201      	movs	r2, #1
 8010b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2201      	movs	r2, #1
 8010b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2201      	movs	r2, #1
 8010b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2201      	movs	r2, #1
 8010b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2201      	movs	r2, #1
 8010b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2201      	movs	r2, #1
 8010b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010b34:	2300      	movs	r3, #0
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3718      	adds	r7, #24
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}

08010b3e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b084      	sub	sp, #16
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
 8010b46:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010b4e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010b56:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b5e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b66:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d110      	bne.n	8010b90 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010b6e:	7bfb      	ldrb	r3, [r7, #15]
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d102      	bne.n	8010b7a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8010b74:	7b7b      	ldrb	r3, [r7, #13]
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	d001      	beq.n	8010b7e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	e069      	b.n	8010c52 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2202      	movs	r2, #2
 8010b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2202      	movs	r2, #2
 8010b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010b8e:	e031      	b.n	8010bf4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	2b04      	cmp	r3, #4
 8010b94:	d110      	bne.n	8010bb8 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8010b96:	7bbb      	ldrb	r3, [r7, #14]
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d102      	bne.n	8010ba2 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010b9c:	7b3b      	ldrb	r3, [r7, #12]
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	d001      	beq.n	8010ba6 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	e055      	b.n	8010c52 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2202      	movs	r2, #2
 8010baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2202      	movs	r2, #2
 8010bb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010bb6:	e01d      	b.n	8010bf4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010bb8:	7bfb      	ldrb	r3, [r7, #15]
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d108      	bne.n	8010bd0 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8010bbe:	7bbb      	ldrb	r3, [r7, #14]
 8010bc0:	2b01      	cmp	r3, #1
 8010bc2:	d105      	bne.n	8010bd0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010bc4:	7b7b      	ldrb	r3, [r7, #13]
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d102      	bne.n	8010bd0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010bca:	7b3b      	ldrb	r3, [r7, #12]
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d001      	beq.n	8010bd4 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	e03e      	b.n	8010c52 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2202      	movs	r2, #2
 8010bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2202      	movs	r2, #2
 8010be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2202      	movs	r2, #2
 8010be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2202      	movs	r2, #2
 8010bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d003      	beq.n	8010c02 <HAL_TIM_Encoder_Start+0xc4>
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	2b04      	cmp	r3, #4
 8010bfe:	d008      	beq.n	8010c12 <HAL_TIM_Encoder_Start+0xd4>
 8010c00:	e00f      	b.n	8010c22 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	2201      	movs	r2, #1
 8010c08:	2100      	movs	r1, #0
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f000 f9d6 	bl	8010fbc <TIM_CCxChannelCmd>
      break;
 8010c10:	e016      	b.n	8010c40 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	2201      	movs	r2, #1
 8010c18:	2104      	movs	r1, #4
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f000 f9ce 	bl	8010fbc <TIM_CCxChannelCmd>
      break;
 8010c20:	e00e      	b.n	8010c40 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	2201      	movs	r2, #1
 8010c28:	2100      	movs	r1, #0
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f000 f9c6 	bl	8010fbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	2201      	movs	r2, #1
 8010c36:	2104      	movs	r1, #4
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f000 f9bf 	bl	8010fbc <TIM_CCxChannelCmd>
      break;
 8010c3e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	681a      	ldr	r2, [r3, #0]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	f042 0201 	orr.w	r2, r2, #1
 8010c4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010c50:	2300      	movs	r3, #0
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3710      	adds	r7, #16
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b082      	sub	sp, #8
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	691b      	ldr	r3, [r3, #16]
 8010c68:	f003 0302 	and.w	r3, r3, #2
 8010c6c:	2b02      	cmp	r3, #2
 8010c6e:	d122      	bne.n	8010cb6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	68db      	ldr	r3, [r3, #12]
 8010c76:	f003 0302 	and.w	r3, r3, #2
 8010c7a:	2b02      	cmp	r3, #2
 8010c7c:	d11b      	bne.n	8010cb6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f06f 0202 	mvn.w	r2, #2
 8010c86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	699b      	ldr	r3, [r3, #24]
 8010c94:	f003 0303 	and.w	r3, r3, #3
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d003      	beq.n	8010ca4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f000 f8ee 	bl	8010e7e <HAL_TIM_IC_CaptureCallback>
 8010ca2:	e005      	b.n	8010cb0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f000 f8e0 	bl	8010e6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 f8f1 	bl	8010e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	691b      	ldr	r3, [r3, #16]
 8010cbc:	f003 0304 	and.w	r3, r3, #4
 8010cc0:	2b04      	cmp	r3, #4
 8010cc2:	d122      	bne.n	8010d0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	68db      	ldr	r3, [r3, #12]
 8010cca:	f003 0304 	and.w	r3, r3, #4
 8010cce:	2b04      	cmp	r3, #4
 8010cd0:	d11b      	bne.n	8010d0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	f06f 0204 	mvn.w	r2, #4
 8010cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2202      	movs	r2, #2
 8010ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	699b      	ldr	r3, [r3, #24]
 8010ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d003      	beq.n	8010cf8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 f8c4 	bl	8010e7e <HAL_TIM_IC_CaptureCallback>
 8010cf6:	e005      	b.n	8010d04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f000 f8b6 	bl	8010e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 f8c7 	bl	8010e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2200      	movs	r2, #0
 8010d08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	691b      	ldr	r3, [r3, #16]
 8010d10:	f003 0308 	and.w	r3, r3, #8
 8010d14:	2b08      	cmp	r3, #8
 8010d16:	d122      	bne.n	8010d5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	68db      	ldr	r3, [r3, #12]
 8010d1e:	f003 0308 	and.w	r3, r3, #8
 8010d22:	2b08      	cmp	r3, #8
 8010d24:	d11b      	bne.n	8010d5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f06f 0208 	mvn.w	r2, #8
 8010d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2204      	movs	r2, #4
 8010d34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	69db      	ldr	r3, [r3, #28]
 8010d3c:	f003 0303 	and.w	r3, r3, #3
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d003      	beq.n	8010d4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 f89a 	bl	8010e7e <HAL_TIM_IC_CaptureCallback>
 8010d4a:	e005      	b.n	8010d58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f000 f88c 	bl	8010e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 f89d 	bl	8010e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	691b      	ldr	r3, [r3, #16]
 8010d64:	f003 0310 	and.w	r3, r3, #16
 8010d68:	2b10      	cmp	r3, #16
 8010d6a:	d122      	bne.n	8010db2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	f003 0310 	and.w	r3, r3, #16
 8010d76:	2b10      	cmp	r3, #16
 8010d78:	d11b      	bne.n	8010db2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f06f 0210 	mvn.w	r2, #16
 8010d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2208      	movs	r2, #8
 8010d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	69db      	ldr	r3, [r3, #28]
 8010d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d003      	beq.n	8010da0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f000 f870 	bl	8010e7e <HAL_TIM_IC_CaptureCallback>
 8010d9e:	e005      	b.n	8010dac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f000 f862 	bl	8010e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f000 f873 	bl	8010e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2200      	movs	r2, #0
 8010db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	691b      	ldr	r3, [r3, #16]
 8010db8:	f003 0301 	and.w	r3, r3, #1
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d10e      	bne.n	8010dde <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	f003 0301 	and.w	r3, r3, #1
 8010dca:	2b01      	cmp	r3, #1
 8010dcc:	d107      	bne.n	8010dde <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f06f 0201 	mvn.w	r2, #1
 8010dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f7f5 fa01 	bl	80061e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	691b      	ldr	r3, [r3, #16]
 8010de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010de8:	2b80      	cmp	r3, #128	; 0x80
 8010dea:	d10e      	bne.n	8010e0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	68db      	ldr	r3, [r3, #12]
 8010df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010df6:	2b80      	cmp	r3, #128	; 0x80
 8010df8:	d107      	bne.n	8010e0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f000 f977 	bl	80110f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	691b      	ldr	r3, [r3, #16]
 8010e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e14:	2b40      	cmp	r3, #64	; 0x40
 8010e16:	d10e      	bne.n	8010e36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	68db      	ldr	r3, [r3, #12]
 8010e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e22:	2b40      	cmp	r3, #64	; 0x40
 8010e24:	d107      	bne.n	8010e36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f000 f838 	bl	8010ea6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	691b      	ldr	r3, [r3, #16]
 8010e3c:	f003 0320 	and.w	r3, r3, #32
 8010e40:	2b20      	cmp	r3, #32
 8010e42:	d10e      	bne.n	8010e62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	f003 0320 	and.w	r3, r3, #32
 8010e4e:	2b20      	cmp	r3, #32
 8010e50:	d107      	bne.n	8010e62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	f06f 0220 	mvn.w	r2, #32
 8010e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f000 f941 	bl	80110e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010e62:	bf00      	nop
 8010e64:	3708      	adds	r7, #8
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}

08010e6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010e6a:	b480      	push	{r7}
 8010e6c:	b083      	sub	sp, #12
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010e72:	bf00      	nop
 8010e74:	370c      	adds	r7, #12
 8010e76:	46bd      	mov	sp, r7
 8010e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7c:	4770      	bx	lr

08010e7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010e7e:	b480      	push	{r7}
 8010e80:	b083      	sub	sp, #12
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010e86:	bf00      	nop
 8010e88:	370c      	adds	r7, #12
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e90:	4770      	bx	lr

08010e92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010e92:	b480      	push	{r7}
 8010e94:	b083      	sub	sp, #12
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010e9a:	bf00      	nop
 8010e9c:	370c      	adds	r7, #12
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea4:	4770      	bx	lr

08010ea6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010ea6:	b480      	push	{r7}
 8010ea8:	b083      	sub	sp, #12
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010eae:	bf00      	nop
 8010eb0:	370c      	adds	r7, #12
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr
	...

08010ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b085      	sub	sp, #20
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	4a34      	ldr	r2, [pc, #208]	; (8010fa0 <TIM_Base_SetConfig+0xe4>)
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d00f      	beq.n	8010ef4 <TIM_Base_SetConfig+0x38>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010eda:	d00b      	beq.n	8010ef4 <TIM_Base_SetConfig+0x38>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	4a31      	ldr	r2, [pc, #196]	; (8010fa4 <TIM_Base_SetConfig+0xe8>)
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d007      	beq.n	8010ef4 <TIM_Base_SetConfig+0x38>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4a30      	ldr	r2, [pc, #192]	; (8010fa8 <TIM_Base_SetConfig+0xec>)
 8010ee8:	4293      	cmp	r3, r2
 8010eea:	d003      	beq.n	8010ef4 <TIM_Base_SetConfig+0x38>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	4a2f      	ldr	r2, [pc, #188]	; (8010fac <TIM_Base_SetConfig+0xf0>)
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d108      	bne.n	8010f06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	68fa      	ldr	r2, [r7, #12]
 8010f02:	4313      	orrs	r3, r2
 8010f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	4a25      	ldr	r2, [pc, #148]	; (8010fa0 <TIM_Base_SetConfig+0xe4>)
 8010f0a:	4293      	cmp	r3, r2
 8010f0c:	d01b      	beq.n	8010f46 <TIM_Base_SetConfig+0x8a>
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f14:	d017      	beq.n	8010f46 <TIM_Base_SetConfig+0x8a>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4a22      	ldr	r2, [pc, #136]	; (8010fa4 <TIM_Base_SetConfig+0xe8>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d013      	beq.n	8010f46 <TIM_Base_SetConfig+0x8a>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	4a21      	ldr	r2, [pc, #132]	; (8010fa8 <TIM_Base_SetConfig+0xec>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d00f      	beq.n	8010f46 <TIM_Base_SetConfig+0x8a>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	4a20      	ldr	r2, [pc, #128]	; (8010fac <TIM_Base_SetConfig+0xf0>)
 8010f2a:	4293      	cmp	r3, r2
 8010f2c:	d00b      	beq.n	8010f46 <TIM_Base_SetConfig+0x8a>
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	4a1f      	ldr	r2, [pc, #124]	; (8010fb0 <TIM_Base_SetConfig+0xf4>)
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d007      	beq.n	8010f46 <TIM_Base_SetConfig+0x8a>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	4a1e      	ldr	r2, [pc, #120]	; (8010fb4 <TIM_Base_SetConfig+0xf8>)
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d003      	beq.n	8010f46 <TIM_Base_SetConfig+0x8a>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	4a1d      	ldr	r2, [pc, #116]	; (8010fb8 <TIM_Base_SetConfig+0xfc>)
 8010f42:	4293      	cmp	r3, r2
 8010f44:	d108      	bne.n	8010f58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	68db      	ldr	r3, [r3, #12]
 8010f52:	68fa      	ldr	r2, [r7, #12]
 8010f54:	4313      	orrs	r3, r2
 8010f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	695b      	ldr	r3, [r3, #20]
 8010f62:	4313      	orrs	r3, r2
 8010f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	68fa      	ldr	r2, [r7, #12]
 8010f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	689a      	ldr	r2, [r3, #8]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	4a08      	ldr	r2, [pc, #32]	; (8010fa0 <TIM_Base_SetConfig+0xe4>)
 8010f80:	4293      	cmp	r3, r2
 8010f82:	d103      	bne.n	8010f8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	691a      	ldr	r2, [r3, #16]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2201      	movs	r2, #1
 8010f90:	615a      	str	r2, [r3, #20]
}
 8010f92:	bf00      	nop
 8010f94:	3714      	adds	r7, #20
 8010f96:	46bd      	mov	sp, r7
 8010f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9c:	4770      	bx	lr
 8010f9e:	bf00      	nop
 8010fa0:	40010000 	.word	0x40010000
 8010fa4:	40000400 	.word	0x40000400
 8010fa8:	40000800 	.word	0x40000800
 8010fac:	40000c00 	.word	0x40000c00
 8010fb0:	40014000 	.word	0x40014000
 8010fb4:	40014400 	.word	0x40014400
 8010fb8:	40014800 	.word	0x40014800

08010fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b087      	sub	sp, #28
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	60f8      	str	r0, [r7, #12]
 8010fc4:	60b9      	str	r1, [r7, #8]
 8010fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	f003 031f 	and.w	r3, r3, #31
 8010fce:	2201      	movs	r2, #1
 8010fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8010fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	6a1a      	ldr	r2, [r3, #32]
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	43db      	mvns	r3, r3
 8010fde:	401a      	ands	r2, r3
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	6a1a      	ldr	r2, [r3, #32]
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	f003 031f 	and.w	r3, r3, #31
 8010fee:	6879      	ldr	r1, [r7, #4]
 8010ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8010ff4:	431a      	orrs	r2, r3
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	621a      	str	r2, [r3, #32]
}
 8010ffa:	bf00      	nop
 8010ffc:	371c      	adds	r7, #28
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr
	...

08011008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011008:	b480      	push	{r7}
 801100a:	b085      	sub	sp, #20
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011018:	2b01      	cmp	r3, #1
 801101a:	d101      	bne.n	8011020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801101c:	2302      	movs	r3, #2
 801101e:	e050      	b.n	80110c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2201      	movs	r2, #1
 8011024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2202      	movs	r2, #2
 801102c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	685b      	ldr	r3, [r3, #4]
 8011036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	689b      	ldr	r3, [r3, #8]
 801103e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	68fa      	ldr	r2, [r7, #12]
 801104e:	4313      	orrs	r3, r2
 8011050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	68fa      	ldr	r2, [r7, #12]
 8011058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	4a1c      	ldr	r2, [pc, #112]	; (80110d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8011060:	4293      	cmp	r3, r2
 8011062:	d018      	beq.n	8011096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801106c:	d013      	beq.n	8011096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	4a18      	ldr	r2, [pc, #96]	; (80110d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8011074:	4293      	cmp	r3, r2
 8011076:	d00e      	beq.n	8011096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4a16      	ldr	r2, [pc, #88]	; (80110d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801107e:	4293      	cmp	r3, r2
 8011080:	d009      	beq.n	8011096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	4a15      	ldr	r2, [pc, #84]	; (80110dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d004      	beq.n	8011096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	4a13      	ldr	r2, [pc, #76]	; (80110e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8011092:	4293      	cmp	r3, r2
 8011094:	d10c      	bne.n	80110b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801109c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	68ba      	ldr	r2, [r7, #8]
 80110a4:	4313      	orrs	r3, r2
 80110a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	68ba      	ldr	r2, [r7, #8]
 80110ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2201      	movs	r2, #1
 80110b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2200      	movs	r2, #0
 80110bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80110c0:	2300      	movs	r3, #0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3714      	adds	r7, #20
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr
 80110ce:	bf00      	nop
 80110d0:	40010000 	.word	0x40010000
 80110d4:	40000400 	.word	0x40000400
 80110d8:	40000800 	.word	0x40000800
 80110dc:	40000c00 	.word	0x40000c00
 80110e0:	40014000 	.word	0x40014000

080110e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80110ec:	bf00      	nop
 80110ee:	370c      	adds	r7, #12
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr

080110f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011100:	bf00      	nop
 8011102:	370c      	adds	r7, #12
 8011104:	46bd      	mov	sp, r7
 8011106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110a:	4770      	bx	lr

0801110c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d101      	bne.n	801111e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801111a:	2301      	movs	r3, #1
 801111c:	e03f      	b.n	801119e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011124:	b2db      	uxtb	r3, r3
 8011126:	2b00      	cmp	r3, #0
 8011128:	d106      	bne.n	8011138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	2200      	movs	r2, #0
 801112e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f7fa f852 	bl	800b1dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2224      	movs	r2, #36	; 0x24
 801113c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	68da      	ldr	r2, [r3, #12]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801114e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f000 ff53 	bl	8011ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	691a      	ldr	r2, [r3, #16]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	695a      	ldr	r2, [r3, #20]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	68da      	ldr	r2, [r3, #12]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2200      	movs	r2, #0
 801118a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2220      	movs	r2, #32
 8011190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2220      	movs	r2, #32
 8011198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801119c:	2300      	movs	r3, #0
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3708      	adds	r7, #8
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
	...

080111a8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b08c      	sub	sp, #48	; 0x30
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	4613      	mov	r3, r2
 80111b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	2b20      	cmp	r3, #32
 80111c0:	d165      	bne.n	801128e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d002      	beq.n	80111ce <HAL_UART_Transmit_DMA+0x26>
 80111c8:	88fb      	ldrh	r3, [r7, #6]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d101      	bne.n	80111d2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80111ce:	2301      	movs	r3, #1
 80111d0:	e05e      	b.n	8011290 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d101      	bne.n	80111e0 <HAL_UART_Transmit_DMA+0x38>
 80111dc:	2302      	movs	r3, #2
 80111de:	e057      	b.n	8011290 <HAL_UART_Transmit_DMA+0xe8>
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2201      	movs	r2, #1
 80111e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80111e8:	68ba      	ldr	r2, [r7, #8]
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	88fa      	ldrh	r2, [r7, #6]
 80111f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	88fa      	ldrh	r2, [r7, #6]
 80111f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2200      	movs	r2, #0
 80111fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	2221      	movs	r2, #33	; 0x21
 8011204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801120c:	4a22      	ldr	r2, [pc, #136]	; (8011298 <HAL_UART_Transmit_DMA+0xf0>)
 801120e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011214:	4a21      	ldr	r2, [pc, #132]	; (801129c <HAL_UART_Transmit_DMA+0xf4>)
 8011216:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801121c:	4a20      	ldr	r2, [pc, #128]	; (80112a0 <HAL_UART_Transmit_DMA+0xf8>)
 801121e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011224:	2200      	movs	r2, #0
 8011226:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8011228:	f107 0308 	add.w	r3, r7, #8
 801122c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011234:	6819      	ldr	r1, [r3, #0]
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	3304      	adds	r3, #4
 801123c:	461a      	mov	r2, r3
 801123e:	88fb      	ldrh	r3, [r7, #6]
 8011240:	f7fa fc4c 	bl	800badc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801124c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2200      	movs	r2, #0
 8011252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	3314      	adds	r3, #20
 801125c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801125e:	69bb      	ldr	r3, [r7, #24]
 8011260:	e853 3f00 	ldrex	r3, [r3]
 8011264:	617b      	str	r3, [r7, #20]
   return(result);
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801126c:	62bb      	str	r3, [r7, #40]	; 0x28
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	3314      	adds	r3, #20
 8011274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011276:	627a      	str	r2, [r7, #36]	; 0x24
 8011278:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801127a:	6a39      	ldr	r1, [r7, #32]
 801127c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801127e:	e841 2300 	strex	r3, r2, [r1]
 8011282:	61fb      	str	r3, [r7, #28]
   return(result);
 8011284:	69fb      	ldr	r3, [r7, #28]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d1e5      	bne.n	8011256 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 801128a:	2300      	movs	r3, #0
 801128c:	e000      	b.n	8011290 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 801128e:	2302      	movs	r3, #2
  }
}
 8011290:	4618      	mov	r0, r3
 8011292:	3730      	adds	r7, #48	; 0x30
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}
 8011298:	0801189d 	.word	0x0801189d
 801129c:	08011937 	.word	0x08011937
 80112a0:	08011aaf 	.word	0x08011aaf

080112a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	60f8      	str	r0, [r7, #12]
 80112ac:	60b9      	str	r1, [r7, #8]
 80112ae:	4613      	mov	r3, r2
 80112b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80112b8:	b2db      	uxtb	r3, r3
 80112ba:	2b20      	cmp	r3, #32
 80112bc:	d11d      	bne.n	80112fa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d002      	beq.n	80112ca <HAL_UART_Receive_DMA+0x26>
 80112c4:	88fb      	ldrh	r3, [r7, #6]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d101      	bne.n	80112ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80112ca:	2301      	movs	r3, #1
 80112cc:	e016      	b.n	80112fc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	d101      	bne.n	80112dc <HAL_UART_Receive_DMA+0x38>
 80112d8:	2302      	movs	r3, #2
 80112da:	e00f      	b.n	80112fc <HAL_UART_Receive_DMA+0x58>
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	2201      	movs	r2, #1
 80112e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2200      	movs	r2, #0
 80112e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80112ea:	88fb      	ldrh	r3, [r7, #6]
 80112ec:	461a      	mov	r2, r3
 80112ee:	68b9      	ldr	r1, [r7, #8]
 80112f0:	68f8      	ldr	r0, [r7, #12]
 80112f2:	f000 fc27 	bl	8011b44 <UART_Start_Receive_DMA>
 80112f6:	4603      	mov	r3, r0
 80112f8:	e000      	b.n	80112fc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80112fa:	2302      	movs	r3, #2
  }
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3710      	adds	r7, #16
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}

08011304 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b0ba      	sub	sp, #232	; 0xe8
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	695b      	ldr	r3, [r3, #20]
 8011326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801132a:	2300      	movs	r3, #0
 801132c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8011330:	2300      	movs	r3, #0
 8011332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801133a:	f003 030f 	and.w	r3, r3, #15
 801133e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8011342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011346:	2b00      	cmp	r3, #0
 8011348:	d10f      	bne.n	801136a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801134a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801134e:	f003 0320 	and.w	r3, r3, #32
 8011352:	2b00      	cmp	r3, #0
 8011354:	d009      	beq.n	801136a <HAL_UART_IRQHandler+0x66>
 8011356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801135a:	f003 0320 	and.w	r3, r3, #32
 801135e:	2b00      	cmp	r3, #0
 8011360:	d003      	beq.n	801136a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 fd8f 	bl	8011e86 <UART_Receive_IT>
      return;
 8011368:	e256      	b.n	8011818 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801136a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801136e:	2b00      	cmp	r3, #0
 8011370:	f000 80de 	beq.w	8011530 <HAL_UART_IRQHandler+0x22c>
 8011374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011378:	f003 0301 	and.w	r3, r3, #1
 801137c:	2b00      	cmp	r3, #0
 801137e:	d106      	bne.n	801138e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8011380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011384:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8011388:	2b00      	cmp	r3, #0
 801138a:	f000 80d1 	beq.w	8011530 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801138e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011392:	f003 0301 	and.w	r3, r3, #1
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00b      	beq.n	80113b2 <HAL_UART_IRQHandler+0xae>
 801139a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d005      	beq.n	80113b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113aa:	f043 0201 	orr.w	r2, r3, #1
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80113b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113b6:	f003 0304 	and.w	r3, r3, #4
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d00b      	beq.n	80113d6 <HAL_UART_IRQHandler+0xd2>
 80113be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80113c2:	f003 0301 	and.w	r3, r3, #1
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d005      	beq.n	80113d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ce:	f043 0202 	orr.w	r2, r3, #2
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80113d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113da:	f003 0302 	and.w	r3, r3, #2
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00b      	beq.n	80113fa <HAL_UART_IRQHandler+0xf6>
 80113e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80113e6:	f003 0301 	and.w	r3, r3, #1
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d005      	beq.n	80113fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113f2:	f043 0204 	orr.w	r2, r3, #4
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80113fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113fe:	f003 0308 	and.w	r3, r3, #8
 8011402:	2b00      	cmp	r3, #0
 8011404:	d011      	beq.n	801142a <HAL_UART_IRQHandler+0x126>
 8011406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801140a:	f003 0320 	and.w	r3, r3, #32
 801140e:	2b00      	cmp	r3, #0
 8011410:	d105      	bne.n	801141e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8011412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011416:	f003 0301 	and.w	r3, r3, #1
 801141a:	2b00      	cmp	r3, #0
 801141c:	d005      	beq.n	801142a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011422:	f043 0208 	orr.w	r2, r3, #8
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801142e:	2b00      	cmp	r3, #0
 8011430:	f000 81ed 	beq.w	801180e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011438:	f003 0320 	and.w	r3, r3, #32
 801143c:	2b00      	cmp	r3, #0
 801143e:	d008      	beq.n	8011452 <HAL_UART_IRQHandler+0x14e>
 8011440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011444:	f003 0320 	and.w	r3, r3, #32
 8011448:	2b00      	cmp	r3, #0
 801144a:	d002      	beq.n	8011452 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f000 fd1a 	bl	8011e86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	695b      	ldr	r3, [r3, #20]
 8011458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801145c:	2b40      	cmp	r3, #64	; 0x40
 801145e:	bf0c      	ite	eq
 8011460:	2301      	moveq	r3, #1
 8011462:	2300      	movne	r3, #0
 8011464:	b2db      	uxtb	r3, r3
 8011466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801146e:	f003 0308 	and.w	r3, r3, #8
 8011472:	2b00      	cmp	r3, #0
 8011474:	d103      	bne.n	801147e <HAL_UART_IRQHandler+0x17a>
 8011476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801147a:	2b00      	cmp	r3, #0
 801147c:	d04f      	beq.n	801151e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f000 fc22 	bl	8011cc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	695b      	ldr	r3, [r3, #20]
 801148a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801148e:	2b40      	cmp	r3, #64	; 0x40
 8011490:	d141      	bne.n	8011516 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	3314      	adds	r3, #20
 8011498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801149c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80114a0:	e853 3f00 	ldrex	r3, [r3]
 80114a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80114a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80114ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	3314      	adds	r3, #20
 80114ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80114be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80114c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80114ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80114ce:	e841 2300 	strex	r3, r2, [r1]
 80114d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80114d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d1d9      	bne.n	8011492 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d013      	beq.n	801150e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ea:	4a7d      	ldr	r2, [pc, #500]	; (80116e0 <HAL_UART_IRQHandler+0x3dc>)
 80114ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7fa fbba 	bl	800bc6c <HAL_DMA_Abort_IT>
 80114f8:	4603      	mov	r3, r0
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d016      	beq.n	801152c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011508:	4610      	mov	r0, r2
 801150a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801150c:	e00e      	b.n	801152c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f000 f9ae 	bl	8011870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011514:	e00a      	b.n	801152c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f000 f9aa 	bl	8011870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801151c:	e006      	b.n	801152c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f000 f9a6 	bl	8011870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2200      	movs	r2, #0
 8011528:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801152a:	e170      	b.n	801180e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801152c:	bf00      	nop
    return;
 801152e:	e16e      	b.n	801180e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011534:	2b01      	cmp	r3, #1
 8011536:	f040 814a 	bne.w	80117ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801153a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801153e:	f003 0310 	and.w	r3, r3, #16
 8011542:	2b00      	cmp	r3, #0
 8011544:	f000 8143 	beq.w	80117ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8011548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801154c:	f003 0310 	and.w	r3, r3, #16
 8011550:	2b00      	cmp	r3, #0
 8011552:	f000 813c 	beq.w	80117ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011556:	2300      	movs	r3, #0
 8011558:	60bb      	str	r3, [r7, #8]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	60bb      	str	r3, [r7, #8]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	685b      	ldr	r3, [r3, #4]
 8011568:	60bb      	str	r3, [r7, #8]
 801156a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	695b      	ldr	r3, [r3, #20]
 8011572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011576:	2b40      	cmp	r3, #64	; 0x40
 8011578:	f040 80b4 	bne.w	80116e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011588:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801158c:	2b00      	cmp	r3, #0
 801158e:	f000 8140 	beq.w	8011812 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801159a:	429a      	cmp	r2, r3
 801159c:	f080 8139 	bcs.w	8011812 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80115a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ac:	69db      	ldr	r3, [r3, #28]
 80115ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80115b2:	f000 8088 	beq.w	80116c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	330c      	adds	r3, #12
 80115bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80115c4:	e853 3f00 	ldrex	r3, [r3]
 80115c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80115cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80115d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80115d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	330c      	adds	r3, #12
 80115de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80115e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80115e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80115ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80115f2:	e841 2300 	strex	r3, r2, [r1]
 80115f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80115fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d1d9      	bne.n	80115b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	3314      	adds	r3, #20
 8011608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801160a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801160c:	e853 3f00 	ldrex	r3, [r3]
 8011610:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011614:	f023 0301 	bic.w	r3, r3, #1
 8011618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	3314      	adds	r3, #20
 8011622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011626:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801162a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801162c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801162e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011632:	e841 2300 	strex	r3, r2, [r1]
 8011636:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801163a:	2b00      	cmp	r3, #0
 801163c:	d1e1      	bne.n	8011602 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	3314      	adds	r3, #20
 8011644:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011648:	e853 3f00 	ldrex	r3, [r3]
 801164c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801164e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	3314      	adds	r3, #20
 801165e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011662:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011664:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801166a:	e841 2300 	strex	r3, r2, [r1]
 801166e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011672:	2b00      	cmp	r3, #0
 8011674:	d1e3      	bne.n	801163e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2220      	movs	r2, #32
 801167a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2200      	movs	r2, #0
 8011682:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	330c      	adds	r3, #12
 801168a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801168c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801168e:	e853 3f00 	ldrex	r3, [r3]
 8011692:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011696:	f023 0310 	bic.w	r3, r3, #16
 801169a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	330c      	adds	r3, #12
 80116a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80116a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80116aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80116ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80116b0:	e841 2300 	strex	r3, r2, [r1]
 80116b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80116b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d1e3      	bne.n	8011684 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7fa fa63 	bl	800bb8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80116ce:	b29b      	uxth	r3, r3
 80116d0:	1ad3      	subs	r3, r2, r3
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	4619      	mov	r1, r3
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f000 f8d4 	bl	8011884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80116dc:	e099      	b.n	8011812 <HAL_UART_IRQHandler+0x50e>
 80116de:	bf00      	nop
 80116e0:	08011d8f 	.word	0x08011d8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	1ad3      	subs	r3, r2, r3
 80116f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	f000 808b 	beq.w	8011816 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8011700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011704:	2b00      	cmp	r3, #0
 8011706:	f000 8086 	beq.w	8011816 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	330c      	adds	r3, #12
 8011710:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011714:	e853 3f00 	ldrex	r3, [r3]
 8011718:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801171c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	330c      	adds	r3, #12
 801172a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801172e:	647a      	str	r2, [r7, #68]	; 0x44
 8011730:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011732:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011736:	e841 2300 	strex	r3, r2, [r1]
 801173a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801173c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801173e:	2b00      	cmp	r3, #0
 8011740:	d1e3      	bne.n	801170a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	3314      	adds	r3, #20
 8011748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174c:	e853 3f00 	ldrex	r3, [r3]
 8011750:	623b      	str	r3, [r7, #32]
   return(result);
 8011752:	6a3b      	ldr	r3, [r7, #32]
 8011754:	f023 0301 	bic.w	r3, r3, #1
 8011758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	3314      	adds	r3, #20
 8011762:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011766:	633a      	str	r2, [r7, #48]	; 0x30
 8011768:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801176a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801176c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801176e:	e841 2300 	strex	r3, r2, [r1]
 8011772:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011776:	2b00      	cmp	r3, #0
 8011778:	d1e3      	bne.n	8011742 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2220      	movs	r2, #32
 801177e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2200      	movs	r2, #0
 8011786:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	330c      	adds	r3, #12
 801178e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	e853 3f00 	ldrex	r3, [r3]
 8011796:	60fb      	str	r3, [r7, #12]
   return(result);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f023 0310 	bic.w	r3, r3, #16
 801179e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	330c      	adds	r3, #12
 80117a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80117ac:	61fa      	str	r2, [r7, #28]
 80117ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117b0:	69b9      	ldr	r1, [r7, #24]
 80117b2:	69fa      	ldr	r2, [r7, #28]
 80117b4:	e841 2300 	strex	r3, r2, [r1]
 80117b8:	617b      	str	r3, [r7, #20]
   return(result);
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d1e3      	bne.n	8011788 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80117c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80117c4:	4619      	mov	r1, r3
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f000 f85c 	bl	8011884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80117cc:	e023      	b.n	8011816 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80117ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d009      	beq.n	80117ee <HAL_UART_IRQHandler+0x4ea>
 80117da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d003      	beq.n	80117ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f000 fae5 	bl	8011db6 <UART_Transmit_IT>
    return;
 80117ec:	e014      	b.n	8011818 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80117ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d00e      	beq.n	8011818 <HAL_UART_IRQHandler+0x514>
 80117fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80117fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011802:	2b00      	cmp	r3, #0
 8011804:	d008      	beq.n	8011818 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f000 fb25 	bl	8011e56 <UART_EndTransmit_IT>
    return;
 801180c:	e004      	b.n	8011818 <HAL_UART_IRQHandler+0x514>
    return;
 801180e:	bf00      	nop
 8011810:	e002      	b.n	8011818 <HAL_UART_IRQHandler+0x514>
      return;
 8011812:	bf00      	nop
 8011814:	e000      	b.n	8011818 <HAL_UART_IRQHandler+0x514>
      return;
 8011816:	bf00      	nop
  }
}
 8011818:	37e8      	adds	r7, #232	; 0xe8
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop

08011820 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011820:	b480      	push	{r7}
 8011822:	b083      	sub	sp, #12
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011828:	bf00      	nop
 801182a:	370c      	adds	r7, #12
 801182c:	46bd      	mov	sp, r7
 801182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011832:	4770      	bx	lr

08011834 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011834:	b480      	push	{r7}
 8011836:	b083      	sub	sp, #12
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 801183c:	bf00      	nop
 801183e:	370c      	adds	r7, #12
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr

08011848 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011848:	b480      	push	{r7}
 801184a:	b083      	sub	sp, #12
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8011850:	bf00      	nop
 8011852:	370c      	adds	r7, #12
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr

0801185c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801185c:	b480      	push	{r7}
 801185e:	b083      	sub	sp, #12
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8011864:	bf00      	nop
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr

08011870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011870:	b480      	push	{r7}
 8011872:	b083      	sub	sp, #12
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8011878:	bf00      	nop
 801187a:	370c      	adds	r7, #12
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr

08011884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011884:	b480      	push	{r7}
 8011886:	b083      	sub	sp, #12
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	460b      	mov	r3, r1
 801188e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011890:	bf00      	nop
 8011892:	370c      	adds	r7, #12
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr

0801189c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b090      	sub	sp, #64	; 0x40
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d137      	bne.n	8011928 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80118b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118ba:	2200      	movs	r2, #0
 80118bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80118be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	3314      	adds	r3, #20
 80118c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c8:	e853 3f00 	ldrex	r3, [r3]
 80118cc:	623b      	str	r3, [r7, #32]
   return(result);
 80118ce:	6a3b      	ldr	r3, [r7, #32]
 80118d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80118d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80118d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	3314      	adds	r3, #20
 80118dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118de:	633a      	str	r2, [r7, #48]	; 0x30
 80118e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118e6:	e841 2300 	strex	r3, r2, [r1]
 80118ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80118ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d1e5      	bne.n	80118be <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80118f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	330c      	adds	r3, #12
 80118f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	e853 3f00 	ldrex	r3, [r3]
 8011900:	60fb      	str	r3, [r7, #12]
   return(result);
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011908:	637b      	str	r3, [r7, #52]	; 0x34
 801190a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	330c      	adds	r3, #12
 8011910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011912:	61fa      	str	r2, [r7, #28]
 8011914:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011916:	69b9      	ldr	r1, [r7, #24]
 8011918:	69fa      	ldr	r2, [r7, #28]
 801191a:	e841 2300 	strex	r3, r2, [r1]
 801191e:	617b      	str	r3, [r7, #20]
   return(result);
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d1e5      	bne.n	80118f2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011926:	e002      	b.n	801192e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8011928:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801192a:	f7ff ff79 	bl	8011820 <HAL_UART_TxCpltCallback>
}
 801192e:	bf00      	nop
 8011930:	3740      	adds	r7, #64	; 0x40
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}

08011936 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011936:	b580      	push	{r7, lr}
 8011938:	b084      	sub	sp, #16
 801193a:	af00      	add	r7, sp, #0
 801193c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011942:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011944:	68f8      	ldr	r0, [r7, #12]
 8011946:	f7ff ff75 	bl	8011834 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801194a:	bf00      	nop
 801194c:	3710      	adds	r7, #16
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}

08011952 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011952:	b580      	push	{r7, lr}
 8011954:	b09c      	sub	sp, #112	; 0x70
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801195e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801196a:	2b00      	cmp	r3, #0
 801196c:	d172      	bne.n	8011a54 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801196e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011970:	2200      	movs	r2, #0
 8011972:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	330c      	adds	r3, #12
 801197a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801197c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801197e:	e853 3f00 	ldrex	r3, [r3]
 8011982:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801198a:	66bb      	str	r3, [r7, #104]	; 0x68
 801198c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	330c      	adds	r3, #12
 8011992:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011994:	65ba      	str	r2, [r7, #88]	; 0x58
 8011996:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011998:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801199a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801199c:	e841 2300 	strex	r3, r2, [r1]
 80119a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80119a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d1e5      	bne.n	8011974 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	3314      	adds	r3, #20
 80119ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119b2:	e853 3f00 	ldrex	r3, [r3]
 80119b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80119b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ba:	f023 0301 	bic.w	r3, r3, #1
 80119be:	667b      	str	r3, [r7, #100]	; 0x64
 80119c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	3314      	adds	r3, #20
 80119c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80119c8:	647a      	str	r2, [r7, #68]	; 0x44
 80119ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80119ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119d0:	e841 2300 	strex	r3, r2, [r1]
 80119d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80119d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d1e5      	bne.n	80119a8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80119dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	3314      	adds	r3, #20
 80119e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e6:	e853 3f00 	ldrex	r3, [r3]
 80119ea:	623b      	str	r3, [r7, #32]
   return(result);
 80119ec:	6a3b      	ldr	r3, [r7, #32]
 80119ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80119f2:	663b      	str	r3, [r7, #96]	; 0x60
 80119f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	3314      	adds	r3, #20
 80119fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80119fc:	633a      	str	r2, [r7, #48]	; 0x30
 80119fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a04:	e841 2300 	strex	r3, r2, [r1]
 8011a08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d1e5      	bne.n	80119dc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a12:	2220      	movs	r2, #32
 8011a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	d119      	bne.n	8011a54 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	330c      	adds	r3, #12
 8011a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	e853 3f00 	ldrex	r3, [r3]
 8011a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	f023 0310 	bic.w	r3, r3, #16
 8011a36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	330c      	adds	r3, #12
 8011a3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011a40:	61fa      	str	r2, [r7, #28]
 8011a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a44:	69b9      	ldr	r1, [r7, #24]
 8011a46:	69fa      	ldr	r2, [r7, #28]
 8011a48:	e841 2300 	strex	r3, r2, [r1]
 8011a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d1e5      	bne.n	8011a20 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a58:	2b01      	cmp	r3, #1
 8011a5a:	d106      	bne.n	8011a6a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011a60:	4619      	mov	r1, r3
 8011a62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011a64:	f7ff ff0e 	bl	8011884 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011a68:	e002      	b.n	8011a70 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8011a6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011a6c:	f7ff feec 	bl	8011848 <HAL_UART_RxCpltCallback>
}
 8011a70:	bf00      	nop
 8011a72:	3770      	adds	r7, #112	; 0x70
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b084      	sub	sp, #16
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a84:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a8a:	2b01      	cmp	r3, #1
 8011a8c:	d108      	bne.n	8011aa0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011a92:	085b      	lsrs	r3, r3, #1
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	4619      	mov	r1, r3
 8011a98:	68f8      	ldr	r0, [r7, #12]
 8011a9a:	f7ff fef3 	bl	8011884 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011a9e:	e002      	b.n	8011aa6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8011aa0:	68f8      	ldr	r0, [r7, #12]
 8011aa2:	f7ff fedb 	bl	801185c <HAL_UART_RxHalfCpltCallback>
}
 8011aa6:	bf00      	nop
 8011aa8:	3710      	adds	r7, #16
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}

08011aae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011aae:	b580      	push	{r7, lr}
 8011ab0:	b084      	sub	sp, #16
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011abe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	695b      	ldr	r3, [r3, #20]
 8011ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011aca:	2b80      	cmp	r3, #128	; 0x80
 8011acc:	bf0c      	ite	eq
 8011ace:	2301      	moveq	r3, #1
 8011ad0:	2300      	movne	r3, #0
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	2b21      	cmp	r3, #33	; 0x21
 8011ae0:	d108      	bne.n	8011af4 <UART_DMAError+0x46>
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d005      	beq.n	8011af4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	2200      	movs	r2, #0
 8011aec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8011aee:	68b8      	ldr	r0, [r7, #8]
 8011af0:	f000 f8c2 	bl	8011c78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	695b      	ldr	r3, [r3, #20]
 8011afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011afe:	2b40      	cmp	r3, #64	; 0x40
 8011b00:	bf0c      	ite	eq
 8011b02:	2301      	moveq	r3, #1
 8011b04:	2300      	movne	r3, #0
 8011b06:	b2db      	uxtb	r3, r3
 8011b08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	2b22      	cmp	r3, #34	; 0x22
 8011b14:	d108      	bne.n	8011b28 <UART_DMAError+0x7a>
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d005      	beq.n	8011b28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8011b22:	68b8      	ldr	r0, [r7, #8]
 8011b24:	f000 f8d0 	bl	8011cc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b2c:	f043 0210 	orr.w	r2, r3, #16
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011b34:	68b8      	ldr	r0, [r7, #8]
 8011b36:	f7ff fe9b 	bl	8011870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b3a:	bf00      	nop
 8011b3c:	3710      	adds	r7, #16
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
	...

08011b44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b098      	sub	sp, #96	; 0x60
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	60f8      	str	r0, [r7, #12]
 8011b4c:	60b9      	str	r1, [r7, #8]
 8011b4e:	4613      	mov	r3, r2
 8011b50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8011b52:	68ba      	ldr	r2, [r7, #8]
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	88fa      	ldrh	r2, [r7, #6]
 8011b5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	2200      	movs	r2, #0
 8011b62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	2222      	movs	r2, #34	; 0x22
 8011b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b70:	4a3e      	ldr	r2, [pc, #248]	; (8011c6c <UART_Start_Receive_DMA+0x128>)
 8011b72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b78:	4a3d      	ldr	r2, [pc, #244]	; (8011c70 <UART_Start_Receive_DMA+0x12c>)
 8011b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b80:	4a3c      	ldr	r2, [pc, #240]	; (8011c74 <UART_Start_Receive_DMA+0x130>)
 8011b82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b88:	2200      	movs	r2, #0
 8011b8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8011b8c:	f107 0308 	add.w	r3, r7, #8
 8011b90:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	3304      	adds	r3, #4
 8011b9c:	4619      	mov	r1, r3
 8011b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ba0:	681a      	ldr	r2, [r3, #0]
 8011ba2:	88fb      	ldrh	r3, [r7, #6]
 8011ba4:	f7f9 ff9a 	bl	800badc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8011ba8:	2300      	movs	r3, #0
 8011baa:	613b      	str	r3, [r7, #16]
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	613b      	str	r3, [r7, #16]
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	613b      	str	r3, [r7, #16]
 8011bbc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	330c      	adds	r3, #12
 8011bcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bd0:	e853 3f00 	ldrex	r3, [r3]
 8011bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011bdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	330c      	adds	r3, #12
 8011be4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011be6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011be8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011bec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011bee:	e841 2300 	strex	r3, r2, [r1]
 8011bf2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d1e5      	bne.n	8011bc6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	3314      	adds	r3, #20
 8011c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c04:	e853 3f00 	ldrex	r3, [r3]
 8011c08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c0c:	f043 0301 	orr.w	r3, r3, #1
 8011c10:	657b      	str	r3, [r7, #84]	; 0x54
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	3314      	adds	r3, #20
 8011c18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c1a:	63ba      	str	r2, [r7, #56]	; 0x38
 8011c1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c22:	e841 2300 	strex	r3, r2, [r1]
 8011c26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d1e5      	bne.n	8011bfa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	3314      	adds	r3, #20
 8011c34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c36:	69bb      	ldr	r3, [r7, #24]
 8011c38:	e853 3f00 	ldrex	r3, [r3]
 8011c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c44:	653b      	str	r3, [r7, #80]	; 0x50
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	3314      	adds	r3, #20
 8011c4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011c4e:	627a      	str	r2, [r7, #36]	; 0x24
 8011c50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c52:	6a39      	ldr	r1, [r7, #32]
 8011c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c56:	e841 2300 	strex	r3, r2, [r1]
 8011c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d1e5      	bne.n	8011c2e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8011c62:	2300      	movs	r3, #0
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3760      	adds	r7, #96	; 0x60
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	08011953 	.word	0x08011953
 8011c70:	08011a79 	.word	0x08011a79
 8011c74:	08011aaf 	.word	0x08011aaf

08011c78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b089      	sub	sp, #36	; 0x24
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	330c      	adds	r3, #12
 8011c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	e853 3f00 	ldrex	r3, [r3]
 8011c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011c96:	61fb      	str	r3, [r7, #28]
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	330c      	adds	r3, #12
 8011c9e:	69fa      	ldr	r2, [r7, #28]
 8011ca0:	61ba      	str	r2, [r7, #24]
 8011ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ca4:	6979      	ldr	r1, [r7, #20]
 8011ca6:	69ba      	ldr	r2, [r7, #24]
 8011ca8:	e841 2300 	strex	r3, r2, [r1]
 8011cac:	613b      	str	r3, [r7, #16]
   return(result);
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d1e5      	bne.n	8011c80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2220      	movs	r2, #32
 8011cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8011cbc:	bf00      	nop
 8011cbe:	3724      	adds	r7, #36	; 0x24
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr

08011cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b095      	sub	sp, #84	; 0x54
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	330c      	adds	r3, #12
 8011cd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cda:	e853 3f00 	ldrex	r3, [r3]
 8011cde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	330c      	adds	r3, #12
 8011cee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011cf0:	643a      	str	r2, [r7, #64]	; 0x40
 8011cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011cf8:	e841 2300 	strex	r3, r2, [r1]
 8011cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d1e5      	bne.n	8011cd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	3314      	adds	r3, #20
 8011d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d0c:	6a3b      	ldr	r3, [r7, #32]
 8011d0e:	e853 3f00 	ldrex	r3, [r3]
 8011d12:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d14:	69fb      	ldr	r3, [r7, #28]
 8011d16:	f023 0301 	bic.w	r3, r3, #1
 8011d1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	3314      	adds	r3, #20
 8011d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d2c:	e841 2300 	strex	r3, r2, [r1]
 8011d30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d1e5      	bne.n	8011d04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d119      	bne.n	8011d74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	330c      	adds	r3, #12
 8011d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	e853 3f00 	ldrex	r3, [r3]
 8011d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	f023 0310 	bic.w	r3, r3, #16
 8011d56:	647b      	str	r3, [r7, #68]	; 0x44
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	330c      	adds	r3, #12
 8011d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d60:	61ba      	str	r2, [r7, #24]
 8011d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d64:	6979      	ldr	r1, [r7, #20]
 8011d66:	69ba      	ldr	r2, [r7, #24]
 8011d68:	e841 2300 	strex	r3, r2, [r1]
 8011d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d1e5      	bne.n	8011d40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2220      	movs	r2, #32
 8011d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011d82:	bf00      	nop
 8011d84:	3754      	adds	r7, #84	; 0x54
 8011d86:	46bd      	mov	sp, r7
 8011d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8c:	4770      	bx	lr

08011d8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011d8e:	b580      	push	{r7, lr}
 8011d90:	b084      	sub	sp, #16
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	2200      	movs	r2, #0
 8011da6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011da8:	68f8      	ldr	r0, [r7, #12]
 8011daa:	f7ff fd61 	bl	8011870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011dae:	bf00      	nop
 8011db0:	3710      	adds	r7, #16
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}

08011db6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011db6:	b480      	push	{r7}
 8011db8:	b085      	sub	sp, #20
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011dc4:	b2db      	uxtb	r3, r3
 8011dc6:	2b21      	cmp	r3, #33	; 0x21
 8011dc8:	d13e      	bne.n	8011e48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	689b      	ldr	r3, [r3, #8]
 8011dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011dd2:	d114      	bne.n	8011dfe <UART_Transmit_IT+0x48>
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	691b      	ldr	r3, [r3, #16]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d110      	bne.n	8011dfe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6a1b      	ldr	r3, [r3, #32]
 8011de0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	881b      	ldrh	r3, [r3, #0]
 8011de6:	461a      	mov	r2, r3
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011df0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6a1b      	ldr	r3, [r3, #32]
 8011df6:	1c9a      	adds	r2, r3, #2
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	621a      	str	r2, [r3, #32]
 8011dfc:	e008      	b.n	8011e10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	6a1b      	ldr	r3, [r3, #32]
 8011e02:	1c59      	adds	r1, r3, #1
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	6211      	str	r1, [r2, #32]
 8011e08:	781a      	ldrb	r2, [r3, #0]
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011e14:	b29b      	uxth	r3, r3
 8011e16:	3b01      	subs	r3, #1
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	687a      	ldr	r2, [r7, #4]
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d10f      	bne.n	8011e44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	68da      	ldr	r2, [r3, #12]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011e32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	68da      	ldr	r2, [r3, #12]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011e42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011e44:	2300      	movs	r3, #0
 8011e46:	e000      	b.n	8011e4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011e48:	2302      	movs	r3, #2
  }
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3714      	adds	r7, #20
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e54:	4770      	bx	lr

08011e56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011e56:	b580      	push	{r7, lr}
 8011e58:	b082      	sub	sp, #8
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	68da      	ldr	r2, [r3, #12]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011e6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2220      	movs	r2, #32
 8011e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f7ff fcd2 	bl	8011820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011e7c:	2300      	movs	r3, #0
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3708      	adds	r7, #8
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}

08011e86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011e86:	b580      	push	{r7, lr}
 8011e88:	b08c      	sub	sp, #48	; 0x30
 8011e8a:	af00      	add	r7, sp, #0
 8011e8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	2b22      	cmp	r3, #34	; 0x22
 8011e98:	f040 80ab 	bne.w	8011ff2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	689b      	ldr	r3, [r3, #8]
 8011ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ea4:	d117      	bne.n	8011ed6 <UART_Receive_IT+0x50>
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	691b      	ldr	r3, [r3, #16]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d113      	bne.n	8011ed6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eb6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	685b      	ldr	r3, [r3, #4]
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ec4:	b29a      	uxth	r2, r3
 8011ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ece:	1c9a      	adds	r2, r3, #2
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8011ed4:	e026      	b.n	8011f24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011edc:	2300      	movs	r3, #0
 8011ede:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	689b      	ldr	r3, [r3, #8]
 8011ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ee8:	d007      	beq.n	8011efa <UART_Receive_IT+0x74>
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	689b      	ldr	r3, [r3, #8]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d10a      	bne.n	8011f08 <UART_Receive_IT+0x82>
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d106      	bne.n	8011f08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	b2da      	uxtb	r2, r3
 8011f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f04:	701a      	strb	r2, [r3, #0]
 8011f06:	e008      	b.n	8011f1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f14:	b2da      	uxtb	r2, r3
 8011f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f1e:	1c5a      	adds	r2, r3, #1
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	3b01      	subs	r3, #1
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	687a      	ldr	r2, [r7, #4]
 8011f30:	4619      	mov	r1, r3
 8011f32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d15a      	bne.n	8011fee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	68da      	ldr	r2, [r3, #12]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	f022 0220 	bic.w	r2, r2, #32
 8011f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	68da      	ldr	r2, [r3, #12]
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011f56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	695a      	ldr	r2, [r3, #20]
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	f022 0201 	bic.w	r2, r2, #1
 8011f66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2220      	movs	r2, #32
 8011f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	d135      	bne.n	8011fe4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	330c      	adds	r3, #12
 8011f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	e853 3f00 	ldrex	r3, [r3]
 8011f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	f023 0310 	bic.w	r3, r3, #16
 8011f94:	627b      	str	r3, [r7, #36]	; 0x24
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	330c      	adds	r3, #12
 8011f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f9e:	623a      	str	r2, [r7, #32]
 8011fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fa2:	69f9      	ldr	r1, [r7, #28]
 8011fa4:	6a3a      	ldr	r2, [r7, #32]
 8011fa6:	e841 2300 	strex	r3, r2, [r1]
 8011faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8011fac:	69bb      	ldr	r3, [r7, #24]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d1e5      	bne.n	8011f7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f003 0310 	and.w	r3, r3, #16
 8011fbc:	2b10      	cmp	r3, #16
 8011fbe:	d10a      	bne.n	8011fd6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	60fb      	str	r3, [r7, #12]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	60fb      	str	r3, [r7, #12]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	685b      	ldr	r3, [r3, #4]
 8011fd2:	60fb      	str	r3, [r7, #12]
 8011fd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011fda:	4619      	mov	r1, r3
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f7ff fc51 	bl	8011884 <HAL_UARTEx_RxEventCallback>
 8011fe2:	e002      	b.n	8011fea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	f7ff fc2f 	bl	8011848 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011fea:	2300      	movs	r3, #0
 8011fec:	e002      	b.n	8011ff4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	e000      	b.n	8011ff4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8011ff2:	2302      	movs	r3, #2
  }
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3730      	adds	r7, #48	; 0x30
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}

08011ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012000:	b09f      	sub	sp, #124	; 0x7c
 8012002:	af00      	add	r7, sp, #0
 8012004:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	691b      	ldr	r3, [r3, #16]
 801200c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012012:	68d9      	ldr	r1, [r3, #12]
 8012014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	ea40 0301 	orr.w	r3, r0, r1
 801201c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801201e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012020:	689a      	ldr	r2, [r3, #8]
 8012022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012024:	691b      	ldr	r3, [r3, #16]
 8012026:	431a      	orrs	r2, r3
 8012028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801202a:	695b      	ldr	r3, [r3, #20]
 801202c:	431a      	orrs	r2, r3
 801202e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012030:	69db      	ldr	r3, [r3, #28]
 8012032:	4313      	orrs	r3, r2
 8012034:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8012036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	68db      	ldr	r3, [r3, #12]
 801203c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8012040:	f021 010c 	bic.w	r1, r1, #12
 8012044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801204a:	430b      	orrs	r3, r1
 801204c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801204e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	695b      	ldr	r3, [r3, #20]
 8012054:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8012058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801205a:	6999      	ldr	r1, [r3, #24]
 801205c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801205e:	681a      	ldr	r2, [r3, #0]
 8012060:	ea40 0301 	orr.w	r3, r0, r1
 8012064:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	4bc5      	ldr	r3, [pc, #788]	; (8012380 <UART_SetConfig+0x384>)
 801206c:	429a      	cmp	r2, r3
 801206e:	d004      	beq.n	801207a <UART_SetConfig+0x7e>
 8012070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	4bc3      	ldr	r3, [pc, #780]	; (8012384 <UART_SetConfig+0x388>)
 8012076:	429a      	cmp	r2, r3
 8012078:	d103      	bne.n	8012082 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801207a:	f7fd ffb1 	bl	800ffe0 <HAL_RCC_GetPCLK2Freq>
 801207e:	6778      	str	r0, [r7, #116]	; 0x74
 8012080:	e002      	b.n	8012088 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8012082:	f7fd ff99 	bl	800ffb8 <HAL_RCC_GetPCLK1Freq>
 8012086:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801208a:	69db      	ldr	r3, [r3, #28]
 801208c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012090:	f040 80b6 	bne.w	8012200 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012096:	461c      	mov	r4, r3
 8012098:	f04f 0500 	mov.w	r5, #0
 801209c:	4622      	mov	r2, r4
 801209e:	462b      	mov	r3, r5
 80120a0:	1891      	adds	r1, r2, r2
 80120a2:	6439      	str	r1, [r7, #64]	; 0x40
 80120a4:	415b      	adcs	r3, r3
 80120a6:	647b      	str	r3, [r7, #68]	; 0x44
 80120a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80120ac:	1912      	adds	r2, r2, r4
 80120ae:	eb45 0303 	adc.w	r3, r5, r3
 80120b2:	f04f 0000 	mov.w	r0, #0
 80120b6:	f04f 0100 	mov.w	r1, #0
 80120ba:	00d9      	lsls	r1, r3, #3
 80120bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80120c0:	00d0      	lsls	r0, r2, #3
 80120c2:	4602      	mov	r2, r0
 80120c4:	460b      	mov	r3, r1
 80120c6:	1911      	adds	r1, r2, r4
 80120c8:	6639      	str	r1, [r7, #96]	; 0x60
 80120ca:	416b      	adcs	r3, r5
 80120cc:	667b      	str	r3, [r7, #100]	; 0x64
 80120ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	461a      	mov	r2, r3
 80120d4:	f04f 0300 	mov.w	r3, #0
 80120d8:	1891      	adds	r1, r2, r2
 80120da:	63b9      	str	r1, [r7, #56]	; 0x38
 80120dc:	415b      	adcs	r3, r3
 80120de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80120e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80120e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80120e8:	f7ee fde6 	bl	8000cb8 <__aeabi_uldivmod>
 80120ec:	4602      	mov	r2, r0
 80120ee:	460b      	mov	r3, r1
 80120f0:	4ba5      	ldr	r3, [pc, #660]	; (8012388 <UART_SetConfig+0x38c>)
 80120f2:	fba3 2302 	umull	r2, r3, r3, r2
 80120f6:	095b      	lsrs	r3, r3, #5
 80120f8:	011e      	lsls	r6, r3, #4
 80120fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80120fc:	461c      	mov	r4, r3
 80120fe:	f04f 0500 	mov.w	r5, #0
 8012102:	4622      	mov	r2, r4
 8012104:	462b      	mov	r3, r5
 8012106:	1891      	adds	r1, r2, r2
 8012108:	6339      	str	r1, [r7, #48]	; 0x30
 801210a:	415b      	adcs	r3, r3
 801210c:	637b      	str	r3, [r7, #52]	; 0x34
 801210e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8012112:	1912      	adds	r2, r2, r4
 8012114:	eb45 0303 	adc.w	r3, r5, r3
 8012118:	f04f 0000 	mov.w	r0, #0
 801211c:	f04f 0100 	mov.w	r1, #0
 8012120:	00d9      	lsls	r1, r3, #3
 8012122:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012126:	00d0      	lsls	r0, r2, #3
 8012128:	4602      	mov	r2, r0
 801212a:	460b      	mov	r3, r1
 801212c:	1911      	adds	r1, r2, r4
 801212e:	65b9      	str	r1, [r7, #88]	; 0x58
 8012130:	416b      	adcs	r3, r5
 8012132:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	461a      	mov	r2, r3
 801213a:	f04f 0300 	mov.w	r3, #0
 801213e:	1891      	adds	r1, r2, r2
 8012140:	62b9      	str	r1, [r7, #40]	; 0x28
 8012142:	415b      	adcs	r3, r3
 8012144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012146:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801214a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801214e:	f7ee fdb3 	bl	8000cb8 <__aeabi_uldivmod>
 8012152:	4602      	mov	r2, r0
 8012154:	460b      	mov	r3, r1
 8012156:	4b8c      	ldr	r3, [pc, #560]	; (8012388 <UART_SetConfig+0x38c>)
 8012158:	fba3 1302 	umull	r1, r3, r3, r2
 801215c:	095b      	lsrs	r3, r3, #5
 801215e:	2164      	movs	r1, #100	; 0x64
 8012160:	fb01 f303 	mul.w	r3, r1, r3
 8012164:	1ad3      	subs	r3, r2, r3
 8012166:	00db      	lsls	r3, r3, #3
 8012168:	3332      	adds	r3, #50	; 0x32
 801216a:	4a87      	ldr	r2, [pc, #540]	; (8012388 <UART_SetConfig+0x38c>)
 801216c:	fba2 2303 	umull	r2, r3, r2, r3
 8012170:	095b      	lsrs	r3, r3, #5
 8012172:	005b      	lsls	r3, r3, #1
 8012174:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012178:	441e      	add	r6, r3
 801217a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801217c:	4618      	mov	r0, r3
 801217e:	f04f 0100 	mov.w	r1, #0
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	1894      	adds	r4, r2, r2
 8012188:	623c      	str	r4, [r7, #32]
 801218a:	415b      	adcs	r3, r3
 801218c:	627b      	str	r3, [r7, #36]	; 0x24
 801218e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012192:	1812      	adds	r2, r2, r0
 8012194:	eb41 0303 	adc.w	r3, r1, r3
 8012198:	f04f 0400 	mov.w	r4, #0
 801219c:	f04f 0500 	mov.w	r5, #0
 80121a0:	00dd      	lsls	r5, r3, #3
 80121a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80121a6:	00d4      	lsls	r4, r2, #3
 80121a8:	4622      	mov	r2, r4
 80121aa:	462b      	mov	r3, r5
 80121ac:	1814      	adds	r4, r2, r0
 80121ae:	653c      	str	r4, [r7, #80]	; 0x50
 80121b0:	414b      	adcs	r3, r1
 80121b2:	657b      	str	r3, [r7, #84]	; 0x54
 80121b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	461a      	mov	r2, r3
 80121ba:	f04f 0300 	mov.w	r3, #0
 80121be:	1891      	adds	r1, r2, r2
 80121c0:	61b9      	str	r1, [r7, #24]
 80121c2:	415b      	adcs	r3, r3
 80121c4:	61fb      	str	r3, [r7, #28]
 80121c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80121ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80121ce:	f7ee fd73 	bl	8000cb8 <__aeabi_uldivmod>
 80121d2:	4602      	mov	r2, r0
 80121d4:	460b      	mov	r3, r1
 80121d6:	4b6c      	ldr	r3, [pc, #432]	; (8012388 <UART_SetConfig+0x38c>)
 80121d8:	fba3 1302 	umull	r1, r3, r3, r2
 80121dc:	095b      	lsrs	r3, r3, #5
 80121de:	2164      	movs	r1, #100	; 0x64
 80121e0:	fb01 f303 	mul.w	r3, r1, r3
 80121e4:	1ad3      	subs	r3, r2, r3
 80121e6:	00db      	lsls	r3, r3, #3
 80121e8:	3332      	adds	r3, #50	; 0x32
 80121ea:	4a67      	ldr	r2, [pc, #412]	; (8012388 <UART_SetConfig+0x38c>)
 80121ec:	fba2 2303 	umull	r2, r3, r2, r3
 80121f0:	095b      	lsrs	r3, r3, #5
 80121f2:	f003 0207 	and.w	r2, r3, #7
 80121f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	4432      	add	r2, r6
 80121fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80121fe:	e0b9      	b.n	8012374 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012202:	461c      	mov	r4, r3
 8012204:	f04f 0500 	mov.w	r5, #0
 8012208:	4622      	mov	r2, r4
 801220a:	462b      	mov	r3, r5
 801220c:	1891      	adds	r1, r2, r2
 801220e:	6139      	str	r1, [r7, #16]
 8012210:	415b      	adcs	r3, r3
 8012212:	617b      	str	r3, [r7, #20]
 8012214:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012218:	1912      	adds	r2, r2, r4
 801221a:	eb45 0303 	adc.w	r3, r5, r3
 801221e:	f04f 0000 	mov.w	r0, #0
 8012222:	f04f 0100 	mov.w	r1, #0
 8012226:	00d9      	lsls	r1, r3, #3
 8012228:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801222c:	00d0      	lsls	r0, r2, #3
 801222e:	4602      	mov	r2, r0
 8012230:	460b      	mov	r3, r1
 8012232:	eb12 0804 	adds.w	r8, r2, r4
 8012236:	eb43 0905 	adc.w	r9, r3, r5
 801223a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	4618      	mov	r0, r3
 8012240:	f04f 0100 	mov.w	r1, #0
 8012244:	f04f 0200 	mov.w	r2, #0
 8012248:	f04f 0300 	mov.w	r3, #0
 801224c:	008b      	lsls	r3, r1, #2
 801224e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012252:	0082      	lsls	r2, r0, #2
 8012254:	4640      	mov	r0, r8
 8012256:	4649      	mov	r1, r9
 8012258:	f7ee fd2e 	bl	8000cb8 <__aeabi_uldivmod>
 801225c:	4602      	mov	r2, r0
 801225e:	460b      	mov	r3, r1
 8012260:	4b49      	ldr	r3, [pc, #292]	; (8012388 <UART_SetConfig+0x38c>)
 8012262:	fba3 2302 	umull	r2, r3, r3, r2
 8012266:	095b      	lsrs	r3, r3, #5
 8012268:	011e      	lsls	r6, r3, #4
 801226a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801226c:	4618      	mov	r0, r3
 801226e:	f04f 0100 	mov.w	r1, #0
 8012272:	4602      	mov	r2, r0
 8012274:	460b      	mov	r3, r1
 8012276:	1894      	adds	r4, r2, r2
 8012278:	60bc      	str	r4, [r7, #8]
 801227a:	415b      	adcs	r3, r3
 801227c:	60fb      	str	r3, [r7, #12]
 801227e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012282:	1812      	adds	r2, r2, r0
 8012284:	eb41 0303 	adc.w	r3, r1, r3
 8012288:	f04f 0400 	mov.w	r4, #0
 801228c:	f04f 0500 	mov.w	r5, #0
 8012290:	00dd      	lsls	r5, r3, #3
 8012292:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8012296:	00d4      	lsls	r4, r2, #3
 8012298:	4622      	mov	r2, r4
 801229a:	462b      	mov	r3, r5
 801229c:	1814      	adds	r4, r2, r0
 801229e:	64bc      	str	r4, [r7, #72]	; 0x48
 80122a0:	414b      	adcs	r3, r1
 80122a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80122a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80122a6:	685b      	ldr	r3, [r3, #4]
 80122a8:	4618      	mov	r0, r3
 80122aa:	f04f 0100 	mov.w	r1, #0
 80122ae:	f04f 0200 	mov.w	r2, #0
 80122b2:	f04f 0300 	mov.w	r3, #0
 80122b6:	008b      	lsls	r3, r1, #2
 80122b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80122bc:	0082      	lsls	r2, r0, #2
 80122be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80122c2:	f7ee fcf9 	bl	8000cb8 <__aeabi_uldivmod>
 80122c6:	4602      	mov	r2, r0
 80122c8:	460b      	mov	r3, r1
 80122ca:	4b2f      	ldr	r3, [pc, #188]	; (8012388 <UART_SetConfig+0x38c>)
 80122cc:	fba3 1302 	umull	r1, r3, r3, r2
 80122d0:	095b      	lsrs	r3, r3, #5
 80122d2:	2164      	movs	r1, #100	; 0x64
 80122d4:	fb01 f303 	mul.w	r3, r1, r3
 80122d8:	1ad3      	subs	r3, r2, r3
 80122da:	011b      	lsls	r3, r3, #4
 80122dc:	3332      	adds	r3, #50	; 0x32
 80122de:	4a2a      	ldr	r2, [pc, #168]	; (8012388 <UART_SetConfig+0x38c>)
 80122e0:	fba2 2303 	umull	r2, r3, r2, r3
 80122e4:	095b      	lsrs	r3, r3, #5
 80122e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80122ea:	441e      	add	r6, r3
 80122ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80122ee:	4618      	mov	r0, r3
 80122f0:	f04f 0100 	mov.w	r1, #0
 80122f4:	4602      	mov	r2, r0
 80122f6:	460b      	mov	r3, r1
 80122f8:	1894      	adds	r4, r2, r2
 80122fa:	603c      	str	r4, [r7, #0]
 80122fc:	415b      	adcs	r3, r3
 80122fe:	607b      	str	r3, [r7, #4]
 8012300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012304:	1812      	adds	r2, r2, r0
 8012306:	eb41 0303 	adc.w	r3, r1, r3
 801230a:	f04f 0400 	mov.w	r4, #0
 801230e:	f04f 0500 	mov.w	r5, #0
 8012312:	00dd      	lsls	r5, r3, #3
 8012314:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8012318:	00d4      	lsls	r4, r2, #3
 801231a:	4622      	mov	r2, r4
 801231c:	462b      	mov	r3, r5
 801231e:	eb12 0a00 	adds.w	sl, r2, r0
 8012322:	eb43 0b01 	adc.w	fp, r3, r1
 8012326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012328:	685b      	ldr	r3, [r3, #4]
 801232a:	4618      	mov	r0, r3
 801232c:	f04f 0100 	mov.w	r1, #0
 8012330:	f04f 0200 	mov.w	r2, #0
 8012334:	f04f 0300 	mov.w	r3, #0
 8012338:	008b      	lsls	r3, r1, #2
 801233a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801233e:	0082      	lsls	r2, r0, #2
 8012340:	4650      	mov	r0, sl
 8012342:	4659      	mov	r1, fp
 8012344:	f7ee fcb8 	bl	8000cb8 <__aeabi_uldivmod>
 8012348:	4602      	mov	r2, r0
 801234a:	460b      	mov	r3, r1
 801234c:	4b0e      	ldr	r3, [pc, #56]	; (8012388 <UART_SetConfig+0x38c>)
 801234e:	fba3 1302 	umull	r1, r3, r3, r2
 8012352:	095b      	lsrs	r3, r3, #5
 8012354:	2164      	movs	r1, #100	; 0x64
 8012356:	fb01 f303 	mul.w	r3, r1, r3
 801235a:	1ad3      	subs	r3, r2, r3
 801235c:	011b      	lsls	r3, r3, #4
 801235e:	3332      	adds	r3, #50	; 0x32
 8012360:	4a09      	ldr	r2, [pc, #36]	; (8012388 <UART_SetConfig+0x38c>)
 8012362:	fba2 2303 	umull	r2, r3, r2, r3
 8012366:	095b      	lsrs	r3, r3, #5
 8012368:	f003 020f 	and.w	r2, r3, #15
 801236c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	4432      	add	r2, r6
 8012372:	609a      	str	r2, [r3, #8]
}
 8012374:	bf00      	nop
 8012376:	377c      	adds	r7, #124	; 0x7c
 8012378:	46bd      	mov	sp, r7
 801237a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801237e:	bf00      	nop
 8012380:	40011000 	.word	0x40011000
 8012384:	40011400 	.word	0x40011400
 8012388:	51eb851f 	.word	0x51eb851f

0801238c <atof>:
 801238c:	2100      	movs	r1, #0
 801238e:	f001 bd03 	b.w	8013d98 <strtod>

08012392 <atoi>:
 8012392:	220a      	movs	r2, #10
 8012394:	2100      	movs	r1, #0
 8012396:	f001 bded 	b.w	8013f74 <strtol>
	...

0801239c <__errno>:
 801239c:	4b01      	ldr	r3, [pc, #4]	; (80123a4 <__errno+0x8>)
 801239e:	6818      	ldr	r0, [r3, #0]
 80123a0:	4770      	bx	lr
 80123a2:	bf00      	nop
 80123a4:	20000044 	.word	0x20000044

080123a8 <__libc_init_array>:
 80123a8:	b570      	push	{r4, r5, r6, lr}
 80123aa:	4d0d      	ldr	r5, [pc, #52]	; (80123e0 <__libc_init_array+0x38>)
 80123ac:	4c0d      	ldr	r4, [pc, #52]	; (80123e4 <__libc_init_array+0x3c>)
 80123ae:	1b64      	subs	r4, r4, r5
 80123b0:	10a4      	asrs	r4, r4, #2
 80123b2:	2600      	movs	r6, #0
 80123b4:	42a6      	cmp	r6, r4
 80123b6:	d109      	bne.n	80123cc <__libc_init_array+0x24>
 80123b8:	4d0b      	ldr	r5, [pc, #44]	; (80123e8 <__libc_init_array+0x40>)
 80123ba:	4c0c      	ldr	r4, [pc, #48]	; (80123ec <__libc_init_array+0x44>)
 80123bc:	f004 fcb6 	bl	8016d2c <_init>
 80123c0:	1b64      	subs	r4, r4, r5
 80123c2:	10a4      	asrs	r4, r4, #2
 80123c4:	2600      	movs	r6, #0
 80123c6:	42a6      	cmp	r6, r4
 80123c8:	d105      	bne.n	80123d6 <__libc_init_array+0x2e>
 80123ca:	bd70      	pop	{r4, r5, r6, pc}
 80123cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80123d0:	4798      	blx	r3
 80123d2:	3601      	adds	r6, #1
 80123d4:	e7ee      	b.n	80123b4 <__libc_init_array+0xc>
 80123d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80123da:	4798      	blx	r3
 80123dc:	3601      	adds	r6, #1
 80123de:	e7f2      	b.n	80123c6 <__libc_init_array+0x1e>
 80123e0:	0802ae90 	.word	0x0802ae90
 80123e4:	0802ae90 	.word	0x0802ae90
 80123e8:	0802ae90 	.word	0x0802ae90
 80123ec:	0802ae94 	.word	0x0802ae94

080123f0 <memset>:
 80123f0:	4402      	add	r2, r0
 80123f2:	4603      	mov	r3, r0
 80123f4:	4293      	cmp	r3, r2
 80123f6:	d100      	bne.n	80123fa <memset+0xa>
 80123f8:	4770      	bx	lr
 80123fa:	f803 1b01 	strb.w	r1, [r3], #1
 80123fe:	e7f9      	b.n	80123f4 <memset+0x4>

08012400 <__cvt>:
 8012400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012404:	ec55 4b10 	vmov	r4, r5, d0
 8012408:	2d00      	cmp	r5, #0
 801240a:	460e      	mov	r6, r1
 801240c:	4619      	mov	r1, r3
 801240e:	462b      	mov	r3, r5
 8012410:	bfbb      	ittet	lt
 8012412:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012416:	461d      	movlt	r5, r3
 8012418:	2300      	movge	r3, #0
 801241a:	232d      	movlt	r3, #45	; 0x2d
 801241c:	700b      	strb	r3, [r1, #0]
 801241e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012420:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012424:	4691      	mov	r9, r2
 8012426:	f023 0820 	bic.w	r8, r3, #32
 801242a:	bfbc      	itt	lt
 801242c:	4622      	movlt	r2, r4
 801242e:	4614      	movlt	r4, r2
 8012430:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012434:	d005      	beq.n	8012442 <__cvt+0x42>
 8012436:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801243a:	d100      	bne.n	801243e <__cvt+0x3e>
 801243c:	3601      	adds	r6, #1
 801243e:	2102      	movs	r1, #2
 8012440:	e000      	b.n	8012444 <__cvt+0x44>
 8012442:	2103      	movs	r1, #3
 8012444:	ab03      	add	r3, sp, #12
 8012446:	9301      	str	r3, [sp, #4]
 8012448:	ab02      	add	r3, sp, #8
 801244a:	9300      	str	r3, [sp, #0]
 801244c:	ec45 4b10 	vmov	d0, r4, r5
 8012450:	4653      	mov	r3, sl
 8012452:	4632      	mov	r2, r6
 8012454:	f001 fe44 	bl	80140e0 <_dtoa_r>
 8012458:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801245c:	4607      	mov	r7, r0
 801245e:	d102      	bne.n	8012466 <__cvt+0x66>
 8012460:	f019 0f01 	tst.w	r9, #1
 8012464:	d022      	beq.n	80124ac <__cvt+0xac>
 8012466:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801246a:	eb07 0906 	add.w	r9, r7, r6
 801246e:	d110      	bne.n	8012492 <__cvt+0x92>
 8012470:	783b      	ldrb	r3, [r7, #0]
 8012472:	2b30      	cmp	r3, #48	; 0x30
 8012474:	d10a      	bne.n	801248c <__cvt+0x8c>
 8012476:	2200      	movs	r2, #0
 8012478:	2300      	movs	r3, #0
 801247a:	4620      	mov	r0, r4
 801247c:	4629      	mov	r1, r5
 801247e:	f7ee fb3b 	bl	8000af8 <__aeabi_dcmpeq>
 8012482:	b918      	cbnz	r0, 801248c <__cvt+0x8c>
 8012484:	f1c6 0601 	rsb	r6, r6, #1
 8012488:	f8ca 6000 	str.w	r6, [sl]
 801248c:	f8da 3000 	ldr.w	r3, [sl]
 8012490:	4499      	add	r9, r3
 8012492:	2200      	movs	r2, #0
 8012494:	2300      	movs	r3, #0
 8012496:	4620      	mov	r0, r4
 8012498:	4629      	mov	r1, r5
 801249a:	f7ee fb2d 	bl	8000af8 <__aeabi_dcmpeq>
 801249e:	b108      	cbz	r0, 80124a4 <__cvt+0xa4>
 80124a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80124a4:	2230      	movs	r2, #48	; 0x30
 80124a6:	9b03      	ldr	r3, [sp, #12]
 80124a8:	454b      	cmp	r3, r9
 80124aa:	d307      	bcc.n	80124bc <__cvt+0xbc>
 80124ac:	9b03      	ldr	r3, [sp, #12]
 80124ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124b0:	1bdb      	subs	r3, r3, r7
 80124b2:	4638      	mov	r0, r7
 80124b4:	6013      	str	r3, [r2, #0]
 80124b6:	b004      	add	sp, #16
 80124b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124bc:	1c59      	adds	r1, r3, #1
 80124be:	9103      	str	r1, [sp, #12]
 80124c0:	701a      	strb	r2, [r3, #0]
 80124c2:	e7f0      	b.n	80124a6 <__cvt+0xa6>

080124c4 <__exponent>:
 80124c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124c6:	4603      	mov	r3, r0
 80124c8:	2900      	cmp	r1, #0
 80124ca:	bfb8      	it	lt
 80124cc:	4249      	neglt	r1, r1
 80124ce:	f803 2b02 	strb.w	r2, [r3], #2
 80124d2:	bfb4      	ite	lt
 80124d4:	222d      	movlt	r2, #45	; 0x2d
 80124d6:	222b      	movge	r2, #43	; 0x2b
 80124d8:	2909      	cmp	r1, #9
 80124da:	7042      	strb	r2, [r0, #1]
 80124dc:	dd2a      	ble.n	8012534 <__exponent+0x70>
 80124de:	f10d 0407 	add.w	r4, sp, #7
 80124e2:	46a4      	mov	ip, r4
 80124e4:	270a      	movs	r7, #10
 80124e6:	46a6      	mov	lr, r4
 80124e8:	460a      	mov	r2, r1
 80124ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80124ee:	fb07 1516 	mls	r5, r7, r6, r1
 80124f2:	3530      	adds	r5, #48	; 0x30
 80124f4:	2a63      	cmp	r2, #99	; 0x63
 80124f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80124fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80124fe:	4631      	mov	r1, r6
 8012500:	dcf1      	bgt.n	80124e6 <__exponent+0x22>
 8012502:	3130      	adds	r1, #48	; 0x30
 8012504:	f1ae 0502 	sub.w	r5, lr, #2
 8012508:	f804 1c01 	strb.w	r1, [r4, #-1]
 801250c:	1c44      	adds	r4, r0, #1
 801250e:	4629      	mov	r1, r5
 8012510:	4561      	cmp	r1, ip
 8012512:	d30a      	bcc.n	801252a <__exponent+0x66>
 8012514:	f10d 0209 	add.w	r2, sp, #9
 8012518:	eba2 020e 	sub.w	r2, r2, lr
 801251c:	4565      	cmp	r5, ip
 801251e:	bf88      	it	hi
 8012520:	2200      	movhi	r2, #0
 8012522:	4413      	add	r3, r2
 8012524:	1a18      	subs	r0, r3, r0
 8012526:	b003      	add	sp, #12
 8012528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801252a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801252e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012532:	e7ed      	b.n	8012510 <__exponent+0x4c>
 8012534:	2330      	movs	r3, #48	; 0x30
 8012536:	3130      	adds	r1, #48	; 0x30
 8012538:	7083      	strb	r3, [r0, #2]
 801253a:	70c1      	strb	r1, [r0, #3]
 801253c:	1d03      	adds	r3, r0, #4
 801253e:	e7f1      	b.n	8012524 <__exponent+0x60>

08012540 <_printf_float>:
 8012540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012544:	ed2d 8b02 	vpush	{d8}
 8012548:	b08d      	sub	sp, #52	; 0x34
 801254a:	460c      	mov	r4, r1
 801254c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012550:	4616      	mov	r6, r2
 8012552:	461f      	mov	r7, r3
 8012554:	4605      	mov	r5, r0
 8012556:	f002 ff31 	bl	80153bc <_localeconv_r>
 801255a:	f8d0 a000 	ldr.w	sl, [r0]
 801255e:	4650      	mov	r0, sl
 8012560:	f7ed fe48 	bl	80001f4 <strlen>
 8012564:	2300      	movs	r3, #0
 8012566:	930a      	str	r3, [sp, #40]	; 0x28
 8012568:	6823      	ldr	r3, [r4, #0]
 801256a:	9305      	str	r3, [sp, #20]
 801256c:	f8d8 3000 	ldr.w	r3, [r8]
 8012570:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012574:	3307      	adds	r3, #7
 8012576:	f023 0307 	bic.w	r3, r3, #7
 801257a:	f103 0208 	add.w	r2, r3, #8
 801257e:	f8c8 2000 	str.w	r2, [r8]
 8012582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012586:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801258a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801258e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012592:	9307      	str	r3, [sp, #28]
 8012594:	f8cd 8018 	str.w	r8, [sp, #24]
 8012598:	ee08 0a10 	vmov	s16, r0
 801259c:	4b9f      	ldr	r3, [pc, #636]	; (801281c <_printf_float+0x2dc>)
 801259e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80125a2:	f04f 32ff 	mov.w	r2, #4294967295
 80125a6:	f7ee fad9 	bl	8000b5c <__aeabi_dcmpun>
 80125aa:	bb88      	cbnz	r0, 8012610 <_printf_float+0xd0>
 80125ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80125b0:	4b9a      	ldr	r3, [pc, #616]	; (801281c <_printf_float+0x2dc>)
 80125b2:	f04f 32ff 	mov.w	r2, #4294967295
 80125b6:	f7ee fab3 	bl	8000b20 <__aeabi_dcmple>
 80125ba:	bb48      	cbnz	r0, 8012610 <_printf_float+0xd0>
 80125bc:	2200      	movs	r2, #0
 80125be:	2300      	movs	r3, #0
 80125c0:	4640      	mov	r0, r8
 80125c2:	4649      	mov	r1, r9
 80125c4:	f7ee faa2 	bl	8000b0c <__aeabi_dcmplt>
 80125c8:	b110      	cbz	r0, 80125d0 <_printf_float+0x90>
 80125ca:	232d      	movs	r3, #45	; 0x2d
 80125cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125d0:	4b93      	ldr	r3, [pc, #588]	; (8012820 <_printf_float+0x2e0>)
 80125d2:	4894      	ldr	r0, [pc, #592]	; (8012824 <_printf_float+0x2e4>)
 80125d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80125d8:	bf94      	ite	ls
 80125da:	4698      	movls	r8, r3
 80125dc:	4680      	movhi	r8, r0
 80125de:	2303      	movs	r3, #3
 80125e0:	6123      	str	r3, [r4, #16]
 80125e2:	9b05      	ldr	r3, [sp, #20]
 80125e4:	f023 0204 	bic.w	r2, r3, #4
 80125e8:	6022      	str	r2, [r4, #0]
 80125ea:	f04f 0900 	mov.w	r9, #0
 80125ee:	9700      	str	r7, [sp, #0]
 80125f0:	4633      	mov	r3, r6
 80125f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80125f4:	4621      	mov	r1, r4
 80125f6:	4628      	mov	r0, r5
 80125f8:	f000 f9d8 	bl	80129ac <_printf_common>
 80125fc:	3001      	adds	r0, #1
 80125fe:	f040 8090 	bne.w	8012722 <_printf_float+0x1e2>
 8012602:	f04f 30ff 	mov.w	r0, #4294967295
 8012606:	b00d      	add	sp, #52	; 0x34
 8012608:	ecbd 8b02 	vpop	{d8}
 801260c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012610:	4642      	mov	r2, r8
 8012612:	464b      	mov	r3, r9
 8012614:	4640      	mov	r0, r8
 8012616:	4649      	mov	r1, r9
 8012618:	f7ee faa0 	bl	8000b5c <__aeabi_dcmpun>
 801261c:	b140      	cbz	r0, 8012630 <_printf_float+0xf0>
 801261e:	464b      	mov	r3, r9
 8012620:	2b00      	cmp	r3, #0
 8012622:	bfbc      	itt	lt
 8012624:	232d      	movlt	r3, #45	; 0x2d
 8012626:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801262a:	487f      	ldr	r0, [pc, #508]	; (8012828 <_printf_float+0x2e8>)
 801262c:	4b7f      	ldr	r3, [pc, #508]	; (801282c <_printf_float+0x2ec>)
 801262e:	e7d1      	b.n	80125d4 <_printf_float+0x94>
 8012630:	6863      	ldr	r3, [r4, #4]
 8012632:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012636:	9206      	str	r2, [sp, #24]
 8012638:	1c5a      	adds	r2, r3, #1
 801263a:	d13f      	bne.n	80126bc <_printf_float+0x17c>
 801263c:	2306      	movs	r3, #6
 801263e:	6063      	str	r3, [r4, #4]
 8012640:	9b05      	ldr	r3, [sp, #20]
 8012642:	6861      	ldr	r1, [r4, #4]
 8012644:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012648:	2300      	movs	r3, #0
 801264a:	9303      	str	r3, [sp, #12]
 801264c:	ab0a      	add	r3, sp, #40	; 0x28
 801264e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012652:	ab09      	add	r3, sp, #36	; 0x24
 8012654:	ec49 8b10 	vmov	d0, r8, r9
 8012658:	9300      	str	r3, [sp, #0]
 801265a:	6022      	str	r2, [r4, #0]
 801265c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012660:	4628      	mov	r0, r5
 8012662:	f7ff fecd 	bl	8012400 <__cvt>
 8012666:	9b06      	ldr	r3, [sp, #24]
 8012668:	9909      	ldr	r1, [sp, #36]	; 0x24
 801266a:	2b47      	cmp	r3, #71	; 0x47
 801266c:	4680      	mov	r8, r0
 801266e:	d108      	bne.n	8012682 <_printf_float+0x142>
 8012670:	1cc8      	adds	r0, r1, #3
 8012672:	db02      	blt.n	801267a <_printf_float+0x13a>
 8012674:	6863      	ldr	r3, [r4, #4]
 8012676:	4299      	cmp	r1, r3
 8012678:	dd41      	ble.n	80126fe <_printf_float+0x1be>
 801267a:	f1ab 0b02 	sub.w	fp, fp, #2
 801267e:	fa5f fb8b 	uxtb.w	fp, fp
 8012682:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012686:	d820      	bhi.n	80126ca <_printf_float+0x18a>
 8012688:	3901      	subs	r1, #1
 801268a:	465a      	mov	r2, fp
 801268c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012690:	9109      	str	r1, [sp, #36]	; 0x24
 8012692:	f7ff ff17 	bl	80124c4 <__exponent>
 8012696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012698:	1813      	adds	r3, r2, r0
 801269a:	2a01      	cmp	r2, #1
 801269c:	4681      	mov	r9, r0
 801269e:	6123      	str	r3, [r4, #16]
 80126a0:	dc02      	bgt.n	80126a8 <_printf_float+0x168>
 80126a2:	6822      	ldr	r2, [r4, #0]
 80126a4:	07d2      	lsls	r2, r2, #31
 80126a6:	d501      	bpl.n	80126ac <_printf_float+0x16c>
 80126a8:	3301      	adds	r3, #1
 80126aa:	6123      	str	r3, [r4, #16]
 80126ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d09c      	beq.n	80125ee <_printf_float+0xae>
 80126b4:	232d      	movs	r3, #45	; 0x2d
 80126b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126ba:	e798      	b.n	80125ee <_printf_float+0xae>
 80126bc:	9a06      	ldr	r2, [sp, #24]
 80126be:	2a47      	cmp	r2, #71	; 0x47
 80126c0:	d1be      	bne.n	8012640 <_printf_float+0x100>
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d1bc      	bne.n	8012640 <_printf_float+0x100>
 80126c6:	2301      	movs	r3, #1
 80126c8:	e7b9      	b.n	801263e <_printf_float+0xfe>
 80126ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80126ce:	d118      	bne.n	8012702 <_printf_float+0x1c2>
 80126d0:	2900      	cmp	r1, #0
 80126d2:	6863      	ldr	r3, [r4, #4]
 80126d4:	dd0b      	ble.n	80126ee <_printf_float+0x1ae>
 80126d6:	6121      	str	r1, [r4, #16]
 80126d8:	b913      	cbnz	r3, 80126e0 <_printf_float+0x1a0>
 80126da:	6822      	ldr	r2, [r4, #0]
 80126dc:	07d0      	lsls	r0, r2, #31
 80126de:	d502      	bpl.n	80126e6 <_printf_float+0x1a6>
 80126e0:	3301      	adds	r3, #1
 80126e2:	440b      	add	r3, r1
 80126e4:	6123      	str	r3, [r4, #16]
 80126e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80126e8:	f04f 0900 	mov.w	r9, #0
 80126ec:	e7de      	b.n	80126ac <_printf_float+0x16c>
 80126ee:	b913      	cbnz	r3, 80126f6 <_printf_float+0x1b6>
 80126f0:	6822      	ldr	r2, [r4, #0]
 80126f2:	07d2      	lsls	r2, r2, #31
 80126f4:	d501      	bpl.n	80126fa <_printf_float+0x1ba>
 80126f6:	3302      	adds	r3, #2
 80126f8:	e7f4      	b.n	80126e4 <_printf_float+0x1a4>
 80126fa:	2301      	movs	r3, #1
 80126fc:	e7f2      	b.n	80126e4 <_printf_float+0x1a4>
 80126fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012704:	4299      	cmp	r1, r3
 8012706:	db05      	blt.n	8012714 <_printf_float+0x1d4>
 8012708:	6823      	ldr	r3, [r4, #0]
 801270a:	6121      	str	r1, [r4, #16]
 801270c:	07d8      	lsls	r0, r3, #31
 801270e:	d5ea      	bpl.n	80126e6 <_printf_float+0x1a6>
 8012710:	1c4b      	adds	r3, r1, #1
 8012712:	e7e7      	b.n	80126e4 <_printf_float+0x1a4>
 8012714:	2900      	cmp	r1, #0
 8012716:	bfd4      	ite	le
 8012718:	f1c1 0202 	rsble	r2, r1, #2
 801271c:	2201      	movgt	r2, #1
 801271e:	4413      	add	r3, r2
 8012720:	e7e0      	b.n	80126e4 <_printf_float+0x1a4>
 8012722:	6823      	ldr	r3, [r4, #0]
 8012724:	055a      	lsls	r2, r3, #21
 8012726:	d407      	bmi.n	8012738 <_printf_float+0x1f8>
 8012728:	6923      	ldr	r3, [r4, #16]
 801272a:	4642      	mov	r2, r8
 801272c:	4631      	mov	r1, r6
 801272e:	4628      	mov	r0, r5
 8012730:	47b8      	blx	r7
 8012732:	3001      	adds	r0, #1
 8012734:	d12c      	bne.n	8012790 <_printf_float+0x250>
 8012736:	e764      	b.n	8012602 <_printf_float+0xc2>
 8012738:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801273c:	f240 80e0 	bls.w	8012900 <_printf_float+0x3c0>
 8012740:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012744:	2200      	movs	r2, #0
 8012746:	2300      	movs	r3, #0
 8012748:	f7ee f9d6 	bl	8000af8 <__aeabi_dcmpeq>
 801274c:	2800      	cmp	r0, #0
 801274e:	d034      	beq.n	80127ba <_printf_float+0x27a>
 8012750:	4a37      	ldr	r2, [pc, #220]	; (8012830 <_printf_float+0x2f0>)
 8012752:	2301      	movs	r3, #1
 8012754:	4631      	mov	r1, r6
 8012756:	4628      	mov	r0, r5
 8012758:	47b8      	blx	r7
 801275a:	3001      	adds	r0, #1
 801275c:	f43f af51 	beq.w	8012602 <_printf_float+0xc2>
 8012760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012764:	429a      	cmp	r2, r3
 8012766:	db02      	blt.n	801276e <_printf_float+0x22e>
 8012768:	6823      	ldr	r3, [r4, #0]
 801276a:	07d8      	lsls	r0, r3, #31
 801276c:	d510      	bpl.n	8012790 <_printf_float+0x250>
 801276e:	ee18 3a10 	vmov	r3, s16
 8012772:	4652      	mov	r2, sl
 8012774:	4631      	mov	r1, r6
 8012776:	4628      	mov	r0, r5
 8012778:	47b8      	blx	r7
 801277a:	3001      	adds	r0, #1
 801277c:	f43f af41 	beq.w	8012602 <_printf_float+0xc2>
 8012780:	f04f 0800 	mov.w	r8, #0
 8012784:	f104 091a 	add.w	r9, r4, #26
 8012788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801278a:	3b01      	subs	r3, #1
 801278c:	4543      	cmp	r3, r8
 801278e:	dc09      	bgt.n	80127a4 <_printf_float+0x264>
 8012790:	6823      	ldr	r3, [r4, #0]
 8012792:	079b      	lsls	r3, r3, #30
 8012794:	f100 8105 	bmi.w	80129a2 <_printf_float+0x462>
 8012798:	68e0      	ldr	r0, [r4, #12]
 801279a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801279c:	4298      	cmp	r0, r3
 801279e:	bfb8      	it	lt
 80127a0:	4618      	movlt	r0, r3
 80127a2:	e730      	b.n	8012606 <_printf_float+0xc6>
 80127a4:	2301      	movs	r3, #1
 80127a6:	464a      	mov	r2, r9
 80127a8:	4631      	mov	r1, r6
 80127aa:	4628      	mov	r0, r5
 80127ac:	47b8      	blx	r7
 80127ae:	3001      	adds	r0, #1
 80127b0:	f43f af27 	beq.w	8012602 <_printf_float+0xc2>
 80127b4:	f108 0801 	add.w	r8, r8, #1
 80127b8:	e7e6      	b.n	8012788 <_printf_float+0x248>
 80127ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127bc:	2b00      	cmp	r3, #0
 80127be:	dc39      	bgt.n	8012834 <_printf_float+0x2f4>
 80127c0:	4a1b      	ldr	r2, [pc, #108]	; (8012830 <_printf_float+0x2f0>)
 80127c2:	2301      	movs	r3, #1
 80127c4:	4631      	mov	r1, r6
 80127c6:	4628      	mov	r0, r5
 80127c8:	47b8      	blx	r7
 80127ca:	3001      	adds	r0, #1
 80127cc:	f43f af19 	beq.w	8012602 <_printf_float+0xc2>
 80127d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80127d4:	4313      	orrs	r3, r2
 80127d6:	d102      	bne.n	80127de <_printf_float+0x29e>
 80127d8:	6823      	ldr	r3, [r4, #0]
 80127da:	07d9      	lsls	r1, r3, #31
 80127dc:	d5d8      	bpl.n	8012790 <_printf_float+0x250>
 80127de:	ee18 3a10 	vmov	r3, s16
 80127e2:	4652      	mov	r2, sl
 80127e4:	4631      	mov	r1, r6
 80127e6:	4628      	mov	r0, r5
 80127e8:	47b8      	blx	r7
 80127ea:	3001      	adds	r0, #1
 80127ec:	f43f af09 	beq.w	8012602 <_printf_float+0xc2>
 80127f0:	f04f 0900 	mov.w	r9, #0
 80127f4:	f104 0a1a 	add.w	sl, r4, #26
 80127f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127fa:	425b      	negs	r3, r3
 80127fc:	454b      	cmp	r3, r9
 80127fe:	dc01      	bgt.n	8012804 <_printf_float+0x2c4>
 8012800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012802:	e792      	b.n	801272a <_printf_float+0x1ea>
 8012804:	2301      	movs	r3, #1
 8012806:	4652      	mov	r2, sl
 8012808:	4631      	mov	r1, r6
 801280a:	4628      	mov	r0, r5
 801280c:	47b8      	blx	r7
 801280e:	3001      	adds	r0, #1
 8012810:	f43f aef7 	beq.w	8012602 <_printf_float+0xc2>
 8012814:	f109 0901 	add.w	r9, r9, #1
 8012818:	e7ee      	b.n	80127f8 <_printf_float+0x2b8>
 801281a:	bf00      	nop
 801281c:	7fefffff 	.word	0x7fefffff
 8012820:	0802a97c 	.word	0x0802a97c
 8012824:	0802a980 	.word	0x0802a980
 8012828:	0802a988 	.word	0x0802a988
 801282c:	0802a984 	.word	0x0802a984
 8012830:	0802a98c 	.word	0x0802a98c
 8012834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012836:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012838:	429a      	cmp	r2, r3
 801283a:	bfa8      	it	ge
 801283c:	461a      	movge	r2, r3
 801283e:	2a00      	cmp	r2, #0
 8012840:	4691      	mov	r9, r2
 8012842:	dc37      	bgt.n	80128b4 <_printf_float+0x374>
 8012844:	f04f 0b00 	mov.w	fp, #0
 8012848:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801284c:	f104 021a 	add.w	r2, r4, #26
 8012850:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012852:	9305      	str	r3, [sp, #20]
 8012854:	eba3 0309 	sub.w	r3, r3, r9
 8012858:	455b      	cmp	r3, fp
 801285a:	dc33      	bgt.n	80128c4 <_printf_float+0x384>
 801285c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012860:	429a      	cmp	r2, r3
 8012862:	db3b      	blt.n	80128dc <_printf_float+0x39c>
 8012864:	6823      	ldr	r3, [r4, #0]
 8012866:	07da      	lsls	r2, r3, #31
 8012868:	d438      	bmi.n	80128dc <_printf_float+0x39c>
 801286a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801286c:	9b05      	ldr	r3, [sp, #20]
 801286e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012870:	1ad3      	subs	r3, r2, r3
 8012872:	eba2 0901 	sub.w	r9, r2, r1
 8012876:	4599      	cmp	r9, r3
 8012878:	bfa8      	it	ge
 801287a:	4699      	movge	r9, r3
 801287c:	f1b9 0f00 	cmp.w	r9, #0
 8012880:	dc35      	bgt.n	80128ee <_printf_float+0x3ae>
 8012882:	f04f 0800 	mov.w	r8, #0
 8012886:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801288a:	f104 0a1a 	add.w	sl, r4, #26
 801288e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012892:	1a9b      	subs	r3, r3, r2
 8012894:	eba3 0309 	sub.w	r3, r3, r9
 8012898:	4543      	cmp	r3, r8
 801289a:	f77f af79 	ble.w	8012790 <_printf_float+0x250>
 801289e:	2301      	movs	r3, #1
 80128a0:	4652      	mov	r2, sl
 80128a2:	4631      	mov	r1, r6
 80128a4:	4628      	mov	r0, r5
 80128a6:	47b8      	blx	r7
 80128a8:	3001      	adds	r0, #1
 80128aa:	f43f aeaa 	beq.w	8012602 <_printf_float+0xc2>
 80128ae:	f108 0801 	add.w	r8, r8, #1
 80128b2:	e7ec      	b.n	801288e <_printf_float+0x34e>
 80128b4:	4613      	mov	r3, r2
 80128b6:	4631      	mov	r1, r6
 80128b8:	4642      	mov	r2, r8
 80128ba:	4628      	mov	r0, r5
 80128bc:	47b8      	blx	r7
 80128be:	3001      	adds	r0, #1
 80128c0:	d1c0      	bne.n	8012844 <_printf_float+0x304>
 80128c2:	e69e      	b.n	8012602 <_printf_float+0xc2>
 80128c4:	2301      	movs	r3, #1
 80128c6:	4631      	mov	r1, r6
 80128c8:	4628      	mov	r0, r5
 80128ca:	9205      	str	r2, [sp, #20]
 80128cc:	47b8      	blx	r7
 80128ce:	3001      	adds	r0, #1
 80128d0:	f43f ae97 	beq.w	8012602 <_printf_float+0xc2>
 80128d4:	9a05      	ldr	r2, [sp, #20]
 80128d6:	f10b 0b01 	add.w	fp, fp, #1
 80128da:	e7b9      	b.n	8012850 <_printf_float+0x310>
 80128dc:	ee18 3a10 	vmov	r3, s16
 80128e0:	4652      	mov	r2, sl
 80128e2:	4631      	mov	r1, r6
 80128e4:	4628      	mov	r0, r5
 80128e6:	47b8      	blx	r7
 80128e8:	3001      	adds	r0, #1
 80128ea:	d1be      	bne.n	801286a <_printf_float+0x32a>
 80128ec:	e689      	b.n	8012602 <_printf_float+0xc2>
 80128ee:	9a05      	ldr	r2, [sp, #20]
 80128f0:	464b      	mov	r3, r9
 80128f2:	4442      	add	r2, r8
 80128f4:	4631      	mov	r1, r6
 80128f6:	4628      	mov	r0, r5
 80128f8:	47b8      	blx	r7
 80128fa:	3001      	adds	r0, #1
 80128fc:	d1c1      	bne.n	8012882 <_printf_float+0x342>
 80128fe:	e680      	b.n	8012602 <_printf_float+0xc2>
 8012900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012902:	2a01      	cmp	r2, #1
 8012904:	dc01      	bgt.n	801290a <_printf_float+0x3ca>
 8012906:	07db      	lsls	r3, r3, #31
 8012908:	d538      	bpl.n	801297c <_printf_float+0x43c>
 801290a:	2301      	movs	r3, #1
 801290c:	4642      	mov	r2, r8
 801290e:	4631      	mov	r1, r6
 8012910:	4628      	mov	r0, r5
 8012912:	47b8      	blx	r7
 8012914:	3001      	adds	r0, #1
 8012916:	f43f ae74 	beq.w	8012602 <_printf_float+0xc2>
 801291a:	ee18 3a10 	vmov	r3, s16
 801291e:	4652      	mov	r2, sl
 8012920:	4631      	mov	r1, r6
 8012922:	4628      	mov	r0, r5
 8012924:	47b8      	blx	r7
 8012926:	3001      	adds	r0, #1
 8012928:	f43f ae6b 	beq.w	8012602 <_printf_float+0xc2>
 801292c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012930:	2200      	movs	r2, #0
 8012932:	2300      	movs	r3, #0
 8012934:	f7ee f8e0 	bl	8000af8 <__aeabi_dcmpeq>
 8012938:	b9d8      	cbnz	r0, 8012972 <_printf_float+0x432>
 801293a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801293c:	f108 0201 	add.w	r2, r8, #1
 8012940:	3b01      	subs	r3, #1
 8012942:	4631      	mov	r1, r6
 8012944:	4628      	mov	r0, r5
 8012946:	47b8      	blx	r7
 8012948:	3001      	adds	r0, #1
 801294a:	d10e      	bne.n	801296a <_printf_float+0x42a>
 801294c:	e659      	b.n	8012602 <_printf_float+0xc2>
 801294e:	2301      	movs	r3, #1
 8012950:	4652      	mov	r2, sl
 8012952:	4631      	mov	r1, r6
 8012954:	4628      	mov	r0, r5
 8012956:	47b8      	blx	r7
 8012958:	3001      	adds	r0, #1
 801295a:	f43f ae52 	beq.w	8012602 <_printf_float+0xc2>
 801295e:	f108 0801 	add.w	r8, r8, #1
 8012962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012964:	3b01      	subs	r3, #1
 8012966:	4543      	cmp	r3, r8
 8012968:	dcf1      	bgt.n	801294e <_printf_float+0x40e>
 801296a:	464b      	mov	r3, r9
 801296c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012970:	e6dc      	b.n	801272c <_printf_float+0x1ec>
 8012972:	f04f 0800 	mov.w	r8, #0
 8012976:	f104 0a1a 	add.w	sl, r4, #26
 801297a:	e7f2      	b.n	8012962 <_printf_float+0x422>
 801297c:	2301      	movs	r3, #1
 801297e:	4642      	mov	r2, r8
 8012980:	e7df      	b.n	8012942 <_printf_float+0x402>
 8012982:	2301      	movs	r3, #1
 8012984:	464a      	mov	r2, r9
 8012986:	4631      	mov	r1, r6
 8012988:	4628      	mov	r0, r5
 801298a:	47b8      	blx	r7
 801298c:	3001      	adds	r0, #1
 801298e:	f43f ae38 	beq.w	8012602 <_printf_float+0xc2>
 8012992:	f108 0801 	add.w	r8, r8, #1
 8012996:	68e3      	ldr	r3, [r4, #12]
 8012998:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801299a:	1a5b      	subs	r3, r3, r1
 801299c:	4543      	cmp	r3, r8
 801299e:	dcf0      	bgt.n	8012982 <_printf_float+0x442>
 80129a0:	e6fa      	b.n	8012798 <_printf_float+0x258>
 80129a2:	f04f 0800 	mov.w	r8, #0
 80129a6:	f104 0919 	add.w	r9, r4, #25
 80129aa:	e7f4      	b.n	8012996 <_printf_float+0x456>

080129ac <_printf_common>:
 80129ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129b0:	4616      	mov	r6, r2
 80129b2:	4699      	mov	r9, r3
 80129b4:	688a      	ldr	r2, [r1, #8]
 80129b6:	690b      	ldr	r3, [r1, #16]
 80129b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80129bc:	4293      	cmp	r3, r2
 80129be:	bfb8      	it	lt
 80129c0:	4613      	movlt	r3, r2
 80129c2:	6033      	str	r3, [r6, #0]
 80129c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80129c8:	4607      	mov	r7, r0
 80129ca:	460c      	mov	r4, r1
 80129cc:	b10a      	cbz	r2, 80129d2 <_printf_common+0x26>
 80129ce:	3301      	adds	r3, #1
 80129d0:	6033      	str	r3, [r6, #0]
 80129d2:	6823      	ldr	r3, [r4, #0]
 80129d4:	0699      	lsls	r1, r3, #26
 80129d6:	bf42      	ittt	mi
 80129d8:	6833      	ldrmi	r3, [r6, #0]
 80129da:	3302      	addmi	r3, #2
 80129dc:	6033      	strmi	r3, [r6, #0]
 80129de:	6825      	ldr	r5, [r4, #0]
 80129e0:	f015 0506 	ands.w	r5, r5, #6
 80129e4:	d106      	bne.n	80129f4 <_printf_common+0x48>
 80129e6:	f104 0a19 	add.w	sl, r4, #25
 80129ea:	68e3      	ldr	r3, [r4, #12]
 80129ec:	6832      	ldr	r2, [r6, #0]
 80129ee:	1a9b      	subs	r3, r3, r2
 80129f0:	42ab      	cmp	r3, r5
 80129f2:	dc26      	bgt.n	8012a42 <_printf_common+0x96>
 80129f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80129f8:	1e13      	subs	r3, r2, #0
 80129fa:	6822      	ldr	r2, [r4, #0]
 80129fc:	bf18      	it	ne
 80129fe:	2301      	movne	r3, #1
 8012a00:	0692      	lsls	r2, r2, #26
 8012a02:	d42b      	bmi.n	8012a5c <_printf_common+0xb0>
 8012a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a08:	4649      	mov	r1, r9
 8012a0a:	4638      	mov	r0, r7
 8012a0c:	47c0      	blx	r8
 8012a0e:	3001      	adds	r0, #1
 8012a10:	d01e      	beq.n	8012a50 <_printf_common+0xa4>
 8012a12:	6823      	ldr	r3, [r4, #0]
 8012a14:	68e5      	ldr	r5, [r4, #12]
 8012a16:	6832      	ldr	r2, [r6, #0]
 8012a18:	f003 0306 	and.w	r3, r3, #6
 8012a1c:	2b04      	cmp	r3, #4
 8012a1e:	bf08      	it	eq
 8012a20:	1aad      	subeq	r5, r5, r2
 8012a22:	68a3      	ldr	r3, [r4, #8]
 8012a24:	6922      	ldr	r2, [r4, #16]
 8012a26:	bf0c      	ite	eq
 8012a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a2c:	2500      	movne	r5, #0
 8012a2e:	4293      	cmp	r3, r2
 8012a30:	bfc4      	itt	gt
 8012a32:	1a9b      	subgt	r3, r3, r2
 8012a34:	18ed      	addgt	r5, r5, r3
 8012a36:	2600      	movs	r6, #0
 8012a38:	341a      	adds	r4, #26
 8012a3a:	42b5      	cmp	r5, r6
 8012a3c:	d11a      	bne.n	8012a74 <_printf_common+0xc8>
 8012a3e:	2000      	movs	r0, #0
 8012a40:	e008      	b.n	8012a54 <_printf_common+0xa8>
 8012a42:	2301      	movs	r3, #1
 8012a44:	4652      	mov	r2, sl
 8012a46:	4649      	mov	r1, r9
 8012a48:	4638      	mov	r0, r7
 8012a4a:	47c0      	blx	r8
 8012a4c:	3001      	adds	r0, #1
 8012a4e:	d103      	bne.n	8012a58 <_printf_common+0xac>
 8012a50:	f04f 30ff 	mov.w	r0, #4294967295
 8012a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a58:	3501      	adds	r5, #1
 8012a5a:	e7c6      	b.n	80129ea <_printf_common+0x3e>
 8012a5c:	18e1      	adds	r1, r4, r3
 8012a5e:	1c5a      	adds	r2, r3, #1
 8012a60:	2030      	movs	r0, #48	; 0x30
 8012a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012a66:	4422      	add	r2, r4
 8012a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012a6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012a70:	3302      	adds	r3, #2
 8012a72:	e7c7      	b.n	8012a04 <_printf_common+0x58>
 8012a74:	2301      	movs	r3, #1
 8012a76:	4622      	mov	r2, r4
 8012a78:	4649      	mov	r1, r9
 8012a7a:	4638      	mov	r0, r7
 8012a7c:	47c0      	blx	r8
 8012a7e:	3001      	adds	r0, #1
 8012a80:	d0e6      	beq.n	8012a50 <_printf_common+0xa4>
 8012a82:	3601      	adds	r6, #1
 8012a84:	e7d9      	b.n	8012a3a <_printf_common+0x8e>
	...

08012a88 <_printf_i>:
 8012a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a8c:	460c      	mov	r4, r1
 8012a8e:	4691      	mov	r9, r2
 8012a90:	7e27      	ldrb	r7, [r4, #24]
 8012a92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012a94:	2f78      	cmp	r7, #120	; 0x78
 8012a96:	4680      	mov	r8, r0
 8012a98:	469a      	mov	sl, r3
 8012a9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a9e:	d807      	bhi.n	8012ab0 <_printf_i+0x28>
 8012aa0:	2f62      	cmp	r7, #98	; 0x62
 8012aa2:	d80a      	bhi.n	8012aba <_printf_i+0x32>
 8012aa4:	2f00      	cmp	r7, #0
 8012aa6:	f000 80d8 	beq.w	8012c5a <_printf_i+0x1d2>
 8012aaa:	2f58      	cmp	r7, #88	; 0x58
 8012aac:	f000 80a3 	beq.w	8012bf6 <_printf_i+0x16e>
 8012ab0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012ab8:	e03a      	b.n	8012b30 <_printf_i+0xa8>
 8012aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012abe:	2b15      	cmp	r3, #21
 8012ac0:	d8f6      	bhi.n	8012ab0 <_printf_i+0x28>
 8012ac2:	a001      	add	r0, pc, #4	; (adr r0, 8012ac8 <_printf_i+0x40>)
 8012ac4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012ac8:	08012b21 	.word	0x08012b21
 8012acc:	08012b35 	.word	0x08012b35
 8012ad0:	08012ab1 	.word	0x08012ab1
 8012ad4:	08012ab1 	.word	0x08012ab1
 8012ad8:	08012ab1 	.word	0x08012ab1
 8012adc:	08012ab1 	.word	0x08012ab1
 8012ae0:	08012b35 	.word	0x08012b35
 8012ae4:	08012ab1 	.word	0x08012ab1
 8012ae8:	08012ab1 	.word	0x08012ab1
 8012aec:	08012ab1 	.word	0x08012ab1
 8012af0:	08012ab1 	.word	0x08012ab1
 8012af4:	08012c41 	.word	0x08012c41
 8012af8:	08012b65 	.word	0x08012b65
 8012afc:	08012c23 	.word	0x08012c23
 8012b00:	08012ab1 	.word	0x08012ab1
 8012b04:	08012ab1 	.word	0x08012ab1
 8012b08:	08012c63 	.word	0x08012c63
 8012b0c:	08012ab1 	.word	0x08012ab1
 8012b10:	08012b65 	.word	0x08012b65
 8012b14:	08012ab1 	.word	0x08012ab1
 8012b18:	08012ab1 	.word	0x08012ab1
 8012b1c:	08012c2b 	.word	0x08012c2b
 8012b20:	680b      	ldr	r3, [r1, #0]
 8012b22:	1d1a      	adds	r2, r3, #4
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	600a      	str	r2, [r1, #0]
 8012b28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b30:	2301      	movs	r3, #1
 8012b32:	e0a3      	b.n	8012c7c <_printf_i+0x1f4>
 8012b34:	6825      	ldr	r5, [r4, #0]
 8012b36:	6808      	ldr	r0, [r1, #0]
 8012b38:	062e      	lsls	r6, r5, #24
 8012b3a:	f100 0304 	add.w	r3, r0, #4
 8012b3e:	d50a      	bpl.n	8012b56 <_printf_i+0xce>
 8012b40:	6805      	ldr	r5, [r0, #0]
 8012b42:	600b      	str	r3, [r1, #0]
 8012b44:	2d00      	cmp	r5, #0
 8012b46:	da03      	bge.n	8012b50 <_printf_i+0xc8>
 8012b48:	232d      	movs	r3, #45	; 0x2d
 8012b4a:	426d      	negs	r5, r5
 8012b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b50:	485e      	ldr	r0, [pc, #376]	; (8012ccc <_printf_i+0x244>)
 8012b52:	230a      	movs	r3, #10
 8012b54:	e019      	b.n	8012b8a <_printf_i+0x102>
 8012b56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012b5a:	6805      	ldr	r5, [r0, #0]
 8012b5c:	600b      	str	r3, [r1, #0]
 8012b5e:	bf18      	it	ne
 8012b60:	b22d      	sxthne	r5, r5
 8012b62:	e7ef      	b.n	8012b44 <_printf_i+0xbc>
 8012b64:	680b      	ldr	r3, [r1, #0]
 8012b66:	6825      	ldr	r5, [r4, #0]
 8012b68:	1d18      	adds	r0, r3, #4
 8012b6a:	6008      	str	r0, [r1, #0]
 8012b6c:	0628      	lsls	r0, r5, #24
 8012b6e:	d501      	bpl.n	8012b74 <_printf_i+0xec>
 8012b70:	681d      	ldr	r5, [r3, #0]
 8012b72:	e002      	b.n	8012b7a <_printf_i+0xf2>
 8012b74:	0669      	lsls	r1, r5, #25
 8012b76:	d5fb      	bpl.n	8012b70 <_printf_i+0xe8>
 8012b78:	881d      	ldrh	r5, [r3, #0]
 8012b7a:	4854      	ldr	r0, [pc, #336]	; (8012ccc <_printf_i+0x244>)
 8012b7c:	2f6f      	cmp	r7, #111	; 0x6f
 8012b7e:	bf0c      	ite	eq
 8012b80:	2308      	moveq	r3, #8
 8012b82:	230a      	movne	r3, #10
 8012b84:	2100      	movs	r1, #0
 8012b86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b8a:	6866      	ldr	r6, [r4, #4]
 8012b8c:	60a6      	str	r6, [r4, #8]
 8012b8e:	2e00      	cmp	r6, #0
 8012b90:	bfa2      	ittt	ge
 8012b92:	6821      	ldrge	r1, [r4, #0]
 8012b94:	f021 0104 	bicge.w	r1, r1, #4
 8012b98:	6021      	strge	r1, [r4, #0]
 8012b9a:	b90d      	cbnz	r5, 8012ba0 <_printf_i+0x118>
 8012b9c:	2e00      	cmp	r6, #0
 8012b9e:	d04d      	beq.n	8012c3c <_printf_i+0x1b4>
 8012ba0:	4616      	mov	r6, r2
 8012ba2:	fbb5 f1f3 	udiv	r1, r5, r3
 8012ba6:	fb03 5711 	mls	r7, r3, r1, r5
 8012baa:	5dc7      	ldrb	r7, [r0, r7]
 8012bac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012bb0:	462f      	mov	r7, r5
 8012bb2:	42bb      	cmp	r3, r7
 8012bb4:	460d      	mov	r5, r1
 8012bb6:	d9f4      	bls.n	8012ba2 <_printf_i+0x11a>
 8012bb8:	2b08      	cmp	r3, #8
 8012bba:	d10b      	bne.n	8012bd4 <_printf_i+0x14c>
 8012bbc:	6823      	ldr	r3, [r4, #0]
 8012bbe:	07df      	lsls	r7, r3, #31
 8012bc0:	d508      	bpl.n	8012bd4 <_printf_i+0x14c>
 8012bc2:	6923      	ldr	r3, [r4, #16]
 8012bc4:	6861      	ldr	r1, [r4, #4]
 8012bc6:	4299      	cmp	r1, r3
 8012bc8:	bfde      	ittt	le
 8012bca:	2330      	movle	r3, #48	; 0x30
 8012bcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012bd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012bd4:	1b92      	subs	r2, r2, r6
 8012bd6:	6122      	str	r2, [r4, #16]
 8012bd8:	f8cd a000 	str.w	sl, [sp]
 8012bdc:	464b      	mov	r3, r9
 8012bde:	aa03      	add	r2, sp, #12
 8012be0:	4621      	mov	r1, r4
 8012be2:	4640      	mov	r0, r8
 8012be4:	f7ff fee2 	bl	80129ac <_printf_common>
 8012be8:	3001      	adds	r0, #1
 8012bea:	d14c      	bne.n	8012c86 <_printf_i+0x1fe>
 8012bec:	f04f 30ff 	mov.w	r0, #4294967295
 8012bf0:	b004      	add	sp, #16
 8012bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bf6:	4835      	ldr	r0, [pc, #212]	; (8012ccc <_printf_i+0x244>)
 8012bf8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012bfc:	6823      	ldr	r3, [r4, #0]
 8012bfe:	680e      	ldr	r6, [r1, #0]
 8012c00:	061f      	lsls	r7, r3, #24
 8012c02:	f856 5b04 	ldr.w	r5, [r6], #4
 8012c06:	600e      	str	r6, [r1, #0]
 8012c08:	d514      	bpl.n	8012c34 <_printf_i+0x1ac>
 8012c0a:	07d9      	lsls	r1, r3, #31
 8012c0c:	bf44      	itt	mi
 8012c0e:	f043 0320 	orrmi.w	r3, r3, #32
 8012c12:	6023      	strmi	r3, [r4, #0]
 8012c14:	b91d      	cbnz	r5, 8012c1e <_printf_i+0x196>
 8012c16:	6823      	ldr	r3, [r4, #0]
 8012c18:	f023 0320 	bic.w	r3, r3, #32
 8012c1c:	6023      	str	r3, [r4, #0]
 8012c1e:	2310      	movs	r3, #16
 8012c20:	e7b0      	b.n	8012b84 <_printf_i+0xfc>
 8012c22:	6823      	ldr	r3, [r4, #0]
 8012c24:	f043 0320 	orr.w	r3, r3, #32
 8012c28:	6023      	str	r3, [r4, #0]
 8012c2a:	2378      	movs	r3, #120	; 0x78
 8012c2c:	4828      	ldr	r0, [pc, #160]	; (8012cd0 <_printf_i+0x248>)
 8012c2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012c32:	e7e3      	b.n	8012bfc <_printf_i+0x174>
 8012c34:	065e      	lsls	r6, r3, #25
 8012c36:	bf48      	it	mi
 8012c38:	b2ad      	uxthmi	r5, r5
 8012c3a:	e7e6      	b.n	8012c0a <_printf_i+0x182>
 8012c3c:	4616      	mov	r6, r2
 8012c3e:	e7bb      	b.n	8012bb8 <_printf_i+0x130>
 8012c40:	680b      	ldr	r3, [r1, #0]
 8012c42:	6826      	ldr	r6, [r4, #0]
 8012c44:	6960      	ldr	r0, [r4, #20]
 8012c46:	1d1d      	adds	r5, r3, #4
 8012c48:	600d      	str	r5, [r1, #0]
 8012c4a:	0635      	lsls	r5, r6, #24
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	d501      	bpl.n	8012c54 <_printf_i+0x1cc>
 8012c50:	6018      	str	r0, [r3, #0]
 8012c52:	e002      	b.n	8012c5a <_printf_i+0x1d2>
 8012c54:	0671      	lsls	r1, r6, #25
 8012c56:	d5fb      	bpl.n	8012c50 <_printf_i+0x1c8>
 8012c58:	8018      	strh	r0, [r3, #0]
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	6123      	str	r3, [r4, #16]
 8012c5e:	4616      	mov	r6, r2
 8012c60:	e7ba      	b.n	8012bd8 <_printf_i+0x150>
 8012c62:	680b      	ldr	r3, [r1, #0]
 8012c64:	1d1a      	adds	r2, r3, #4
 8012c66:	600a      	str	r2, [r1, #0]
 8012c68:	681e      	ldr	r6, [r3, #0]
 8012c6a:	6862      	ldr	r2, [r4, #4]
 8012c6c:	2100      	movs	r1, #0
 8012c6e:	4630      	mov	r0, r6
 8012c70:	f7ed face 	bl	8000210 <memchr>
 8012c74:	b108      	cbz	r0, 8012c7a <_printf_i+0x1f2>
 8012c76:	1b80      	subs	r0, r0, r6
 8012c78:	6060      	str	r0, [r4, #4]
 8012c7a:	6863      	ldr	r3, [r4, #4]
 8012c7c:	6123      	str	r3, [r4, #16]
 8012c7e:	2300      	movs	r3, #0
 8012c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c84:	e7a8      	b.n	8012bd8 <_printf_i+0x150>
 8012c86:	6923      	ldr	r3, [r4, #16]
 8012c88:	4632      	mov	r2, r6
 8012c8a:	4649      	mov	r1, r9
 8012c8c:	4640      	mov	r0, r8
 8012c8e:	47d0      	blx	sl
 8012c90:	3001      	adds	r0, #1
 8012c92:	d0ab      	beq.n	8012bec <_printf_i+0x164>
 8012c94:	6823      	ldr	r3, [r4, #0]
 8012c96:	079b      	lsls	r3, r3, #30
 8012c98:	d413      	bmi.n	8012cc2 <_printf_i+0x23a>
 8012c9a:	68e0      	ldr	r0, [r4, #12]
 8012c9c:	9b03      	ldr	r3, [sp, #12]
 8012c9e:	4298      	cmp	r0, r3
 8012ca0:	bfb8      	it	lt
 8012ca2:	4618      	movlt	r0, r3
 8012ca4:	e7a4      	b.n	8012bf0 <_printf_i+0x168>
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	4632      	mov	r2, r6
 8012caa:	4649      	mov	r1, r9
 8012cac:	4640      	mov	r0, r8
 8012cae:	47d0      	blx	sl
 8012cb0:	3001      	adds	r0, #1
 8012cb2:	d09b      	beq.n	8012bec <_printf_i+0x164>
 8012cb4:	3501      	adds	r5, #1
 8012cb6:	68e3      	ldr	r3, [r4, #12]
 8012cb8:	9903      	ldr	r1, [sp, #12]
 8012cba:	1a5b      	subs	r3, r3, r1
 8012cbc:	42ab      	cmp	r3, r5
 8012cbe:	dcf2      	bgt.n	8012ca6 <_printf_i+0x21e>
 8012cc0:	e7eb      	b.n	8012c9a <_printf_i+0x212>
 8012cc2:	2500      	movs	r5, #0
 8012cc4:	f104 0619 	add.w	r6, r4, #25
 8012cc8:	e7f5      	b.n	8012cb6 <_printf_i+0x22e>
 8012cca:	bf00      	nop
 8012ccc:	0802a98e 	.word	0x0802a98e
 8012cd0:	0802a99f 	.word	0x0802a99f

08012cd4 <_scanf_float>:
 8012cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd8:	b087      	sub	sp, #28
 8012cda:	4617      	mov	r7, r2
 8012cdc:	9303      	str	r3, [sp, #12]
 8012cde:	688b      	ldr	r3, [r1, #8]
 8012ce0:	1e5a      	subs	r2, r3, #1
 8012ce2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012ce6:	bf83      	ittte	hi
 8012ce8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012cec:	195b      	addhi	r3, r3, r5
 8012cee:	9302      	strhi	r3, [sp, #8]
 8012cf0:	2300      	movls	r3, #0
 8012cf2:	bf86      	itte	hi
 8012cf4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012cf8:	608b      	strhi	r3, [r1, #8]
 8012cfa:	9302      	strls	r3, [sp, #8]
 8012cfc:	680b      	ldr	r3, [r1, #0]
 8012cfe:	468b      	mov	fp, r1
 8012d00:	2500      	movs	r5, #0
 8012d02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012d06:	f84b 3b1c 	str.w	r3, [fp], #28
 8012d0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012d0e:	4680      	mov	r8, r0
 8012d10:	460c      	mov	r4, r1
 8012d12:	465e      	mov	r6, fp
 8012d14:	46aa      	mov	sl, r5
 8012d16:	46a9      	mov	r9, r5
 8012d18:	9501      	str	r5, [sp, #4]
 8012d1a:	68a2      	ldr	r2, [r4, #8]
 8012d1c:	b152      	cbz	r2, 8012d34 <_scanf_float+0x60>
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	2b4e      	cmp	r3, #78	; 0x4e
 8012d24:	d864      	bhi.n	8012df0 <_scanf_float+0x11c>
 8012d26:	2b40      	cmp	r3, #64	; 0x40
 8012d28:	d83c      	bhi.n	8012da4 <_scanf_float+0xd0>
 8012d2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012d2e:	b2c8      	uxtb	r0, r1
 8012d30:	280e      	cmp	r0, #14
 8012d32:	d93a      	bls.n	8012daa <_scanf_float+0xd6>
 8012d34:	f1b9 0f00 	cmp.w	r9, #0
 8012d38:	d003      	beq.n	8012d42 <_scanf_float+0x6e>
 8012d3a:	6823      	ldr	r3, [r4, #0]
 8012d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012d40:	6023      	str	r3, [r4, #0]
 8012d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012d46:	f1ba 0f01 	cmp.w	sl, #1
 8012d4a:	f200 8113 	bhi.w	8012f74 <_scanf_float+0x2a0>
 8012d4e:	455e      	cmp	r6, fp
 8012d50:	f200 8105 	bhi.w	8012f5e <_scanf_float+0x28a>
 8012d54:	2501      	movs	r5, #1
 8012d56:	4628      	mov	r0, r5
 8012d58:	b007      	add	sp, #28
 8012d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012d62:	2a0d      	cmp	r2, #13
 8012d64:	d8e6      	bhi.n	8012d34 <_scanf_float+0x60>
 8012d66:	a101      	add	r1, pc, #4	; (adr r1, 8012d6c <_scanf_float+0x98>)
 8012d68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012d6c:	08012eab 	.word	0x08012eab
 8012d70:	08012d35 	.word	0x08012d35
 8012d74:	08012d35 	.word	0x08012d35
 8012d78:	08012d35 	.word	0x08012d35
 8012d7c:	08012f0b 	.word	0x08012f0b
 8012d80:	08012ee3 	.word	0x08012ee3
 8012d84:	08012d35 	.word	0x08012d35
 8012d88:	08012d35 	.word	0x08012d35
 8012d8c:	08012eb9 	.word	0x08012eb9
 8012d90:	08012d35 	.word	0x08012d35
 8012d94:	08012d35 	.word	0x08012d35
 8012d98:	08012d35 	.word	0x08012d35
 8012d9c:	08012d35 	.word	0x08012d35
 8012da0:	08012e71 	.word	0x08012e71
 8012da4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012da8:	e7db      	b.n	8012d62 <_scanf_float+0x8e>
 8012daa:	290e      	cmp	r1, #14
 8012dac:	d8c2      	bhi.n	8012d34 <_scanf_float+0x60>
 8012dae:	a001      	add	r0, pc, #4	; (adr r0, 8012db4 <_scanf_float+0xe0>)
 8012db0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012db4:	08012e63 	.word	0x08012e63
 8012db8:	08012d35 	.word	0x08012d35
 8012dbc:	08012e63 	.word	0x08012e63
 8012dc0:	08012ef7 	.word	0x08012ef7
 8012dc4:	08012d35 	.word	0x08012d35
 8012dc8:	08012e11 	.word	0x08012e11
 8012dcc:	08012e4d 	.word	0x08012e4d
 8012dd0:	08012e4d 	.word	0x08012e4d
 8012dd4:	08012e4d 	.word	0x08012e4d
 8012dd8:	08012e4d 	.word	0x08012e4d
 8012ddc:	08012e4d 	.word	0x08012e4d
 8012de0:	08012e4d 	.word	0x08012e4d
 8012de4:	08012e4d 	.word	0x08012e4d
 8012de8:	08012e4d 	.word	0x08012e4d
 8012dec:	08012e4d 	.word	0x08012e4d
 8012df0:	2b6e      	cmp	r3, #110	; 0x6e
 8012df2:	d809      	bhi.n	8012e08 <_scanf_float+0x134>
 8012df4:	2b60      	cmp	r3, #96	; 0x60
 8012df6:	d8b2      	bhi.n	8012d5e <_scanf_float+0x8a>
 8012df8:	2b54      	cmp	r3, #84	; 0x54
 8012dfa:	d077      	beq.n	8012eec <_scanf_float+0x218>
 8012dfc:	2b59      	cmp	r3, #89	; 0x59
 8012dfe:	d199      	bne.n	8012d34 <_scanf_float+0x60>
 8012e00:	2d07      	cmp	r5, #7
 8012e02:	d197      	bne.n	8012d34 <_scanf_float+0x60>
 8012e04:	2508      	movs	r5, #8
 8012e06:	e029      	b.n	8012e5c <_scanf_float+0x188>
 8012e08:	2b74      	cmp	r3, #116	; 0x74
 8012e0a:	d06f      	beq.n	8012eec <_scanf_float+0x218>
 8012e0c:	2b79      	cmp	r3, #121	; 0x79
 8012e0e:	e7f6      	b.n	8012dfe <_scanf_float+0x12a>
 8012e10:	6821      	ldr	r1, [r4, #0]
 8012e12:	05c8      	lsls	r0, r1, #23
 8012e14:	d51a      	bpl.n	8012e4c <_scanf_float+0x178>
 8012e16:	9b02      	ldr	r3, [sp, #8]
 8012e18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012e1c:	6021      	str	r1, [r4, #0]
 8012e1e:	f109 0901 	add.w	r9, r9, #1
 8012e22:	b11b      	cbz	r3, 8012e2c <_scanf_float+0x158>
 8012e24:	3b01      	subs	r3, #1
 8012e26:	3201      	adds	r2, #1
 8012e28:	9302      	str	r3, [sp, #8]
 8012e2a:	60a2      	str	r2, [r4, #8]
 8012e2c:	68a3      	ldr	r3, [r4, #8]
 8012e2e:	3b01      	subs	r3, #1
 8012e30:	60a3      	str	r3, [r4, #8]
 8012e32:	6923      	ldr	r3, [r4, #16]
 8012e34:	3301      	adds	r3, #1
 8012e36:	6123      	str	r3, [r4, #16]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	3b01      	subs	r3, #1
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	607b      	str	r3, [r7, #4]
 8012e40:	f340 8084 	ble.w	8012f4c <_scanf_float+0x278>
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	3301      	adds	r3, #1
 8012e48:	603b      	str	r3, [r7, #0]
 8012e4a:	e766      	b.n	8012d1a <_scanf_float+0x46>
 8012e4c:	eb1a 0f05 	cmn.w	sl, r5
 8012e50:	f47f af70 	bne.w	8012d34 <_scanf_float+0x60>
 8012e54:	6822      	ldr	r2, [r4, #0]
 8012e56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012e5a:	6022      	str	r2, [r4, #0]
 8012e5c:	f806 3b01 	strb.w	r3, [r6], #1
 8012e60:	e7e4      	b.n	8012e2c <_scanf_float+0x158>
 8012e62:	6822      	ldr	r2, [r4, #0]
 8012e64:	0610      	lsls	r0, r2, #24
 8012e66:	f57f af65 	bpl.w	8012d34 <_scanf_float+0x60>
 8012e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012e6e:	e7f4      	b.n	8012e5a <_scanf_float+0x186>
 8012e70:	f1ba 0f00 	cmp.w	sl, #0
 8012e74:	d10e      	bne.n	8012e94 <_scanf_float+0x1c0>
 8012e76:	f1b9 0f00 	cmp.w	r9, #0
 8012e7a:	d10e      	bne.n	8012e9a <_scanf_float+0x1c6>
 8012e7c:	6822      	ldr	r2, [r4, #0]
 8012e7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012e82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012e86:	d108      	bne.n	8012e9a <_scanf_float+0x1c6>
 8012e88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012e8c:	6022      	str	r2, [r4, #0]
 8012e8e:	f04f 0a01 	mov.w	sl, #1
 8012e92:	e7e3      	b.n	8012e5c <_scanf_float+0x188>
 8012e94:	f1ba 0f02 	cmp.w	sl, #2
 8012e98:	d055      	beq.n	8012f46 <_scanf_float+0x272>
 8012e9a:	2d01      	cmp	r5, #1
 8012e9c:	d002      	beq.n	8012ea4 <_scanf_float+0x1d0>
 8012e9e:	2d04      	cmp	r5, #4
 8012ea0:	f47f af48 	bne.w	8012d34 <_scanf_float+0x60>
 8012ea4:	3501      	adds	r5, #1
 8012ea6:	b2ed      	uxtb	r5, r5
 8012ea8:	e7d8      	b.n	8012e5c <_scanf_float+0x188>
 8012eaa:	f1ba 0f01 	cmp.w	sl, #1
 8012eae:	f47f af41 	bne.w	8012d34 <_scanf_float+0x60>
 8012eb2:	f04f 0a02 	mov.w	sl, #2
 8012eb6:	e7d1      	b.n	8012e5c <_scanf_float+0x188>
 8012eb8:	b97d      	cbnz	r5, 8012eda <_scanf_float+0x206>
 8012eba:	f1b9 0f00 	cmp.w	r9, #0
 8012ebe:	f47f af3c 	bne.w	8012d3a <_scanf_float+0x66>
 8012ec2:	6822      	ldr	r2, [r4, #0]
 8012ec4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012ec8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012ecc:	f47f af39 	bne.w	8012d42 <_scanf_float+0x6e>
 8012ed0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012ed4:	6022      	str	r2, [r4, #0]
 8012ed6:	2501      	movs	r5, #1
 8012ed8:	e7c0      	b.n	8012e5c <_scanf_float+0x188>
 8012eda:	2d03      	cmp	r5, #3
 8012edc:	d0e2      	beq.n	8012ea4 <_scanf_float+0x1d0>
 8012ede:	2d05      	cmp	r5, #5
 8012ee0:	e7de      	b.n	8012ea0 <_scanf_float+0x1cc>
 8012ee2:	2d02      	cmp	r5, #2
 8012ee4:	f47f af26 	bne.w	8012d34 <_scanf_float+0x60>
 8012ee8:	2503      	movs	r5, #3
 8012eea:	e7b7      	b.n	8012e5c <_scanf_float+0x188>
 8012eec:	2d06      	cmp	r5, #6
 8012eee:	f47f af21 	bne.w	8012d34 <_scanf_float+0x60>
 8012ef2:	2507      	movs	r5, #7
 8012ef4:	e7b2      	b.n	8012e5c <_scanf_float+0x188>
 8012ef6:	6822      	ldr	r2, [r4, #0]
 8012ef8:	0591      	lsls	r1, r2, #22
 8012efa:	f57f af1b 	bpl.w	8012d34 <_scanf_float+0x60>
 8012efe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012f02:	6022      	str	r2, [r4, #0]
 8012f04:	f8cd 9004 	str.w	r9, [sp, #4]
 8012f08:	e7a8      	b.n	8012e5c <_scanf_float+0x188>
 8012f0a:	6822      	ldr	r2, [r4, #0]
 8012f0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012f10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012f14:	d006      	beq.n	8012f24 <_scanf_float+0x250>
 8012f16:	0550      	lsls	r0, r2, #21
 8012f18:	f57f af0c 	bpl.w	8012d34 <_scanf_float+0x60>
 8012f1c:	f1b9 0f00 	cmp.w	r9, #0
 8012f20:	f43f af0f 	beq.w	8012d42 <_scanf_float+0x6e>
 8012f24:	0591      	lsls	r1, r2, #22
 8012f26:	bf58      	it	pl
 8012f28:	9901      	ldrpl	r1, [sp, #4]
 8012f2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012f2e:	bf58      	it	pl
 8012f30:	eba9 0101 	subpl.w	r1, r9, r1
 8012f34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012f38:	bf58      	it	pl
 8012f3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012f3e:	6022      	str	r2, [r4, #0]
 8012f40:	f04f 0900 	mov.w	r9, #0
 8012f44:	e78a      	b.n	8012e5c <_scanf_float+0x188>
 8012f46:	f04f 0a03 	mov.w	sl, #3
 8012f4a:	e787      	b.n	8012e5c <_scanf_float+0x188>
 8012f4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012f50:	4639      	mov	r1, r7
 8012f52:	4640      	mov	r0, r8
 8012f54:	4798      	blx	r3
 8012f56:	2800      	cmp	r0, #0
 8012f58:	f43f aedf 	beq.w	8012d1a <_scanf_float+0x46>
 8012f5c:	e6ea      	b.n	8012d34 <_scanf_float+0x60>
 8012f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012f66:	463a      	mov	r2, r7
 8012f68:	4640      	mov	r0, r8
 8012f6a:	4798      	blx	r3
 8012f6c:	6923      	ldr	r3, [r4, #16]
 8012f6e:	3b01      	subs	r3, #1
 8012f70:	6123      	str	r3, [r4, #16]
 8012f72:	e6ec      	b.n	8012d4e <_scanf_float+0x7a>
 8012f74:	1e6b      	subs	r3, r5, #1
 8012f76:	2b06      	cmp	r3, #6
 8012f78:	d825      	bhi.n	8012fc6 <_scanf_float+0x2f2>
 8012f7a:	2d02      	cmp	r5, #2
 8012f7c:	d836      	bhi.n	8012fec <_scanf_float+0x318>
 8012f7e:	455e      	cmp	r6, fp
 8012f80:	f67f aee8 	bls.w	8012d54 <_scanf_float+0x80>
 8012f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012f8c:	463a      	mov	r2, r7
 8012f8e:	4640      	mov	r0, r8
 8012f90:	4798      	blx	r3
 8012f92:	6923      	ldr	r3, [r4, #16]
 8012f94:	3b01      	subs	r3, #1
 8012f96:	6123      	str	r3, [r4, #16]
 8012f98:	e7f1      	b.n	8012f7e <_scanf_float+0x2aa>
 8012f9a:	9802      	ldr	r0, [sp, #8]
 8012f9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012fa0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012fa4:	9002      	str	r0, [sp, #8]
 8012fa6:	463a      	mov	r2, r7
 8012fa8:	4640      	mov	r0, r8
 8012faa:	4798      	blx	r3
 8012fac:	6923      	ldr	r3, [r4, #16]
 8012fae:	3b01      	subs	r3, #1
 8012fb0:	6123      	str	r3, [r4, #16]
 8012fb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012fb6:	fa5f fa8a 	uxtb.w	sl, sl
 8012fba:	f1ba 0f02 	cmp.w	sl, #2
 8012fbe:	d1ec      	bne.n	8012f9a <_scanf_float+0x2c6>
 8012fc0:	3d03      	subs	r5, #3
 8012fc2:	b2ed      	uxtb	r5, r5
 8012fc4:	1b76      	subs	r6, r6, r5
 8012fc6:	6823      	ldr	r3, [r4, #0]
 8012fc8:	05da      	lsls	r2, r3, #23
 8012fca:	d52f      	bpl.n	801302c <_scanf_float+0x358>
 8012fcc:	055b      	lsls	r3, r3, #21
 8012fce:	d510      	bpl.n	8012ff2 <_scanf_float+0x31e>
 8012fd0:	455e      	cmp	r6, fp
 8012fd2:	f67f aebf 	bls.w	8012d54 <_scanf_float+0x80>
 8012fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012fda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012fde:	463a      	mov	r2, r7
 8012fe0:	4640      	mov	r0, r8
 8012fe2:	4798      	blx	r3
 8012fe4:	6923      	ldr	r3, [r4, #16]
 8012fe6:	3b01      	subs	r3, #1
 8012fe8:	6123      	str	r3, [r4, #16]
 8012fea:	e7f1      	b.n	8012fd0 <_scanf_float+0x2fc>
 8012fec:	46aa      	mov	sl, r5
 8012fee:	9602      	str	r6, [sp, #8]
 8012ff0:	e7df      	b.n	8012fb2 <_scanf_float+0x2de>
 8012ff2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012ff6:	6923      	ldr	r3, [r4, #16]
 8012ff8:	2965      	cmp	r1, #101	; 0x65
 8012ffa:	f103 33ff 	add.w	r3, r3, #4294967295
 8012ffe:	f106 35ff 	add.w	r5, r6, #4294967295
 8013002:	6123      	str	r3, [r4, #16]
 8013004:	d00c      	beq.n	8013020 <_scanf_float+0x34c>
 8013006:	2945      	cmp	r1, #69	; 0x45
 8013008:	d00a      	beq.n	8013020 <_scanf_float+0x34c>
 801300a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801300e:	463a      	mov	r2, r7
 8013010:	4640      	mov	r0, r8
 8013012:	4798      	blx	r3
 8013014:	6923      	ldr	r3, [r4, #16]
 8013016:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801301a:	3b01      	subs	r3, #1
 801301c:	1eb5      	subs	r5, r6, #2
 801301e:	6123      	str	r3, [r4, #16]
 8013020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013024:	463a      	mov	r2, r7
 8013026:	4640      	mov	r0, r8
 8013028:	4798      	blx	r3
 801302a:	462e      	mov	r6, r5
 801302c:	6825      	ldr	r5, [r4, #0]
 801302e:	f015 0510 	ands.w	r5, r5, #16
 8013032:	d158      	bne.n	80130e6 <_scanf_float+0x412>
 8013034:	7035      	strb	r5, [r6, #0]
 8013036:	6823      	ldr	r3, [r4, #0]
 8013038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801303c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013040:	d11c      	bne.n	801307c <_scanf_float+0x3a8>
 8013042:	9b01      	ldr	r3, [sp, #4]
 8013044:	454b      	cmp	r3, r9
 8013046:	eba3 0209 	sub.w	r2, r3, r9
 801304a:	d124      	bne.n	8013096 <_scanf_float+0x3c2>
 801304c:	2200      	movs	r2, #0
 801304e:	4659      	mov	r1, fp
 8013050:	4640      	mov	r0, r8
 8013052:	f000 fe9b 	bl	8013d8c <_strtod_r>
 8013056:	9b03      	ldr	r3, [sp, #12]
 8013058:	6821      	ldr	r1, [r4, #0]
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	f011 0f02 	tst.w	r1, #2
 8013060:	ec57 6b10 	vmov	r6, r7, d0
 8013064:	f103 0204 	add.w	r2, r3, #4
 8013068:	d020      	beq.n	80130ac <_scanf_float+0x3d8>
 801306a:	9903      	ldr	r1, [sp, #12]
 801306c:	600a      	str	r2, [r1, #0]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	e9c3 6700 	strd	r6, r7, [r3]
 8013074:	68e3      	ldr	r3, [r4, #12]
 8013076:	3301      	adds	r3, #1
 8013078:	60e3      	str	r3, [r4, #12]
 801307a:	e66c      	b.n	8012d56 <_scanf_float+0x82>
 801307c:	9b04      	ldr	r3, [sp, #16]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d0e4      	beq.n	801304c <_scanf_float+0x378>
 8013082:	9905      	ldr	r1, [sp, #20]
 8013084:	230a      	movs	r3, #10
 8013086:	462a      	mov	r2, r5
 8013088:	3101      	adds	r1, #1
 801308a:	4640      	mov	r0, r8
 801308c:	f000 ff70 	bl	8013f70 <_strtol_r>
 8013090:	9b04      	ldr	r3, [sp, #16]
 8013092:	9e05      	ldr	r6, [sp, #20]
 8013094:	1ac2      	subs	r2, r0, r3
 8013096:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801309a:	429e      	cmp	r6, r3
 801309c:	bf28      	it	cs
 801309e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80130a2:	4912      	ldr	r1, [pc, #72]	; (80130ec <_scanf_float+0x418>)
 80130a4:	4630      	mov	r0, r6
 80130a6:	f000 f82b 	bl	8013100 <siprintf>
 80130aa:	e7cf      	b.n	801304c <_scanf_float+0x378>
 80130ac:	f011 0f04 	tst.w	r1, #4
 80130b0:	9903      	ldr	r1, [sp, #12]
 80130b2:	600a      	str	r2, [r1, #0]
 80130b4:	d1db      	bne.n	801306e <_scanf_float+0x39a>
 80130b6:	f8d3 8000 	ldr.w	r8, [r3]
 80130ba:	ee10 2a10 	vmov	r2, s0
 80130be:	ee10 0a10 	vmov	r0, s0
 80130c2:	463b      	mov	r3, r7
 80130c4:	4639      	mov	r1, r7
 80130c6:	f7ed fd49 	bl	8000b5c <__aeabi_dcmpun>
 80130ca:	b128      	cbz	r0, 80130d8 <_scanf_float+0x404>
 80130cc:	4808      	ldr	r0, [pc, #32]	; (80130f0 <_scanf_float+0x41c>)
 80130ce:	f000 f811 	bl	80130f4 <nanf>
 80130d2:	ed88 0a00 	vstr	s0, [r8]
 80130d6:	e7cd      	b.n	8013074 <_scanf_float+0x3a0>
 80130d8:	4630      	mov	r0, r6
 80130da:	4639      	mov	r1, r7
 80130dc:	f7ed fd9c 	bl	8000c18 <__aeabi_d2f>
 80130e0:	f8c8 0000 	str.w	r0, [r8]
 80130e4:	e7c6      	b.n	8013074 <_scanf_float+0x3a0>
 80130e6:	2500      	movs	r5, #0
 80130e8:	e635      	b.n	8012d56 <_scanf_float+0x82>
 80130ea:	bf00      	nop
 80130ec:	0802a9b0 	.word	0x0802a9b0
 80130f0:	0802aabb 	.word	0x0802aabb

080130f4 <nanf>:
 80130f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80130fc <nanf+0x8>
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	7fc00000 	.word	0x7fc00000

08013100 <siprintf>:
 8013100:	b40e      	push	{r1, r2, r3}
 8013102:	b500      	push	{lr}
 8013104:	b09c      	sub	sp, #112	; 0x70
 8013106:	ab1d      	add	r3, sp, #116	; 0x74
 8013108:	9002      	str	r0, [sp, #8]
 801310a:	9006      	str	r0, [sp, #24]
 801310c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013110:	4809      	ldr	r0, [pc, #36]	; (8013138 <siprintf+0x38>)
 8013112:	9107      	str	r1, [sp, #28]
 8013114:	9104      	str	r1, [sp, #16]
 8013116:	4909      	ldr	r1, [pc, #36]	; (801313c <siprintf+0x3c>)
 8013118:	f853 2b04 	ldr.w	r2, [r3], #4
 801311c:	9105      	str	r1, [sp, #20]
 801311e:	6800      	ldr	r0, [r0, #0]
 8013120:	9301      	str	r3, [sp, #4]
 8013122:	a902      	add	r1, sp, #8
 8013124:	f002 ff46 	bl	8015fb4 <_svfiprintf_r>
 8013128:	9b02      	ldr	r3, [sp, #8]
 801312a:	2200      	movs	r2, #0
 801312c:	701a      	strb	r2, [r3, #0]
 801312e:	b01c      	add	sp, #112	; 0x70
 8013130:	f85d eb04 	ldr.w	lr, [sp], #4
 8013134:	b003      	add	sp, #12
 8013136:	4770      	bx	lr
 8013138:	20000044 	.word	0x20000044
 801313c:	ffff0208 	.word	0xffff0208

08013140 <sulp>:
 8013140:	b570      	push	{r4, r5, r6, lr}
 8013142:	4604      	mov	r4, r0
 8013144:	460d      	mov	r5, r1
 8013146:	ec45 4b10 	vmov	d0, r4, r5
 801314a:	4616      	mov	r6, r2
 801314c:	f002 fcce 	bl	8015aec <__ulp>
 8013150:	ec51 0b10 	vmov	r0, r1, d0
 8013154:	b17e      	cbz	r6, 8013176 <sulp+0x36>
 8013156:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801315a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801315e:	2b00      	cmp	r3, #0
 8013160:	dd09      	ble.n	8013176 <sulp+0x36>
 8013162:	051b      	lsls	r3, r3, #20
 8013164:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013168:	2400      	movs	r4, #0
 801316a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801316e:	4622      	mov	r2, r4
 8013170:	462b      	mov	r3, r5
 8013172:	f7ed fa59 	bl	8000628 <__aeabi_dmul>
 8013176:	bd70      	pop	{r4, r5, r6, pc}

08013178 <_strtod_l>:
 8013178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801317c:	b0a3      	sub	sp, #140	; 0x8c
 801317e:	461f      	mov	r7, r3
 8013180:	2300      	movs	r3, #0
 8013182:	931e      	str	r3, [sp, #120]	; 0x78
 8013184:	4ba4      	ldr	r3, [pc, #656]	; (8013418 <_strtod_l+0x2a0>)
 8013186:	9219      	str	r2, [sp, #100]	; 0x64
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	9307      	str	r3, [sp, #28]
 801318c:	4604      	mov	r4, r0
 801318e:	4618      	mov	r0, r3
 8013190:	4688      	mov	r8, r1
 8013192:	f7ed f82f 	bl	80001f4 <strlen>
 8013196:	f04f 0a00 	mov.w	sl, #0
 801319a:	4605      	mov	r5, r0
 801319c:	f04f 0b00 	mov.w	fp, #0
 80131a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80131a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80131a6:	781a      	ldrb	r2, [r3, #0]
 80131a8:	2a2b      	cmp	r2, #43	; 0x2b
 80131aa:	d04c      	beq.n	8013246 <_strtod_l+0xce>
 80131ac:	d839      	bhi.n	8013222 <_strtod_l+0xaa>
 80131ae:	2a0d      	cmp	r2, #13
 80131b0:	d832      	bhi.n	8013218 <_strtod_l+0xa0>
 80131b2:	2a08      	cmp	r2, #8
 80131b4:	d832      	bhi.n	801321c <_strtod_l+0xa4>
 80131b6:	2a00      	cmp	r2, #0
 80131b8:	d03c      	beq.n	8013234 <_strtod_l+0xbc>
 80131ba:	2300      	movs	r3, #0
 80131bc:	930e      	str	r3, [sp, #56]	; 0x38
 80131be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80131c0:	7833      	ldrb	r3, [r6, #0]
 80131c2:	2b30      	cmp	r3, #48	; 0x30
 80131c4:	f040 80b4 	bne.w	8013330 <_strtod_l+0x1b8>
 80131c8:	7873      	ldrb	r3, [r6, #1]
 80131ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80131ce:	2b58      	cmp	r3, #88	; 0x58
 80131d0:	d16c      	bne.n	80132ac <_strtod_l+0x134>
 80131d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131d4:	9301      	str	r3, [sp, #4]
 80131d6:	ab1e      	add	r3, sp, #120	; 0x78
 80131d8:	9702      	str	r7, [sp, #8]
 80131da:	9300      	str	r3, [sp, #0]
 80131dc:	4a8f      	ldr	r2, [pc, #572]	; (801341c <_strtod_l+0x2a4>)
 80131de:	ab1f      	add	r3, sp, #124	; 0x7c
 80131e0:	a91d      	add	r1, sp, #116	; 0x74
 80131e2:	4620      	mov	r0, r4
 80131e4:	f001 fde2 	bl	8014dac <__gethex>
 80131e8:	f010 0707 	ands.w	r7, r0, #7
 80131ec:	4605      	mov	r5, r0
 80131ee:	d005      	beq.n	80131fc <_strtod_l+0x84>
 80131f0:	2f06      	cmp	r7, #6
 80131f2:	d12a      	bne.n	801324a <_strtod_l+0xd2>
 80131f4:	3601      	adds	r6, #1
 80131f6:	2300      	movs	r3, #0
 80131f8:	961d      	str	r6, [sp, #116]	; 0x74
 80131fa:	930e      	str	r3, [sp, #56]	; 0x38
 80131fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80131fe:	2b00      	cmp	r3, #0
 8013200:	f040 8596 	bne.w	8013d30 <_strtod_l+0xbb8>
 8013204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013206:	b1db      	cbz	r3, 8013240 <_strtod_l+0xc8>
 8013208:	4652      	mov	r2, sl
 801320a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801320e:	ec43 2b10 	vmov	d0, r2, r3
 8013212:	b023      	add	sp, #140	; 0x8c
 8013214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013218:	2a20      	cmp	r2, #32
 801321a:	d1ce      	bne.n	80131ba <_strtod_l+0x42>
 801321c:	3301      	adds	r3, #1
 801321e:	931d      	str	r3, [sp, #116]	; 0x74
 8013220:	e7c0      	b.n	80131a4 <_strtod_l+0x2c>
 8013222:	2a2d      	cmp	r2, #45	; 0x2d
 8013224:	d1c9      	bne.n	80131ba <_strtod_l+0x42>
 8013226:	2201      	movs	r2, #1
 8013228:	920e      	str	r2, [sp, #56]	; 0x38
 801322a:	1c5a      	adds	r2, r3, #1
 801322c:	921d      	str	r2, [sp, #116]	; 0x74
 801322e:	785b      	ldrb	r3, [r3, #1]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d1c4      	bne.n	80131be <_strtod_l+0x46>
 8013234:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013236:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801323a:	2b00      	cmp	r3, #0
 801323c:	f040 8576 	bne.w	8013d2c <_strtod_l+0xbb4>
 8013240:	4652      	mov	r2, sl
 8013242:	465b      	mov	r3, fp
 8013244:	e7e3      	b.n	801320e <_strtod_l+0x96>
 8013246:	2200      	movs	r2, #0
 8013248:	e7ee      	b.n	8013228 <_strtod_l+0xb0>
 801324a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801324c:	b13a      	cbz	r2, 801325e <_strtod_l+0xe6>
 801324e:	2135      	movs	r1, #53	; 0x35
 8013250:	a820      	add	r0, sp, #128	; 0x80
 8013252:	f002 fd56 	bl	8015d02 <__copybits>
 8013256:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013258:	4620      	mov	r0, r4
 801325a:	f002 f91b 	bl	8015494 <_Bfree>
 801325e:	3f01      	subs	r7, #1
 8013260:	2f05      	cmp	r7, #5
 8013262:	d807      	bhi.n	8013274 <_strtod_l+0xfc>
 8013264:	e8df f007 	tbb	[pc, r7]
 8013268:	1d180b0e 	.word	0x1d180b0e
 801326c:	030e      	.short	0x030e
 801326e:	f04f 0b00 	mov.w	fp, #0
 8013272:	46da      	mov	sl, fp
 8013274:	0728      	lsls	r0, r5, #28
 8013276:	d5c1      	bpl.n	80131fc <_strtod_l+0x84>
 8013278:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801327c:	e7be      	b.n	80131fc <_strtod_l+0x84>
 801327e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8013282:	e7f7      	b.n	8013274 <_strtod_l+0xfc>
 8013284:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8013288:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801328a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801328e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013292:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013296:	e7ed      	b.n	8013274 <_strtod_l+0xfc>
 8013298:	f8df b184 	ldr.w	fp, [pc, #388]	; 8013420 <_strtod_l+0x2a8>
 801329c:	f04f 0a00 	mov.w	sl, #0
 80132a0:	e7e8      	b.n	8013274 <_strtod_l+0xfc>
 80132a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80132a6:	f04f 3aff 	mov.w	sl, #4294967295
 80132aa:	e7e3      	b.n	8013274 <_strtod_l+0xfc>
 80132ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80132ae:	1c5a      	adds	r2, r3, #1
 80132b0:	921d      	str	r2, [sp, #116]	; 0x74
 80132b2:	785b      	ldrb	r3, [r3, #1]
 80132b4:	2b30      	cmp	r3, #48	; 0x30
 80132b6:	d0f9      	beq.n	80132ac <_strtod_l+0x134>
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d09f      	beq.n	80131fc <_strtod_l+0x84>
 80132bc:	2301      	movs	r3, #1
 80132be:	f04f 0900 	mov.w	r9, #0
 80132c2:	9304      	str	r3, [sp, #16]
 80132c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80132c6:	930a      	str	r3, [sp, #40]	; 0x28
 80132c8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80132cc:	464f      	mov	r7, r9
 80132ce:	220a      	movs	r2, #10
 80132d0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80132d2:	7806      	ldrb	r6, [r0, #0]
 80132d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80132d8:	b2d9      	uxtb	r1, r3
 80132da:	2909      	cmp	r1, #9
 80132dc:	d92a      	bls.n	8013334 <_strtod_l+0x1bc>
 80132de:	9907      	ldr	r1, [sp, #28]
 80132e0:	462a      	mov	r2, r5
 80132e2:	f003 f8d9 	bl	8016498 <strncmp>
 80132e6:	b398      	cbz	r0, 8013350 <_strtod_l+0x1d8>
 80132e8:	2000      	movs	r0, #0
 80132ea:	4633      	mov	r3, r6
 80132ec:	463d      	mov	r5, r7
 80132ee:	9007      	str	r0, [sp, #28]
 80132f0:	4602      	mov	r2, r0
 80132f2:	2b65      	cmp	r3, #101	; 0x65
 80132f4:	d001      	beq.n	80132fa <_strtod_l+0x182>
 80132f6:	2b45      	cmp	r3, #69	; 0x45
 80132f8:	d118      	bne.n	801332c <_strtod_l+0x1b4>
 80132fa:	b91d      	cbnz	r5, 8013304 <_strtod_l+0x18c>
 80132fc:	9b04      	ldr	r3, [sp, #16]
 80132fe:	4303      	orrs	r3, r0
 8013300:	d098      	beq.n	8013234 <_strtod_l+0xbc>
 8013302:	2500      	movs	r5, #0
 8013304:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8013308:	f108 0301 	add.w	r3, r8, #1
 801330c:	931d      	str	r3, [sp, #116]	; 0x74
 801330e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013312:	2b2b      	cmp	r3, #43	; 0x2b
 8013314:	d075      	beq.n	8013402 <_strtod_l+0x28a>
 8013316:	2b2d      	cmp	r3, #45	; 0x2d
 8013318:	d07b      	beq.n	8013412 <_strtod_l+0x29a>
 801331a:	f04f 0c00 	mov.w	ip, #0
 801331e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013322:	2909      	cmp	r1, #9
 8013324:	f240 8082 	bls.w	801342c <_strtod_l+0x2b4>
 8013328:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801332c:	2600      	movs	r6, #0
 801332e:	e09d      	b.n	801346c <_strtod_l+0x2f4>
 8013330:	2300      	movs	r3, #0
 8013332:	e7c4      	b.n	80132be <_strtod_l+0x146>
 8013334:	2f08      	cmp	r7, #8
 8013336:	bfd8      	it	le
 8013338:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801333a:	f100 0001 	add.w	r0, r0, #1
 801333e:	bfda      	itte	le
 8013340:	fb02 3301 	mlale	r3, r2, r1, r3
 8013344:	9309      	strle	r3, [sp, #36]	; 0x24
 8013346:	fb02 3909 	mlagt	r9, r2, r9, r3
 801334a:	3701      	adds	r7, #1
 801334c:	901d      	str	r0, [sp, #116]	; 0x74
 801334e:	e7bf      	b.n	80132d0 <_strtod_l+0x158>
 8013350:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013352:	195a      	adds	r2, r3, r5
 8013354:	921d      	str	r2, [sp, #116]	; 0x74
 8013356:	5d5b      	ldrb	r3, [r3, r5]
 8013358:	2f00      	cmp	r7, #0
 801335a:	d037      	beq.n	80133cc <_strtod_l+0x254>
 801335c:	9007      	str	r0, [sp, #28]
 801335e:	463d      	mov	r5, r7
 8013360:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013364:	2a09      	cmp	r2, #9
 8013366:	d912      	bls.n	801338e <_strtod_l+0x216>
 8013368:	2201      	movs	r2, #1
 801336a:	e7c2      	b.n	80132f2 <_strtod_l+0x17a>
 801336c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801336e:	1c5a      	adds	r2, r3, #1
 8013370:	921d      	str	r2, [sp, #116]	; 0x74
 8013372:	785b      	ldrb	r3, [r3, #1]
 8013374:	3001      	adds	r0, #1
 8013376:	2b30      	cmp	r3, #48	; 0x30
 8013378:	d0f8      	beq.n	801336c <_strtod_l+0x1f4>
 801337a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801337e:	2a08      	cmp	r2, #8
 8013380:	f200 84db 	bhi.w	8013d3a <_strtod_l+0xbc2>
 8013384:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013386:	9007      	str	r0, [sp, #28]
 8013388:	2000      	movs	r0, #0
 801338a:	920a      	str	r2, [sp, #40]	; 0x28
 801338c:	4605      	mov	r5, r0
 801338e:	3b30      	subs	r3, #48	; 0x30
 8013390:	f100 0201 	add.w	r2, r0, #1
 8013394:	d014      	beq.n	80133c0 <_strtod_l+0x248>
 8013396:	9907      	ldr	r1, [sp, #28]
 8013398:	4411      	add	r1, r2
 801339a:	9107      	str	r1, [sp, #28]
 801339c:	462a      	mov	r2, r5
 801339e:	eb00 0e05 	add.w	lr, r0, r5
 80133a2:	210a      	movs	r1, #10
 80133a4:	4572      	cmp	r2, lr
 80133a6:	d113      	bne.n	80133d0 <_strtod_l+0x258>
 80133a8:	182a      	adds	r2, r5, r0
 80133aa:	2a08      	cmp	r2, #8
 80133ac:	f105 0501 	add.w	r5, r5, #1
 80133b0:	4405      	add	r5, r0
 80133b2:	dc1c      	bgt.n	80133ee <_strtod_l+0x276>
 80133b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133b6:	220a      	movs	r2, #10
 80133b8:	fb02 3301 	mla	r3, r2, r1, r3
 80133bc:	9309      	str	r3, [sp, #36]	; 0x24
 80133be:	2200      	movs	r2, #0
 80133c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133c2:	1c59      	adds	r1, r3, #1
 80133c4:	911d      	str	r1, [sp, #116]	; 0x74
 80133c6:	785b      	ldrb	r3, [r3, #1]
 80133c8:	4610      	mov	r0, r2
 80133ca:	e7c9      	b.n	8013360 <_strtod_l+0x1e8>
 80133cc:	4638      	mov	r0, r7
 80133ce:	e7d2      	b.n	8013376 <_strtod_l+0x1fe>
 80133d0:	2a08      	cmp	r2, #8
 80133d2:	dc04      	bgt.n	80133de <_strtod_l+0x266>
 80133d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80133d6:	434e      	muls	r6, r1
 80133d8:	9609      	str	r6, [sp, #36]	; 0x24
 80133da:	3201      	adds	r2, #1
 80133dc:	e7e2      	b.n	80133a4 <_strtod_l+0x22c>
 80133de:	f102 0c01 	add.w	ip, r2, #1
 80133e2:	f1bc 0f10 	cmp.w	ip, #16
 80133e6:	bfd8      	it	le
 80133e8:	fb01 f909 	mulle.w	r9, r1, r9
 80133ec:	e7f5      	b.n	80133da <_strtod_l+0x262>
 80133ee:	2d10      	cmp	r5, #16
 80133f0:	bfdc      	itt	le
 80133f2:	220a      	movle	r2, #10
 80133f4:	fb02 3909 	mlale	r9, r2, r9, r3
 80133f8:	e7e1      	b.n	80133be <_strtod_l+0x246>
 80133fa:	2300      	movs	r3, #0
 80133fc:	9307      	str	r3, [sp, #28]
 80133fe:	2201      	movs	r2, #1
 8013400:	e77c      	b.n	80132fc <_strtod_l+0x184>
 8013402:	f04f 0c00 	mov.w	ip, #0
 8013406:	f108 0302 	add.w	r3, r8, #2
 801340a:	931d      	str	r3, [sp, #116]	; 0x74
 801340c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013410:	e785      	b.n	801331e <_strtod_l+0x1a6>
 8013412:	f04f 0c01 	mov.w	ip, #1
 8013416:	e7f6      	b.n	8013406 <_strtod_l+0x28e>
 8013418:	0802aca4 	.word	0x0802aca4
 801341c:	0802a9b8 	.word	0x0802a9b8
 8013420:	7ff00000 	.word	0x7ff00000
 8013424:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013426:	1c59      	adds	r1, r3, #1
 8013428:	911d      	str	r1, [sp, #116]	; 0x74
 801342a:	785b      	ldrb	r3, [r3, #1]
 801342c:	2b30      	cmp	r3, #48	; 0x30
 801342e:	d0f9      	beq.n	8013424 <_strtod_l+0x2ac>
 8013430:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8013434:	2908      	cmp	r1, #8
 8013436:	f63f af79 	bhi.w	801332c <_strtod_l+0x1b4>
 801343a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801343e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013440:	9308      	str	r3, [sp, #32]
 8013442:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013444:	1c59      	adds	r1, r3, #1
 8013446:	911d      	str	r1, [sp, #116]	; 0x74
 8013448:	785b      	ldrb	r3, [r3, #1]
 801344a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801344e:	2e09      	cmp	r6, #9
 8013450:	d937      	bls.n	80134c2 <_strtod_l+0x34a>
 8013452:	9e08      	ldr	r6, [sp, #32]
 8013454:	1b89      	subs	r1, r1, r6
 8013456:	2908      	cmp	r1, #8
 8013458:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801345c:	dc02      	bgt.n	8013464 <_strtod_l+0x2ec>
 801345e:	4576      	cmp	r6, lr
 8013460:	bfa8      	it	ge
 8013462:	4676      	movge	r6, lr
 8013464:	f1bc 0f00 	cmp.w	ip, #0
 8013468:	d000      	beq.n	801346c <_strtod_l+0x2f4>
 801346a:	4276      	negs	r6, r6
 801346c:	2d00      	cmp	r5, #0
 801346e:	d14f      	bne.n	8013510 <_strtod_l+0x398>
 8013470:	9904      	ldr	r1, [sp, #16]
 8013472:	4301      	orrs	r1, r0
 8013474:	f47f aec2 	bne.w	80131fc <_strtod_l+0x84>
 8013478:	2a00      	cmp	r2, #0
 801347a:	f47f aedb 	bne.w	8013234 <_strtod_l+0xbc>
 801347e:	2b69      	cmp	r3, #105	; 0x69
 8013480:	d027      	beq.n	80134d2 <_strtod_l+0x35a>
 8013482:	dc24      	bgt.n	80134ce <_strtod_l+0x356>
 8013484:	2b49      	cmp	r3, #73	; 0x49
 8013486:	d024      	beq.n	80134d2 <_strtod_l+0x35a>
 8013488:	2b4e      	cmp	r3, #78	; 0x4e
 801348a:	f47f aed3 	bne.w	8013234 <_strtod_l+0xbc>
 801348e:	499e      	ldr	r1, [pc, #632]	; (8013708 <_strtod_l+0x590>)
 8013490:	a81d      	add	r0, sp, #116	; 0x74
 8013492:	f001 fee3 	bl	801525c <__match>
 8013496:	2800      	cmp	r0, #0
 8013498:	f43f aecc 	beq.w	8013234 <_strtod_l+0xbc>
 801349c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801349e:	781b      	ldrb	r3, [r3, #0]
 80134a0:	2b28      	cmp	r3, #40	; 0x28
 80134a2:	d12d      	bne.n	8013500 <_strtod_l+0x388>
 80134a4:	4999      	ldr	r1, [pc, #612]	; (801370c <_strtod_l+0x594>)
 80134a6:	aa20      	add	r2, sp, #128	; 0x80
 80134a8:	a81d      	add	r0, sp, #116	; 0x74
 80134aa:	f001 feeb 	bl	8015284 <__hexnan>
 80134ae:	2805      	cmp	r0, #5
 80134b0:	d126      	bne.n	8013500 <_strtod_l+0x388>
 80134b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80134b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80134bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80134c0:	e69c      	b.n	80131fc <_strtod_l+0x84>
 80134c2:	210a      	movs	r1, #10
 80134c4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80134c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80134cc:	e7b9      	b.n	8013442 <_strtod_l+0x2ca>
 80134ce:	2b6e      	cmp	r3, #110	; 0x6e
 80134d0:	e7db      	b.n	801348a <_strtod_l+0x312>
 80134d2:	498f      	ldr	r1, [pc, #572]	; (8013710 <_strtod_l+0x598>)
 80134d4:	a81d      	add	r0, sp, #116	; 0x74
 80134d6:	f001 fec1 	bl	801525c <__match>
 80134da:	2800      	cmp	r0, #0
 80134dc:	f43f aeaa 	beq.w	8013234 <_strtod_l+0xbc>
 80134e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134e2:	498c      	ldr	r1, [pc, #560]	; (8013714 <_strtod_l+0x59c>)
 80134e4:	3b01      	subs	r3, #1
 80134e6:	a81d      	add	r0, sp, #116	; 0x74
 80134e8:	931d      	str	r3, [sp, #116]	; 0x74
 80134ea:	f001 feb7 	bl	801525c <__match>
 80134ee:	b910      	cbnz	r0, 80134f6 <_strtod_l+0x37e>
 80134f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134f2:	3301      	adds	r3, #1
 80134f4:	931d      	str	r3, [sp, #116]	; 0x74
 80134f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8013724 <_strtod_l+0x5ac>
 80134fa:	f04f 0a00 	mov.w	sl, #0
 80134fe:	e67d      	b.n	80131fc <_strtod_l+0x84>
 8013500:	4885      	ldr	r0, [pc, #532]	; (8013718 <_strtod_l+0x5a0>)
 8013502:	f002 ffb1 	bl	8016468 <nan>
 8013506:	ed8d 0b04 	vstr	d0, [sp, #16]
 801350a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801350e:	e675      	b.n	80131fc <_strtod_l+0x84>
 8013510:	9b07      	ldr	r3, [sp, #28]
 8013512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013514:	1af3      	subs	r3, r6, r3
 8013516:	2f00      	cmp	r7, #0
 8013518:	bf08      	it	eq
 801351a:	462f      	moveq	r7, r5
 801351c:	2d10      	cmp	r5, #16
 801351e:	9308      	str	r3, [sp, #32]
 8013520:	46a8      	mov	r8, r5
 8013522:	bfa8      	it	ge
 8013524:	f04f 0810 	movge.w	r8, #16
 8013528:	f7ed f804 	bl	8000534 <__aeabi_ui2d>
 801352c:	2d09      	cmp	r5, #9
 801352e:	4682      	mov	sl, r0
 8013530:	468b      	mov	fp, r1
 8013532:	dd13      	ble.n	801355c <_strtod_l+0x3e4>
 8013534:	4b79      	ldr	r3, [pc, #484]	; (801371c <_strtod_l+0x5a4>)
 8013536:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801353a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801353e:	f7ed f873 	bl	8000628 <__aeabi_dmul>
 8013542:	4682      	mov	sl, r0
 8013544:	4648      	mov	r0, r9
 8013546:	468b      	mov	fp, r1
 8013548:	f7ec fff4 	bl	8000534 <__aeabi_ui2d>
 801354c:	4602      	mov	r2, r0
 801354e:	460b      	mov	r3, r1
 8013550:	4650      	mov	r0, sl
 8013552:	4659      	mov	r1, fp
 8013554:	f7ec feb2 	bl	80002bc <__adddf3>
 8013558:	4682      	mov	sl, r0
 801355a:	468b      	mov	fp, r1
 801355c:	2d0f      	cmp	r5, #15
 801355e:	dc38      	bgt.n	80135d2 <_strtod_l+0x45a>
 8013560:	9b08      	ldr	r3, [sp, #32]
 8013562:	2b00      	cmp	r3, #0
 8013564:	f43f ae4a 	beq.w	80131fc <_strtod_l+0x84>
 8013568:	dd24      	ble.n	80135b4 <_strtod_l+0x43c>
 801356a:	2b16      	cmp	r3, #22
 801356c:	dc0b      	bgt.n	8013586 <_strtod_l+0x40e>
 801356e:	4d6b      	ldr	r5, [pc, #428]	; (801371c <_strtod_l+0x5a4>)
 8013570:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8013574:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013578:	4652      	mov	r2, sl
 801357a:	465b      	mov	r3, fp
 801357c:	f7ed f854 	bl	8000628 <__aeabi_dmul>
 8013580:	4682      	mov	sl, r0
 8013582:	468b      	mov	fp, r1
 8013584:	e63a      	b.n	80131fc <_strtod_l+0x84>
 8013586:	9a08      	ldr	r2, [sp, #32]
 8013588:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801358c:	4293      	cmp	r3, r2
 801358e:	db20      	blt.n	80135d2 <_strtod_l+0x45a>
 8013590:	4c62      	ldr	r4, [pc, #392]	; (801371c <_strtod_l+0x5a4>)
 8013592:	f1c5 050f 	rsb	r5, r5, #15
 8013596:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801359a:	4652      	mov	r2, sl
 801359c:	465b      	mov	r3, fp
 801359e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135a2:	f7ed f841 	bl	8000628 <__aeabi_dmul>
 80135a6:	9b08      	ldr	r3, [sp, #32]
 80135a8:	1b5d      	subs	r5, r3, r5
 80135aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80135ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80135b2:	e7e3      	b.n	801357c <_strtod_l+0x404>
 80135b4:	9b08      	ldr	r3, [sp, #32]
 80135b6:	3316      	adds	r3, #22
 80135b8:	db0b      	blt.n	80135d2 <_strtod_l+0x45a>
 80135ba:	9b07      	ldr	r3, [sp, #28]
 80135bc:	4a57      	ldr	r2, [pc, #348]	; (801371c <_strtod_l+0x5a4>)
 80135be:	1b9e      	subs	r6, r3, r6
 80135c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80135c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80135c8:	4650      	mov	r0, sl
 80135ca:	4659      	mov	r1, fp
 80135cc:	f7ed f956 	bl	800087c <__aeabi_ddiv>
 80135d0:	e7d6      	b.n	8013580 <_strtod_l+0x408>
 80135d2:	9b08      	ldr	r3, [sp, #32]
 80135d4:	eba5 0808 	sub.w	r8, r5, r8
 80135d8:	4498      	add	r8, r3
 80135da:	f1b8 0f00 	cmp.w	r8, #0
 80135de:	dd71      	ble.n	80136c4 <_strtod_l+0x54c>
 80135e0:	f018 030f 	ands.w	r3, r8, #15
 80135e4:	d00a      	beq.n	80135fc <_strtod_l+0x484>
 80135e6:	494d      	ldr	r1, [pc, #308]	; (801371c <_strtod_l+0x5a4>)
 80135e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80135ec:	4652      	mov	r2, sl
 80135ee:	465b      	mov	r3, fp
 80135f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135f4:	f7ed f818 	bl	8000628 <__aeabi_dmul>
 80135f8:	4682      	mov	sl, r0
 80135fa:	468b      	mov	fp, r1
 80135fc:	f038 080f 	bics.w	r8, r8, #15
 8013600:	d04d      	beq.n	801369e <_strtod_l+0x526>
 8013602:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013606:	dd22      	ble.n	801364e <_strtod_l+0x4d6>
 8013608:	2500      	movs	r5, #0
 801360a:	462e      	mov	r6, r5
 801360c:	9509      	str	r5, [sp, #36]	; 0x24
 801360e:	9507      	str	r5, [sp, #28]
 8013610:	2322      	movs	r3, #34	; 0x22
 8013612:	f8df b110 	ldr.w	fp, [pc, #272]	; 8013724 <_strtod_l+0x5ac>
 8013616:	6023      	str	r3, [r4, #0]
 8013618:	f04f 0a00 	mov.w	sl, #0
 801361c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801361e:	2b00      	cmp	r3, #0
 8013620:	f43f adec 	beq.w	80131fc <_strtod_l+0x84>
 8013624:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013626:	4620      	mov	r0, r4
 8013628:	f001 ff34 	bl	8015494 <_Bfree>
 801362c:	9907      	ldr	r1, [sp, #28]
 801362e:	4620      	mov	r0, r4
 8013630:	f001 ff30 	bl	8015494 <_Bfree>
 8013634:	4631      	mov	r1, r6
 8013636:	4620      	mov	r0, r4
 8013638:	f001 ff2c 	bl	8015494 <_Bfree>
 801363c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801363e:	4620      	mov	r0, r4
 8013640:	f001 ff28 	bl	8015494 <_Bfree>
 8013644:	4629      	mov	r1, r5
 8013646:	4620      	mov	r0, r4
 8013648:	f001 ff24 	bl	8015494 <_Bfree>
 801364c:	e5d6      	b.n	80131fc <_strtod_l+0x84>
 801364e:	2300      	movs	r3, #0
 8013650:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013654:	4650      	mov	r0, sl
 8013656:	4659      	mov	r1, fp
 8013658:	4699      	mov	r9, r3
 801365a:	f1b8 0f01 	cmp.w	r8, #1
 801365e:	dc21      	bgt.n	80136a4 <_strtod_l+0x52c>
 8013660:	b10b      	cbz	r3, 8013666 <_strtod_l+0x4ee>
 8013662:	4682      	mov	sl, r0
 8013664:	468b      	mov	fp, r1
 8013666:	4b2e      	ldr	r3, [pc, #184]	; (8013720 <_strtod_l+0x5a8>)
 8013668:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801366c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013670:	4652      	mov	r2, sl
 8013672:	465b      	mov	r3, fp
 8013674:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013678:	f7ec ffd6 	bl	8000628 <__aeabi_dmul>
 801367c:	4b29      	ldr	r3, [pc, #164]	; (8013724 <_strtod_l+0x5ac>)
 801367e:	460a      	mov	r2, r1
 8013680:	400b      	ands	r3, r1
 8013682:	4929      	ldr	r1, [pc, #164]	; (8013728 <_strtod_l+0x5b0>)
 8013684:	428b      	cmp	r3, r1
 8013686:	4682      	mov	sl, r0
 8013688:	d8be      	bhi.n	8013608 <_strtod_l+0x490>
 801368a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801368e:	428b      	cmp	r3, r1
 8013690:	bf86      	itte	hi
 8013692:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801372c <_strtod_l+0x5b4>
 8013696:	f04f 3aff 	movhi.w	sl, #4294967295
 801369a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801369e:	2300      	movs	r3, #0
 80136a0:	9304      	str	r3, [sp, #16]
 80136a2:	e081      	b.n	80137a8 <_strtod_l+0x630>
 80136a4:	f018 0f01 	tst.w	r8, #1
 80136a8:	d007      	beq.n	80136ba <_strtod_l+0x542>
 80136aa:	4b1d      	ldr	r3, [pc, #116]	; (8013720 <_strtod_l+0x5a8>)
 80136ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80136b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b4:	f7ec ffb8 	bl	8000628 <__aeabi_dmul>
 80136b8:	2301      	movs	r3, #1
 80136ba:	f109 0901 	add.w	r9, r9, #1
 80136be:	ea4f 0868 	mov.w	r8, r8, asr #1
 80136c2:	e7ca      	b.n	801365a <_strtod_l+0x4e2>
 80136c4:	d0eb      	beq.n	801369e <_strtod_l+0x526>
 80136c6:	f1c8 0800 	rsb	r8, r8, #0
 80136ca:	f018 020f 	ands.w	r2, r8, #15
 80136ce:	d00a      	beq.n	80136e6 <_strtod_l+0x56e>
 80136d0:	4b12      	ldr	r3, [pc, #72]	; (801371c <_strtod_l+0x5a4>)
 80136d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80136d6:	4650      	mov	r0, sl
 80136d8:	4659      	mov	r1, fp
 80136da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136de:	f7ed f8cd 	bl	800087c <__aeabi_ddiv>
 80136e2:	4682      	mov	sl, r0
 80136e4:	468b      	mov	fp, r1
 80136e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80136ea:	d0d8      	beq.n	801369e <_strtod_l+0x526>
 80136ec:	f1b8 0f1f 	cmp.w	r8, #31
 80136f0:	dd1e      	ble.n	8013730 <_strtod_l+0x5b8>
 80136f2:	2500      	movs	r5, #0
 80136f4:	462e      	mov	r6, r5
 80136f6:	9509      	str	r5, [sp, #36]	; 0x24
 80136f8:	9507      	str	r5, [sp, #28]
 80136fa:	2322      	movs	r3, #34	; 0x22
 80136fc:	f04f 0a00 	mov.w	sl, #0
 8013700:	f04f 0b00 	mov.w	fp, #0
 8013704:	6023      	str	r3, [r4, #0]
 8013706:	e789      	b.n	801361c <_strtod_l+0x4a4>
 8013708:	0802a989 	.word	0x0802a989
 801370c:	0802a9cc 	.word	0x0802a9cc
 8013710:	0802a981 	.word	0x0802a981
 8013714:	0802abc0 	.word	0x0802abc0
 8013718:	0802aabb 	.word	0x0802aabb
 801371c:	0802ad40 	.word	0x0802ad40
 8013720:	0802ad18 	.word	0x0802ad18
 8013724:	7ff00000 	.word	0x7ff00000
 8013728:	7ca00000 	.word	0x7ca00000
 801372c:	7fefffff 	.word	0x7fefffff
 8013730:	f018 0310 	ands.w	r3, r8, #16
 8013734:	bf18      	it	ne
 8013736:	236a      	movne	r3, #106	; 0x6a
 8013738:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8013af0 <_strtod_l+0x978>
 801373c:	9304      	str	r3, [sp, #16]
 801373e:	4650      	mov	r0, sl
 8013740:	4659      	mov	r1, fp
 8013742:	2300      	movs	r3, #0
 8013744:	f018 0f01 	tst.w	r8, #1
 8013748:	d004      	beq.n	8013754 <_strtod_l+0x5dc>
 801374a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801374e:	f7ec ff6b 	bl	8000628 <__aeabi_dmul>
 8013752:	2301      	movs	r3, #1
 8013754:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013758:	f109 0908 	add.w	r9, r9, #8
 801375c:	d1f2      	bne.n	8013744 <_strtod_l+0x5cc>
 801375e:	b10b      	cbz	r3, 8013764 <_strtod_l+0x5ec>
 8013760:	4682      	mov	sl, r0
 8013762:	468b      	mov	fp, r1
 8013764:	9b04      	ldr	r3, [sp, #16]
 8013766:	b1bb      	cbz	r3, 8013798 <_strtod_l+0x620>
 8013768:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801376c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013770:	2b00      	cmp	r3, #0
 8013772:	4659      	mov	r1, fp
 8013774:	dd10      	ble.n	8013798 <_strtod_l+0x620>
 8013776:	2b1f      	cmp	r3, #31
 8013778:	f340 8128 	ble.w	80139cc <_strtod_l+0x854>
 801377c:	2b34      	cmp	r3, #52	; 0x34
 801377e:	bfde      	ittt	le
 8013780:	3b20      	suble	r3, #32
 8013782:	f04f 32ff 	movle.w	r2, #4294967295
 8013786:	fa02 f303 	lslle.w	r3, r2, r3
 801378a:	f04f 0a00 	mov.w	sl, #0
 801378e:	bfcc      	ite	gt
 8013790:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013794:	ea03 0b01 	andle.w	fp, r3, r1
 8013798:	2200      	movs	r2, #0
 801379a:	2300      	movs	r3, #0
 801379c:	4650      	mov	r0, sl
 801379e:	4659      	mov	r1, fp
 80137a0:	f7ed f9aa 	bl	8000af8 <__aeabi_dcmpeq>
 80137a4:	2800      	cmp	r0, #0
 80137a6:	d1a4      	bne.n	80136f2 <_strtod_l+0x57a>
 80137a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137aa:	9300      	str	r3, [sp, #0]
 80137ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80137ae:	462b      	mov	r3, r5
 80137b0:	463a      	mov	r2, r7
 80137b2:	4620      	mov	r0, r4
 80137b4:	f001 feda 	bl	801556c <__s2b>
 80137b8:	9009      	str	r0, [sp, #36]	; 0x24
 80137ba:	2800      	cmp	r0, #0
 80137bc:	f43f af24 	beq.w	8013608 <_strtod_l+0x490>
 80137c0:	9b07      	ldr	r3, [sp, #28]
 80137c2:	1b9e      	subs	r6, r3, r6
 80137c4:	9b08      	ldr	r3, [sp, #32]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	bfb4      	ite	lt
 80137ca:	4633      	movlt	r3, r6
 80137cc:	2300      	movge	r3, #0
 80137ce:	9310      	str	r3, [sp, #64]	; 0x40
 80137d0:	9b08      	ldr	r3, [sp, #32]
 80137d2:	2500      	movs	r5, #0
 80137d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80137d8:	9318      	str	r3, [sp, #96]	; 0x60
 80137da:	462e      	mov	r6, r5
 80137dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137de:	4620      	mov	r0, r4
 80137e0:	6859      	ldr	r1, [r3, #4]
 80137e2:	f001 fe17 	bl	8015414 <_Balloc>
 80137e6:	9007      	str	r0, [sp, #28]
 80137e8:	2800      	cmp	r0, #0
 80137ea:	f43f af11 	beq.w	8013610 <_strtod_l+0x498>
 80137ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137f0:	691a      	ldr	r2, [r3, #16]
 80137f2:	3202      	adds	r2, #2
 80137f4:	f103 010c 	add.w	r1, r3, #12
 80137f8:	0092      	lsls	r2, r2, #2
 80137fa:	300c      	adds	r0, #12
 80137fc:	f001 fdfc 	bl	80153f8 <memcpy>
 8013800:	ec4b ab10 	vmov	d0, sl, fp
 8013804:	aa20      	add	r2, sp, #128	; 0x80
 8013806:	a91f      	add	r1, sp, #124	; 0x7c
 8013808:	4620      	mov	r0, r4
 801380a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801380e:	f002 f9e9 	bl	8015be4 <__d2b>
 8013812:	901e      	str	r0, [sp, #120]	; 0x78
 8013814:	2800      	cmp	r0, #0
 8013816:	f43f aefb 	beq.w	8013610 <_strtod_l+0x498>
 801381a:	2101      	movs	r1, #1
 801381c:	4620      	mov	r0, r4
 801381e:	f001 ff3f 	bl	80156a0 <__i2b>
 8013822:	4606      	mov	r6, r0
 8013824:	2800      	cmp	r0, #0
 8013826:	f43f aef3 	beq.w	8013610 <_strtod_l+0x498>
 801382a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801382c:	9904      	ldr	r1, [sp, #16]
 801382e:	2b00      	cmp	r3, #0
 8013830:	bfab      	itete	ge
 8013832:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8013834:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8013836:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8013838:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801383c:	bfac      	ite	ge
 801383e:	eb03 0902 	addge.w	r9, r3, r2
 8013842:	1ad7      	sublt	r7, r2, r3
 8013844:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013846:	eba3 0801 	sub.w	r8, r3, r1
 801384a:	4490      	add	r8, r2
 801384c:	4ba3      	ldr	r3, [pc, #652]	; (8013adc <_strtod_l+0x964>)
 801384e:	f108 38ff 	add.w	r8, r8, #4294967295
 8013852:	4598      	cmp	r8, r3
 8013854:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013858:	f280 80cc 	bge.w	80139f4 <_strtod_l+0x87c>
 801385c:	eba3 0308 	sub.w	r3, r3, r8
 8013860:	2b1f      	cmp	r3, #31
 8013862:	eba2 0203 	sub.w	r2, r2, r3
 8013866:	f04f 0101 	mov.w	r1, #1
 801386a:	f300 80b6 	bgt.w	80139da <_strtod_l+0x862>
 801386e:	fa01 f303 	lsl.w	r3, r1, r3
 8013872:	9311      	str	r3, [sp, #68]	; 0x44
 8013874:	2300      	movs	r3, #0
 8013876:	930c      	str	r3, [sp, #48]	; 0x30
 8013878:	eb09 0802 	add.w	r8, r9, r2
 801387c:	9b04      	ldr	r3, [sp, #16]
 801387e:	45c1      	cmp	r9, r8
 8013880:	4417      	add	r7, r2
 8013882:	441f      	add	r7, r3
 8013884:	464b      	mov	r3, r9
 8013886:	bfa8      	it	ge
 8013888:	4643      	movge	r3, r8
 801388a:	42bb      	cmp	r3, r7
 801388c:	bfa8      	it	ge
 801388e:	463b      	movge	r3, r7
 8013890:	2b00      	cmp	r3, #0
 8013892:	bfc2      	ittt	gt
 8013894:	eba8 0803 	subgt.w	r8, r8, r3
 8013898:	1aff      	subgt	r7, r7, r3
 801389a:	eba9 0903 	subgt.w	r9, r9, r3
 801389e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	dd17      	ble.n	80138d4 <_strtod_l+0x75c>
 80138a4:	4631      	mov	r1, r6
 80138a6:	461a      	mov	r2, r3
 80138a8:	4620      	mov	r0, r4
 80138aa:	f001 ffb5 	bl	8015818 <__pow5mult>
 80138ae:	4606      	mov	r6, r0
 80138b0:	2800      	cmp	r0, #0
 80138b2:	f43f aead 	beq.w	8013610 <_strtod_l+0x498>
 80138b6:	4601      	mov	r1, r0
 80138b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80138ba:	4620      	mov	r0, r4
 80138bc:	f001 ff06 	bl	80156cc <__multiply>
 80138c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80138c2:	2800      	cmp	r0, #0
 80138c4:	f43f aea4 	beq.w	8013610 <_strtod_l+0x498>
 80138c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80138ca:	4620      	mov	r0, r4
 80138cc:	f001 fde2 	bl	8015494 <_Bfree>
 80138d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80138d2:	931e      	str	r3, [sp, #120]	; 0x78
 80138d4:	f1b8 0f00 	cmp.w	r8, #0
 80138d8:	f300 8091 	bgt.w	80139fe <_strtod_l+0x886>
 80138dc:	9b08      	ldr	r3, [sp, #32]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	dd08      	ble.n	80138f4 <_strtod_l+0x77c>
 80138e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80138e4:	9907      	ldr	r1, [sp, #28]
 80138e6:	4620      	mov	r0, r4
 80138e8:	f001 ff96 	bl	8015818 <__pow5mult>
 80138ec:	9007      	str	r0, [sp, #28]
 80138ee:	2800      	cmp	r0, #0
 80138f0:	f43f ae8e 	beq.w	8013610 <_strtod_l+0x498>
 80138f4:	2f00      	cmp	r7, #0
 80138f6:	dd08      	ble.n	801390a <_strtod_l+0x792>
 80138f8:	9907      	ldr	r1, [sp, #28]
 80138fa:	463a      	mov	r2, r7
 80138fc:	4620      	mov	r0, r4
 80138fe:	f001 ffe5 	bl	80158cc <__lshift>
 8013902:	9007      	str	r0, [sp, #28]
 8013904:	2800      	cmp	r0, #0
 8013906:	f43f ae83 	beq.w	8013610 <_strtod_l+0x498>
 801390a:	f1b9 0f00 	cmp.w	r9, #0
 801390e:	dd08      	ble.n	8013922 <_strtod_l+0x7aa>
 8013910:	4631      	mov	r1, r6
 8013912:	464a      	mov	r2, r9
 8013914:	4620      	mov	r0, r4
 8013916:	f001 ffd9 	bl	80158cc <__lshift>
 801391a:	4606      	mov	r6, r0
 801391c:	2800      	cmp	r0, #0
 801391e:	f43f ae77 	beq.w	8013610 <_strtod_l+0x498>
 8013922:	9a07      	ldr	r2, [sp, #28]
 8013924:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013926:	4620      	mov	r0, r4
 8013928:	f002 f858 	bl	80159dc <__mdiff>
 801392c:	4605      	mov	r5, r0
 801392e:	2800      	cmp	r0, #0
 8013930:	f43f ae6e 	beq.w	8013610 <_strtod_l+0x498>
 8013934:	68c3      	ldr	r3, [r0, #12]
 8013936:	930f      	str	r3, [sp, #60]	; 0x3c
 8013938:	2300      	movs	r3, #0
 801393a:	60c3      	str	r3, [r0, #12]
 801393c:	4631      	mov	r1, r6
 801393e:	f002 f831 	bl	80159a4 <__mcmp>
 8013942:	2800      	cmp	r0, #0
 8013944:	da65      	bge.n	8013a12 <_strtod_l+0x89a>
 8013946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013948:	ea53 030a 	orrs.w	r3, r3, sl
 801394c:	f040 8087 	bne.w	8013a5e <_strtod_l+0x8e6>
 8013950:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013954:	2b00      	cmp	r3, #0
 8013956:	f040 8082 	bne.w	8013a5e <_strtod_l+0x8e6>
 801395a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801395e:	0d1b      	lsrs	r3, r3, #20
 8013960:	051b      	lsls	r3, r3, #20
 8013962:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013966:	d97a      	bls.n	8013a5e <_strtod_l+0x8e6>
 8013968:	696b      	ldr	r3, [r5, #20]
 801396a:	b913      	cbnz	r3, 8013972 <_strtod_l+0x7fa>
 801396c:	692b      	ldr	r3, [r5, #16]
 801396e:	2b01      	cmp	r3, #1
 8013970:	dd75      	ble.n	8013a5e <_strtod_l+0x8e6>
 8013972:	4629      	mov	r1, r5
 8013974:	2201      	movs	r2, #1
 8013976:	4620      	mov	r0, r4
 8013978:	f001 ffa8 	bl	80158cc <__lshift>
 801397c:	4631      	mov	r1, r6
 801397e:	4605      	mov	r5, r0
 8013980:	f002 f810 	bl	80159a4 <__mcmp>
 8013984:	2800      	cmp	r0, #0
 8013986:	dd6a      	ble.n	8013a5e <_strtod_l+0x8e6>
 8013988:	9904      	ldr	r1, [sp, #16]
 801398a:	4a55      	ldr	r2, [pc, #340]	; (8013ae0 <_strtod_l+0x968>)
 801398c:	465b      	mov	r3, fp
 801398e:	2900      	cmp	r1, #0
 8013990:	f000 8085 	beq.w	8013a9e <_strtod_l+0x926>
 8013994:	ea02 010b 	and.w	r1, r2, fp
 8013998:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801399c:	dc7f      	bgt.n	8013a9e <_strtod_l+0x926>
 801399e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80139a2:	f77f aeaa 	ble.w	80136fa <_strtod_l+0x582>
 80139a6:	4a4f      	ldr	r2, [pc, #316]	; (8013ae4 <_strtod_l+0x96c>)
 80139a8:	2300      	movs	r3, #0
 80139aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80139ae:	4650      	mov	r0, sl
 80139b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80139b4:	4659      	mov	r1, fp
 80139b6:	f7ec fe37 	bl	8000628 <__aeabi_dmul>
 80139ba:	460b      	mov	r3, r1
 80139bc:	4303      	orrs	r3, r0
 80139be:	bf08      	it	eq
 80139c0:	2322      	moveq	r3, #34	; 0x22
 80139c2:	4682      	mov	sl, r0
 80139c4:	468b      	mov	fp, r1
 80139c6:	bf08      	it	eq
 80139c8:	6023      	streq	r3, [r4, #0]
 80139ca:	e62b      	b.n	8013624 <_strtod_l+0x4ac>
 80139cc:	f04f 32ff 	mov.w	r2, #4294967295
 80139d0:	fa02 f303 	lsl.w	r3, r2, r3
 80139d4:	ea03 0a0a 	and.w	sl, r3, sl
 80139d8:	e6de      	b.n	8013798 <_strtod_l+0x620>
 80139da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80139de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80139e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80139e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80139ea:	fa01 f308 	lsl.w	r3, r1, r8
 80139ee:	930c      	str	r3, [sp, #48]	; 0x30
 80139f0:	9111      	str	r1, [sp, #68]	; 0x44
 80139f2:	e741      	b.n	8013878 <_strtod_l+0x700>
 80139f4:	2300      	movs	r3, #0
 80139f6:	930c      	str	r3, [sp, #48]	; 0x30
 80139f8:	2301      	movs	r3, #1
 80139fa:	9311      	str	r3, [sp, #68]	; 0x44
 80139fc:	e73c      	b.n	8013878 <_strtod_l+0x700>
 80139fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013a00:	4642      	mov	r2, r8
 8013a02:	4620      	mov	r0, r4
 8013a04:	f001 ff62 	bl	80158cc <__lshift>
 8013a08:	901e      	str	r0, [sp, #120]	; 0x78
 8013a0a:	2800      	cmp	r0, #0
 8013a0c:	f47f af66 	bne.w	80138dc <_strtod_l+0x764>
 8013a10:	e5fe      	b.n	8013610 <_strtod_l+0x498>
 8013a12:	465f      	mov	r7, fp
 8013a14:	d16e      	bne.n	8013af4 <_strtod_l+0x97c>
 8013a16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013a1c:	b342      	cbz	r2, 8013a70 <_strtod_l+0x8f8>
 8013a1e:	4a32      	ldr	r2, [pc, #200]	; (8013ae8 <_strtod_l+0x970>)
 8013a20:	4293      	cmp	r3, r2
 8013a22:	d128      	bne.n	8013a76 <_strtod_l+0x8fe>
 8013a24:	9b04      	ldr	r3, [sp, #16]
 8013a26:	4650      	mov	r0, sl
 8013a28:	b1eb      	cbz	r3, 8013a66 <_strtod_l+0x8ee>
 8013a2a:	4a2d      	ldr	r2, [pc, #180]	; (8013ae0 <_strtod_l+0x968>)
 8013a2c:	403a      	ands	r2, r7
 8013a2e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013a32:	f04f 31ff 	mov.w	r1, #4294967295
 8013a36:	d819      	bhi.n	8013a6c <_strtod_l+0x8f4>
 8013a38:	0d12      	lsrs	r2, r2, #20
 8013a3a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8013a42:	4298      	cmp	r0, r3
 8013a44:	d117      	bne.n	8013a76 <_strtod_l+0x8fe>
 8013a46:	4b29      	ldr	r3, [pc, #164]	; (8013aec <_strtod_l+0x974>)
 8013a48:	429f      	cmp	r7, r3
 8013a4a:	d102      	bne.n	8013a52 <_strtod_l+0x8da>
 8013a4c:	3001      	adds	r0, #1
 8013a4e:	f43f addf 	beq.w	8013610 <_strtod_l+0x498>
 8013a52:	4b23      	ldr	r3, [pc, #140]	; (8013ae0 <_strtod_l+0x968>)
 8013a54:	403b      	ands	r3, r7
 8013a56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013a5a:	f04f 0a00 	mov.w	sl, #0
 8013a5e:	9b04      	ldr	r3, [sp, #16]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d1a0      	bne.n	80139a6 <_strtod_l+0x82e>
 8013a64:	e5de      	b.n	8013624 <_strtod_l+0x4ac>
 8013a66:	f04f 33ff 	mov.w	r3, #4294967295
 8013a6a:	e7ea      	b.n	8013a42 <_strtod_l+0x8ca>
 8013a6c:	460b      	mov	r3, r1
 8013a6e:	e7e8      	b.n	8013a42 <_strtod_l+0x8ca>
 8013a70:	ea53 030a 	orrs.w	r3, r3, sl
 8013a74:	d088      	beq.n	8013988 <_strtod_l+0x810>
 8013a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a78:	b1db      	cbz	r3, 8013ab2 <_strtod_l+0x93a>
 8013a7a:	423b      	tst	r3, r7
 8013a7c:	d0ef      	beq.n	8013a5e <_strtod_l+0x8e6>
 8013a7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a80:	9a04      	ldr	r2, [sp, #16]
 8013a82:	4650      	mov	r0, sl
 8013a84:	4659      	mov	r1, fp
 8013a86:	b1c3      	cbz	r3, 8013aba <_strtod_l+0x942>
 8013a88:	f7ff fb5a 	bl	8013140 <sulp>
 8013a8c:	4602      	mov	r2, r0
 8013a8e:	460b      	mov	r3, r1
 8013a90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013a94:	f7ec fc12 	bl	80002bc <__adddf3>
 8013a98:	4682      	mov	sl, r0
 8013a9a:	468b      	mov	fp, r1
 8013a9c:	e7df      	b.n	8013a5e <_strtod_l+0x8e6>
 8013a9e:	4013      	ands	r3, r2
 8013aa0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013aa4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013aa8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013aac:	f04f 3aff 	mov.w	sl, #4294967295
 8013ab0:	e7d5      	b.n	8013a5e <_strtod_l+0x8e6>
 8013ab2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ab4:	ea13 0f0a 	tst.w	r3, sl
 8013ab8:	e7e0      	b.n	8013a7c <_strtod_l+0x904>
 8013aba:	f7ff fb41 	bl	8013140 <sulp>
 8013abe:	4602      	mov	r2, r0
 8013ac0:	460b      	mov	r3, r1
 8013ac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013ac6:	f7ec fbf7 	bl	80002b8 <__aeabi_dsub>
 8013aca:	2200      	movs	r2, #0
 8013acc:	2300      	movs	r3, #0
 8013ace:	4682      	mov	sl, r0
 8013ad0:	468b      	mov	fp, r1
 8013ad2:	f7ed f811 	bl	8000af8 <__aeabi_dcmpeq>
 8013ad6:	2800      	cmp	r0, #0
 8013ad8:	d0c1      	beq.n	8013a5e <_strtod_l+0x8e6>
 8013ada:	e60e      	b.n	80136fa <_strtod_l+0x582>
 8013adc:	fffffc02 	.word	0xfffffc02
 8013ae0:	7ff00000 	.word	0x7ff00000
 8013ae4:	39500000 	.word	0x39500000
 8013ae8:	000fffff 	.word	0x000fffff
 8013aec:	7fefffff 	.word	0x7fefffff
 8013af0:	0802a9e0 	.word	0x0802a9e0
 8013af4:	4631      	mov	r1, r6
 8013af6:	4628      	mov	r0, r5
 8013af8:	f002 f8d0 	bl	8015c9c <__ratio>
 8013afc:	ec59 8b10 	vmov	r8, r9, d0
 8013b00:	ee10 0a10 	vmov	r0, s0
 8013b04:	2200      	movs	r2, #0
 8013b06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013b0a:	4649      	mov	r1, r9
 8013b0c:	f7ed f808 	bl	8000b20 <__aeabi_dcmple>
 8013b10:	2800      	cmp	r0, #0
 8013b12:	d07c      	beq.n	8013c0e <_strtod_l+0xa96>
 8013b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d04c      	beq.n	8013bb4 <_strtod_l+0xa3c>
 8013b1a:	4b95      	ldr	r3, [pc, #596]	; (8013d70 <_strtod_l+0xbf8>)
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013b22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013d70 <_strtod_l+0xbf8>
 8013b26:	f04f 0800 	mov.w	r8, #0
 8013b2a:	4b92      	ldr	r3, [pc, #584]	; (8013d74 <_strtod_l+0xbfc>)
 8013b2c:	403b      	ands	r3, r7
 8013b2e:	9311      	str	r3, [sp, #68]	; 0x44
 8013b30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013b32:	4b91      	ldr	r3, [pc, #580]	; (8013d78 <_strtod_l+0xc00>)
 8013b34:	429a      	cmp	r2, r3
 8013b36:	f040 80b2 	bne.w	8013c9e <_strtod_l+0xb26>
 8013b3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013b42:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013b46:	ec4b ab10 	vmov	d0, sl, fp
 8013b4a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8013b4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013b52:	f001 ffcb 	bl	8015aec <__ulp>
 8013b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013b5a:	ec53 2b10 	vmov	r2, r3, d0
 8013b5e:	f7ec fd63 	bl	8000628 <__aeabi_dmul>
 8013b62:	4652      	mov	r2, sl
 8013b64:	465b      	mov	r3, fp
 8013b66:	f7ec fba9 	bl	80002bc <__adddf3>
 8013b6a:	460b      	mov	r3, r1
 8013b6c:	4981      	ldr	r1, [pc, #516]	; (8013d74 <_strtod_l+0xbfc>)
 8013b6e:	4a83      	ldr	r2, [pc, #524]	; (8013d7c <_strtod_l+0xc04>)
 8013b70:	4019      	ands	r1, r3
 8013b72:	4291      	cmp	r1, r2
 8013b74:	4682      	mov	sl, r0
 8013b76:	d95e      	bls.n	8013c36 <_strtod_l+0xabe>
 8013b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b7a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013b7e:	4293      	cmp	r3, r2
 8013b80:	d103      	bne.n	8013b8a <_strtod_l+0xa12>
 8013b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b84:	3301      	adds	r3, #1
 8013b86:	f43f ad43 	beq.w	8013610 <_strtod_l+0x498>
 8013b8a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8013d88 <_strtod_l+0xc10>
 8013b8e:	f04f 3aff 	mov.w	sl, #4294967295
 8013b92:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013b94:	4620      	mov	r0, r4
 8013b96:	f001 fc7d 	bl	8015494 <_Bfree>
 8013b9a:	9907      	ldr	r1, [sp, #28]
 8013b9c:	4620      	mov	r0, r4
 8013b9e:	f001 fc79 	bl	8015494 <_Bfree>
 8013ba2:	4631      	mov	r1, r6
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	f001 fc75 	bl	8015494 <_Bfree>
 8013baa:	4629      	mov	r1, r5
 8013bac:	4620      	mov	r0, r4
 8013bae:	f001 fc71 	bl	8015494 <_Bfree>
 8013bb2:	e613      	b.n	80137dc <_strtod_l+0x664>
 8013bb4:	f1ba 0f00 	cmp.w	sl, #0
 8013bb8:	d11b      	bne.n	8013bf2 <_strtod_l+0xa7a>
 8013bba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013bbe:	b9f3      	cbnz	r3, 8013bfe <_strtod_l+0xa86>
 8013bc0:	4b6b      	ldr	r3, [pc, #428]	; (8013d70 <_strtod_l+0xbf8>)
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	4640      	mov	r0, r8
 8013bc6:	4649      	mov	r1, r9
 8013bc8:	f7ec ffa0 	bl	8000b0c <__aeabi_dcmplt>
 8013bcc:	b9d0      	cbnz	r0, 8013c04 <_strtod_l+0xa8c>
 8013bce:	4640      	mov	r0, r8
 8013bd0:	4649      	mov	r1, r9
 8013bd2:	4b6b      	ldr	r3, [pc, #428]	; (8013d80 <_strtod_l+0xc08>)
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	f7ec fd27 	bl	8000628 <__aeabi_dmul>
 8013bda:	4680      	mov	r8, r0
 8013bdc:	4689      	mov	r9, r1
 8013bde:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013be2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8013be6:	931b      	str	r3, [sp, #108]	; 0x6c
 8013be8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8013bec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013bf0:	e79b      	b.n	8013b2a <_strtod_l+0x9b2>
 8013bf2:	f1ba 0f01 	cmp.w	sl, #1
 8013bf6:	d102      	bne.n	8013bfe <_strtod_l+0xa86>
 8013bf8:	2f00      	cmp	r7, #0
 8013bfa:	f43f ad7e 	beq.w	80136fa <_strtod_l+0x582>
 8013bfe:	4b61      	ldr	r3, [pc, #388]	; (8013d84 <_strtod_l+0xc0c>)
 8013c00:	2200      	movs	r2, #0
 8013c02:	e78c      	b.n	8013b1e <_strtod_l+0x9a6>
 8013c04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013d80 <_strtod_l+0xc08>
 8013c08:	f04f 0800 	mov.w	r8, #0
 8013c0c:	e7e7      	b.n	8013bde <_strtod_l+0xa66>
 8013c0e:	4b5c      	ldr	r3, [pc, #368]	; (8013d80 <_strtod_l+0xc08>)
 8013c10:	4640      	mov	r0, r8
 8013c12:	4649      	mov	r1, r9
 8013c14:	2200      	movs	r2, #0
 8013c16:	f7ec fd07 	bl	8000628 <__aeabi_dmul>
 8013c1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c1c:	4680      	mov	r8, r0
 8013c1e:	4689      	mov	r9, r1
 8013c20:	b933      	cbnz	r3, 8013c30 <_strtod_l+0xab8>
 8013c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c26:	9012      	str	r0, [sp, #72]	; 0x48
 8013c28:	9313      	str	r3, [sp, #76]	; 0x4c
 8013c2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013c2e:	e7dd      	b.n	8013bec <_strtod_l+0xa74>
 8013c30:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8013c34:	e7f9      	b.n	8013c2a <_strtod_l+0xab2>
 8013c36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013c3a:	9b04      	ldr	r3, [sp, #16]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d1a8      	bne.n	8013b92 <_strtod_l+0xa1a>
 8013c40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013c44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013c46:	0d1b      	lsrs	r3, r3, #20
 8013c48:	051b      	lsls	r3, r3, #20
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d1a1      	bne.n	8013b92 <_strtod_l+0xa1a>
 8013c4e:	4640      	mov	r0, r8
 8013c50:	4649      	mov	r1, r9
 8013c52:	f7ed f849 	bl	8000ce8 <__aeabi_d2lz>
 8013c56:	f7ec fcb9 	bl	80005cc <__aeabi_l2d>
 8013c5a:	4602      	mov	r2, r0
 8013c5c:	460b      	mov	r3, r1
 8013c5e:	4640      	mov	r0, r8
 8013c60:	4649      	mov	r1, r9
 8013c62:	f7ec fb29 	bl	80002b8 <__aeabi_dsub>
 8013c66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013c6c:	ea43 030a 	orr.w	r3, r3, sl
 8013c70:	4313      	orrs	r3, r2
 8013c72:	4680      	mov	r8, r0
 8013c74:	4689      	mov	r9, r1
 8013c76:	d053      	beq.n	8013d20 <_strtod_l+0xba8>
 8013c78:	a335      	add	r3, pc, #212	; (adr r3, 8013d50 <_strtod_l+0xbd8>)
 8013c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7e:	f7ec ff45 	bl	8000b0c <__aeabi_dcmplt>
 8013c82:	2800      	cmp	r0, #0
 8013c84:	f47f acce 	bne.w	8013624 <_strtod_l+0x4ac>
 8013c88:	a333      	add	r3, pc, #204	; (adr r3, 8013d58 <_strtod_l+0xbe0>)
 8013c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c8e:	4640      	mov	r0, r8
 8013c90:	4649      	mov	r1, r9
 8013c92:	f7ec ff59 	bl	8000b48 <__aeabi_dcmpgt>
 8013c96:	2800      	cmp	r0, #0
 8013c98:	f43f af7b 	beq.w	8013b92 <_strtod_l+0xa1a>
 8013c9c:	e4c2      	b.n	8013624 <_strtod_l+0x4ac>
 8013c9e:	9b04      	ldr	r3, [sp, #16]
 8013ca0:	b333      	cbz	r3, 8013cf0 <_strtod_l+0xb78>
 8013ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ca4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013ca8:	d822      	bhi.n	8013cf0 <_strtod_l+0xb78>
 8013caa:	a32d      	add	r3, pc, #180	; (adr r3, 8013d60 <_strtod_l+0xbe8>)
 8013cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cb0:	4640      	mov	r0, r8
 8013cb2:	4649      	mov	r1, r9
 8013cb4:	f7ec ff34 	bl	8000b20 <__aeabi_dcmple>
 8013cb8:	b1a0      	cbz	r0, 8013ce4 <_strtod_l+0xb6c>
 8013cba:	4649      	mov	r1, r9
 8013cbc:	4640      	mov	r0, r8
 8013cbe:	f7ec ff8b 	bl	8000bd8 <__aeabi_d2uiz>
 8013cc2:	2801      	cmp	r0, #1
 8013cc4:	bf38      	it	cc
 8013cc6:	2001      	movcc	r0, #1
 8013cc8:	f7ec fc34 	bl	8000534 <__aeabi_ui2d>
 8013ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cce:	4680      	mov	r8, r0
 8013cd0:	4689      	mov	r9, r1
 8013cd2:	bb13      	cbnz	r3, 8013d1a <_strtod_l+0xba2>
 8013cd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013cd8:	9014      	str	r0, [sp, #80]	; 0x50
 8013cda:	9315      	str	r3, [sp, #84]	; 0x54
 8013cdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013ce0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ce6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013ce8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013cec:	1a9b      	subs	r3, r3, r2
 8013cee:	930d      	str	r3, [sp, #52]	; 0x34
 8013cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013cf4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013cf8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013cfc:	f001 fef6 	bl	8015aec <__ulp>
 8013d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013d04:	ec53 2b10 	vmov	r2, r3, d0
 8013d08:	f7ec fc8e 	bl	8000628 <__aeabi_dmul>
 8013d0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013d10:	f7ec fad4 	bl	80002bc <__adddf3>
 8013d14:	4682      	mov	sl, r0
 8013d16:	468b      	mov	fp, r1
 8013d18:	e78f      	b.n	8013c3a <_strtod_l+0xac2>
 8013d1a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8013d1e:	e7dd      	b.n	8013cdc <_strtod_l+0xb64>
 8013d20:	a311      	add	r3, pc, #68	; (adr r3, 8013d68 <_strtod_l+0xbf0>)
 8013d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d26:	f7ec fef1 	bl	8000b0c <__aeabi_dcmplt>
 8013d2a:	e7b4      	b.n	8013c96 <_strtod_l+0xb1e>
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	930e      	str	r3, [sp, #56]	; 0x38
 8013d30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013d32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013d34:	6013      	str	r3, [r2, #0]
 8013d36:	f7ff ba65 	b.w	8013204 <_strtod_l+0x8c>
 8013d3a:	2b65      	cmp	r3, #101	; 0x65
 8013d3c:	f43f ab5d 	beq.w	80133fa <_strtod_l+0x282>
 8013d40:	2b45      	cmp	r3, #69	; 0x45
 8013d42:	f43f ab5a 	beq.w	80133fa <_strtod_l+0x282>
 8013d46:	2201      	movs	r2, #1
 8013d48:	f7ff bb92 	b.w	8013470 <_strtod_l+0x2f8>
 8013d4c:	f3af 8000 	nop.w
 8013d50:	94a03595 	.word	0x94a03595
 8013d54:	3fdfffff 	.word	0x3fdfffff
 8013d58:	35afe535 	.word	0x35afe535
 8013d5c:	3fe00000 	.word	0x3fe00000
 8013d60:	ffc00000 	.word	0xffc00000
 8013d64:	41dfffff 	.word	0x41dfffff
 8013d68:	94a03595 	.word	0x94a03595
 8013d6c:	3fcfffff 	.word	0x3fcfffff
 8013d70:	3ff00000 	.word	0x3ff00000
 8013d74:	7ff00000 	.word	0x7ff00000
 8013d78:	7fe00000 	.word	0x7fe00000
 8013d7c:	7c9fffff 	.word	0x7c9fffff
 8013d80:	3fe00000 	.word	0x3fe00000
 8013d84:	bff00000 	.word	0xbff00000
 8013d88:	7fefffff 	.word	0x7fefffff

08013d8c <_strtod_r>:
 8013d8c:	4b01      	ldr	r3, [pc, #4]	; (8013d94 <_strtod_r+0x8>)
 8013d8e:	f7ff b9f3 	b.w	8013178 <_strtod_l>
 8013d92:	bf00      	nop
 8013d94:	200000ac 	.word	0x200000ac

08013d98 <strtod>:
 8013d98:	460a      	mov	r2, r1
 8013d9a:	4601      	mov	r1, r0
 8013d9c:	4802      	ldr	r0, [pc, #8]	; (8013da8 <strtod+0x10>)
 8013d9e:	4b03      	ldr	r3, [pc, #12]	; (8013dac <strtod+0x14>)
 8013da0:	6800      	ldr	r0, [r0, #0]
 8013da2:	f7ff b9e9 	b.w	8013178 <_strtod_l>
 8013da6:	bf00      	nop
 8013da8:	20000044 	.word	0x20000044
 8013dac:	200000ac 	.word	0x200000ac

08013db0 <strtok>:
 8013db0:	4b16      	ldr	r3, [pc, #88]	; (8013e0c <strtok+0x5c>)
 8013db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013db4:	681e      	ldr	r6, [r3, #0]
 8013db6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8013db8:	4605      	mov	r5, r0
 8013dba:	b9fc      	cbnz	r4, 8013dfc <strtok+0x4c>
 8013dbc:	2050      	movs	r0, #80	; 0x50
 8013dbe:	9101      	str	r1, [sp, #4]
 8013dc0:	f001 fb00 	bl	80153c4 <malloc>
 8013dc4:	9901      	ldr	r1, [sp, #4]
 8013dc6:	65b0      	str	r0, [r6, #88]	; 0x58
 8013dc8:	4602      	mov	r2, r0
 8013dca:	b920      	cbnz	r0, 8013dd6 <strtok+0x26>
 8013dcc:	4b10      	ldr	r3, [pc, #64]	; (8013e10 <strtok+0x60>)
 8013dce:	4811      	ldr	r0, [pc, #68]	; (8013e14 <strtok+0x64>)
 8013dd0:	2157      	movs	r1, #87	; 0x57
 8013dd2:	f000 f8d9 	bl	8013f88 <__assert_func>
 8013dd6:	e9c0 4400 	strd	r4, r4, [r0]
 8013dda:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013dde:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013de2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8013de6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013dea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8013dee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8013df2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8013df6:	6184      	str	r4, [r0, #24]
 8013df8:	7704      	strb	r4, [r0, #28]
 8013dfa:	6244      	str	r4, [r0, #36]	; 0x24
 8013dfc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8013dfe:	2301      	movs	r3, #1
 8013e00:	4628      	mov	r0, r5
 8013e02:	b002      	add	sp, #8
 8013e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e08:	f000 b806 	b.w	8013e18 <__strtok_r>
 8013e0c:	20000044 	.word	0x20000044
 8013e10:	0802aa08 	.word	0x0802aa08
 8013e14:	0802aa1f 	.word	0x0802aa1f

08013e18 <__strtok_r>:
 8013e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e1a:	b908      	cbnz	r0, 8013e20 <__strtok_r+0x8>
 8013e1c:	6810      	ldr	r0, [r2, #0]
 8013e1e:	b188      	cbz	r0, 8013e44 <__strtok_r+0x2c>
 8013e20:	4604      	mov	r4, r0
 8013e22:	4620      	mov	r0, r4
 8013e24:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013e28:	460f      	mov	r7, r1
 8013e2a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013e2e:	b91e      	cbnz	r6, 8013e38 <__strtok_r+0x20>
 8013e30:	b965      	cbnz	r5, 8013e4c <__strtok_r+0x34>
 8013e32:	6015      	str	r5, [r2, #0]
 8013e34:	4628      	mov	r0, r5
 8013e36:	e005      	b.n	8013e44 <__strtok_r+0x2c>
 8013e38:	42b5      	cmp	r5, r6
 8013e3a:	d1f6      	bne.n	8013e2a <__strtok_r+0x12>
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d1f0      	bne.n	8013e22 <__strtok_r+0xa>
 8013e40:	6014      	str	r4, [r2, #0]
 8013e42:	7003      	strb	r3, [r0, #0]
 8013e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e46:	461c      	mov	r4, r3
 8013e48:	e00c      	b.n	8013e64 <__strtok_r+0x4c>
 8013e4a:	b915      	cbnz	r5, 8013e52 <__strtok_r+0x3a>
 8013e4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013e50:	460e      	mov	r6, r1
 8013e52:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013e56:	42ab      	cmp	r3, r5
 8013e58:	d1f7      	bne.n	8013e4a <__strtok_r+0x32>
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d0f3      	beq.n	8013e46 <__strtok_r+0x2e>
 8013e5e:	2300      	movs	r3, #0
 8013e60:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013e64:	6014      	str	r4, [r2, #0]
 8013e66:	e7ed      	b.n	8013e44 <__strtok_r+0x2c>

08013e68 <_strtol_l.isra.0>:
 8013e68:	2b01      	cmp	r3, #1
 8013e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e6e:	d001      	beq.n	8013e74 <_strtol_l.isra.0+0xc>
 8013e70:	2b24      	cmp	r3, #36	; 0x24
 8013e72:	d906      	bls.n	8013e82 <_strtol_l.isra.0+0x1a>
 8013e74:	f7fe fa92 	bl	801239c <__errno>
 8013e78:	2316      	movs	r3, #22
 8013e7a:	6003      	str	r3, [r0, #0]
 8013e7c:	2000      	movs	r0, #0
 8013e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e82:	4f3a      	ldr	r7, [pc, #232]	; (8013f6c <_strtol_l.isra.0+0x104>)
 8013e84:	468e      	mov	lr, r1
 8013e86:	4676      	mov	r6, lr
 8013e88:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013e8c:	5de5      	ldrb	r5, [r4, r7]
 8013e8e:	f015 0508 	ands.w	r5, r5, #8
 8013e92:	d1f8      	bne.n	8013e86 <_strtol_l.isra.0+0x1e>
 8013e94:	2c2d      	cmp	r4, #45	; 0x2d
 8013e96:	d134      	bne.n	8013f02 <_strtol_l.isra.0+0x9a>
 8013e98:	f89e 4000 	ldrb.w	r4, [lr]
 8013e9c:	f04f 0801 	mov.w	r8, #1
 8013ea0:	f106 0e02 	add.w	lr, r6, #2
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d05c      	beq.n	8013f62 <_strtol_l.isra.0+0xfa>
 8013ea8:	2b10      	cmp	r3, #16
 8013eaa:	d10c      	bne.n	8013ec6 <_strtol_l.isra.0+0x5e>
 8013eac:	2c30      	cmp	r4, #48	; 0x30
 8013eae:	d10a      	bne.n	8013ec6 <_strtol_l.isra.0+0x5e>
 8013eb0:	f89e 4000 	ldrb.w	r4, [lr]
 8013eb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013eb8:	2c58      	cmp	r4, #88	; 0x58
 8013eba:	d14d      	bne.n	8013f58 <_strtol_l.isra.0+0xf0>
 8013ebc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013ec0:	2310      	movs	r3, #16
 8013ec2:	f10e 0e02 	add.w	lr, lr, #2
 8013ec6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8013eca:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013ece:	2600      	movs	r6, #0
 8013ed0:	fbbc f9f3 	udiv	r9, ip, r3
 8013ed4:	4635      	mov	r5, r6
 8013ed6:	fb03 ca19 	mls	sl, r3, r9, ip
 8013eda:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013ede:	2f09      	cmp	r7, #9
 8013ee0:	d818      	bhi.n	8013f14 <_strtol_l.isra.0+0xac>
 8013ee2:	463c      	mov	r4, r7
 8013ee4:	42a3      	cmp	r3, r4
 8013ee6:	dd24      	ble.n	8013f32 <_strtol_l.isra.0+0xca>
 8013ee8:	2e00      	cmp	r6, #0
 8013eea:	db1f      	blt.n	8013f2c <_strtol_l.isra.0+0xc4>
 8013eec:	45a9      	cmp	r9, r5
 8013eee:	d31d      	bcc.n	8013f2c <_strtol_l.isra.0+0xc4>
 8013ef0:	d101      	bne.n	8013ef6 <_strtol_l.isra.0+0x8e>
 8013ef2:	45a2      	cmp	sl, r4
 8013ef4:	db1a      	blt.n	8013f2c <_strtol_l.isra.0+0xc4>
 8013ef6:	fb05 4503 	mla	r5, r5, r3, r4
 8013efa:	2601      	movs	r6, #1
 8013efc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013f00:	e7eb      	b.n	8013eda <_strtol_l.isra.0+0x72>
 8013f02:	2c2b      	cmp	r4, #43	; 0x2b
 8013f04:	bf08      	it	eq
 8013f06:	f89e 4000 	ldrbeq.w	r4, [lr]
 8013f0a:	46a8      	mov	r8, r5
 8013f0c:	bf08      	it	eq
 8013f0e:	f106 0e02 	addeq.w	lr, r6, #2
 8013f12:	e7c7      	b.n	8013ea4 <_strtol_l.isra.0+0x3c>
 8013f14:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013f18:	2f19      	cmp	r7, #25
 8013f1a:	d801      	bhi.n	8013f20 <_strtol_l.isra.0+0xb8>
 8013f1c:	3c37      	subs	r4, #55	; 0x37
 8013f1e:	e7e1      	b.n	8013ee4 <_strtol_l.isra.0+0x7c>
 8013f20:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013f24:	2f19      	cmp	r7, #25
 8013f26:	d804      	bhi.n	8013f32 <_strtol_l.isra.0+0xca>
 8013f28:	3c57      	subs	r4, #87	; 0x57
 8013f2a:	e7db      	b.n	8013ee4 <_strtol_l.isra.0+0x7c>
 8013f2c:	f04f 36ff 	mov.w	r6, #4294967295
 8013f30:	e7e4      	b.n	8013efc <_strtol_l.isra.0+0x94>
 8013f32:	2e00      	cmp	r6, #0
 8013f34:	da05      	bge.n	8013f42 <_strtol_l.isra.0+0xda>
 8013f36:	2322      	movs	r3, #34	; 0x22
 8013f38:	6003      	str	r3, [r0, #0]
 8013f3a:	4665      	mov	r5, ip
 8013f3c:	b942      	cbnz	r2, 8013f50 <_strtol_l.isra.0+0xe8>
 8013f3e:	4628      	mov	r0, r5
 8013f40:	e79d      	b.n	8013e7e <_strtol_l.isra.0+0x16>
 8013f42:	f1b8 0f00 	cmp.w	r8, #0
 8013f46:	d000      	beq.n	8013f4a <_strtol_l.isra.0+0xe2>
 8013f48:	426d      	negs	r5, r5
 8013f4a:	2a00      	cmp	r2, #0
 8013f4c:	d0f7      	beq.n	8013f3e <_strtol_l.isra.0+0xd6>
 8013f4e:	b10e      	cbz	r6, 8013f54 <_strtol_l.isra.0+0xec>
 8013f50:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013f54:	6011      	str	r1, [r2, #0]
 8013f56:	e7f2      	b.n	8013f3e <_strtol_l.isra.0+0xd6>
 8013f58:	2430      	movs	r4, #48	; 0x30
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d1b3      	bne.n	8013ec6 <_strtol_l.isra.0+0x5e>
 8013f5e:	2308      	movs	r3, #8
 8013f60:	e7b1      	b.n	8013ec6 <_strtol_l.isra.0+0x5e>
 8013f62:	2c30      	cmp	r4, #48	; 0x30
 8013f64:	d0a4      	beq.n	8013eb0 <_strtol_l.isra.0+0x48>
 8013f66:	230a      	movs	r3, #10
 8013f68:	e7ad      	b.n	8013ec6 <_strtol_l.isra.0+0x5e>
 8013f6a:	bf00      	nop
 8013f6c:	0802aabd 	.word	0x0802aabd

08013f70 <_strtol_r>:
 8013f70:	f7ff bf7a 	b.w	8013e68 <_strtol_l.isra.0>

08013f74 <strtol>:
 8013f74:	4613      	mov	r3, r2
 8013f76:	460a      	mov	r2, r1
 8013f78:	4601      	mov	r1, r0
 8013f7a:	4802      	ldr	r0, [pc, #8]	; (8013f84 <strtol+0x10>)
 8013f7c:	6800      	ldr	r0, [r0, #0]
 8013f7e:	f7ff bf73 	b.w	8013e68 <_strtol_l.isra.0>
 8013f82:	bf00      	nop
 8013f84:	20000044 	.word	0x20000044

08013f88 <__assert_func>:
 8013f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f8a:	4614      	mov	r4, r2
 8013f8c:	461a      	mov	r2, r3
 8013f8e:	4b09      	ldr	r3, [pc, #36]	; (8013fb4 <__assert_func+0x2c>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	4605      	mov	r5, r0
 8013f94:	68d8      	ldr	r0, [r3, #12]
 8013f96:	b14c      	cbz	r4, 8013fac <__assert_func+0x24>
 8013f98:	4b07      	ldr	r3, [pc, #28]	; (8013fb8 <__assert_func+0x30>)
 8013f9a:	9100      	str	r1, [sp, #0]
 8013f9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013fa0:	4906      	ldr	r1, [pc, #24]	; (8013fbc <__assert_func+0x34>)
 8013fa2:	462b      	mov	r3, r5
 8013fa4:	f000 fe88 	bl	8014cb8 <fiprintf>
 8013fa8:	f002 fb56 	bl	8016658 <abort>
 8013fac:	4b04      	ldr	r3, [pc, #16]	; (8013fc0 <__assert_func+0x38>)
 8013fae:	461c      	mov	r4, r3
 8013fb0:	e7f3      	b.n	8013f9a <__assert_func+0x12>
 8013fb2:	bf00      	nop
 8013fb4:	20000044 	.word	0x20000044
 8013fb8:	0802aa80 	.word	0x0802aa80
 8013fbc:	0802aa8d 	.word	0x0802aa8d
 8013fc0:	0802aabb 	.word	0x0802aabb

08013fc4 <quorem>:
 8013fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc8:	6903      	ldr	r3, [r0, #16]
 8013fca:	690c      	ldr	r4, [r1, #16]
 8013fcc:	42a3      	cmp	r3, r4
 8013fce:	4607      	mov	r7, r0
 8013fd0:	f2c0 8081 	blt.w	80140d6 <quorem+0x112>
 8013fd4:	3c01      	subs	r4, #1
 8013fd6:	f101 0814 	add.w	r8, r1, #20
 8013fda:	f100 0514 	add.w	r5, r0, #20
 8013fde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013fe2:	9301      	str	r3, [sp, #4]
 8013fe4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013fe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013fec:	3301      	adds	r3, #1
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013ff4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013ff8:	fbb2 f6f3 	udiv	r6, r2, r3
 8013ffc:	d331      	bcc.n	8014062 <quorem+0x9e>
 8013ffe:	f04f 0e00 	mov.w	lr, #0
 8014002:	4640      	mov	r0, r8
 8014004:	46ac      	mov	ip, r5
 8014006:	46f2      	mov	sl, lr
 8014008:	f850 2b04 	ldr.w	r2, [r0], #4
 801400c:	b293      	uxth	r3, r2
 801400e:	fb06 e303 	mla	r3, r6, r3, lr
 8014012:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014016:	b29b      	uxth	r3, r3
 8014018:	ebaa 0303 	sub.w	r3, sl, r3
 801401c:	0c12      	lsrs	r2, r2, #16
 801401e:	f8dc a000 	ldr.w	sl, [ip]
 8014022:	fb06 e202 	mla	r2, r6, r2, lr
 8014026:	fa13 f38a 	uxtah	r3, r3, sl
 801402a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801402e:	fa1f fa82 	uxth.w	sl, r2
 8014032:	f8dc 2000 	ldr.w	r2, [ip]
 8014036:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801403a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801403e:	b29b      	uxth	r3, r3
 8014040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014044:	4581      	cmp	r9, r0
 8014046:	f84c 3b04 	str.w	r3, [ip], #4
 801404a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801404e:	d2db      	bcs.n	8014008 <quorem+0x44>
 8014050:	f855 300b 	ldr.w	r3, [r5, fp]
 8014054:	b92b      	cbnz	r3, 8014062 <quorem+0x9e>
 8014056:	9b01      	ldr	r3, [sp, #4]
 8014058:	3b04      	subs	r3, #4
 801405a:	429d      	cmp	r5, r3
 801405c:	461a      	mov	r2, r3
 801405e:	d32e      	bcc.n	80140be <quorem+0xfa>
 8014060:	613c      	str	r4, [r7, #16]
 8014062:	4638      	mov	r0, r7
 8014064:	f001 fc9e 	bl	80159a4 <__mcmp>
 8014068:	2800      	cmp	r0, #0
 801406a:	db24      	blt.n	80140b6 <quorem+0xf2>
 801406c:	3601      	adds	r6, #1
 801406e:	4628      	mov	r0, r5
 8014070:	f04f 0c00 	mov.w	ip, #0
 8014074:	f858 2b04 	ldr.w	r2, [r8], #4
 8014078:	f8d0 e000 	ldr.w	lr, [r0]
 801407c:	b293      	uxth	r3, r2
 801407e:	ebac 0303 	sub.w	r3, ip, r3
 8014082:	0c12      	lsrs	r2, r2, #16
 8014084:	fa13 f38e 	uxtah	r3, r3, lr
 8014088:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801408c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014090:	b29b      	uxth	r3, r3
 8014092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014096:	45c1      	cmp	r9, r8
 8014098:	f840 3b04 	str.w	r3, [r0], #4
 801409c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80140a0:	d2e8      	bcs.n	8014074 <quorem+0xb0>
 80140a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80140a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80140aa:	b922      	cbnz	r2, 80140b6 <quorem+0xf2>
 80140ac:	3b04      	subs	r3, #4
 80140ae:	429d      	cmp	r5, r3
 80140b0:	461a      	mov	r2, r3
 80140b2:	d30a      	bcc.n	80140ca <quorem+0x106>
 80140b4:	613c      	str	r4, [r7, #16]
 80140b6:	4630      	mov	r0, r6
 80140b8:	b003      	add	sp, #12
 80140ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140be:	6812      	ldr	r2, [r2, #0]
 80140c0:	3b04      	subs	r3, #4
 80140c2:	2a00      	cmp	r2, #0
 80140c4:	d1cc      	bne.n	8014060 <quorem+0x9c>
 80140c6:	3c01      	subs	r4, #1
 80140c8:	e7c7      	b.n	801405a <quorem+0x96>
 80140ca:	6812      	ldr	r2, [r2, #0]
 80140cc:	3b04      	subs	r3, #4
 80140ce:	2a00      	cmp	r2, #0
 80140d0:	d1f0      	bne.n	80140b4 <quorem+0xf0>
 80140d2:	3c01      	subs	r4, #1
 80140d4:	e7eb      	b.n	80140ae <quorem+0xea>
 80140d6:	2000      	movs	r0, #0
 80140d8:	e7ee      	b.n	80140b8 <quorem+0xf4>
 80140da:	0000      	movs	r0, r0
 80140dc:	0000      	movs	r0, r0
	...

080140e0 <_dtoa_r>:
 80140e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e4:	ed2d 8b02 	vpush	{d8}
 80140e8:	ec57 6b10 	vmov	r6, r7, d0
 80140ec:	b095      	sub	sp, #84	; 0x54
 80140ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80140f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80140f4:	9105      	str	r1, [sp, #20]
 80140f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80140fa:	4604      	mov	r4, r0
 80140fc:	9209      	str	r2, [sp, #36]	; 0x24
 80140fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014100:	b975      	cbnz	r5, 8014120 <_dtoa_r+0x40>
 8014102:	2010      	movs	r0, #16
 8014104:	f001 f95e 	bl	80153c4 <malloc>
 8014108:	4602      	mov	r2, r0
 801410a:	6260      	str	r0, [r4, #36]	; 0x24
 801410c:	b920      	cbnz	r0, 8014118 <_dtoa_r+0x38>
 801410e:	4bb2      	ldr	r3, [pc, #712]	; (80143d8 <_dtoa_r+0x2f8>)
 8014110:	21ea      	movs	r1, #234	; 0xea
 8014112:	48b2      	ldr	r0, [pc, #712]	; (80143dc <_dtoa_r+0x2fc>)
 8014114:	f7ff ff38 	bl	8013f88 <__assert_func>
 8014118:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801411c:	6005      	str	r5, [r0, #0]
 801411e:	60c5      	str	r5, [r0, #12]
 8014120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014122:	6819      	ldr	r1, [r3, #0]
 8014124:	b151      	cbz	r1, 801413c <_dtoa_r+0x5c>
 8014126:	685a      	ldr	r2, [r3, #4]
 8014128:	604a      	str	r2, [r1, #4]
 801412a:	2301      	movs	r3, #1
 801412c:	4093      	lsls	r3, r2
 801412e:	608b      	str	r3, [r1, #8]
 8014130:	4620      	mov	r0, r4
 8014132:	f001 f9af 	bl	8015494 <_Bfree>
 8014136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014138:	2200      	movs	r2, #0
 801413a:	601a      	str	r2, [r3, #0]
 801413c:	1e3b      	subs	r3, r7, #0
 801413e:	bfb9      	ittee	lt
 8014140:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014144:	9303      	strlt	r3, [sp, #12]
 8014146:	2300      	movge	r3, #0
 8014148:	f8c8 3000 	strge.w	r3, [r8]
 801414c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014150:	4ba3      	ldr	r3, [pc, #652]	; (80143e0 <_dtoa_r+0x300>)
 8014152:	bfbc      	itt	lt
 8014154:	2201      	movlt	r2, #1
 8014156:	f8c8 2000 	strlt.w	r2, [r8]
 801415a:	ea33 0309 	bics.w	r3, r3, r9
 801415e:	d11b      	bne.n	8014198 <_dtoa_r+0xb8>
 8014160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014162:	f242 730f 	movw	r3, #9999	; 0x270f
 8014166:	6013      	str	r3, [r2, #0]
 8014168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801416c:	4333      	orrs	r3, r6
 801416e:	f000 857a 	beq.w	8014c66 <_dtoa_r+0xb86>
 8014172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014174:	b963      	cbnz	r3, 8014190 <_dtoa_r+0xb0>
 8014176:	4b9b      	ldr	r3, [pc, #620]	; (80143e4 <_dtoa_r+0x304>)
 8014178:	e024      	b.n	80141c4 <_dtoa_r+0xe4>
 801417a:	4b9b      	ldr	r3, [pc, #620]	; (80143e8 <_dtoa_r+0x308>)
 801417c:	9300      	str	r3, [sp, #0]
 801417e:	3308      	adds	r3, #8
 8014180:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014182:	6013      	str	r3, [r2, #0]
 8014184:	9800      	ldr	r0, [sp, #0]
 8014186:	b015      	add	sp, #84	; 0x54
 8014188:	ecbd 8b02 	vpop	{d8}
 801418c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014190:	4b94      	ldr	r3, [pc, #592]	; (80143e4 <_dtoa_r+0x304>)
 8014192:	9300      	str	r3, [sp, #0]
 8014194:	3303      	adds	r3, #3
 8014196:	e7f3      	b.n	8014180 <_dtoa_r+0xa0>
 8014198:	ed9d 7b02 	vldr	d7, [sp, #8]
 801419c:	2200      	movs	r2, #0
 801419e:	ec51 0b17 	vmov	r0, r1, d7
 80141a2:	2300      	movs	r3, #0
 80141a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80141a8:	f7ec fca6 	bl	8000af8 <__aeabi_dcmpeq>
 80141ac:	4680      	mov	r8, r0
 80141ae:	b158      	cbz	r0, 80141c8 <_dtoa_r+0xe8>
 80141b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80141b2:	2301      	movs	r3, #1
 80141b4:	6013      	str	r3, [r2, #0]
 80141b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	f000 8551 	beq.w	8014c60 <_dtoa_r+0xb80>
 80141be:	488b      	ldr	r0, [pc, #556]	; (80143ec <_dtoa_r+0x30c>)
 80141c0:	6018      	str	r0, [r3, #0]
 80141c2:	1e43      	subs	r3, r0, #1
 80141c4:	9300      	str	r3, [sp, #0]
 80141c6:	e7dd      	b.n	8014184 <_dtoa_r+0xa4>
 80141c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80141cc:	aa12      	add	r2, sp, #72	; 0x48
 80141ce:	a913      	add	r1, sp, #76	; 0x4c
 80141d0:	4620      	mov	r0, r4
 80141d2:	f001 fd07 	bl	8015be4 <__d2b>
 80141d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80141da:	4683      	mov	fp, r0
 80141dc:	2d00      	cmp	r5, #0
 80141de:	d07c      	beq.n	80142da <_dtoa_r+0x1fa>
 80141e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80141e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80141ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80141ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80141f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80141f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80141fa:	4b7d      	ldr	r3, [pc, #500]	; (80143f0 <_dtoa_r+0x310>)
 80141fc:	2200      	movs	r2, #0
 80141fe:	4630      	mov	r0, r6
 8014200:	4639      	mov	r1, r7
 8014202:	f7ec f859 	bl	80002b8 <__aeabi_dsub>
 8014206:	a36e      	add	r3, pc, #440	; (adr r3, 80143c0 <_dtoa_r+0x2e0>)
 8014208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801420c:	f7ec fa0c 	bl	8000628 <__aeabi_dmul>
 8014210:	a36d      	add	r3, pc, #436	; (adr r3, 80143c8 <_dtoa_r+0x2e8>)
 8014212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014216:	f7ec f851 	bl	80002bc <__adddf3>
 801421a:	4606      	mov	r6, r0
 801421c:	4628      	mov	r0, r5
 801421e:	460f      	mov	r7, r1
 8014220:	f7ec f998 	bl	8000554 <__aeabi_i2d>
 8014224:	a36a      	add	r3, pc, #424	; (adr r3, 80143d0 <_dtoa_r+0x2f0>)
 8014226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801422a:	f7ec f9fd 	bl	8000628 <__aeabi_dmul>
 801422e:	4602      	mov	r2, r0
 8014230:	460b      	mov	r3, r1
 8014232:	4630      	mov	r0, r6
 8014234:	4639      	mov	r1, r7
 8014236:	f7ec f841 	bl	80002bc <__adddf3>
 801423a:	4606      	mov	r6, r0
 801423c:	460f      	mov	r7, r1
 801423e:	f7ec fca3 	bl	8000b88 <__aeabi_d2iz>
 8014242:	2200      	movs	r2, #0
 8014244:	4682      	mov	sl, r0
 8014246:	2300      	movs	r3, #0
 8014248:	4630      	mov	r0, r6
 801424a:	4639      	mov	r1, r7
 801424c:	f7ec fc5e 	bl	8000b0c <__aeabi_dcmplt>
 8014250:	b148      	cbz	r0, 8014266 <_dtoa_r+0x186>
 8014252:	4650      	mov	r0, sl
 8014254:	f7ec f97e 	bl	8000554 <__aeabi_i2d>
 8014258:	4632      	mov	r2, r6
 801425a:	463b      	mov	r3, r7
 801425c:	f7ec fc4c 	bl	8000af8 <__aeabi_dcmpeq>
 8014260:	b908      	cbnz	r0, 8014266 <_dtoa_r+0x186>
 8014262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014266:	f1ba 0f16 	cmp.w	sl, #22
 801426a:	d854      	bhi.n	8014316 <_dtoa_r+0x236>
 801426c:	4b61      	ldr	r3, [pc, #388]	; (80143f4 <_dtoa_r+0x314>)
 801426e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014276:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801427a:	f7ec fc47 	bl	8000b0c <__aeabi_dcmplt>
 801427e:	2800      	cmp	r0, #0
 8014280:	d04b      	beq.n	801431a <_dtoa_r+0x23a>
 8014282:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014286:	2300      	movs	r3, #0
 8014288:	930e      	str	r3, [sp, #56]	; 0x38
 801428a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801428c:	1b5d      	subs	r5, r3, r5
 801428e:	1e6b      	subs	r3, r5, #1
 8014290:	9304      	str	r3, [sp, #16]
 8014292:	bf43      	ittte	mi
 8014294:	2300      	movmi	r3, #0
 8014296:	f1c5 0801 	rsbmi	r8, r5, #1
 801429a:	9304      	strmi	r3, [sp, #16]
 801429c:	f04f 0800 	movpl.w	r8, #0
 80142a0:	f1ba 0f00 	cmp.w	sl, #0
 80142a4:	db3b      	blt.n	801431e <_dtoa_r+0x23e>
 80142a6:	9b04      	ldr	r3, [sp, #16]
 80142a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80142ac:	4453      	add	r3, sl
 80142ae:	9304      	str	r3, [sp, #16]
 80142b0:	2300      	movs	r3, #0
 80142b2:	9306      	str	r3, [sp, #24]
 80142b4:	9b05      	ldr	r3, [sp, #20]
 80142b6:	2b09      	cmp	r3, #9
 80142b8:	d869      	bhi.n	801438e <_dtoa_r+0x2ae>
 80142ba:	2b05      	cmp	r3, #5
 80142bc:	bfc4      	itt	gt
 80142be:	3b04      	subgt	r3, #4
 80142c0:	9305      	strgt	r3, [sp, #20]
 80142c2:	9b05      	ldr	r3, [sp, #20]
 80142c4:	f1a3 0302 	sub.w	r3, r3, #2
 80142c8:	bfcc      	ite	gt
 80142ca:	2500      	movgt	r5, #0
 80142cc:	2501      	movle	r5, #1
 80142ce:	2b03      	cmp	r3, #3
 80142d0:	d869      	bhi.n	80143a6 <_dtoa_r+0x2c6>
 80142d2:	e8df f003 	tbb	[pc, r3]
 80142d6:	4e2c      	.short	0x4e2c
 80142d8:	5a4c      	.short	0x5a4c
 80142da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80142de:	441d      	add	r5, r3
 80142e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80142e4:	2b20      	cmp	r3, #32
 80142e6:	bfc1      	itttt	gt
 80142e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80142ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80142f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80142f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80142f8:	bfda      	itte	le
 80142fa:	f1c3 0320 	rsble	r3, r3, #32
 80142fe:	fa06 f003 	lslle.w	r0, r6, r3
 8014302:	4318      	orrgt	r0, r3
 8014304:	f7ec f916 	bl	8000534 <__aeabi_ui2d>
 8014308:	2301      	movs	r3, #1
 801430a:	4606      	mov	r6, r0
 801430c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014310:	3d01      	subs	r5, #1
 8014312:	9310      	str	r3, [sp, #64]	; 0x40
 8014314:	e771      	b.n	80141fa <_dtoa_r+0x11a>
 8014316:	2301      	movs	r3, #1
 8014318:	e7b6      	b.n	8014288 <_dtoa_r+0x1a8>
 801431a:	900e      	str	r0, [sp, #56]	; 0x38
 801431c:	e7b5      	b.n	801428a <_dtoa_r+0x1aa>
 801431e:	f1ca 0300 	rsb	r3, sl, #0
 8014322:	9306      	str	r3, [sp, #24]
 8014324:	2300      	movs	r3, #0
 8014326:	eba8 080a 	sub.w	r8, r8, sl
 801432a:	930d      	str	r3, [sp, #52]	; 0x34
 801432c:	e7c2      	b.n	80142b4 <_dtoa_r+0x1d4>
 801432e:	2300      	movs	r3, #0
 8014330:	9308      	str	r3, [sp, #32]
 8014332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014334:	2b00      	cmp	r3, #0
 8014336:	dc39      	bgt.n	80143ac <_dtoa_r+0x2cc>
 8014338:	f04f 0901 	mov.w	r9, #1
 801433c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014340:	464b      	mov	r3, r9
 8014342:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014346:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014348:	2200      	movs	r2, #0
 801434a:	6042      	str	r2, [r0, #4]
 801434c:	2204      	movs	r2, #4
 801434e:	f102 0614 	add.w	r6, r2, #20
 8014352:	429e      	cmp	r6, r3
 8014354:	6841      	ldr	r1, [r0, #4]
 8014356:	d92f      	bls.n	80143b8 <_dtoa_r+0x2d8>
 8014358:	4620      	mov	r0, r4
 801435a:	f001 f85b 	bl	8015414 <_Balloc>
 801435e:	9000      	str	r0, [sp, #0]
 8014360:	2800      	cmp	r0, #0
 8014362:	d14b      	bne.n	80143fc <_dtoa_r+0x31c>
 8014364:	4b24      	ldr	r3, [pc, #144]	; (80143f8 <_dtoa_r+0x318>)
 8014366:	4602      	mov	r2, r0
 8014368:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801436c:	e6d1      	b.n	8014112 <_dtoa_r+0x32>
 801436e:	2301      	movs	r3, #1
 8014370:	e7de      	b.n	8014330 <_dtoa_r+0x250>
 8014372:	2300      	movs	r3, #0
 8014374:	9308      	str	r3, [sp, #32]
 8014376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014378:	eb0a 0903 	add.w	r9, sl, r3
 801437c:	f109 0301 	add.w	r3, r9, #1
 8014380:	2b01      	cmp	r3, #1
 8014382:	9301      	str	r3, [sp, #4]
 8014384:	bfb8      	it	lt
 8014386:	2301      	movlt	r3, #1
 8014388:	e7dd      	b.n	8014346 <_dtoa_r+0x266>
 801438a:	2301      	movs	r3, #1
 801438c:	e7f2      	b.n	8014374 <_dtoa_r+0x294>
 801438e:	2501      	movs	r5, #1
 8014390:	2300      	movs	r3, #0
 8014392:	9305      	str	r3, [sp, #20]
 8014394:	9508      	str	r5, [sp, #32]
 8014396:	f04f 39ff 	mov.w	r9, #4294967295
 801439a:	2200      	movs	r2, #0
 801439c:	f8cd 9004 	str.w	r9, [sp, #4]
 80143a0:	2312      	movs	r3, #18
 80143a2:	9209      	str	r2, [sp, #36]	; 0x24
 80143a4:	e7cf      	b.n	8014346 <_dtoa_r+0x266>
 80143a6:	2301      	movs	r3, #1
 80143a8:	9308      	str	r3, [sp, #32]
 80143aa:	e7f4      	b.n	8014396 <_dtoa_r+0x2b6>
 80143ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80143b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80143b4:	464b      	mov	r3, r9
 80143b6:	e7c6      	b.n	8014346 <_dtoa_r+0x266>
 80143b8:	3101      	adds	r1, #1
 80143ba:	6041      	str	r1, [r0, #4]
 80143bc:	0052      	lsls	r2, r2, #1
 80143be:	e7c6      	b.n	801434e <_dtoa_r+0x26e>
 80143c0:	636f4361 	.word	0x636f4361
 80143c4:	3fd287a7 	.word	0x3fd287a7
 80143c8:	8b60c8b3 	.word	0x8b60c8b3
 80143cc:	3fc68a28 	.word	0x3fc68a28
 80143d0:	509f79fb 	.word	0x509f79fb
 80143d4:	3fd34413 	.word	0x3fd34413
 80143d8:	0802aa08 	.word	0x0802aa08
 80143dc:	0802abca 	.word	0x0802abca
 80143e0:	7ff00000 	.word	0x7ff00000
 80143e4:	0802abc6 	.word	0x0802abc6
 80143e8:	0802abbd 	.word	0x0802abbd
 80143ec:	0802a98d 	.word	0x0802a98d
 80143f0:	3ff80000 	.word	0x3ff80000
 80143f4:	0802ad40 	.word	0x0802ad40
 80143f8:	0802ac29 	.word	0x0802ac29
 80143fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143fe:	9a00      	ldr	r2, [sp, #0]
 8014400:	601a      	str	r2, [r3, #0]
 8014402:	9b01      	ldr	r3, [sp, #4]
 8014404:	2b0e      	cmp	r3, #14
 8014406:	f200 80ad 	bhi.w	8014564 <_dtoa_r+0x484>
 801440a:	2d00      	cmp	r5, #0
 801440c:	f000 80aa 	beq.w	8014564 <_dtoa_r+0x484>
 8014410:	f1ba 0f00 	cmp.w	sl, #0
 8014414:	dd36      	ble.n	8014484 <_dtoa_r+0x3a4>
 8014416:	4ac3      	ldr	r2, [pc, #780]	; (8014724 <_dtoa_r+0x644>)
 8014418:	f00a 030f 	and.w	r3, sl, #15
 801441c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014420:	ed93 7b00 	vldr	d7, [r3]
 8014424:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014428:	ea4f 172a 	mov.w	r7, sl, asr #4
 801442c:	eeb0 8a47 	vmov.f32	s16, s14
 8014430:	eef0 8a67 	vmov.f32	s17, s15
 8014434:	d016      	beq.n	8014464 <_dtoa_r+0x384>
 8014436:	4bbc      	ldr	r3, [pc, #752]	; (8014728 <_dtoa_r+0x648>)
 8014438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801443c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014440:	f7ec fa1c 	bl	800087c <__aeabi_ddiv>
 8014444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014448:	f007 070f 	and.w	r7, r7, #15
 801444c:	2503      	movs	r5, #3
 801444e:	4eb6      	ldr	r6, [pc, #728]	; (8014728 <_dtoa_r+0x648>)
 8014450:	b957      	cbnz	r7, 8014468 <_dtoa_r+0x388>
 8014452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014456:	ec53 2b18 	vmov	r2, r3, d8
 801445a:	f7ec fa0f 	bl	800087c <__aeabi_ddiv>
 801445e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014462:	e029      	b.n	80144b8 <_dtoa_r+0x3d8>
 8014464:	2502      	movs	r5, #2
 8014466:	e7f2      	b.n	801444e <_dtoa_r+0x36e>
 8014468:	07f9      	lsls	r1, r7, #31
 801446a:	d508      	bpl.n	801447e <_dtoa_r+0x39e>
 801446c:	ec51 0b18 	vmov	r0, r1, d8
 8014470:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014474:	f7ec f8d8 	bl	8000628 <__aeabi_dmul>
 8014478:	ec41 0b18 	vmov	d8, r0, r1
 801447c:	3501      	adds	r5, #1
 801447e:	107f      	asrs	r7, r7, #1
 8014480:	3608      	adds	r6, #8
 8014482:	e7e5      	b.n	8014450 <_dtoa_r+0x370>
 8014484:	f000 80a6 	beq.w	80145d4 <_dtoa_r+0x4f4>
 8014488:	f1ca 0600 	rsb	r6, sl, #0
 801448c:	4ba5      	ldr	r3, [pc, #660]	; (8014724 <_dtoa_r+0x644>)
 801448e:	4fa6      	ldr	r7, [pc, #664]	; (8014728 <_dtoa_r+0x648>)
 8014490:	f006 020f 	and.w	r2, r6, #15
 8014494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801449c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80144a0:	f7ec f8c2 	bl	8000628 <__aeabi_dmul>
 80144a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144a8:	1136      	asrs	r6, r6, #4
 80144aa:	2300      	movs	r3, #0
 80144ac:	2502      	movs	r5, #2
 80144ae:	2e00      	cmp	r6, #0
 80144b0:	f040 8085 	bne.w	80145be <_dtoa_r+0x4de>
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d1d2      	bne.n	801445e <_dtoa_r+0x37e>
 80144b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	f000 808c 	beq.w	80145d8 <_dtoa_r+0x4f8>
 80144c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80144c4:	4b99      	ldr	r3, [pc, #612]	; (801472c <_dtoa_r+0x64c>)
 80144c6:	2200      	movs	r2, #0
 80144c8:	4630      	mov	r0, r6
 80144ca:	4639      	mov	r1, r7
 80144cc:	f7ec fb1e 	bl	8000b0c <__aeabi_dcmplt>
 80144d0:	2800      	cmp	r0, #0
 80144d2:	f000 8081 	beq.w	80145d8 <_dtoa_r+0x4f8>
 80144d6:	9b01      	ldr	r3, [sp, #4]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d07d      	beq.n	80145d8 <_dtoa_r+0x4f8>
 80144dc:	f1b9 0f00 	cmp.w	r9, #0
 80144e0:	dd3c      	ble.n	801455c <_dtoa_r+0x47c>
 80144e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80144e6:	9307      	str	r3, [sp, #28]
 80144e8:	2200      	movs	r2, #0
 80144ea:	4b91      	ldr	r3, [pc, #580]	; (8014730 <_dtoa_r+0x650>)
 80144ec:	4630      	mov	r0, r6
 80144ee:	4639      	mov	r1, r7
 80144f0:	f7ec f89a 	bl	8000628 <__aeabi_dmul>
 80144f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144f8:	3501      	adds	r5, #1
 80144fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80144fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014502:	4628      	mov	r0, r5
 8014504:	f7ec f826 	bl	8000554 <__aeabi_i2d>
 8014508:	4632      	mov	r2, r6
 801450a:	463b      	mov	r3, r7
 801450c:	f7ec f88c 	bl	8000628 <__aeabi_dmul>
 8014510:	4b88      	ldr	r3, [pc, #544]	; (8014734 <_dtoa_r+0x654>)
 8014512:	2200      	movs	r2, #0
 8014514:	f7eb fed2 	bl	80002bc <__adddf3>
 8014518:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801451c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014520:	9303      	str	r3, [sp, #12]
 8014522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014524:	2b00      	cmp	r3, #0
 8014526:	d15c      	bne.n	80145e2 <_dtoa_r+0x502>
 8014528:	4b83      	ldr	r3, [pc, #524]	; (8014738 <_dtoa_r+0x658>)
 801452a:	2200      	movs	r2, #0
 801452c:	4630      	mov	r0, r6
 801452e:	4639      	mov	r1, r7
 8014530:	f7eb fec2 	bl	80002b8 <__aeabi_dsub>
 8014534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014538:	4606      	mov	r6, r0
 801453a:	460f      	mov	r7, r1
 801453c:	f7ec fb04 	bl	8000b48 <__aeabi_dcmpgt>
 8014540:	2800      	cmp	r0, #0
 8014542:	f040 8296 	bne.w	8014a72 <_dtoa_r+0x992>
 8014546:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801454a:	4630      	mov	r0, r6
 801454c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014550:	4639      	mov	r1, r7
 8014552:	f7ec fadb 	bl	8000b0c <__aeabi_dcmplt>
 8014556:	2800      	cmp	r0, #0
 8014558:	f040 8288 	bne.w	8014a6c <_dtoa_r+0x98c>
 801455c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014566:	2b00      	cmp	r3, #0
 8014568:	f2c0 8158 	blt.w	801481c <_dtoa_r+0x73c>
 801456c:	f1ba 0f0e 	cmp.w	sl, #14
 8014570:	f300 8154 	bgt.w	801481c <_dtoa_r+0x73c>
 8014574:	4b6b      	ldr	r3, [pc, #428]	; (8014724 <_dtoa_r+0x644>)
 8014576:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801457a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801457e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014580:	2b00      	cmp	r3, #0
 8014582:	f280 80e3 	bge.w	801474c <_dtoa_r+0x66c>
 8014586:	9b01      	ldr	r3, [sp, #4]
 8014588:	2b00      	cmp	r3, #0
 801458a:	f300 80df 	bgt.w	801474c <_dtoa_r+0x66c>
 801458e:	f040 826d 	bne.w	8014a6c <_dtoa_r+0x98c>
 8014592:	4b69      	ldr	r3, [pc, #420]	; (8014738 <_dtoa_r+0x658>)
 8014594:	2200      	movs	r2, #0
 8014596:	4640      	mov	r0, r8
 8014598:	4649      	mov	r1, r9
 801459a:	f7ec f845 	bl	8000628 <__aeabi_dmul>
 801459e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80145a2:	f7ec fac7 	bl	8000b34 <__aeabi_dcmpge>
 80145a6:	9e01      	ldr	r6, [sp, #4]
 80145a8:	4637      	mov	r7, r6
 80145aa:	2800      	cmp	r0, #0
 80145ac:	f040 8243 	bne.w	8014a36 <_dtoa_r+0x956>
 80145b0:	9d00      	ldr	r5, [sp, #0]
 80145b2:	2331      	movs	r3, #49	; 0x31
 80145b4:	f805 3b01 	strb.w	r3, [r5], #1
 80145b8:	f10a 0a01 	add.w	sl, sl, #1
 80145bc:	e23f      	b.n	8014a3e <_dtoa_r+0x95e>
 80145be:	07f2      	lsls	r2, r6, #31
 80145c0:	d505      	bpl.n	80145ce <_dtoa_r+0x4ee>
 80145c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80145c6:	f7ec f82f 	bl	8000628 <__aeabi_dmul>
 80145ca:	3501      	adds	r5, #1
 80145cc:	2301      	movs	r3, #1
 80145ce:	1076      	asrs	r6, r6, #1
 80145d0:	3708      	adds	r7, #8
 80145d2:	e76c      	b.n	80144ae <_dtoa_r+0x3ce>
 80145d4:	2502      	movs	r5, #2
 80145d6:	e76f      	b.n	80144b8 <_dtoa_r+0x3d8>
 80145d8:	9b01      	ldr	r3, [sp, #4]
 80145da:	f8cd a01c 	str.w	sl, [sp, #28]
 80145de:	930c      	str	r3, [sp, #48]	; 0x30
 80145e0:	e78d      	b.n	80144fe <_dtoa_r+0x41e>
 80145e2:	9900      	ldr	r1, [sp, #0]
 80145e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80145e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145e8:	4b4e      	ldr	r3, [pc, #312]	; (8014724 <_dtoa_r+0x644>)
 80145ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80145ee:	4401      	add	r1, r0
 80145f0:	9102      	str	r1, [sp, #8]
 80145f2:	9908      	ldr	r1, [sp, #32]
 80145f4:	eeb0 8a47 	vmov.f32	s16, s14
 80145f8:	eef0 8a67 	vmov.f32	s17, s15
 80145fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014600:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014604:	2900      	cmp	r1, #0
 8014606:	d045      	beq.n	8014694 <_dtoa_r+0x5b4>
 8014608:	494c      	ldr	r1, [pc, #304]	; (801473c <_dtoa_r+0x65c>)
 801460a:	2000      	movs	r0, #0
 801460c:	f7ec f936 	bl	800087c <__aeabi_ddiv>
 8014610:	ec53 2b18 	vmov	r2, r3, d8
 8014614:	f7eb fe50 	bl	80002b8 <__aeabi_dsub>
 8014618:	9d00      	ldr	r5, [sp, #0]
 801461a:	ec41 0b18 	vmov	d8, r0, r1
 801461e:	4639      	mov	r1, r7
 8014620:	4630      	mov	r0, r6
 8014622:	f7ec fab1 	bl	8000b88 <__aeabi_d2iz>
 8014626:	900c      	str	r0, [sp, #48]	; 0x30
 8014628:	f7eb ff94 	bl	8000554 <__aeabi_i2d>
 801462c:	4602      	mov	r2, r0
 801462e:	460b      	mov	r3, r1
 8014630:	4630      	mov	r0, r6
 8014632:	4639      	mov	r1, r7
 8014634:	f7eb fe40 	bl	80002b8 <__aeabi_dsub>
 8014638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801463a:	3330      	adds	r3, #48	; 0x30
 801463c:	f805 3b01 	strb.w	r3, [r5], #1
 8014640:	ec53 2b18 	vmov	r2, r3, d8
 8014644:	4606      	mov	r6, r0
 8014646:	460f      	mov	r7, r1
 8014648:	f7ec fa60 	bl	8000b0c <__aeabi_dcmplt>
 801464c:	2800      	cmp	r0, #0
 801464e:	d165      	bne.n	801471c <_dtoa_r+0x63c>
 8014650:	4632      	mov	r2, r6
 8014652:	463b      	mov	r3, r7
 8014654:	4935      	ldr	r1, [pc, #212]	; (801472c <_dtoa_r+0x64c>)
 8014656:	2000      	movs	r0, #0
 8014658:	f7eb fe2e 	bl	80002b8 <__aeabi_dsub>
 801465c:	ec53 2b18 	vmov	r2, r3, d8
 8014660:	f7ec fa54 	bl	8000b0c <__aeabi_dcmplt>
 8014664:	2800      	cmp	r0, #0
 8014666:	f040 80b9 	bne.w	80147dc <_dtoa_r+0x6fc>
 801466a:	9b02      	ldr	r3, [sp, #8]
 801466c:	429d      	cmp	r5, r3
 801466e:	f43f af75 	beq.w	801455c <_dtoa_r+0x47c>
 8014672:	4b2f      	ldr	r3, [pc, #188]	; (8014730 <_dtoa_r+0x650>)
 8014674:	ec51 0b18 	vmov	r0, r1, d8
 8014678:	2200      	movs	r2, #0
 801467a:	f7eb ffd5 	bl	8000628 <__aeabi_dmul>
 801467e:	4b2c      	ldr	r3, [pc, #176]	; (8014730 <_dtoa_r+0x650>)
 8014680:	ec41 0b18 	vmov	d8, r0, r1
 8014684:	2200      	movs	r2, #0
 8014686:	4630      	mov	r0, r6
 8014688:	4639      	mov	r1, r7
 801468a:	f7eb ffcd 	bl	8000628 <__aeabi_dmul>
 801468e:	4606      	mov	r6, r0
 8014690:	460f      	mov	r7, r1
 8014692:	e7c4      	b.n	801461e <_dtoa_r+0x53e>
 8014694:	ec51 0b17 	vmov	r0, r1, d7
 8014698:	f7eb ffc6 	bl	8000628 <__aeabi_dmul>
 801469c:	9b02      	ldr	r3, [sp, #8]
 801469e:	9d00      	ldr	r5, [sp, #0]
 80146a0:	930c      	str	r3, [sp, #48]	; 0x30
 80146a2:	ec41 0b18 	vmov	d8, r0, r1
 80146a6:	4639      	mov	r1, r7
 80146a8:	4630      	mov	r0, r6
 80146aa:	f7ec fa6d 	bl	8000b88 <__aeabi_d2iz>
 80146ae:	9011      	str	r0, [sp, #68]	; 0x44
 80146b0:	f7eb ff50 	bl	8000554 <__aeabi_i2d>
 80146b4:	4602      	mov	r2, r0
 80146b6:	460b      	mov	r3, r1
 80146b8:	4630      	mov	r0, r6
 80146ba:	4639      	mov	r1, r7
 80146bc:	f7eb fdfc 	bl	80002b8 <__aeabi_dsub>
 80146c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146c2:	3330      	adds	r3, #48	; 0x30
 80146c4:	f805 3b01 	strb.w	r3, [r5], #1
 80146c8:	9b02      	ldr	r3, [sp, #8]
 80146ca:	429d      	cmp	r5, r3
 80146cc:	4606      	mov	r6, r0
 80146ce:	460f      	mov	r7, r1
 80146d0:	f04f 0200 	mov.w	r2, #0
 80146d4:	d134      	bne.n	8014740 <_dtoa_r+0x660>
 80146d6:	4b19      	ldr	r3, [pc, #100]	; (801473c <_dtoa_r+0x65c>)
 80146d8:	ec51 0b18 	vmov	r0, r1, d8
 80146dc:	f7eb fdee 	bl	80002bc <__adddf3>
 80146e0:	4602      	mov	r2, r0
 80146e2:	460b      	mov	r3, r1
 80146e4:	4630      	mov	r0, r6
 80146e6:	4639      	mov	r1, r7
 80146e8:	f7ec fa2e 	bl	8000b48 <__aeabi_dcmpgt>
 80146ec:	2800      	cmp	r0, #0
 80146ee:	d175      	bne.n	80147dc <_dtoa_r+0x6fc>
 80146f0:	ec53 2b18 	vmov	r2, r3, d8
 80146f4:	4911      	ldr	r1, [pc, #68]	; (801473c <_dtoa_r+0x65c>)
 80146f6:	2000      	movs	r0, #0
 80146f8:	f7eb fdde 	bl	80002b8 <__aeabi_dsub>
 80146fc:	4602      	mov	r2, r0
 80146fe:	460b      	mov	r3, r1
 8014700:	4630      	mov	r0, r6
 8014702:	4639      	mov	r1, r7
 8014704:	f7ec fa02 	bl	8000b0c <__aeabi_dcmplt>
 8014708:	2800      	cmp	r0, #0
 801470a:	f43f af27 	beq.w	801455c <_dtoa_r+0x47c>
 801470e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014710:	1e6b      	subs	r3, r5, #1
 8014712:	930c      	str	r3, [sp, #48]	; 0x30
 8014714:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014718:	2b30      	cmp	r3, #48	; 0x30
 801471a:	d0f8      	beq.n	801470e <_dtoa_r+0x62e>
 801471c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014720:	e04a      	b.n	80147b8 <_dtoa_r+0x6d8>
 8014722:	bf00      	nop
 8014724:	0802ad40 	.word	0x0802ad40
 8014728:	0802ad18 	.word	0x0802ad18
 801472c:	3ff00000 	.word	0x3ff00000
 8014730:	40240000 	.word	0x40240000
 8014734:	401c0000 	.word	0x401c0000
 8014738:	40140000 	.word	0x40140000
 801473c:	3fe00000 	.word	0x3fe00000
 8014740:	4baf      	ldr	r3, [pc, #700]	; (8014a00 <_dtoa_r+0x920>)
 8014742:	f7eb ff71 	bl	8000628 <__aeabi_dmul>
 8014746:	4606      	mov	r6, r0
 8014748:	460f      	mov	r7, r1
 801474a:	e7ac      	b.n	80146a6 <_dtoa_r+0x5c6>
 801474c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014750:	9d00      	ldr	r5, [sp, #0]
 8014752:	4642      	mov	r2, r8
 8014754:	464b      	mov	r3, r9
 8014756:	4630      	mov	r0, r6
 8014758:	4639      	mov	r1, r7
 801475a:	f7ec f88f 	bl	800087c <__aeabi_ddiv>
 801475e:	f7ec fa13 	bl	8000b88 <__aeabi_d2iz>
 8014762:	9002      	str	r0, [sp, #8]
 8014764:	f7eb fef6 	bl	8000554 <__aeabi_i2d>
 8014768:	4642      	mov	r2, r8
 801476a:	464b      	mov	r3, r9
 801476c:	f7eb ff5c 	bl	8000628 <__aeabi_dmul>
 8014770:	4602      	mov	r2, r0
 8014772:	460b      	mov	r3, r1
 8014774:	4630      	mov	r0, r6
 8014776:	4639      	mov	r1, r7
 8014778:	f7eb fd9e 	bl	80002b8 <__aeabi_dsub>
 801477c:	9e02      	ldr	r6, [sp, #8]
 801477e:	9f01      	ldr	r7, [sp, #4]
 8014780:	3630      	adds	r6, #48	; 0x30
 8014782:	f805 6b01 	strb.w	r6, [r5], #1
 8014786:	9e00      	ldr	r6, [sp, #0]
 8014788:	1bae      	subs	r6, r5, r6
 801478a:	42b7      	cmp	r7, r6
 801478c:	4602      	mov	r2, r0
 801478e:	460b      	mov	r3, r1
 8014790:	d137      	bne.n	8014802 <_dtoa_r+0x722>
 8014792:	f7eb fd93 	bl	80002bc <__adddf3>
 8014796:	4642      	mov	r2, r8
 8014798:	464b      	mov	r3, r9
 801479a:	4606      	mov	r6, r0
 801479c:	460f      	mov	r7, r1
 801479e:	f7ec f9d3 	bl	8000b48 <__aeabi_dcmpgt>
 80147a2:	b9c8      	cbnz	r0, 80147d8 <_dtoa_r+0x6f8>
 80147a4:	4642      	mov	r2, r8
 80147a6:	464b      	mov	r3, r9
 80147a8:	4630      	mov	r0, r6
 80147aa:	4639      	mov	r1, r7
 80147ac:	f7ec f9a4 	bl	8000af8 <__aeabi_dcmpeq>
 80147b0:	b110      	cbz	r0, 80147b8 <_dtoa_r+0x6d8>
 80147b2:	9b02      	ldr	r3, [sp, #8]
 80147b4:	07d9      	lsls	r1, r3, #31
 80147b6:	d40f      	bmi.n	80147d8 <_dtoa_r+0x6f8>
 80147b8:	4620      	mov	r0, r4
 80147ba:	4659      	mov	r1, fp
 80147bc:	f000 fe6a 	bl	8015494 <_Bfree>
 80147c0:	2300      	movs	r3, #0
 80147c2:	702b      	strb	r3, [r5, #0]
 80147c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147c6:	f10a 0001 	add.w	r0, sl, #1
 80147ca:	6018      	str	r0, [r3, #0]
 80147cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	f43f acd8 	beq.w	8014184 <_dtoa_r+0xa4>
 80147d4:	601d      	str	r5, [r3, #0]
 80147d6:	e4d5      	b.n	8014184 <_dtoa_r+0xa4>
 80147d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80147dc:	462b      	mov	r3, r5
 80147de:	461d      	mov	r5, r3
 80147e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80147e4:	2a39      	cmp	r2, #57	; 0x39
 80147e6:	d108      	bne.n	80147fa <_dtoa_r+0x71a>
 80147e8:	9a00      	ldr	r2, [sp, #0]
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d1f7      	bne.n	80147de <_dtoa_r+0x6fe>
 80147ee:	9a07      	ldr	r2, [sp, #28]
 80147f0:	9900      	ldr	r1, [sp, #0]
 80147f2:	3201      	adds	r2, #1
 80147f4:	9207      	str	r2, [sp, #28]
 80147f6:	2230      	movs	r2, #48	; 0x30
 80147f8:	700a      	strb	r2, [r1, #0]
 80147fa:	781a      	ldrb	r2, [r3, #0]
 80147fc:	3201      	adds	r2, #1
 80147fe:	701a      	strb	r2, [r3, #0]
 8014800:	e78c      	b.n	801471c <_dtoa_r+0x63c>
 8014802:	4b7f      	ldr	r3, [pc, #508]	; (8014a00 <_dtoa_r+0x920>)
 8014804:	2200      	movs	r2, #0
 8014806:	f7eb ff0f 	bl	8000628 <__aeabi_dmul>
 801480a:	2200      	movs	r2, #0
 801480c:	2300      	movs	r3, #0
 801480e:	4606      	mov	r6, r0
 8014810:	460f      	mov	r7, r1
 8014812:	f7ec f971 	bl	8000af8 <__aeabi_dcmpeq>
 8014816:	2800      	cmp	r0, #0
 8014818:	d09b      	beq.n	8014752 <_dtoa_r+0x672>
 801481a:	e7cd      	b.n	80147b8 <_dtoa_r+0x6d8>
 801481c:	9a08      	ldr	r2, [sp, #32]
 801481e:	2a00      	cmp	r2, #0
 8014820:	f000 80c4 	beq.w	80149ac <_dtoa_r+0x8cc>
 8014824:	9a05      	ldr	r2, [sp, #20]
 8014826:	2a01      	cmp	r2, #1
 8014828:	f300 80a8 	bgt.w	801497c <_dtoa_r+0x89c>
 801482c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801482e:	2a00      	cmp	r2, #0
 8014830:	f000 80a0 	beq.w	8014974 <_dtoa_r+0x894>
 8014834:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014838:	9e06      	ldr	r6, [sp, #24]
 801483a:	4645      	mov	r5, r8
 801483c:	9a04      	ldr	r2, [sp, #16]
 801483e:	2101      	movs	r1, #1
 8014840:	441a      	add	r2, r3
 8014842:	4620      	mov	r0, r4
 8014844:	4498      	add	r8, r3
 8014846:	9204      	str	r2, [sp, #16]
 8014848:	f000 ff2a 	bl	80156a0 <__i2b>
 801484c:	4607      	mov	r7, r0
 801484e:	2d00      	cmp	r5, #0
 8014850:	dd0b      	ble.n	801486a <_dtoa_r+0x78a>
 8014852:	9b04      	ldr	r3, [sp, #16]
 8014854:	2b00      	cmp	r3, #0
 8014856:	dd08      	ble.n	801486a <_dtoa_r+0x78a>
 8014858:	42ab      	cmp	r3, r5
 801485a:	9a04      	ldr	r2, [sp, #16]
 801485c:	bfa8      	it	ge
 801485e:	462b      	movge	r3, r5
 8014860:	eba8 0803 	sub.w	r8, r8, r3
 8014864:	1aed      	subs	r5, r5, r3
 8014866:	1ad3      	subs	r3, r2, r3
 8014868:	9304      	str	r3, [sp, #16]
 801486a:	9b06      	ldr	r3, [sp, #24]
 801486c:	b1fb      	cbz	r3, 80148ae <_dtoa_r+0x7ce>
 801486e:	9b08      	ldr	r3, [sp, #32]
 8014870:	2b00      	cmp	r3, #0
 8014872:	f000 809f 	beq.w	80149b4 <_dtoa_r+0x8d4>
 8014876:	2e00      	cmp	r6, #0
 8014878:	dd11      	ble.n	801489e <_dtoa_r+0x7be>
 801487a:	4639      	mov	r1, r7
 801487c:	4632      	mov	r2, r6
 801487e:	4620      	mov	r0, r4
 8014880:	f000 ffca 	bl	8015818 <__pow5mult>
 8014884:	465a      	mov	r2, fp
 8014886:	4601      	mov	r1, r0
 8014888:	4607      	mov	r7, r0
 801488a:	4620      	mov	r0, r4
 801488c:	f000 ff1e 	bl	80156cc <__multiply>
 8014890:	4659      	mov	r1, fp
 8014892:	9007      	str	r0, [sp, #28]
 8014894:	4620      	mov	r0, r4
 8014896:	f000 fdfd 	bl	8015494 <_Bfree>
 801489a:	9b07      	ldr	r3, [sp, #28]
 801489c:	469b      	mov	fp, r3
 801489e:	9b06      	ldr	r3, [sp, #24]
 80148a0:	1b9a      	subs	r2, r3, r6
 80148a2:	d004      	beq.n	80148ae <_dtoa_r+0x7ce>
 80148a4:	4659      	mov	r1, fp
 80148a6:	4620      	mov	r0, r4
 80148a8:	f000 ffb6 	bl	8015818 <__pow5mult>
 80148ac:	4683      	mov	fp, r0
 80148ae:	2101      	movs	r1, #1
 80148b0:	4620      	mov	r0, r4
 80148b2:	f000 fef5 	bl	80156a0 <__i2b>
 80148b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	4606      	mov	r6, r0
 80148bc:	dd7c      	ble.n	80149b8 <_dtoa_r+0x8d8>
 80148be:	461a      	mov	r2, r3
 80148c0:	4601      	mov	r1, r0
 80148c2:	4620      	mov	r0, r4
 80148c4:	f000 ffa8 	bl	8015818 <__pow5mult>
 80148c8:	9b05      	ldr	r3, [sp, #20]
 80148ca:	2b01      	cmp	r3, #1
 80148cc:	4606      	mov	r6, r0
 80148ce:	dd76      	ble.n	80149be <_dtoa_r+0x8de>
 80148d0:	2300      	movs	r3, #0
 80148d2:	9306      	str	r3, [sp, #24]
 80148d4:	6933      	ldr	r3, [r6, #16]
 80148d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80148da:	6918      	ldr	r0, [r3, #16]
 80148dc:	f000 fe90 	bl	8015600 <__hi0bits>
 80148e0:	f1c0 0020 	rsb	r0, r0, #32
 80148e4:	9b04      	ldr	r3, [sp, #16]
 80148e6:	4418      	add	r0, r3
 80148e8:	f010 001f 	ands.w	r0, r0, #31
 80148ec:	f000 8086 	beq.w	80149fc <_dtoa_r+0x91c>
 80148f0:	f1c0 0320 	rsb	r3, r0, #32
 80148f4:	2b04      	cmp	r3, #4
 80148f6:	dd7f      	ble.n	80149f8 <_dtoa_r+0x918>
 80148f8:	f1c0 001c 	rsb	r0, r0, #28
 80148fc:	9b04      	ldr	r3, [sp, #16]
 80148fe:	4403      	add	r3, r0
 8014900:	4480      	add	r8, r0
 8014902:	4405      	add	r5, r0
 8014904:	9304      	str	r3, [sp, #16]
 8014906:	f1b8 0f00 	cmp.w	r8, #0
 801490a:	dd05      	ble.n	8014918 <_dtoa_r+0x838>
 801490c:	4659      	mov	r1, fp
 801490e:	4642      	mov	r2, r8
 8014910:	4620      	mov	r0, r4
 8014912:	f000 ffdb 	bl	80158cc <__lshift>
 8014916:	4683      	mov	fp, r0
 8014918:	9b04      	ldr	r3, [sp, #16]
 801491a:	2b00      	cmp	r3, #0
 801491c:	dd05      	ble.n	801492a <_dtoa_r+0x84a>
 801491e:	4631      	mov	r1, r6
 8014920:	461a      	mov	r2, r3
 8014922:	4620      	mov	r0, r4
 8014924:	f000 ffd2 	bl	80158cc <__lshift>
 8014928:	4606      	mov	r6, r0
 801492a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801492c:	2b00      	cmp	r3, #0
 801492e:	d069      	beq.n	8014a04 <_dtoa_r+0x924>
 8014930:	4631      	mov	r1, r6
 8014932:	4658      	mov	r0, fp
 8014934:	f001 f836 	bl	80159a4 <__mcmp>
 8014938:	2800      	cmp	r0, #0
 801493a:	da63      	bge.n	8014a04 <_dtoa_r+0x924>
 801493c:	2300      	movs	r3, #0
 801493e:	4659      	mov	r1, fp
 8014940:	220a      	movs	r2, #10
 8014942:	4620      	mov	r0, r4
 8014944:	f000 fdc8 	bl	80154d8 <__multadd>
 8014948:	9b08      	ldr	r3, [sp, #32]
 801494a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801494e:	4683      	mov	fp, r0
 8014950:	2b00      	cmp	r3, #0
 8014952:	f000 818f 	beq.w	8014c74 <_dtoa_r+0xb94>
 8014956:	4639      	mov	r1, r7
 8014958:	2300      	movs	r3, #0
 801495a:	220a      	movs	r2, #10
 801495c:	4620      	mov	r0, r4
 801495e:	f000 fdbb 	bl	80154d8 <__multadd>
 8014962:	f1b9 0f00 	cmp.w	r9, #0
 8014966:	4607      	mov	r7, r0
 8014968:	f300 808e 	bgt.w	8014a88 <_dtoa_r+0x9a8>
 801496c:	9b05      	ldr	r3, [sp, #20]
 801496e:	2b02      	cmp	r3, #2
 8014970:	dc50      	bgt.n	8014a14 <_dtoa_r+0x934>
 8014972:	e089      	b.n	8014a88 <_dtoa_r+0x9a8>
 8014974:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801497a:	e75d      	b.n	8014838 <_dtoa_r+0x758>
 801497c:	9b01      	ldr	r3, [sp, #4]
 801497e:	1e5e      	subs	r6, r3, #1
 8014980:	9b06      	ldr	r3, [sp, #24]
 8014982:	42b3      	cmp	r3, r6
 8014984:	bfbf      	itttt	lt
 8014986:	9b06      	ldrlt	r3, [sp, #24]
 8014988:	9606      	strlt	r6, [sp, #24]
 801498a:	1af2      	sublt	r2, r6, r3
 801498c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801498e:	bfb6      	itet	lt
 8014990:	189b      	addlt	r3, r3, r2
 8014992:	1b9e      	subge	r6, r3, r6
 8014994:	930d      	strlt	r3, [sp, #52]	; 0x34
 8014996:	9b01      	ldr	r3, [sp, #4]
 8014998:	bfb8      	it	lt
 801499a:	2600      	movlt	r6, #0
 801499c:	2b00      	cmp	r3, #0
 801499e:	bfb5      	itete	lt
 80149a0:	eba8 0503 	sublt.w	r5, r8, r3
 80149a4:	9b01      	ldrge	r3, [sp, #4]
 80149a6:	2300      	movlt	r3, #0
 80149a8:	4645      	movge	r5, r8
 80149aa:	e747      	b.n	801483c <_dtoa_r+0x75c>
 80149ac:	9e06      	ldr	r6, [sp, #24]
 80149ae:	9f08      	ldr	r7, [sp, #32]
 80149b0:	4645      	mov	r5, r8
 80149b2:	e74c      	b.n	801484e <_dtoa_r+0x76e>
 80149b4:	9a06      	ldr	r2, [sp, #24]
 80149b6:	e775      	b.n	80148a4 <_dtoa_r+0x7c4>
 80149b8:	9b05      	ldr	r3, [sp, #20]
 80149ba:	2b01      	cmp	r3, #1
 80149bc:	dc18      	bgt.n	80149f0 <_dtoa_r+0x910>
 80149be:	9b02      	ldr	r3, [sp, #8]
 80149c0:	b9b3      	cbnz	r3, 80149f0 <_dtoa_r+0x910>
 80149c2:	9b03      	ldr	r3, [sp, #12]
 80149c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80149c8:	b9a3      	cbnz	r3, 80149f4 <_dtoa_r+0x914>
 80149ca:	9b03      	ldr	r3, [sp, #12]
 80149cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80149d0:	0d1b      	lsrs	r3, r3, #20
 80149d2:	051b      	lsls	r3, r3, #20
 80149d4:	b12b      	cbz	r3, 80149e2 <_dtoa_r+0x902>
 80149d6:	9b04      	ldr	r3, [sp, #16]
 80149d8:	3301      	adds	r3, #1
 80149da:	9304      	str	r3, [sp, #16]
 80149dc:	f108 0801 	add.w	r8, r8, #1
 80149e0:	2301      	movs	r3, #1
 80149e2:	9306      	str	r3, [sp, #24]
 80149e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	f47f af74 	bne.w	80148d4 <_dtoa_r+0x7f4>
 80149ec:	2001      	movs	r0, #1
 80149ee:	e779      	b.n	80148e4 <_dtoa_r+0x804>
 80149f0:	2300      	movs	r3, #0
 80149f2:	e7f6      	b.n	80149e2 <_dtoa_r+0x902>
 80149f4:	9b02      	ldr	r3, [sp, #8]
 80149f6:	e7f4      	b.n	80149e2 <_dtoa_r+0x902>
 80149f8:	d085      	beq.n	8014906 <_dtoa_r+0x826>
 80149fa:	4618      	mov	r0, r3
 80149fc:	301c      	adds	r0, #28
 80149fe:	e77d      	b.n	80148fc <_dtoa_r+0x81c>
 8014a00:	40240000 	.word	0x40240000
 8014a04:	9b01      	ldr	r3, [sp, #4]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	dc38      	bgt.n	8014a7c <_dtoa_r+0x99c>
 8014a0a:	9b05      	ldr	r3, [sp, #20]
 8014a0c:	2b02      	cmp	r3, #2
 8014a0e:	dd35      	ble.n	8014a7c <_dtoa_r+0x99c>
 8014a10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014a14:	f1b9 0f00 	cmp.w	r9, #0
 8014a18:	d10d      	bne.n	8014a36 <_dtoa_r+0x956>
 8014a1a:	4631      	mov	r1, r6
 8014a1c:	464b      	mov	r3, r9
 8014a1e:	2205      	movs	r2, #5
 8014a20:	4620      	mov	r0, r4
 8014a22:	f000 fd59 	bl	80154d8 <__multadd>
 8014a26:	4601      	mov	r1, r0
 8014a28:	4606      	mov	r6, r0
 8014a2a:	4658      	mov	r0, fp
 8014a2c:	f000 ffba 	bl	80159a4 <__mcmp>
 8014a30:	2800      	cmp	r0, #0
 8014a32:	f73f adbd 	bgt.w	80145b0 <_dtoa_r+0x4d0>
 8014a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a38:	9d00      	ldr	r5, [sp, #0]
 8014a3a:	ea6f 0a03 	mvn.w	sl, r3
 8014a3e:	f04f 0800 	mov.w	r8, #0
 8014a42:	4631      	mov	r1, r6
 8014a44:	4620      	mov	r0, r4
 8014a46:	f000 fd25 	bl	8015494 <_Bfree>
 8014a4a:	2f00      	cmp	r7, #0
 8014a4c:	f43f aeb4 	beq.w	80147b8 <_dtoa_r+0x6d8>
 8014a50:	f1b8 0f00 	cmp.w	r8, #0
 8014a54:	d005      	beq.n	8014a62 <_dtoa_r+0x982>
 8014a56:	45b8      	cmp	r8, r7
 8014a58:	d003      	beq.n	8014a62 <_dtoa_r+0x982>
 8014a5a:	4641      	mov	r1, r8
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	f000 fd19 	bl	8015494 <_Bfree>
 8014a62:	4639      	mov	r1, r7
 8014a64:	4620      	mov	r0, r4
 8014a66:	f000 fd15 	bl	8015494 <_Bfree>
 8014a6a:	e6a5      	b.n	80147b8 <_dtoa_r+0x6d8>
 8014a6c:	2600      	movs	r6, #0
 8014a6e:	4637      	mov	r7, r6
 8014a70:	e7e1      	b.n	8014a36 <_dtoa_r+0x956>
 8014a72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014a74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014a78:	4637      	mov	r7, r6
 8014a7a:	e599      	b.n	80145b0 <_dtoa_r+0x4d0>
 8014a7c:	9b08      	ldr	r3, [sp, #32]
 8014a7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	f000 80fd 	beq.w	8014c82 <_dtoa_r+0xba2>
 8014a88:	2d00      	cmp	r5, #0
 8014a8a:	dd05      	ble.n	8014a98 <_dtoa_r+0x9b8>
 8014a8c:	4639      	mov	r1, r7
 8014a8e:	462a      	mov	r2, r5
 8014a90:	4620      	mov	r0, r4
 8014a92:	f000 ff1b 	bl	80158cc <__lshift>
 8014a96:	4607      	mov	r7, r0
 8014a98:	9b06      	ldr	r3, [sp, #24]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d05c      	beq.n	8014b58 <_dtoa_r+0xa78>
 8014a9e:	6879      	ldr	r1, [r7, #4]
 8014aa0:	4620      	mov	r0, r4
 8014aa2:	f000 fcb7 	bl	8015414 <_Balloc>
 8014aa6:	4605      	mov	r5, r0
 8014aa8:	b928      	cbnz	r0, 8014ab6 <_dtoa_r+0x9d6>
 8014aaa:	4b80      	ldr	r3, [pc, #512]	; (8014cac <_dtoa_r+0xbcc>)
 8014aac:	4602      	mov	r2, r0
 8014aae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014ab2:	f7ff bb2e 	b.w	8014112 <_dtoa_r+0x32>
 8014ab6:	693a      	ldr	r2, [r7, #16]
 8014ab8:	3202      	adds	r2, #2
 8014aba:	0092      	lsls	r2, r2, #2
 8014abc:	f107 010c 	add.w	r1, r7, #12
 8014ac0:	300c      	adds	r0, #12
 8014ac2:	f000 fc99 	bl	80153f8 <memcpy>
 8014ac6:	2201      	movs	r2, #1
 8014ac8:	4629      	mov	r1, r5
 8014aca:	4620      	mov	r0, r4
 8014acc:	f000 fefe 	bl	80158cc <__lshift>
 8014ad0:	9b00      	ldr	r3, [sp, #0]
 8014ad2:	3301      	adds	r3, #1
 8014ad4:	9301      	str	r3, [sp, #4]
 8014ad6:	9b00      	ldr	r3, [sp, #0]
 8014ad8:	444b      	add	r3, r9
 8014ada:	9307      	str	r3, [sp, #28]
 8014adc:	9b02      	ldr	r3, [sp, #8]
 8014ade:	f003 0301 	and.w	r3, r3, #1
 8014ae2:	46b8      	mov	r8, r7
 8014ae4:	9306      	str	r3, [sp, #24]
 8014ae6:	4607      	mov	r7, r0
 8014ae8:	9b01      	ldr	r3, [sp, #4]
 8014aea:	4631      	mov	r1, r6
 8014aec:	3b01      	subs	r3, #1
 8014aee:	4658      	mov	r0, fp
 8014af0:	9302      	str	r3, [sp, #8]
 8014af2:	f7ff fa67 	bl	8013fc4 <quorem>
 8014af6:	4603      	mov	r3, r0
 8014af8:	3330      	adds	r3, #48	; 0x30
 8014afa:	9004      	str	r0, [sp, #16]
 8014afc:	4641      	mov	r1, r8
 8014afe:	4658      	mov	r0, fp
 8014b00:	9308      	str	r3, [sp, #32]
 8014b02:	f000 ff4f 	bl	80159a4 <__mcmp>
 8014b06:	463a      	mov	r2, r7
 8014b08:	4681      	mov	r9, r0
 8014b0a:	4631      	mov	r1, r6
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	f000 ff65 	bl	80159dc <__mdiff>
 8014b12:	68c2      	ldr	r2, [r0, #12]
 8014b14:	9b08      	ldr	r3, [sp, #32]
 8014b16:	4605      	mov	r5, r0
 8014b18:	bb02      	cbnz	r2, 8014b5c <_dtoa_r+0xa7c>
 8014b1a:	4601      	mov	r1, r0
 8014b1c:	4658      	mov	r0, fp
 8014b1e:	f000 ff41 	bl	80159a4 <__mcmp>
 8014b22:	9b08      	ldr	r3, [sp, #32]
 8014b24:	4602      	mov	r2, r0
 8014b26:	4629      	mov	r1, r5
 8014b28:	4620      	mov	r0, r4
 8014b2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014b2e:	f000 fcb1 	bl	8015494 <_Bfree>
 8014b32:	9b05      	ldr	r3, [sp, #20]
 8014b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b36:	9d01      	ldr	r5, [sp, #4]
 8014b38:	ea43 0102 	orr.w	r1, r3, r2
 8014b3c:	9b06      	ldr	r3, [sp, #24]
 8014b3e:	430b      	orrs	r3, r1
 8014b40:	9b08      	ldr	r3, [sp, #32]
 8014b42:	d10d      	bne.n	8014b60 <_dtoa_r+0xa80>
 8014b44:	2b39      	cmp	r3, #57	; 0x39
 8014b46:	d029      	beq.n	8014b9c <_dtoa_r+0xabc>
 8014b48:	f1b9 0f00 	cmp.w	r9, #0
 8014b4c:	dd01      	ble.n	8014b52 <_dtoa_r+0xa72>
 8014b4e:	9b04      	ldr	r3, [sp, #16]
 8014b50:	3331      	adds	r3, #49	; 0x31
 8014b52:	9a02      	ldr	r2, [sp, #8]
 8014b54:	7013      	strb	r3, [r2, #0]
 8014b56:	e774      	b.n	8014a42 <_dtoa_r+0x962>
 8014b58:	4638      	mov	r0, r7
 8014b5a:	e7b9      	b.n	8014ad0 <_dtoa_r+0x9f0>
 8014b5c:	2201      	movs	r2, #1
 8014b5e:	e7e2      	b.n	8014b26 <_dtoa_r+0xa46>
 8014b60:	f1b9 0f00 	cmp.w	r9, #0
 8014b64:	db06      	blt.n	8014b74 <_dtoa_r+0xa94>
 8014b66:	9905      	ldr	r1, [sp, #20]
 8014b68:	ea41 0909 	orr.w	r9, r1, r9
 8014b6c:	9906      	ldr	r1, [sp, #24]
 8014b6e:	ea59 0101 	orrs.w	r1, r9, r1
 8014b72:	d120      	bne.n	8014bb6 <_dtoa_r+0xad6>
 8014b74:	2a00      	cmp	r2, #0
 8014b76:	ddec      	ble.n	8014b52 <_dtoa_r+0xa72>
 8014b78:	4659      	mov	r1, fp
 8014b7a:	2201      	movs	r2, #1
 8014b7c:	4620      	mov	r0, r4
 8014b7e:	9301      	str	r3, [sp, #4]
 8014b80:	f000 fea4 	bl	80158cc <__lshift>
 8014b84:	4631      	mov	r1, r6
 8014b86:	4683      	mov	fp, r0
 8014b88:	f000 ff0c 	bl	80159a4 <__mcmp>
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	9b01      	ldr	r3, [sp, #4]
 8014b90:	dc02      	bgt.n	8014b98 <_dtoa_r+0xab8>
 8014b92:	d1de      	bne.n	8014b52 <_dtoa_r+0xa72>
 8014b94:	07da      	lsls	r2, r3, #31
 8014b96:	d5dc      	bpl.n	8014b52 <_dtoa_r+0xa72>
 8014b98:	2b39      	cmp	r3, #57	; 0x39
 8014b9a:	d1d8      	bne.n	8014b4e <_dtoa_r+0xa6e>
 8014b9c:	9a02      	ldr	r2, [sp, #8]
 8014b9e:	2339      	movs	r3, #57	; 0x39
 8014ba0:	7013      	strb	r3, [r2, #0]
 8014ba2:	462b      	mov	r3, r5
 8014ba4:	461d      	mov	r5, r3
 8014ba6:	3b01      	subs	r3, #1
 8014ba8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014bac:	2a39      	cmp	r2, #57	; 0x39
 8014bae:	d050      	beq.n	8014c52 <_dtoa_r+0xb72>
 8014bb0:	3201      	adds	r2, #1
 8014bb2:	701a      	strb	r2, [r3, #0]
 8014bb4:	e745      	b.n	8014a42 <_dtoa_r+0x962>
 8014bb6:	2a00      	cmp	r2, #0
 8014bb8:	dd03      	ble.n	8014bc2 <_dtoa_r+0xae2>
 8014bba:	2b39      	cmp	r3, #57	; 0x39
 8014bbc:	d0ee      	beq.n	8014b9c <_dtoa_r+0xabc>
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	e7c7      	b.n	8014b52 <_dtoa_r+0xa72>
 8014bc2:	9a01      	ldr	r2, [sp, #4]
 8014bc4:	9907      	ldr	r1, [sp, #28]
 8014bc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014bca:	428a      	cmp	r2, r1
 8014bcc:	d02a      	beq.n	8014c24 <_dtoa_r+0xb44>
 8014bce:	4659      	mov	r1, fp
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	220a      	movs	r2, #10
 8014bd4:	4620      	mov	r0, r4
 8014bd6:	f000 fc7f 	bl	80154d8 <__multadd>
 8014bda:	45b8      	cmp	r8, r7
 8014bdc:	4683      	mov	fp, r0
 8014bde:	f04f 0300 	mov.w	r3, #0
 8014be2:	f04f 020a 	mov.w	r2, #10
 8014be6:	4641      	mov	r1, r8
 8014be8:	4620      	mov	r0, r4
 8014bea:	d107      	bne.n	8014bfc <_dtoa_r+0xb1c>
 8014bec:	f000 fc74 	bl	80154d8 <__multadd>
 8014bf0:	4680      	mov	r8, r0
 8014bf2:	4607      	mov	r7, r0
 8014bf4:	9b01      	ldr	r3, [sp, #4]
 8014bf6:	3301      	adds	r3, #1
 8014bf8:	9301      	str	r3, [sp, #4]
 8014bfa:	e775      	b.n	8014ae8 <_dtoa_r+0xa08>
 8014bfc:	f000 fc6c 	bl	80154d8 <__multadd>
 8014c00:	4639      	mov	r1, r7
 8014c02:	4680      	mov	r8, r0
 8014c04:	2300      	movs	r3, #0
 8014c06:	220a      	movs	r2, #10
 8014c08:	4620      	mov	r0, r4
 8014c0a:	f000 fc65 	bl	80154d8 <__multadd>
 8014c0e:	4607      	mov	r7, r0
 8014c10:	e7f0      	b.n	8014bf4 <_dtoa_r+0xb14>
 8014c12:	f1b9 0f00 	cmp.w	r9, #0
 8014c16:	9a00      	ldr	r2, [sp, #0]
 8014c18:	bfcc      	ite	gt
 8014c1a:	464d      	movgt	r5, r9
 8014c1c:	2501      	movle	r5, #1
 8014c1e:	4415      	add	r5, r2
 8014c20:	f04f 0800 	mov.w	r8, #0
 8014c24:	4659      	mov	r1, fp
 8014c26:	2201      	movs	r2, #1
 8014c28:	4620      	mov	r0, r4
 8014c2a:	9301      	str	r3, [sp, #4]
 8014c2c:	f000 fe4e 	bl	80158cc <__lshift>
 8014c30:	4631      	mov	r1, r6
 8014c32:	4683      	mov	fp, r0
 8014c34:	f000 feb6 	bl	80159a4 <__mcmp>
 8014c38:	2800      	cmp	r0, #0
 8014c3a:	dcb2      	bgt.n	8014ba2 <_dtoa_r+0xac2>
 8014c3c:	d102      	bne.n	8014c44 <_dtoa_r+0xb64>
 8014c3e:	9b01      	ldr	r3, [sp, #4]
 8014c40:	07db      	lsls	r3, r3, #31
 8014c42:	d4ae      	bmi.n	8014ba2 <_dtoa_r+0xac2>
 8014c44:	462b      	mov	r3, r5
 8014c46:	461d      	mov	r5, r3
 8014c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c4c:	2a30      	cmp	r2, #48	; 0x30
 8014c4e:	d0fa      	beq.n	8014c46 <_dtoa_r+0xb66>
 8014c50:	e6f7      	b.n	8014a42 <_dtoa_r+0x962>
 8014c52:	9a00      	ldr	r2, [sp, #0]
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d1a5      	bne.n	8014ba4 <_dtoa_r+0xac4>
 8014c58:	f10a 0a01 	add.w	sl, sl, #1
 8014c5c:	2331      	movs	r3, #49	; 0x31
 8014c5e:	e779      	b.n	8014b54 <_dtoa_r+0xa74>
 8014c60:	4b13      	ldr	r3, [pc, #76]	; (8014cb0 <_dtoa_r+0xbd0>)
 8014c62:	f7ff baaf 	b.w	80141c4 <_dtoa_r+0xe4>
 8014c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	f47f aa86 	bne.w	801417a <_dtoa_r+0x9a>
 8014c6e:	4b11      	ldr	r3, [pc, #68]	; (8014cb4 <_dtoa_r+0xbd4>)
 8014c70:	f7ff baa8 	b.w	80141c4 <_dtoa_r+0xe4>
 8014c74:	f1b9 0f00 	cmp.w	r9, #0
 8014c78:	dc03      	bgt.n	8014c82 <_dtoa_r+0xba2>
 8014c7a:	9b05      	ldr	r3, [sp, #20]
 8014c7c:	2b02      	cmp	r3, #2
 8014c7e:	f73f aec9 	bgt.w	8014a14 <_dtoa_r+0x934>
 8014c82:	9d00      	ldr	r5, [sp, #0]
 8014c84:	4631      	mov	r1, r6
 8014c86:	4658      	mov	r0, fp
 8014c88:	f7ff f99c 	bl	8013fc4 <quorem>
 8014c8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014c90:	f805 3b01 	strb.w	r3, [r5], #1
 8014c94:	9a00      	ldr	r2, [sp, #0]
 8014c96:	1aaa      	subs	r2, r5, r2
 8014c98:	4591      	cmp	r9, r2
 8014c9a:	ddba      	ble.n	8014c12 <_dtoa_r+0xb32>
 8014c9c:	4659      	mov	r1, fp
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	220a      	movs	r2, #10
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	f000 fc18 	bl	80154d8 <__multadd>
 8014ca8:	4683      	mov	fp, r0
 8014caa:	e7eb      	b.n	8014c84 <_dtoa_r+0xba4>
 8014cac:	0802ac29 	.word	0x0802ac29
 8014cb0:	0802a98c 	.word	0x0802a98c
 8014cb4:	0802abbd 	.word	0x0802abbd

08014cb8 <fiprintf>:
 8014cb8:	b40e      	push	{r1, r2, r3}
 8014cba:	b503      	push	{r0, r1, lr}
 8014cbc:	4601      	mov	r1, r0
 8014cbe:	ab03      	add	r3, sp, #12
 8014cc0:	4805      	ldr	r0, [pc, #20]	; (8014cd8 <fiprintf+0x20>)
 8014cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cc6:	6800      	ldr	r0, [r0, #0]
 8014cc8:	9301      	str	r3, [sp, #4]
 8014cca:	f001 fa9d 	bl	8016208 <_vfiprintf_r>
 8014cce:	b002      	add	sp, #8
 8014cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014cd4:	b003      	add	sp, #12
 8014cd6:	4770      	bx	lr
 8014cd8:	20000044 	.word	0x20000044

08014cdc <rshift>:
 8014cdc:	6903      	ldr	r3, [r0, #16]
 8014cde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014ce2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ce6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014cea:	f100 0414 	add.w	r4, r0, #20
 8014cee:	dd45      	ble.n	8014d7c <rshift+0xa0>
 8014cf0:	f011 011f 	ands.w	r1, r1, #31
 8014cf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014cf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014cfc:	d10c      	bne.n	8014d18 <rshift+0x3c>
 8014cfe:	f100 0710 	add.w	r7, r0, #16
 8014d02:	4629      	mov	r1, r5
 8014d04:	42b1      	cmp	r1, r6
 8014d06:	d334      	bcc.n	8014d72 <rshift+0x96>
 8014d08:	1a9b      	subs	r3, r3, r2
 8014d0a:	009b      	lsls	r3, r3, #2
 8014d0c:	1eea      	subs	r2, r5, #3
 8014d0e:	4296      	cmp	r6, r2
 8014d10:	bf38      	it	cc
 8014d12:	2300      	movcc	r3, #0
 8014d14:	4423      	add	r3, r4
 8014d16:	e015      	b.n	8014d44 <rshift+0x68>
 8014d18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014d1c:	f1c1 0820 	rsb	r8, r1, #32
 8014d20:	40cf      	lsrs	r7, r1
 8014d22:	f105 0e04 	add.w	lr, r5, #4
 8014d26:	46a1      	mov	r9, r4
 8014d28:	4576      	cmp	r6, lr
 8014d2a:	46f4      	mov	ip, lr
 8014d2c:	d815      	bhi.n	8014d5a <rshift+0x7e>
 8014d2e:	1a9b      	subs	r3, r3, r2
 8014d30:	009a      	lsls	r2, r3, #2
 8014d32:	3a04      	subs	r2, #4
 8014d34:	3501      	adds	r5, #1
 8014d36:	42ae      	cmp	r6, r5
 8014d38:	bf38      	it	cc
 8014d3a:	2200      	movcc	r2, #0
 8014d3c:	18a3      	adds	r3, r4, r2
 8014d3e:	50a7      	str	r7, [r4, r2]
 8014d40:	b107      	cbz	r7, 8014d44 <rshift+0x68>
 8014d42:	3304      	adds	r3, #4
 8014d44:	1b1a      	subs	r2, r3, r4
 8014d46:	42a3      	cmp	r3, r4
 8014d48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014d4c:	bf08      	it	eq
 8014d4e:	2300      	moveq	r3, #0
 8014d50:	6102      	str	r2, [r0, #16]
 8014d52:	bf08      	it	eq
 8014d54:	6143      	streq	r3, [r0, #20]
 8014d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d5a:	f8dc c000 	ldr.w	ip, [ip]
 8014d5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014d62:	ea4c 0707 	orr.w	r7, ip, r7
 8014d66:	f849 7b04 	str.w	r7, [r9], #4
 8014d6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014d6e:	40cf      	lsrs	r7, r1
 8014d70:	e7da      	b.n	8014d28 <rshift+0x4c>
 8014d72:	f851 cb04 	ldr.w	ip, [r1], #4
 8014d76:	f847 cf04 	str.w	ip, [r7, #4]!
 8014d7a:	e7c3      	b.n	8014d04 <rshift+0x28>
 8014d7c:	4623      	mov	r3, r4
 8014d7e:	e7e1      	b.n	8014d44 <rshift+0x68>

08014d80 <__hexdig_fun>:
 8014d80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014d84:	2b09      	cmp	r3, #9
 8014d86:	d802      	bhi.n	8014d8e <__hexdig_fun+0xe>
 8014d88:	3820      	subs	r0, #32
 8014d8a:	b2c0      	uxtb	r0, r0
 8014d8c:	4770      	bx	lr
 8014d8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014d92:	2b05      	cmp	r3, #5
 8014d94:	d801      	bhi.n	8014d9a <__hexdig_fun+0x1a>
 8014d96:	3847      	subs	r0, #71	; 0x47
 8014d98:	e7f7      	b.n	8014d8a <__hexdig_fun+0xa>
 8014d9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014d9e:	2b05      	cmp	r3, #5
 8014da0:	d801      	bhi.n	8014da6 <__hexdig_fun+0x26>
 8014da2:	3827      	subs	r0, #39	; 0x27
 8014da4:	e7f1      	b.n	8014d8a <__hexdig_fun+0xa>
 8014da6:	2000      	movs	r0, #0
 8014da8:	4770      	bx	lr
	...

08014dac <__gethex>:
 8014dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014db0:	ed2d 8b02 	vpush	{d8}
 8014db4:	b089      	sub	sp, #36	; 0x24
 8014db6:	ee08 0a10 	vmov	s16, r0
 8014dba:	9304      	str	r3, [sp, #16]
 8014dbc:	4bbc      	ldr	r3, [pc, #752]	; (80150b0 <__gethex+0x304>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	9301      	str	r3, [sp, #4]
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	468b      	mov	fp, r1
 8014dc6:	4690      	mov	r8, r2
 8014dc8:	f7eb fa14 	bl	80001f4 <strlen>
 8014dcc:	9b01      	ldr	r3, [sp, #4]
 8014dce:	f8db 2000 	ldr.w	r2, [fp]
 8014dd2:	4403      	add	r3, r0
 8014dd4:	4682      	mov	sl, r0
 8014dd6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014dda:	9305      	str	r3, [sp, #20]
 8014ddc:	1c93      	adds	r3, r2, #2
 8014dde:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014de2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014de6:	32fe      	adds	r2, #254	; 0xfe
 8014de8:	18d1      	adds	r1, r2, r3
 8014dea:	461f      	mov	r7, r3
 8014dec:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014df0:	9100      	str	r1, [sp, #0]
 8014df2:	2830      	cmp	r0, #48	; 0x30
 8014df4:	d0f8      	beq.n	8014de8 <__gethex+0x3c>
 8014df6:	f7ff ffc3 	bl	8014d80 <__hexdig_fun>
 8014dfa:	4604      	mov	r4, r0
 8014dfc:	2800      	cmp	r0, #0
 8014dfe:	d13a      	bne.n	8014e76 <__gethex+0xca>
 8014e00:	9901      	ldr	r1, [sp, #4]
 8014e02:	4652      	mov	r2, sl
 8014e04:	4638      	mov	r0, r7
 8014e06:	f001 fb47 	bl	8016498 <strncmp>
 8014e0a:	4605      	mov	r5, r0
 8014e0c:	2800      	cmp	r0, #0
 8014e0e:	d168      	bne.n	8014ee2 <__gethex+0x136>
 8014e10:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014e14:	eb07 060a 	add.w	r6, r7, sl
 8014e18:	f7ff ffb2 	bl	8014d80 <__hexdig_fun>
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	d062      	beq.n	8014ee6 <__gethex+0x13a>
 8014e20:	4633      	mov	r3, r6
 8014e22:	7818      	ldrb	r0, [r3, #0]
 8014e24:	2830      	cmp	r0, #48	; 0x30
 8014e26:	461f      	mov	r7, r3
 8014e28:	f103 0301 	add.w	r3, r3, #1
 8014e2c:	d0f9      	beq.n	8014e22 <__gethex+0x76>
 8014e2e:	f7ff ffa7 	bl	8014d80 <__hexdig_fun>
 8014e32:	2301      	movs	r3, #1
 8014e34:	fab0 f480 	clz	r4, r0
 8014e38:	0964      	lsrs	r4, r4, #5
 8014e3a:	4635      	mov	r5, r6
 8014e3c:	9300      	str	r3, [sp, #0]
 8014e3e:	463a      	mov	r2, r7
 8014e40:	4616      	mov	r6, r2
 8014e42:	3201      	adds	r2, #1
 8014e44:	7830      	ldrb	r0, [r6, #0]
 8014e46:	f7ff ff9b 	bl	8014d80 <__hexdig_fun>
 8014e4a:	2800      	cmp	r0, #0
 8014e4c:	d1f8      	bne.n	8014e40 <__gethex+0x94>
 8014e4e:	9901      	ldr	r1, [sp, #4]
 8014e50:	4652      	mov	r2, sl
 8014e52:	4630      	mov	r0, r6
 8014e54:	f001 fb20 	bl	8016498 <strncmp>
 8014e58:	b980      	cbnz	r0, 8014e7c <__gethex+0xd0>
 8014e5a:	b94d      	cbnz	r5, 8014e70 <__gethex+0xc4>
 8014e5c:	eb06 050a 	add.w	r5, r6, sl
 8014e60:	462a      	mov	r2, r5
 8014e62:	4616      	mov	r6, r2
 8014e64:	3201      	adds	r2, #1
 8014e66:	7830      	ldrb	r0, [r6, #0]
 8014e68:	f7ff ff8a 	bl	8014d80 <__hexdig_fun>
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	d1f8      	bne.n	8014e62 <__gethex+0xb6>
 8014e70:	1bad      	subs	r5, r5, r6
 8014e72:	00ad      	lsls	r5, r5, #2
 8014e74:	e004      	b.n	8014e80 <__gethex+0xd4>
 8014e76:	2400      	movs	r4, #0
 8014e78:	4625      	mov	r5, r4
 8014e7a:	e7e0      	b.n	8014e3e <__gethex+0x92>
 8014e7c:	2d00      	cmp	r5, #0
 8014e7e:	d1f7      	bne.n	8014e70 <__gethex+0xc4>
 8014e80:	7833      	ldrb	r3, [r6, #0]
 8014e82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014e86:	2b50      	cmp	r3, #80	; 0x50
 8014e88:	d13b      	bne.n	8014f02 <__gethex+0x156>
 8014e8a:	7873      	ldrb	r3, [r6, #1]
 8014e8c:	2b2b      	cmp	r3, #43	; 0x2b
 8014e8e:	d02c      	beq.n	8014eea <__gethex+0x13e>
 8014e90:	2b2d      	cmp	r3, #45	; 0x2d
 8014e92:	d02e      	beq.n	8014ef2 <__gethex+0x146>
 8014e94:	1c71      	adds	r1, r6, #1
 8014e96:	f04f 0900 	mov.w	r9, #0
 8014e9a:	7808      	ldrb	r0, [r1, #0]
 8014e9c:	f7ff ff70 	bl	8014d80 <__hexdig_fun>
 8014ea0:	1e43      	subs	r3, r0, #1
 8014ea2:	b2db      	uxtb	r3, r3
 8014ea4:	2b18      	cmp	r3, #24
 8014ea6:	d82c      	bhi.n	8014f02 <__gethex+0x156>
 8014ea8:	f1a0 0210 	sub.w	r2, r0, #16
 8014eac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014eb0:	f7ff ff66 	bl	8014d80 <__hexdig_fun>
 8014eb4:	1e43      	subs	r3, r0, #1
 8014eb6:	b2db      	uxtb	r3, r3
 8014eb8:	2b18      	cmp	r3, #24
 8014eba:	d91d      	bls.n	8014ef8 <__gethex+0x14c>
 8014ebc:	f1b9 0f00 	cmp.w	r9, #0
 8014ec0:	d000      	beq.n	8014ec4 <__gethex+0x118>
 8014ec2:	4252      	negs	r2, r2
 8014ec4:	4415      	add	r5, r2
 8014ec6:	f8cb 1000 	str.w	r1, [fp]
 8014eca:	b1e4      	cbz	r4, 8014f06 <__gethex+0x15a>
 8014ecc:	9b00      	ldr	r3, [sp, #0]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	bf14      	ite	ne
 8014ed2:	2700      	movne	r7, #0
 8014ed4:	2706      	moveq	r7, #6
 8014ed6:	4638      	mov	r0, r7
 8014ed8:	b009      	add	sp, #36	; 0x24
 8014eda:	ecbd 8b02 	vpop	{d8}
 8014ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ee2:	463e      	mov	r6, r7
 8014ee4:	4625      	mov	r5, r4
 8014ee6:	2401      	movs	r4, #1
 8014ee8:	e7ca      	b.n	8014e80 <__gethex+0xd4>
 8014eea:	f04f 0900 	mov.w	r9, #0
 8014eee:	1cb1      	adds	r1, r6, #2
 8014ef0:	e7d3      	b.n	8014e9a <__gethex+0xee>
 8014ef2:	f04f 0901 	mov.w	r9, #1
 8014ef6:	e7fa      	b.n	8014eee <__gethex+0x142>
 8014ef8:	230a      	movs	r3, #10
 8014efa:	fb03 0202 	mla	r2, r3, r2, r0
 8014efe:	3a10      	subs	r2, #16
 8014f00:	e7d4      	b.n	8014eac <__gethex+0x100>
 8014f02:	4631      	mov	r1, r6
 8014f04:	e7df      	b.n	8014ec6 <__gethex+0x11a>
 8014f06:	1bf3      	subs	r3, r6, r7
 8014f08:	3b01      	subs	r3, #1
 8014f0a:	4621      	mov	r1, r4
 8014f0c:	2b07      	cmp	r3, #7
 8014f0e:	dc0b      	bgt.n	8014f28 <__gethex+0x17c>
 8014f10:	ee18 0a10 	vmov	r0, s16
 8014f14:	f000 fa7e 	bl	8015414 <_Balloc>
 8014f18:	4604      	mov	r4, r0
 8014f1a:	b940      	cbnz	r0, 8014f2e <__gethex+0x182>
 8014f1c:	4b65      	ldr	r3, [pc, #404]	; (80150b4 <__gethex+0x308>)
 8014f1e:	4602      	mov	r2, r0
 8014f20:	21de      	movs	r1, #222	; 0xde
 8014f22:	4865      	ldr	r0, [pc, #404]	; (80150b8 <__gethex+0x30c>)
 8014f24:	f7ff f830 	bl	8013f88 <__assert_func>
 8014f28:	3101      	adds	r1, #1
 8014f2a:	105b      	asrs	r3, r3, #1
 8014f2c:	e7ee      	b.n	8014f0c <__gethex+0x160>
 8014f2e:	f100 0914 	add.w	r9, r0, #20
 8014f32:	f04f 0b00 	mov.w	fp, #0
 8014f36:	f1ca 0301 	rsb	r3, sl, #1
 8014f3a:	f8cd 9008 	str.w	r9, [sp, #8]
 8014f3e:	f8cd b000 	str.w	fp, [sp]
 8014f42:	9306      	str	r3, [sp, #24]
 8014f44:	42b7      	cmp	r7, r6
 8014f46:	d340      	bcc.n	8014fca <__gethex+0x21e>
 8014f48:	9802      	ldr	r0, [sp, #8]
 8014f4a:	9b00      	ldr	r3, [sp, #0]
 8014f4c:	f840 3b04 	str.w	r3, [r0], #4
 8014f50:	eba0 0009 	sub.w	r0, r0, r9
 8014f54:	1080      	asrs	r0, r0, #2
 8014f56:	0146      	lsls	r6, r0, #5
 8014f58:	6120      	str	r0, [r4, #16]
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f000 fb50 	bl	8015600 <__hi0bits>
 8014f60:	1a30      	subs	r0, r6, r0
 8014f62:	f8d8 6000 	ldr.w	r6, [r8]
 8014f66:	42b0      	cmp	r0, r6
 8014f68:	dd63      	ble.n	8015032 <__gethex+0x286>
 8014f6a:	1b87      	subs	r7, r0, r6
 8014f6c:	4639      	mov	r1, r7
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f000 feea 	bl	8015d48 <__any_on>
 8014f74:	4682      	mov	sl, r0
 8014f76:	b1a8      	cbz	r0, 8014fa4 <__gethex+0x1f8>
 8014f78:	1e7b      	subs	r3, r7, #1
 8014f7a:	1159      	asrs	r1, r3, #5
 8014f7c:	f003 021f 	and.w	r2, r3, #31
 8014f80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014f84:	f04f 0a01 	mov.w	sl, #1
 8014f88:	fa0a f202 	lsl.w	r2, sl, r2
 8014f8c:	420a      	tst	r2, r1
 8014f8e:	d009      	beq.n	8014fa4 <__gethex+0x1f8>
 8014f90:	4553      	cmp	r3, sl
 8014f92:	dd05      	ble.n	8014fa0 <__gethex+0x1f4>
 8014f94:	1eb9      	subs	r1, r7, #2
 8014f96:	4620      	mov	r0, r4
 8014f98:	f000 fed6 	bl	8015d48 <__any_on>
 8014f9c:	2800      	cmp	r0, #0
 8014f9e:	d145      	bne.n	801502c <__gethex+0x280>
 8014fa0:	f04f 0a02 	mov.w	sl, #2
 8014fa4:	4639      	mov	r1, r7
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	f7ff fe98 	bl	8014cdc <rshift>
 8014fac:	443d      	add	r5, r7
 8014fae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014fb2:	42ab      	cmp	r3, r5
 8014fb4:	da4c      	bge.n	8015050 <__gethex+0x2a4>
 8014fb6:	ee18 0a10 	vmov	r0, s16
 8014fba:	4621      	mov	r1, r4
 8014fbc:	f000 fa6a 	bl	8015494 <_Bfree>
 8014fc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	6013      	str	r3, [r2, #0]
 8014fc6:	27a3      	movs	r7, #163	; 0xa3
 8014fc8:	e785      	b.n	8014ed6 <__gethex+0x12a>
 8014fca:	1e73      	subs	r3, r6, #1
 8014fcc:	9a05      	ldr	r2, [sp, #20]
 8014fce:	9303      	str	r3, [sp, #12]
 8014fd0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014fd4:	4293      	cmp	r3, r2
 8014fd6:	d019      	beq.n	801500c <__gethex+0x260>
 8014fd8:	f1bb 0f20 	cmp.w	fp, #32
 8014fdc:	d107      	bne.n	8014fee <__gethex+0x242>
 8014fde:	9b02      	ldr	r3, [sp, #8]
 8014fe0:	9a00      	ldr	r2, [sp, #0]
 8014fe2:	f843 2b04 	str.w	r2, [r3], #4
 8014fe6:	9302      	str	r3, [sp, #8]
 8014fe8:	2300      	movs	r3, #0
 8014fea:	9300      	str	r3, [sp, #0]
 8014fec:	469b      	mov	fp, r3
 8014fee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014ff2:	f7ff fec5 	bl	8014d80 <__hexdig_fun>
 8014ff6:	9b00      	ldr	r3, [sp, #0]
 8014ff8:	f000 000f 	and.w	r0, r0, #15
 8014ffc:	fa00 f00b 	lsl.w	r0, r0, fp
 8015000:	4303      	orrs	r3, r0
 8015002:	9300      	str	r3, [sp, #0]
 8015004:	f10b 0b04 	add.w	fp, fp, #4
 8015008:	9b03      	ldr	r3, [sp, #12]
 801500a:	e00d      	b.n	8015028 <__gethex+0x27c>
 801500c:	9b03      	ldr	r3, [sp, #12]
 801500e:	9a06      	ldr	r2, [sp, #24]
 8015010:	4413      	add	r3, r2
 8015012:	42bb      	cmp	r3, r7
 8015014:	d3e0      	bcc.n	8014fd8 <__gethex+0x22c>
 8015016:	4618      	mov	r0, r3
 8015018:	9901      	ldr	r1, [sp, #4]
 801501a:	9307      	str	r3, [sp, #28]
 801501c:	4652      	mov	r2, sl
 801501e:	f001 fa3b 	bl	8016498 <strncmp>
 8015022:	9b07      	ldr	r3, [sp, #28]
 8015024:	2800      	cmp	r0, #0
 8015026:	d1d7      	bne.n	8014fd8 <__gethex+0x22c>
 8015028:	461e      	mov	r6, r3
 801502a:	e78b      	b.n	8014f44 <__gethex+0x198>
 801502c:	f04f 0a03 	mov.w	sl, #3
 8015030:	e7b8      	b.n	8014fa4 <__gethex+0x1f8>
 8015032:	da0a      	bge.n	801504a <__gethex+0x29e>
 8015034:	1a37      	subs	r7, r6, r0
 8015036:	4621      	mov	r1, r4
 8015038:	ee18 0a10 	vmov	r0, s16
 801503c:	463a      	mov	r2, r7
 801503e:	f000 fc45 	bl	80158cc <__lshift>
 8015042:	1bed      	subs	r5, r5, r7
 8015044:	4604      	mov	r4, r0
 8015046:	f100 0914 	add.w	r9, r0, #20
 801504a:	f04f 0a00 	mov.w	sl, #0
 801504e:	e7ae      	b.n	8014fae <__gethex+0x202>
 8015050:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015054:	42a8      	cmp	r0, r5
 8015056:	dd72      	ble.n	801513e <__gethex+0x392>
 8015058:	1b45      	subs	r5, r0, r5
 801505a:	42ae      	cmp	r6, r5
 801505c:	dc36      	bgt.n	80150cc <__gethex+0x320>
 801505e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015062:	2b02      	cmp	r3, #2
 8015064:	d02a      	beq.n	80150bc <__gethex+0x310>
 8015066:	2b03      	cmp	r3, #3
 8015068:	d02c      	beq.n	80150c4 <__gethex+0x318>
 801506a:	2b01      	cmp	r3, #1
 801506c:	d115      	bne.n	801509a <__gethex+0x2ee>
 801506e:	42ae      	cmp	r6, r5
 8015070:	d113      	bne.n	801509a <__gethex+0x2ee>
 8015072:	2e01      	cmp	r6, #1
 8015074:	d10b      	bne.n	801508e <__gethex+0x2e2>
 8015076:	9a04      	ldr	r2, [sp, #16]
 8015078:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801507c:	6013      	str	r3, [r2, #0]
 801507e:	2301      	movs	r3, #1
 8015080:	6123      	str	r3, [r4, #16]
 8015082:	f8c9 3000 	str.w	r3, [r9]
 8015086:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015088:	2762      	movs	r7, #98	; 0x62
 801508a:	601c      	str	r4, [r3, #0]
 801508c:	e723      	b.n	8014ed6 <__gethex+0x12a>
 801508e:	1e71      	subs	r1, r6, #1
 8015090:	4620      	mov	r0, r4
 8015092:	f000 fe59 	bl	8015d48 <__any_on>
 8015096:	2800      	cmp	r0, #0
 8015098:	d1ed      	bne.n	8015076 <__gethex+0x2ca>
 801509a:	ee18 0a10 	vmov	r0, s16
 801509e:	4621      	mov	r1, r4
 80150a0:	f000 f9f8 	bl	8015494 <_Bfree>
 80150a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150a6:	2300      	movs	r3, #0
 80150a8:	6013      	str	r3, [r2, #0]
 80150aa:	2750      	movs	r7, #80	; 0x50
 80150ac:	e713      	b.n	8014ed6 <__gethex+0x12a>
 80150ae:	bf00      	nop
 80150b0:	0802aca4 	.word	0x0802aca4
 80150b4:	0802ac29 	.word	0x0802ac29
 80150b8:	0802ac3a 	.word	0x0802ac3a
 80150bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d1eb      	bne.n	801509a <__gethex+0x2ee>
 80150c2:	e7d8      	b.n	8015076 <__gethex+0x2ca>
 80150c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d1d5      	bne.n	8015076 <__gethex+0x2ca>
 80150ca:	e7e6      	b.n	801509a <__gethex+0x2ee>
 80150cc:	1e6f      	subs	r7, r5, #1
 80150ce:	f1ba 0f00 	cmp.w	sl, #0
 80150d2:	d131      	bne.n	8015138 <__gethex+0x38c>
 80150d4:	b127      	cbz	r7, 80150e0 <__gethex+0x334>
 80150d6:	4639      	mov	r1, r7
 80150d8:	4620      	mov	r0, r4
 80150da:	f000 fe35 	bl	8015d48 <__any_on>
 80150de:	4682      	mov	sl, r0
 80150e0:	117b      	asrs	r3, r7, #5
 80150e2:	2101      	movs	r1, #1
 80150e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80150e8:	f007 071f 	and.w	r7, r7, #31
 80150ec:	fa01 f707 	lsl.w	r7, r1, r7
 80150f0:	421f      	tst	r7, r3
 80150f2:	4629      	mov	r1, r5
 80150f4:	4620      	mov	r0, r4
 80150f6:	bf18      	it	ne
 80150f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80150fc:	1b76      	subs	r6, r6, r5
 80150fe:	f7ff fded 	bl	8014cdc <rshift>
 8015102:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015106:	2702      	movs	r7, #2
 8015108:	f1ba 0f00 	cmp.w	sl, #0
 801510c:	d048      	beq.n	80151a0 <__gethex+0x3f4>
 801510e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015112:	2b02      	cmp	r3, #2
 8015114:	d015      	beq.n	8015142 <__gethex+0x396>
 8015116:	2b03      	cmp	r3, #3
 8015118:	d017      	beq.n	801514a <__gethex+0x39e>
 801511a:	2b01      	cmp	r3, #1
 801511c:	d109      	bne.n	8015132 <__gethex+0x386>
 801511e:	f01a 0f02 	tst.w	sl, #2
 8015122:	d006      	beq.n	8015132 <__gethex+0x386>
 8015124:	f8d9 0000 	ldr.w	r0, [r9]
 8015128:	ea4a 0a00 	orr.w	sl, sl, r0
 801512c:	f01a 0f01 	tst.w	sl, #1
 8015130:	d10e      	bne.n	8015150 <__gethex+0x3a4>
 8015132:	f047 0710 	orr.w	r7, r7, #16
 8015136:	e033      	b.n	80151a0 <__gethex+0x3f4>
 8015138:	f04f 0a01 	mov.w	sl, #1
 801513c:	e7d0      	b.n	80150e0 <__gethex+0x334>
 801513e:	2701      	movs	r7, #1
 8015140:	e7e2      	b.n	8015108 <__gethex+0x35c>
 8015142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015144:	f1c3 0301 	rsb	r3, r3, #1
 8015148:	9315      	str	r3, [sp, #84]	; 0x54
 801514a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801514c:	2b00      	cmp	r3, #0
 801514e:	d0f0      	beq.n	8015132 <__gethex+0x386>
 8015150:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015154:	f104 0314 	add.w	r3, r4, #20
 8015158:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801515c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015160:	f04f 0c00 	mov.w	ip, #0
 8015164:	4618      	mov	r0, r3
 8015166:	f853 2b04 	ldr.w	r2, [r3], #4
 801516a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801516e:	d01c      	beq.n	80151aa <__gethex+0x3fe>
 8015170:	3201      	adds	r2, #1
 8015172:	6002      	str	r2, [r0, #0]
 8015174:	2f02      	cmp	r7, #2
 8015176:	f104 0314 	add.w	r3, r4, #20
 801517a:	d13f      	bne.n	80151fc <__gethex+0x450>
 801517c:	f8d8 2000 	ldr.w	r2, [r8]
 8015180:	3a01      	subs	r2, #1
 8015182:	42b2      	cmp	r2, r6
 8015184:	d10a      	bne.n	801519c <__gethex+0x3f0>
 8015186:	1171      	asrs	r1, r6, #5
 8015188:	2201      	movs	r2, #1
 801518a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801518e:	f006 061f 	and.w	r6, r6, #31
 8015192:	fa02 f606 	lsl.w	r6, r2, r6
 8015196:	421e      	tst	r6, r3
 8015198:	bf18      	it	ne
 801519a:	4617      	movne	r7, r2
 801519c:	f047 0720 	orr.w	r7, r7, #32
 80151a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151a2:	601c      	str	r4, [r3, #0]
 80151a4:	9b04      	ldr	r3, [sp, #16]
 80151a6:	601d      	str	r5, [r3, #0]
 80151a8:	e695      	b.n	8014ed6 <__gethex+0x12a>
 80151aa:	4299      	cmp	r1, r3
 80151ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80151b0:	d8d8      	bhi.n	8015164 <__gethex+0x3b8>
 80151b2:	68a3      	ldr	r3, [r4, #8]
 80151b4:	459b      	cmp	fp, r3
 80151b6:	db19      	blt.n	80151ec <__gethex+0x440>
 80151b8:	6861      	ldr	r1, [r4, #4]
 80151ba:	ee18 0a10 	vmov	r0, s16
 80151be:	3101      	adds	r1, #1
 80151c0:	f000 f928 	bl	8015414 <_Balloc>
 80151c4:	4681      	mov	r9, r0
 80151c6:	b918      	cbnz	r0, 80151d0 <__gethex+0x424>
 80151c8:	4b1a      	ldr	r3, [pc, #104]	; (8015234 <__gethex+0x488>)
 80151ca:	4602      	mov	r2, r0
 80151cc:	2184      	movs	r1, #132	; 0x84
 80151ce:	e6a8      	b.n	8014f22 <__gethex+0x176>
 80151d0:	6922      	ldr	r2, [r4, #16]
 80151d2:	3202      	adds	r2, #2
 80151d4:	f104 010c 	add.w	r1, r4, #12
 80151d8:	0092      	lsls	r2, r2, #2
 80151da:	300c      	adds	r0, #12
 80151dc:	f000 f90c 	bl	80153f8 <memcpy>
 80151e0:	4621      	mov	r1, r4
 80151e2:	ee18 0a10 	vmov	r0, s16
 80151e6:	f000 f955 	bl	8015494 <_Bfree>
 80151ea:	464c      	mov	r4, r9
 80151ec:	6923      	ldr	r3, [r4, #16]
 80151ee:	1c5a      	adds	r2, r3, #1
 80151f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80151f4:	6122      	str	r2, [r4, #16]
 80151f6:	2201      	movs	r2, #1
 80151f8:	615a      	str	r2, [r3, #20]
 80151fa:	e7bb      	b.n	8015174 <__gethex+0x3c8>
 80151fc:	6922      	ldr	r2, [r4, #16]
 80151fe:	455a      	cmp	r2, fp
 8015200:	dd0b      	ble.n	801521a <__gethex+0x46e>
 8015202:	2101      	movs	r1, #1
 8015204:	4620      	mov	r0, r4
 8015206:	f7ff fd69 	bl	8014cdc <rshift>
 801520a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801520e:	3501      	adds	r5, #1
 8015210:	42ab      	cmp	r3, r5
 8015212:	f6ff aed0 	blt.w	8014fb6 <__gethex+0x20a>
 8015216:	2701      	movs	r7, #1
 8015218:	e7c0      	b.n	801519c <__gethex+0x3f0>
 801521a:	f016 061f 	ands.w	r6, r6, #31
 801521e:	d0fa      	beq.n	8015216 <__gethex+0x46a>
 8015220:	449a      	add	sl, r3
 8015222:	f1c6 0620 	rsb	r6, r6, #32
 8015226:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801522a:	f000 f9e9 	bl	8015600 <__hi0bits>
 801522e:	42b0      	cmp	r0, r6
 8015230:	dbe7      	blt.n	8015202 <__gethex+0x456>
 8015232:	e7f0      	b.n	8015216 <__gethex+0x46a>
 8015234:	0802ac29 	.word	0x0802ac29

08015238 <L_shift>:
 8015238:	f1c2 0208 	rsb	r2, r2, #8
 801523c:	0092      	lsls	r2, r2, #2
 801523e:	b570      	push	{r4, r5, r6, lr}
 8015240:	f1c2 0620 	rsb	r6, r2, #32
 8015244:	6843      	ldr	r3, [r0, #4]
 8015246:	6804      	ldr	r4, [r0, #0]
 8015248:	fa03 f506 	lsl.w	r5, r3, r6
 801524c:	432c      	orrs	r4, r5
 801524e:	40d3      	lsrs	r3, r2
 8015250:	6004      	str	r4, [r0, #0]
 8015252:	f840 3f04 	str.w	r3, [r0, #4]!
 8015256:	4288      	cmp	r0, r1
 8015258:	d3f4      	bcc.n	8015244 <L_shift+0xc>
 801525a:	bd70      	pop	{r4, r5, r6, pc}

0801525c <__match>:
 801525c:	b530      	push	{r4, r5, lr}
 801525e:	6803      	ldr	r3, [r0, #0]
 8015260:	3301      	adds	r3, #1
 8015262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015266:	b914      	cbnz	r4, 801526e <__match+0x12>
 8015268:	6003      	str	r3, [r0, #0]
 801526a:	2001      	movs	r0, #1
 801526c:	bd30      	pop	{r4, r5, pc}
 801526e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015272:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015276:	2d19      	cmp	r5, #25
 8015278:	bf98      	it	ls
 801527a:	3220      	addls	r2, #32
 801527c:	42a2      	cmp	r2, r4
 801527e:	d0f0      	beq.n	8015262 <__match+0x6>
 8015280:	2000      	movs	r0, #0
 8015282:	e7f3      	b.n	801526c <__match+0x10>

08015284 <__hexnan>:
 8015284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015288:	680b      	ldr	r3, [r1, #0]
 801528a:	6801      	ldr	r1, [r0, #0]
 801528c:	115e      	asrs	r6, r3, #5
 801528e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015292:	f013 031f 	ands.w	r3, r3, #31
 8015296:	b087      	sub	sp, #28
 8015298:	bf18      	it	ne
 801529a:	3604      	addne	r6, #4
 801529c:	2500      	movs	r5, #0
 801529e:	1f37      	subs	r7, r6, #4
 80152a0:	4682      	mov	sl, r0
 80152a2:	4690      	mov	r8, r2
 80152a4:	9301      	str	r3, [sp, #4]
 80152a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80152aa:	46b9      	mov	r9, r7
 80152ac:	463c      	mov	r4, r7
 80152ae:	9502      	str	r5, [sp, #8]
 80152b0:	46ab      	mov	fp, r5
 80152b2:	784a      	ldrb	r2, [r1, #1]
 80152b4:	1c4b      	adds	r3, r1, #1
 80152b6:	9303      	str	r3, [sp, #12]
 80152b8:	b342      	cbz	r2, 801530c <__hexnan+0x88>
 80152ba:	4610      	mov	r0, r2
 80152bc:	9105      	str	r1, [sp, #20]
 80152be:	9204      	str	r2, [sp, #16]
 80152c0:	f7ff fd5e 	bl	8014d80 <__hexdig_fun>
 80152c4:	2800      	cmp	r0, #0
 80152c6:	d14f      	bne.n	8015368 <__hexnan+0xe4>
 80152c8:	9a04      	ldr	r2, [sp, #16]
 80152ca:	9905      	ldr	r1, [sp, #20]
 80152cc:	2a20      	cmp	r2, #32
 80152ce:	d818      	bhi.n	8015302 <__hexnan+0x7e>
 80152d0:	9b02      	ldr	r3, [sp, #8]
 80152d2:	459b      	cmp	fp, r3
 80152d4:	dd13      	ble.n	80152fe <__hexnan+0x7a>
 80152d6:	454c      	cmp	r4, r9
 80152d8:	d206      	bcs.n	80152e8 <__hexnan+0x64>
 80152da:	2d07      	cmp	r5, #7
 80152dc:	dc04      	bgt.n	80152e8 <__hexnan+0x64>
 80152de:	462a      	mov	r2, r5
 80152e0:	4649      	mov	r1, r9
 80152e2:	4620      	mov	r0, r4
 80152e4:	f7ff ffa8 	bl	8015238 <L_shift>
 80152e8:	4544      	cmp	r4, r8
 80152ea:	d950      	bls.n	801538e <__hexnan+0x10a>
 80152ec:	2300      	movs	r3, #0
 80152ee:	f1a4 0904 	sub.w	r9, r4, #4
 80152f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80152f6:	f8cd b008 	str.w	fp, [sp, #8]
 80152fa:	464c      	mov	r4, r9
 80152fc:	461d      	mov	r5, r3
 80152fe:	9903      	ldr	r1, [sp, #12]
 8015300:	e7d7      	b.n	80152b2 <__hexnan+0x2e>
 8015302:	2a29      	cmp	r2, #41	; 0x29
 8015304:	d156      	bne.n	80153b4 <__hexnan+0x130>
 8015306:	3102      	adds	r1, #2
 8015308:	f8ca 1000 	str.w	r1, [sl]
 801530c:	f1bb 0f00 	cmp.w	fp, #0
 8015310:	d050      	beq.n	80153b4 <__hexnan+0x130>
 8015312:	454c      	cmp	r4, r9
 8015314:	d206      	bcs.n	8015324 <__hexnan+0xa0>
 8015316:	2d07      	cmp	r5, #7
 8015318:	dc04      	bgt.n	8015324 <__hexnan+0xa0>
 801531a:	462a      	mov	r2, r5
 801531c:	4649      	mov	r1, r9
 801531e:	4620      	mov	r0, r4
 8015320:	f7ff ff8a 	bl	8015238 <L_shift>
 8015324:	4544      	cmp	r4, r8
 8015326:	d934      	bls.n	8015392 <__hexnan+0x10e>
 8015328:	f1a8 0204 	sub.w	r2, r8, #4
 801532c:	4623      	mov	r3, r4
 801532e:	f853 1b04 	ldr.w	r1, [r3], #4
 8015332:	f842 1f04 	str.w	r1, [r2, #4]!
 8015336:	429f      	cmp	r7, r3
 8015338:	d2f9      	bcs.n	801532e <__hexnan+0xaa>
 801533a:	1b3b      	subs	r3, r7, r4
 801533c:	f023 0303 	bic.w	r3, r3, #3
 8015340:	3304      	adds	r3, #4
 8015342:	3401      	adds	r4, #1
 8015344:	3e03      	subs	r6, #3
 8015346:	42b4      	cmp	r4, r6
 8015348:	bf88      	it	hi
 801534a:	2304      	movhi	r3, #4
 801534c:	4443      	add	r3, r8
 801534e:	2200      	movs	r2, #0
 8015350:	f843 2b04 	str.w	r2, [r3], #4
 8015354:	429f      	cmp	r7, r3
 8015356:	d2fb      	bcs.n	8015350 <__hexnan+0xcc>
 8015358:	683b      	ldr	r3, [r7, #0]
 801535a:	b91b      	cbnz	r3, 8015364 <__hexnan+0xe0>
 801535c:	4547      	cmp	r7, r8
 801535e:	d127      	bne.n	80153b0 <__hexnan+0x12c>
 8015360:	2301      	movs	r3, #1
 8015362:	603b      	str	r3, [r7, #0]
 8015364:	2005      	movs	r0, #5
 8015366:	e026      	b.n	80153b6 <__hexnan+0x132>
 8015368:	3501      	adds	r5, #1
 801536a:	2d08      	cmp	r5, #8
 801536c:	f10b 0b01 	add.w	fp, fp, #1
 8015370:	dd06      	ble.n	8015380 <__hexnan+0xfc>
 8015372:	4544      	cmp	r4, r8
 8015374:	d9c3      	bls.n	80152fe <__hexnan+0x7a>
 8015376:	2300      	movs	r3, #0
 8015378:	f844 3c04 	str.w	r3, [r4, #-4]
 801537c:	2501      	movs	r5, #1
 801537e:	3c04      	subs	r4, #4
 8015380:	6822      	ldr	r2, [r4, #0]
 8015382:	f000 000f 	and.w	r0, r0, #15
 8015386:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801538a:	6022      	str	r2, [r4, #0]
 801538c:	e7b7      	b.n	80152fe <__hexnan+0x7a>
 801538e:	2508      	movs	r5, #8
 8015390:	e7b5      	b.n	80152fe <__hexnan+0x7a>
 8015392:	9b01      	ldr	r3, [sp, #4]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d0df      	beq.n	8015358 <__hexnan+0xd4>
 8015398:	f04f 32ff 	mov.w	r2, #4294967295
 801539c:	f1c3 0320 	rsb	r3, r3, #32
 80153a0:	fa22 f303 	lsr.w	r3, r2, r3
 80153a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80153a8:	401a      	ands	r2, r3
 80153aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80153ae:	e7d3      	b.n	8015358 <__hexnan+0xd4>
 80153b0:	3f04      	subs	r7, #4
 80153b2:	e7d1      	b.n	8015358 <__hexnan+0xd4>
 80153b4:	2004      	movs	r0, #4
 80153b6:	b007      	add	sp, #28
 80153b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080153bc <_localeconv_r>:
 80153bc:	4800      	ldr	r0, [pc, #0]	; (80153c0 <_localeconv_r+0x4>)
 80153be:	4770      	bx	lr
 80153c0:	2000019c 	.word	0x2000019c

080153c4 <malloc>:
 80153c4:	4b02      	ldr	r3, [pc, #8]	; (80153d0 <malloc+0xc>)
 80153c6:	4601      	mov	r1, r0
 80153c8:	6818      	ldr	r0, [r3, #0]
 80153ca:	f000 bd3d 	b.w	8015e48 <_malloc_r>
 80153ce:	bf00      	nop
 80153d0:	20000044 	.word	0x20000044

080153d4 <__ascii_mbtowc>:
 80153d4:	b082      	sub	sp, #8
 80153d6:	b901      	cbnz	r1, 80153da <__ascii_mbtowc+0x6>
 80153d8:	a901      	add	r1, sp, #4
 80153da:	b142      	cbz	r2, 80153ee <__ascii_mbtowc+0x1a>
 80153dc:	b14b      	cbz	r3, 80153f2 <__ascii_mbtowc+0x1e>
 80153de:	7813      	ldrb	r3, [r2, #0]
 80153e0:	600b      	str	r3, [r1, #0]
 80153e2:	7812      	ldrb	r2, [r2, #0]
 80153e4:	1e10      	subs	r0, r2, #0
 80153e6:	bf18      	it	ne
 80153e8:	2001      	movne	r0, #1
 80153ea:	b002      	add	sp, #8
 80153ec:	4770      	bx	lr
 80153ee:	4610      	mov	r0, r2
 80153f0:	e7fb      	b.n	80153ea <__ascii_mbtowc+0x16>
 80153f2:	f06f 0001 	mvn.w	r0, #1
 80153f6:	e7f8      	b.n	80153ea <__ascii_mbtowc+0x16>

080153f8 <memcpy>:
 80153f8:	440a      	add	r2, r1
 80153fa:	4291      	cmp	r1, r2
 80153fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8015400:	d100      	bne.n	8015404 <memcpy+0xc>
 8015402:	4770      	bx	lr
 8015404:	b510      	push	{r4, lr}
 8015406:	f811 4b01 	ldrb.w	r4, [r1], #1
 801540a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801540e:	4291      	cmp	r1, r2
 8015410:	d1f9      	bne.n	8015406 <memcpy+0xe>
 8015412:	bd10      	pop	{r4, pc}

08015414 <_Balloc>:
 8015414:	b570      	push	{r4, r5, r6, lr}
 8015416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015418:	4604      	mov	r4, r0
 801541a:	460d      	mov	r5, r1
 801541c:	b976      	cbnz	r6, 801543c <_Balloc+0x28>
 801541e:	2010      	movs	r0, #16
 8015420:	f7ff ffd0 	bl	80153c4 <malloc>
 8015424:	4602      	mov	r2, r0
 8015426:	6260      	str	r0, [r4, #36]	; 0x24
 8015428:	b920      	cbnz	r0, 8015434 <_Balloc+0x20>
 801542a:	4b18      	ldr	r3, [pc, #96]	; (801548c <_Balloc+0x78>)
 801542c:	4818      	ldr	r0, [pc, #96]	; (8015490 <_Balloc+0x7c>)
 801542e:	2166      	movs	r1, #102	; 0x66
 8015430:	f7fe fdaa 	bl	8013f88 <__assert_func>
 8015434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015438:	6006      	str	r6, [r0, #0]
 801543a:	60c6      	str	r6, [r0, #12]
 801543c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801543e:	68f3      	ldr	r3, [r6, #12]
 8015440:	b183      	cbz	r3, 8015464 <_Balloc+0x50>
 8015442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015444:	68db      	ldr	r3, [r3, #12]
 8015446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801544a:	b9b8      	cbnz	r0, 801547c <_Balloc+0x68>
 801544c:	2101      	movs	r1, #1
 801544e:	fa01 f605 	lsl.w	r6, r1, r5
 8015452:	1d72      	adds	r2, r6, #5
 8015454:	0092      	lsls	r2, r2, #2
 8015456:	4620      	mov	r0, r4
 8015458:	f000 fc97 	bl	8015d8a <_calloc_r>
 801545c:	b160      	cbz	r0, 8015478 <_Balloc+0x64>
 801545e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015462:	e00e      	b.n	8015482 <_Balloc+0x6e>
 8015464:	2221      	movs	r2, #33	; 0x21
 8015466:	2104      	movs	r1, #4
 8015468:	4620      	mov	r0, r4
 801546a:	f000 fc8e 	bl	8015d8a <_calloc_r>
 801546e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015470:	60f0      	str	r0, [r6, #12]
 8015472:	68db      	ldr	r3, [r3, #12]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d1e4      	bne.n	8015442 <_Balloc+0x2e>
 8015478:	2000      	movs	r0, #0
 801547a:	bd70      	pop	{r4, r5, r6, pc}
 801547c:	6802      	ldr	r2, [r0, #0]
 801547e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015482:	2300      	movs	r3, #0
 8015484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015488:	e7f7      	b.n	801547a <_Balloc+0x66>
 801548a:	bf00      	nop
 801548c:	0802aa08 	.word	0x0802aa08
 8015490:	0802acb8 	.word	0x0802acb8

08015494 <_Bfree>:
 8015494:	b570      	push	{r4, r5, r6, lr}
 8015496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015498:	4605      	mov	r5, r0
 801549a:	460c      	mov	r4, r1
 801549c:	b976      	cbnz	r6, 80154bc <_Bfree+0x28>
 801549e:	2010      	movs	r0, #16
 80154a0:	f7ff ff90 	bl	80153c4 <malloc>
 80154a4:	4602      	mov	r2, r0
 80154a6:	6268      	str	r0, [r5, #36]	; 0x24
 80154a8:	b920      	cbnz	r0, 80154b4 <_Bfree+0x20>
 80154aa:	4b09      	ldr	r3, [pc, #36]	; (80154d0 <_Bfree+0x3c>)
 80154ac:	4809      	ldr	r0, [pc, #36]	; (80154d4 <_Bfree+0x40>)
 80154ae:	218a      	movs	r1, #138	; 0x8a
 80154b0:	f7fe fd6a 	bl	8013f88 <__assert_func>
 80154b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80154b8:	6006      	str	r6, [r0, #0]
 80154ba:	60c6      	str	r6, [r0, #12]
 80154bc:	b13c      	cbz	r4, 80154ce <_Bfree+0x3a>
 80154be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80154c0:	6862      	ldr	r2, [r4, #4]
 80154c2:	68db      	ldr	r3, [r3, #12]
 80154c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80154c8:	6021      	str	r1, [r4, #0]
 80154ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80154ce:	bd70      	pop	{r4, r5, r6, pc}
 80154d0:	0802aa08 	.word	0x0802aa08
 80154d4:	0802acb8 	.word	0x0802acb8

080154d8 <__multadd>:
 80154d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154dc:	690e      	ldr	r6, [r1, #16]
 80154de:	4607      	mov	r7, r0
 80154e0:	4698      	mov	r8, r3
 80154e2:	460c      	mov	r4, r1
 80154e4:	f101 0014 	add.w	r0, r1, #20
 80154e8:	2300      	movs	r3, #0
 80154ea:	6805      	ldr	r5, [r0, #0]
 80154ec:	b2a9      	uxth	r1, r5
 80154ee:	fb02 8101 	mla	r1, r2, r1, r8
 80154f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80154f6:	0c2d      	lsrs	r5, r5, #16
 80154f8:	fb02 c505 	mla	r5, r2, r5, ip
 80154fc:	b289      	uxth	r1, r1
 80154fe:	3301      	adds	r3, #1
 8015500:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8015504:	429e      	cmp	r6, r3
 8015506:	f840 1b04 	str.w	r1, [r0], #4
 801550a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801550e:	dcec      	bgt.n	80154ea <__multadd+0x12>
 8015510:	f1b8 0f00 	cmp.w	r8, #0
 8015514:	d022      	beq.n	801555c <__multadd+0x84>
 8015516:	68a3      	ldr	r3, [r4, #8]
 8015518:	42b3      	cmp	r3, r6
 801551a:	dc19      	bgt.n	8015550 <__multadd+0x78>
 801551c:	6861      	ldr	r1, [r4, #4]
 801551e:	4638      	mov	r0, r7
 8015520:	3101      	adds	r1, #1
 8015522:	f7ff ff77 	bl	8015414 <_Balloc>
 8015526:	4605      	mov	r5, r0
 8015528:	b928      	cbnz	r0, 8015536 <__multadd+0x5e>
 801552a:	4602      	mov	r2, r0
 801552c:	4b0d      	ldr	r3, [pc, #52]	; (8015564 <__multadd+0x8c>)
 801552e:	480e      	ldr	r0, [pc, #56]	; (8015568 <__multadd+0x90>)
 8015530:	21b5      	movs	r1, #181	; 0xb5
 8015532:	f7fe fd29 	bl	8013f88 <__assert_func>
 8015536:	6922      	ldr	r2, [r4, #16]
 8015538:	3202      	adds	r2, #2
 801553a:	f104 010c 	add.w	r1, r4, #12
 801553e:	0092      	lsls	r2, r2, #2
 8015540:	300c      	adds	r0, #12
 8015542:	f7ff ff59 	bl	80153f8 <memcpy>
 8015546:	4621      	mov	r1, r4
 8015548:	4638      	mov	r0, r7
 801554a:	f7ff ffa3 	bl	8015494 <_Bfree>
 801554e:	462c      	mov	r4, r5
 8015550:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015554:	3601      	adds	r6, #1
 8015556:	f8c3 8014 	str.w	r8, [r3, #20]
 801555a:	6126      	str	r6, [r4, #16]
 801555c:	4620      	mov	r0, r4
 801555e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015562:	bf00      	nop
 8015564:	0802ac29 	.word	0x0802ac29
 8015568:	0802acb8 	.word	0x0802acb8

0801556c <__s2b>:
 801556c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015570:	460c      	mov	r4, r1
 8015572:	4615      	mov	r5, r2
 8015574:	461f      	mov	r7, r3
 8015576:	2209      	movs	r2, #9
 8015578:	3308      	adds	r3, #8
 801557a:	4606      	mov	r6, r0
 801557c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015580:	2100      	movs	r1, #0
 8015582:	2201      	movs	r2, #1
 8015584:	429a      	cmp	r2, r3
 8015586:	db09      	blt.n	801559c <__s2b+0x30>
 8015588:	4630      	mov	r0, r6
 801558a:	f7ff ff43 	bl	8015414 <_Balloc>
 801558e:	b940      	cbnz	r0, 80155a2 <__s2b+0x36>
 8015590:	4602      	mov	r2, r0
 8015592:	4b19      	ldr	r3, [pc, #100]	; (80155f8 <__s2b+0x8c>)
 8015594:	4819      	ldr	r0, [pc, #100]	; (80155fc <__s2b+0x90>)
 8015596:	21ce      	movs	r1, #206	; 0xce
 8015598:	f7fe fcf6 	bl	8013f88 <__assert_func>
 801559c:	0052      	lsls	r2, r2, #1
 801559e:	3101      	adds	r1, #1
 80155a0:	e7f0      	b.n	8015584 <__s2b+0x18>
 80155a2:	9b08      	ldr	r3, [sp, #32]
 80155a4:	6143      	str	r3, [r0, #20]
 80155a6:	2d09      	cmp	r5, #9
 80155a8:	f04f 0301 	mov.w	r3, #1
 80155ac:	6103      	str	r3, [r0, #16]
 80155ae:	dd16      	ble.n	80155de <__s2b+0x72>
 80155b0:	f104 0909 	add.w	r9, r4, #9
 80155b4:	46c8      	mov	r8, r9
 80155b6:	442c      	add	r4, r5
 80155b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80155bc:	4601      	mov	r1, r0
 80155be:	3b30      	subs	r3, #48	; 0x30
 80155c0:	220a      	movs	r2, #10
 80155c2:	4630      	mov	r0, r6
 80155c4:	f7ff ff88 	bl	80154d8 <__multadd>
 80155c8:	45a0      	cmp	r8, r4
 80155ca:	d1f5      	bne.n	80155b8 <__s2b+0x4c>
 80155cc:	f1a5 0408 	sub.w	r4, r5, #8
 80155d0:	444c      	add	r4, r9
 80155d2:	1b2d      	subs	r5, r5, r4
 80155d4:	1963      	adds	r3, r4, r5
 80155d6:	42bb      	cmp	r3, r7
 80155d8:	db04      	blt.n	80155e4 <__s2b+0x78>
 80155da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155de:	340a      	adds	r4, #10
 80155e0:	2509      	movs	r5, #9
 80155e2:	e7f6      	b.n	80155d2 <__s2b+0x66>
 80155e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80155e8:	4601      	mov	r1, r0
 80155ea:	3b30      	subs	r3, #48	; 0x30
 80155ec:	220a      	movs	r2, #10
 80155ee:	4630      	mov	r0, r6
 80155f0:	f7ff ff72 	bl	80154d8 <__multadd>
 80155f4:	e7ee      	b.n	80155d4 <__s2b+0x68>
 80155f6:	bf00      	nop
 80155f8:	0802ac29 	.word	0x0802ac29
 80155fc:	0802acb8 	.word	0x0802acb8

08015600 <__hi0bits>:
 8015600:	0c03      	lsrs	r3, r0, #16
 8015602:	041b      	lsls	r3, r3, #16
 8015604:	b9d3      	cbnz	r3, 801563c <__hi0bits+0x3c>
 8015606:	0400      	lsls	r0, r0, #16
 8015608:	2310      	movs	r3, #16
 801560a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801560e:	bf04      	itt	eq
 8015610:	0200      	lsleq	r0, r0, #8
 8015612:	3308      	addeq	r3, #8
 8015614:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015618:	bf04      	itt	eq
 801561a:	0100      	lsleq	r0, r0, #4
 801561c:	3304      	addeq	r3, #4
 801561e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015622:	bf04      	itt	eq
 8015624:	0080      	lsleq	r0, r0, #2
 8015626:	3302      	addeq	r3, #2
 8015628:	2800      	cmp	r0, #0
 801562a:	db05      	blt.n	8015638 <__hi0bits+0x38>
 801562c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015630:	f103 0301 	add.w	r3, r3, #1
 8015634:	bf08      	it	eq
 8015636:	2320      	moveq	r3, #32
 8015638:	4618      	mov	r0, r3
 801563a:	4770      	bx	lr
 801563c:	2300      	movs	r3, #0
 801563e:	e7e4      	b.n	801560a <__hi0bits+0xa>

08015640 <__lo0bits>:
 8015640:	6803      	ldr	r3, [r0, #0]
 8015642:	f013 0207 	ands.w	r2, r3, #7
 8015646:	4601      	mov	r1, r0
 8015648:	d00b      	beq.n	8015662 <__lo0bits+0x22>
 801564a:	07da      	lsls	r2, r3, #31
 801564c:	d424      	bmi.n	8015698 <__lo0bits+0x58>
 801564e:	0798      	lsls	r0, r3, #30
 8015650:	bf49      	itett	mi
 8015652:	085b      	lsrmi	r3, r3, #1
 8015654:	089b      	lsrpl	r3, r3, #2
 8015656:	2001      	movmi	r0, #1
 8015658:	600b      	strmi	r3, [r1, #0]
 801565a:	bf5c      	itt	pl
 801565c:	600b      	strpl	r3, [r1, #0]
 801565e:	2002      	movpl	r0, #2
 8015660:	4770      	bx	lr
 8015662:	b298      	uxth	r0, r3
 8015664:	b9b0      	cbnz	r0, 8015694 <__lo0bits+0x54>
 8015666:	0c1b      	lsrs	r3, r3, #16
 8015668:	2010      	movs	r0, #16
 801566a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801566e:	bf04      	itt	eq
 8015670:	0a1b      	lsreq	r3, r3, #8
 8015672:	3008      	addeq	r0, #8
 8015674:	071a      	lsls	r2, r3, #28
 8015676:	bf04      	itt	eq
 8015678:	091b      	lsreq	r3, r3, #4
 801567a:	3004      	addeq	r0, #4
 801567c:	079a      	lsls	r2, r3, #30
 801567e:	bf04      	itt	eq
 8015680:	089b      	lsreq	r3, r3, #2
 8015682:	3002      	addeq	r0, #2
 8015684:	07da      	lsls	r2, r3, #31
 8015686:	d403      	bmi.n	8015690 <__lo0bits+0x50>
 8015688:	085b      	lsrs	r3, r3, #1
 801568a:	f100 0001 	add.w	r0, r0, #1
 801568e:	d005      	beq.n	801569c <__lo0bits+0x5c>
 8015690:	600b      	str	r3, [r1, #0]
 8015692:	4770      	bx	lr
 8015694:	4610      	mov	r0, r2
 8015696:	e7e8      	b.n	801566a <__lo0bits+0x2a>
 8015698:	2000      	movs	r0, #0
 801569a:	4770      	bx	lr
 801569c:	2020      	movs	r0, #32
 801569e:	4770      	bx	lr

080156a0 <__i2b>:
 80156a0:	b510      	push	{r4, lr}
 80156a2:	460c      	mov	r4, r1
 80156a4:	2101      	movs	r1, #1
 80156a6:	f7ff feb5 	bl	8015414 <_Balloc>
 80156aa:	4602      	mov	r2, r0
 80156ac:	b928      	cbnz	r0, 80156ba <__i2b+0x1a>
 80156ae:	4b05      	ldr	r3, [pc, #20]	; (80156c4 <__i2b+0x24>)
 80156b0:	4805      	ldr	r0, [pc, #20]	; (80156c8 <__i2b+0x28>)
 80156b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80156b6:	f7fe fc67 	bl	8013f88 <__assert_func>
 80156ba:	2301      	movs	r3, #1
 80156bc:	6144      	str	r4, [r0, #20]
 80156be:	6103      	str	r3, [r0, #16]
 80156c0:	bd10      	pop	{r4, pc}
 80156c2:	bf00      	nop
 80156c4:	0802ac29 	.word	0x0802ac29
 80156c8:	0802acb8 	.word	0x0802acb8

080156cc <__multiply>:
 80156cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d0:	4614      	mov	r4, r2
 80156d2:	690a      	ldr	r2, [r1, #16]
 80156d4:	6923      	ldr	r3, [r4, #16]
 80156d6:	429a      	cmp	r2, r3
 80156d8:	bfb8      	it	lt
 80156da:	460b      	movlt	r3, r1
 80156dc:	460d      	mov	r5, r1
 80156de:	bfbc      	itt	lt
 80156e0:	4625      	movlt	r5, r4
 80156e2:	461c      	movlt	r4, r3
 80156e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80156e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80156ec:	68ab      	ldr	r3, [r5, #8]
 80156ee:	6869      	ldr	r1, [r5, #4]
 80156f0:	eb0a 0709 	add.w	r7, sl, r9
 80156f4:	42bb      	cmp	r3, r7
 80156f6:	b085      	sub	sp, #20
 80156f8:	bfb8      	it	lt
 80156fa:	3101      	addlt	r1, #1
 80156fc:	f7ff fe8a 	bl	8015414 <_Balloc>
 8015700:	b930      	cbnz	r0, 8015710 <__multiply+0x44>
 8015702:	4602      	mov	r2, r0
 8015704:	4b42      	ldr	r3, [pc, #264]	; (8015810 <__multiply+0x144>)
 8015706:	4843      	ldr	r0, [pc, #268]	; (8015814 <__multiply+0x148>)
 8015708:	f240 115d 	movw	r1, #349	; 0x15d
 801570c:	f7fe fc3c 	bl	8013f88 <__assert_func>
 8015710:	f100 0614 	add.w	r6, r0, #20
 8015714:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015718:	4633      	mov	r3, r6
 801571a:	2200      	movs	r2, #0
 801571c:	4543      	cmp	r3, r8
 801571e:	d31e      	bcc.n	801575e <__multiply+0x92>
 8015720:	f105 0c14 	add.w	ip, r5, #20
 8015724:	f104 0314 	add.w	r3, r4, #20
 8015728:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801572c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015730:	9202      	str	r2, [sp, #8]
 8015732:	ebac 0205 	sub.w	r2, ip, r5
 8015736:	3a15      	subs	r2, #21
 8015738:	f022 0203 	bic.w	r2, r2, #3
 801573c:	3204      	adds	r2, #4
 801573e:	f105 0115 	add.w	r1, r5, #21
 8015742:	458c      	cmp	ip, r1
 8015744:	bf38      	it	cc
 8015746:	2204      	movcc	r2, #4
 8015748:	9201      	str	r2, [sp, #4]
 801574a:	9a02      	ldr	r2, [sp, #8]
 801574c:	9303      	str	r3, [sp, #12]
 801574e:	429a      	cmp	r2, r3
 8015750:	d808      	bhi.n	8015764 <__multiply+0x98>
 8015752:	2f00      	cmp	r7, #0
 8015754:	dc55      	bgt.n	8015802 <__multiply+0x136>
 8015756:	6107      	str	r7, [r0, #16]
 8015758:	b005      	add	sp, #20
 801575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801575e:	f843 2b04 	str.w	r2, [r3], #4
 8015762:	e7db      	b.n	801571c <__multiply+0x50>
 8015764:	f8b3 a000 	ldrh.w	sl, [r3]
 8015768:	f1ba 0f00 	cmp.w	sl, #0
 801576c:	d020      	beq.n	80157b0 <__multiply+0xe4>
 801576e:	f105 0e14 	add.w	lr, r5, #20
 8015772:	46b1      	mov	r9, r6
 8015774:	2200      	movs	r2, #0
 8015776:	f85e 4b04 	ldr.w	r4, [lr], #4
 801577a:	f8d9 b000 	ldr.w	fp, [r9]
 801577e:	b2a1      	uxth	r1, r4
 8015780:	fa1f fb8b 	uxth.w	fp, fp
 8015784:	fb0a b101 	mla	r1, sl, r1, fp
 8015788:	4411      	add	r1, r2
 801578a:	f8d9 2000 	ldr.w	r2, [r9]
 801578e:	0c24      	lsrs	r4, r4, #16
 8015790:	0c12      	lsrs	r2, r2, #16
 8015792:	fb0a 2404 	mla	r4, sl, r4, r2
 8015796:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801579a:	b289      	uxth	r1, r1
 801579c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80157a0:	45f4      	cmp	ip, lr
 80157a2:	f849 1b04 	str.w	r1, [r9], #4
 80157a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80157aa:	d8e4      	bhi.n	8015776 <__multiply+0xaa>
 80157ac:	9901      	ldr	r1, [sp, #4]
 80157ae:	5072      	str	r2, [r6, r1]
 80157b0:	9a03      	ldr	r2, [sp, #12]
 80157b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80157b6:	3304      	adds	r3, #4
 80157b8:	f1b9 0f00 	cmp.w	r9, #0
 80157bc:	d01f      	beq.n	80157fe <__multiply+0x132>
 80157be:	6834      	ldr	r4, [r6, #0]
 80157c0:	f105 0114 	add.w	r1, r5, #20
 80157c4:	46b6      	mov	lr, r6
 80157c6:	f04f 0a00 	mov.w	sl, #0
 80157ca:	880a      	ldrh	r2, [r1, #0]
 80157cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80157d0:	fb09 b202 	mla	r2, r9, r2, fp
 80157d4:	4492      	add	sl, r2
 80157d6:	b2a4      	uxth	r4, r4
 80157d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80157dc:	f84e 4b04 	str.w	r4, [lr], #4
 80157e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80157e4:	f8be 2000 	ldrh.w	r2, [lr]
 80157e8:	0c24      	lsrs	r4, r4, #16
 80157ea:	fb09 2404 	mla	r4, r9, r4, r2
 80157ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80157f2:	458c      	cmp	ip, r1
 80157f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80157f8:	d8e7      	bhi.n	80157ca <__multiply+0xfe>
 80157fa:	9a01      	ldr	r2, [sp, #4]
 80157fc:	50b4      	str	r4, [r6, r2]
 80157fe:	3604      	adds	r6, #4
 8015800:	e7a3      	b.n	801574a <__multiply+0x7e>
 8015802:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015806:	2b00      	cmp	r3, #0
 8015808:	d1a5      	bne.n	8015756 <__multiply+0x8a>
 801580a:	3f01      	subs	r7, #1
 801580c:	e7a1      	b.n	8015752 <__multiply+0x86>
 801580e:	bf00      	nop
 8015810:	0802ac29 	.word	0x0802ac29
 8015814:	0802acb8 	.word	0x0802acb8

08015818 <__pow5mult>:
 8015818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801581c:	4615      	mov	r5, r2
 801581e:	f012 0203 	ands.w	r2, r2, #3
 8015822:	4606      	mov	r6, r0
 8015824:	460f      	mov	r7, r1
 8015826:	d007      	beq.n	8015838 <__pow5mult+0x20>
 8015828:	4c25      	ldr	r4, [pc, #148]	; (80158c0 <__pow5mult+0xa8>)
 801582a:	3a01      	subs	r2, #1
 801582c:	2300      	movs	r3, #0
 801582e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015832:	f7ff fe51 	bl	80154d8 <__multadd>
 8015836:	4607      	mov	r7, r0
 8015838:	10ad      	asrs	r5, r5, #2
 801583a:	d03d      	beq.n	80158b8 <__pow5mult+0xa0>
 801583c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801583e:	b97c      	cbnz	r4, 8015860 <__pow5mult+0x48>
 8015840:	2010      	movs	r0, #16
 8015842:	f7ff fdbf 	bl	80153c4 <malloc>
 8015846:	4602      	mov	r2, r0
 8015848:	6270      	str	r0, [r6, #36]	; 0x24
 801584a:	b928      	cbnz	r0, 8015858 <__pow5mult+0x40>
 801584c:	4b1d      	ldr	r3, [pc, #116]	; (80158c4 <__pow5mult+0xac>)
 801584e:	481e      	ldr	r0, [pc, #120]	; (80158c8 <__pow5mult+0xb0>)
 8015850:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015854:	f7fe fb98 	bl	8013f88 <__assert_func>
 8015858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801585c:	6004      	str	r4, [r0, #0]
 801585e:	60c4      	str	r4, [r0, #12]
 8015860:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015864:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015868:	b94c      	cbnz	r4, 801587e <__pow5mult+0x66>
 801586a:	f240 2171 	movw	r1, #625	; 0x271
 801586e:	4630      	mov	r0, r6
 8015870:	f7ff ff16 	bl	80156a0 <__i2b>
 8015874:	2300      	movs	r3, #0
 8015876:	f8c8 0008 	str.w	r0, [r8, #8]
 801587a:	4604      	mov	r4, r0
 801587c:	6003      	str	r3, [r0, #0]
 801587e:	f04f 0900 	mov.w	r9, #0
 8015882:	07eb      	lsls	r3, r5, #31
 8015884:	d50a      	bpl.n	801589c <__pow5mult+0x84>
 8015886:	4639      	mov	r1, r7
 8015888:	4622      	mov	r2, r4
 801588a:	4630      	mov	r0, r6
 801588c:	f7ff ff1e 	bl	80156cc <__multiply>
 8015890:	4639      	mov	r1, r7
 8015892:	4680      	mov	r8, r0
 8015894:	4630      	mov	r0, r6
 8015896:	f7ff fdfd 	bl	8015494 <_Bfree>
 801589a:	4647      	mov	r7, r8
 801589c:	106d      	asrs	r5, r5, #1
 801589e:	d00b      	beq.n	80158b8 <__pow5mult+0xa0>
 80158a0:	6820      	ldr	r0, [r4, #0]
 80158a2:	b938      	cbnz	r0, 80158b4 <__pow5mult+0x9c>
 80158a4:	4622      	mov	r2, r4
 80158a6:	4621      	mov	r1, r4
 80158a8:	4630      	mov	r0, r6
 80158aa:	f7ff ff0f 	bl	80156cc <__multiply>
 80158ae:	6020      	str	r0, [r4, #0]
 80158b0:	f8c0 9000 	str.w	r9, [r0]
 80158b4:	4604      	mov	r4, r0
 80158b6:	e7e4      	b.n	8015882 <__pow5mult+0x6a>
 80158b8:	4638      	mov	r0, r7
 80158ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158be:	bf00      	nop
 80158c0:	0802ae08 	.word	0x0802ae08
 80158c4:	0802aa08 	.word	0x0802aa08
 80158c8:	0802acb8 	.word	0x0802acb8

080158cc <__lshift>:
 80158cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158d0:	460c      	mov	r4, r1
 80158d2:	6849      	ldr	r1, [r1, #4]
 80158d4:	6923      	ldr	r3, [r4, #16]
 80158d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80158da:	68a3      	ldr	r3, [r4, #8]
 80158dc:	4607      	mov	r7, r0
 80158de:	4691      	mov	r9, r2
 80158e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80158e4:	f108 0601 	add.w	r6, r8, #1
 80158e8:	42b3      	cmp	r3, r6
 80158ea:	db0b      	blt.n	8015904 <__lshift+0x38>
 80158ec:	4638      	mov	r0, r7
 80158ee:	f7ff fd91 	bl	8015414 <_Balloc>
 80158f2:	4605      	mov	r5, r0
 80158f4:	b948      	cbnz	r0, 801590a <__lshift+0x3e>
 80158f6:	4602      	mov	r2, r0
 80158f8:	4b28      	ldr	r3, [pc, #160]	; (801599c <__lshift+0xd0>)
 80158fa:	4829      	ldr	r0, [pc, #164]	; (80159a0 <__lshift+0xd4>)
 80158fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015900:	f7fe fb42 	bl	8013f88 <__assert_func>
 8015904:	3101      	adds	r1, #1
 8015906:	005b      	lsls	r3, r3, #1
 8015908:	e7ee      	b.n	80158e8 <__lshift+0x1c>
 801590a:	2300      	movs	r3, #0
 801590c:	f100 0114 	add.w	r1, r0, #20
 8015910:	f100 0210 	add.w	r2, r0, #16
 8015914:	4618      	mov	r0, r3
 8015916:	4553      	cmp	r3, sl
 8015918:	db33      	blt.n	8015982 <__lshift+0xb6>
 801591a:	6920      	ldr	r0, [r4, #16]
 801591c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015920:	f104 0314 	add.w	r3, r4, #20
 8015924:	f019 091f 	ands.w	r9, r9, #31
 8015928:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801592c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015930:	d02b      	beq.n	801598a <__lshift+0xbe>
 8015932:	f1c9 0e20 	rsb	lr, r9, #32
 8015936:	468a      	mov	sl, r1
 8015938:	2200      	movs	r2, #0
 801593a:	6818      	ldr	r0, [r3, #0]
 801593c:	fa00 f009 	lsl.w	r0, r0, r9
 8015940:	4302      	orrs	r2, r0
 8015942:	f84a 2b04 	str.w	r2, [sl], #4
 8015946:	f853 2b04 	ldr.w	r2, [r3], #4
 801594a:	459c      	cmp	ip, r3
 801594c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015950:	d8f3      	bhi.n	801593a <__lshift+0x6e>
 8015952:	ebac 0304 	sub.w	r3, ip, r4
 8015956:	3b15      	subs	r3, #21
 8015958:	f023 0303 	bic.w	r3, r3, #3
 801595c:	3304      	adds	r3, #4
 801595e:	f104 0015 	add.w	r0, r4, #21
 8015962:	4584      	cmp	ip, r0
 8015964:	bf38      	it	cc
 8015966:	2304      	movcc	r3, #4
 8015968:	50ca      	str	r2, [r1, r3]
 801596a:	b10a      	cbz	r2, 8015970 <__lshift+0xa4>
 801596c:	f108 0602 	add.w	r6, r8, #2
 8015970:	3e01      	subs	r6, #1
 8015972:	4638      	mov	r0, r7
 8015974:	612e      	str	r6, [r5, #16]
 8015976:	4621      	mov	r1, r4
 8015978:	f7ff fd8c 	bl	8015494 <_Bfree>
 801597c:	4628      	mov	r0, r5
 801597e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015982:	f842 0f04 	str.w	r0, [r2, #4]!
 8015986:	3301      	adds	r3, #1
 8015988:	e7c5      	b.n	8015916 <__lshift+0x4a>
 801598a:	3904      	subs	r1, #4
 801598c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015990:	f841 2f04 	str.w	r2, [r1, #4]!
 8015994:	459c      	cmp	ip, r3
 8015996:	d8f9      	bhi.n	801598c <__lshift+0xc0>
 8015998:	e7ea      	b.n	8015970 <__lshift+0xa4>
 801599a:	bf00      	nop
 801599c:	0802ac29 	.word	0x0802ac29
 80159a0:	0802acb8 	.word	0x0802acb8

080159a4 <__mcmp>:
 80159a4:	b530      	push	{r4, r5, lr}
 80159a6:	6902      	ldr	r2, [r0, #16]
 80159a8:	690c      	ldr	r4, [r1, #16]
 80159aa:	1b12      	subs	r2, r2, r4
 80159ac:	d10e      	bne.n	80159cc <__mcmp+0x28>
 80159ae:	f100 0314 	add.w	r3, r0, #20
 80159b2:	3114      	adds	r1, #20
 80159b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80159b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80159bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80159c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80159c4:	42a5      	cmp	r5, r4
 80159c6:	d003      	beq.n	80159d0 <__mcmp+0x2c>
 80159c8:	d305      	bcc.n	80159d6 <__mcmp+0x32>
 80159ca:	2201      	movs	r2, #1
 80159cc:	4610      	mov	r0, r2
 80159ce:	bd30      	pop	{r4, r5, pc}
 80159d0:	4283      	cmp	r3, r0
 80159d2:	d3f3      	bcc.n	80159bc <__mcmp+0x18>
 80159d4:	e7fa      	b.n	80159cc <__mcmp+0x28>
 80159d6:	f04f 32ff 	mov.w	r2, #4294967295
 80159da:	e7f7      	b.n	80159cc <__mcmp+0x28>

080159dc <__mdiff>:
 80159dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159e0:	460c      	mov	r4, r1
 80159e2:	4606      	mov	r6, r0
 80159e4:	4611      	mov	r1, r2
 80159e6:	4620      	mov	r0, r4
 80159e8:	4617      	mov	r7, r2
 80159ea:	f7ff ffdb 	bl	80159a4 <__mcmp>
 80159ee:	1e05      	subs	r5, r0, #0
 80159f0:	d110      	bne.n	8015a14 <__mdiff+0x38>
 80159f2:	4629      	mov	r1, r5
 80159f4:	4630      	mov	r0, r6
 80159f6:	f7ff fd0d 	bl	8015414 <_Balloc>
 80159fa:	b930      	cbnz	r0, 8015a0a <__mdiff+0x2e>
 80159fc:	4b39      	ldr	r3, [pc, #228]	; (8015ae4 <__mdiff+0x108>)
 80159fe:	4602      	mov	r2, r0
 8015a00:	f240 2132 	movw	r1, #562	; 0x232
 8015a04:	4838      	ldr	r0, [pc, #224]	; (8015ae8 <__mdiff+0x10c>)
 8015a06:	f7fe fabf 	bl	8013f88 <__assert_func>
 8015a0a:	2301      	movs	r3, #1
 8015a0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a14:	bfa4      	itt	ge
 8015a16:	463b      	movge	r3, r7
 8015a18:	4627      	movge	r7, r4
 8015a1a:	4630      	mov	r0, r6
 8015a1c:	6879      	ldr	r1, [r7, #4]
 8015a1e:	bfa6      	itte	ge
 8015a20:	461c      	movge	r4, r3
 8015a22:	2500      	movge	r5, #0
 8015a24:	2501      	movlt	r5, #1
 8015a26:	f7ff fcf5 	bl	8015414 <_Balloc>
 8015a2a:	b920      	cbnz	r0, 8015a36 <__mdiff+0x5a>
 8015a2c:	4b2d      	ldr	r3, [pc, #180]	; (8015ae4 <__mdiff+0x108>)
 8015a2e:	4602      	mov	r2, r0
 8015a30:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015a34:	e7e6      	b.n	8015a04 <__mdiff+0x28>
 8015a36:	693e      	ldr	r6, [r7, #16]
 8015a38:	60c5      	str	r5, [r0, #12]
 8015a3a:	6925      	ldr	r5, [r4, #16]
 8015a3c:	f107 0114 	add.w	r1, r7, #20
 8015a40:	f104 0914 	add.w	r9, r4, #20
 8015a44:	f100 0e14 	add.w	lr, r0, #20
 8015a48:	f107 0210 	add.w	r2, r7, #16
 8015a4c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015a50:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015a54:	46f2      	mov	sl, lr
 8015a56:	2700      	movs	r7, #0
 8015a58:	f859 3b04 	ldr.w	r3, [r9], #4
 8015a5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015a60:	fa1f f883 	uxth.w	r8, r3
 8015a64:	fa17 f78b 	uxtah	r7, r7, fp
 8015a68:	0c1b      	lsrs	r3, r3, #16
 8015a6a:	eba7 0808 	sub.w	r8, r7, r8
 8015a6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015a72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015a76:	fa1f f888 	uxth.w	r8, r8
 8015a7a:	141f      	asrs	r7, r3, #16
 8015a7c:	454d      	cmp	r5, r9
 8015a7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015a82:	f84a 3b04 	str.w	r3, [sl], #4
 8015a86:	d8e7      	bhi.n	8015a58 <__mdiff+0x7c>
 8015a88:	1b2b      	subs	r3, r5, r4
 8015a8a:	3b15      	subs	r3, #21
 8015a8c:	f023 0303 	bic.w	r3, r3, #3
 8015a90:	3304      	adds	r3, #4
 8015a92:	3415      	adds	r4, #21
 8015a94:	42a5      	cmp	r5, r4
 8015a96:	bf38      	it	cc
 8015a98:	2304      	movcc	r3, #4
 8015a9a:	4419      	add	r1, r3
 8015a9c:	4473      	add	r3, lr
 8015a9e:	469e      	mov	lr, r3
 8015aa0:	460d      	mov	r5, r1
 8015aa2:	4565      	cmp	r5, ip
 8015aa4:	d30e      	bcc.n	8015ac4 <__mdiff+0xe8>
 8015aa6:	f10c 0203 	add.w	r2, ip, #3
 8015aaa:	1a52      	subs	r2, r2, r1
 8015aac:	f022 0203 	bic.w	r2, r2, #3
 8015ab0:	3903      	subs	r1, #3
 8015ab2:	458c      	cmp	ip, r1
 8015ab4:	bf38      	it	cc
 8015ab6:	2200      	movcc	r2, #0
 8015ab8:	441a      	add	r2, r3
 8015aba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015abe:	b17b      	cbz	r3, 8015ae0 <__mdiff+0x104>
 8015ac0:	6106      	str	r6, [r0, #16]
 8015ac2:	e7a5      	b.n	8015a10 <__mdiff+0x34>
 8015ac4:	f855 8b04 	ldr.w	r8, [r5], #4
 8015ac8:	fa17 f488 	uxtah	r4, r7, r8
 8015acc:	1422      	asrs	r2, r4, #16
 8015ace:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015ad2:	b2a4      	uxth	r4, r4
 8015ad4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015ad8:	f84e 4b04 	str.w	r4, [lr], #4
 8015adc:	1417      	asrs	r7, r2, #16
 8015ade:	e7e0      	b.n	8015aa2 <__mdiff+0xc6>
 8015ae0:	3e01      	subs	r6, #1
 8015ae2:	e7ea      	b.n	8015aba <__mdiff+0xde>
 8015ae4:	0802ac29 	.word	0x0802ac29
 8015ae8:	0802acb8 	.word	0x0802acb8

08015aec <__ulp>:
 8015aec:	b082      	sub	sp, #8
 8015aee:	ed8d 0b00 	vstr	d0, [sp]
 8015af2:	9b01      	ldr	r3, [sp, #4]
 8015af4:	4912      	ldr	r1, [pc, #72]	; (8015b40 <__ulp+0x54>)
 8015af6:	4019      	ands	r1, r3
 8015af8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015afc:	2900      	cmp	r1, #0
 8015afe:	dd05      	ble.n	8015b0c <__ulp+0x20>
 8015b00:	2200      	movs	r2, #0
 8015b02:	460b      	mov	r3, r1
 8015b04:	ec43 2b10 	vmov	d0, r2, r3
 8015b08:	b002      	add	sp, #8
 8015b0a:	4770      	bx	lr
 8015b0c:	4249      	negs	r1, r1
 8015b0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015b12:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015b16:	f04f 0200 	mov.w	r2, #0
 8015b1a:	f04f 0300 	mov.w	r3, #0
 8015b1e:	da04      	bge.n	8015b2a <__ulp+0x3e>
 8015b20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015b24:	fa41 f300 	asr.w	r3, r1, r0
 8015b28:	e7ec      	b.n	8015b04 <__ulp+0x18>
 8015b2a:	f1a0 0114 	sub.w	r1, r0, #20
 8015b2e:	291e      	cmp	r1, #30
 8015b30:	bfda      	itte	le
 8015b32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015b36:	fa20 f101 	lsrle.w	r1, r0, r1
 8015b3a:	2101      	movgt	r1, #1
 8015b3c:	460a      	mov	r2, r1
 8015b3e:	e7e1      	b.n	8015b04 <__ulp+0x18>
 8015b40:	7ff00000 	.word	0x7ff00000

08015b44 <__b2d>:
 8015b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b46:	6905      	ldr	r5, [r0, #16]
 8015b48:	f100 0714 	add.w	r7, r0, #20
 8015b4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015b50:	1f2e      	subs	r6, r5, #4
 8015b52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015b56:	4620      	mov	r0, r4
 8015b58:	f7ff fd52 	bl	8015600 <__hi0bits>
 8015b5c:	f1c0 0320 	rsb	r3, r0, #32
 8015b60:	280a      	cmp	r0, #10
 8015b62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015be0 <__b2d+0x9c>
 8015b66:	600b      	str	r3, [r1, #0]
 8015b68:	dc14      	bgt.n	8015b94 <__b2d+0x50>
 8015b6a:	f1c0 0e0b 	rsb	lr, r0, #11
 8015b6e:	fa24 f10e 	lsr.w	r1, r4, lr
 8015b72:	42b7      	cmp	r7, r6
 8015b74:	ea41 030c 	orr.w	r3, r1, ip
 8015b78:	bf34      	ite	cc
 8015b7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015b7e:	2100      	movcs	r1, #0
 8015b80:	3015      	adds	r0, #21
 8015b82:	fa04 f000 	lsl.w	r0, r4, r0
 8015b86:	fa21 f10e 	lsr.w	r1, r1, lr
 8015b8a:	ea40 0201 	orr.w	r2, r0, r1
 8015b8e:	ec43 2b10 	vmov	d0, r2, r3
 8015b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b94:	42b7      	cmp	r7, r6
 8015b96:	bf3a      	itte	cc
 8015b98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015b9c:	f1a5 0608 	subcc.w	r6, r5, #8
 8015ba0:	2100      	movcs	r1, #0
 8015ba2:	380b      	subs	r0, #11
 8015ba4:	d017      	beq.n	8015bd6 <__b2d+0x92>
 8015ba6:	f1c0 0c20 	rsb	ip, r0, #32
 8015baa:	fa04 f500 	lsl.w	r5, r4, r0
 8015bae:	42be      	cmp	r6, r7
 8015bb0:	fa21 f40c 	lsr.w	r4, r1, ip
 8015bb4:	ea45 0504 	orr.w	r5, r5, r4
 8015bb8:	bf8c      	ite	hi
 8015bba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015bbe:	2400      	movls	r4, #0
 8015bc0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015bc4:	fa01 f000 	lsl.w	r0, r1, r0
 8015bc8:	fa24 f40c 	lsr.w	r4, r4, ip
 8015bcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015bd0:	ea40 0204 	orr.w	r2, r0, r4
 8015bd4:	e7db      	b.n	8015b8e <__b2d+0x4a>
 8015bd6:	ea44 030c 	orr.w	r3, r4, ip
 8015bda:	460a      	mov	r2, r1
 8015bdc:	e7d7      	b.n	8015b8e <__b2d+0x4a>
 8015bde:	bf00      	nop
 8015be0:	3ff00000 	.word	0x3ff00000

08015be4 <__d2b>:
 8015be4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015be8:	4689      	mov	r9, r1
 8015bea:	2101      	movs	r1, #1
 8015bec:	ec57 6b10 	vmov	r6, r7, d0
 8015bf0:	4690      	mov	r8, r2
 8015bf2:	f7ff fc0f 	bl	8015414 <_Balloc>
 8015bf6:	4604      	mov	r4, r0
 8015bf8:	b930      	cbnz	r0, 8015c08 <__d2b+0x24>
 8015bfa:	4602      	mov	r2, r0
 8015bfc:	4b25      	ldr	r3, [pc, #148]	; (8015c94 <__d2b+0xb0>)
 8015bfe:	4826      	ldr	r0, [pc, #152]	; (8015c98 <__d2b+0xb4>)
 8015c00:	f240 310a 	movw	r1, #778	; 0x30a
 8015c04:	f7fe f9c0 	bl	8013f88 <__assert_func>
 8015c08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015c0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015c10:	bb35      	cbnz	r5, 8015c60 <__d2b+0x7c>
 8015c12:	2e00      	cmp	r6, #0
 8015c14:	9301      	str	r3, [sp, #4]
 8015c16:	d028      	beq.n	8015c6a <__d2b+0x86>
 8015c18:	4668      	mov	r0, sp
 8015c1a:	9600      	str	r6, [sp, #0]
 8015c1c:	f7ff fd10 	bl	8015640 <__lo0bits>
 8015c20:	9900      	ldr	r1, [sp, #0]
 8015c22:	b300      	cbz	r0, 8015c66 <__d2b+0x82>
 8015c24:	9a01      	ldr	r2, [sp, #4]
 8015c26:	f1c0 0320 	rsb	r3, r0, #32
 8015c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8015c2e:	430b      	orrs	r3, r1
 8015c30:	40c2      	lsrs	r2, r0
 8015c32:	6163      	str	r3, [r4, #20]
 8015c34:	9201      	str	r2, [sp, #4]
 8015c36:	9b01      	ldr	r3, [sp, #4]
 8015c38:	61a3      	str	r3, [r4, #24]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	bf14      	ite	ne
 8015c3e:	2202      	movne	r2, #2
 8015c40:	2201      	moveq	r2, #1
 8015c42:	6122      	str	r2, [r4, #16]
 8015c44:	b1d5      	cbz	r5, 8015c7c <__d2b+0x98>
 8015c46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015c4a:	4405      	add	r5, r0
 8015c4c:	f8c9 5000 	str.w	r5, [r9]
 8015c50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015c54:	f8c8 0000 	str.w	r0, [r8]
 8015c58:	4620      	mov	r0, r4
 8015c5a:	b003      	add	sp, #12
 8015c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015c64:	e7d5      	b.n	8015c12 <__d2b+0x2e>
 8015c66:	6161      	str	r1, [r4, #20]
 8015c68:	e7e5      	b.n	8015c36 <__d2b+0x52>
 8015c6a:	a801      	add	r0, sp, #4
 8015c6c:	f7ff fce8 	bl	8015640 <__lo0bits>
 8015c70:	9b01      	ldr	r3, [sp, #4]
 8015c72:	6163      	str	r3, [r4, #20]
 8015c74:	2201      	movs	r2, #1
 8015c76:	6122      	str	r2, [r4, #16]
 8015c78:	3020      	adds	r0, #32
 8015c7a:	e7e3      	b.n	8015c44 <__d2b+0x60>
 8015c7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015c80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015c84:	f8c9 0000 	str.w	r0, [r9]
 8015c88:	6918      	ldr	r0, [r3, #16]
 8015c8a:	f7ff fcb9 	bl	8015600 <__hi0bits>
 8015c8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015c92:	e7df      	b.n	8015c54 <__d2b+0x70>
 8015c94:	0802ac29 	.word	0x0802ac29
 8015c98:	0802acb8 	.word	0x0802acb8

08015c9c <__ratio>:
 8015c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ca0:	4688      	mov	r8, r1
 8015ca2:	4669      	mov	r1, sp
 8015ca4:	4681      	mov	r9, r0
 8015ca6:	f7ff ff4d 	bl	8015b44 <__b2d>
 8015caa:	a901      	add	r1, sp, #4
 8015cac:	4640      	mov	r0, r8
 8015cae:	ec55 4b10 	vmov	r4, r5, d0
 8015cb2:	f7ff ff47 	bl	8015b44 <__b2d>
 8015cb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015cba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015cbe:	eba3 0c02 	sub.w	ip, r3, r2
 8015cc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015cc6:	1a9b      	subs	r3, r3, r2
 8015cc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015ccc:	ec51 0b10 	vmov	r0, r1, d0
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	bfd6      	itet	le
 8015cd4:	460a      	movle	r2, r1
 8015cd6:	462a      	movgt	r2, r5
 8015cd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015cdc:	468b      	mov	fp, r1
 8015cde:	462f      	mov	r7, r5
 8015ce0:	bfd4      	ite	le
 8015ce2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015ce6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015cea:	4620      	mov	r0, r4
 8015cec:	ee10 2a10 	vmov	r2, s0
 8015cf0:	465b      	mov	r3, fp
 8015cf2:	4639      	mov	r1, r7
 8015cf4:	f7ea fdc2 	bl	800087c <__aeabi_ddiv>
 8015cf8:	ec41 0b10 	vmov	d0, r0, r1
 8015cfc:	b003      	add	sp, #12
 8015cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d02 <__copybits>:
 8015d02:	3901      	subs	r1, #1
 8015d04:	b570      	push	{r4, r5, r6, lr}
 8015d06:	1149      	asrs	r1, r1, #5
 8015d08:	6914      	ldr	r4, [r2, #16]
 8015d0a:	3101      	adds	r1, #1
 8015d0c:	f102 0314 	add.w	r3, r2, #20
 8015d10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015d14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015d18:	1f05      	subs	r5, r0, #4
 8015d1a:	42a3      	cmp	r3, r4
 8015d1c:	d30c      	bcc.n	8015d38 <__copybits+0x36>
 8015d1e:	1aa3      	subs	r3, r4, r2
 8015d20:	3b11      	subs	r3, #17
 8015d22:	f023 0303 	bic.w	r3, r3, #3
 8015d26:	3211      	adds	r2, #17
 8015d28:	42a2      	cmp	r2, r4
 8015d2a:	bf88      	it	hi
 8015d2c:	2300      	movhi	r3, #0
 8015d2e:	4418      	add	r0, r3
 8015d30:	2300      	movs	r3, #0
 8015d32:	4288      	cmp	r0, r1
 8015d34:	d305      	bcc.n	8015d42 <__copybits+0x40>
 8015d36:	bd70      	pop	{r4, r5, r6, pc}
 8015d38:	f853 6b04 	ldr.w	r6, [r3], #4
 8015d3c:	f845 6f04 	str.w	r6, [r5, #4]!
 8015d40:	e7eb      	b.n	8015d1a <__copybits+0x18>
 8015d42:	f840 3b04 	str.w	r3, [r0], #4
 8015d46:	e7f4      	b.n	8015d32 <__copybits+0x30>

08015d48 <__any_on>:
 8015d48:	f100 0214 	add.w	r2, r0, #20
 8015d4c:	6900      	ldr	r0, [r0, #16]
 8015d4e:	114b      	asrs	r3, r1, #5
 8015d50:	4298      	cmp	r0, r3
 8015d52:	b510      	push	{r4, lr}
 8015d54:	db11      	blt.n	8015d7a <__any_on+0x32>
 8015d56:	dd0a      	ble.n	8015d6e <__any_on+0x26>
 8015d58:	f011 011f 	ands.w	r1, r1, #31
 8015d5c:	d007      	beq.n	8015d6e <__any_on+0x26>
 8015d5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015d62:	fa24 f001 	lsr.w	r0, r4, r1
 8015d66:	fa00 f101 	lsl.w	r1, r0, r1
 8015d6a:	428c      	cmp	r4, r1
 8015d6c:	d10b      	bne.n	8015d86 <__any_on+0x3e>
 8015d6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015d72:	4293      	cmp	r3, r2
 8015d74:	d803      	bhi.n	8015d7e <__any_on+0x36>
 8015d76:	2000      	movs	r0, #0
 8015d78:	bd10      	pop	{r4, pc}
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	e7f7      	b.n	8015d6e <__any_on+0x26>
 8015d7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015d82:	2900      	cmp	r1, #0
 8015d84:	d0f5      	beq.n	8015d72 <__any_on+0x2a>
 8015d86:	2001      	movs	r0, #1
 8015d88:	e7f6      	b.n	8015d78 <__any_on+0x30>

08015d8a <_calloc_r>:
 8015d8a:	b513      	push	{r0, r1, r4, lr}
 8015d8c:	434a      	muls	r2, r1
 8015d8e:	4611      	mov	r1, r2
 8015d90:	9201      	str	r2, [sp, #4]
 8015d92:	f000 f859 	bl	8015e48 <_malloc_r>
 8015d96:	4604      	mov	r4, r0
 8015d98:	b118      	cbz	r0, 8015da2 <_calloc_r+0x18>
 8015d9a:	9a01      	ldr	r2, [sp, #4]
 8015d9c:	2100      	movs	r1, #0
 8015d9e:	f7fc fb27 	bl	80123f0 <memset>
 8015da2:	4620      	mov	r0, r4
 8015da4:	b002      	add	sp, #8
 8015da6:	bd10      	pop	{r4, pc}

08015da8 <_free_r>:
 8015da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015daa:	2900      	cmp	r1, #0
 8015dac:	d048      	beq.n	8015e40 <_free_r+0x98>
 8015dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015db2:	9001      	str	r0, [sp, #4]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	f1a1 0404 	sub.w	r4, r1, #4
 8015dba:	bfb8      	it	lt
 8015dbc:	18e4      	addlt	r4, r4, r3
 8015dbe:	f000 fe8b 	bl	8016ad8 <__malloc_lock>
 8015dc2:	4a20      	ldr	r2, [pc, #128]	; (8015e44 <_free_r+0x9c>)
 8015dc4:	9801      	ldr	r0, [sp, #4]
 8015dc6:	6813      	ldr	r3, [r2, #0]
 8015dc8:	4615      	mov	r5, r2
 8015dca:	b933      	cbnz	r3, 8015dda <_free_r+0x32>
 8015dcc:	6063      	str	r3, [r4, #4]
 8015dce:	6014      	str	r4, [r2, #0]
 8015dd0:	b003      	add	sp, #12
 8015dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015dd6:	f000 be85 	b.w	8016ae4 <__malloc_unlock>
 8015dda:	42a3      	cmp	r3, r4
 8015ddc:	d90b      	bls.n	8015df6 <_free_r+0x4e>
 8015dde:	6821      	ldr	r1, [r4, #0]
 8015de0:	1862      	adds	r2, r4, r1
 8015de2:	4293      	cmp	r3, r2
 8015de4:	bf04      	itt	eq
 8015de6:	681a      	ldreq	r2, [r3, #0]
 8015de8:	685b      	ldreq	r3, [r3, #4]
 8015dea:	6063      	str	r3, [r4, #4]
 8015dec:	bf04      	itt	eq
 8015dee:	1852      	addeq	r2, r2, r1
 8015df0:	6022      	streq	r2, [r4, #0]
 8015df2:	602c      	str	r4, [r5, #0]
 8015df4:	e7ec      	b.n	8015dd0 <_free_r+0x28>
 8015df6:	461a      	mov	r2, r3
 8015df8:	685b      	ldr	r3, [r3, #4]
 8015dfa:	b10b      	cbz	r3, 8015e00 <_free_r+0x58>
 8015dfc:	42a3      	cmp	r3, r4
 8015dfe:	d9fa      	bls.n	8015df6 <_free_r+0x4e>
 8015e00:	6811      	ldr	r1, [r2, #0]
 8015e02:	1855      	adds	r5, r2, r1
 8015e04:	42a5      	cmp	r5, r4
 8015e06:	d10b      	bne.n	8015e20 <_free_r+0x78>
 8015e08:	6824      	ldr	r4, [r4, #0]
 8015e0a:	4421      	add	r1, r4
 8015e0c:	1854      	adds	r4, r2, r1
 8015e0e:	42a3      	cmp	r3, r4
 8015e10:	6011      	str	r1, [r2, #0]
 8015e12:	d1dd      	bne.n	8015dd0 <_free_r+0x28>
 8015e14:	681c      	ldr	r4, [r3, #0]
 8015e16:	685b      	ldr	r3, [r3, #4]
 8015e18:	6053      	str	r3, [r2, #4]
 8015e1a:	4421      	add	r1, r4
 8015e1c:	6011      	str	r1, [r2, #0]
 8015e1e:	e7d7      	b.n	8015dd0 <_free_r+0x28>
 8015e20:	d902      	bls.n	8015e28 <_free_r+0x80>
 8015e22:	230c      	movs	r3, #12
 8015e24:	6003      	str	r3, [r0, #0]
 8015e26:	e7d3      	b.n	8015dd0 <_free_r+0x28>
 8015e28:	6825      	ldr	r5, [r4, #0]
 8015e2a:	1961      	adds	r1, r4, r5
 8015e2c:	428b      	cmp	r3, r1
 8015e2e:	bf04      	itt	eq
 8015e30:	6819      	ldreq	r1, [r3, #0]
 8015e32:	685b      	ldreq	r3, [r3, #4]
 8015e34:	6063      	str	r3, [r4, #4]
 8015e36:	bf04      	itt	eq
 8015e38:	1949      	addeq	r1, r1, r5
 8015e3a:	6021      	streq	r1, [r4, #0]
 8015e3c:	6054      	str	r4, [r2, #4]
 8015e3e:	e7c7      	b.n	8015dd0 <_free_r+0x28>
 8015e40:	b003      	add	sp, #12
 8015e42:	bd30      	pop	{r4, r5, pc}
 8015e44:	200002c4 	.word	0x200002c4

08015e48 <_malloc_r>:
 8015e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e4a:	1ccd      	adds	r5, r1, #3
 8015e4c:	f025 0503 	bic.w	r5, r5, #3
 8015e50:	3508      	adds	r5, #8
 8015e52:	2d0c      	cmp	r5, #12
 8015e54:	bf38      	it	cc
 8015e56:	250c      	movcc	r5, #12
 8015e58:	2d00      	cmp	r5, #0
 8015e5a:	4606      	mov	r6, r0
 8015e5c:	db01      	blt.n	8015e62 <_malloc_r+0x1a>
 8015e5e:	42a9      	cmp	r1, r5
 8015e60:	d903      	bls.n	8015e6a <_malloc_r+0x22>
 8015e62:	230c      	movs	r3, #12
 8015e64:	6033      	str	r3, [r6, #0]
 8015e66:	2000      	movs	r0, #0
 8015e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e6a:	f000 fe35 	bl	8016ad8 <__malloc_lock>
 8015e6e:	4921      	ldr	r1, [pc, #132]	; (8015ef4 <_malloc_r+0xac>)
 8015e70:	680a      	ldr	r2, [r1, #0]
 8015e72:	4614      	mov	r4, r2
 8015e74:	b99c      	cbnz	r4, 8015e9e <_malloc_r+0x56>
 8015e76:	4f20      	ldr	r7, [pc, #128]	; (8015ef8 <_malloc_r+0xb0>)
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	b923      	cbnz	r3, 8015e86 <_malloc_r+0x3e>
 8015e7c:	4621      	mov	r1, r4
 8015e7e:	4630      	mov	r0, r6
 8015e80:	f000 fafa 	bl	8016478 <_sbrk_r>
 8015e84:	6038      	str	r0, [r7, #0]
 8015e86:	4629      	mov	r1, r5
 8015e88:	4630      	mov	r0, r6
 8015e8a:	f000 faf5 	bl	8016478 <_sbrk_r>
 8015e8e:	1c43      	adds	r3, r0, #1
 8015e90:	d123      	bne.n	8015eda <_malloc_r+0x92>
 8015e92:	230c      	movs	r3, #12
 8015e94:	6033      	str	r3, [r6, #0]
 8015e96:	4630      	mov	r0, r6
 8015e98:	f000 fe24 	bl	8016ae4 <__malloc_unlock>
 8015e9c:	e7e3      	b.n	8015e66 <_malloc_r+0x1e>
 8015e9e:	6823      	ldr	r3, [r4, #0]
 8015ea0:	1b5b      	subs	r3, r3, r5
 8015ea2:	d417      	bmi.n	8015ed4 <_malloc_r+0x8c>
 8015ea4:	2b0b      	cmp	r3, #11
 8015ea6:	d903      	bls.n	8015eb0 <_malloc_r+0x68>
 8015ea8:	6023      	str	r3, [r4, #0]
 8015eaa:	441c      	add	r4, r3
 8015eac:	6025      	str	r5, [r4, #0]
 8015eae:	e004      	b.n	8015eba <_malloc_r+0x72>
 8015eb0:	6863      	ldr	r3, [r4, #4]
 8015eb2:	42a2      	cmp	r2, r4
 8015eb4:	bf0c      	ite	eq
 8015eb6:	600b      	streq	r3, [r1, #0]
 8015eb8:	6053      	strne	r3, [r2, #4]
 8015eba:	4630      	mov	r0, r6
 8015ebc:	f000 fe12 	bl	8016ae4 <__malloc_unlock>
 8015ec0:	f104 000b 	add.w	r0, r4, #11
 8015ec4:	1d23      	adds	r3, r4, #4
 8015ec6:	f020 0007 	bic.w	r0, r0, #7
 8015eca:	1ac2      	subs	r2, r0, r3
 8015ecc:	d0cc      	beq.n	8015e68 <_malloc_r+0x20>
 8015ece:	1a1b      	subs	r3, r3, r0
 8015ed0:	50a3      	str	r3, [r4, r2]
 8015ed2:	e7c9      	b.n	8015e68 <_malloc_r+0x20>
 8015ed4:	4622      	mov	r2, r4
 8015ed6:	6864      	ldr	r4, [r4, #4]
 8015ed8:	e7cc      	b.n	8015e74 <_malloc_r+0x2c>
 8015eda:	1cc4      	adds	r4, r0, #3
 8015edc:	f024 0403 	bic.w	r4, r4, #3
 8015ee0:	42a0      	cmp	r0, r4
 8015ee2:	d0e3      	beq.n	8015eac <_malloc_r+0x64>
 8015ee4:	1a21      	subs	r1, r4, r0
 8015ee6:	4630      	mov	r0, r6
 8015ee8:	f000 fac6 	bl	8016478 <_sbrk_r>
 8015eec:	3001      	adds	r0, #1
 8015eee:	d1dd      	bne.n	8015eac <_malloc_r+0x64>
 8015ef0:	e7cf      	b.n	8015e92 <_malloc_r+0x4a>
 8015ef2:	bf00      	nop
 8015ef4:	200002c4 	.word	0x200002c4
 8015ef8:	200002c8 	.word	0x200002c8

08015efc <__ssputs_r>:
 8015efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f00:	688e      	ldr	r6, [r1, #8]
 8015f02:	429e      	cmp	r6, r3
 8015f04:	4682      	mov	sl, r0
 8015f06:	460c      	mov	r4, r1
 8015f08:	4690      	mov	r8, r2
 8015f0a:	461f      	mov	r7, r3
 8015f0c:	d838      	bhi.n	8015f80 <__ssputs_r+0x84>
 8015f0e:	898a      	ldrh	r2, [r1, #12]
 8015f10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015f14:	d032      	beq.n	8015f7c <__ssputs_r+0x80>
 8015f16:	6825      	ldr	r5, [r4, #0]
 8015f18:	6909      	ldr	r1, [r1, #16]
 8015f1a:	eba5 0901 	sub.w	r9, r5, r1
 8015f1e:	6965      	ldr	r5, [r4, #20]
 8015f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015f28:	3301      	adds	r3, #1
 8015f2a:	444b      	add	r3, r9
 8015f2c:	106d      	asrs	r5, r5, #1
 8015f2e:	429d      	cmp	r5, r3
 8015f30:	bf38      	it	cc
 8015f32:	461d      	movcc	r5, r3
 8015f34:	0553      	lsls	r3, r2, #21
 8015f36:	d531      	bpl.n	8015f9c <__ssputs_r+0xa0>
 8015f38:	4629      	mov	r1, r5
 8015f3a:	f7ff ff85 	bl	8015e48 <_malloc_r>
 8015f3e:	4606      	mov	r6, r0
 8015f40:	b950      	cbnz	r0, 8015f58 <__ssputs_r+0x5c>
 8015f42:	230c      	movs	r3, #12
 8015f44:	f8ca 3000 	str.w	r3, [sl]
 8015f48:	89a3      	ldrh	r3, [r4, #12]
 8015f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f4e:	81a3      	strh	r3, [r4, #12]
 8015f50:	f04f 30ff 	mov.w	r0, #4294967295
 8015f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f58:	6921      	ldr	r1, [r4, #16]
 8015f5a:	464a      	mov	r2, r9
 8015f5c:	f7ff fa4c 	bl	80153f8 <memcpy>
 8015f60:	89a3      	ldrh	r3, [r4, #12]
 8015f62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f6a:	81a3      	strh	r3, [r4, #12]
 8015f6c:	6126      	str	r6, [r4, #16]
 8015f6e:	6165      	str	r5, [r4, #20]
 8015f70:	444e      	add	r6, r9
 8015f72:	eba5 0509 	sub.w	r5, r5, r9
 8015f76:	6026      	str	r6, [r4, #0]
 8015f78:	60a5      	str	r5, [r4, #8]
 8015f7a:	463e      	mov	r6, r7
 8015f7c:	42be      	cmp	r6, r7
 8015f7e:	d900      	bls.n	8015f82 <__ssputs_r+0x86>
 8015f80:	463e      	mov	r6, r7
 8015f82:	4632      	mov	r2, r6
 8015f84:	6820      	ldr	r0, [r4, #0]
 8015f86:	4641      	mov	r1, r8
 8015f88:	f000 fd8c 	bl	8016aa4 <memmove>
 8015f8c:	68a3      	ldr	r3, [r4, #8]
 8015f8e:	6822      	ldr	r2, [r4, #0]
 8015f90:	1b9b      	subs	r3, r3, r6
 8015f92:	4432      	add	r2, r6
 8015f94:	60a3      	str	r3, [r4, #8]
 8015f96:	6022      	str	r2, [r4, #0]
 8015f98:	2000      	movs	r0, #0
 8015f9a:	e7db      	b.n	8015f54 <__ssputs_r+0x58>
 8015f9c:	462a      	mov	r2, r5
 8015f9e:	f000 fda7 	bl	8016af0 <_realloc_r>
 8015fa2:	4606      	mov	r6, r0
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	d1e1      	bne.n	8015f6c <__ssputs_r+0x70>
 8015fa8:	6921      	ldr	r1, [r4, #16]
 8015faa:	4650      	mov	r0, sl
 8015fac:	f7ff fefc 	bl	8015da8 <_free_r>
 8015fb0:	e7c7      	b.n	8015f42 <__ssputs_r+0x46>
	...

08015fb4 <_svfiprintf_r>:
 8015fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fb8:	4698      	mov	r8, r3
 8015fba:	898b      	ldrh	r3, [r1, #12]
 8015fbc:	061b      	lsls	r3, r3, #24
 8015fbe:	b09d      	sub	sp, #116	; 0x74
 8015fc0:	4607      	mov	r7, r0
 8015fc2:	460d      	mov	r5, r1
 8015fc4:	4614      	mov	r4, r2
 8015fc6:	d50e      	bpl.n	8015fe6 <_svfiprintf_r+0x32>
 8015fc8:	690b      	ldr	r3, [r1, #16]
 8015fca:	b963      	cbnz	r3, 8015fe6 <_svfiprintf_r+0x32>
 8015fcc:	2140      	movs	r1, #64	; 0x40
 8015fce:	f7ff ff3b 	bl	8015e48 <_malloc_r>
 8015fd2:	6028      	str	r0, [r5, #0]
 8015fd4:	6128      	str	r0, [r5, #16]
 8015fd6:	b920      	cbnz	r0, 8015fe2 <_svfiprintf_r+0x2e>
 8015fd8:	230c      	movs	r3, #12
 8015fda:	603b      	str	r3, [r7, #0]
 8015fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8015fe0:	e0d1      	b.n	8016186 <_svfiprintf_r+0x1d2>
 8015fe2:	2340      	movs	r3, #64	; 0x40
 8015fe4:	616b      	str	r3, [r5, #20]
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8015fea:	2320      	movs	r3, #32
 8015fec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ff4:	2330      	movs	r3, #48	; 0x30
 8015ff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80161a0 <_svfiprintf_r+0x1ec>
 8015ffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ffe:	f04f 0901 	mov.w	r9, #1
 8016002:	4623      	mov	r3, r4
 8016004:	469a      	mov	sl, r3
 8016006:	f813 2b01 	ldrb.w	r2, [r3], #1
 801600a:	b10a      	cbz	r2, 8016010 <_svfiprintf_r+0x5c>
 801600c:	2a25      	cmp	r2, #37	; 0x25
 801600e:	d1f9      	bne.n	8016004 <_svfiprintf_r+0x50>
 8016010:	ebba 0b04 	subs.w	fp, sl, r4
 8016014:	d00b      	beq.n	801602e <_svfiprintf_r+0x7a>
 8016016:	465b      	mov	r3, fp
 8016018:	4622      	mov	r2, r4
 801601a:	4629      	mov	r1, r5
 801601c:	4638      	mov	r0, r7
 801601e:	f7ff ff6d 	bl	8015efc <__ssputs_r>
 8016022:	3001      	adds	r0, #1
 8016024:	f000 80aa 	beq.w	801617c <_svfiprintf_r+0x1c8>
 8016028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801602a:	445a      	add	r2, fp
 801602c:	9209      	str	r2, [sp, #36]	; 0x24
 801602e:	f89a 3000 	ldrb.w	r3, [sl]
 8016032:	2b00      	cmp	r3, #0
 8016034:	f000 80a2 	beq.w	801617c <_svfiprintf_r+0x1c8>
 8016038:	2300      	movs	r3, #0
 801603a:	f04f 32ff 	mov.w	r2, #4294967295
 801603e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016042:	f10a 0a01 	add.w	sl, sl, #1
 8016046:	9304      	str	r3, [sp, #16]
 8016048:	9307      	str	r3, [sp, #28]
 801604a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801604e:	931a      	str	r3, [sp, #104]	; 0x68
 8016050:	4654      	mov	r4, sl
 8016052:	2205      	movs	r2, #5
 8016054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016058:	4851      	ldr	r0, [pc, #324]	; (80161a0 <_svfiprintf_r+0x1ec>)
 801605a:	f7ea f8d9 	bl	8000210 <memchr>
 801605e:	9a04      	ldr	r2, [sp, #16]
 8016060:	b9d8      	cbnz	r0, 801609a <_svfiprintf_r+0xe6>
 8016062:	06d0      	lsls	r0, r2, #27
 8016064:	bf44      	itt	mi
 8016066:	2320      	movmi	r3, #32
 8016068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801606c:	0711      	lsls	r1, r2, #28
 801606e:	bf44      	itt	mi
 8016070:	232b      	movmi	r3, #43	; 0x2b
 8016072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016076:	f89a 3000 	ldrb.w	r3, [sl]
 801607a:	2b2a      	cmp	r3, #42	; 0x2a
 801607c:	d015      	beq.n	80160aa <_svfiprintf_r+0xf6>
 801607e:	9a07      	ldr	r2, [sp, #28]
 8016080:	4654      	mov	r4, sl
 8016082:	2000      	movs	r0, #0
 8016084:	f04f 0c0a 	mov.w	ip, #10
 8016088:	4621      	mov	r1, r4
 801608a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801608e:	3b30      	subs	r3, #48	; 0x30
 8016090:	2b09      	cmp	r3, #9
 8016092:	d94e      	bls.n	8016132 <_svfiprintf_r+0x17e>
 8016094:	b1b0      	cbz	r0, 80160c4 <_svfiprintf_r+0x110>
 8016096:	9207      	str	r2, [sp, #28]
 8016098:	e014      	b.n	80160c4 <_svfiprintf_r+0x110>
 801609a:	eba0 0308 	sub.w	r3, r0, r8
 801609e:	fa09 f303 	lsl.w	r3, r9, r3
 80160a2:	4313      	orrs	r3, r2
 80160a4:	9304      	str	r3, [sp, #16]
 80160a6:	46a2      	mov	sl, r4
 80160a8:	e7d2      	b.n	8016050 <_svfiprintf_r+0x9c>
 80160aa:	9b03      	ldr	r3, [sp, #12]
 80160ac:	1d19      	adds	r1, r3, #4
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	9103      	str	r1, [sp, #12]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	bfbb      	ittet	lt
 80160b6:	425b      	neglt	r3, r3
 80160b8:	f042 0202 	orrlt.w	r2, r2, #2
 80160bc:	9307      	strge	r3, [sp, #28]
 80160be:	9307      	strlt	r3, [sp, #28]
 80160c0:	bfb8      	it	lt
 80160c2:	9204      	strlt	r2, [sp, #16]
 80160c4:	7823      	ldrb	r3, [r4, #0]
 80160c6:	2b2e      	cmp	r3, #46	; 0x2e
 80160c8:	d10c      	bne.n	80160e4 <_svfiprintf_r+0x130>
 80160ca:	7863      	ldrb	r3, [r4, #1]
 80160cc:	2b2a      	cmp	r3, #42	; 0x2a
 80160ce:	d135      	bne.n	801613c <_svfiprintf_r+0x188>
 80160d0:	9b03      	ldr	r3, [sp, #12]
 80160d2:	1d1a      	adds	r2, r3, #4
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	9203      	str	r2, [sp, #12]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	bfb8      	it	lt
 80160dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80160e0:	3402      	adds	r4, #2
 80160e2:	9305      	str	r3, [sp, #20]
 80160e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80161b0 <_svfiprintf_r+0x1fc>
 80160e8:	7821      	ldrb	r1, [r4, #0]
 80160ea:	2203      	movs	r2, #3
 80160ec:	4650      	mov	r0, sl
 80160ee:	f7ea f88f 	bl	8000210 <memchr>
 80160f2:	b140      	cbz	r0, 8016106 <_svfiprintf_r+0x152>
 80160f4:	2340      	movs	r3, #64	; 0x40
 80160f6:	eba0 000a 	sub.w	r0, r0, sl
 80160fa:	fa03 f000 	lsl.w	r0, r3, r0
 80160fe:	9b04      	ldr	r3, [sp, #16]
 8016100:	4303      	orrs	r3, r0
 8016102:	3401      	adds	r4, #1
 8016104:	9304      	str	r3, [sp, #16]
 8016106:	f814 1b01 	ldrb.w	r1, [r4], #1
 801610a:	4826      	ldr	r0, [pc, #152]	; (80161a4 <_svfiprintf_r+0x1f0>)
 801610c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016110:	2206      	movs	r2, #6
 8016112:	f7ea f87d 	bl	8000210 <memchr>
 8016116:	2800      	cmp	r0, #0
 8016118:	d038      	beq.n	801618c <_svfiprintf_r+0x1d8>
 801611a:	4b23      	ldr	r3, [pc, #140]	; (80161a8 <_svfiprintf_r+0x1f4>)
 801611c:	bb1b      	cbnz	r3, 8016166 <_svfiprintf_r+0x1b2>
 801611e:	9b03      	ldr	r3, [sp, #12]
 8016120:	3307      	adds	r3, #7
 8016122:	f023 0307 	bic.w	r3, r3, #7
 8016126:	3308      	adds	r3, #8
 8016128:	9303      	str	r3, [sp, #12]
 801612a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801612c:	4433      	add	r3, r6
 801612e:	9309      	str	r3, [sp, #36]	; 0x24
 8016130:	e767      	b.n	8016002 <_svfiprintf_r+0x4e>
 8016132:	fb0c 3202 	mla	r2, ip, r2, r3
 8016136:	460c      	mov	r4, r1
 8016138:	2001      	movs	r0, #1
 801613a:	e7a5      	b.n	8016088 <_svfiprintf_r+0xd4>
 801613c:	2300      	movs	r3, #0
 801613e:	3401      	adds	r4, #1
 8016140:	9305      	str	r3, [sp, #20]
 8016142:	4619      	mov	r1, r3
 8016144:	f04f 0c0a 	mov.w	ip, #10
 8016148:	4620      	mov	r0, r4
 801614a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801614e:	3a30      	subs	r2, #48	; 0x30
 8016150:	2a09      	cmp	r2, #9
 8016152:	d903      	bls.n	801615c <_svfiprintf_r+0x1a8>
 8016154:	2b00      	cmp	r3, #0
 8016156:	d0c5      	beq.n	80160e4 <_svfiprintf_r+0x130>
 8016158:	9105      	str	r1, [sp, #20]
 801615a:	e7c3      	b.n	80160e4 <_svfiprintf_r+0x130>
 801615c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016160:	4604      	mov	r4, r0
 8016162:	2301      	movs	r3, #1
 8016164:	e7f0      	b.n	8016148 <_svfiprintf_r+0x194>
 8016166:	ab03      	add	r3, sp, #12
 8016168:	9300      	str	r3, [sp, #0]
 801616a:	462a      	mov	r2, r5
 801616c:	4b0f      	ldr	r3, [pc, #60]	; (80161ac <_svfiprintf_r+0x1f8>)
 801616e:	a904      	add	r1, sp, #16
 8016170:	4638      	mov	r0, r7
 8016172:	f7fc f9e5 	bl	8012540 <_printf_float>
 8016176:	1c42      	adds	r2, r0, #1
 8016178:	4606      	mov	r6, r0
 801617a:	d1d6      	bne.n	801612a <_svfiprintf_r+0x176>
 801617c:	89ab      	ldrh	r3, [r5, #12]
 801617e:	065b      	lsls	r3, r3, #25
 8016180:	f53f af2c 	bmi.w	8015fdc <_svfiprintf_r+0x28>
 8016184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016186:	b01d      	add	sp, #116	; 0x74
 8016188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801618c:	ab03      	add	r3, sp, #12
 801618e:	9300      	str	r3, [sp, #0]
 8016190:	462a      	mov	r2, r5
 8016192:	4b06      	ldr	r3, [pc, #24]	; (80161ac <_svfiprintf_r+0x1f8>)
 8016194:	a904      	add	r1, sp, #16
 8016196:	4638      	mov	r0, r7
 8016198:	f7fc fc76 	bl	8012a88 <_printf_i>
 801619c:	e7eb      	b.n	8016176 <_svfiprintf_r+0x1c2>
 801619e:	bf00      	nop
 80161a0:	0802ae14 	.word	0x0802ae14
 80161a4:	0802ae1e 	.word	0x0802ae1e
 80161a8:	08012541 	.word	0x08012541
 80161ac:	08015efd 	.word	0x08015efd
 80161b0:	0802ae1a 	.word	0x0802ae1a

080161b4 <__sfputc_r>:
 80161b4:	6893      	ldr	r3, [r2, #8]
 80161b6:	3b01      	subs	r3, #1
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	b410      	push	{r4}
 80161bc:	6093      	str	r3, [r2, #8]
 80161be:	da08      	bge.n	80161d2 <__sfputc_r+0x1e>
 80161c0:	6994      	ldr	r4, [r2, #24]
 80161c2:	42a3      	cmp	r3, r4
 80161c4:	db01      	blt.n	80161ca <__sfputc_r+0x16>
 80161c6:	290a      	cmp	r1, #10
 80161c8:	d103      	bne.n	80161d2 <__sfputc_r+0x1e>
 80161ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161ce:	f000 b975 	b.w	80164bc <__swbuf_r>
 80161d2:	6813      	ldr	r3, [r2, #0]
 80161d4:	1c58      	adds	r0, r3, #1
 80161d6:	6010      	str	r0, [r2, #0]
 80161d8:	7019      	strb	r1, [r3, #0]
 80161da:	4608      	mov	r0, r1
 80161dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161e0:	4770      	bx	lr

080161e2 <__sfputs_r>:
 80161e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161e4:	4606      	mov	r6, r0
 80161e6:	460f      	mov	r7, r1
 80161e8:	4614      	mov	r4, r2
 80161ea:	18d5      	adds	r5, r2, r3
 80161ec:	42ac      	cmp	r4, r5
 80161ee:	d101      	bne.n	80161f4 <__sfputs_r+0x12>
 80161f0:	2000      	movs	r0, #0
 80161f2:	e007      	b.n	8016204 <__sfputs_r+0x22>
 80161f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161f8:	463a      	mov	r2, r7
 80161fa:	4630      	mov	r0, r6
 80161fc:	f7ff ffda 	bl	80161b4 <__sfputc_r>
 8016200:	1c43      	adds	r3, r0, #1
 8016202:	d1f3      	bne.n	80161ec <__sfputs_r+0xa>
 8016204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016208 <_vfiprintf_r>:
 8016208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801620c:	460d      	mov	r5, r1
 801620e:	b09d      	sub	sp, #116	; 0x74
 8016210:	4614      	mov	r4, r2
 8016212:	4698      	mov	r8, r3
 8016214:	4606      	mov	r6, r0
 8016216:	b118      	cbz	r0, 8016220 <_vfiprintf_r+0x18>
 8016218:	6983      	ldr	r3, [r0, #24]
 801621a:	b90b      	cbnz	r3, 8016220 <_vfiprintf_r+0x18>
 801621c:	f000 fb3e 	bl	801689c <__sinit>
 8016220:	4b89      	ldr	r3, [pc, #548]	; (8016448 <_vfiprintf_r+0x240>)
 8016222:	429d      	cmp	r5, r3
 8016224:	d11b      	bne.n	801625e <_vfiprintf_r+0x56>
 8016226:	6875      	ldr	r5, [r6, #4]
 8016228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801622a:	07d9      	lsls	r1, r3, #31
 801622c:	d405      	bmi.n	801623a <_vfiprintf_r+0x32>
 801622e:	89ab      	ldrh	r3, [r5, #12]
 8016230:	059a      	lsls	r2, r3, #22
 8016232:	d402      	bmi.n	801623a <_vfiprintf_r+0x32>
 8016234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016236:	f000 fbcf 	bl	80169d8 <__retarget_lock_acquire_recursive>
 801623a:	89ab      	ldrh	r3, [r5, #12]
 801623c:	071b      	lsls	r3, r3, #28
 801623e:	d501      	bpl.n	8016244 <_vfiprintf_r+0x3c>
 8016240:	692b      	ldr	r3, [r5, #16]
 8016242:	b9eb      	cbnz	r3, 8016280 <_vfiprintf_r+0x78>
 8016244:	4629      	mov	r1, r5
 8016246:	4630      	mov	r0, r6
 8016248:	f000 f998 	bl	801657c <__swsetup_r>
 801624c:	b1c0      	cbz	r0, 8016280 <_vfiprintf_r+0x78>
 801624e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016250:	07dc      	lsls	r4, r3, #31
 8016252:	d50e      	bpl.n	8016272 <_vfiprintf_r+0x6a>
 8016254:	f04f 30ff 	mov.w	r0, #4294967295
 8016258:	b01d      	add	sp, #116	; 0x74
 801625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801625e:	4b7b      	ldr	r3, [pc, #492]	; (801644c <_vfiprintf_r+0x244>)
 8016260:	429d      	cmp	r5, r3
 8016262:	d101      	bne.n	8016268 <_vfiprintf_r+0x60>
 8016264:	68b5      	ldr	r5, [r6, #8]
 8016266:	e7df      	b.n	8016228 <_vfiprintf_r+0x20>
 8016268:	4b79      	ldr	r3, [pc, #484]	; (8016450 <_vfiprintf_r+0x248>)
 801626a:	429d      	cmp	r5, r3
 801626c:	bf08      	it	eq
 801626e:	68f5      	ldreq	r5, [r6, #12]
 8016270:	e7da      	b.n	8016228 <_vfiprintf_r+0x20>
 8016272:	89ab      	ldrh	r3, [r5, #12]
 8016274:	0598      	lsls	r0, r3, #22
 8016276:	d4ed      	bmi.n	8016254 <_vfiprintf_r+0x4c>
 8016278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801627a:	f000 fbae 	bl	80169da <__retarget_lock_release_recursive>
 801627e:	e7e9      	b.n	8016254 <_vfiprintf_r+0x4c>
 8016280:	2300      	movs	r3, #0
 8016282:	9309      	str	r3, [sp, #36]	; 0x24
 8016284:	2320      	movs	r3, #32
 8016286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801628a:	f8cd 800c 	str.w	r8, [sp, #12]
 801628e:	2330      	movs	r3, #48	; 0x30
 8016290:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016454 <_vfiprintf_r+0x24c>
 8016294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016298:	f04f 0901 	mov.w	r9, #1
 801629c:	4623      	mov	r3, r4
 801629e:	469a      	mov	sl, r3
 80162a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162a4:	b10a      	cbz	r2, 80162aa <_vfiprintf_r+0xa2>
 80162a6:	2a25      	cmp	r2, #37	; 0x25
 80162a8:	d1f9      	bne.n	801629e <_vfiprintf_r+0x96>
 80162aa:	ebba 0b04 	subs.w	fp, sl, r4
 80162ae:	d00b      	beq.n	80162c8 <_vfiprintf_r+0xc0>
 80162b0:	465b      	mov	r3, fp
 80162b2:	4622      	mov	r2, r4
 80162b4:	4629      	mov	r1, r5
 80162b6:	4630      	mov	r0, r6
 80162b8:	f7ff ff93 	bl	80161e2 <__sfputs_r>
 80162bc:	3001      	adds	r0, #1
 80162be:	f000 80aa 	beq.w	8016416 <_vfiprintf_r+0x20e>
 80162c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162c4:	445a      	add	r2, fp
 80162c6:	9209      	str	r2, [sp, #36]	; 0x24
 80162c8:	f89a 3000 	ldrb.w	r3, [sl]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	f000 80a2 	beq.w	8016416 <_vfiprintf_r+0x20e>
 80162d2:	2300      	movs	r3, #0
 80162d4:	f04f 32ff 	mov.w	r2, #4294967295
 80162d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162dc:	f10a 0a01 	add.w	sl, sl, #1
 80162e0:	9304      	str	r3, [sp, #16]
 80162e2:	9307      	str	r3, [sp, #28]
 80162e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80162e8:	931a      	str	r3, [sp, #104]	; 0x68
 80162ea:	4654      	mov	r4, sl
 80162ec:	2205      	movs	r2, #5
 80162ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162f2:	4858      	ldr	r0, [pc, #352]	; (8016454 <_vfiprintf_r+0x24c>)
 80162f4:	f7e9 ff8c 	bl	8000210 <memchr>
 80162f8:	9a04      	ldr	r2, [sp, #16]
 80162fa:	b9d8      	cbnz	r0, 8016334 <_vfiprintf_r+0x12c>
 80162fc:	06d1      	lsls	r1, r2, #27
 80162fe:	bf44      	itt	mi
 8016300:	2320      	movmi	r3, #32
 8016302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016306:	0713      	lsls	r3, r2, #28
 8016308:	bf44      	itt	mi
 801630a:	232b      	movmi	r3, #43	; 0x2b
 801630c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016310:	f89a 3000 	ldrb.w	r3, [sl]
 8016314:	2b2a      	cmp	r3, #42	; 0x2a
 8016316:	d015      	beq.n	8016344 <_vfiprintf_r+0x13c>
 8016318:	9a07      	ldr	r2, [sp, #28]
 801631a:	4654      	mov	r4, sl
 801631c:	2000      	movs	r0, #0
 801631e:	f04f 0c0a 	mov.w	ip, #10
 8016322:	4621      	mov	r1, r4
 8016324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016328:	3b30      	subs	r3, #48	; 0x30
 801632a:	2b09      	cmp	r3, #9
 801632c:	d94e      	bls.n	80163cc <_vfiprintf_r+0x1c4>
 801632e:	b1b0      	cbz	r0, 801635e <_vfiprintf_r+0x156>
 8016330:	9207      	str	r2, [sp, #28]
 8016332:	e014      	b.n	801635e <_vfiprintf_r+0x156>
 8016334:	eba0 0308 	sub.w	r3, r0, r8
 8016338:	fa09 f303 	lsl.w	r3, r9, r3
 801633c:	4313      	orrs	r3, r2
 801633e:	9304      	str	r3, [sp, #16]
 8016340:	46a2      	mov	sl, r4
 8016342:	e7d2      	b.n	80162ea <_vfiprintf_r+0xe2>
 8016344:	9b03      	ldr	r3, [sp, #12]
 8016346:	1d19      	adds	r1, r3, #4
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	9103      	str	r1, [sp, #12]
 801634c:	2b00      	cmp	r3, #0
 801634e:	bfbb      	ittet	lt
 8016350:	425b      	neglt	r3, r3
 8016352:	f042 0202 	orrlt.w	r2, r2, #2
 8016356:	9307      	strge	r3, [sp, #28]
 8016358:	9307      	strlt	r3, [sp, #28]
 801635a:	bfb8      	it	lt
 801635c:	9204      	strlt	r2, [sp, #16]
 801635e:	7823      	ldrb	r3, [r4, #0]
 8016360:	2b2e      	cmp	r3, #46	; 0x2e
 8016362:	d10c      	bne.n	801637e <_vfiprintf_r+0x176>
 8016364:	7863      	ldrb	r3, [r4, #1]
 8016366:	2b2a      	cmp	r3, #42	; 0x2a
 8016368:	d135      	bne.n	80163d6 <_vfiprintf_r+0x1ce>
 801636a:	9b03      	ldr	r3, [sp, #12]
 801636c:	1d1a      	adds	r2, r3, #4
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	9203      	str	r2, [sp, #12]
 8016372:	2b00      	cmp	r3, #0
 8016374:	bfb8      	it	lt
 8016376:	f04f 33ff 	movlt.w	r3, #4294967295
 801637a:	3402      	adds	r4, #2
 801637c:	9305      	str	r3, [sp, #20]
 801637e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016464 <_vfiprintf_r+0x25c>
 8016382:	7821      	ldrb	r1, [r4, #0]
 8016384:	2203      	movs	r2, #3
 8016386:	4650      	mov	r0, sl
 8016388:	f7e9 ff42 	bl	8000210 <memchr>
 801638c:	b140      	cbz	r0, 80163a0 <_vfiprintf_r+0x198>
 801638e:	2340      	movs	r3, #64	; 0x40
 8016390:	eba0 000a 	sub.w	r0, r0, sl
 8016394:	fa03 f000 	lsl.w	r0, r3, r0
 8016398:	9b04      	ldr	r3, [sp, #16]
 801639a:	4303      	orrs	r3, r0
 801639c:	3401      	adds	r4, #1
 801639e:	9304      	str	r3, [sp, #16]
 80163a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163a4:	482c      	ldr	r0, [pc, #176]	; (8016458 <_vfiprintf_r+0x250>)
 80163a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80163aa:	2206      	movs	r2, #6
 80163ac:	f7e9 ff30 	bl	8000210 <memchr>
 80163b0:	2800      	cmp	r0, #0
 80163b2:	d03f      	beq.n	8016434 <_vfiprintf_r+0x22c>
 80163b4:	4b29      	ldr	r3, [pc, #164]	; (801645c <_vfiprintf_r+0x254>)
 80163b6:	bb1b      	cbnz	r3, 8016400 <_vfiprintf_r+0x1f8>
 80163b8:	9b03      	ldr	r3, [sp, #12]
 80163ba:	3307      	adds	r3, #7
 80163bc:	f023 0307 	bic.w	r3, r3, #7
 80163c0:	3308      	adds	r3, #8
 80163c2:	9303      	str	r3, [sp, #12]
 80163c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163c6:	443b      	add	r3, r7
 80163c8:	9309      	str	r3, [sp, #36]	; 0x24
 80163ca:	e767      	b.n	801629c <_vfiprintf_r+0x94>
 80163cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80163d0:	460c      	mov	r4, r1
 80163d2:	2001      	movs	r0, #1
 80163d4:	e7a5      	b.n	8016322 <_vfiprintf_r+0x11a>
 80163d6:	2300      	movs	r3, #0
 80163d8:	3401      	adds	r4, #1
 80163da:	9305      	str	r3, [sp, #20]
 80163dc:	4619      	mov	r1, r3
 80163de:	f04f 0c0a 	mov.w	ip, #10
 80163e2:	4620      	mov	r0, r4
 80163e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163e8:	3a30      	subs	r2, #48	; 0x30
 80163ea:	2a09      	cmp	r2, #9
 80163ec:	d903      	bls.n	80163f6 <_vfiprintf_r+0x1ee>
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d0c5      	beq.n	801637e <_vfiprintf_r+0x176>
 80163f2:	9105      	str	r1, [sp, #20]
 80163f4:	e7c3      	b.n	801637e <_vfiprintf_r+0x176>
 80163f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80163fa:	4604      	mov	r4, r0
 80163fc:	2301      	movs	r3, #1
 80163fe:	e7f0      	b.n	80163e2 <_vfiprintf_r+0x1da>
 8016400:	ab03      	add	r3, sp, #12
 8016402:	9300      	str	r3, [sp, #0]
 8016404:	462a      	mov	r2, r5
 8016406:	4b16      	ldr	r3, [pc, #88]	; (8016460 <_vfiprintf_r+0x258>)
 8016408:	a904      	add	r1, sp, #16
 801640a:	4630      	mov	r0, r6
 801640c:	f7fc f898 	bl	8012540 <_printf_float>
 8016410:	4607      	mov	r7, r0
 8016412:	1c78      	adds	r0, r7, #1
 8016414:	d1d6      	bne.n	80163c4 <_vfiprintf_r+0x1bc>
 8016416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016418:	07d9      	lsls	r1, r3, #31
 801641a:	d405      	bmi.n	8016428 <_vfiprintf_r+0x220>
 801641c:	89ab      	ldrh	r3, [r5, #12]
 801641e:	059a      	lsls	r2, r3, #22
 8016420:	d402      	bmi.n	8016428 <_vfiprintf_r+0x220>
 8016422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016424:	f000 fad9 	bl	80169da <__retarget_lock_release_recursive>
 8016428:	89ab      	ldrh	r3, [r5, #12]
 801642a:	065b      	lsls	r3, r3, #25
 801642c:	f53f af12 	bmi.w	8016254 <_vfiprintf_r+0x4c>
 8016430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016432:	e711      	b.n	8016258 <_vfiprintf_r+0x50>
 8016434:	ab03      	add	r3, sp, #12
 8016436:	9300      	str	r3, [sp, #0]
 8016438:	462a      	mov	r2, r5
 801643a:	4b09      	ldr	r3, [pc, #36]	; (8016460 <_vfiprintf_r+0x258>)
 801643c:	a904      	add	r1, sp, #16
 801643e:	4630      	mov	r0, r6
 8016440:	f7fc fb22 	bl	8012a88 <_printf_i>
 8016444:	e7e4      	b.n	8016410 <_vfiprintf_r+0x208>
 8016446:	bf00      	nop
 8016448:	0802ae48 	.word	0x0802ae48
 801644c:	0802ae68 	.word	0x0802ae68
 8016450:	0802ae28 	.word	0x0802ae28
 8016454:	0802ae14 	.word	0x0802ae14
 8016458:	0802ae1e 	.word	0x0802ae1e
 801645c:	08012541 	.word	0x08012541
 8016460:	080161e3 	.word	0x080161e3
 8016464:	0802ae1a 	.word	0x0802ae1a

08016468 <nan>:
 8016468:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016470 <nan+0x8>
 801646c:	4770      	bx	lr
 801646e:	bf00      	nop
 8016470:	00000000 	.word	0x00000000
 8016474:	7ff80000 	.word	0x7ff80000

08016478 <_sbrk_r>:
 8016478:	b538      	push	{r3, r4, r5, lr}
 801647a:	4d06      	ldr	r5, [pc, #24]	; (8016494 <_sbrk_r+0x1c>)
 801647c:	2300      	movs	r3, #0
 801647e:	4604      	mov	r4, r0
 8016480:	4608      	mov	r0, r1
 8016482:	602b      	str	r3, [r5, #0]
 8016484:	f7f4 fb42 	bl	800ab0c <_sbrk>
 8016488:	1c43      	adds	r3, r0, #1
 801648a:	d102      	bne.n	8016492 <_sbrk_r+0x1a>
 801648c:	682b      	ldr	r3, [r5, #0]
 801648e:	b103      	cbz	r3, 8016492 <_sbrk_r+0x1a>
 8016490:	6023      	str	r3, [r4, #0]
 8016492:	bd38      	pop	{r3, r4, r5, pc}
 8016494:	20000c8c 	.word	0x20000c8c

08016498 <strncmp>:
 8016498:	b510      	push	{r4, lr}
 801649a:	b16a      	cbz	r2, 80164b8 <strncmp+0x20>
 801649c:	3901      	subs	r1, #1
 801649e:	1884      	adds	r4, r0, r2
 80164a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80164a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80164a8:	4293      	cmp	r3, r2
 80164aa:	d103      	bne.n	80164b4 <strncmp+0x1c>
 80164ac:	42a0      	cmp	r0, r4
 80164ae:	d001      	beq.n	80164b4 <strncmp+0x1c>
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d1f5      	bne.n	80164a0 <strncmp+0x8>
 80164b4:	1a98      	subs	r0, r3, r2
 80164b6:	bd10      	pop	{r4, pc}
 80164b8:	4610      	mov	r0, r2
 80164ba:	e7fc      	b.n	80164b6 <strncmp+0x1e>

080164bc <__swbuf_r>:
 80164bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164be:	460e      	mov	r6, r1
 80164c0:	4614      	mov	r4, r2
 80164c2:	4605      	mov	r5, r0
 80164c4:	b118      	cbz	r0, 80164ce <__swbuf_r+0x12>
 80164c6:	6983      	ldr	r3, [r0, #24]
 80164c8:	b90b      	cbnz	r3, 80164ce <__swbuf_r+0x12>
 80164ca:	f000 f9e7 	bl	801689c <__sinit>
 80164ce:	4b21      	ldr	r3, [pc, #132]	; (8016554 <__swbuf_r+0x98>)
 80164d0:	429c      	cmp	r4, r3
 80164d2:	d12b      	bne.n	801652c <__swbuf_r+0x70>
 80164d4:	686c      	ldr	r4, [r5, #4]
 80164d6:	69a3      	ldr	r3, [r4, #24]
 80164d8:	60a3      	str	r3, [r4, #8]
 80164da:	89a3      	ldrh	r3, [r4, #12]
 80164dc:	071a      	lsls	r2, r3, #28
 80164de:	d52f      	bpl.n	8016540 <__swbuf_r+0x84>
 80164e0:	6923      	ldr	r3, [r4, #16]
 80164e2:	b36b      	cbz	r3, 8016540 <__swbuf_r+0x84>
 80164e4:	6923      	ldr	r3, [r4, #16]
 80164e6:	6820      	ldr	r0, [r4, #0]
 80164e8:	1ac0      	subs	r0, r0, r3
 80164ea:	6963      	ldr	r3, [r4, #20]
 80164ec:	b2f6      	uxtb	r6, r6
 80164ee:	4283      	cmp	r3, r0
 80164f0:	4637      	mov	r7, r6
 80164f2:	dc04      	bgt.n	80164fe <__swbuf_r+0x42>
 80164f4:	4621      	mov	r1, r4
 80164f6:	4628      	mov	r0, r5
 80164f8:	f000 f93c 	bl	8016774 <_fflush_r>
 80164fc:	bb30      	cbnz	r0, 801654c <__swbuf_r+0x90>
 80164fe:	68a3      	ldr	r3, [r4, #8]
 8016500:	3b01      	subs	r3, #1
 8016502:	60a3      	str	r3, [r4, #8]
 8016504:	6823      	ldr	r3, [r4, #0]
 8016506:	1c5a      	adds	r2, r3, #1
 8016508:	6022      	str	r2, [r4, #0]
 801650a:	701e      	strb	r6, [r3, #0]
 801650c:	6963      	ldr	r3, [r4, #20]
 801650e:	3001      	adds	r0, #1
 8016510:	4283      	cmp	r3, r0
 8016512:	d004      	beq.n	801651e <__swbuf_r+0x62>
 8016514:	89a3      	ldrh	r3, [r4, #12]
 8016516:	07db      	lsls	r3, r3, #31
 8016518:	d506      	bpl.n	8016528 <__swbuf_r+0x6c>
 801651a:	2e0a      	cmp	r6, #10
 801651c:	d104      	bne.n	8016528 <__swbuf_r+0x6c>
 801651e:	4621      	mov	r1, r4
 8016520:	4628      	mov	r0, r5
 8016522:	f000 f927 	bl	8016774 <_fflush_r>
 8016526:	b988      	cbnz	r0, 801654c <__swbuf_r+0x90>
 8016528:	4638      	mov	r0, r7
 801652a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801652c:	4b0a      	ldr	r3, [pc, #40]	; (8016558 <__swbuf_r+0x9c>)
 801652e:	429c      	cmp	r4, r3
 8016530:	d101      	bne.n	8016536 <__swbuf_r+0x7a>
 8016532:	68ac      	ldr	r4, [r5, #8]
 8016534:	e7cf      	b.n	80164d6 <__swbuf_r+0x1a>
 8016536:	4b09      	ldr	r3, [pc, #36]	; (801655c <__swbuf_r+0xa0>)
 8016538:	429c      	cmp	r4, r3
 801653a:	bf08      	it	eq
 801653c:	68ec      	ldreq	r4, [r5, #12]
 801653e:	e7ca      	b.n	80164d6 <__swbuf_r+0x1a>
 8016540:	4621      	mov	r1, r4
 8016542:	4628      	mov	r0, r5
 8016544:	f000 f81a 	bl	801657c <__swsetup_r>
 8016548:	2800      	cmp	r0, #0
 801654a:	d0cb      	beq.n	80164e4 <__swbuf_r+0x28>
 801654c:	f04f 37ff 	mov.w	r7, #4294967295
 8016550:	e7ea      	b.n	8016528 <__swbuf_r+0x6c>
 8016552:	bf00      	nop
 8016554:	0802ae48 	.word	0x0802ae48
 8016558:	0802ae68 	.word	0x0802ae68
 801655c:	0802ae28 	.word	0x0802ae28

08016560 <__ascii_wctomb>:
 8016560:	b149      	cbz	r1, 8016576 <__ascii_wctomb+0x16>
 8016562:	2aff      	cmp	r2, #255	; 0xff
 8016564:	bf85      	ittet	hi
 8016566:	238a      	movhi	r3, #138	; 0x8a
 8016568:	6003      	strhi	r3, [r0, #0]
 801656a:	700a      	strbls	r2, [r1, #0]
 801656c:	f04f 30ff 	movhi.w	r0, #4294967295
 8016570:	bf98      	it	ls
 8016572:	2001      	movls	r0, #1
 8016574:	4770      	bx	lr
 8016576:	4608      	mov	r0, r1
 8016578:	4770      	bx	lr
	...

0801657c <__swsetup_r>:
 801657c:	4b32      	ldr	r3, [pc, #200]	; (8016648 <__swsetup_r+0xcc>)
 801657e:	b570      	push	{r4, r5, r6, lr}
 8016580:	681d      	ldr	r5, [r3, #0]
 8016582:	4606      	mov	r6, r0
 8016584:	460c      	mov	r4, r1
 8016586:	b125      	cbz	r5, 8016592 <__swsetup_r+0x16>
 8016588:	69ab      	ldr	r3, [r5, #24]
 801658a:	b913      	cbnz	r3, 8016592 <__swsetup_r+0x16>
 801658c:	4628      	mov	r0, r5
 801658e:	f000 f985 	bl	801689c <__sinit>
 8016592:	4b2e      	ldr	r3, [pc, #184]	; (801664c <__swsetup_r+0xd0>)
 8016594:	429c      	cmp	r4, r3
 8016596:	d10f      	bne.n	80165b8 <__swsetup_r+0x3c>
 8016598:	686c      	ldr	r4, [r5, #4]
 801659a:	89a3      	ldrh	r3, [r4, #12]
 801659c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80165a0:	0719      	lsls	r1, r3, #28
 80165a2:	d42c      	bmi.n	80165fe <__swsetup_r+0x82>
 80165a4:	06dd      	lsls	r5, r3, #27
 80165a6:	d411      	bmi.n	80165cc <__swsetup_r+0x50>
 80165a8:	2309      	movs	r3, #9
 80165aa:	6033      	str	r3, [r6, #0]
 80165ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80165b0:	81a3      	strh	r3, [r4, #12]
 80165b2:	f04f 30ff 	mov.w	r0, #4294967295
 80165b6:	e03e      	b.n	8016636 <__swsetup_r+0xba>
 80165b8:	4b25      	ldr	r3, [pc, #148]	; (8016650 <__swsetup_r+0xd4>)
 80165ba:	429c      	cmp	r4, r3
 80165bc:	d101      	bne.n	80165c2 <__swsetup_r+0x46>
 80165be:	68ac      	ldr	r4, [r5, #8]
 80165c0:	e7eb      	b.n	801659a <__swsetup_r+0x1e>
 80165c2:	4b24      	ldr	r3, [pc, #144]	; (8016654 <__swsetup_r+0xd8>)
 80165c4:	429c      	cmp	r4, r3
 80165c6:	bf08      	it	eq
 80165c8:	68ec      	ldreq	r4, [r5, #12]
 80165ca:	e7e6      	b.n	801659a <__swsetup_r+0x1e>
 80165cc:	0758      	lsls	r0, r3, #29
 80165ce:	d512      	bpl.n	80165f6 <__swsetup_r+0x7a>
 80165d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80165d2:	b141      	cbz	r1, 80165e6 <__swsetup_r+0x6a>
 80165d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80165d8:	4299      	cmp	r1, r3
 80165da:	d002      	beq.n	80165e2 <__swsetup_r+0x66>
 80165dc:	4630      	mov	r0, r6
 80165de:	f7ff fbe3 	bl	8015da8 <_free_r>
 80165e2:	2300      	movs	r3, #0
 80165e4:	6363      	str	r3, [r4, #52]	; 0x34
 80165e6:	89a3      	ldrh	r3, [r4, #12]
 80165e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80165ec:	81a3      	strh	r3, [r4, #12]
 80165ee:	2300      	movs	r3, #0
 80165f0:	6063      	str	r3, [r4, #4]
 80165f2:	6923      	ldr	r3, [r4, #16]
 80165f4:	6023      	str	r3, [r4, #0]
 80165f6:	89a3      	ldrh	r3, [r4, #12]
 80165f8:	f043 0308 	orr.w	r3, r3, #8
 80165fc:	81a3      	strh	r3, [r4, #12]
 80165fe:	6923      	ldr	r3, [r4, #16]
 8016600:	b94b      	cbnz	r3, 8016616 <__swsetup_r+0x9a>
 8016602:	89a3      	ldrh	r3, [r4, #12]
 8016604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801660c:	d003      	beq.n	8016616 <__swsetup_r+0x9a>
 801660e:	4621      	mov	r1, r4
 8016610:	4630      	mov	r0, r6
 8016612:	f000 fa07 	bl	8016a24 <__smakebuf_r>
 8016616:	89a0      	ldrh	r0, [r4, #12]
 8016618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801661c:	f010 0301 	ands.w	r3, r0, #1
 8016620:	d00a      	beq.n	8016638 <__swsetup_r+0xbc>
 8016622:	2300      	movs	r3, #0
 8016624:	60a3      	str	r3, [r4, #8]
 8016626:	6963      	ldr	r3, [r4, #20]
 8016628:	425b      	negs	r3, r3
 801662a:	61a3      	str	r3, [r4, #24]
 801662c:	6923      	ldr	r3, [r4, #16]
 801662e:	b943      	cbnz	r3, 8016642 <__swsetup_r+0xc6>
 8016630:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016634:	d1ba      	bne.n	80165ac <__swsetup_r+0x30>
 8016636:	bd70      	pop	{r4, r5, r6, pc}
 8016638:	0781      	lsls	r1, r0, #30
 801663a:	bf58      	it	pl
 801663c:	6963      	ldrpl	r3, [r4, #20]
 801663e:	60a3      	str	r3, [r4, #8]
 8016640:	e7f4      	b.n	801662c <__swsetup_r+0xb0>
 8016642:	2000      	movs	r0, #0
 8016644:	e7f7      	b.n	8016636 <__swsetup_r+0xba>
 8016646:	bf00      	nop
 8016648:	20000044 	.word	0x20000044
 801664c:	0802ae48 	.word	0x0802ae48
 8016650:	0802ae68 	.word	0x0802ae68
 8016654:	0802ae28 	.word	0x0802ae28

08016658 <abort>:
 8016658:	b508      	push	{r3, lr}
 801665a:	2006      	movs	r0, #6
 801665c:	f000 fa96 	bl	8016b8c <raise>
 8016660:	2001      	movs	r0, #1
 8016662:	f7f4 f9db 	bl	800aa1c <_exit>
	...

08016668 <__sflush_r>:
 8016668:	898a      	ldrh	r2, [r1, #12]
 801666a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801666e:	4605      	mov	r5, r0
 8016670:	0710      	lsls	r0, r2, #28
 8016672:	460c      	mov	r4, r1
 8016674:	d458      	bmi.n	8016728 <__sflush_r+0xc0>
 8016676:	684b      	ldr	r3, [r1, #4]
 8016678:	2b00      	cmp	r3, #0
 801667a:	dc05      	bgt.n	8016688 <__sflush_r+0x20>
 801667c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801667e:	2b00      	cmp	r3, #0
 8016680:	dc02      	bgt.n	8016688 <__sflush_r+0x20>
 8016682:	2000      	movs	r0, #0
 8016684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801668a:	2e00      	cmp	r6, #0
 801668c:	d0f9      	beq.n	8016682 <__sflush_r+0x1a>
 801668e:	2300      	movs	r3, #0
 8016690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016694:	682f      	ldr	r7, [r5, #0]
 8016696:	602b      	str	r3, [r5, #0]
 8016698:	d032      	beq.n	8016700 <__sflush_r+0x98>
 801669a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801669c:	89a3      	ldrh	r3, [r4, #12]
 801669e:	075a      	lsls	r2, r3, #29
 80166a0:	d505      	bpl.n	80166ae <__sflush_r+0x46>
 80166a2:	6863      	ldr	r3, [r4, #4]
 80166a4:	1ac0      	subs	r0, r0, r3
 80166a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80166a8:	b10b      	cbz	r3, 80166ae <__sflush_r+0x46>
 80166aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80166ac:	1ac0      	subs	r0, r0, r3
 80166ae:	2300      	movs	r3, #0
 80166b0:	4602      	mov	r2, r0
 80166b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80166b4:	6a21      	ldr	r1, [r4, #32]
 80166b6:	4628      	mov	r0, r5
 80166b8:	47b0      	blx	r6
 80166ba:	1c43      	adds	r3, r0, #1
 80166bc:	89a3      	ldrh	r3, [r4, #12]
 80166be:	d106      	bne.n	80166ce <__sflush_r+0x66>
 80166c0:	6829      	ldr	r1, [r5, #0]
 80166c2:	291d      	cmp	r1, #29
 80166c4:	d82c      	bhi.n	8016720 <__sflush_r+0xb8>
 80166c6:	4a2a      	ldr	r2, [pc, #168]	; (8016770 <__sflush_r+0x108>)
 80166c8:	40ca      	lsrs	r2, r1
 80166ca:	07d6      	lsls	r6, r2, #31
 80166cc:	d528      	bpl.n	8016720 <__sflush_r+0xb8>
 80166ce:	2200      	movs	r2, #0
 80166d0:	6062      	str	r2, [r4, #4]
 80166d2:	04d9      	lsls	r1, r3, #19
 80166d4:	6922      	ldr	r2, [r4, #16]
 80166d6:	6022      	str	r2, [r4, #0]
 80166d8:	d504      	bpl.n	80166e4 <__sflush_r+0x7c>
 80166da:	1c42      	adds	r2, r0, #1
 80166dc:	d101      	bne.n	80166e2 <__sflush_r+0x7a>
 80166de:	682b      	ldr	r3, [r5, #0]
 80166e0:	b903      	cbnz	r3, 80166e4 <__sflush_r+0x7c>
 80166e2:	6560      	str	r0, [r4, #84]	; 0x54
 80166e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80166e6:	602f      	str	r7, [r5, #0]
 80166e8:	2900      	cmp	r1, #0
 80166ea:	d0ca      	beq.n	8016682 <__sflush_r+0x1a>
 80166ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166f0:	4299      	cmp	r1, r3
 80166f2:	d002      	beq.n	80166fa <__sflush_r+0x92>
 80166f4:	4628      	mov	r0, r5
 80166f6:	f7ff fb57 	bl	8015da8 <_free_r>
 80166fa:	2000      	movs	r0, #0
 80166fc:	6360      	str	r0, [r4, #52]	; 0x34
 80166fe:	e7c1      	b.n	8016684 <__sflush_r+0x1c>
 8016700:	6a21      	ldr	r1, [r4, #32]
 8016702:	2301      	movs	r3, #1
 8016704:	4628      	mov	r0, r5
 8016706:	47b0      	blx	r6
 8016708:	1c41      	adds	r1, r0, #1
 801670a:	d1c7      	bne.n	801669c <__sflush_r+0x34>
 801670c:	682b      	ldr	r3, [r5, #0]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d0c4      	beq.n	801669c <__sflush_r+0x34>
 8016712:	2b1d      	cmp	r3, #29
 8016714:	d001      	beq.n	801671a <__sflush_r+0xb2>
 8016716:	2b16      	cmp	r3, #22
 8016718:	d101      	bne.n	801671e <__sflush_r+0xb6>
 801671a:	602f      	str	r7, [r5, #0]
 801671c:	e7b1      	b.n	8016682 <__sflush_r+0x1a>
 801671e:	89a3      	ldrh	r3, [r4, #12]
 8016720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016724:	81a3      	strh	r3, [r4, #12]
 8016726:	e7ad      	b.n	8016684 <__sflush_r+0x1c>
 8016728:	690f      	ldr	r7, [r1, #16]
 801672a:	2f00      	cmp	r7, #0
 801672c:	d0a9      	beq.n	8016682 <__sflush_r+0x1a>
 801672e:	0793      	lsls	r3, r2, #30
 8016730:	680e      	ldr	r6, [r1, #0]
 8016732:	bf08      	it	eq
 8016734:	694b      	ldreq	r3, [r1, #20]
 8016736:	600f      	str	r7, [r1, #0]
 8016738:	bf18      	it	ne
 801673a:	2300      	movne	r3, #0
 801673c:	eba6 0807 	sub.w	r8, r6, r7
 8016740:	608b      	str	r3, [r1, #8]
 8016742:	f1b8 0f00 	cmp.w	r8, #0
 8016746:	dd9c      	ble.n	8016682 <__sflush_r+0x1a>
 8016748:	6a21      	ldr	r1, [r4, #32]
 801674a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801674c:	4643      	mov	r3, r8
 801674e:	463a      	mov	r2, r7
 8016750:	4628      	mov	r0, r5
 8016752:	47b0      	blx	r6
 8016754:	2800      	cmp	r0, #0
 8016756:	dc06      	bgt.n	8016766 <__sflush_r+0xfe>
 8016758:	89a3      	ldrh	r3, [r4, #12]
 801675a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801675e:	81a3      	strh	r3, [r4, #12]
 8016760:	f04f 30ff 	mov.w	r0, #4294967295
 8016764:	e78e      	b.n	8016684 <__sflush_r+0x1c>
 8016766:	4407      	add	r7, r0
 8016768:	eba8 0800 	sub.w	r8, r8, r0
 801676c:	e7e9      	b.n	8016742 <__sflush_r+0xda>
 801676e:	bf00      	nop
 8016770:	20400001 	.word	0x20400001

08016774 <_fflush_r>:
 8016774:	b538      	push	{r3, r4, r5, lr}
 8016776:	690b      	ldr	r3, [r1, #16]
 8016778:	4605      	mov	r5, r0
 801677a:	460c      	mov	r4, r1
 801677c:	b913      	cbnz	r3, 8016784 <_fflush_r+0x10>
 801677e:	2500      	movs	r5, #0
 8016780:	4628      	mov	r0, r5
 8016782:	bd38      	pop	{r3, r4, r5, pc}
 8016784:	b118      	cbz	r0, 801678e <_fflush_r+0x1a>
 8016786:	6983      	ldr	r3, [r0, #24]
 8016788:	b90b      	cbnz	r3, 801678e <_fflush_r+0x1a>
 801678a:	f000 f887 	bl	801689c <__sinit>
 801678e:	4b14      	ldr	r3, [pc, #80]	; (80167e0 <_fflush_r+0x6c>)
 8016790:	429c      	cmp	r4, r3
 8016792:	d11b      	bne.n	80167cc <_fflush_r+0x58>
 8016794:	686c      	ldr	r4, [r5, #4]
 8016796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d0ef      	beq.n	801677e <_fflush_r+0xa>
 801679e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80167a0:	07d0      	lsls	r0, r2, #31
 80167a2:	d404      	bmi.n	80167ae <_fflush_r+0x3a>
 80167a4:	0599      	lsls	r1, r3, #22
 80167a6:	d402      	bmi.n	80167ae <_fflush_r+0x3a>
 80167a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80167aa:	f000 f915 	bl	80169d8 <__retarget_lock_acquire_recursive>
 80167ae:	4628      	mov	r0, r5
 80167b0:	4621      	mov	r1, r4
 80167b2:	f7ff ff59 	bl	8016668 <__sflush_r>
 80167b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80167b8:	07da      	lsls	r2, r3, #31
 80167ba:	4605      	mov	r5, r0
 80167bc:	d4e0      	bmi.n	8016780 <_fflush_r+0xc>
 80167be:	89a3      	ldrh	r3, [r4, #12]
 80167c0:	059b      	lsls	r3, r3, #22
 80167c2:	d4dd      	bmi.n	8016780 <_fflush_r+0xc>
 80167c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80167c6:	f000 f908 	bl	80169da <__retarget_lock_release_recursive>
 80167ca:	e7d9      	b.n	8016780 <_fflush_r+0xc>
 80167cc:	4b05      	ldr	r3, [pc, #20]	; (80167e4 <_fflush_r+0x70>)
 80167ce:	429c      	cmp	r4, r3
 80167d0:	d101      	bne.n	80167d6 <_fflush_r+0x62>
 80167d2:	68ac      	ldr	r4, [r5, #8]
 80167d4:	e7df      	b.n	8016796 <_fflush_r+0x22>
 80167d6:	4b04      	ldr	r3, [pc, #16]	; (80167e8 <_fflush_r+0x74>)
 80167d8:	429c      	cmp	r4, r3
 80167da:	bf08      	it	eq
 80167dc:	68ec      	ldreq	r4, [r5, #12]
 80167de:	e7da      	b.n	8016796 <_fflush_r+0x22>
 80167e0:	0802ae48 	.word	0x0802ae48
 80167e4:	0802ae68 	.word	0x0802ae68
 80167e8:	0802ae28 	.word	0x0802ae28

080167ec <std>:
 80167ec:	2300      	movs	r3, #0
 80167ee:	b510      	push	{r4, lr}
 80167f0:	4604      	mov	r4, r0
 80167f2:	e9c0 3300 	strd	r3, r3, [r0]
 80167f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80167fa:	6083      	str	r3, [r0, #8]
 80167fc:	8181      	strh	r1, [r0, #12]
 80167fe:	6643      	str	r3, [r0, #100]	; 0x64
 8016800:	81c2      	strh	r2, [r0, #14]
 8016802:	6183      	str	r3, [r0, #24]
 8016804:	4619      	mov	r1, r3
 8016806:	2208      	movs	r2, #8
 8016808:	305c      	adds	r0, #92	; 0x5c
 801680a:	f7fb fdf1 	bl	80123f0 <memset>
 801680e:	4b05      	ldr	r3, [pc, #20]	; (8016824 <std+0x38>)
 8016810:	6263      	str	r3, [r4, #36]	; 0x24
 8016812:	4b05      	ldr	r3, [pc, #20]	; (8016828 <std+0x3c>)
 8016814:	62a3      	str	r3, [r4, #40]	; 0x28
 8016816:	4b05      	ldr	r3, [pc, #20]	; (801682c <std+0x40>)
 8016818:	62e3      	str	r3, [r4, #44]	; 0x2c
 801681a:	4b05      	ldr	r3, [pc, #20]	; (8016830 <std+0x44>)
 801681c:	6224      	str	r4, [r4, #32]
 801681e:	6323      	str	r3, [r4, #48]	; 0x30
 8016820:	bd10      	pop	{r4, pc}
 8016822:	bf00      	nop
 8016824:	08016bc5 	.word	0x08016bc5
 8016828:	08016be7 	.word	0x08016be7
 801682c:	08016c1f 	.word	0x08016c1f
 8016830:	08016c43 	.word	0x08016c43

08016834 <_cleanup_r>:
 8016834:	4901      	ldr	r1, [pc, #4]	; (801683c <_cleanup_r+0x8>)
 8016836:	f000 b8af 	b.w	8016998 <_fwalk_reent>
 801683a:	bf00      	nop
 801683c:	08016775 	.word	0x08016775

08016840 <__sfmoreglue>:
 8016840:	b570      	push	{r4, r5, r6, lr}
 8016842:	1e4a      	subs	r2, r1, #1
 8016844:	2568      	movs	r5, #104	; 0x68
 8016846:	4355      	muls	r5, r2
 8016848:	460e      	mov	r6, r1
 801684a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801684e:	f7ff fafb 	bl	8015e48 <_malloc_r>
 8016852:	4604      	mov	r4, r0
 8016854:	b140      	cbz	r0, 8016868 <__sfmoreglue+0x28>
 8016856:	2100      	movs	r1, #0
 8016858:	e9c0 1600 	strd	r1, r6, [r0]
 801685c:	300c      	adds	r0, #12
 801685e:	60a0      	str	r0, [r4, #8]
 8016860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016864:	f7fb fdc4 	bl	80123f0 <memset>
 8016868:	4620      	mov	r0, r4
 801686a:	bd70      	pop	{r4, r5, r6, pc}

0801686c <__sfp_lock_acquire>:
 801686c:	4801      	ldr	r0, [pc, #4]	; (8016874 <__sfp_lock_acquire+0x8>)
 801686e:	f000 b8b3 	b.w	80169d8 <__retarget_lock_acquire_recursive>
 8016872:	bf00      	nop
 8016874:	20000c88 	.word	0x20000c88

08016878 <__sfp_lock_release>:
 8016878:	4801      	ldr	r0, [pc, #4]	; (8016880 <__sfp_lock_release+0x8>)
 801687a:	f000 b8ae 	b.w	80169da <__retarget_lock_release_recursive>
 801687e:	bf00      	nop
 8016880:	20000c88 	.word	0x20000c88

08016884 <__sinit_lock_acquire>:
 8016884:	4801      	ldr	r0, [pc, #4]	; (801688c <__sinit_lock_acquire+0x8>)
 8016886:	f000 b8a7 	b.w	80169d8 <__retarget_lock_acquire_recursive>
 801688a:	bf00      	nop
 801688c:	20000c83 	.word	0x20000c83

08016890 <__sinit_lock_release>:
 8016890:	4801      	ldr	r0, [pc, #4]	; (8016898 <__sinit_lock_release+0x8>)
 8016892:	f000 b8a2 	b.w	80169da <__retarget_lock_release_recursive>
 8016896:	bf00      	nop
 8016898:	20000c83 	.word	0x20000c83

0801689c <__sinit>:
 801689c:	b510      	push	{r4, lr}
 801689e:	4604      	mov	r4, r0
 80168a0:	f7ff fff0 	bl	8016884 <__sinit_lock_acquire>
 80168a4:	69a3      	ldr	r3, [r4, #24]
 80168a6:	b11b      	cbz	r3, 80168b0 <__sinit+0x14>
 80168a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168ac:	f7ff bff0 	b.w	8016890 <__sinit_lock_release>
 80168b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80168b4:	6523      	str	r3, [r4, #80]	; 0x50
 80168b6:	4b13      	ldr	r3, [pc, #76]	; (8016904 <__sinit+0x68>)
 80168b8:	4a13      	ldr	r2, [pc, #76]	; (8016908 <__sinit+0x6c>)
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80168be:	42a3      	cmp	r3, r4
 80168c0:	bf04      	itt	eq
 80168c2:	2301      	moveq	r3, #1
 80168c4:	61a3      	streq	r3, [r4, #24]
 80168c6:	4620      	mov	r0, r4
 80168c8:	f000 f820 	bl	801690c <__sfp>
 80168cc:	6060      	str	r0, [r4, #4]
 80168ce:	4620      	mov	r0, r4
 80168d0:	f000 f81c 	bl	801690c <__sfp>
 80168d4:	60a0      	str	r0, [r4, #8]
 80168d6:	4620      	mov	r0, r4
 80168d8:	f000 f818 	bl	801690c <__sfp>
 80168dc:	2200      	movs	r2, #0
 80168de:	60e0      	str	r0, [r4, #12]
 80168e0:	2104      	movs	r1, #4
 80168e2:	6860      	ldr	r0, [r4, #4]
 80168e4:	f7ff ff82 	bl	80167ec <std>
 80168e8:	68a0      	ldr	r0, [r4, #8]
 80168ea:	2201      	movs	r2, #1
 80168ec:	2109      	movs	r1, #9
 80168ee:	f7ff ff7d 	bl	80167ec <std>
 80168f2:	68e0      	ldr	r0, [r4, #12]
 80168f4:	2202      	movs	r2, #2
 80168f6:	2112      	movs	r1, #18
 80168f8:	f7ff ff78 	bl	80167ec <std>
 80168fc:	2301      	movs	r3, #1
 80168fe:	61a3      	str	r3, [r4, #24]
 8016900:	e7d2      	b.n	80168a8 <__sinit+0xc>
 8016902:	bf00      	nop
 8016904:	0802a978 	.word	0x0802a978
 8016908:	08016835 	.word	0x08016835

0801690c <__sfp>:
 801690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801690e:	4607      	mov	r7, r0
 8016910:	f7ff ffac 	bl	801686c <__sfp_lock_acquire>
 8016914:	4b1e      	ldr	r3, [pc, #120]	; (8016990 <__sfp+0x84>)
 8016916:	681e      	ldr	r6, [r3, #0]
 8016918:	69b3      	ldr	r3, [r6, #24]
 801691a:	b913      	cbnz	r3, 8016922 <__sfp+0x16>
 801691c:	4630      	mov	r0, r6
 801691e:	f7ff ffbd 	bl	801689c <__sinit>
 8016922:	3648      	adds	r6, #72	; 0x48
 8016924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016928:	3b01      	subs	r3, #1
 801692a:	d503      	bpl.n	8016934 <__sfp+0x28>
 801692c:	6833      	ldr	r3, [r6, #0]
 801692e:	b30b      	cbz	r3, 8016974 <__sfp+0x68>
 8016930:	6836      	ldr	r6, [r6, #0]
 8016932:	e7f7      	b.n	8016924 <__sfp+0x18>
 8016934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016938:	b9d5      	cbnz	r5, 8016970 <__sfp+0x64>
 801693a:	4b16      	ldr	r3, [pc, #88]	; (8016994 <__sfp+0x88>)
 801693c:	60e3      	str	r3, [r4, #12]
 801693e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016942:	6665      	str	r5, [r4, #100]	; 0x64
 8016944:	f000 f847 	bl	80169d6 <__retarget_lock_init_recursive>
 8016948:	f7ff ff96 	bl	8016878 <__sfp_lock_release>
 801694c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016954:	6025      	str	r5, [r4, #0]
 8016956:	61a5      	str	r5, [r4, #24]
 8016958:	2208      	movs	r2, #8
 801695a:	4629      	mov	r1, r5
 801695c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016960:	f7fb fd46 	bl	80123f0 <memset>
 8016964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801696c:	4620      	mov	r0, r4
 801696e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016970:	3468      	adds	r4, #104	; 0x68
 8016972:	e7d9      	b.n	8016928 <__sfp+0x1c>
 8016974:	2104      	movs	r1, #4
 8016976:	4638      	mov	r0, r7
 8016978:	f7ff ff62 	bl	8016840 <__sfmoreglue>
 801697c:	4604      	mov	r4, r0
 801697e:	6030      	str	r0, [r6, #0]
 8016980:	2800      	cmp	r0, #0
 8016982:	d1d5      	bne.n	8016930 <__sfp+0x24>
 8016984:	f7ff ff78 	bl	8016878 <__sfp_lock_release>
 8016988:	230c      	movs	r3, #12
 801698a:	603b      	str	r3, [r7, #0]
 801698c:	e7ee      	b.n	801696c <__sfp+0x60>
 801698e:	bf00      	nop
 8016990:	0802a978 	.word	0x0802a978
 8016994:	ffff0001 	.word	0xffff0001

08016998 <_fwalk_reent>:
 8016998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801699c:	4606      	mov	r6, r0
 801699e:	4688      	mov	r8, r1
 80169a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80169a4:	2700      	movs	r7, #0
 80169a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80169aa:	f1b9 0901 	subs.w	r9, r9, #1
 80169ae:	d505      	bpl.n	80169bc <_fwalk_reent+0x24>
 80169b0:	6824      	ldr	r4, [r4, #0]
 80169b2:	2c00      	cmp	r4, #0
 80169b4:	d1f7      	bne.n	80169a6 <_fwalk_reent+0xe>
 80169b6:	4638      	mov	r0, r7
 80169b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169bc:	89ab      	ldrh	r3, [r5, #12]
 80169be:	2b01      	cmp	r3, #1
 80169c0:	d907      	bls.n	80169d2 <_fwalk_reent+0x3a>
 80169c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80169c6:	3301      	adds	r3, #1
 80169c8:	d003      	beq.n	80169d2 <_fwalk_reent+0x3a>
 80169ca:	4629      	mov	r1, r5
 80169cc:	4630      	mov	r0, r6
 80169ce:	47c0      	blx	r8
 80169d0:	4307      	orrs	r7, r0
 80169d2:	3568      	adds	r5, #104	; 0x68
 80169d4:	e7e9      	b.n	80169aa <_fwalk_reent+0x12>

080169d6 <__retarget_lock_init_recursive>:
 80169d6:	4770      	bx	lr

080169d8 <__retarget_lock_acquire_recursive>:
 80169d8:	4770      	bx	lr

080169da <__retarget_lock_release_recursive>:
 80169da:	4770      	bx	lr

080169dc <__swhatbuf_r>:
 80169dc:	b570      	push	{r4, r5, r6, lr}
 80169de:	460e      	mov	r6, r1
 80169e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169e4:	2900      	cmp	r1, #0
 80169e6:	b096      	sub	sp, #88	; 0x58
 80169e8:	4614      	mov	r4, r2
 80169ea:	461d      	mov	r5, r3
 80169ec:	da07      	bge.n	80169fe <__swhatbuf_r+0x22>
 80169ee:	2300      	movs	r3, #0
 80169f0:	602b      	str	r3, [r5, #0]
 80169f2:	89b3      	ldrh	r3, [r6, #12]
 80169f4:	061a      	lsls	r2, r3, #24
 80169f6:	d410      	bmi.n	8016a1a <__swhatbuf_r+0x3e>
 80169f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80169fc:	e00e      	b.n	8016a1c <__swhatbuf_r+0x40>
 80169fe:	466a      	mov	r2, sp
 8016a00:	f000 f946 	bl	8016c90 <_fstat_r>
 8016a04:	2800      	cmp	r0, #0
 8016a06:	dbf2      	blt.n	80169ee <__swhatbuf_r+0x12>
 8016a08:	9a01      	ldr	r2, [sp, #4]
 8016a0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016a0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016a12:	425a      	negs	r2, r3
 8016a14:	415a      	adcs	r2, r3
 8016a16:	602a      	str	r2, [r5, #0]
 8016a18:	e7ee      	b.n	80169f8 <__swhatbuf_r+0x1c>
 8016a1a:	2340      	movs	r3, #64	; 0x40
 8016a1c:	2000      	movs	r0, #0
 8016a1e:	6023      	str	r3, [r4, #0]
 8016a20:	b016      	add	sp, #88	; 0x58
 8016a22:	bd70      	pop	{r4, r5, r6, pc}

08016a24 <__smakebuf_r>:
 8016a24:	898b      	ldrh	r3, [r1, #12]
 8016a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a28:	079d      	lsls	r5, r3, #30
 8016a2a:	4606      	mov	r6, r0
 8016a2c:	460c      	mov	r4, r1
 8016a2e:	d507      	bpl.n	8016a40 <__smakebuf_r+0x1c>
 8016a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016a34:	6023      	str	r3, [r4, #0]
 8016a36:	6123      	str	r3, [r4, #16]
 8016a38:	2301      	movs	r3, #1
 8016a3a:	6163      	str	r3, [r4, #20]
 8016a3c:	b002      	add	sp, #8
 8016a3e:	bd70      	pop	{r4, r5, r6, pc}
 8016a40:	ab01      	add	r3, sp, #4
 8016a42:	466a      	mov	r2, sp
 8016a44:	f7ff ffca 	bl	80169dc <__swhatbuf_r>
 8016a48:	9900      	ldr	r1, [sp, #0]
 8016a4a:	4605      	mov	r5, r0
 8016a4c:	4630      	mov	r0, r6
 8016a4e:	f7ff f9fb 	bl	8015e48 <_malloc_r>
 8016a52:	b948      	cbnz	r0, 8016a68 <__smakebuf_r+0x44>
 8016a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a58:	059a      	lsls	r2, r3, #22
 8016a5a:	d4ef      	bmi.n	8016a3c <__smakebuf_r+0x18>
 8016a5c:	f023 0303 	bic.w	r3, r3, #3
 8016a60:	f043 0302 	orr.w	r3, r3, #2
 8016a64:	81a3      	strh	r3, [r4, #12]
 8016a66:	e7e3      	b.n	8016a30 <__smakebuf_r+0xc>
 8016a68:	4b0d      	ldr	r3, [pc, #52]	; (8016aa0 <__smakebuf_r+0x7c>)
 8016a6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8016a6c:	89a3      	ldrh	r3, [r4, #12]
 8016a6e:	6020      	str	r0, [r4, #0]
 8016a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a74:	81a3      	strh	r3, [r4, #12]
 8016a76:	9b00      	ldr	r3, [sp, #0]
 8016a78:	6163      	str	r3, [r4, #20]
 8016a7a:	9b01      	ldr	r3, [sp, #4]
 8016a7c:	6120      	str	r0, [r4, #16]
 8016a7e:	b15b      	cbz	r3, 8016a98 <__smakebuf_r+0x74>
 8016a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a84:	4630      	mov	r0, r6
 8016a86:	f000 f915 	bl	8016cb4 <_isatty_r>
 8016a8a:	b128      	cbz	r0, 8016a98 <__smakebuf_r+0x74>
 8016a8c:	89a3      	ldrh	r3, [r4, #12]
 8016a8e:	f023 0303 	bic.w	r3, r3, #3
 8016a92:	f043 0301 	orr.w	r3, r3, #1
 8016a96:	81a3      	strh	r3, [r4, #12]
 8016a98:	89a0      	ldrh	r0, [r4, #12]
 8016a9a:	4305      	orrs	r5, r0
 8016a9c:	81a5      	strh	r5, [r4, #12]
 8016a9e:	e7cd      	b.n	8016a3c <__smakebuf_r+0x18>
 8016aa0:	08016835 	.word	0x08016835

08016aa4 <memmove>:
 8016aa4:	4288      	cmp	r0, r1
 8016aa6:	b510      	push	{r4, lr}
 8016aa8:	eb01 0402 	add.w	r4, r1, r2
 8016aac:	d902      	bls.n	8016ab4 <memmove+0x10>
 8016aae:	4284      	cmp	r4, r0
 8016ab0:	4623      	mov	r3, r4
 8016ab2:	d807      	bhi.n	8016ac4 <memmove+0x20>
 8016ab4:	1e43      	subs	r3, r0, #1
 8016ab6:	42a1      	cmp	r1, r4
 8016ab8:	d008      	beq.n	8016acc <memmove+0x28>
 8016aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016ac2:	e7f8      	b.n	8016ab6 <memmove+0x12>
 8016ac4:	4402      	add	r2, r0
 8016ac6:	4601      	mov	r1, r0
 8016ac8:	428a      	cmp	r2, r1
 8016aca:	d100      	bne.n	8016ace <memmove+0x2a>
 8016acc:	bd10      	pop	{r4, pc}
 8016ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016ad6:	e7f7      	b.n	8016ac8 <memmove+0x24>

08016ad8 <__malloc_lock>:
 8016ad8:	4801      	ldr	r0, [pc, #4]	; (8016ae0 <__malloc_lock+0x8>)
 8016ada:	f7ff bf7d 	b.w	80169d8 <__retarget_lock_acquire_recursive>
 8016ade:	bf00      	nop
 8016ae0:	20000c84 	.word	0x20000c84

08016ae4 <__malloc_unlock>:
 8016ae4:	4801      	ldr	r0, [pc, #4]	; (8016aec <__malloc_unlock+0x8>)
 8016ae6:	f7ff bf78 	b.w	80169da <__retarget_lock_release_recursive>
 8016aea:	bf00      	nop
 8016aec:	20000c84 	.word	0x20000c84

08016af0 <_realloc_r>:
 8016af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016af2:	4607      	mov	r7, r0
 8016af4:	4614      	mov	r4, r2
 8016af6:	460e      	mov	r6, r1
 8016af8:	b921      	cbnz	r1, 8016b04 <_realloc_r+0x14>
 8016afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016afe:	4611      	mov	r1, r2
 8016b00:	f7ff b9a2 	b.w	8015e48 <_malloc_r>
 8016b04:	b922      	cbnz	r2, 8016b10 <_realloc_r+0x20>
 8016b06:	f7ff f94f 	bl	8015da8 <_free_r>
 8016b0a:	4625      	mov	r5, r4
 8016b0c:	4628      	mov	r0, r5
 8016b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b10:	f000 f8f2 	bl	8016cf8 <_malloc_usable_size_r>
 8016b14:	42a0      	cmp	r0, r4
 8016b16:	d20f      	bcs.n	8016b38 <_realloc_r+0x48>
 8016b18:	4621      	mov	r1, r4
 8016b1a:	4638      	mov	r0, r7
 8016b1c:	f7ff f994 	bl	8015e48 <_malloc_r>
 8016b20:	4605      	mov	r5, r0
 8016b22:	2800      	cmp	r0, #0
 8016b24:	d0f2      	beq.n	8016b0c <_realloc_r+0x1c>
 8016b26:	4631      	mov	r1, r6
 8016b28:	4622      	mov	r2, r4
 8016b2a:	f7fe fc65 	bl	80153f8 <memcpy>
 8016b2e:	4631      	mov	r1, r6
 8016b30:	4638      	mov	r0, r7
 8016b32:	f7ff f939 	bl	8015da8 <_free_r>
 8016b36:	e7e9      	b.n	8016b0c <_realloc_r+0x1c>
 8016b38:	4635      	mov	r5, r6
 8016b3a:	e7e7      	b.n	8016b0c <_realloc_r+0x1c>

08016b3c <_raise_r>:
 8016b3c:	291f      	cmp	r1, #31
 8016b3e:	b538      	push	{r3, r4, r5, lr}
 8016b40:	4604      	mov	r4, r0
 8016b42:	460d      	mov	r5, r1
 8016b44:	d904      	bls.n	8016b50 <_raise_r+0x14>
 8016b46:	2316      	movs	r3, #22
 8016b48:	6003      	str	r3, [r0, #0]
 8016b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8016b4e:	bd38      	pop	{r3, r4, r5, pc}
 8016b50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016b52:	b112      	cbz	r2, 8016b5a <_raise_r+0x1e>
 8016b54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016b58:	b94b      	cbnz	r3, 8016b6e <_raise_r+0x32>
 8016b5a:	4620      	mov	r0, r4
 8016b5c:	f000 f830 	bl	8016bc0 <_getpid_r>
 8016b60:	462a      	mov	r2, r5
 8016b62:	4601      	mov	r1, r0
 8016b64:	4620      	mov	r0, r4
 8016b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b6a:	f000 b817 	b.w	8016b9c <_kill_r>
 8016b6e:	2b01      	cmp	r3, #1
 8016b70:	d00a      	beq.n	8016b88 <_raise_r+0x4c>
 8016b72:	1c59      	adds	r1, r3, #1
 8016b74:	d103      	bne.n	8016b7e <_raise_r+0x42>
 8016b76:	2316      	movs	r3, #22
 8016b78:	6003      	str	r3, [r0, #0]
 8016b7a:	2001      	movs	r0, #1
 8016b7c:	e7e7      	b.n	8016b4e <_raise_r+0x12>
 8016b7e:	2400      	movs	r4, #0
 8016b80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016b84:	4628      	mov	r0, r5
 8016b86:	4798      	blx	r3
 8016b88:	2000      	movs	r0, #0
 8016b8a:	e7e0      	b.n	8016b4e <_raise_r+0x12>

08016b8c <raise>:
 8016b8c:	4b02      	ldr	r3, [pc, #8]	; (8016b98 <raise+0xc>)
 8016b8e:	4601      	mov	r1, r0
 8016b90:	6818      	ldr	r0, [r3, #0]
 8016b92:	f7ff bfd3 	b.w	8016b3c <_raise_r>
 8016b96:	bf00      	nop
 8016b98:	20000044 	.word	0x20000044

08016b9c <_kill_r>:
 8016b9c:	b538      	push	{r3, r4, r5, lr}
 8016b9e:	4d07      	ldr	r5, [pc, #28]	; (8016bbc <_kill_r+0x20>)
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	4604      	mov	r4, r0
 8016ba4:	4608      	mov	r0, r1
 8016ba6:	4611      	mov	r1, r2
 8016ba8:	602b      	str	r3, [r5, #0]
 8016baa:	f7f3 ff27 	bl	800a9fc <_kill>
 8016bae:	1c43      	adds	r3, r0, #1
 8016bb0:	d102      	bne.n	8016bb8 <_kill_r+0x1c>
 8016bb2:	682b      	ldr	r3, [r5, #0]
 8016bb4:	b103      	cbz	r3, 8016bb8 <_kill_r+0x1c>
 8016bb6:	6023      	str	r3, [r4, #0]
 8016bb8:	bd38      	pop	{r3, r4, r5, pc}
 8016bba:	bf00      	nop
 8016bbc:	20000c8c 	.word	0x20000c8c

08016bc0 <_getpid_r>:
 8016bc0:	f7f3 bf14 	b.w	800a9ec <_getpid>

08016bc4 <__sread>:
 8016bc4:	b510      	push	{r4, lr}
 8016bc6:	460c      	mov	r4, r1
 8016bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bcc:	f000 f89c 	bl	8016d08 <_read_r>
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	bfab      	itete	ge
 8016bd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8016bd8:	181b      	addge	r3, r3, r0
 8016bda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016bde:	bfac      	ite	ge
 8016be0:	6563      	strge	r3, [r4, #84]	; 0x54
 8016be2:	81a3      	strhlt	r3, [r4, #12]
 8016be4:	bd10      	pop	{r4, pc}

08016be6 <__swrite>:
 8016be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bea:	461f      	mov	r7, r3
 8016bec:	898b      	ldrh	r3, [r1, #12]
 8016bee:	05db      	lsls	r3, r3, #23
 8016bf0:	4605      	mov	r5, r0
 8016bf2:	460c      	mov	r4, r1
 8016bf4:	4616      	mov	r6, r2
 8016bf6:	d505      	bpl.n	8016c04 <__swrite+0x1e>
 8016bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bfc:	2302      	movs	r3, #2
 8016bfe:	2200      	movs	r2, #0
 8016c00:	f000 f868 	bl	8016cd4 <_lseek_r>
 8016c04:	89a3      	ldrh	r3, [r4, #12]
 8016c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c0e:	81a3      	strh	r3, [r4, #12]
 8016c10:	4632      	mov	r2, r6
 8016c12:	463b      	mov	r3, r7
 8016c14:	4628      	mov	r0, r5
 8016c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c1a:	f000 b817 	b.w	8016c4c <_write_r>

08016c1e <__sseek>:
 8016c1e:	b510      	push	{r4, lr}
 8016c20:	460c      	mov	r4, r1
 8016c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c26:	f000 f855 	bl	8016cd4 <_lseek_r>
 8016c2a:	1c43      	adds	r3, r0, #1
 8016c2c:	89a3      	ldrh	r3, [r4, #12]
 8016c2e:	bf15      	itete	ne
 8016c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c3a:	81a3      	strheq	r3, [r4, #12]
 8016c3c:	bf18      	it	ne
 8016c3e:	81a3      	strhne	r3, [r4, #12]
 8016c40:	bd10      	pop	{r4, pc}

08016c42 <__sclose>:
 8016c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c46:	f000 b813 	b.w	8016c70 <_close_r>
	...

08016c4c <_write_r>:
 8016c4c:	b538      	push	{r3, r4, r5, lr}
 8016c4e:	4d07      	ldr	r5, [pc, #28]	; (8016c6c <_write_r+0x20>)
 8016c50:	4604      	mov	r4, r0
 8016c52:	4608      	mov	r0, r1
 8016c54:	4611      	mov	r1, r2
 8016c56:	2200      	movs	r2, #0
 8016c58:	602a      	str	r2, [r5, #0]
 8016c5a:	461a      	mov	r2, r3
 8016c5c:	f7f3 ff05 	bl	800aa6a <_write>
 8016c60:	1c43      	adds	r3, r0, #1
 8016c62:	d102      	bne.n	8016c6a <_write_r+0x1e>
 8016c64:	682b      	ldr	r3, [r5, #0]
 8016c66:	b103      	cbz	r3, 8016c6a <_write_r+0x1e>
 8016c68:	6023      	str	r3, [r4, #0]
 8016c6a:	bd38      	pop	{r3, r4, r5, pc}
 8016c6c:	20000c8c 	.word	0x20000c8c

08016c70 <_close_r>:
 8016c70:	b538      	push	{r3, r4, r5, lr}
 8016c72:	4d06      	ldr	r5, [pc, #24]	; (8016c8c <_close_r+0x1c>)
 8016c74:	2300      	movs	r3, #0
 8016c76:	4604      	mov	r4, r0
 8016c78:	4608      	mov	r0, r1
 8016c7a:	602b      	str	r3, [r5, #0]
 8016c7c:	f7f3 ff11 	bl	800aaa2 <_close>
 8016c80:	1c43      	adds	r3, r0, #1
 8016c82:	d102      	bne.n	8016c8a <_close_r+0x1a>
 8016c84:	682b      	ldr	r3, [r5, #0]
 8016c86:	b103      	cbz	r3, 8016c8a <_close_r+0x1a>
 8016c88:	6023      	str	r3, [r4, #0]
 8016c8a:	bd38      	pop	{r3, r4, r5, pc}
 8016c8c:	20000c8c 	.word	0x20000c8c

08016c90 <_fstat_r>:
 8016c90:	b538      	push	{r3, r4, r5, lr}
 8016c92:	4d07      	ldr	r5, [pc, #28]	; (8016cb0 <_fstat_r+0x20>)
 8016c94:	2300      	movs	r3, #0
 8016c96:	4604      	mov	r4, r0
 8016c98:	4608      	mov	r0, r1
 8016c9a:	4611      	mov	r1, r2
 8016c9c:	602b      	str	r3, [r5, #0]
 8016c9e:	f7f3 ff0c 	bl	800aaba <_fstat>
 8016ca2:	1c43      	adds	r3, r0, #1
 8016ca4:	d102      	bne.n	8016cac <_fstat_r+0x1c>
 8016ca6:	682b      	ldr	r3, [r5, #0]
 8016ca8:	b103      	cbz	r3, 8016cac <_fstat_r+0x1c>
 8016caa:	6023      	str	r3, [r4, #0]
 8016cac:	bd38      	pop	{r3, r4, r5, pc}
 8016cae:	bf00      	nop
 8016cb0:	20000c8c 	.word	0x20000c8c

08016cb4 <_isatty_r>:
 8016cb4:	b538      	push	{r3, r4, r5, lr}
 8016cb6:	4d06      	ldr	r5, [pc, #24]	; (8016cd0 <_isatty_r+0x1c>)
 8016cb8:	2300      	movs	r3, #0
 8016cba:	4604      	mov	r4, r0
 8016cbc:	4608      	mov	r0, r1
 8016cbe:	602b      	str	r3, [r5, #0]
 8016cc0:	f7f3 ff0b 	bl	800aada <_isatty>
 8016cc4:	1c43      	adds	r3, r0, #1
 8016cc6:	d102      	bne.n	8016cce <_isatty_r+0x1a>
 8016cc8:	682b      	ldr	r3, [r5, #0]
 8016cca:	b103      	cbz	r3, 8016cce <_isatty_r+0x1a>
 8016ccc:	6023      	str	r3, [r4, #0]
 8016cce:	bd38      	pop	{r3, r4, r5, pc}
 8016cd0:	20000c8c 	.word	0x20000c8c

08016cd4 <_lseek_r>:
 8016cd4:	b538      	push	{r3, r4, r5, lr}
 8016cd6:	4d07      	ldr	r5, [pc, #28]	; (8016cf4 <_lseek_r+0x20>)
 8016cd8:	4604      	mov	r4, r0
 8016cda:	4608      	mov	r0, r1
 8016cdc:	4611      	mov	r1, r2
 8016cde:	2200      	movs	r2, #0
 8016ce0:	602a      	str	r2, [r5, #0]
 8016ce2:	461a      	mov	r2, r3
 8016ce4:	f7f3 ff04 	bl	800aaf0 <_lseek>
 8016ce8:	1c43      	adds	r3, r0, #1
 8016cea:	d102      	bne.n	8016cf2 <_lseek_r+0x1e>
 8016cec:	682b      	ldr	r3, [r5, #0]
 8016cee:	b103      	cbz	r3, 8016cf2 <_lseek_r+0x1e>
 8016cf0:	6023      	str	r3, [r4, #0]
 8016cf2:	bd38      	pop	{r3, r4, r5, pc}
 8016cf4:	20000c8c 	.word	0x20000c8c

08016cf8 <_malloc_usable_size_r>:
 8016cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cfc:	1f18      	subs	r0, r3, #4
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	bfbc      	itt	lt
 8016d02:	580b      	ldrlt	r3, [r1, r0]
 8016d04:	18c0      	addlt	r0, r0, r3
 8016d06:	4770      	bx	lr

08016d08 <_read_r>:
 8016d08:	b538      	push	{r3, r4, r5, lr}
 8016d0a:	4d07      	ldr	r5, [pc, #28]	; (8016d28 <_read_r+0x20>)
 8016d0c:	4604      	mov	r4, r0
 8016d0e:	4608      	mov	r0, r1
 8016d10:	4611      	mov	r1, r2
 8016d12:	2200      	movs	r2, #0
 8016d14:	602a      	str	r2, [r5, #0]
 8016d16:	461a      	mov	r2, r3
 8016d18:	f7f3 fe8a 	bl	800aa30 <_read>
 8016d1c:	1c43      	adds	r3, r0, #1
 8016d1e:	d102      	bne.n	8016d26 <_read_r+0x1e>
 8016d20:	682b      	ldr	r3, [r5, #0]
 8016d22:	b103      	cbz	r3, 8016d26 <_read_r+0x1e>
 8016d24:	6023      	str	r3, [r4, #0]
 8016d26:	bd38      	pop	{r3, r4, r5, pc}
 8016d28:	20000c8c 	.word	0x20000c8c

08016d2c <_init>:
 8016d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d2e:	bf00      	nop
 8016d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d32:	bc08      	pop	{r3}
 8016d34:	469e      	mov	lr, r3
 8016d36:	4770      	bx	lr

08016d38 <_fini>:
 8016d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d3a:	bf00      	nop
 8016d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d3e:	bc08      	pop	{r3}
 8016d40:	469e      	mov	lr, r3
 8016d42:	4770      	bx	lr
