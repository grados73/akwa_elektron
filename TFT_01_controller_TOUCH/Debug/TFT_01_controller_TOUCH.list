
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001604c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014118  080161f0  080161f0  000261f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a308  0802a308  00040218  2**0
                  CONTENTS
  4 .ARM          00000008  0802a308  0802a308  0003a308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a310  0802a310  00040218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a310  0802a310  0003a310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a314  0802a314  0003a314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0802a318  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a74  20000218  0802a530  00040218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c8c  0802a530  00040c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000258aa  00000000  00000000  00040248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004da6  00000000  00000000  00065af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  0006a898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c8  00000000  00000000  0006c310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6f4  00000000  00000000  0006dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000270a6  00000000  00000000  0008a2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099904  00000000  00000000  000b1372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ac76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008260  00000000  00000000  0014accc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080161d4 	.word	0x080161d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	080161d4 	.word	0x080161d4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <UART_ESP_ParseLine>:

BlynkServerData Blynk1;


void UART_ESP_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

		if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f009 f9e1 	bl	800a3f2 <UARTDMA_GetLineFromReceiveBuffer>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10f      	bne.n	8001056 <UART_ESP_ParseLine+0x3a>
		{
			// Header
			char* ParsePointer = strtok(BufferReceive, "=");
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4909      	ldr	r1, [pc, #36]	; (8001060 <UART_ESP_ParseLine+0x44>)
 800103c:	4618      	mov	r0, r3
 800103e:	f012 f90b 	bl	8013258 <strtok>
 8001042:	64f8      	str	r0, [r7, #76]	; 0x4c

			if (strcmp(ParsePointer, "CHRELAY") == 0) // Command to change state of Relays
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <UART_ESP_ParseLine+0x48>)
 8001046:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001048:	f7ff f8ca 	bl	80001e0 <strcmp>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <UART_ESP_ParseLine+0x3a>
			{
				ESP_ParseChangeRelayState();
 8001052:	f000 f809 	bl	8001068 <ESP_ParseChangeRelayState>
			}
		}
}
 8001056:	bf00      	nop
 8001058:	3750      	adds	r7, #80	; 0x50
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	080161f0 	.word	0x080161f0
 8001064:	080161f4 	.word	0x080161f4

08001068 <ESP_ParseChangeRelayState>:

//
// Get info from Blynk Server About change Relays state
// CHRELAY=7,1\n
void ESP_ParseChangeRelayState(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
	uint8_t RelayNr = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
	uint8_t NewState = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73bb      	strb	r3, [r7, #14]
	char* ParsePointer = strtok(NULL, ",");
 8001076:	4913      	ldr	r1, [pc, #76]	; (80010c4 <ESP_ParseChangeRelayState+0x5c>)
 8001078:	2000      	movs	r0, #0
 800107a:	f012 f8ed 	bl	8013258 <strtok>
 800107e:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d012      	beq.n	80010ae <ESP_ParseChangeRelayState+0x46>
	{
		RelayNr = atoi(ParsePointer);
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f010 fbd4 	bl	8011836 <atoi>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
		if(strlen(ParsePointer) > 0)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <ESP_ParseChangeRelayState+0x46>
		{
			char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800109a:	490a      	ldr	r1, [pc, #40]	; (80010c4 <ESP_ParseChangeRelayState+0x5c>)
 800109c:	2000      	movs	r0, #0
 800109e:	f012 f8db 	bl	8013258 <strtok>
 80010a2:	6078      	str	r0, [r7, #4]
			NewState = atoi(ParsePointer); // If there are no chars, change string to integer
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f010 fbc6 	bl	8011836 <atoi>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73bb      	strb	r3, [r7, #14]
		}
	}
	ESP_ChangeRelayState(RelayNr, NewState);
 80010ae:	7bba      	ldrb	r2, [r7, #14]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f807 	bl	80010c8 <ESP_ChangeRelayState>
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	080161fc 	.word	0x080161fc

080010c8 <ESP_ChangeRelayState>:


void ESP_ChangeRelayState(uint8_t RelayNumber, uint8_t NewState)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
	// First Relay (Switch)
	if(1 == RelayNumber)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10a      	bne.n	80010f4 <ESP_ChangeRelayState+0x2c>
	{
		if(0 == NewState) firstSwitchTurn(0); //Turn OFF
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <ESP_ChangeRelayState+0x24>
 80010e4:	2000      	movs	r0, #0
 80010e6:	f007 fb0d 	bl	8008704 <firstSwitchTurn>
	else if(8 == RelayNumber)
	{
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
		else fourthLightTurn(1); //Turn ON
	}
}
 80010ea:	e064      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else firstSwitchTurn(1); //Turn ON
 80010ec:	2001      	movs	r0, #1
 80010ee:	f007 fb09 	bl	8008704 <firstSwitchTurn>
}
 80010f2:	e060      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(2 == RelayNumber)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d10a      	bne.n	8001110 <ESP_ChangeRelayState+0x48>
		if(0 == NewState) secondSwitchTurn(0); //Turn OFF
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <ESP_ChangeRelayState+0x40>
 8001100:	2000      	movs	r0, #0
 8001102:	f007 fb81 	bl	8008808 <secondSwitchTurn>
}
 8001106:	e056      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else secondSwitchTurn(1); //Turn ON
 8001108:	2001      	movs	r0, #1
 800110a:	f007 fb7d 	bl	8008808 <secondSwitchTurn>
}
 800110e:	e052      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(3 == RelayNumber)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d10a      	bne.n	800112c <ESP_ChangeRelayState+0x64>
		if(0 == NewState) thirdSwitchTurn(0); //Turn OFF
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <ESP_ChangeRelayState+0x5c>
 800111c:	2000      	movs	r0, #0
 800111e:	f007 fbf5 	bl	800890c <thirdSwitchTurn>
}
 8001122:	e048      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else thirdSwitchTurn(1); //Turn ON
 8001124:	2001      	movs	r0, #1
 8001126:	f007 fbf1 	bl	800890c <thirdSwitchTurn>
}
 800112a:	e044      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(4 == RelayNumber)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b04      	cmp	r3, #4
 8001130:	d10a      	bne.n	8001148 <ESP_ChangeRelayState+0x80>
		if(0 == NewState) fourthSwitchTurn(0); //Turn OFF
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <ESP_ChangeRelayState+0x78>
 8001138:	2000      	movs	r0, #0
 800113a:	f007 fc69 	bl	8008a10 <fourthSwitchTurn>
}
 800113e:	e03a      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else fourthSwitchTurn(1); //Turn ON
 8001140:	2001      	movs	r0, #1
 8001142:	f007 fc65 	bl	8008a10 <fourthSwitchTurn>
}
 8001146:	e036      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(5 == RelayNumber)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d10a      	bne.n	8001164 <ESP_ChangeRelayState+0x9c>
		if(0 == NewState) firstLightTurn(0); //Turn OFF
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <ESP_ChangeRelayState+0x94>
 8001154:	2000      	movs	r0, #0
 8001156:	f007 fcdd 	bl	8008b14 <firstLightTurn>
}
 800115a:	e02c      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else firstLightTurn(1); //Turn ON
 800115c:	2001      	movs	r0, #1
 800115e:	f007 fcd9 	bl	8008b14 <firstLightTurn>
}
 8001162:	e028      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(6 == RelayNumber)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b06      	cmp	r3, #6
 8001168:	d10a      	bne.n	8001180 <ESP_ChangeRelayState+0xb8>
		if(0 == NewState) secondLightTurn(0); //Turn OFF
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <ESP_ChangeRelayState+0xb0>
 8001170:	2000      	movs	r0, #0
 8001172:	f007 fd4d 	bl	8008c10 <secondLightTurn>
}
 8001176:	e01e      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else secondLightTurn(1); //Turn ON
 8001178:	2001      	movs	r0, #1
 800117a:	f007 fd49 	bl	8008c10 <secondLightTurn>
}
 800117e:	e01a      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(7 == RelayNumber)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b07      	cmp	r3, #7
 8001184:	d10a      	bne.n	800119c <ESP_ChangeRelayState+0xd4>
		if(0 == NewState) thirdLightTurn(0); //Turn OFF
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <ESP_ChangeRelayState+0xcc>
 800118c:	2000      	movs	r0, #0
 800118e:	f007 fdbd 	bl	8008d0c <thirdLightTurn>
}
 8001192:	e010      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else thirdLightTurn(1); //Turn ON
 8001194:	2001      	movs	r0, #1
 8001196:	f007 fdb9 	bl	8008d0c <thirdLightTurn>
}
 800119a:	e00c      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
	else if(8 == RelayNumber)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d109      	bne.n	80011b6 <ESP_ChangeRelayState+0xee>
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d103      	bne.n	80011b0 <ESP_ChangeRelayState+0xe8>
 80011a8:	2000      	movs	r0, #0
 80011aa:	f007 fe2d 	bl	8008e08 <fourthLightTurn>
}
 80011ae:	e002      	b.n	80011b6 <ESP_ChangeRelayState+0xee>
		else fourthLightTurn(1); //Turn ON
 80011b0:	2001      	movs	r0, #1
 80011b2:	f007 fe29 	bl	8008e08 <fourthLightTurn>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <ESP_SendCurrentTempInside>:

//
// Send info to Blynk Server
//
void ESP_SendCurrentTempInside(float CurrentTemp)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPINS=%f\n", CurrentTemp);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff f9d4 	bl	8000578 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4905      	ldr	r1, [pc, #20]	; (80011ec <ESP_SendCurrentTempInside+0x2c>)
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <ESP_SendCurrentTempInside+0x30>)
 80011d8:	f011 f9e4 	bl	80125a4 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 80011dc:	4904      	ldr	r1, [pc, #16]	; (80011f0 <ESP_SendCurrentTempInside+0x30>)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <ESP_SendCurrentTempInside+0x34>)
 80011e0:	f009 f938 	bl	800a454 <UARTDMA_Print>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	08016200 	.word	0x08016200
 80011f0:	20000308 	.word	0x20000308
 80011f4:	200006c4 	.word	0x200006c4

080011f8 <ESP_SendCurrentTempOutside>:

void ESP_SendCurrentTempOutside(float CurrentTemp)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPOUT=%f\n", CurrentTemp);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff f9b8 	bl	8000578 <__aeabi_f2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4905      	ldr	r1, [pc, #20]	; (8001224 <ESP_SendCurrentTempOutside+0x2c>)
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <ESP_SendCurrentTempOutside+0x30>)
 8001210:	f011 f9c8 	bl	80125a4 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001214:	4904      	ldr	r1, [pc, #16]	; (8001228 <ESP_SendCurrentTempOutside+0x30>)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <ESP_SendCurrentTempOutside+0x34>)
 8001218:	f009 f91c 	bl	800a454 <UARTDMA_Print>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	0801620c 	.word	0x0801620c
 8001228:	20000308 	.word	0x20000308
 800122c:	200006c4 	.word	0x200006c4

08001230 <ESP_SendCurrentPressure>:

void ESP_SendCurrentPressure(float CurrentPress)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "PRES=%f\n", CurrentPress);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff f99c 	bl	8000578 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4905      	ldr	r1, [pc, #20]	; (800125c <ESP_SendCurrentPressure+0x2c>)
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <ESP_SendCurrentPressure+0x30>)
 8001248:	f011 f9ac 	bl	80125a4 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 800124c:	4904      	ldr	r1, [pc, #16]	; (8001260 <ESP_SendCurrentPressure+0x30>)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <ESP_SendCurrentPressure+0x34>)
 8001250:	f009 f900 	bl	800a454 <UARTDMA_Print>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08016218 	.word	0x08016218
 8001260:	20000308 	.word	0x20000308
 8001264:	200006c4 	.word	0x200006c4

08001268 <ESP_SendCurrentWaterLvl>:

void ESP_SendCurrentWaterLvl(uint32_t CurrentWaterLvl)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	sprintf(Message, "WLVL=%ld\n", CurrentWaterLvl);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4906      	ldr	r1, [pc, #24]	; (800128c <ESP_SendCurrentWaterLvl+0x24>)
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <ESP_SendCurrentWaterLvl+0x28>)
 8001276:	f011 f995 	bl	80125a4 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 800127a:	4905      	ldr	r1, [pc, #20]	; (8001290 <ESP_SendCurrentWaterLvl+0x28>)
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <ESP_SendCurrentWaterLvl+0x2c>)
 800127e:	f009 f8e9 	bl	800a454 <UARTDMA_Print>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	08016224 	.word	0x08016224
 8001290:	20000308 	.word	0x20000308
 8001294:	200006c4 	.word	0x200006c4

08001298 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1acb      	subs	r3, r1, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bfb8      	it	lt
 80012be:	425b      	neglt	r3, r3
 80012c0:	429a      	cmp	r2, r3
 80012c2:	bfcc      	ite	gt
 80012c4:	2301      	movgt	r3, #1
 80012c6:	2300      	movle	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80012cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	623b      	str	r3, [r7, #32]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dd0b      	ble.n	800130c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	b29a      	uxth	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	b29b      	uxth	r3, r3
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	b29b      	uxth	r3, r3
 8001318:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	bfb8      	it	lt
 8001324:	425b      	neglt	r3, r3
 8001326:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800132c:	0fda      	lsrs	r2, r3, #31
 800132e:	4413      	add	r3, r2
 8001330:	105b      	asrs	r3, r3, #1
 8001332:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	da02      	bge.n	8001342 <GFX_WriteLine+0xaa>
	        ystep = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001340:	e02e      	b.n	80013a0 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8001342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001346:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001348:	e02a      	b.n	80013a0 <GFX_WriteLine+0x108>
	        if (steep) {
 800134a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800134e:	2b00      	cmp	r3, #0
 8001350:	d008      	beq.n	8001364 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	b21b      	sxth	r3, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	b211      	sxth	r1, r2
 800135a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800135c:	4618      	mov	r0, r3
 800135e:	f000 feab 	bl	80020b8 <ILI9341_WritePixel>
 8001362:	e007      	b.n	8001374 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	b21b      	sxth	r3, r3
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	b211      	sxth	r1, r2
 800136c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fea2 	bl	80020b8 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8001374:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001376:	8abb      	ldrh	r3, [r7, #20]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	b29b      	uxth	r3, r3
 800137c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800137e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001382:	2b00      	cmp	r3, #0
 8001384:	da09      	bge.n	800139a <GFX_WriteLine+0x102>
	            y_start += ystep;
 8001386:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001390:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001392:	8afb      	ldrh	r3, [r7, #22]
 8001394:	4413      	add	r3, r2
 8001396:	b29b      	uxth	r3, r3
 8001398:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3301      	adds	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	ddd0      	ble.n	800134a <GFX_WriteLine+0xb2>
	        }
	    }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af02      	add	r7, sp, #8
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	1e5a      	subs	r2, r3, #1
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f7ff ff60 	bl	8001298 <GFX_WriteLine>
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	1e5a      	subs	r2, r3, #1
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff ff4a 	bl	8001298 <GFX_WriteLine>
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af02      	add	r7, sp, #8
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d113      	bne.n	800144a <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	dd05      	ble.n	8001436 <GFX_DrawLine+0x2a>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	8c3b      	ldrh	r3, [r7, #32]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff ffb5 	bl	80013b2 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001448:	e01f      	b.n	800148a <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d113      	bne.n	800147a <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	dd05      	ble.n	8001466 <GFX_DrawLine+0x5a>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	8c3b      	ldrh	r3, [r7, #32]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff ffb4 	bl	80013e0 <GFX_DrawFastHLine>
}
 8001478:	e007      	b.n	800148a <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 800147a:	8c3b      	ldrh	r3, [r7, #32]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff ff07 	bl	8001298 <GFX_WriteLine>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	4611      	mov	r1, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	80fb      	strh	r3, [r7, #6]
 80014a4:	4613      	mov	r3, r2
 80014a6:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e008      	b.n	80014c0 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	8c3b      	ldrh	r3, [r7, #32]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	6978      	ldr	r0, [r7, #20]
 80014b6:	f7ff ff7c 	bl	80013b2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	88fa      	ldrh	r2, [r7, #6]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf0      	blt.n	80014ae <GFX_DrawFillRectangle+0x1c>
    }

}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b088      	sub	sp, #32
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	4611      	mov	r1, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	4613      	mov	r3, r2
 80014ea:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	f1c3 0301 	rsb	r3, r3, #1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	461a      	mov	r2, r3
 80014fe:	03d2      	lsls	r2, r2, #15
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001510:	e0b5      	b.n	800167e <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001512:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0e      	blt.n	8001538 <GFX_DrawCircleHelper+0x62>
            y--;
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	b29b      	uxth	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001526:	8b7b      	ldrh	r3, [r7, #26]
 8001528:	3302      	adds	r3, #2
 800152a:	b29b      	uxth	r3, r3
 800152c:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800152e:	8bfa      	ldrh	r2, [r7, #30]
 8001530:	8b7b      	ldrh	r3, [r7, #26]
 8001532:	4413      	add	r3, r2
 8001534:	b29b      	uxth	r3, r3
 8001536:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001538:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800153c:	b29b      	uxth	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001544:	8bbb      	ldrh	r3, [r7, #28]
 8001546:	3302      	adds	r3, #2
 8001548:	b29b      	uxth	r3, r3
 800154a:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800154c:	8bfa      	ldrh	r2, [r7, #30]
 800154e:	8bbb      	ldrh	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	b29b      	uxth	r3, r3
 8001554:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 8001556:	797b      	ldrb	r3, [r7, #5]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01f      	beq.n	80015a0 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	b29a      	uxth	r2, r3
 8001564:	8b3b      	ldrh	r3, [r7, #24]
 8001566:	4413      	add	r3, r2
 8001568:	b29b      	uxth	r3, r3
 800156a:	b218      	sxth	r0, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	b29a      	uxth	r2, r3
 8001570:	8afb      	ldrh	r3, [r7, #22]
 8001572:	4413      	add	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	b21b      	sxth	r3, r3
 8001578:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800157a:	4619      	mov	r1, r3
 800157c:	f000 fd9c 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	b29a      	uxth	r2, r3
 8001584:	8afb      	ldrh	r3, [r7, #22]
 8001586:	4413      	add	r3, r2
 8001588:	b29b      	uxth	r3, r3
 800158a:	b218      	sxth	r0, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	b29a      	uxth	r2, r3
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21b      	sxth	r3, r3
 8001598:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800159a:	4619      	mov	r1, r3
 800159c:	f000 fd8c 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 80015a0:	797b      	ldrb	r3, [r7, #5]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01f      	beq.n	80015ea <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	8b3b      	ldrh	r3, [r7, #24]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b218      	sxth	r0, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	8afb      	ldrh	r3, [r7, #22]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015c4:	4619      	mov	r1, r3
 80015c6:	f000 fd77 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	8afb      	ldrh	r3, [r7, #22]
 80015d0:	4413      	add	r3, r2
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b218      	sxth	r0, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	8b3b      	ldrh	r3, [r7, #24]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015e4:	4619      	mov	r1, r3
 80015e6:	f000 fd67 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 80015ea:	797b      	ldrb	r3, [r7, #5]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01f      	beq.n	8001634 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	8afb      	ldrh	r3, [r7, #22]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b218      	sxth	r0, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	b29a      	uxth	r2, r3
 8001604:	8b3b      	ldrh	r3, [r7, #24]
 8001606:	4413      	add	r3, r2
 8001608:	b29b      	uxth	r3, r3
 800160a:	b21b      	sxth	r3, r3
 800160c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800160e:	4619      	mov	r1, r3
 8001610:	f000 fd52 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	b29a      	uxth	r2, r3
 8001618:	8b3b      	ldrh	r3, [r7, #24]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	b218      	sxth	r0, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	b29a      	uxth	r2, r3
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	4413      	add	r3, r2
 8001628:	b29b      	uxth	r3, r3
 800162a:	b21b      	sxth	r3, r3
 800162c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800162e:	4619      	mov	r1, r3
 8001630:	f000 fd42 	bl	80020b8 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 8001634:	797b      	ldrb	r3, [r7, #5]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d01f      	beq.n	800167e <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	b29a      	uxth	r2, r3
 8001642:	8afb      	ldrh	r3, [r7, #22]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	b29b      	uxth	r3, r3
 8001648:	b218      	sxth	r0, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	b29a      	uxth	r2, r3
 800164e:	8b3b      	ldrh	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b29b      	uxth	r3, r3
 8001654:	b21b      	sxth	r3, r3
 8001656:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001658:	4619      	mov	r1, r3
 800165a:	f000 fd2d 	bl	80020b8 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	b29a      	uxth	r2, r3
 8001662:	8b3b      	ldrh	r3, [r7, #24]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	b218      	sxth	r0, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	b29a      	uxth	r2, r3
 800166e:	8afb      	ldrh	r3, [r7, #22]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	b21b      	sxth	r3, r3
 8001676:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001678:	4619      	mov	r1, r3
 800167a:	f000 fd1d 	bl	80020b8 <ILI9341_WritePixel>
    while (x<y) {
 800167e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001682:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001686:	429a      	cmp	r2, r3
 8001688:	f6ff af43 	blt.w	8001512 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b088      	sub	sp, #32
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	4611      	mov	r1, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	4613      	mov	r3, r2
 80016aa:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f1c3 0301 	rsb	r3, r3, #1
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	461a      	mov	r2, r3
 80016be:	03d2      	lsls	r2, r2, #15
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 80016d0:	e073      	b.n	80017ba <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 80016d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0e      	blt.n	80016f8 <GFX_DrawFillCircleHelper+0x62>
            y--;
 80016da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3b01      	subs	r3, #1
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80016e6:	8b7b      	ldrh	r3, [r7, #26]
 80016e8:	3302      	adds	r3, #2
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80016ee:	8bfa      	ldrh	r2, [r7, #30]
 80016f0:	8b7b      	ldrh	r3, [r7, #26]
 80016f2:	4413      	add	r3, r2
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80016f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	b29b      	uxth	r3, r3
 8001702:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001704:	8bbb      	ldrh	r3, [r7, #28]
 8001706:	3302      	adds	r3, #2
 8001708:	b29b      	uxth	r3, r3
 800170a:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800170c:	8bfa      	ldrh	r2, [r7, #30]
 800170e:	8bbb      	ldrh	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	b29b      	uxth	r3, r3
 8001714:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001716:	797b      	ldrb	r3, [r7, #5]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d023      	beq.n	8001768 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8001720:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	18d0      	adds	r0, r2, r3
 8001728:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	1ad1      	subs	r1, r2, r3
 8001730:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800173c:	441a      	add	r2, r3
 800173e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001740:	f7ff fe37 	bl	80013b2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	18d0      	adds	r0, r2, r3
 800174c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	1ad1      	subs	r1, r2, r3
 8001754:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001760:	441a      	add	r2, r3
 8001762:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001764:	f7ff fe25 	bl	80013b2 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8001768:	797b      	ldrb	r3, [r7, #5]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d023      	beq.n	80017ba <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001772:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	1ad0      	subs	r0, r2, r3
 800177a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	1ad1      	subs	r1, r2, r3
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800178e:	441a      	add	r2, r3
 8001790:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001792:	f7ff fe0e 	bl	80013b2 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	1ad0      	subs	r0, r2, r3
 800179e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	1ad1      	subs	r1, r2, r3
 80017a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80017b2:	441a      	add	r2, r3
 80017b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017b6:	f7ff fdfc 	bl	80013b2 <GFX_DrawFastVLine>
    while (x<y) {
 80017ba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80017be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	db85      	blt.n	80016d2 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	4611      	mov	r1, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	460b      	mov	r3, r1
 80017e0:	80fb      	strh	r3, [r7, #6]
 80017e2:	4613      	mov	r3, r2
 80017e4:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 80017e6:	8b3a      	ldrh	r2, [r7, #24]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	18d0      	adds	r0, r2, r3
 80017ec:	88fa      	ldrh	r2, [r7, #6]
 80017ee:	8b3b      	ldrh	r3, [r7, #24]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	1ad2      	subs	r2, r2, r3
 80017f4:	8bbb      	ldrh	r3, [r7, #28]
 80017f6:	68b9      	ldr	r1, [r7, #8]
 80017f8:	f7ff fdf2 	bl	80013e0 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 80017fc:	8b3a      	ldrh	r2, [r7, #24]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	18d0      	adds	r0, r2, r3
 8001802:	88ba      	ldrh	r2, [r7, #4]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	1e59      	subs	r1, r3, #1
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	8b3b      	ldrh	r3, [r7, #24]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	1ad2      	subs	r2, r2, r3
 8001812:	8bbb      	ldrh	r3, [r7, #28]
 8001814:	f7ff fde4 	bl	80013e0 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001818:	8b3a      	ldrh	r2, [r7, #24]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	18d1      	adds	r1, r2, r3
 800181e:	88ba      	ldrh	r2, [r7, #4]
 8001820:	8b3b      	ldrh	r3, [r7, #24]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	1ad2      	subs	r2, r2, r3
 8001826:	8bbb      	ldrh	r3, [r7, #28]
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7ff fdc2 	bl	80013b2 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800182e:	88fa      	ldrh	r2, [r7, #6]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	1e58      	subs	r0, r3, #1
 8001836:	8b3a      	ldrh	r2, [r7, #24]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	18d1      	adds	r1, r2, r3
 800183c:	88ba      	ldrh	r2, [r7, #4]
 800183e:	8b3b      	ldrh	r3, [r7, #24]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	1ad2      	subs	r2, r2, r3
 8001844:	8bbb      	ldrh	r3, [r7, #28]
 8001846:	f7ff fdb4 	bl	80013b2 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 800184a:	8b3a      	ldrh	r2, [r7, #24]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	18d0      	adds	r0, r2, r3
 8001850:	8b3a      	ldrh	r2, [r7, #24]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	18d1      	adds	r1, r2, r3
 8001856:	8b3a      	ldrh	r2, [r7, #24]
 8001858:	8bbb      	ldrh	r3, [r7, #28]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2301      	movs	r3, #1
 800185e:	f7ff fe3a 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8001862:	88fa      	ldrh	r2, [r7, #6]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	441a      	add	r2, r3
 8001868:	8b3b      	ldrh	r3, [r7, #24]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	1e58      	subs	r0, r3, #1
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	18d1      	adds	r1, r2, r3
 8001874:	8b3a      	ldrh	r2, [r7, #24]
 8001876:	8bbb      	ldrh	r3, [r7, #28]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	f7ff fe2b 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	441a      	add	r2, r3
 8001886:	8b3b      	ldrh	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	1e58      	subs	r0, r3, #1
 800188c:	88ba      	ldrh	r2, [r7, #4]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	441a      	add	r2, r3
 8001892:	8b3b      	ldrh	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	1e59      	subs	r1, r3, #1
 8001898:	8b3a      	ldrh	r2, [r7, #24]
 800189a:	8bbb      	ldrh	r3, [r7, #28]
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2304      	movs	r3, #4
 80018a0:	f7ff fe19 	bl	80014d6 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80018a4:	8b3a      	ldrh	r2, [r7, #24]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	18d0      	adds	r0, r2, r3
 80018aa:	88ba      	ldrh	r2, [r7, #4]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	441a      	add	r2, r3
 80018b0:	8b3b      	ldrh	r3, [r7, #24]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	1e59      	subs	r1, r3, #1
 80018b6:	8b3a      	ldrh	r2, [r7, #24]
 80018b8:	8bbb      	ldrh	r3, [r7, #28]
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2308      	movs	r3, #8
 80018be:	f7ff fe0a 	bl	80014d6 <GFX_DrawCircleHelper>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80018ca:	b590      	push	{r4, r7, lr}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af02      	add	r7, sp, #8
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	4611      	mov	r1, r2
 80018d6:	461a      	mov	r2, r3
 80018d8:	460b      	mov	r3, r1
 80018da:	80fb      	strh	r3, [r7, #6]
 80018dc:	4613      	mov	r3, r2
 80018de:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 80018e0:	8c3a      	ldrh	r2, [r7, #32]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	18d0      	adds	r0, r2, r3
 80018e6:	8c3b      	ldrh	r3, [r7, #32]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	88b9      	ldrh	r1, [r7, #4]
 80018f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	460b      	mov	r3, r1
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	f7ff fdc9 	bl	8001492 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	441a      	add	r2, r3
 8001906:	8c3b      	ldrh	r3, [r7, #32]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	8c3a      	ldrh	r2, [r7, #32]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	18d1      	adds	r1, r2, r3
 8001912:	8c3b      	ldrh	r3, [r7, #32]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	88ba      	ldrh	r2, [r7, #4]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29b      	uxth	r3, r3
 8001922:	b21b      	sxth	r3, r3
 8001924:	8c3c      	ldrh	r4, [r7, #32]
 8001926:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001928:	9201      	str	r2, [sp, #4]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	4622      	mov	r2, r4
 8001930:	f7ff feb1 	bl	8001696 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001934:	8c3a      	ldrh	r2, [r7, #32]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	18d0      	adds	r0, r2, r3
 800193a:	8c3a      	ldrh	r2, [r7, #32]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	18d1      	adds	r1, r2, r3
 8001940:	8c3b      	ldrh	r3, [r7, #32]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	b29b      	uxth	r3, r3
 8001946:	88ba      	ldrh	r2, [r7, #4]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21b      	sxth	r3, r3
 8001952:	8c3c      	ldrh	r4, [r7, #32]
 8001954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001956:	9201      	str	r2, [sp, #4]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2302      	movs	r3, #2
 800195c:	4622      	mov	r2, r4
 800195e:	f7ff fe9a 	bl	8001696 <GFX_DrawFillCircleHelper>
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
	...

0800196c <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <EF_SetFont+0x1c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000354 	.word	0x20000354

0800198c <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <EF_GetFontHeight+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	781b      	ldrb	r3, [r3, #0]
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	20000354 	.word	0x20000354

080019a4 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <EF_GetFontStartChar+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	785b      	ldrb	r3, [r3, #1]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000354 	.word	0x20000354

080019bc <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <EF_GetFontEndChar+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	789b      	ldrb	r3, [r3, #2]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20000354 	.word	0x20000354

080019d4 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <EF_GetFontSpaceWidth+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	78db      	ldrb	r3, [r3, #3]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000354 	.word	0x20000354

080019ec <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2bc5      	cmp	r3, #197	; 0xc5
 8001a00:	d052      	beq.n	8001aa8 <EF_DecodePolish+0xbc>
 8001a02:	2bc5      	cmp	r3, #197	; 0xc5
 8001a04:	f300 80e7 	bgt.w	8001bd6 <EF_DecodePolish+0x1ea>
 8001a08:	2bc3      	cmp	r3, #195	; 0xc3
 8001a0a:	d002      	beq.n	8001a12 <EF_DecodePolish+0x26>
 8001a0c:	2bc4      	cmp	r3, #196	; 0xc4
 8001a0e:	d00a      	beq.n	8001a26 <EF_DecodePolish+0x3a>
 8001a10:	e0e1      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	2b93      	cmp	r3, #147	; 0x93
 8001a16:	d002      	beq.n	8001a1e <EF_DecodePolish+0x32>
 8001a18:	2bb3      	cmp	r3, #179	; 0xb3
 8001a1a:	d002      	beq.n	8001a22 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001a1c:	e0db      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
			return 0x84;
 8001a1e:	2384      	movs	r3, #132	; 0x84
 8001a20:	e0da      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			return 0x8D;
 8001a22:	238d      	movs	r3, #141	; 0x8d
 8001a24:	e0d8      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	3b84      	subs	r3, #132	; 0x84
 8001a2a:	2b15      	cmp	r3, #21
 8001a2c:	f200 80d0 	bhi.w	8001bd0 <EF_DecodePolish+0x1e4>
 8001a30:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <EF_DecodePolish+0x4c>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a91 	.word	0x08001a91
 8001a3c:	08001a9d 	.word	0x08001a9d
 8001a40:	08001a99 	.word	0x08001a99
 8001a44:	08001aa5 	.word	0x08001aa5
 8001a48:	08001bd1 	.word	0x08001bd1
 8001a4c:	08001bd1 	.word	0x08001bd1
 8001a50:	08001bd1 	.word	0x08001bd1
 8001a54:	08001bd1 	.word	0x08001bd1
 8001a58:	08001bd1 	.word	0x08001bd1
 8001a5c:	08001bd1 	.word	0x08001bd1
 8001a60:	08001bd1 	.word	0x08001bd1
 8001a64:	08001bd1 	.word	0x08001bd1
 8001a68:	08001bd1 	.word	0x08001bd1
 8001a6c:	08001bd1 	.word	0x08001bd1
 8001a70:	08001bd1 	.word	0x08001bd1
 8001a74:	08001bd1 	.word	0x08001bd1
 8001a78:	08001bd1 	.word	0x08001bd1
 8001a7c:	08001bd1 	.word	0x08001bd1
 8001a80:	08001bd1 	.word	0x08001bd1
 8001a84:	08001bd1 	.word	0x08001bd1
 8001a88:	08001a95 	.word	0x08001a95
 8001a8c:	08001aa1 	.word	0x08001aa1
		{
		case 0x84: // Ą
			return 0x7F;
 8001a90:	237f      	movs	r3, #127	; 0x7f
 8001a92:	e0a1      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001a94:	2381      	movs	r3, #129	; 0x81
 8001a96:	e09f      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	e09d      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001a9c:	2388      	movs	r3, #136	; 0x88
 8001a9e:	e09b      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001aa0:	238a      	movs	r3, #138	; 0x8a
 8001aa2:	e099      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001aa4:	2389      	movs	r3, #137	; 0x89
 8001aa6:	e097      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
 8001aaa:	3b81      	subs	r3, #129	; 0x81
 8001aac:	2b3b      	cmp	r3, #59	; 0x3b
 8001aae:	f200 8091 	bhi.w	8001bd4 <EF_DecodePolish+0x1e8>
 8001ab2:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <EF_DecodePolish+0xcc>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001ba9 	.word	0x08001ba9
 8001abc:	08001bbd 	.word	0x08001bbd
 8001ac0:	08001bad 	.word	0x08001bad
 8001ac4:	08001bc1 	.word	0x08001bc1
 8001ac8:	08001bd5 	.word	0x08001bd5
 8001acc:	08001bd5 	.word	0x08001bd5
 8001ad0:	08001bd5 	.word	0x08001bd5
 8001ad4:	08001bd5 	.word	0x08001bd5
 8001ad8:	08001bd5 	.word	0x08001bd5
 8001adc:	08001bd5 	.word	0x08001bd5
 8001ae0:	08001bd5 	.word	0x08001bd5
 8001ae4:	08001bd5 	.word	0x08001bd5
 8001ae8:	08001bd5 	.word	0x08001bd5
 8001aec:	08001bd5 	.word	0x08001bd5
 8001af0:	08001bd5 	.word	0x08001bd5
 8001af4:	08001bd5 	.word	0x08001bd5
 8001af8:	08001bd5 	.word	0x08001bd5
 8001afc:	08001bd5 	.word	0x08001bd5
 8001b00:	08001bd5 	.word	0x08001bd5
 8001b04:	08001bd5 	.word	0x08001bd5
 8001b08:	08001bd5 	.word	0x08001bd5
 8001b0c:	08001bd5 	.word	0x08001bd5
 8001b10:	08001bd5 	.word	0x08001bd5
 8001b14:	08001bd5 	.word	0x08001bd5
 8001b18:	08001bd5 	.word	0x08001bd5
 8001b1c:	08001bb1 	.word	0x08001bb1
 8001b20:	08001bc5 	.word	0x08001bc5
 8001b24:	08001bd5 	.word	0x08001bd5
 8001b28:	08001bd5 	.word	0x08001bd5
 8001b2c:	08001bd5 	.word	0x08001bd5
 8001b30:	08001bd5 	.word	0x08001bd5
 8001b34:	08001bd5 	.word	0x08001bd5
 8001b38:	08001bd5 	.word	0x08001bd5
 8001b3c:	08001bd5 	.word	0x08001bd5
 8001b40:	08001bd5 	.word	0x08001bd5
 8001b44:	08001bd5 	.word	0x08001bd5
 8001b48:	08001bd5 	.word	0x08001bd5
 8001b4c:	08001bd5 	.word	0x08001bd5
 8001b50:	08001bd5 	.word	0x08001bd5
 8001b54:	08001bd5 	.word	0x08001bd5
 8001b58:	08001bd5 	.word	0x08001bd5
 8001b5c:	08001bd5 	.word	0x08001bd5
 8001b60:	08001bd5 	.word	0x08001bd5
 8001b64:	08001bd5 	.word	0x08001bd5
 8001b68:	08001bd5 	.word	0x08001bd5
 8001b6c:	08001bd5 	.word	0x08001bd5
 8001b70:	08001bd5 	.word	0x08001bd5
 8001b74:	08001bd5 	.word	0x08001bd5
 8001b78:	08001bd5 	.word	0x08001bd5
 8001b7c:	08001bd5 	.word	0x08001bd5
 8001b80:	08001bd5 	.word	0x08001bd5
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001bd5 	.word	0x08001bd5
 8001b8c:	08001bd5 	.word	0x08001bd5
 8001b90:	08001bd5 	.word	0x08001bd5
 8001b94:	08001bd5 	.word	0x08001bd5
 8001b98:	08001bb5 	.word	0x08001bb5
 8001b9c:	08001bc9 	.word	0x08001bc9
 8001ba0:	08001bb9 	.word	0x08001bb9
 8001ba4:	08001bcd 	.word	0x08001bcd
		{
		case 0x81: // Ł
			return 0x82;
 8001ba8:	2382      	movs	r3, #130	; 0x82
 8001baa:	e015      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001bac:	2383      	movs	r3, #131	; 0x83
 8001bae:	e013      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001bb0:	2385      	movs	r3, #133	; 0x85
 8001bb2:	e011      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001bb4:	2386      	movs	r3, #134	; 0x86
 8001bb6:	e00f      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8001bb8:	2387      	movs	r3, #135	; 0x87
 8001bba:	e00d      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001bbc:	238b      	movs	r3, #139	; 0x8b
 8001bbe:	e00b      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001bc0:	238c      	movs	r3, #140	; 0x8c
 8001bc2:	e009      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001bc4:	238e      	movs	r3, #142	; 0x8e
 8001bc6:	e007      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8001bc8:	238f      	movs	r3, #143	; 0x8f
 8001bca:	e005      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001bcc:	2390      	movs	r3, #144	; 0x90
 8001bce:	e003      	b.n	8001bd8 <EF_DecodePolish+0x1ec>
		break;
 8001bd0:	bf00      	nop
 8001bd2:	e000      	b.n	8001bd6 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001bd4:	bf00      	nop
	}

	return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80bb      	strh	r3, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	807b      	strh	r3, [r7, #2]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001c02:	f7ff fecf 	bl	80019a4 <EF_GetFontStartChar>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d120      	bne.n	8001c58 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001c16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d114      	bne.n	8001c48 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8001c1e:	88bc      	ldrh	r4, [r7, #4]
 8001c20:	887d      	ldrh	r5, [r7, #2]
 8001c22:	f7ff fed7 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	0052      	lsls	r2, r2, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b299      	uxth	r1, r3
 8001c3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4629      	mov	r1, r5
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff fc25 	bl	8001492 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8001c48:	f7ff fec4 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	0052      	lsls	r2, r2, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e09c      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8001c58:	f7ff fea4 	bl	80019a4 <EF_GetFontStartChar>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d201      	bcs.n	8001c6a <EF_PutChar+0x86>
	{
		return 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e093      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8001c6a:	f7ff fea7 	bl	80019bc <EF_GetFontEndChar>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	7c7b      	ldrb	r3, [r7, #17]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <EF_PutChar+0x98>
	{
		return 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e08a      	b.n	8001d92 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	7c7b      	ldrb	r3, [r7, #17]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001c8a:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a42      	ldr	r2, [pc, #264]	; (8001d9c <EF_PutChar+0x1b8>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	6851      	ldr	r1, [r2, #4]
 8001c96:	7c7a      	ldrb	r2, [r7, #17]
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	440a      	add	r2, r1
 8001c9c:	8852      	ldrh	r2, [r2, #2]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	83fb      	strh	r3, [r7, #30]
 8001ca6:	e066      	b.n	8001d76 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	777b      	strb	r3, [r7, #29]
 8001cb2:	e053      	b.n	8001d5c <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001cba:	7efb      	ldrb	r3, [r7, #27]
 8001cbc:	2b07      	cmp	r3, #7
 8001cbe:	d905      	bls.n	8001ccc <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001cc4:	7efb      	ldrb	r3, [r7, #27]
 8001cc6:	3b08      	subs	r3, #8
 8001cc8:	76fb      	strb	r3, [r7, #27]
 8001cca:	e001      	b.n	8001cd0 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001ccc:	7efb      	ldrb	r3, [r7, #27]
 8001cce:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	74bb      	strb	r3, [r7, #18]
 8001cd4:	e038      	b.n	8001d48 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001cd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da15      	bge.n	8001d0a <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001cde:	7f7b      	ldrb	r3, [r7, #29]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	88bb      	ldrh	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	7cbb      	ldrb	r3, [r7, #18]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b218      	sxth	r0, r3
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	8bfb      	ldrh	r3, [r7, #30]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	883a      	ldrh	r2, [r7, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	f000 f9d8 	bl	80020b8 <ILI9341_WritePixel>
 8001d08:	e018      	b.n	8001d3c <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001d0a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d114      	bne.n	8001d3c <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001d12:	7f7b      	ldrb	r3, [r7, #29]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	7cbb      	ldrb	r3, [r7, #18]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	b218      	sxth	r0, r3
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	8bfb      	ldrh	r3, [r7, #30]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d36:	4619      	mov	r1, r3
 8001d38:	f000 f9be 	bl	80020b8 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001d3c:	7cbb      	ldrb	r3, [r7, #18]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	74bb      	strb	r3, [r7, #18]
 8001d42:	7cfb      	ldrb	r3, [r7, #19]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	74fb      	strb	r3, [r7, #19]
 8001d48:	7cba      	ldrb	r2, [r7, #18]
 8001d4a:	7f3b      	ldrb	r3, [r7, #28]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3c2      	bcc.n	8001cd6 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001d56:	7f7b      	ldrb	r3, [r7, #29]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	777b      	strb	r3, [r7, #29]
 8001d5c:	7f7a      	ldrb	r2, [r7, #29]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da00      	bge.n	8001d6a <EF_PutChar+0x186>
 8001d68:	3307      	adds	r3, #7
 8001d6a:	10db      	asrs	r3, r3, #3
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dda1      	ble.n	8001cb4 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001d70:	8bfb      	ldrh	r3, [r7, #30]
 8001d72:	3301      	adds	r3, #1
 8001d74:	83fb      	strh	r3, [r7, #30]
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <EF_PutChar+0x1b8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	8bfa      	ldrh	r2, [r7, #30]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d391      	bcc.n	8001ca8 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <EF_PutChar+0x1b8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	7c7b      	ldrb	r3, [r7, #17]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000354 	.word	0x20000354

08001da0 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	4608      	mov	r0, r1
 8001daa:	4611      	mov	r1, r2
 8001dac:	461a      	mov	r2, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	817b      	strh	r3, [r7, #10]
 8001db2:	460b      	mov	r3, r1
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7fe fa1a 	bl	80001f4 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001dc8:	2300      	movs	r3, #0
 8001dca:	75fb      	strb	r3, [r7, #23]
 8001dcc:	e05a      	b.n	8001e84 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2bc5      	cmp	r3, #197	; 0xc5
 8001dd8:	d817      	bhi.n	8001e0a <EF_PutString+0x6a>
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2bc2      	cmp	r3, #194	; 0xc2
 8001de4:	d911      	bls.n	8001e0a <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	7818      	ldrb	r0, [r3, #0]
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	3301      	adds	r3, #1
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7ff fdf7 	bl	80019ec <EF_DecodePolish>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	3301      	adds	r3, #1
 8001e06:	75fb      	strb	r3, [r7, #23]
 8001e08:	e004      	b.n	8001e14 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001e14:	897a      	ldrh	r2, [r7, #10]
 8001e16:	8abb      	ldrh	r3, [r7, #20]
 8001e18:	4413      	add	r3, r2
 8001e1a:	b299      	uxth	r1, r3
 8001e1c:	88fc      	ldrh	r4, [r7, #6]
 8001e1e:	893a      	ldrh	r2, [r7, #8]
 8001e20:	7cf8      	ldrb	r0, [r7, #19]
 8001e22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	f7ff fed9 	bl	8001be4 <EF_PutChar>
 8001e32:	4603      	mov	r3, r0
 8001e34:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001e36:	7c7b      	ldrb	r3, [r7, #17]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	8abb      	ldrh	r3, [r7, #20]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001e40:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d113      	bne.n	8001e70 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001e48:	897a      	ldrh	r2, [r7, #10]
 8001e4a:	8abb      	ldrh	r3, [r7, #20]
 8001e4c:	18d4      	adds	r4, r2, r3
 8001e4e:	893d      	ldrh	r5, [r7, #8]
 8001e50:	f7ff fdc0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b29e      	uxth	r6, r3
 8001e58:	f7ff fd98 	bl	800198c <EF_GetFontHeight>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	4632      	mov	r2, r6
 8001e68:	4629      	mov	r1, r5
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff fb11 	bl	8001492 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001e70:	f7ff fdb0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	8abb      	ldrh	r3, [r7, #20]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	3301      	adds	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
 8001e84:	7dfa      	ldrb	r2, [r7, #23]
 8001e86:	7cbb      	ldrb	r3, [r7, #18]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d3a0      	bcc.n	8001dce <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001e8c:	8abb      	ldrh	r3, [r7, #20]
 8001e8e:	b2dc      	uxtb	r4, r3
 8001e90:	f7ff fda0 	bl	80019d4 <EF_GetFontSpaceWidth>
 8001e94:	4603      	mov	r3, r0
 8001e96:	1ae3      	subs	r3, r4, r3
 8001e98:	b2db      	uxtb	r3, r3
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea2 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f008 fdf6 	bl	800aa9c <HAL_Delay>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001ec2:	e014      	b.n	8001eee <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d10c      	bne.n	8001eee <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	330c      	adds	r3, #12
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	7812      	ldrb	r2, [r2, #0]
 8001ee0:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e7      	bne.n	8001ec4 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001ef4:	bf00      	nop
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <ILI9341_SendToTFT+0x5c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	2b80      	cmp	r3, #128	; 0x80
 8001f04:	d0f7      	beq.n	8001ef6 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	20000358 	.word	0x20000358

08001f18 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f2a:	f009 fd27 	bl	800b97c <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f34:	4808      	ldr	r0, [pc, #32]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f36:	f009 fd21 	bl	800b97c <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ffba 	bl	8001eb8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f44:	2201      	movs	r2, #1
 8001f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4a:	4803      	ldr	r0, [pc, #12]	; (8001f58 <ILI9341_SendComand+0x40>)
 8001f4c:	f009 fd16 	bl	800b97c <HAL_GPIO_WritePin>
#endif
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40020400 	.word	0x40020400

08001f5c <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f70:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f72:	f009 fd03 	bl	800b97c <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f7c:	480e      	ldr	r0, [pc, #56]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f7e:	f009 fcfd 	bl	800b97c <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001f82:	f107 030f 	add.w	r3, r7, #15
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff95 	bl	8001eb8 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f94:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001f96:	f009 fcf1 	bl	800b97c <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	68b8      	ldr	r0, [r7, #8]
 8001f9e:	f7ff ff8b 	bl	8001eb8 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <ILI9341_SendCommandAndData+0x5c>)
 8001faa:	f009 fce7 	bl	800b97c <HAL_GPIO_WritePin>
#endif

}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40020400 	.word	0x40020400

08001fbc <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d820      	bhi.n	800200e <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d816      	bhi.n	8002000 <ILI9341_SetRotation+0x44>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <ILI9341_SetRotation+0x1c>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	08001fef 	.word	0x08001fef
 8001fe0:	08001ff5 	.word	0x08001ff5
 8001fe4:	08001ffb 	.word	0x08001ffb
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001fe8:	2348      	movs	r3, #72	; 0x48
 8001fea:	71fb      	strb	r3, [r7, #7]
		break;
 8001fec:	e008      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001fee:	2328      	movs	r3, #40	; 0x28
 8001ff0:	71fb      	strb	r3, [r7, #7]
		break;
 8001ff2:	e005      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001ff4:	2388      	movs	r3, #136	; 0x88
 8001ff6:	71fb      	strb	r3, [r7, #7]
		break;
 8001ff8:	e002      	b.n	8002000 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001ffa:	23e8      	movs	r3, #232	; 0xe8
 8001ffc:	71fb      	strb	r3, [r7, #7]
		break;
 8001ffe:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	2201      	movs	r2, #1
 8002004:	4619      	mov	r1, r3
 8002006:	2036      	movs	r0, #54	; 0x36
 8002008:	f7ff ffa8 	bl	8001f5c <ILI9341_SendCommandAndData>
 800200c:	e000      	b.n	8002010 <ILI9341_SetRotation+0x54>
		return;
 800200e:	bf00      	nop
}
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop

08002018 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	4604      	mov	r4, r0
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	4623      	mov	r3, r4
 8002028:	80fb      	strh	r3, [r7, #6]
 800202a:	4603      	mov	r3, r0
 800202c:	80bb      	strh	r3, [r7, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	807b      	strh	r3, [r7, #2]
 8002032:	4613      	mov	r3, r2
 8002034:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4413      	add	r3, r2
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	81fb      	strh	r3, [r7, #14]
 8002042:	88ba      	ldrh	r2, [r7, #4]
 8002044:	883b      	ldrh	r3, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29b      	uxth	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8002068:	89fb      	ldrh	r3, [r7, #14]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	2204      	movs	r2, #4
 8002074:	4619      	mov	r1, r3
 8002076:	202a      	movs	r0, #42	; 0x2a
 8002078:	f7ff ff70 	bl	8001f5c <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 800207c:	88bb      	ldrh	r3, [r7, #4]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	b29b      	uxth	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8002086:	88bb      	ldrh	r3, [r7, #4]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 800208c:	89bb      	ldrh	r3, [r7, #12]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8002096:	89bb      	ldrh	r3, [r7, #12]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	2204      	movs	r2, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	202b      	movs	r0, #43	; 0x2b
 80020a6:	f7ff ff59 	bl	8001f5c <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 80020aa:	202c      	movs	r0, #44	; 0x2c
 80020ac:	f7ff ff34 	bl	8001f18 <ILI9341_SendComand>

}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd90      	pop	{r4, r7, pc}

080020b8 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
 80020c2:	460b      	mov	r3, r1
 80020c4:	80bb      	strh	r3, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 80020ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db21      	blt.n	8002116 <ILI9341_WritePixel+0x5e>
 80020d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020da:	da1c      	bge.n	8002116 <ILI9341_WritePixel+0x5e>
 80020dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db18      	blt.n	8002116 <ILI9341_WritePixel+0x5e>
 80020e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e8:	2bef      	cmp	r3, #239	; 0xef
 80020ea:	dc14      	bgt.n	8002116 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 80020ec:	88f8      	ldrh	r0, [r7, #6]
 80020ee:	88b9      	ldrh	r1, [r7, #4]
 80020f0:	2301      	movs	r3, #1
 80020f2:	2201      	movs	r2, #1
 80020f4:	f7ff ff90 	bl	8002018 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	2202      	movs	r2, #2
 800210e:	4619      	mov	r1, r3
 8002110:	202c      	movs	r0, #44	; 0x2c
 8002112:	f7ff ff23 	bl	8001f5c <ILI9341_SendCommandAndData>
	}

}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	60ba      	str	r2, [r7, #8]
 8002126:	461a      	mov	r2, r3
 8002128:	4603      	mov	r3, r0
 800212a:	81fb      	strh	r3, [r7, #14]
 800212c:	460b      	mov	r3, r1
 800212e:	81bb      	strh	r3, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8002134:	89fa      	ldrh	r2, [r7, #14]
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	4413      	add	r3, r2
 800213a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800213e:	dc14      	bgt.n	800216a <ILI9341_DrawImage+0x4c>
 8002140:	89ba      	ldrh	r2, [r7, #12]
 8002142:	8b3b      	ldrh	r3, [r7, #24]
 8002144:	4413      	add	r3, r2
 8002146:	2bf0      	cmp	r3, #240	; 0xf0
 8002148:	dc0f      	bgt.n	800216a <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 800214a:	8b3b      	ldrh	r3, [r7, #24]
 800214c:	88fa      	ldrh	r2, [r7, #6]
 800214e:	89b9      	ldrh	r1, [r7, #12]
 8002150:	89f8      	ldrh	r0, [r7, #14]
 8002152:	f7ff ff61 	bl	8002018 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	8b3a      	ldrh	r2, [r7, #24]
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	461a      	mov	r2, r3
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	202c      	movs	r0, #44	; 0x2c
 8002166:	f7ff fef9 	bl	8001f5c <ILI9341_SendCommandAndData>
	}
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 800217e:	23f0      	movs	r3, #240	; 0xf0
 8002180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002184:	2100      	movs	r1, #0
 8002186:	2000      	movs	r0, #0
 8002188:	f7ff ff46 	bl	8002018 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 800218c:	202c      	movs	r0, #44	; 0x2c
 800218e:	f7ff fec3 	bl	8001f18 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8002192:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002196:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219e:	4822      	ldr	r0, [pc, #136]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 80021a0:	f009 fbec 	bl	800b97c <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 80021a4:	2201      	movs	r2, #1
 80021a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021aa:	481f      	ldr	r0, [pc, #124]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 80021ac:	f009 fbe6 	bl	800b97c <HAL_GPIO_WritePin>

    while (Length > 0U)
 80021b0:	e023      	b.n	80021fa <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d11b      	bne.n	80021fa <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 80021d4:	bf00      	nop
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d1f7      	bne.n	80021d6 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	330c      	adds	r3, #12
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1d8      	bne.n	80021b2 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8002200:	bf00      	nop
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <ILI9341_ClearDisplay+0xb8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b80      	cmp	r3, #128	; 0x80
 8002210:	d0f7      	beq.n	8002202 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8002212:	2201      	movs	r2, #1
 8002214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <ILI9341_ClearDisplay+0xb4>)
 800221a:	f009 fbaf 	bl	800b97c <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40020400 	.word	0x40020400
 800222c:	20000358 	.word	0x20000358

08002230 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8002238:	4a24      	ldr	r2, [pc, #144]	; (80022cc <ILI9341_Init+0x9c>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <ILI9341_Init+0xa0>)
 8002240:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002250:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8002252:	2200      	movs	r2, #0
 8002254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002258:	481e      	ldr	r0, [pc, #120]	; (80022d4 <ILI9341_Init+0xa4>)
 800225a:	f009 fb8f 	bl	800b97c <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800225e:	200a      	movs	r0, #10
 8002260:	f7ff fe1f 	bl	8001ea2 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8002264:	2201      	movs	r2, #1
 8002266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800226a:	481a      	ldr	r0, [pc, #104]	; (80022d4 <ILI9341_Init+0xa4>)
 800226c:	f009 fb86 	bl	800b97c <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8002270:	200a      	movs	r0, #10
 8002272:	f7ff fe16 	bl	8001ea2 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8002276:	e019      	b.n	80022ac <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60fa      	str	r2, [r7, #12]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002282:	7abb      	ldrb	r3, [r7, #10]
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800228a:	7a7a      	ldrb	r2, [r7, #9]
 800228c:	7afb      	ldrb	r3, [r7, #11]
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fe63 	bl	8001f5c <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 8002296:	7a7b      	ldrb	r3, [r7, #9]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 800229e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da02      	bge.n	80022ac <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 80022a6:	2096      	movs	r0, #150	; 0x96
 80022a8:	f7ff fdfb 	bl	8001ea2 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60fa      	str	r2, [r7, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	72fb      	strb	r3, [r7, #11]
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1dd      	bne.n	8002278 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 80022bc:	2003      	movs	r0, #3
 80022be:	f7ff fe7d 	bl	8001fbc <ILI9341_SetRotation>
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000358 	.word	0x20000358
 80022d0:	08016cac 	.word	0x08016cac
 80022d4:	40020400 	.word	0x40020400

080022d8 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e4:	480a      	ldr	r0, [pc, #40]	; (8002310 <XPT2046_GetRawData+0x38>)
 80022e6:	f009 fb49 	bl	800b97c <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <XPT2046_GetRawData+0x3c>)
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2305      	movs	r3, #5
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <XPT2046_GetRawData+0x40>)
 80022f8:	4908      	ldr	r1, [pc, #32]	; (800231c <XPT2046_GetRawData+0x44>)
 80022fa:	f00d f960 	bl	800f5be <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80022fe:	2201      	movs	r2, #1
 8002300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <XPT2046_GetRawData+0x38>)
 8002306:	f009 fb39 	bl	800b97c <HAL_GPIO_WritePin>
#endif
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40020400 	.word	0x40020400
 8002314:	20000234 	.word	0x20000234
 8002318:	20000244 	.word	0x20000244
 800231c:	2000023c 	.word	0x2000023c

08002320 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <XPT2046_ReadRawData+0x48>)
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	b21a      	sxth	r2, r3
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <XPT2046_ReadRawData+0x48>)
 8002334:	789b      	ldrb	r3, [r3, #2]
 8002336:	b21b      	sxth	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	b21b      	sxth	r3, r3
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <XPT2046_ReadRawData+0x48>)
 8002344:	78db      	ldrb	r3, [r3, #3]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b21a      	sxth	r2, r3
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <XPT2046_ReadRawData+0x48>)
 800234c:	791b      	ldrb	r3, [r3, #4]
 800234e:	b21b      	sxth	r3, r3
 8002350:	4313      	orrs	r3, r2
 8002352:	b21b      	sxth	r3, r3
 8002354:	b29a      	uxth	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	801a      	strh	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000244 	.word	0x20000244

0800236c <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 800236c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 8002378:	f107 020c 	add.w	r2, r7, #12
 800237c:	f107 030e 	add.w	r3, r7, #14
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffcc 	bl	8002320 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <XPT2046_ReadTouchPoint+0x118>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d16e      	bne.n	800246e <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002390:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002392:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002396:	89fb      	ldrh	r3, [r7, #14]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8db 	bl	8000554 <__aeabi_i2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fe f93f 	bl	8000628 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4690      	mov	r8, r2
 80023b0:	4699      	mov	r9, r3
 80023b2:	4b35      	ldr	r3, [pc, #212]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 80023b4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80023b8:	89bb      	ldrh	r3, [r7, #12]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f8ca 	bl	8000554 <__aeabi_i2d>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4620      	mov	r0, r4
 80023c6:	4629      	mov	r1, r5
 80023c8:	f7fe f92e 	bl	8000628 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4640      	mov	r0, r8
 80023d2:	4649      	mov	r1, r9
 80023d4:	f7fd ff72 	bl	80002bc <__adddf3>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 80023e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023e6:	f7fd ff69 	bl	80002bc <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fbf1 	bl	8000bd8 <__aeabi_d2uiz>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002400:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002404:	89fb      	ldrh	r3, [r7, #14]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f8a4 	bl	8000554 <__aeabi_i2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fe f908 	bl	8000628 <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4690      	mov	r8, r2
 800241e:	4699      	mov	r9, r3
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002422:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002426:	89bb      	ldrh	r3, [r7, #12]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f893 	bl	8000554 <__aeabi_i2d>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4620      	mov	r0, r4
 8002434:	4629      	mov	r1, r5
 8002436:	f7fe f8f7 	bl	8000628 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4640      	mov	r0, r8
 8002440:	4649      	mov	r1, r9
 8002442:	f7fd ff3b 	bl	80002bc <__adddf3>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <XPT2046_ReadTouchPoint+0x11c>)
 8002450:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002454:	f7fd ff32 	bl	80002bc <__adddf3>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe fbba 	bl	8000bd8 <__aeabi_d2uiz>
 8002464:	4603      	mov	r3, r0
 8002466:	b29a      	uxth	r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 800246c:	e005      	b.n	800247a <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 800246e:	89fa      	ldrh	r2, [r7, #14]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 8002474:	89ba      	ldrh	r2, [r7, #12]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	801a      	strh	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002484:	20000249 	.word	0x20000249
 8002488:	20000000 	.word	0x20000000

0800248c <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e013      	b.n	80024cc <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	4a16      	ldr	r2, [pc, #88]	; (8002500 <XPT2046_GetTouchPoint+0x74>)
 80024a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ac:	461a      	mov	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	4413      	add	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <XPT2046_GetTouchPoint+0x74>)
 80024b8:	330a      	adds	r3, #10
 80024ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024be:	461a      	mov	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	3301      	adds	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d9e8      	bls.n	80024a4 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <XPT2046_GetTouchPoint+0x78>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	08db      	lsrs	r3, r3, #3
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <XPT2046_GetTouchPoint+0x78>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	801a      	strh	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	2000035c 	.word	0x2000035c
 8002504:	cccccccd 	.word	0xcccccccd

08002508 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <XPT2046_IsTouched+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d101      	bne.n	800251a <XPT2046_IsTouched+0x12>
		return 1;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <XPT2046_IsTouched+0x14>

	return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000385 	.word	0x20000385

0800252c <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	  switch(TouchState)
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <XPT2046_Task+0x16c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b03      	cmp	r3, #3
 8002538:	f200 80ab 	bhi.w	8002692 <XPT2046_Task+0x166>
 800253c:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <XPT2046_Task+0x18>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002689 	.word	0x08002689
 8002548:	08002555 	.word	0x08002555
 800254c:	080025cb 	.word	0x080025cb
 8002550:	08002647 	.word	0x08002647
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8002554:	f008 fa96 	bl	800aa84 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <XPT2046_Task+0x170>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	f240 8093 	bls.w	800268c <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8002566:	f7ff feb7 	bl	80022d8 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 800256a:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <XPT2046_Task+0x174>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <XPT2046_Task+0x178>)
 8002572:	441a      	add	r2, r3
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <XPT2046_Task+0x174>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	330a      	adds	r3, #10
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4949      	ldr	r1, [pc, #292]	; (80026a4 <XPT2046_Task+0x178>)
 800257e:	440b      	add	r3, r1
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7ff fef2 	bl	800236c <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002588:	4b45      	ldr	r3, [pc, #276]	; (80026a0 <XPT2046_Task+0x174>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <XPT2046_Task+0x174>)
 8002592:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <XPT2046_Task+0x174>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b0a      	cmp	r3, #10
 800259a:	d105      	bne.n	80025a8 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 800259c:	4b40      	ldr	r3, [pc, #256]	; (80026a0 <XPT2046_Task+0x174>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <XPT2046_Task+0x16c>)
 80025a4:	2202      	movs	r2, #2
 80025a6:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80025a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ac:	483e      	ldr	r0, [pc, #248]	; (80026a8 <XPT2046_Task+0x17c>)
 80025ae:	f009 f9cd 	bl	800b94c <HAL_GPIO_ReadPin>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80025b8:	4b37      	ldr	r3, [pc, #220]	; (8002698 <XPT2046_Task+0x16c>)
 80025ba:	2203      	movs	r2, #3
 80025bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80025be:	f008 fa61 	bl	800aa84 <HAL_GetTick>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4a35      	ldr	r2, [pc, #212]	; (800269c <XPT2046_Task+0x170>)
 80025c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80025c8:	e060      	b.n	800268c <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80025ca:	f008 fa5b 	bl	800aa84 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <XPT2046_Task+0x170>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d95a      	bls.n	8002690 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80025da:	f7ff fe7d 	bl	80022d8 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <XPT2046_Task+0x174>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4a2f      	ldr	r2, [pc, #188]	; (80026a4 <XPT2046_Task+0x178>)
 80025e6:	441a      	add	r2, r3
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <XPT2046_Task+0x174>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	330a      	adds	r3, #10
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	492c      	ldr	r1, [pc, #176]	; (80026a4 <XPT2046_Task+0x178>)
 80025f2:	440b      	add	r3, r1
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f7ff feb8 	bl	800236c <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <XPT2046_Task+0x174>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <XPT2046_Task+0x174>)
 8002606:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <XPT2046_Task+0x174>)
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <XPT2046_Task+0x180>)
 800260e:	fba3 1302 	umull	r1, r3, r3, r2
 8002612:	08d9      	lsrs	r1, r3, #3
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <XPT2046_Task+0x174>)
 8002622:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002628:	481f      	ldr	r0, [pc, #124]	; (80026a8 <XPT2046_Task+0x17c>)
 800262a:	f009 f98f 	bl	800b94c <HAL_GPIO_ReadPin>
 800262e:	4603      	mov	r3, r0
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <XPT2046_Task+0x16c>)
 8002636:	2203      	movs	r2, #3
 8002638:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 800263a:	f008 fa23 	bl	800aa84 <HAL_GetTick>
 800263e:	4603      	mov	r3, r0
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <XPT2046_Task+0x170>)
 8002642:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8002644:	e024      	b.n	8002690 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <XPT2046_Task+0x16c>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <XPT2046_Task+0x174>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002652:	e009      	b.n	8002668 <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <XPT2046_Task+0x184>)
 8002656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265a:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <XPT2046_Task+0x188>)
 800265e:	f993 3000 	ldrsb.w	r3, [r3]
 8002662:	4618      	mov	r0, r3
 8002664:	f008 fbd0 	bl	800ae08 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <XPT2046_Task+0x188>)
 800266a:	f993 3000 	ldrsb.w	r3, [r3]
 800266e:	4618      	mov	r0, r3
 8002670:	f008 fbbb 	bl	800adea <HAL_NVIC_GetPendingIRQ>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ec      	bne.n	8002654 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <XPT2046_Task+0x188>)
 800267c:	f993 3000 	ldrsb.w	r3, [r3]
 8002680:	4618      	mov	r0, r3
 8002682:	f008 fb8a 	bl	800ad9a <HAL_NVIC_EnableIRQ>
		  break;
 8002686:	e004      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 8002688:	bf00      	nop
 800268a:	e002      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 800268c:	bf00      	nop
 800268e:	e000      	b.n	8002692 <XPT2046_Task+0x166>
		  break;
 8002690:	bf00      	nop

	  }
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000385 	.word	0x20000385
 800269c:	20000388 	.word	0x20000388
 80026a0:	20000384 	.word	0x20000384
 80026a4:	2000035c 	.word	0x2000035c
 80026a8:	40020000 	.word	0x40020000
 80026ac:	cccccccd 	.word	0xcccccccd
 80026b0:	40013c00 	.word	0x40013c00
 80026b4:	20000238 	.word	0x20000238

080026b8 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80026bc:	2017      	movs	r0, #23
 80026be:	f008 fb7a 	bl	800adb6 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 80026c2:	4b02      	ldr	r3, [pc, #8]	; (80026cc <XPT2046_IRQ+0x14>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000385 	.word	0x20000385

080026d0 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <XPT2046_Init+0x84>)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 80026e2:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <XPT2046_Init+0x88>)
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <XPT2046_Init+0x8c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026f4:	481a      	ldr	r0, [pc, #104]	; (8002760 <XPT2046_Init+0x90>)
 80026f6:	f009 f941 	bl	800b97c <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <XPT2046_Init+0x94>)
 80026fc:	2290      	movs	r2, #144	; 0x90
 80026fe:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <XPT2046_Init+0x98>)
 8002702:	22d0      	movs	r2, #208	; 0xd0
 8002704:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8002706:	4b19      	ldr	r3, [pc, #100]	; (800276c <XPT2046_Init+0x9c>)
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 800270c:	f7ff fde4 	bl	80022d8 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002710:	2001      	movs	r0, #1
 8002712:	f008 f9c3 	bl	800aa9c <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <XPT2046_Init+0x94>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <XPT2046_Init+0x9c>)
 8002720:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <XPT2046_Init+0x94>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	015b      	lsls	r3, r3, #5
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <XPT2046_Init+0x9c>)
 800272c:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <XPT2046_Init+0x98>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <XPT2046_Init+0x9c>)
 8002738:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <XPT2046_Init+0x98>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	015b      	lsls	r3, r3, #5
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <XPT2046_Init+0x9c>)
 8002744:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <XPT2046_Init+0x9c>)
 8002748:	2200      	movs	r2, #0
 800274a:	711a      	strb	r2, [r3, #4]
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000234 	.word	0x20000234
 8002758:	20000238 	.word	0x20000238
 800275c:	20000385 	.word	0x20000385
 8002760:	40020400 	.word	0x40020400
 8002764:	20000239 	.word	0x20000239
 8002768:	2000023a 	.word	0x2000023a
 800276c:	2000023c 	.word	0x2000023c

08002770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	4b27      	ldr	r3, [pc, #156]	; (8002818 <MX_DMA_Init+0xa8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a26      	ldr	r2, [pc, #152]	; (8002818 <MX_DMA_Init+0xa8>)
 8002780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <MX_DMA_Init+0xa8>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <MX_DMA_Init+0xa8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <MX_DMA_Init+0xa8>)
 800279c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <MX_DMA_Init+0xa8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	200b      	movs	r0, #11
 80027b4:	f008 fad5 	bl	800ad62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027b8:	200b      	movs	r0, #11
 80027ba:	f008 faee 	bl	800ad9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	200c      	movs	r0, #12
 80027c4:	f008 facd 	bl	800ad62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027c8:	200c      	movs	r0, #12
 80027ca:	f008 fae6 	bl	800ad9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	2010      	movs	r0, #16
 80027d4:	f008 fac5 	bl	800ad62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027d8:	2010      	movs	r0, #16
 80027da:	f008 fade 	bl	800ad9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	2011      	movs	r0, #17
 80027e4:	f008 fabd 	bl	800ad62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80027e8:	2011      	movs	r0, #17
 80027ea:	f008 fad6 	bl	800ad9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	203a      	movs	r0, #58	; 0x3a
 80027f4:	f008 fab5 	bl	800ad62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80027f8:	203a      	movs	r0, #58	; 0x3a
 80027fa:	f008 face 	bl	800ad9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	2046      	movs	r0, #70	; 0x46
 8002804:	f008 faad 	bl	800ad62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002808:	2046      	movs	r0, #70	; 0x46
 800280a:	f008 fac6 	bl	800ad9a <HAL_NVIC_EnableIRQ>

}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800

0800281c <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002824:	4a09      	ldr	r2, [pc, #36]	; (800284c <DS3231_Init+0x30>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f8ea 	bl	8002a04 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002830:	2000      	movs	r0, #0
 8002832:	f000 f8ae 	bl	8002992 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002836:	f000 f907 	bl	8002a48 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 800283a:	f000 f8cd 	bl	80029d8 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800283e:	2001      	movs	r0, #1
 8002840:	f000 f846 	bl	80028d0 <DS3231_SetInterruptMode>
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2000038c 	.word	0x2000038c

08002850 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af02      	add	r7, sp, #8
 8002856:	4603      	mov	r3, r0
 8002858:	460a      	mov	r2, r1
 800285a:	71fb      	strb	r3, [r7, #7]
 800285c:	4613      	mov	r3, r2
 800285e:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	733b      	strb	r3, [r7, #12]
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <DS3231_SetRegByte+0x38>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2302      	movs	r3, #2
 8002878:	21d0      	movs	r1, #208	; 0xd0
 800287a:	f009 fa0f 	bl	800bc9c <HAL_I2C_Master_Transmit>
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000038c 	.word	0x2000038c

0800288c <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af02      	add	r7, sp, #8
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <DS3231_GetRegByte+0x40>)
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	1dfa      	adds	r2, r7, #7
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2301      	movs	r3, #1
 80028a4:	21d0      	movs	r1, #208	; 0xd0
 80028a6:	f009 f9f9 	bl	800bc9c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <DS3231_GetRegByte+0x40>)
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	f107 020f 	add.w	r2, r7, #15
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	21d0      	movs	r1, #208	; 0xd0
 80028bc:	f009 faec 	bl	800be98 <HAL_I2C_Master_Receive>
	return val;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2000038c 	.word	0x2000038c

080028d0 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80028da:	200e      	movs	r0, #14
 80028dc:	f7ff ffd6 	bl	800288c <DS3231_GetRegByte>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80028e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	b25a      	sxtb	r2, r3
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	4619      	mov	r1, r3
 8002902:	200e      	movs	r0, #14
 8002904:	f7ff ffa4 	bl	8002850 <DS3231_SetRegByte>
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <DS3231_SetRateSelect>:

/**
 * @brief Set frequency of the square wave output
 * @param rate Frequency to set, DS3231_1HZ, DS3231_1024HZ, DS3231_4096HZ or DS3231_8192HZ.
 */
void DS3231_SetRateSelect(DS3231_Rate rate){
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800291a:	200e      	movs	r0, #14
 800291c:	f7ff ffb6 	bl	800288c <DS3231_GetRegByte>
 8002920:	4603      	mov	r3, r0
 8002922:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xe7) | ((rate & 0x03) << DS3231_RS1));
 8002924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002928:	f023 0318 	bic.w	r3, r3, #24
 800292c:	b25a      	sxtb	r2, r3
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	b25b      	sxtb	r3, r3
 8002934:	f003 0318 	and.w	r3, r3, #24
 8002938:	b25b      	sxtb	r3, r3
 800293a:	4313      	orrs	r3, r2
 800293c:	b25b      	sxtb	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	200e      	movs	r0, #14
 8002944:	f7ff ff84 	bl	8002850 <DS3231_SetRegByte>
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800295a:	200e      	movs	r0, #14
 800295c:	f7ff ff96 	bl	800288c <DS3231_GetRegByte>
 8002960:	4603      	mov	r3, r0
 8002962:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8002964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800296c:	b25b      	sxtb	r3, r3
 800296e:	79fa      	ldrb	r2, [r7, #7]
 8002970:	2a00      	cmp	r2, #0
 8002972:	d102      	bne.n	800297a <DS3231_EnableOscillator+0x2a>
 8002974:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002978:	e000      	b.n	800297c <DS3231_EnableOscillator+0x2c>
 800297a:	2200      	movs	r2, #0
 800297c:	4313      	orrs	r3, r2
 800297e:	b25b      	sxtb	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4619      	mov	r1, r3
 8002984:	200e      	movs	r0, #14
 8002986:	f7ff ff63 	bl	8002850 <DS3231_SetRegByte>
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800299c:	200e      	movs	r0, #14
 800299e:	f7ff ff75 	bl	800288c <DS3231_GetRegByte>
 80029a2:	4603      	mov	r3, r0
 80029a4:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	f023 0302 	bic.w	r3, r3, #2
 80029ae:	b25a      	sxtb	r2, r3
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	b25b      	sxtb	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	b25b      	sxtb	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	4619      	mov	r1, r3
 80029c4:	200e      	movs	r0, #14
 80029c6:	f7ff ff43 	bl	8002850 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80029ca:	2001      	movs	r0, #1
 80029cc:	f7ff ff80 	bl	80028d0 <DS3231_SetInterruptMode>
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80029de:	200f      	movs	r0, #15
 80029e0:	f7ff ff54 	bl	800288c <DS3231_GetRegByte>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f023 0302 	bic.w	r3, r3, #2
 80029ea:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f023 0302 	bic.w	r3, r3, #2
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	200f      	movs	r0, #15
 80029f8:	f7ff ff2a 	bl	8002850 <DS3231_SetRegByte>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002a0e:	200e      	movs	r0, #14
 8002a10:	f7ff ff3c 	bl	800288c <DS3231_GetRegByte>
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	b25a      	sxtb	r2, r3
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	200e      	movs	r0, #14
 8002a36:	f7ff ff0b 	bl	8002850 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7ff ff48 	bl	80028d0 <DS3231_SetInterruptMode>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002a4e:	200f      	movs	r0, #15
 8002a50:	f7ff ff1c 	bl	800288c <DS3231_GetRegByte>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4619      	mov	r1, r3
 8002a66:	200f      	movs	r0, #15
 8002a68:	f7ff fef2 	bl	8002850 <DS3231_SetRegByte>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f7ff ff07 	bl	800288c <DS3231_GetRegByte>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 f866 	bl	8002b52 <DS3231_DecodeBCD>
 8002a86:	4603      	mov	r3, r0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002a90:	2002      	movs	r0, #2
 8002a92:	f7ff fefb 	bl	800288c <DS3231_GetRegByte>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f85a 	bl	8002b52 <DS3231_DecodeBCD>
 8002a9e:	4603      	mov	r3, r0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f7ff feef 	bl	800288c <DS3231_GetRegByte>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f84e 	bl	8002b52 <DS3231_DecodeBCD>
 8002ab6:	4603      	mov	r3, r0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}

08002abc <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f85b 	bl	8002b84 <DS3231_EncodeBCD>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	f7ff febc 	bl	8002850 <DS3231_SetRegByte>
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f846 	bl	8002b84 <DS3231_EncodeBCD>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4619      	mov	r1, r3
 8002afc:	2002      	movs	r0, #2
 8002afe:	f7ff fea7 	bl	8002850 <DS3231_SetRegByte>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f834 	bl	8002b84 <DS3231_EncodeBCD>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4619      	mov	r1, r3
 8002b20:	2001      	movs	r0, #1
 8002b22:	f7ff fe95 	bl	8002850 <DS3231_SetRegByte>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f822 	bl	8002b84 <DS3231_EncodeBCD>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7ff fe83 	bl	8002850 <DS3231_SetRegByte>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	0092      	lsls	r2, r2, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	b2db      	uxtb	r3, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002b8e:	79fa      	ldrb	r2, [r7, #7]
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <DS3231_EncodeBCD+0x40>)
 8002b92:	fba3 1302 	umull	r1, r3, r3, r2
 8002b96:	08d9      	lsrs	r1, r3, #3
 8002b98:	460b      	mov	r3, r1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	4907      	ldr	r1, [pc, #28]	; (8002bc4 <DS3231_EncodeBCD+0x40>)
 8002ba8:	fba1 1303 	umull	r1, r3, r1, r3
 8002bac:	08db      	lsrs	r3, r3, #3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	b2db      	uxtb	r3, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	cccccccd 	.word	0xcccccccd

08002bc8 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8002bcc:	bf00      	nop
 8002bce:	f007 ff59 	bl	800aa84 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <eeprom_wait+0x1c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d9f7      	bls.n	8002bce <eeprom_wait+0x6>
    {
    }
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	2000024c 	.word	0x2000024c

08002be8 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af04      	add	r7, sp, #16
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8002bf4:	f7ff ffe8 	bl	8002bc8 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	9102      	str	r1, [sp, #8]
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	21a0      	movs	r1, #160	; 0xa0
 8002c10:	4803      	ldr	r0, [pc, #12]	; (8002c20 <eeprom_read+0x38>)
 8002c12:	f009 fc61 	bl	800c4d8 <HAL_I2C_Mem_Read>
 8002c16:	4603      	mov	r3, r0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000390 	.word	0x20000390

08002c24 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af04      	add	r7, sp, #16
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002c30:	f7ff ffca 	bl	8002bc8 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	9102      	str	r1, [sp, #8]
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2301      	movs	r3, #1
 8002c4a:	21a0      	movs	r1, #160	; 0xa0
 8002c4c:	4807      	ldr	r0, [pc, #28]	; (8002c6c <eeprom_write+0x48>)
 8002c4e:	f009 fb49 	bl	800c2e4 <HAL_I2C_Mem_Write>
 8002c52:	4603      	mov	r3, r0
 8002c54:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002c56:	f007 ff15 	bl	800aa84 <HAL_GetTick>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <eeprom_write+0x4c>)
 8002c5e:	6013      	str	r3, [r2, #0]

    return rc;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000390 	.word	0x20000390
 8002c70:	2000024c 	.word	0x2000024c

08002c74 <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	71fb      	strb	r3, [r7, #7]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002c84:	79bb      	ldrb	r3, [r7, #6]
 8002c86:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <EEPROM_RelayStateUpdate+0x2a>
 8002c8e:	f107 030f 	add.w	r3, r7, #15
 8002c92:	2201      	movs	r2, #1
 8002c94:	4619      	mov	r1, r3
 8002c96:	202e      	movs	r0, #46	; 0x2e
 8002c98:	f7ff ffc4 	bl	8002c24 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002c9c:	e01f      	b.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d107      	bne.n	8002cb4 <EEPROM_RelayStateUpdate+0x40>
 8002ca4:	f107 030f 	add.w	r3, r7, #15
 8002ca8:	2201      	movs	r2, #1
 8002caa:	4619      	mov	r1, r3
 8002cac:	202f      	movs	r0, #47	; 0x2f
 8002cae:	f7ff ffb9 	bl	8002c24 <eeprom_write>
}
 8002cb2:	e014      	b.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d107      	bne.n	8002cca <EEPROM_RelayStateUpdate+0x56>
 8002cba:	f107 030f 	add.w	r3, r7, #15
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	2030      	movs	r0, #48	; 0x30
 8002cc4:	f7ff ffae 	bl	8002c24 <eeprom_write>
}
 8002cc8:	e009      	b.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d106      	bne.n	8002cde <EEPROM_RelayStateUpdate+0x6a>
 8002cd0:	f107 030f 	add.w	r3, r7, #15
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	2031      	movs	r0, #49	; 0x31
 8002cda:	f7ff ffa3 	bl	8002c24 <eeprom_write>
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	460a      	mov	r2, r1
 8002cf0:	71fb      	strb	r3, [r7, #7]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002cf6:	79bb      	ldrb	r3, [r7, #6]
 8002cf8:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <EEPROM_LightStateUpdate+0x2a>
 8002d00:	f107 030f 	add.w	r3, r7, #15
 8002d04:	2201      	movs	r2, #1
 8002d06:	4619      	mov	r1, r3
 8002d08:	2033      	movs	r0, #51	; 0x33
 8002d0a:	f7ff ff8b 	bl	8002c24 <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002d0e:	e01f      	b.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d107      	bne.n	8002d26 <EEPROM_LightStateUpdate+0x40>
 8002d16:	f107 030f 	add.w	r3, r7, #15
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2034      	movs	r0, #52	; 0x34
 8002d20:	f7ff ff80 	bl	8002c24 <eeprom_write>
}
 8002d24:	e014      	b.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d107      	bne.n	8002d3c <EEPROM_LightStateUpdate+0x56>
 8002d2c:	f107 030f 	add.w	r3, r7, #15
 8002d30:	2201      	movs	r2, #1
 8002d32:	4619      	mov	r1, r3
 8002d34:	2035      	movs	r0, #53	; 0x35
 8002d36:	f7ff ff75 	bl	8002c24 <eeprom_write>
}
 8002d3a:	e009      	b.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d106      	bne.n	8002d50 <EEPROM_LightStateUpdate+0x6a>
 8002d42:	f107 030f 	add.w	r3, r7, #15
 8002d46:	2201      	movs	r2, #1
 8002d48:	4619      	mov	r1, r3
 8002d4a:	2036      	movs	r0, #54	; 0x36
 8002d4c:	f7ff ff6a 	bl	8002c24 <eeprom_write>
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d107      	bne.n	8002d7c <EEPROM_RelayStateRead+0x24>
 8002d6c:	f107 030f 	add.w	r3, r7, #15
 8002d70:	2201      	movs	r2, #1
 8002d72:	4619      	mov	r1, r3
 8002d74:	202e      	movs	r0, #46	; 0x2e
 8002d76:	f7ff ff37 	bl	8002be8 <eeprom_read>
 8002d7a:	e01f      	b.n	8002dbc <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d107      	bne.n	8002d92 <EEPROM_RelayStateRead+0x3a>
 8002d82:	f107 030f 	add.w	r3, r7, #15
 8002d86:	2201      	movs	r2, #1
 8002d88:	4619      	mov	r1, r3
 8002d8a:	202f      	movs	r0, #47	; 0x2f
 8002d8c:	f7ff ff2c 	bl	8002be8 <eeprom_read>
 8002d90:	e014      	b.n	8002dbc <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d107      	bne.n	8002da8 <EEPROM_RelayStateRead+0x50>
 8002d98:	f107 030f 	add.w	r3, r7, #15
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4619      	mov	r1, r3
 8002da0:	2030      	movs	r0, #48	; 0x30
 8002da2:	f7ff ff21 	bl	8002be8 <eeprom_read>
 8002da6:	e009      	b.n	8002dbc <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d106      	bne.n	8002dbc <EEPROM_RelayStateRead+0x64>
 8002dae:	f107 030f 	add.w	r3, r7, #15
 8002db2:	2201      	movs	r2, #1
 8002db4:	4619      	mov	r1, r3
 8002db6:	2031      	movs	r0, #49	; 0x31
 8002db8:	f7ff ff16 	bl	8002be8 <eeprom_read>

	return RelayStan;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <EEPROM_LightStateRead+0x24>
 8002dda:	f107 030f 	add.w	r3, r7, #15
 8002dde:	2201      	movs	r2, #1
 8002de0:	4619      	mov	r1, r3
 8002de2:	2033      	movs	r0, #51	; 0x33
 8002de4:	f7ff ff00 	bl	8002be8 <eeprom_read>
 8002de8:	e01f      	b.n	8002e2a <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d107      	bne.n	8002e00 <EEPROM_LightStateRead+0x3a>
 8002df0:	f107 030f 	add.w	r3, r7, #15
 8002df4:	2201      	movs	r2, #1
 8002df6:	4619      	mov	r1, r3
 8002df8:	2034      	movs	r0, #52	; 0x34
 8002dfa:	f7ff fef5 	bl	8002be8 <eeprom_read>
 8002dfe:	e014      	b.n	8002e2a <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d107      	bne.n	8002e16 <EEPROM_LightStateRead+0x50>
 8002e06:	f107 030f 	add.w	r3, r7, #15
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	2035      	movs	r0, #53	; 0x35
 8002e10:	f7ff feea 	bl	8002be8 <eeprom_read>
 8002e14:	e009      	b.n	8002e2a <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d106      	bne.n	8002e2a <EEPROM_LightStateRead+0x64>
 8002e1c:	f107 030f 	add.w	r3, r7, #15
 8002e20:	2201      	movs	r2, #1
 8002e22:	4619      	mov	r1, r3
 8002e24:	2036      	movs	r0, #54	; 0x36
 8002e26:	f7ff fedf 	bl	8002be8 <eeprom_read>

	return AktualnyStan;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f7ff ff8d 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <EEPROM_RelayStateRestore+0x18>
 8002e44:	2005      	movs	r0, #5
 8002e46:	f006 fbdd 	bl	8009604 <SendComand>
 8002e4a:	e002      	b.n	8002e52 <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002e4c:	2006      	movs	r0, #6
 8002e4e:	f006 fbd9 	bl	8009604 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002e52:	2002      	movs	r0, #2
 8002e54:	f7ff ff80 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <EEPROM_RelayStateRestore+0x32>
 8002e5e:	2007      	movs	r0, #7
 8002e60:	f006 fbd0 	bl	8009604 <SendComand>
 8002e64:	e002      	b.n	8002e6c <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002e66:	2008      	movs	r0, #8
 8002e68:	f006 fbcc 	bl	8009604 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	f7ff ff73 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <EEPROM_RelayStateRestore+0x4c>
 8002e78:	2009      	movs	r0, #9
 8002e7a:	f006 fbc3 	bl	8009604 <SendComand>
 8002e7e:	e002      	b.n	8002e86 <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002e80:	200a      	movs	r0, #10
 8002e82:	f006 fbbf 	bl	8009604 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002e86:	2004      	movs	r0, #4
 8002e88:	f7ff ff66 	bl	8002d58 <EEPROM_RelayStateRead>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <EEPROM_RelayStateRestore+0x66>
 8002e92:	200b      	movs	r0, #11
 8002e94:	f006 fbb6 	bl	8009604 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002e98:	e002      	b.n	8002ea0 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002e9a:	200c      	movs	r0, #12
 8002e9c:	f006 fbb2 	bl	8009604 <SendComand>
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f7ff ff8c 	bl	8002dc6 <EEPROM_LightStateRead>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <EEPROM_LightStateRestore+0x18>
 8002eb4:	200d      	movs	r0, #13
 8002eb6:	f006 fba5 	bl	8009604 <SendComand>
 8002eba:	e002      	b.n	8002ec2 <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002ebc:	200e      	movs	r0, #14
 8002ebe:	f006 fba1 	bl	8009604 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002ec2:	2002      	movs	r0, #2
 8002ec4:	f7ff ff7f 	bl	8002dc6 <EEPROM_LightStateRead>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <EEPROM_LightStateRestore+0x32>
 8002ece:	200f      	movs	r0, #15
 8002ed0:	f006 fb98 	bl	8009604 <SendComand>
 8002ed4:	e002      	b.n	8002edc <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002ed6:	2010      	movs	r0, #16
 8002ed8:	f006 fb94 	bl	8009604 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f7ff ff72 	bl	8002dc6 <EEPROM_LightStateRead>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <EEPROM_LightStateRestore+0x4c>
 8002ee8:	2011      	movs	r0, #17
 8002eea:	f006 fb8b 	bl	8009604 <SendComand>
 8002eee:	e002      	b.n	8002ef6 <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002ef0:	2012      	movs	r0, #18
 8002ef2:	f006 fb87 	bl	8009604 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002ef6:	2004      	movs	r0, #4
 8002ef8:	f7ff ff65 	bl	8002dc6 <EEPROM_LightStateRead>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <EEPROM_LightStateRestore+0x66>
 8002f02:	2013      	movs	r0, #19
 8002f04:	f006 fb7e 	bl	8009604 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002f08:	e002      	b.n	8002f10 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002f0a:	2014      	movs	r0, #20
 8002f0c:	f006 fb7a 	bl	8009604 <SendComand>
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d107      	bne.n	8002f3a <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f2a:	f107 030a 	add.w	r3, r7, #10
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4619      	mov	r1, r3
 8002f32:	2005      	movs	r0, #5
 8002f34:	f7ff fe58 	bl	8002be8 <eeprom_read>
 8002f38:	e009      	b.n	8002f4e <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d106      	bne.n	8002f4e <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f40:	f107 030a 	add.w	r3, r7, #10
 8002f44:	2201      	movs	r2, #1
 8002f46:	4619      	mov	r1, r3
 8002f48:	200c      	movs	r0, #12
 8002f4a:	f7ff fe4d 	bl	8002be8 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	72fb      	strb	r3, [r7, #11]
 8002f56:	e016      	b.n	8002f86 <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002f58:	7abb      	ldrb	r3, [r7, #10]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002f64:	7afb      	ldrb	r3, [r7, #11]
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	4413      	add	r3, r2
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e004      	b.n	8002f7a <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002f70:	7afb      	ldrb	r3, [r7, #11]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f80:	7afb      	ldrb	r3, [r7, #11]
 8002f82:	3301      	adds	r3, #1
 8002f84:	72fb      	strb	r3, [r7, #11]
 8002f86:	7afb      	ldrb	r3, [r7, #11]
 8002f88:	2b06      	cmp	r3, #6
 8002f8a:	d9e5      	bls.n	8002f58 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	6039      	str	r1, [r7, #0]
 8002fa0:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	72fb      	strb	r3, [r7, #11]
 8002fae:	e011      	b.n	8002fd4 <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002fb0:	7afb      	ldrb	r3, [r7, #11]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	7abb      	ldrb	r3, [r7, #10]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002fce:	7afb      	ldrb	r3, [r7, #11]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	72fb      	strb	r3, [r7, #11]
 8002fd4:	7afb      	ldrb	r3, [r7, #11]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d9ea      	bls.n	8002fb0 <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002fe0:	f107 030a 	add.w	r3, r7, #10
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	2005      	movs	r0, #5
 8002fea:	f7ff fe1b 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002fee:	e009      	b.n	8003004 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d106      	bne.n	8003004 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002ff6:	f107 030a 	add.w	r3, r7, #10
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	200c      	movs	r0, #12
 8003000:	f7ff fe10 	bl	8002c24 <eeprom_write>
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10e      	bne.n	8003044 <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8003026:	f107 0309 	add.w	r3, r7, #9
 800302a:	2201      	movs	r2, #1
 800302c:	4619      	mov	r1, r3
 800302e:	2006      	movs	r0, #6
 8003030:	f7ff fdda 	bl	8002be8 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8003034:	f107 0308 	add.w	r3, r7, #8
 8003038:	2201      	movs	r2, #1
 800303a:	4619      	mov	r1, r3
 800303c:	2007      	movs	r0, #7
 800303e:	f7ff fdd3 	bl	8002be8 <eeprom_read>
 8003042:	e010      	b.n	8003066 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d10d      	bne.n	8003066 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 800304a:	f107 0309 	add.w	r3, r7, #9
 800304e:	2201      	movs	r2, #1
 8003050:	4619      	mov	r1, r3
 8003052:	200d      	movs	r0, #13
 8003054:	f7ff fdc8 	bl	8002be8 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8003058:	f107 0308 	add.w	r3, r7, #8
 800305c:	2201      	movs	r2, #1
 800305e:	4619      	mov	r1, r3
 8003060:	200e      	movs	r0, #14
 8003062:	f7ff fdc1 	bl	8002be8 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8003066:	2301      	movs	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 800306a:	2300      	movs	r3, #0
 800306c:	72fb      	strb	r3, [r7, #11]
 800306e:	e016      	b.n	800309e <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8003070:	7a7b      	ldrb	r3, [r7, #9]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 800307c:	7afb      	ldrb	r3, [r7, #11]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	4413      	add	r3, r2
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e004      	b.n	8003092 <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8003088:	7afb      	ldrb	r3, [r7, #11]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4413      	add	r3, r2
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	3301      	adds	r3, #1
 800309c:	72fb      	strb	r3, [r7, #11]
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d9e5      	bls.n	8003070 <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 80030a4:	2301      	movs	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 80030a8:	2304      	movs	r3, #4
 80030aa:	72bb      	strb	r3, [r7, #10]
 80030ac:	e016      	b.n	80030dc <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 80030ae:	7a3b      	ldrb	r3, [r7, #8]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 80030ba:	7abb      	ldrb	r3, [r7, #10]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e004      	b.n	80030d0 <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 80030c6:	7abb      	ldrb	r3, [r7, #10]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 80030d6:	7abb      	ldrb	r3, [r7, #10]
 80030d8:	3301      	adds	r3, #1
 80030da:	72bb      	strb	r3, [r7, #10]
 80030dc:	7abb      	ldrb	r3, [r7, #10]
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d9e5      	bls.n	80030ae <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 80030e2:	bf00      	nop
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 8003100:	2301      	movs	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8003104:	2300      	movs	r3, #0
 8003106:	72fb      	strb	r3, [r7, #11]
 8003108:	e011      	b.n	800312e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	7a7b      	ldrb	r3, [r7, #9]
 800311c:	4313      	orrs	r3, r2
 800311e:	b2db      	uxtb	r3, r3
 8003120:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8003128:	7afb      	ldrb	r3, [r7, #11]
 800312a:	3301      	adds	r3, #1
 800312c:	72fb      	strb	r3, [r7, #11]
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d9ea      	bls.n	800310a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8003134:	2301      	movs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8003138:	2304      	movs	r3, #4
 800313a:	72bb      	strb	r3, [r7, #10]
 800313c:	e011      	b.n	8003162 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 800313e:	7abb      	ldrb	r3, [r7, #10]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	4413      	add	r3, r2
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	7a3b      	ldrb	r3, [r7, #8]
 8003150:	4313      	orrs	r3, r2
 8003152:	b2db      	uxtb	r3, r3
 8003154:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 800315c:	7abb      	ldrb	r3, [r7, #10]
 800315e:	3301      	adds	r3, #1
 8003160:	72bb      	strb	r3, [r7, #10]
 8003162:	7abb      	ldrb	r3, [r7, #10]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d9ea      	bls.n	800313e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10e      	bne.n	800318c <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 800316e:	f107 0309 	add.w	r3, r7, #9
 8003172:	2201      	movs	r2, #1
 8003174:	4619      	mov	r1, r3
 8003176:	2006      	movs	r0, #6
 8003178:	f7ff fd54 	bl	8002c24 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	2201      	movs	r2, #1
 8003182:	4619      	mov	r1, r3
 8003184:	2007      	movs	r0, #7
 8003186:	f7ff fd4d 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 800318a:	e010      	b.n	80031ae <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d10d      	bne.n	80031ae <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8003192:	f107 0309 	add.w	r3, r7, #9
 8003196:	2201      	movs	r2, #1
 8003198:	4619      	mov	r1, r3
 800319a:	200d      	movs	r0, #13
 800319c:	f7ff fd42 	bl	8002c24 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 80031a0:	f107 0308 	add.w	r3, r7, #8
 80031a4:	2201      	movs	r2, #1
 80031a6:	4619      	mov	r1, r3
 80031a8:	200e      	movs	r0, #14
 80031aa:	f7ff fd3b 	bl	8002c24 <eeprom_write>
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	6039      	str	r1, [r7, #0]
 80031c0:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 80031cc:	f107 030f 	add.w	r3, r7, #15
 80031d0:	2201      	movs	r2, #1
 80031d2:	4619      	mov	r1, r3
 80031d4:	2008      	movs	r0, #8
 80031d6:	f7ff fd07 	bl	8002be8 <eeprom_read>
 80031da:	e009      	b.n	80031f0 <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d106      	bne.n	80031f0 <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 80031e2:	f107 030f 	add.w	r3, r7, #15
 80031e6:	2201      	movs	r2, #1
 80031e8:	4619      	mov	r1, r3
 80031ea:	200f      	movs	r0, #15
 80031ec:	f7ff fcfc 	bl	8002be8 <eeprom_read>
	}

	*hourOn = TempHour;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	701a      	strb	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	6039      	str	r1, [r7, #0]
 8003208:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d107      	bne.n	8003224 <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003214:	f107 030f 	add.w	r3, r7, #15
 8003218:	2201      	movs	r2, #1
 800321a:	4619      	mov	r1, r3
 800321c:	2009      	movs	r0, #9
 800321e:	f7ff fce3 	bl	8002be8 <eeprom_read>
 8003222:	e009      	b.n	8003238 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d106      	bne.n	8003238 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 800322a:	f107 030f 	add.w	r3, r7, #15
 800322e:	2201      	movs	r2, #1
 8003230:	4619      	mov	r1, r3
 8003232:	2010      	movs	r0, #16
 8003234:	f7ff fcd8 	bl	8002be8 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	701a      	strb	r2, [r3, #0]
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	6039      	str	r1, [r7, #0]
 8003250:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d107      	bne.n	800326c <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 800325c:	f107 030f 	add.w	r3, r7, #15
 8003260:	2201      	movs	r2, #1
 8003262:	4619      	mov	r1, r3
 8003264:	200a      	movs	r0, #10
 8003266:	f7ff fcbf 	bl	8002be8 <eeprom_read>
 800326a:	e009      	b.n	8003280 <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d106      	bne.n	8003280 <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 8003272:	f107 030f 	add.w	r3, r7, #15
 8003276:	2201      	movs	r2, #1
 8003278:	4619      	mov	r1, r3
 800327a:	2011      	movs	r0, #17
 800327c:	f7ff fcb4 	bl	8002be8 <eeprom_read>
	}

	*hourOff = TempHour;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	701a      	strb	r2, [r3, #0]

}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	6039      	str	r1, [r7, #0]
 8003298:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80032a4:	f107 030f 	add.w	r3, r7, #15
 80032a8:	2201      	movs	r2, #1
 80032aa:	4619      	mov	r1, r3
 80032ac:	200b      	movs	r0, #11
 80032ae:	f7ff fc9b 	bl	8002be8 <eeprom_read>
 80032b2:	e009      	b.n	80032c8 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d106      	bne.n	80032c8 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80032ba:	f107 030f 	add.w	r3, r7, #15
 80032be:	2201      	movs	r2, #1
 80032c0:	4619      	mov	r1, r3
 80032c2:	2012      	movs	r0, #18
 80032c4:	f7ff fc90 	bl	8002be8 <eeprom_read>
	}
	*minuteOff = TempMinute;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	701a      	strb	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	460a      	mov	r2, r1
 80032e0:	71fb      	strb	r3, [r7, #7]
 80032e2:	4613      	mov	r3, r2
 80032e4:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 80032e6:	79bb      	ldrb	r3, [r7, #6]
 80032e8:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <EEPROM_ScheduleHourOnUpdate+0x2a>
 80032f0:	f107 030f 	add.w	r3, r7, #15
 80032f4:	2201      	movs	r2, #1
 80032f6:	4619      	mov	r1, r3
 80032f8:	2008      	movs	r0, #8
 80032fa:	f7ff fc93 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 80032fe:	e009      	b.n	8003314 <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d106      	bne.n	8003314 <EEPROM_ScheduleHourOnUpdate+0x3e>
 8003306:	f107 030f 	add.w	r3, r7, #15
 800330a:	2201      	movs	r2, #1
 800330c:	4619      	mov	r1, r3
 800330e:	200f      	movs	r0, #15
 8003310:	f7ff fc88 	bl	8002c24 <eeprom_write>
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	460a      	mov	r2, r1
 8003326:	71fb      	strb	r3, [r7, #7]
 8003328:	4613      	mov	r3, r2
 800332a:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 800332c:	79bb      	ldrb	r3, [r7, #6]
 800332e:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 8003336:	f107 030f 	add.w	r3, r7, #15
 800333a:	2201      	movs	r2, #1
 800333c:	4619      	mov	r1, r3
 800333e:	2009      	movs	r0, #9
 8003340:	f7ff fc70 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 8003344:	e009      	b.n	800335a <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d106      	bne.n	800335a <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 800334c:	f107 030f 	add.w	r3, r7, #15
 8003350:	2201      	movs	r2, #1
 8003352:	4619      	mov	r1, r3
 8003354:	2010      	movs	r0, #16
 8003356:	f7ff fc65 	bl	8002c24 <eeprom_write>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	460a      	mov	r2, r1
 800336c:	71fb      	strb	r3, [r7, #7]
 800336e:	4613      	mov	r3, r2
 8003370:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 8003372:	79bb      	ldrb	r3, [r7, #6]
 8003374:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d107      	bne.n	800338c <EEPROM_ScheduleHourOffUpdate+0x2a>
 800337c:	f107 030f 	add.w	r3, r7, #15
 8003380:	2201      	movs	r2, #1
 8003382:	4619      	mov	r1, r3
 8003384:	200a      	movs	r0, #10
 8003386:	f7ff fc4d 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 800338a:	e009      	b.n	80033a0 <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d106      	bne.n	80033a0 <EEPROM_ScheduleHourOffUpdate+0x3e>
 8003392:	f107 030f 	add.w	r3, r7, #15
 8003396:	2201      	movs	r2, #1
 8003398:	4619      	mov	r1, r3
 800339a:	2011      	movs	r0, #17
 800339c:	f7ff fc42 	bl	8002c24 <eeprom_write>
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	460a      	mov	r2, r1
 80033b2:	71fb      	strb	r3, [r7, #7]
 80033b4:	4613      	mov	r3, r2
 80033b6:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80033b8:	79bb      	ldrb	r3, [r7, #6]
 80033ba:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80033c2:	f107 030f 	add.w	r3, r7, #15
 80033c6:	2201      	movs	r2, #1
 80033c8:	4619      	mov	r1, r3
 80033ca:	200b      	movs	r0, #11
 80033cc:	f7ff fc2a 	bl	8002c24 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 80033d0:	e009      	b.n	80033e6 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d106      	bne.n	80033e6 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 80033d8:	f107 030f 	add.w	r3, r7, #15
 80033dc:	2201      	movs	r2, #1
 80033de:	4619      	mov	r1, r3
 80033e0:	2012      	movs	r0, #18
 80033e2:	f7ff fc1f 	bl	8002c24 <eeprom_write>
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80033f6:	f24c 6018 	movw	r0, #50712	; 0xc618
 80033fa:	f7fe febb 	bl	8002174 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 80033fe:	238c      	movs	r3, #140	; 0x8c
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	23f0      	movs	r3, #240	; 0xf0
 8003404:	4aae      	ldr	r2, [pc, #696]	; (80036c0 <system_init+0x2d0>)
 8003406:	2132      	movs	r1, #50	; 0x32
 8003408:	201e      	movs	r0, #30
 800340a:	f7fe fe88 	bl	800211e <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 800340e:	48ad      	ldr	r0, [pc, #692]	; (80036c4 <system_init+0x2d4>)
 8003410:	f7fe faac 	bl	800196c <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8003414:	49ac      	ldr	r1, [pc, #688]	; (80036c8 <system_init+0x2d8>)
 8003416:	48ad      	ldr	r0, [pc, #692]	; (80036cc <system_init+0x2dc>)
 8003418:	f00f f8c4 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800341c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	2300      	movs	r3, #0
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	2300      	movs	r3, #0
 8003428:	220a      	movs	r2, #10
 800342a:	213c      	movs	r1, #60	; 0x3c
 800342c:	48a7      	ldr	r0, [pc, #668]	; (80036cc <system_init+0x2dc>)
 800342e:	f7fe fcb7 	bl	8001da0 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 8003432:	f007 fb27 	bl	800aa84 <HAL_GetTick>
 8003436:	4603      	mov	r3, r0
 8003438:	4aa5      	ldr	r2, [pc, #660]	; (80036d0 <system_init+0x2e0>)
 800343a:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 800343c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	2305      	movs	r3, #5
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2314      	movs	r3, #20
 8003448:	2214      	movs	r2, #20
 800344a:	21be      	movs	r1, #190	; 0xbe
 800344c:	203c      	movs	r0, #60	; 0x3c
 800344e:	f7fe f9bf 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 8003452:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	2305      	movs	r3, #5
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2314      	movs	r3, #20
 800345e:	2214      	movs	r2, #20
 8003460:	21be      	movs	r1, #190	; 0xbe
 8003462:	205a      	movs	r0, #90	; 0x5a
 8003464:	f7fe f9b4 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8003468:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	2305      	movs	r3, #5
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2314      	movs	r3, #20
 8003474:	2214      	movs	r2, #20
 8003476:	21be      	movs	r1, #190	; 0xbe
 8003478:	2078      	movs	r0, #120	; 0x78
 800347a:	f7fe f9a9 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 800347e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	2305      	movs	r3, #5
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	2314      	movs	r3, #20
 800348a:	2214      	movs	r2, #20
 800348c:	21be      	movs	r1, #190	; 0xbe
 800348e:	2096      	movs	r0, #150	; 0x96
 8003490:	f7fe f99e 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 8003494:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	2305      	movs	r3, #5
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	2314      	movs	r3, #20
 80034a0:	2214      	movs	r2, #20
 80034a2:	21be      	movs	r1, #190	; 0xbe
 80034a4:	20b4      	movs	r0, #180	; 0xb4
 80034a6:	f7fe f993 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 80034aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	2305      	movs	r3, #5
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2314      	movs	r3, #20
 80034b6:	2214      	movs	r2, #20
 80034b8:	21be      	movs	r1, #190	; 0xbe
 80034ba:	20d2      	movs	r0, #210	; 0xd2
 80034bc:	f7fe f988 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 80034c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2305      	movs	r3, #5
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2314      	movs	r3, #20
 80034cc:	2214      	movs	r2, #20
 80034ce:	21be      	movs	r1, #190	; 0xbe
 80034d0:	20f0      	movs	r0, #240	; 0xf0
 80034d2:	f7fe f97d 	bl	80017d0 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 80034d6:	f007 fad5 	bl	800aa84 <HAL_GetTick>
 80034da:	4603      	mov	r3, r0
 80034dc:	4a7c      	ldr	r2, [pc, #496]	; (80036d0 <system_init+0x2e0>)
 80034de:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 80034e0:	487c      	ldr	r0, [pc, #496]	; (80036d4 <system_init+0x2e4>)
 80034e2:	f7fe fa43 	bl	800196c <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80034e6:	20c8      	movs	r0, #200	; 0xc8
 80034e8:	f002 fa8c 	bl	8005a04 <initWait>
	  	  LastTime = HAL_GetTick();
 80034ec:	f007 faca 	bl	800aa84 <HAL_GetTick>
 80034f0:	4603      	mov	r3, r0
 80034f2:	4a77      	ldr	r2, [pc, #476]	; (80036d0 <system_init+0x2e0>)
 80034f4:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 80034f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	2305      	movs	r3, #5
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2314      	movs	r3, #20
 8003502:	2214      	movs	r2, #20
 8003504:	21be      	movs	r1, #190	; 0xbe
 8003506:	203c      	movs	r0, #60	; 0x3c
 8003508:	f7fe f9df 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 800350c:	2201      	movs	r2, #1
 800350e:	4972      	ldr	r1, [pc, #456]	; (80036d8 <system_init+0x2e8>)
 8003510:	2001      	movs	r0, #1
 8003512:	f7ff fb69 	bl	8002be8 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 8003516:	2025      	movs	r0, #37	; 0x25
 8003518:	f006 f874 	bl	8009604 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800351c:	486f      	ldr	r0, [pc, #444]	; (80036dc <system_init+0x2ec>)
 800351e:	f006 ffd1 	bl	800a4c4 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 8003522:	496f      	ldr	r1, [pc, #444]	; (80036e0 <system_init+0x2f0>)
 8003524:	4869      	ldr	r0, [pc, #420]	; (80036cc <system_init+0x2dc>)
 8003526:	f00f f83d 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800352a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	2301      	movs	r3, #1
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	22dc      	movs	r2, #220	; 0xdc
 8003538:	2114      	movs	r1, #20
 800353a:	4864      	ldr	r0, [pc, #400]	; (80036cc <system_init+0x2dc>)
 800353c:	f7fe fc30 	bl	8001da0 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003540:	20c8      	movs	r0, #200	; 0xc8
 8003542:	f002 fa5f 	bl	8005a04 <initWait>
	  	  	  LastTime = HAL_GetTick();
 8003546:	f007 fa9d 	bl	800aa84 <HAL_GetTick>
 800354a:	4603      	mov	r3, r0
 800354c:	4a60      	ldr	r2, [pc, #384]	; (80036d0 <system_init+0x2e0>)
 800354e:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 8003550:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	2305      	movs	r3, #5
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	2314      	movs	r3, #20
 800355c:	2214      	movs	r2, #20
 800355e:	21be      	movs	r1, #190	; 0xbe
 8003560:	205a      	movs	r0, #90	; 0x5a
 8003562:	f7fe f9b2 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 8003566:	201b      	movs	r0, #27
 8003568:	f006 f84c 	bl	8009604 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 800356c:	f7ff fc62 	bl	8002e34 <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003570:	485a      	ldr	r0, [pc, #360]	; (80036dc <system_init+0x2ec>)
 8003572:	f006 ffa7 	bl	800a4c4 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 8003576:	495b      	ldr	r1, [pc, #364]	; (80036e4 <system_init+0x2f4>)
 8003578:	4854      	ldr	r0, [pc, #336]	; (80036cc <system_init+0x2dc>)
 800357a:	f00f f813 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800357e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	2301      	movs	r3, #1
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2300      	movs	r3, #0
 800358a:	22dc      	movs	r2, #220	; 0xdc
 800358c:	2114      	movs	r1, #20
 800358e:	484f      	ldr	r0, [pc, #316]	; (80036cc <system_init+0x2dc>)
 8003590:	f7fe fc06 	bl	8001da0 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003594:	20c8      	movs	r0, #200	; 0xc8
 8003596:	f002 fa35 	bl	8005a04 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 800359a:	f007 fa73 	bl	800aa84 <HAL_GetTick>
 800359e:	4603      	mov	r3, r0
 80035a0:	4a4b      	ldr	r2, [pc, #300]	; (80036d0 <system_init+0x2e0>)
 80035a2:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 80035a4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	2305      	movs	r3, #5
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2314      	movs	r3, #20
 80035b0:	2214      	movs	r2, #20
 80035b2:	21be      	movs	r1, #190	; 0xbe
 80035b4:	2078      	movs	r0, #120	; 0x78
 80035b6:	f7fe f988 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80035ba:	2004      	movs	r0, #4
 80035bc:	f006 f822 	bl	8009604 <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 80035c0:	2001      	movs	r0, #1
 80035c2:	f004 fc7d 	bl	8007ec0 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80035c6:	20c8      	movs	r0, #200	; 0xc8
 80035c8:	f002 fa1c 	bl	8005a04 <initWait>
			  LastTime = HAL_GetTick();
 80035cc:	f007 fa5a 	bl	800aa84 <HAL_GetTick>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4a3f      	ldr	r2, [pc, #252]	; (80036d0 <system_init+0x2e0>)
 80035d4:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 80035d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	2305      	movs	r3, #5
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	2314      	movs	r3, #20
 80035e2:	2214      	movs	r2, #20
 80035e4:	21be      	movs	r1, #190	; 0xbe
 80035e6:	2096      	movs	r0, #150	; 0x96
 80035e8:	f7fe f96f 	bl	80018ca <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 80035ec:	f7ff fc5a 	bl	8002ea4 <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80035f0:	483a      	ldr	r0, [pc, #232]	; (80036dc <system_init+0x2ec>)
 80035f2:	f006 ff67 	bl	800a4c4 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 80035f6:	493c      	ldr	r1, [pc, #240]	; (80036e8 <system_init+0x2f8>)
 80035f8:	4834      	ldr	r0, [pc, #208]	; (80036cc <system_init+0x2dc>)
 80035fa:	f00e ffd3 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035fe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	2301      	movs	r3, #1
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2300      	movs	r3, #0
 800360a:	22dc      	movs	r2, #220	; 0xdc
 800360c:	2114      	movs	r1, #20
 800360e:	482f      	ldr	r0, [pc, #188]	; (80036cc <system_init+0x2dc>)
 8003610:	f7fe fbc6 	bl	8001da0 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003614:	20c8      	movs	r0, #200	; 0xc8
 8003616:	f002 f9f5 	bl	8005a04 <initWait>
			  LastTime = HAL_GetTick();
 800361a:	f007 fa33 	bl	800aa84 <HAL_GetTick>
 800361e:	4603      	mov	r3, r0
 8003620:	4a2b      	ldr	r2, [pc, #172]	; (80036d0 <system_init+0x2e0>)
 8003622:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 8003624:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	2305      	movs	r3, #5
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2314      	movs	r3, #20
 8003630:	2214      	movs	r2, #20
 8003632:	21be      	movs	r1, #190	; 0xbe
 8003634:	20b4      	movs	r0, #180	; 0xb4
 8003636:	f7fe f948 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 800363a:	2003      	movs	r0, #3
 800363c:	f005 ffe2 	bl	8009604 <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 8003640:	2002      	movs	r0, #2
 8003642:	f004 fc3d 	bl	8007ec0 <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003646:	20c8      	movs	r0, #200	; 0xc8
 8003648:	f002 f9dc 	bl	8005a04 <initWait>
			  LastTime = HAL_GetTick();
 800364c:	f007 fa1a 	bl	800aa84 <HAL_GetTick>
 8003650:	4603      	mov	r3, r0
 8003652:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <system_init+0x2e0>)
 8003654:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 8003656:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	2305      	movs	r3, #5
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2314      	movs	r3, #20
 8003662:	2214      	movs	r2, #20
 8003664:	21be      	movs	r1, #190	; 0xbe
 8003666:	20d2      	movs	r0, #210	; 0xd2
 8003668:	f7fe f92f 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 800366c:	2015      	movs	r0, #21
 800366e:	f005 ffc9 	bl	8009604 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003672:	20c8      	movs	r0, #200	; 0xc8
 8003674:	f002 f9c6 	bl	8005a04 <initWait>
			  LastTime = HAL_GetTick();
 8003678:	f007 fa04 	bl	800aa84 <HAL_GetTick>
 800367c:	4603      	mov	r3, r0
 800367e:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <system_init+0x2e0>)
 8003680:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 8003682:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	2305      	movs	r3, #5
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2314      	movs	r3, #20
 800368e:	2214      	movs	r2, #20
 8003690:	21be      	movs	r1, #190	; 0xbe
 8003692:	20f0      	movs	r0, #240	; 0xf0
 8003694:	f7fe f919 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003698:	2016      	movs	r0, #22
 800369a:	f005 ffb3 	bl	8009604 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800369e:	480f      	ldr	r0, [pc, #60]	; (80036dc <system_init+0x2ec>)
 80036a0:	f006 ff10 	bl	800a4c4 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 80036a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80036a8:	f002 f9ac 	bl	8005a04 <initWait>
			  LastTime = HAL_GetTick();
 80036ac:	f007 f9ea 	bl	800aa84 <HAL_GetTick>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4a07      	ldr	r2, [pc, #28]	; (80036d0 <system_init+0x2e0>)
 80036b4:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 80036b6:	2301      	movs	r3, #1
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	08016d1c 	.word	0x08016d1c
 80036c4:	08029de4 	.word	0x08029de4
 80036c8:	08016230 	.word	0x08016230
 80036cc:	200002c8 	.word	0x200002c8
 80036d0:	20000254 	.word	0x20000254
 80036d4:	08027e6c 	.word	0x08027e6c
 80036d8:	20000034 	.word	0x20000034
 80036dc:	200004f8 	.word	0x200004f8
 80036e0:	08016244 	.word	0x08016244
 80036e4:	08016260 	.word	0x08016260
 80036e8:	08016280 	.word	0x08016280

080036ec <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80036f6:	edc7 0a04 	vstr	s1, [r7, #16]
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	460b      	mov	r3, r1
 80036fe:	ed87 1a01 	vstr	s2, [r7, #4]
 8003702:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003704:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003708:	f7fe fd34 	bl	8002174 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 800370c:	2003      	movs	r0, #3
 800370e:	f005 ff79 	bl	8009604 <SendComand>
	  SendComand(UCMD_PRES_1);
 8003712:	2004      	movs	r0, #4
 8003714:	f005 ff76 	bl	8009604 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8003718:	201b      	movs	r0, #27
 800371a:	f005 ff73 	bl	8009604 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 800371e:	f7ff f9b5 	bl	8002a8c <DS3231_GetHour>
 8003722:	4603      	mov	r3, r0
 8003724:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8003726:	f7ff f9bd 	bl	8002aa4 <DS3231_GetMinute>
 800372a:	4603      	mov	r3, r0
 800372c:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 800372e:	4881      	ldr	r0, [pc, #516]	; (8003934 <showCurrentParameters+0x248>)
 8003730:	f7fe f91c 	bl	800196c <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8003734:	4980      	ldr	r1, [pc, #512]	; (8003938 <showCurrentParameters+0x24c>)
 8003736:	4881      	ldr	r0, [pc, #516]	; (800393c <showCurrentParameters+0x250>)
 8003738:	f00e ff34 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800373c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	2300      	movs	r3, #0
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800374a:	220a      	movs	r2, #10
 800374c:	212f      	movs	r1, #47	; 0x2f
 800374e:	487b      	ldr	r0, [pc, #492]	; (800393c <showCurrentParameters+0x250>)
 8003750:	f7fe fb26 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003754:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	2329      	movs	r3, #41	; 0x29
 800375c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003760:	2129      	movs	r1, #41	; 0x29
 8003762:	2000      	movs	r0, #0
 8003764:	f7fd fe52 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003768:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	232b      	movs	r3, #43	; 0x2b
 8003770:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003774:	212b      	movs	r1, #43	; 0x2b
 8003776:	2000      	movs	r0, #0
 8003778:	f7fd fe48 	bl	800140c <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 800377c:	7ffb      	ldrb	r3, [r7, #31]
 800377e:	2b09      	cmp	r3, #9
 8003780:	d809      	bhi.n	8003796 <showCurrentParameters+0xaa>
 8003782:	7fbb      	ldrb	r3, [r7, #30]
 8003784:	2b09      	cmp	r3, #9
 8003786:	d806      	bhi.n	8003796 <showCurrentParameters+0xaa>
 8003788:	7ffa      	ldrb	r2, [r7, #31]
 800378a:	7fbb      	ldrb	r3, [r7, #30]
 800378c:	496c      	ldr	r1, [pc, #432]	; (8003940 <showCurrentParameters+0x254>)
 800378e:	486b      	ldr	r0, [pc, #428]	; (800393c <showCurrentParameters+0x250>)
 8003790:	f00e ff08 	bl	80125a4 <siprintf>
 8003794:	e019      	b.n	80037ca <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8003796:	7ffb      	ldrb	r3, [r7, #31]
 8003798:	2b09      	cmp	r3, #9
 800379a:	d806      	bhi.n	80037aa <showCurrentParameters+0xbe>
 800379c:	7ffa      	ldrb	r2, [r7, #31]
 800379e:	7fbb      	ldrb	r3, [r7, #30]
 80037a0:	4968      	ldr	r1, [pc, #416]	; (8003944 <showCurrentParameters+0x258>)
 80037a2:	4866      	ldr	r0, [pc, #408]	; (800393c <showCurrentParameters+0x250>)
 80037a4:	f00e fefe 	bl	80125a4 <siprintf>
 80037a8:	e00f      	b.n	80037ca <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 80037aa:	7fbb      	ldrb	r3, [r7, #30]
 80037ac:	2b09      	cmp	r3, #9
 80037ae:	d806      	bhi.n	80037be <showCurrentParameters+0xd2>
 80037b0:	7ffa      	ldrb	r2, [r7, #31]
 80037b2:	7fbb      	ldrb	r3, [r7, #30]
 80037b4:	4964      	ldr	r1, [pc, #400]	; (8003948 <showCurrentParameters+0x25c>)
 80037b6:	4861      	ldr	r0, [pc, #388]	; (800393c <showCurrentParameters+0x250>)
 80037b8:	f00e fef4 	bl	80125a4 <siprintf>
 80037bc:	e005      	b.n	80037ca <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 80037be:	7ffa      	ldrb	r2, [r7, #31]
 80037c0:	7fbb      	ldrb	r3, [r7, #30]
 80037c2:	4962      	ldr	r1, [pc, #392]	; (800394c <showCurrentParameters+0x260>)
 80037c4:	485d      	ldr	r0, [pc, #372]	; (800393c <showCurrentParameters+0x250>)
 80037c6:	f00e feed 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037ca:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	2300      	movs	r3, #0
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2300      	movs	r3, #0
 80037d6:	2232      	movs	r2, #50	; 0x32
 80037d8:	2114      	movs	r1, #20
 80037da:	4858      	ldr	r0, [pc, #352]	; (800393c <showCurrentParameters+0x250>)
 80037dc:	f7fe fae0 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 80037e0:	4b5b      	ldr	r3, [pc, #364]	; (8003950 <showCurrentParameters+0x264>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fc fec7 	bl	8000578 <__aeabi_f2d>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4959      	ldr	r1, [pc, #356]	; (8003954 <showCurrentParameters+0x268>)
 80037f0:	4852      	ldr	r0, [pc, #328]	; (800393c <showCurrentParameters+0x250>)
 80037f2:	f00e fed7 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80037f6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	2301      	movs	r3, #1
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2300      	movs	r3, #0
 8003802:	2250      	movs	r2, #80	; 0x50
 8003804:	2114      	movs	r1, #20
 8003806:	484d      	ldr	r0, [pc, #308]	; (800393c <showCurrentParameters+0x250>)
 8003808:	f7fe faca 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 800380c:	4b52      	ldr	r3, [pc, #328]	; (8003958 <showCurrentParameters+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fc feb1 	bl	8000578 <__aeabi_f2d>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4950      	ldr	r1, [pc, #320]	; (800395c <showCurrentParameters+0x270>)
 800381c:	4847      	ldr	r0, [pc, #284]	; (800393c <showCurrentParameters+0x250>)
 800381e:	f00e fec1 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003822:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	2300      	movs	r3, #0
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	226e      	movs	r2, #110	; 0x6e
 8003830:	2114      	movs	r1, #20
 8003832:	4842      	ldr	r0, [pc, #264]	; (800393c <showCurrentParameters+0x250>)
 8003834:	f7fe fab4 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 8003838:	4b49      	ldr	r3, [pc, #292]	; (8003960 <showCurrentParameters+0x274>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4949      	ldr	r1, [pc, #292]	; (8003964 <showCurrentParameters+0x278>)
 8003840:	483e      	ldr	r0, [pc, #248]	; (800393c <showCurrentParameters+0x250>)
 8003842:	f00e feaf 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003846:	f24c 6318 	movw	r3, #50712	; 0xc618
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	2300      	movs	r3, #0
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	2300      	movs	r3, #0
 8003852:	228c      	movs	r2, #140	; 0x8c
 8003854:	2114      	movs	r1, #20
 8003856:	4839      	ldr	r0, [pc, #228]	; (800393c <showCurrentParameters+0x250>)
 8003858:	f7fe faa2 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 800385c:	4b42      	ldr	r3, [pc, #264]	; (8003968 <showCurrentParameters+0x27c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7fc fe89 	bl	8000578 <__aeabi_f2d>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4940      	ldr	r1, [pc, #256]	; (800396c <showCurrentParameters+0x280>)
 800386c:	4833      	ldr	r0, [pc, #204]	; (800393c <showCurrentParameters+0x250>)
 800386e:	f00e fe99 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003872:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2300      	movs	r3, #0
 800387e:	22aa      	movs	r2, #170	; 0xaa
 8003880:	2114      	movs	r1, #20
 8003882:	482e      	ldr	r0, [pc, #184]	; (800393c <showCurrentParameters+0x250>)
 8003884:	f7fe fa8c 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003888:	4839      	ldr	r0, [pc, #228]	; (8003970 <showCurrentParameters+0x284>)
 800388a:	f7fe f86f 	bl	800196c <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800388e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	2305      	movs	r3, #5
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2314      	movs	r3, #20
 800389a:	225f      	movs	r2, #95	; 0x5f
 800389c:	21d8      	movs	r1, #216	; 0xd8
 800389e:	20dc      	movs	r0, #220	; 0xdc
 80038a0:	f7fe f813 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 80038a4:	4933      	ldr	r1, [pc, #204]	; (8003974 <showCurrentParameters+0x288>)
 80038a6:	4825      	ldr	r0, [pc, #148]	; (800393c <showCurrentParameters+0x250>)
 80038a8:	f00e fe7c 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80038ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	2300      	movs	r3, #0
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	22da      	movs	r2, #218	; 0xda
 80038ba:	21df      	movs	r1, #223	; 0xdf
 80038bc:	481f      	ldr	r0, [pc, #124]	; (800393c <showCurrentParameters+0x250>)
 80038be:	f7fe fa6f 	bl	8001da0 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80038c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	2305      	movs	r3, #5
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2314      	movs	r3, #20
 80038ce:	2264      	movs	r2, #100	; 0x64
 80038d0:	21d8      	movs	r1, #216	; 0xd8
 80038d2:	200a      	movs	r0, #10
 80038d4:	f7fd fff9 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 80038d8:	4927      	ldr	r1, [pc, #156]	; (8003978 <showCurrentParameters+0x28c>)
 80038da:	4818      	ldr	r0, [pc, #96]	; (800393c <showCurrentParameters+0x250>)
 80038dc:	f00e fe62 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80038e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	2300      	movs	r3, #0
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2300      	movs	r3, #0
 80038ec:	22da      	movs	r2, #218	; 0xda
 80038ee:	2114      	movs	r1, #20
 80038f0:	4812      	ldr	r0, [pc, #72]	; (800393c <showCurrentParameters+0x250>)
 80038f2:	f7fe fa55 	bl	8001da0 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80038f6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	2305      	movs	r3, #5
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	2314      	movs	r3, #20
 8003902:	225a      	movs	r2, #90	; 0x5a
 8003904:	21d8      	movs	r1, #216	; 0xd8
 8003906:	2078      	movs	r0, #120	; 0x78
 8003908:	f7fd ffdf 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 800390c:	491b      	ldr	r1, [pc, #108]	; (800397c <showCurrentParameters+0x290>)
 800390e:	480b      	ldr	r0, [pc, #44]	; (800393c <showCurrentParameters+0x250>)
 8003910:	f00e fe48 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003914:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	2300      	movs	r3, #0
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2300      	movs	r3, #0
 8003920:	22da      	movs	r2, #218	; 0xda
 8003922:	2184      	movs	r1, #132	; 0x84
 8003924:	4805      	ldr	r0, [pc, #20]	; (800393c <showCurrentParameters+0x250>)
 8003926:	f7fe fa3b 	bl	8001da0 <EF_PutString>
}
 800392a:	bf00      	nop
 800392c:	3720      	adds	r7, #32
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	08029de4 	.word	0x08029de4
 8003938:	080162a0 	.word	0x080162a0
 800393c:	200002c8 	.word	0x200002c8
 8003940:	080162b0 	.word	0x080162b0
 8003944:	080162c0 	.word	0x080162c0
 8003948:	080162d0 	.word	0x080162d0
 800394c:	080162e0 	.word	0x080162e0
 8003950:	2000029c 	.word	0x2000029c
 8003954:	080162f0 	.word	0x080162f0
 8003958:	200002a8 	.word	0x200002a8
 800395c:	08016304 	.word	0x08016304
 8003960:	200002ac 	.word	0x200002ac
 8003964:	08016318 	.word	0x08016318
 8003968:	200002a4 	.word	0x200002a4
 800396c:	0801632c 	.word	0x0801632c
 8003970:	08027e6c 	.word	0x08027e6c
 8003974:	08016344 	.word	0x08016344
 8003978:	08016350 	.word	0x08016350
 800397c:	0801635c 	.word	0x0801635c

08003980 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003986:	2015      	movs	r0, #21
 8003988:	f005 fe3c 	bl	8009604 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800398c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003990:	f7fe fbf0 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003994:	485c      	ldr	r0, [pc, #368]	; (8003b08 <showControlPanel+0x188>)
 8003996:	f7fd ffe9 	bl	800196c <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 800399a:	495c      	ldr	r1, [pc, #368]	; (8003b0c <showControlPanel+0x18c>)
 800399c:	485c      	ldr	r0, [pc, #368]	; (8003b10 <showControlPanel+0x190>)
 800399e:	f00e fe01 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80039a2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	2300      	movs	r3, #0
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	231f      	movs	r3, #31
 80039ae:	220a      	movs	r2, #10
 80039b0:	2123      	movs	r1, #35	; 0x23
 80039b2:	4857      	ldr	r0, [pc, #348]	; (8003b10 <showControlPanel+0x190>)
 80039b4:	f7fe f9f4 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80039b8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2329      	movs	r3, #41	; 0x29
 80039c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039c4:	2129      	movs	r1, #41	; 0x29
 80039c6:	2000      	movs	r0, #0
 80039c8:	f7fd fd20 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80039cc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	232b      	movs	r3, #43	; 0x2b
 80039d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039d8:	212b      	movs	r1, #43	; 0x2b
 80039da:	2000      	movs	r0, #0
 80039dc:	f7fd fd16 	bl	800140c <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 80039e0:	494c      	ldr	r1, [pc, #304]	; (8003b14 <showControlPanel+0x194>)
 80039e2:	484b      	ldr	r0, [pc, #300]	; (8003b10 <showControlPanel+0x190>)
 80039e4:	f00e fdde 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80039e8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	223c      	movs	r2, #60	; 0x3c
 80039f6:	2114      	movs	r1, #20
 80039f8:	4845      	ldr	r0, [pc, #276]	; (8003b10 <showControlPanel+0x190>)
 80039fa:	f7fe f9d1 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 80039fe:	4946      	ldr	r1, [pc, #280]	; (8003b18 <showControlPanel+0x198>)
 8003a00:	4843      	ldr	r0, [pc, #268]	; (8003b10 <showControlPanel+0x190>)
 8003a02:	f00e fdcf 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003a06:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2300      	movs	r3, #0
 8003a12:	225a      	movs	r2, #90	; 0x5a
 8003a14:	2114      	movs	r1, #20
 8003a16:	483e      	ldr	r0, [pc, #248]	; (8003b10 <showControlPanel+0x190>)
 8003a18:	f7fe f9c2 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8003a1c:	493f      	ldr	r1, [pc, #252]	; (8003b1c <showControlPanel+0x19c>)
 8003a1e:	483c      	ldr	r0, [pc, #240]	; (8003b10 <showControlPanel+0x190>)
 8003a20:	f00e fdc0 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2278      	movs	r2, #120	; 0x78
 8003a32:	2114      	movs	r1, #20
 8003a34:	4836      	ldr	r0, [pc, #216]	; (8003b10 <showControlPanel+0x190>)
 8003a36:	f7fe f9b3 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8003a3a:	4939      	ldr	r1, [pc, #228]	; (8003b20 <showControlPanel+0x1a0>)
 8003a3c:	4834      	ldr	r0, [pc, #208]	; (8003b10 <showControlPanel+0x190>)
 8003a3e:	f00e fdb1 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a42:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2296      	movs	r2, #150	; 0x96
 8003a50:	2114      	movs	r1, #20
 8003a52:	482f      	ldr	r0, [pc, #188]	; (8003b10 <showControlPanel+0x190>)
 8003a54:	f7fe f9a4 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003a58:	4832      	ldr	r0, [pc, #200]	; (8003b24 <showControlPanel+0x1a4>)
 8003a5a:	f7fd ff87 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a5e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	2305      	movs	r3, #5
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	2314      	movs	r3, #20
 8003a6a:	225f      	movs	r2, #95	; 0x5f
 8003a6c:	21d8      	movs	r1, #216	; 0xd8
 8003a6e:	20dc      	movs	r0, #220	; 0xdc
 8003a70:	f7fd ff2b 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003a74:	492c      	ldr	r1, [pc, #176]	; (8003b28 <showControlPanel+0x1a8>)
 8003a76:	4826      	ldr	r0, [pc, #152]	; (8003b10 <showControlPanel+0x190>)
 8003a78:	f00e fd94 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003a7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	2300      	movs	r3, #0
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	2300      	movs	r3, #0
 8003a88:	22da      	movs	r2, #218	; 0xda
 8003a8a:	21df      	movs	r1, #223	; 0xdf
 8003a8c:	4820      	ldr	r0, [pc, #128]	; (8003b10 <showControlPanel+0x190>)
 8003a8e:	f7fe f987 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a92:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	2305      	movs	r3, #5
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2314      	movs	r3, #20
 8003a9e:	2264      	movs	r2, #100	; 0x64
 8003aa0:	21d8      	movs	r1, #216	; 0xd8
 8003aa2:	200a      	movs	r0, #10
 8003aa4:	f7fd ff11 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 8003aa8:	4920      	ldr	r1, [pc, #128]	; (8003b2c <showControlPanel+0x1ac>)
 8003aaa:	4819      	ldr	r0, [pc, #100]	; (8003b10 <showControlPanel+0x190>)
 8003aac:	f00e fd7a 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ab0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2300      	movs	r3, #0
 8003abc:	22da      	movs	r2, #218	; 0xda
 8003abe:	2114      	movs	r1, #20
 8003ac0:	4813      	ldr	r0, [pc, #76]	; (8003b10 <showControlPanel+0x190>)
 8003ac2:	f7fe f96d 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003ac6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	2305      	movs	r3, #5
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	2314      	movs	r3, #20
 8003ad2:	225a      	movs	r2, #90	; 0x5a
 8003ad4:	21d8      	movs	r1, #216	; 0xd8
 8003ad6:	2078      	movs	r0, #120	; 0x78
 8003ad8:	f7fd fef7 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 8003adc:	4914      	ldr	r1, [pc, #80]	; (8003b30 <showControlPanel+0x1b0>)
 8003ade:	480c      	ldr	r0, [pc, #48]	; (8003b10 <showControlPanel+0x190>)
 8003ae0:	f00e fd60 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ae4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	2300      	movs	r3, #0
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	2300      	movs	r3, #0
 8003af0:	22da      	movs	r2, #218	; 0xda
 8003af2:	217e      	movs	r1, #126	; 0x7e
 8003af4:	4806      	ldr	r0, [pc, #24]	; (8003b10 <showControlPanel+0x190>)
 8003af6:	f7fe f953 	bl	8001da0 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003afa:	4803      	ldr	r0, [pc, #12]	; (8003b08 <showControlPanel+0x188>)
 8003afc:	f7fd ff36 	bl	800196c <EF_SetFont>


}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	08029de4 	.word	0x08029de4
 8003b0c:	08016364 	.word	0x08016364
 8003b10:	200002c8 	.word	0x200002c8
 8003b14:	08016378 	.word	0x08016378
 8003b18:	0801638c 	.word	0x0801638c
 8003b1c:	080163a0 	.word	0x080163a0
 8003b20:	080163b4 	.word	0x080163b4
 8003b24:	08027e6c 	.word	0x08027e6c
 8003b28:	080163c8 	.word	0x080163c8
 8003b2c:	080163d4 	.word	0x080163d4
 8003b30:	080163dc 	.word	0x080163dc

08003b34 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003b3a:	2016      	movs	r0, #22
 8003b3c:	f005 fd62 	bl	8009604 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003b40:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003b44:	f7fe fb16 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003b48:	485b      	ldr	r0, [pc, #364]	; (8003cb8 <showLightsControlPanel+0x184>)
 8003b4a:	f7fd ff0f 	bl	800196c <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 8003b4e:	495b      	ldr	r1, [pc, #364]	; (8003cbc <showLightsControlPanel+0x188>)
 8003b50:	485b      	ldr	r0, [pc, #364]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003b52:	f00e fd27 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b56:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b64:	220a      	movs	r2, #10
 8003b66:	2146      	movs	r1, #70	; 0x46
 8003b68:	4855      	ldr	r0, [pc, #340]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003b6a:	f7fe f919 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003b6e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2329      	movs	r3, #41	; 0x29
 8003b76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b7a:	2129      	movs	r1, #41	; 0x29
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f7fd fc45 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003b82:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	232b      	movs	r3, #43	; 0x2b
 8003b8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b8e:	212b      	movs	r1, #43	; 0x2b
 8003b90:	2000      	movs	r0, #0
 8003b92:	f7fd fc3b 	bl	800140c <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 8003b96:	494b      	ldr	r1, [pc, #300]	; (8003cc4 <showLightsControlPanel+0x190>)
 8003b98:	4849      	ldr	r0, [pc, #292]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003b9a:	f00e fd03 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b9e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	2300      	movs	r3, #0
 8003baa:	223c      	movs	r2, #60	; 0x3c
 8003bac:	2114      	movs	r1, #20
 8003bae:	4844      	ldr	r0, [pc, #272]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003bb0:	f7fe f8f6 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 8003bb4:	4944      	ldr	r1, [pc, #272]	; (8003cc8 <showLightsControlPanel+0x194>)
 8003bb6:	4842      	ldr	r0, [pc, #264]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003bb8:	f00e fcf4 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003bbc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	225a      	movs	r2, #90	; 0x5a
 8003bca:	2114      	movs	r1, #20
 8003bcc:	483c      	ldr	r0, [pc, #240]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003bce:	f7fe f8e7 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 8003bd2:	493e      	ldr	r1, [pc, #248]	; (8003ccc <showLightsControlPanel+0x198>)
 8003bd4:	483a      	ldr	r0, [pc, #232]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003bd6:	f00e fce5 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003bda:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	2300      	movs	r3, #0
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	2278      	movs	r2, #120	; 0x78
 8003be8:	2114      	movs	r1, #20
 8003bea:	4835      	ldr	r0, [pc, #212]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003bec:	f7fe f8d8 	bl	8001da0 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8003bf0:	4937      	ldr	r1, [pc, #220]	; (8003cd0 <showLightsControlPanel+0x19c>)
 8003bf2:	4833      	ldr	r0, [pc, #204]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003bf4:	f00e fcd6 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003bf8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	2296      	movs	r2, #150	; 0x96
 8003c06:	2114      	movs	r1, #20
 8003c08:	482d      	ldr	r0, [pc, #180]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003c0a:	f7fe f8c9 	bl	8001da0 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003c0e:	4831      	ldr	r0, [pc, #196]	; (8003cd4 <showLightsControlPanel+0x1a0>)
 8003c10:	f7fd feac 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	2314      	movs	r3, #20
 8003c20:	225f      	movs	r2, #95	; 0x5f
 8003c22:	21d8      	movs	r1, #216	; 0xd8
 8003c24:	20dc      	movs	r0, #220	; 0xdc
 8003c26:	f7fd fe50 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003c2a:	492b      	ldr	r1, [pc, #172]	; (8003cd8 <showLightsControlPanel+0x1a4>)
 8003c2c:	4824      	ldr	r0, [pc, #144]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003c2e:	f00e fcb9 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c32:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	22da      	movs	r2, #218	; 0xda
 8003c40:	21e6      	movs	r1, #230	; 0xe6
 8003c42:	481f      	ldr	r0, [pc, #124]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003c44:	f7fe f8ac 	bl	8001da0 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003c48:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	2305      	movs	r3, #5
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	2314      	movs	r3, #20
 8003c54:	225a      	movs	r2, #90	; 0x5a
 8003c56:	21d8      	movs	r1, #216	; 0xd8
 8003c58:	2078      	movs	r0, #120	; 0x78
 8003c5a:	f7fd fe36 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003c5e:	491f      	ldr	r1, [pc, #124]	; (8003cdc <showLightsControlPanel+0x1a8>)
 8003c60:	4817      	ldr	r0, [pc, #92]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003c62:	f00e fc9f 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c66:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	22da      	movs	r2, #218	; 0xda
 8003c74:	217e      	movs	r1, #126	; 0x7e
 8003c76:	4812      	ldr	r0, [pc, #72]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003c78:	f7fe f892 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	2305      	movs	r3, #5
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	2314      	movs	r3, #20
 8003c88:	2264      	movs	r2, #100	; 0x64
 8003c8a:	21d8      	movs	r1, #216	; 0xd8
 8003c8c:	200a      	movs	r0, #10
 8003c8e:	f7fd fe1c 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 8003c92:	4913      	ldr	r1, [pc, #76]	; (8003ce0 <showLightsControlPanel+0x1ac>)
 8003c94:	480a      	ldr	r0, [pc, #40]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003c96:	f00e fc85 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c9a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	22da      	movs	r2, #218	; 0xda
 8003ca8:	210d      	movs	r1, #13
 8003caa:	4805      	ldr	r0, [pc, #20]	; (8003cc0 <showLightsControlPanel+0x18c>)
 8003cac:	f7fe f878 	bl	8001da0 <EF_PutString>


}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	08029de4 	.word	0x08029de4
 8003cbc:	080163e8 	.word	0x080163e8
 8003cc0:	200002c8 	.word	0x200002c8
 8003cc4:	080163f8 	.word	0x080163f8
 8003cc8:	08016408 	.word	0x08016408
 8003ccc:	08016418 	.word	0x08016418
 8003cd0:	08016428 	.word	0x08016428
 8003cd4:	08027e6c 	.word	0x08027e6c
 8003cd8:	08016438 	.word	0x08016438
 8003cdc:	08016440 	.word	0x08016440
 8003ce0:	0801644c 	.word	0x0801644c

08003ce4 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af02      	add	r7, sp, #8


	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003cea:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003cee:	f7fe fa41 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003cf2:	48a2      	ldr	r0, [pc, #648]	; (8003f7c <showClockSetPanel+0x298>)
 8003cf4:	f7fd fe3a 	bl	800196c <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003cf8:	f7fe fec8 	bl	8002a8c <DS3231_GetHour>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003d00:	f7fe fed0 	bl	8002aa4 <DS3231_GetMinute>
 8003d04:	4603      	mov	r3, r0
 8003d06:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003d08:	f7fe feb4 	bl	8002a74 <DS3231_GetDayOfWeek>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003d10:	499b      	ldr	r1, [pc, #620]	; (8003f80 <showClockSetPanel+0x29c>)
 8003d12:	489c      	ldr	r0, [pc, #624]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003d14:	f00e fc46 	bl	80125a4 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003d18:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d26:	220a      	movs	r2, #10
 8003d28:	212f      	movs	r1, #47	; 0x2f
 8003d2a:	4896      	ldr	r0, [pc, #600]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003d2c:	f7fe f838 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003d30:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2329      	movs	r3, #41	; 0x29
 8003d38:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d3c:	2129      	movs	r1, #41	; 0x29
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f7fd fb64 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003d44:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	232b      	movs	r3, #43	; 0x2b
 8003d4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d50:	212b      	movs	r1, #43	; 0x2b
 8003d52:	2000      	movs	r0, #0
 8003d54:	f7fd fb5a 	bl	800140c <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	498a      	ldr	r1, [pc, #552]	; (8003f88 <showClockSetPanel+0x2a4>)
 8003d5e:	4889      	ldr	r0, [pc, #548]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003d60:	f00e fc20 	bl	80125a4 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003d64:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2246      	movs	r2, #70	; 0x46
 8003d72:	2114      	movs	r1, #20
 8003d74:	4883      	ldr	r0, [pc, #524]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003d76:	f7fe f813 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003d7a:	79bb      	ldrb	r3, [r7, #6]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4983      	ldr	r1, [pc, #524]	; (8003f8c <showClockSetPanel+0x2a8>)
 8003d80:	4880      	ldr	r0, [pc, #512]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003d82:	f00e fc0f 	bl	80125a4 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003d86:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	2300      	movs	r3, #0
 8003d92:	226e      	movs	r2, #110	; 0x6e
 8003d94:	2114      	movs	r1, #20
 8003d96:	487b      	ldr	r0, [pc, #492]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003d98:	f7fe f802 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003d9c:	797b      	ldrb	r3, [r7, #5]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	497b      	ldr	r1, [pc, #492]	; (8003f90 <showClockSetPanel+0x2ac>)
 8003da2:	4878      	ldr	r0, [pc, #480]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003da4:	f00e fbfe 	bl	80125a4 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003da8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	2301      	movs	r3, #1
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2300      	movs	r3, #0
 8003db4:	2296      	movs	r2, #150	; 0x96
 8003db6:	2114      	movs	r1, #20
 8003db8:	4872      	ldr	r0, [pc, #456]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003dba:	f7fd fff1 	bl	8001da0 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003dbe:	4875      	ldr	r0, [pc, #468]	; (8003f94 <showClockSetPanel+0x2b0>)
 8003dc0:	f7fd fdd4 	bl	800196c <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003dc4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	2305      	movs	r3, #5
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	2315      	movs	r3, #21
 8003dd0:	221e      	movs	r2, #30
 8003dd2:	214b      	movs	r1, #75	; 0x4b
 8003dd4:	20f0      	movs	r0, #240	; 0xf0
 8003dd6:	f7fd fd78 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003dda:	496f      	ldr	r1, [pc, #444]	; (8003f98 <showClockSetPanel+0x2b4>)
 8003ddc:	4869      	ldr	r0, [pc, #420]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003dde:	f00e fbe1 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003de2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	2300      	movs	r3, #0
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	2300      	movs	r3, #0
 8003dee:	224d      	movs	r2, #77	; 0x4d
 8003df0:	21f3      	movs	r1, #243	; 0xf3
 8003df2:	4864      	ldr	r0, [pc, #400]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003df4:	f7fd ffd4 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003df8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	2305      	movs	r3, #5
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	2315      	movs	r3, #21
 8003e04:	221e      	movs	r2, #30
 8003e06:	214b      	movs	r1, #75	; 0x4b
 8003e08:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003e0c:	f7fd fd5d 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003e10:	4962      	ldr	r1, [pc, #392]	; (8003f9c <showClockSetPanel+0x2b8>)
 8003e12:	485c      	ldr	r0, [pc, #368]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003e14:	f00e fbc6 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e18:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	2300      	movs	r3, #0
 8003e24:	224d      	movs	r2, #77	; 0x4d
 8003e26:	f240 111d 	movw	r1, #285	; 0x11d
 8003e2a:	4856      	ldr	r0, [pc, #344]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003e2c:	f7fd ffb8 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e30:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	2305      	movs	r3, #5
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	2315      	movs	r3, #21
 8003e3c:	221e      	movs	r2, #30
 8003e3e:	2173      	movs	r1, #115	; 0x73
 8003e40:	20f0      	movs	r0, #240	; 0xf0
 8003e42:	f7fd fd42 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003e46:	4954      	ldr	r1, [pc, #336]	; (8003f98 <showClockSetPanel+0x2b4>)
 8003e48:	484e      	ldr	r0, [pc, #312]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003e4a:	f00e fbab 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e4e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	2300      	movs	r3, #0
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2275      	movs	r2, #117	; 0x75
 8003e5c:	21f5      	movs	r1, #245	; 0xf5
 8003e5e:	4849      	ldr	r0, [pc, #292]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003e60:	f7fd ff9e 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e64:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	2305      	movs	r3, #5
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	2315      	movs	r3, #21
 8003e70:	221e      	movs	r2, #30
 8003e72:	2173      	movs	r1, #115	; 0x73
 8003e74:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003e78:	f7fd fd27 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003e7c:	4948      	ldr	r1, [pc, #288]	; (8003fa0 <showClockSetPanel+0x2bc>)
 8003e7e:	4841      	ldr	r0, [pc, #260]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003e80:	f00e fb90 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e84:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2275      	movs	r2, #117	; 0x75
 8003e92:	f240 111b 	movw	r1, #283	; 0x11b
 8003e96:	483b      	ldr	r0, [pc, #236]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003e98:	f7fd ff82 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e9c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	2305      	movs	r3, #5
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	2315      	movs	r3, #21
 8003ea8:	221e      	movs	r2, #30
 8003eaa:	219b      	movs	r1, #155	; 0x9b
 8003eac:	20f0      	movs	r0, #240	; 0xf0
 8003eae:	f7fd fd0c 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003eb2:	493c      	ldr	r1, [pc, #240]	; (8003fa4 <showClockSetPanel+0x2c0>)
 8003eb4:	4833      	ldr	r0, [pc, #204]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003eb6:	f00e fb75 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003eba:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	229d      	movs	r2, #157	; 0x9d
 8003ec8:	21f3      	movs	r1, #243	; 0xf3
 8003eca:	482e      	ldr	r0, [pc, #184]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003ecc:	f7fd ff68 	bl	8001da0 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003ed0:	4830      	ldr	r0, [pc, #192]	; (8003f94 <showClockSetPanel+0x2b0>)
 8003ed2:	f7fd fd4b 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003ed6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	2305      	movs	r3, #5
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2314      	movs	r3, #20
 8003ee2:	225f      	movs	r2, #95	; 0x5f
 8003ee4:	21d8      	movs	r1, #216	; 0xd8
 8003ee6:	20dc      	movs	r0, #220	; 0xdc
 8003ee8:	f7fd fcef 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003eec:	492e      	ldr	r1, [pc, #184]	; (8003fa8 <showClockSetPanel+0x2c4>)
 8003eee:	4825      	ldr	r0, [pc, #148]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003ef0:	f00e fb58 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ef4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	2300      	movs	r3, #0
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2300      	movs	r3, #0
 8003f00:	22da      	movs	r2, #218	; 0xda
 8003f02:	21e6      	movs	r1, #230	; 0xe6
 8003f04:	481f      	ldr	r0, [pc, #124]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003f06:	f7fd ff4b 	bl	8001da0 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003f0a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	2305      	movs	r3, #5
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2316      	movs	r3, #22
 8003f16:	22aa      	movs	r2, #170	; 0xaa
 8003f18:	21be      	movs	r1, #190	; 0xbe
 8003f1a:	2050      	movs	r0, #80	; 0x50
 8003f1c:	f7fd fcd5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003f20:	4922      	ldr	r1, [pc, #136]	; (8003fac <showClockSetPanel+0x2c8>)
 8003f22:	4818      	ldr	r0, [pc, #96]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003f24:	f00e fb3e 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003f28:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	2300      	movs	r3, #0
 8003f34:	22c1      	movs	r2, #193	; 0xc1
 8003f36:	2164      	movs	r1, #100	; 0x64
 8003f38:	4812      	ldr	r0, [pc, #72]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003f3a:	f7fd ff31 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003f3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	2305      	movs	r3, #5
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2314      	movs	r3, #20
 8003f4a:	2264      	movs	r2, #100	; 0x64
 8003f4c:	21d8      	movs	r1, #216	; 0xd8
 8003f4e:	200a      	movs	r0, #10
 8003f50:	f7fd fcbb 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003f54:	4916      	ldr	r1, [pc, #88]	; (8003fb0 <showClockSetPanel+0x2cc>)
 8003f56:	480b      	ldr	r0, [pc, #44]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003f58:	f00e fb24 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003f5c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	2300      	movs	r3, #0
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2300      	movs	r3, #0
 8003f68:	22da      	movs	r2, #218	; 0xda
 8003f6a:	210d      	movs	r1, #13
 8003f6c:	4805      	ldr	r0, [pc, #20]	; (8003f84 <showClockSetPanel+0x2a0>)
 8003f6e:	f7fd ff17 	bl	8001da0 <EF_PutString>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	08029de4 	.word	0x08029de4
 8003f80:	08016458 	.word	0x08016458
 8003f84:	200002c8 	.word	0x200002c8
 8003f88:	08016468 	.word	0x08016468
 8003f8c:	08016474 	.word	0x08016474
 8003f90:	08016484 	.word	0x08016484
 8003f94:	08027e6c 	.word	0x08027e6c
 8003f98:	08016494 	.word	0x08016494
 8003f9c:	08016498 	.word	0x08016498
 8003fa0:	0801649c 	.word	0x0801649c
 8003fa4:	080164a0 	.word	0x080164a0
 8003fa8:	080164a4 	.word	0x080164a4
 8003fac:	080164ac 	.word	0x080164ac
 8003fb0:	080164bc 	.word	0x080164bc

08003fb4 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003fba:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003fbe:	f7fe f8d9 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003fc2:	487a      	ldr	r0, [pc, #488]	; (80041ac <showPreparedActivitiesPanel+0x1f8>)
 8003fc4:	f7fd fcd2 	bl	800196c <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003fc8:	4979      	ldr	r1, [pc, #484]	; (80041b0 <showPreparedActivitiesPanel+0x1fc>)
 8003fca:	487a      	ldr	r0, [pc, #488]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8003fcc:	f00e faea 	bl	80125a4 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003fd0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	231f      	movs	r3, #31
 8003fdc:	220a      	movs	r2, #10
 8003fde:	212f      	movs	r1, #47	; 0x2f
 8003fe0:	4874      	ldr	r0, [pc, #464]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8003fe2:	f7fd fedd 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003fe6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2329      	movs	r3, #41	; 0x29
 8003fee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ff2:	2129      	movs	r1, #41	; 0x29
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	f7fd fa09 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003ffa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	232b      	movs	r3, #43	; 0x2b
 8004002:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004006:	212b      	movs	r1, #43	; 0x2b
 8004008:	2000      	movs	r0, #0
 800400a:	f7fd f9ff 	bl	800140c <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 800400e:	486a      	ldr	r0, [pc, #424]	; (80041b8 <showPreparedActivitiesPanel+0x204>)
 8004010:	f7fd fcac 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004014:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	2305      	movs	r3, #5
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2314      	movs	r3, #20
 8004020:	2264      	movs	r2, #100	; 0x64
 8004022:	21d8      	movs	r1, #216	; 0xd8
 8004024:	200a      	movs	r0, #10
 8004026:	f7fd fc50 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 800402a:	4964      	ldr	r1, [pc, #400]	; (80041bc <showPreparedActivitiesPanel+0x208>)
 800402c:	4861      	ldr	r0, [pc, #388]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800402e:	f00e fab9 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004032:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	2300      	movs	r3, #0
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2300      	movs	r3, #0
 800403e:	22da      	movs	r2, #218	; 0xda
 8004040:	210d      	movs	r1, #13
 8004042:	485c      	ldr	r0, [pc, #368]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8004044:	f7fd feac 	bl	8001da0 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8004048:	4b5d      	ldr	r3, [pc, #372]	; (80041c0 <showPreparedActivitiesPanel+0x20c>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d029      	beq.n	80040a4 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004050:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	230a      	movs	r3, #10
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2328      	movs	r3, #40	; 0x28
 800405c:	2278      	movs	r2, #120	; 0x78
 800405e:	213c      	movs	r1, #60	; 0x3c
 8004060:	2064      	movs	r0, #100	; 0x64
 8004062:	f7fd fc32 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004066:	4957      	ldr	r1, [pc, #348]	; (80041c4 <showPreparedActivitiesPanel+0x210>)
 8004068:	4852      	ldr	r0, [pc, #328]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800406a:	f00e fa9b 	bl	80125a4 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800406e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	2300      	movs	r3, #0
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2300      	movs	r3, #0
 800407a:	223e      	movs	r2, #62	; 0x3e
 800407c:	2177      	movs	r1, #119	; 0x77
 800407e:	484d      	ldr	r0, [pc, #308]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8004080:	f7fd fe8e 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8004084:	4950      	ldr	r1, [pc, #320]	; (80041c8 <showPreparedActivitiesPanel+0x214>)
 8004086:	484b      	ldr	r0, [pc, #300]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8004088:	f00e fa8c 	bl	80125a4 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800408c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	2300      	movs	r3, #0
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2300      	movs	r3, #0
 8004098:	2250      	movs	r2, #80	; 0x50
 800409a:	2193      	movs	r1, #147	; 0x93
 800409c:	4845      	ldr	r0, [pc, #276]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800409e:	f7fd fe7f 	bl	8001da0 <EF_PutString>
 80040a2:	e028      	b.n	80040f6 <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80040a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	230a      	movs	r3, #10
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2328      	movs	r3, #40	; 0x28
 80040b0:	2278      	movs	r2, #120	; 0x78
 80040b2:	213c      	movs	r1, #60	; 0x3c
 80040b4:	2064      	movs	r0, #100	; 0x64
 80040b6:	f7fd fc08 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 80040ba:	4942      	ldr	r1, [pc, #264]	; (80041c4 <showPreparedActivitiesPanel+0x210>)
 80040bc:	483d      	ldr	r0, [pc, #244]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 80040be:	f00e fa71 	bl	80125a4 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80040c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	2300      	movs	r3, #0
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2300      	movs	r3, #0
 80040ce:	223e      	movs	r2, #62	; 0x3e
 80040d0:	2177      	movs	r1, #119	; 0x77
 80040d2:	4838      	ldr	r0, [pc, #224]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 80040d4:	f7fd fe64 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 80040d8:	493c      	ldr	r1, [pc, #240]	; (80041cc <showPreparedActivitiesPanel+0x218>)
 80040da:	4836      	ldr	r0, [pc, #216]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 80040dc:	f00e fa62 	bl	80125a4 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80040e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2300      	movs	r3, #0
 80040ec:	2250      	movs	r2, #80	; 0x50
 80040ee:	2193      	movs	r1, #147	; 0x93
 80040f0:	4830      	ldr	r0, [pc, #192]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 80040f2:	f7fd fe55 	bl	8001da0 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 80040f6:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <showPreparedActivitiesPanel+0x20c>)
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d029      	beq.n	8004152 <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80040fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	230a      	movs	r3, #10
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2328      	movs	r3, #40	; 0x28
 800410a:	2278      	movs	r2, #120	; 0x78
 800410c:	2178      	movs	r1, #120	; 0x78
 800410e:	2064      	movs	r0, #100	; 0x64
 8004110:	f7fd fbdb 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8004114:	492e      	ldr	r1, [pc, #184]	; (80041d0 <showPreparedActivitiesPanel+0x21c>)
 8004116:	4827      	ldr	r0, [pc, #156]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8004118:	f00e fa44 	bl	80125a4 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800411c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2300      	movs	r3, #0
 8004128:	227a      	movs	r2, #122	; 0x7a
 800412a:	2169      	movs	r1, #105	; 0x69
 800412c:	4821      	ldr	r0, [pc, #132]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800412e:	f7fd fe37 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8004132:	4925      	ldr	r1, [pc, #148]	; (80041c8 <showPreparedActivitiesPanel+0x214>)
 8004134:	481f      	ldr	r0, [pc, #124]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8004136:	f00e fa35 	bl	80125a4 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800413a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	2300      	movs	r3, #0
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2300      	movs	r3, #0
 8004146:	228c      	movs	r2, #140	; 0x8c
 8004148:	2193      	movs	r1, #147	; 0x93
 800414a:	481a      	ldr	r0, [pc, #104]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800414c:	f7fd fe28 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8004150:	e028      	b.n	80041a4 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004152:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	230a      	movs	r3, #10
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2328      	movs	r3, #40	; 0x28
 800415e:	2278      	movs	r2, #120	; 0x78
 8004160:	2178      	movs	r1, #120	; 0x78
 8004162:	2064      	movs	r0, #100	; 0x64
 8004164:	f7fd fbb1 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8004168:	4919      	ldr	r1, [pc, #100]	; (80041d0 <showPreparedActivitiesPanel+0x21c>)
 800416a:	4812      	ldr	r0, [pc, #72]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800416c:	f00e fa1a 	bl	80125a4 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004170:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	2300      	movs	r3, #0
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	2300      	movs	r3, #0
 800417c:	227a      	movs	r2, #122	; 0x7a
 800417e:	2169      	movs	r1, #105	; 0x69
 8004180:	480c      	ldr	r0, [pc, #48]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 8004182:	f7fd fe0d 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004186:	4911      	ldr	r1, [pc, #68]	; (80041cc <showPreparedActivitiesPanel+0x218>)
 8004188:	480a      	ldr	r0, [pc, #40]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 800418a:	f00e fa0b 	bl	80125a4 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800418e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	2300      	movs	r3, #0
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2300      	movs	r3, #0
 800419a:	228c      	movs	r2, #140	; 0x8c
 800419c:	2193      	movs	r1, #147	; 0x93
 800419e:	4805      	ldr	r0, [pc, #20]	; (80041b4 <showPreparedActivitiesPanel+0x200>)
 80041a0:	f7fd fdfe 	bl	8001da0 <EF_PutString>
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	08029de4 	.word	0x08029de4
 80041b0:	080164c4 	.word	0x080164c4
 80041b4:	200002c8 	.word	0x200002c8
 80041b8:	08027e6c 	.word	0x08027e6c
 80041bc:	080164bc 	.word	0x080164bc
 80041c0:	200002b8 	.word	0x200002b8
 80041c4:	080164d4 	.word	0x080164d4
 80041c8:	080164e0 	.word	0x080164e0
 80041cc:	080164e4 	.word	0x080164e4
 80041d0:	080164e8 	.word	0x080164e8

080041d4 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80041da:	f24c 6018 	movw	r0, #50712	; 0xc618
 80041de:	f7fd ffc9 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80041e2:	48c7      	ldr	r0, [pc, #796]	; (8004500 <showWSLedPanel+0x32c>)
 80041e4:	f7fd fbc2 	bl	800196c <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 80041e8:	49c6      	ldr	r1, [pc, #792]	; (8004504 <showWSLedPanel+0x330>)
 80041ea:	48c7      	ldr	r0, [pc, #796]	; (8004508 <showWSLedPanel+0x334>)
 80041ec:	f00e f9da 	bl	80125a4 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80041f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	2300      	movs	r3, #0
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	231f      	movs	r3, #31
 80041fc:	220a      	movs	r2, #10
 80041fe:	2146      	movs	r1, #70	; 0x46
 8004200:	48c1      	ldr	r0, [pc, #772]	; (8004508 <showWSLedPanel+0x334>)
 8004202:	f7fd fdcd 	bl	8001da0 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004206:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	2329      	movs	r3, #41	; 0x29
 800420e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004212:	2129      	movs	r1, #41	; 0x29
 8004214:	2000      	movs	r0, #0
 8004216:	f7fd f8f9 	bl	800140c <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800421a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	232b      	movs	r3, #43	; 0x2b
 8004222:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004226:	212b      	movs	r1, #43	; 0x2b
 8004228:	2000      	movs	r0, #0
 800422a:	f7fd f8ef 	bl	800140c <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 800422e:	4bb7      	ldr	r3, [pc, #732]	; (800450c <showWSLedPanel+0x338>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	49b6      	ldr	r1, [pc, #728]	; (8004510 <showWSLedPanel+0x33c>)
 8004236:	48b4      	ldr	r0, [pc, #720]	; (8004508 <showWSLedPanel+0x334>)
 8004238:	f00e f9b4 	bl	80125a4 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800423c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	2300      	movs	r3, #0
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2300      	movs	r3, #0
 8004248:	223c      	movs	r2, #60	; 0x3c
 800424a:	2114      	movs	r1, #20
 800424c:	48ae      	ldr	r0, [pc, #696]	; (8004508 <showWSLedPanel+0x334>)
 800424e:	f7fd fda7 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8004252:	49b0      	ldr	r1, [pc, #704]	; (8004514 <showWSLedPanel+0x340>)
 8004254:	48ac      	ldr	r0, [pc, #688]	; (8004508 <showWSLedPanel+0x334>)
 8004256:	f00e f9a5 	bl	80125a4 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800425a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	2300      	movs	r3, #0
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	2300      	movs	r3, #0
 8004266:	225a      	movs	r2, #90	; 0x5a
 8004268:	2114      	movs	r1, #20
 800426a:	48a7      	ldr	r0, [pc, #668]	; (8004508 <showWSLedPanel+0x334>)
 800426c:	f7fd fd98 	bl	8001da0 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8004270:	49a9      	ldr	r1, [pc, #676]	; (8004518 <showWSLedPanel+0x344>)
 8004272:	48a5      	ldr	r0, [pc, #660]	; (8004508 <showWSLedPanel+0x334>)
 8004274:	f00e f996 	bl	80125a4 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004278:	f24c 6318 	movw	r3, #50712	; 0xc618
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	2300      	movs	r3, #0
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2300      	movs	r3, #0
 8004284:	2278      	movs	r2, #120	; 0x78
 8004286:	2114      	movs	r1, #20
 8004288:	489f      	ldr	r0, [pc, #636]	; (8004508 <showWSLedPanel+0x334>)
 800428a:	f7fd fd89 	bl	8001da0 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 800428e:	48a3      	ldr	r0, [pc, #652]	; (800451c <showWSLedPanel+0x348>)
 8004290:	f7fd fb6c 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8004294:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	2305      	movs	r3, #5
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	2315      	movs	r3, #21
 80042a0:	221e      	movs	r2, #30
 80042a2:	2141      	movs	r1, #65	; 0x41
 80042a4:	20d9      	movs	r0, #217	; 0xd9
 80042a6:	f7fd fb10 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80042aa:	499d      	ldr	r1, [pc, #628]	; (8004520 <showWSLedPanel+0x34c>)
 80042ac:	4896      	ldr	r0, [pc, #600]	; (8004508 <showWSLedPanel+0x334>)
 80042ae:	f00e f979 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80042b2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	2300      	movs	r3, #0
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2300      	movs	r3, #0
 80042be:	2243      	movs	r2, #67	; 0x43
 80042c0:	21df      	movs	r1, #223	; 0xdf
 80042c2:	4891      	ldr	r0, [pc, #580]	; (8004508 <showWSLedPanel+0x334>)
 80042c4:	f7fd fd6c 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80042c8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	2305      	movs	r3, #5
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	2315      	movs	r3, #21
 80042d4:	221e      	movs	r2, #30
 80042d6:	2141      	movs	r1, #65	; 0x41
 80042d8:	20fc      	movs	r0, #252	; 0xfc
 80042da:	f7fd faf6 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 80042de:	4991      	ldr	r1, [pc, #580]	; (8004524 <showWSLedPanel+0x350>)
 80042e0:	4889      	ldr	r0, [pc, #548]	; (8004508 <showWSLedPanel+0x334>)
 80042e2:	f00e f95f 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80042e6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	2300      	movs	r3, #0
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	2243      	movs	r2, #67	; 0x43
 80042f4:	f240 1101 	movw	r1, #257	; 0x101
 80042f8:	4883      	ldr	r0, [pc, #524]	; (8004508 <showWSLedPanel+0x334>)
 80042fa:	f7fd fd51 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80042fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	2305      	movs	r3, #5
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	2315      	movs	r3, #21
 800430a:	221e      	movs	r2, #30
 800430c:	2141      	movs	r1, #65	; 0x41
 800430e:	f240 101f 	movw	r0, #287	; 0x11f
 8004312:	f7fd fada 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 8004316:	4984      	ldr	r1, [pc, #528]	; (8004528 <showWSLedPanel+0x354>)
 8004318:	487b      	ldr	r0, [pc, #492]	; (8004508 <showWSLedPanel+0x334>)
 800431a:	f00e f943 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800431e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	2300      	movs	r3, #0
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	2300      	movs	r3, #0
 800432a:	2243      	movs	r2, #67	; 0x43
 800432c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8004330:	4875      	ldr	r0, [pc, #468]	; (8004508 <showWSLedPanel+0x334>)
 8004332:	f7fd fd35 	bl	8001da0 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2305      	movs	r3, #5
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	2315      	movs	r3, #21
 8004342:	2228      	movs	r2, #40	; 0x28
 8004344:	215f      	movs	r1, #95	; 0x5f
 8004346:	2096      	movs	r0, #150	; 0x96
 8004348:	f7fd fabf 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 800434c:	4977      	ldr	r1, [pc, #476]	; (800452c <showWSLedPanel+0x358>)
 800434e:	486e      	ldr	r0, [pc, #440]	; (8004508 <showWSLedPanel+0x334>)
 8004350:	f00e f928 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	2300      	movs	r3, #0
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2300      	movs	r3, #0
 8004360:	2261      	movs	r2, #97	; 0x61
 8004362:	219b      	movs	r1, #155	; 0x9b
 8004364:	4868      	ldr	r0, [pc, #416]	; (8004508 <showWSLedPanel+0x334>)
 8004366:	f7fd fd1b 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800436a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	2305      	movs	r3, #5
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2315      	movs	r3, #21
 8004376:	2228      	movs	r2, #40	; 0x28
 8004378:	215f      	movs	r1, #95	; 0x5f
 800437a:	20ca      	movs	r0, #202	; 0xca
 800437c:	f7fd faa5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004380:	496b      	ldr	r1, [pc, #428]	; (8004530 <showWSLedPanel+0x35c>)
 8004382:	4861      	ldr	r0, [pc, #388]	; (8004508 <showWSLedPanel+0x334>)
 8004384:	f00e f90e 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	2300      	movs	r3, #0
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	2300      	movs	r3, #0
 8004394:	2261      	movs	r2, #97	; 0x61
 8004396:	21d2      	movs	r1, #210	; 0xd2
 8004398:	485b      	ldr	r0, [pc, #364]	; (8004508 <showWSLedPanel+0x334>)
 800439a:	f7fd fd01 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800439e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	2305      	movs	r3, #5
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	2315      	movs	r3, #21
 80043aa:	2228      	movs	r2, #40	; 0x28
 80043ac:	215f      	movs	r1, #95	; 0x5f
 80043ae:	20fe      	movs	r0, #254	; 0xfe
 80043b0:	f7fd fa8b 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80043b4:	495f      	ldr	r1, [pc, #380]	; (8004534 <showWSLedPanel+0x360>)
 80043b6:	4854      	ldr	r0, [pc, #336]	; (8004508 <showWSLedPanel+0x334>)
 80043b8:	f00e f8f4 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80043bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	2300      	movs	r3, #0
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	2300      	movs	r3, #0
 80043c8:	2261      	movs	r2, #97	; 0x61
 80043ca:	f44f 7183 	mov.w	r1, #262	; 0x106
 80043ce:	484e      	ldr	r0, [pc, #312]	; (8004508 <showWSLedPanel+0x334>)
 80043d0:	f7fd fce6 	bl	8001da0 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80043d4:	231f      	movs	r3, #31
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	2305      	movs	r3, #5
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	2315      	movs	r3, #21
 80043de:	2228      	movs	r2, #40	; 0x28
 80043e0:	217d      	movs	r1, #125	; 0x7d
 80043e2:	2096      	movs	r0, #150	; 0x96
 80043e4:	f7fd fa71 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 80043e8:	4950      	ldr	r1, [pc, #320]	; (800452c <showWSLedPanel+0x358>)
 80043ea:	4847      	ldr	r0, [pc, #284]	; (8004508 <showWSLedPanel+0x334>)
 80043ec:	f00e f8da 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80043f0:	231f      	movs	r3, #31
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	2300      	movs	r3, #0
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2300      	movs	r3, #0
 80043fa:	227f      	movs	r2, #127	; 0x7f
 80043fc:	219b      	movs	r1, #155	; 0x9b
 80043fe:	4842      	ldr	r0, [pc, #264]	; (8004508 <showWSLedPanel+0x334>)
 8004400:	f7fd fcce 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004404:	231f      	movs	r3, #31
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	2305      	movs	r3, #5
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2315      	movs	r3, #21
 800440e:	2228      	movs	r2, #40	; 0x28
 8004410:	217d      	movs	r1, #125	; 0x7d
 8004412:	20ca      	movs	r0, #202	; 0xca
 8004414:	f7fd fa59 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004418:	4945      	ldr	r1, [pc, #276]	; (8004530 <showWSLedPanel+0x35c>)
 800441a:	483b      	ldr	r0, [pc, #236]	; (8004508 <showWSLedPanel+0x334>)
 800441c:	f00e f8c2 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004420:	231f      	movs	r3, #31
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	2300      	movs	r3, #0
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	2300      	movs	r3, #0
 800442a:	227f      	movs	r2, #127	; 0x7f
 800442c:	21d2      	movs	r1, #210	; 0xd2
 800442e:	4836      	ldr	r0, [pc, #216]	; (8004508 <showWSLedPanel+0x334>)
 8004430:	f7fd fcb6 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004434:	231f      	movs	r3, #31
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	2305      	movs	r3, #5
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2315      	movs	r3, #21
 800443e:	2228      	movs	r2, #40	; 0x28
 8004440:	217d      	movs	r1, #125	; 0x7d
 8004442:	20fe      	movs	r0, #254	; 0xfe
 8004444:	f7fd fa41 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004448:	493a      	ldr	r1, [pc, #232]	; (8004534 <showWSLedPanel+0x360>)
 800444a:	482f      	ldr	r0, [pc, #188]	; (8004508 <showWSLedPanel+0x334>)
 800444c:	f00e f8aa 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8004450:	231f      	movs	r3, #31
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	2300      	movs	r3, #0
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	2300      	movs	r3, #0
 800445a:	227f      	movs	r2, #127	; 0x7f
 800445c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004460:	4829      	ldr	r0, [pc, #164]	; (8004508 <showWSLedPanel+0x334>)
 8004462:	f7fd fc9d 	bl	8001da0 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8004466:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	2305      	movs	r3, #5
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2315      	movs	r3, #21
 8004472:	2250      	movs	r2, #80	; 0x50
 8004474:	219c      	movs	r1, #156	; 0x9c
 8004476:	2014      	movs	r0, #20
 8004478:	f7fd fa27 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 800447c:	492e      	ldr	r1, [pc, #184]	; (8004538 <showWSLedPanel+0x364>)
 800447e:	4822      	ldr	r0, [pc, #136]	; (8004508 <showWSLedPanel+0x334>)
 8004480:	f00e f890 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8004484:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	2300      	movs	r3, #0
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2300      	movs	r3, #0
 8004490:	229e      	movs	r2, #158	; 0x9e
 8004492:	211c      	movs	r1, #28
 8004494:	481c      	ldr	r0, [pc, #112]	; (8004508 <showWSLedPanel+0x334>)
 8004496:	f7fd fc83 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800449a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	2305      	movs	r3, #5
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	2315      	movs	r3, #21
 80044a6:	2250      	movs	r2, #80	; 0x50
 80044a8:	219c      	movs	r1, #156	; 0x9c
 80044aa:	2078      	movs	r0, #120	; 0x78
 80044ac:	f7fd fa0d 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 80044b0:	4922      	ldr	r1, [pc, #136]	; (800453c <showWSLedPanel+0x368>)
 80044b2:	4815      	ldr	r0, [pc, #84]	; (8004508 <showWSLedPanel+0x334>)
 80044b4:	f00e f876 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80044b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	2300      	movs	r3, #0
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	2300      	movs	r3, #0
 80044c4:	229e      	movs	r2, #158	; 0x9e
 80044c6:	2187      	movs	r1, #135	; 0x87
 80044c8:	480f      	ldr	r0, [pc, #60]	; (8004508 <showWSLedPanel+0x334>)
 80044ca:	f7fd fc69 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80044ce:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	2305      	movs	r3, #5
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	2315      	movs	r3, #21
 80044da:	2250      	movs	r2, #80	; 0x50
 80044dc:	219c      	movs	r1, #156	; 0x9c
 80044de:	20dc      	movs	r0, #220	; 0xdc
 80044e0:	f7fd f9f3 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 80044e4:	4916      	ldr	r1, [pc, #88]	; (8004540 <showWSLedPanel+0x36c>)
 80044e6:	4808      	ldr	r0, [pc, #32]	; (8004508 <showWSLedPanel+0x334>)
 80044e8:	f00e f85c 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80044ec:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	2300      	movs	r3, #0
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	2300      	movs	r3, #0
 80044f8:	229e      	movs	r2, #158	; 0x9e
 80044fa:	21e9      	movs	r1, #233	; 0xe9
 80044fc:	e022      	b.n	8004544 <showWSLedPanel+0x370>
 80044fe:	bf00      	nop
 8004500:	08029de4 	.word	0x08029de4
 8004504:	080164f4 	.word	0x080164f4
 8004508:	200002c8 	.word	0x200002c8
 800450c:	20000034 	.word	0x20000034
 8004510:	08016500 	.word	0x08016500
 8004514:	08016510 	.word	0x08016510
 8004518:	08016518 	.word	0x08016518
 800451c:	08027e6c 	.word	0x08027e6c
 8004520:	08016494 	.word	0x08016494
 8004524:	0801649c 	.word	0x0801649c
 8004528:	08016520 	.word	0x08016520
 800452c:	08016524 	.word	0x08016524
 8004530:	08016528 	.word	0x08016528
 8004534:	0801652c 	.word	0x0801652c
 8004538:	08016530 	.word	0x08016530
 800453c:	080164e4 	.word	0x080164e4
 8004540:	08016538 	.word	0x08016538
 8004544:	482b      	ldr	r0, [pc, #172]	; (80045f4 <showWSLedPanel+0x420>)
 8004546:	f7fd fc2b 	bl	8001da0 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800454a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	2305      	movs	r3, #5
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2315      	movs	r3, #21
 8004556:	2250      	movs	r2, #80	; 0x50
 8004558:	21bb      	movs	r1, #187	; 0xbb
 800455a:	2046      	movs	r0, #70	; 0x46
 800455c:	f7fd f9b5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8004560:	4925      	ldr	r1, [pc, #148]	; (80045f8 <showWSLedPanel+0x424>)
 8004562:	4824      	ldr	r0, [pc, #144]	; (80045f4 <showWSLedPanel+0x420>)
 8004564:	f00e f81e 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004568:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	2300      	movs	r3, #0
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	2300      	movs	r3, #0
 8004574:	22bd      	movs	r2, #189	; 0xbd
 8004576:	214e      	movs	r1, #78	; 0x4e
 8004578:	481e      	ldr	r0, [pc, #120]	; (80045f4 <showWSLedPanel+0x420>)
 800457a:	f7fd fc11 	bl	8001da0 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800457e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	2305      	movs	r3, #5
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	2315      	movs	r3, #21
 800458a:	2250      	movs	r2, #80	; 0x50
 800458c:	21bb      	movs	r1, #187	; 0xbb
 800458e:	20aa      	movs	r0, #170	; 0xaa
 8004590:	f7fd f99b 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 8004594:	4919      	ldr	r1, [pc, #100]	; (80045fc <showWSLedPanel+0x428>)
 8004596:	4817      	ldr	r0, [pc, #92]	; (80045f4 <showWSLedPanel+0x420>)
 8004598:	f00e f804 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 800459c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	2300      	movs	r3, #0
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2300      	movs	r3, #0
 80045a8:	22bd      	movs	r2, #189	; 0xbd
 80045aa:	21b5      	movs	r1, #181	; 0xb5
 80045ac:	4811      	ldr	r0, [pc, #68]	; (80045f4 <showWSLedPanel+0x420>)
 80045ae:	f7fd fbf7 	bl	8001da0 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80045b2:	4813      	ldr	r0, [pc, #76]	; (8004600 <showWSLedPanel+0x42c>)
 80045b4:	f7fd f9da 	bl	800196c <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80045b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	2305      	movs	r3, #5
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	2314      	movs	r3, #20
 80045c4:	2264      	movs	r2, #100	; 0x64
 80045c6:	21d8      	movs	r1, #216	; 0xd8
 80045c8:	200a      	movs	r0, #10
 80045ca:	f7fd f97e 	bl	80018ca <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80045ce:	490d      	ldr	r1, [pc, #52]	; (8004604 <showWSLedPanel+0x430>)
 80045d0:	4808      	ldr	r0, [pc, #32]	; (80045f4 <showWSLedPanel+0x420>)
 80045d2:	f00d ffe7 	bl	80125a4 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80045d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	2300      	movs	r3, #0
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2300      	movs	r3, #0
 80045e2:	22da      	movs	r2, #218	; 0xda
 80045e4:	210d      	movs	r1, #13
 80045e6:	4803      	ldr	r0, [pc, #12]	; (80045f4 <showWSLedPanel+0x420>)
 80045e8:	f7fd fbda 	bl	8001da0 <EF_PutString>


}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	200002c8 	.word	0x200002c8
 80045f8:	08016540 	.word	0x08016540
 80045fc:	08016548 	.word	0x08016548
 8004600:	08027e6c 	.word	0x08027e6c
 8004604:	080164bc 	.word	0x080164bc

08004608 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b090      	sub	sp, #64	; 0x40
 800460c:	af02      	add	r7, sp, #8
 800460e:	4603      	mov	r3, r0
 8004610:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 8004642:	2300      	movs	r3, #0
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
 8004646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800464a:	2100      	movs	r1, #0
 800464c:	460a      	mov	r2, r1
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	460a      	mov	r2, r1
 8004652:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	f107 0320 	add.w	r3, r7, #32
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	f107 0318 	add.w	r3, r7, #24
 800466a:	2100      	movs	r1, #0
 800466c:	460a      	mov	r2, r1
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	460a      	mov	r2, r1
 8004672:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 8004674:	2300      	movs	r3, #0
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004682:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	2305      	movs	r3, #5
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2314      	movs	r3, #20
 800468e:	2214      	movs	r2, #20
 8004690:	2132      	movs	r1, #50	; 0x32
 8004692:	203c      	movs	r0, #60	; 0x3c
 8004694:	f7fd f89c 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004698:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	2305      	movs	r3, #5
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	2314      	movs	r3, #20
 80046a4:	2214      	movs	r2, #20
 80046a6:	2132      	movs	r1, #50	; 0x32
 80046a8:	205a      	movs	r0, #90	; 0x5a
 80046aa:	f7fd f891 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80046ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	2305      	movs	r3, #5
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	2314      	movs	r3, #20
 80046ba:	2214      	movs	r2, #20
 80046bc:	2132      	movs	r1, #50	; 0x32
 80046be:	2078      	movs	r0, #120	; 0x78
 80046c0:	f7fd f886 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80046c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	2305      	movs	r3, #5
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	2314      	movs	r3, #20
 80046d0:	2214      	movs	r2, #20
 80046d2:	2132      	movs	r1, #50	; 0x32
 80046d4:	2096      	movs	r0, #150	; 0x96
 80046d6:	f7fd f87b 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80046da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	2305      	movs	r3, #5
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	2314      	movs	r3, #20
 80046e6:	2214      	movs	r2, #20
 80046e8:	2132      	movs	r1, #50	; 0x32
 80046ea:	20b4      	movs	r0, #180	; 0xb4
 80046ec:	f7fd f870 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80046f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	2305      	movs	r3, #5
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	2314      	movs	r3, #20
 80046fc:	2214      	movs	r2, #20
 80046fe:	2132      	movs	r1, #50	; 0x32
 8004700:	20d2      	movs	r0, #210	; 0xd2
 8004702:	f7fd f865 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004706:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	2305      	movs	r3, #5
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2314      	movs	r3, #20
 8004712:	2214      	movs	r2, #20
 8004714:	2132      	movs	r1, #50	; 0x32
 8004716:	20f0      	movs	r0, #240	; 0xf0
 8004718:	f7fd f85a 	bl	80017d0 <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fee4 	bl	80054ec <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 ff4d 	bl	80055c6 <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 800472c:	48cc      	ldr	r0, [pc, #816]	; (8004a60 <drawschedulePanel+0x458>)
 800472e:	f7fd f91d 	bl	800196c <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 8004732:	49cc      	ldr	r1, [pc, #816]	; (8004a64 <drawschedulePanel+0x45c>)
 8004734:	48cc      	ldr	r0, [pc, #816]	; (8004a68 <drawschedulePanel+0x460>)
 8004736:	f00d ff35 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800473a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	2301      	movs	r3, #1
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	2300      	movs	r3, #0
 8004746:	224b      	movs	r2, #75	; 0x4b
 8004748:	213c      	movs	r1, #60	; 0x3c
 800474a:	48c7      	ldr	r0, [pc, #796]	; (8004a68 <drawschedulePanel+0x460>)
 800474c:	f7fd fb28 	bl	8001da0 <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004750:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	2305      	movs	r3, #5
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	2314      	movs	r3, #20
 800475c:	2214      	movs	r2, #20
 800475e:	21aa      	movs	r1, #170	; 0xaa
 8004760:	2015      	movs	r0, #21
 8004762:	f7fd f835 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004766:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	2305      	movs	r3, #5
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	2314      	movs	r3, #20
 8004772:	2214      	movs	r2, #20
 8004774:	21aa      	movs	r1, #170	; 0xaa
 8004776:	2035      	movs	r0, #53	; 0x35
 8004778:	f7fd f82a 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800477c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	2305      	movs	r3, #5
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	2314      	movs	r3, #20
 8004788:	2214      	movs	r2, #20
 800478a:	21aa      	movs	r1, #170	; 0xaa
 800478c:	2055      	movs	r0, #85	; 0x55
 800478e:	f7fd f81f 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004792:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	2305      	movs	r3, #5
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	2314      	movs	r3, #20
 800479e:	2214      	movs	r2, #20
 80047a0:	21aa      	movs	r1, #170	; 0xaa
 80047a2:	2075      	movs	r0, #117	; 0x75
 80047a4:	f7fd f814 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	2305      	movs	r3, #5
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2314      	movs	r3, #20
 80047b4:	2214      	movs	r2, #20
 80047b6:	21aa      	movs	r1, #170	; 0xaa
 80047b8:	2095      	movs	r0, #149	; 0x95
 80047ba:	f7fd f809 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	2305      	movs	r3, #5
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2314      	movs	r3, #20
 80047ca:	2214      	movs	r2, #20
 80047cc:	21aa      	movs	r1, #170	; 0xaa
 80047ce:	20b5      	movs	r0, #181	; 0xb5
 80047d0:	f7fc fffe 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	2305      	movs	r3, #5
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	2314      	movs	r3, #20
 80047e0:	2214      	movs	r2, #20
 80047e2:	21aa      	movs	r1, #170	; 0xaa
 80047e4:	20d5      	movs	r0, #213	; 0xd5
 80047e6:	f7fc fff3 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	2305      	movs	r3, #5
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2314      	movs	r3, #20
 80047f6:	2214      	movs	r2, #20
 80047f8:	21aa      	movs	r1, #170	; 0xaa
 80047fa:	20f5      	movs	r0, #245	; 0xf5
 80047fc:	f7fc ffe8 	bl	80017d0 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004800:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	2305      	movs	r3, #5
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	2314      	movs	r3, #20
 800480c:	2214      	movs	r2, #20
 800480e:	21aa      	movs	r1, #170	; 0xaa
 8004810:	f240 1015 	movw	r0, #277	; 0x115
 8004814:	f7fc ffdc 	bl	80017d0 <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004818:	4994      	ldr	r1, [pc, #592]	; (8004a6c <drawschedulePanel+0x464>)
 800481a:	4893      	ldr	r0, [pc, #588]	; (8004a68 <drawschedulePanel+0x460>)
 800481c:	f00d fec2 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004820:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	2301      	movs	r3, #1
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	2300      	movs	r3, #0
 800482c:	22c3      	movs	r2, #195	; 0xc3
 800482e:	2115      	movs	r1, #21
 8004830:	488d      	ldr	r0, [pc, #564]	; (8004a68 <drawschedulePanel+0x460>)
 8004832:	f7fd fab5 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004836:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	2305      	movs	r3, #5
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2314      	movs	r3, #20
 8004842:	2222      	movs	r2, #34	; 0x22
 8004844:	2165      	movs	r1, #101	; 0x65
 8004846:	20bb      	movs	r0, #187	; 0xbb
 8004848:	f7fd f83f 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 800484c:	4988      	ldr	r1, [pc, #544]	; (8004a70 <drawschedulePanel+0x468>)
 800484e:	4886      	ldr	r0, [pc, #536]	; (8004a68 <drawschedulePanel+0x460>)
 8004850:	f00d fea8 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004854:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004858:	9301      	str	r3, [sp, #4]
 800485a:	2300      	movs	r3, #0
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	2300      	movs	r3, #0
 8004860:	2268      	movs	r2, #104	; 0x68
 8004862:	21c1      	movs	r1, #193	; 0xc1
 8004864:	4880      	ldr	r0, [pc, #512]	; (8004a68 <drawschedulePanel+0x460>)
 8004866:	f7fd fa9b 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800486a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	2305      	movs	r3, #5
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	2314      	movs	r3, #20
 8004876:	2222      	movs	r2, #34	; 0x22
 8004878:	2165      	movs	r1, #101	; 0x65
 800487a:	20e9      	movs	r0, #233	; 0xe9
 800487c:	f7fd f825 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004880:	497c      	ldr	r1, [pc, #496]	; (8004a74 <drawschedulePanel+0x46c>)
 8004882:	4879      	ldr	r0, [pc, #484]	; (8004a68 <drawschedulePanel+0x460>)
 8004884:	f00d fe8e 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004888:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	2300      	movs	r3, #0
 8004894:	2268      	movs	r2, #104	; 0x68
 8004896:	21ec      	movs	r1, #236	; 0xec
 8004898:	4873      	ldr	r0, [pc, #460]	; (8004a68 <drawschedulePanel+0x460>)
 800489a:	f7fd fa81 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800489e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	2305      	movs	r3, #5
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	2314      	movs	r3, #20
 80048aa:	2222      	movs	r2, #34	; 0x22
 80048ac:	2165      	movs	r1, #101	; 0x65
 80048ae:	f240 1017 	movw	r0, #279	; 0x117
 80048b2:	f7fd f80a 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 80048b6:	4970      	ldr	r1, [pc, #448]	; (8004a78 <drawschedulePanel+0x470>)
 80048b8:	486b      	ldr	r0, [pc, #428]	; (8004a68 <drawschedulePanel+0x460>)
 80048ba:	f00d fe73 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80048be:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	2300      	movs	r3, #0
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	2300      	movs	r3, #0
 80048ca:	2268      	movs	r2, #104	; 0x68
 80048cc:	f44f 718c 	mov.w	r1, #280	; 0x118
 80048d0:	4865      	ldr	r0, [pc, #404]	; (8004a68 <drawschedulePanel+0x460>)
 80048d2:	f7fd fa65 	bl	8001da0 <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80048d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	2305      	movs	r3, #5
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	2314      	movs	r3, #20
 80048e2:	2222      	movs	r2, #34	; 0x22
 80048e4:	2188      	movs	r1, #136	; 0x88
 80048e6:	20bb      	movs	r0, #187	; 0xbb
 80048e8:	f7fc ffef 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 80048ec:	4960      	ldr	r1, [pc, #384]	; (8004a70 <drawschedulePanel+0x468>)
 80048ee:	485e      	ldr	r0, [pc, #376]	; (8004a68 <drawschedulePanel+0x460>)
 80048f0:	f00d fe58 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80048f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	2300      	movs	r3, #0
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	2300      	movs	r3, #0
 8004900:	228b      	movs	r2, #139	; 0x8b
 8004902:	21c1      	movs	r1, #193	; 0xc1
 8004904:	4858      	ldr	r0, [pc, #352]	; (8004a68 <drawschedulePanel+0x460>)
 8004906:	f7fd fa4b 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800490a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	2305      	movs	r3, #5
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2314      	movs	r3, #20
 8004916:	2222      	movs	r2, #34	; 0x22
 8004918:	2188      	movs	r1, #136	; 0x88
 800491a:	20e9      	movs	r0, #233	; 0xe9
 800491c:	f7fc ffd5 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 8004920:	4954      	ldr	r1, [pc, #336]	; (8004a74 <drawschedulePanel+0x46c>)
 8004922:	4851      	ldr	r0, [pc, #324]	; (8004a68 <drawschedulePanel+0x460>)
 8004924:	f00d fe3e 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004928:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	2300      	movs	r3, #0
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	2300      	movs	r3, #0
 8004934:	228b      	movs	r2, #139	; 0x8b
 8004936:	21ec      	movs	r1, #236	; 0xec
 8004938:	484b      	ldr	r0, [pc, #300]	; (8004a68 <drawschedulePanel+0x460>)
 800493a:	f7fd fa31 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800493e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	2305      	movs	r3, #5
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2314      	movs	r3, #20
 800494a:	2222      	movs	r2, #34	; 0x22
 800494c:	2188      	movs	r1, #136	; 0x88
 800494e:	f240 1017 	movw	r0, #279	; 0x117
 8004952:	f7fc ffba 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004956:	4948      	ldr	r1, [pc, #288]	; (8004a78 <drawschedulePanel+0x470>)
 8004958:	4843      	ldr	r0, [pc, #268]	; (8004a68 <drawschedulePanel+0x460>)
 800495a:	f00d fe23 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800495e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	2300      	movs	r3, #0
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2300      	movs	r3, #0
 800496a:	228b      	movs	r2, #139	; 0x8b
 800496c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004970:	483d      	ldr	r0, [pc, #244]	; (8004a68 <drawschedulePanel+0x460>)
 8004972:	f7fd fa15 	bl	8001da0 <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004976:	4841      	ldr	r0, [pc, #260]	; (8004a7c <drawschedulePanel+0x474>)
 8004978:	f7fc fff8 	bl	800196c <EF_SetFont>
	  if(NrOfschedule == 1)
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	2b01      	cmp	r3, #1
 8004980:	f040 80db 	bne.w	8004b3a <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 8004984:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004988:	4619      	mov	r1, r3
 800498a:	2001      	movs	r0, #1
 800498c:	f7fe fc13 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 8004990:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8004994:	4619      	mov	r1, r3
 8004996:	2001      	movs	r0, #1
 8004998:	f7fe fc31 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 800499c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80049a0:	4619      	mov	r1, r3
 80049a2:	2001      	movs	r0, #1
 80049a4:	f7fe fc4f 	bl	8003246 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 80049a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049ac:	4619      	mov	r1, r3
 80049ae:	2001      	movs	r0, #1
 80049b0:	f7fe fc6d 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80049b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049b8:	4619      	mov	r1, r3
 80049ba:	2001      	movs	r0, #1
 80049bc:	f7fe faaa 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80049c0:	f107 031c 	add.w	r3, r7, #28
 80049c4:	4619      	mov	r1, r3
 80049c6:	2001      	movs	r0, #1
 80049c8:	f7fe fb20 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 80049cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049d0:	2b17      	cmp	r3, #23
 80049d2:	d902      	bls.n	80049da <drawschedulePanel+0x3d2>
 80049d4:	2317      	movs	r3, #23
 80049d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 80049da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80049de:	2b3b      	cmp	r3, #59	; 0x3b
 80049e0:	d902      	bls.n	80049e8 <drawschedulePanel+0x3e0>
 80049e2:	233b      	movs	r3, #59	; 0x3b
 80049e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 80049e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80049ec:	2b17      	cmp	r3, #23
 80049ee:	d902      	bls.n	80049f6 <drawschedulePanel+0x3ee>
 80049f0:	2317      	movs	r3, #23
 80049f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 80049f6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049fa:	2b3b      	cmp	r3, #59	; 0x3b
 80049fc:	d902      	bls.n	8004a04 <drawschedulePanel+0x3fc>
 80049fe:	233b      	movs	r3, #59	; 0x3b
 8004a00:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a08:	2b09      	cmp	r3, #9
 8004a0a:	d80d      	bhi.n	8004a28 <drawschedulePanel+0x420>
 8004a0c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a10:	2b09      	cmp	r3, #9
 8004a12:	d809      	bhi.n	8004a28 <drawschedulePanel+0x420>
 8004a14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a1e:	4918      	ldr	r1, [pc, #96]	; (8004a80 <drawschedulePanel+0x478>)
 8004a20:	4811      	ldr	r0, [pc, #68]	; (8004a68 <drawschedulePanel+0x460>)
 8004a22:	f00d fdbf 	bl	80125a4 <siprintf>
 8004a26:	e03a      	b.n	8004a9e <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004a28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a2c:	2b09      	cmp	r3, #9
 8004a2e:	d809      	bhi.n	8004a44 <drawschedulePanel+0x43c>
 8004a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a34:	461a      	mov	r2, r3
 8004a36:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a3a:	4912      	ldr	r1, [pc, #72]	; (8004a84 <drawschedulePanel+0x47c>)
 8004a3c:	480a      	ldr	r0, [pc, #40]	; (8004a68 <drawschedulePanel+0x460>)
 8004a3e:	f00d fdb1 	bl	80125a4 <siprintf>
 8004a42:	e02c      	b.n	8004a9e <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004a44:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a48:	2b09      	cmp	r3, #9
 8004a4a:	d81f      	bhi.n	8004a8c <drawschedulePanel+0x484>
 8004a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a50:	461a      	mov	r2, r3
 8004a52:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a56:	490c      	ldr	r1, [pc, #48]	; (8004a88 <drawschedulePanel+0x480>)
 8004a58:	4803      	ldr	r0, [pc, #12]	; (8004a68 <drawschedulePanel+0x460>)
 8004a5a:	f00d fda3 	bl	80125a4 <siprintf>
 8004a5e:	e01e      	b.n	8004a9e <drawschedulePanel+0x496>
 8004a60:	08027e6c 	.word	0x08027e6c
 8004a64:	08016550 	.word	0x08016550
 8004a68:	200002c8 	.word	0x200002c8
 8004a6c:	08016568 	.word	0x08016568
 8004a70:	0801658c 	.word	0x0801658c
 8004a74:	08016590 	.word	0x08016590
 8004a78:	08016594 	.word	0x08016594
 8004a7c:	08029de4 	.word	0x08029de4
 8004a80:	0801659c 	.word	0x0801659c
 8004a84:	080165ac 	.word	0x080165ac
 8004a88:	080165bc 	.word	0x080165bc
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a90:	461a      	mov	r2, r3
 8004a92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004a96:	498f      	ldr	r1, [pc, #572]	; (8004cd4 <drawschedulePanel+0x6cc>)
 8004a98:	488f      	ldr	r0, [pc, #572]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004a9a:	f00d fd83 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004a9e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2264      	movs	r2, #100	; 0x64
 8004aac:	210a      	movs	r1, #10
 8004aae:	488a      	ldr	r0, [pc, #552]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004ab0:	f7fd f976 	bl	8001da0 <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004ab4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ab8:	2b09      	cmp	r3, #9
 8004aba:	d80d      	bhi.n	8004ad8 <drawschedulePanel+0x4d0>
 8004abc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ac0:	2b09      	cmp	r3, #9
 8004ac2:	d809      	bhi.n	8004ad8 <drawschedulePanel+0x4d0>
 8004ac4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004ace:	4983      	ldr	r1, [pc, #524]	; (8004cdc <drawschedulePanel+0x6d4>)
 8004ad0:	4881      	ldr	r0, [pc, #516]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004ad2:	f00d fd67 	bl	80125a4 <siprintf>
 8004ad6:	e024      	b.n	8004b22 <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 8004ad8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004adc:	2b09      	cmp	r3, #9
 8004ade:	d809      	bhi.n	8004af4 <drawschedulePanel+0x4ec>
 8004ae0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004aea:	497d      	ldr	r1, [pc, #500]	; (8004ce0 <drawschedulePanel+0x6d8>)
 8004aec:	487a      	ldr	r0, [pc, #488]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004aee:	f00d fd59 	bl	80125a4 <siprintf>
 8004af2:	e016      	b.n	8004b22 <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004af4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004af8:	2b09      	cmp	r3, #9
 8004afa:	d809      	bhi.n	8004b10 <drawschedulePanel+0x508>
 8004afc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004b00:	461a      	mov	r2, r3
 8004b02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b06:	4977      	ldr	r1, [pc, #476]	; (8004ce4 <drawschedulePanel+0x6dc>)
 8004b08:	4873      	ldr	r0, [pc, #460]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004b0a:	f00d fd4b 	bl	80125a4 <siprintf>
 8004b0e:	e008      	b.n	8004b22 <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 8004b10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004b14:	461a      	mov	r2, r3
 8004b16:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b1a:	4973      	ldr	r1, [pc, #460]	; (8004ce8 <drawschedulePanel+0x6e0>)
 8004b1c:	486e      	ldr	r0, [pc, #440]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004b1e:	f00d fd41 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004b22:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	2301      	movs	r3, #1
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2287      	movs	r2, #135	; 0x87
 8004b30:	210a      	movs	r1, #10
 8004b32:	4869      	ldr	r0, [pc, #420]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004b34:	f7fd f934 	bl	8001da0 <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004b38:	e0c7      	b.n	8004cca <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	f040 80c4 	bne.w	8004cca <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 8004b42:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004b46:	4619      	mov	r1, r3
 8004b48:	2002      	movs	r0, #2
 8004b4a:	f7fe fb34 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 8004b4e:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8004b52:	4619      	mov	r1, r3
 8004b54:	2002      	movs	r0, #2
 8004b56:	f7fe fb52 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004b5a:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004b5e:	4619      	mov	r1, r3
 8004b60:	2002      	movs	r0, #2
 8004b62:	f7fe fb70 	bl	8003246 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 8004b66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	2002      	movs	r0, #2
 8004b6e:	f7fe fb8e 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	4619      	mov	r1, r3
 8004b78:	2002      	movs	r0, #2
 8004b7a:	f7fe f9cb 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 8004b7e:	f107 0308 	add.w	r3, r7, #8
 8004b82:	4619      	mov	r1, r3
 8004b84:	2002      	movs	r0, #2
 8004b86:	f7fe fa41 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 8004b8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b8e:	2b17      	cmp	r3, #23
 8004b90:	d902      	bls.n	8004b98 <drawschedulePanel+0x590>
 8004b92:	2317      	movs	r3, #23
 8004b94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 8004b98:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004b9c:	2b3b      	cmp	r3, #59	; 0x3b
 8004b9e:	d902      	bls.n	8004ba6 <drawschedulePanel+0x59e>
 8004ba0:	233b      	movs	r3, #59	; 0x3b
 8004ba2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 8004ba6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004baa:	2b17      	cmp	r3, #23
 8004bac:	d902      	bls.n	8004bb4 <drawschedulePanel+0x5ac>
 8004bae:	2317      	movs	r3, #23
 8004bb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 8004bb4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004bb8:	2b3b      	cmp	r3, #59	; 0x3b
 8004bba:	d902      	bls.n	8004bc2 <drawschedulePanel+0x5ba>
 8004bbc:	233b      	movs	r3, #59	; 0x3b
 8004bbe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 8004bc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bc6:	2b09      	cmp	r3, #9
 8004bc8:	d80d      	bhi.n	8004be6 <drawschedulePanel+0x5de>
 8004bca:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004bce:	2b09      	cmp	r3, #9
 8004bd0:	d809      	bhi.n	8004be6 <drawschedulePanel+0x5de>
 8004bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004bdc:	4943      	ldr	r1, [pc, #268]	; (8004cec <drawschedulePanel+0x6e4>)
 8004bde:	483e      	ldr	r0, [pc, #248]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004be0:	f00d fce0 	bl	80125a4 <siprintf>
 8004be4:	e024      	b.n	8004c30 <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 8004be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bea:	2b09      	cmp	r3, #9
 8004bec:	d809      	bhi.n	8004c02 <drawschedulePanel+0x5fa>
 8004bee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004bf8:	493d      	ldr	r1, [pc, #244]	; (8004cf0 <drawschedulePanel+0x6e8>)
 8004bfa:	4837      	ldr	r0, [pc, #220]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004bfc:	f00d fcd2 	bl	80125a4 <siprintf>
 8004c00:	e016      	b.n	8004c30 <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 8004c02:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004c06:	2b09      	cmp	r3, #9
 8004c08:	d809      	bhi.n	8004c1e <drawschedulePanel+0x616>
 8004c0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004c14:	4937      	ldr	r1, [pc, #220]	; (8004cf4 <drawschedulePanel+0x6ec>)
 8004c16:	4830      	ldr	r0, [pc, #192]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004c18:	f00d fcc4 	bl	80125a4 <siprintf>
 8004c1c:	e008      	b.n	8004c30 <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004c1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c22:	461a      	mov	r2, r3
 8004c24:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004c28:	4933      	ldr	r1, [pc, #204]	; (8004cf8 <drawschedulePanel+0x6f0>)
 8004c2a:	482b      	ldr	r0, [pc, #172]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004c2c:	f00d fcba 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004c30:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	2301      	movs	r3, #1
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2264      	movs	r2, #100	; 0x64
 8004c3e:	210a      	movs	r1, #10
 8004c40:	4825      	ldr	r0, [pc, #148]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004c42:	f7fd f8ad 	bl	8001da0 <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 8004c46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c4a:	2b09      	cmp	r3, #9
 8004c4c:	d80d      	bhi.n	8004c6a <drawschedulePanel+0x662>
 8004c4e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c52:	2b09      	cmp	r3, #9
 8004c54:	d809      	bhi.n	8004c6a <drawschedulePanel+0x662>
 8004c56:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c60:	4926      	ldr	r1, [pc, #152]	; (8004cfc <drawschedulePanel+0x6f4>)
 8004c62:	481d      	ldr	r0, [pc, #116]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004c64:	f00d fc9e 	bl	80125a4 <siprintf>
 8004c68:	e024      	b.n	8004cb4 <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004c6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c6e:	2b09      	cmp	r3, #9
 8004c70:	d809      	bhi.n	8004c86 <drawschedulePanel+0x67e>
 8004c72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c76:	461a      	mov	r2, r3
 8004c78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c7c:	4920      	ldr	r1, [pc, #128]	; (8004d00 <drawschedulePanel+0x6f8>)
 8004c7e:	4816      	ldr	r0, [pc, #88]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004c80:	f00d fc90 	bl	80125a4 <siprintf>
 8004c84:	e016      	b.n	8004cb4 <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 8004c86:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c8a:	2b09      	cmp	r3, #9
 8004c8c:	d809      	bhi.n	8004ca2 <drawschedulePanel+0x69a>
 8004c8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004c92:	461a      	mov	r2, r3
 8004c94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004c98:	491a      	ldr	r1, [pc, #104]	; (8004d04 <drawschedulePanel+0x6fc>)
 8004c9a:	480f      	ldr	r0, [pc, #60]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004c9c:	f00d fc82 	bl	80125a4 <siprintf>
 8004ca0:	e008      	b.n	8004cb4 <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 8004ca2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004cac:	4916      	ldr	r1, [pc, #88]	; (8004d08 <drawschedulePanel+0x700>)
 8004cae:	480a      	ldr	r0, [pc, #40]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004cb0:	f00d fc78 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004cb4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	2301      	movs	r3, #1
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	2287      	movs	r2, #135	; 0x87
 8004cc2:	210c      	movs	r1, #12
 8004cc4:	4804      	ldr	r0, [pc, #16]	; (8004cd8 <drawschedulePanel+0x6d0>)
 8004cc6:	f7fd f86b 	bl	8001da0 <EF_PutString>
}
 8004cca:	bf00      	nop
 8004ccc:	3738      	adds	r7, #56	; 0x38
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	080165cc 	.word	0x080165cc
 8004cd8:	200002c8 	.word	0x200002c8
 8004cdc:	080165dc 	.word	0x080165dc
 8004ce0:	080165ec 	.word	0x080165ec
 8004ce4:	080165fc 	.word	0x080165fc
 8004ce8:	0801660c 	.word	0x0801660c
 8004cec:	0801661c 	.word	0x0801661c
 8004cf0:	0801662c 	.word	0x0801662c
 8004cf4:	0801663c 	.word	0x0801663c
 8004cf8:	0801664c 	.word	0x0801664c
 8004cfc:	0801665c 	.word	0x0801665c
 8004d00:	0801666c 	.word	0x0801666c
 8004d04:	0801667c 	.word	0x0801667c
 8004d08:	0801668c 	.word	0x0801668c

08004d0c <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004d12:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004d16:	f7fd fa2d 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004d1a:	483f      	ldr	r0, [pc, #252]	; (8004e18 <showSchedule1Panel+0x10c>)
 8004d1c:	f7fc fe26 	bl	800196c <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004d20:	493e      	ldr	r1, [pc, #248]	; (8004e1c <showSchedule1Panel+0x110>)
 8004d22:	483f      	ldr	r0, [pc, #252]	; (8004e20 <showSchedule1Panel+0x114>)
 8004d24:	f00d fc3e 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004d28:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004d36:	220a      	movs	r2, #10
 8004d38:	212a      	movs	r1, #42	; 0x2a
 8004d3a:	4839      	ldr	r0, [pc, #228]	; (8004e20 <showSchedule1Panel+0x114>)
 8004d3c:	f7fd f830 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004d40:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	2329      	movs	r3, #41	; 0x29
 8004d48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d4c:	2129      	movs	r1, #41	; 0x29
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f7fc fb5c 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004d54:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	232b      	movs	r3, #43	; 0x2b
 8004d5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d60:	212b      	movs	r1, #43	; 0x2b
 8004d62:	2000      	movs	r0, #0
 8004d64:	f7fc fb52 	bl	800140c <GFX_DrawLine>

	  drawschedulePanel(1);
 8004d68:	2001      	movs	r0, #1
 8004d6a:	f7ff fc4d 	bl	8004608 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004d6e:	482d      	ldr	r0, [pc, #180]	; (8004e24 <showSchedule1Panel+0x118>)
 8004d70:	f7fc fdfc 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004d74:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	2305      	movs	r3, #5
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2314      	movs	r3, #20
 8004d80:	225f      	movs	r2, #95	; 0x5f
 8004d82:	21d8      	movs	r1, #216	; 0xd8
 8004d84:	20dc      	movs	r0, #220	; 0xdc
 8004d86:	f7fc fda0 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004d8a:	4927      	ldr	r1, [pc, #156]	; (8004e28 <showSchedule1Panel+0x11c>)
 8004d8c:	4824      	ldr	r0, [pc, #144]	; (8004e20 <showSchedule1Panel+0x114>)
 8004d8e:	f00d fc09 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004d92:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	22da      	movs	r2, #218	; 0xda
 8004da0:	21e6      	movs	r1, #230	; 0xe6
 8004da2:	481f      	ldr	r0, [pc, #124]	; (8004e20 <showSchedule1Panel+0x114>)
 8004da4:	f7fc fffc 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004da8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	2305      	movs	r3, #5
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	2314      	movs	r3, #20
 8004db4:	225a      	movs	r2, #90	; 0x5a
 8004db6:	21d8      	movs	r1, #216	; 0xd8
 8004db8:	2078      	movs	r0, #120	; 0x78
 8004dba:	f7fc fd86 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004dbe:	491b      	ldr	r1, [pc, #108]	; (8004e2c <showSchedule1Panel+0x120>)
 8004dc0:	4817      	ldr	r0, [pc, #92]	; (8004e20 <showSchedule1Panel+0x114>)
 8004dc2:	f00d fbef 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004dc6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004dca:	9301      	str	r3, [sp, #4]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	22da      	movs	r2, #218	; 0xda
 8004dd4:	217e      	movs	r1, #126	; 0x7e
 8004dd6:	4812      	ldr	r0, [pc, #72]	; (8004e20 <showSchedule1Panel+0x114>)
 8004dd8:	f7fc ffe2 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ddc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	2305      	movs	r3, #5
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	2314      	movs	r3, #20
 8004de8:	2264      	movs	r2, #100	; 0x64
 8004dea:	21d8      	movs	r1, #216	; 0xd8
 8004dec:	200a      	movs	r0, #10
 8004dee:	f7fc fd6c 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004df2:	490f      	ldr	r1, [pc, #60]	; (8004e30 <showSchedule1Panel+0x124>)
 8004df4:	480a      	ldr	r0, [pc, #40]	; (8004e20 <showSchedule1Panel+0x114>)
 8004df6:	f00d fbd5 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004dfa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	2300      	movs	r3, #0
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	22da      	movs	r2, #218	; 0xda
 8004e08:	210d      	movs	r1, #13
 8004e0a:	4805      	ldr	r0, [pc, #20]	; (8004e20 <showSchedule1Panel+0x114>)
 8004e0c:	f7fc ffc8 	bl	8001da0 <EF_PutString>
}
 8004e10:	bf00      	nop
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	08029de4 	.word	0x08029de4
 8004e1c:	0801669c 	.word	0x0801669c
 8004e20:	200002c8 	.word	0x200002c8
 8004e24:	08027e6c 	.word	0x08027e6c
 8004e28:	080166ac 	.word	0x080166ac
 8004e2c:	080166b8 	.word	0x080166b8
 8004e30:	080166c0 	.word	0x080166c0

08004e34 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004e3a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004e3e:	f7fd f999 	bl	8002174 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004e42:	4832      	ldr	r0, [pc, #200]	; (8004f0c <showSchedule2Panel+0xd8>)
 8004e44:	f7fc fd92 	bl	800196c <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004e48:	4931      	ldr	r1, [pc, #196]	; (8004f10 <showSchedule2Panel+0xdc>)
 8004e4a:	4832      	ldr	r0, [pc, #200]	; (8004f14 <showSchedule2Panel+0xe0>)
 8004e4c:	f00d fbaa 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004e50:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004e54:	9301      	str	r3, [sp, #4]
 8004e56:	2300      	movs	r3, #0
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e5e:	220a      	movs	r2, #10
 8004e60:	212a      	movs	r1, #42	; 0x2a
 8004e62:	482c      	ldr	r0, [pc, #176]	; (8004f14 <showSchedule2Panel+0xe0>)
 8004e64:	f7fc ff9c 	bl	8001da0 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004e68:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	2329      	movs	r3, #41	; 0x29
 8004e70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e74:	2129      	movs	r1, #41	; 0x29
 8004e76:	2000      	movs	r0, #0
 8004e78:	f7fc fac8 	bl	800140c <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004e7c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	232b      	movs	r3, #43	; 0x2b
 8004e84:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e88:	212b      	movs	r1, #43	; 0x2b
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f7fc fabe 	bl	800140c <GFX_DrawLine>

	  drawschedulePanel(2);
 8004e90:	2002      	movs	r0, #2
 8004e92:	f7ff fbb9 	bl	8004608 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004e96:	4820      	ldr	r0, [pc, #128]	; (8004f18 <showSchedule2Panel+0xe4>)
 8004e98:	f7fc fd68 	bl	800196c <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004e9c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	2305      	movs	r3, #5
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2314      	movs	r3, #20
 8004ea8:	225a      	movs	r2, #90	; 0x5a
 8004eaa:	21d8      	movs	r1, #216	; 0xd8
 8004eac:	2078      	movs	r0, #120	; 0x78
 8004eae:	f7fc fd0c 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004eb2:	491a      	ldr	r1, [pc, #104]	; (8004f1c <showSchedule2Panel+0xe8>)
 8004eb4:	4817      	ldr	r0, [pc, #92]	; (8004f14 <showSchedule2Panel+0xe0>)
 8004eb6:	f00d fb75 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004eba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	22da      	movs	r2, #218	; 0xda
 8004ec8:	217e      	movs	r1, #126	; 0x7e
 8004eca:	4812      	ldr	r0, [pc, #72]	; (8004f14 <showSchedule2Panel+0xe0>)
 8004ecc:	f7fc ff68 	bl	8001da0 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ed0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	2305      	movs	r3, #5
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2314      	movs	r3, #20
 8004edc:	2264      	movs	r2, #100	; 0x64
 8004ede:	21d8      	movs	r1, #216	; 0xd8
 8004ee0:	200a      	movs	r0, #10
 8004ee2:	f7fc fcf2 	bl	80018ca <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004ee6:	490e      	ldr	r1, [pc, #56]	; (8004f20 <showSchedule2Panel+0xec>)
 8004ee8:	480a      	ldr	r0, [pc, #40]	; (8004f14 <showSchedule2Panel+0xe0>)
 8004eea:	f00d fb5b 	bl	80125a4 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004eee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	22da      	movs	r2, #218	; 0xda
 8004efc:	210d      	movs	r1, #13
 8004efe:	4805      	ldr	r0, [pc, #20]	; (8004f14 <showSchedule2Panel+0xe0>)
 8004f00:	f7fc ff4e 	bl	8001da0 <EF_PutString>
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	08029de4 	.word	0x08029de4
 8004f10:	080166cc 	.word	0x080166cc
 8004f14:	200002c8 	.word	0x200002c8
 8004f18:	08027e6c 	.word	0x08027e6c
 8004f1c:	080166b8 	.word	0x080166b8
 8004f20:	080166c0 	.word	0x080166c0

08004f24 <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8004f2a:	f7fd fdaf 	bl	8002a8c <DS3231_GetHour>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004f32:	f7fd fdb7 	bl	8002aa4 <DS3231_GetMinute>
 8004f36:	4603      	mov	r3, r0
 8004f38:	71bb      	strb	r3, [r7, #6]

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004f3a:	482f      	ldr	r0, [pc, #188]	; (8004ff8 <ChangeHourOnScreen+0xd4>)
 8004f3c:	f7fc fd16 	bl	800196c <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004f40:	4b2e      	ldr	r3, [pc, #184]	; (8004ffc <ChangeHourOnScreen+0xd8>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	79fa      	ldrb	r2, [r7, #7]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d021      	beq.n	8004f8e <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004f4a:	4b2d      	ldr	r3, [pc, #180]	; (8005000 <ChangeHourOnScreen+0xdc>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d11a      	bne.n	8004f88 <ChangeHourOnScreen+0x64>
		  {
			  if(CHour < 10)
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	2b09      	cmp	r3, #9
 8004f56:	d806      	bhi.n	8004f66 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4929      	ldr	r1, [pc, #164]	; (8005004 <ChangeHourOnScreen+0xe0>)
 8004f5e:	482a      	ldr	r0, [pc, #168]	; (8005008 <ChangeHourOnScreen+0xe4>)
 8004f60:	f00d fb20 	bl	80125a4 <siprintf>
 8004f64:	e005      	b.n	8004f72 <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4928      	ldr	r1, [pc, #160]	; (800500c <ChangeHourOnScreen+0xe8>)
 8004f6c:	4826      	ldr	r0, [pc, #152]	; (8005008 <ChangeHourOnScreen+0xe4>)
 8004f6e:	f00d fb19 	bl	80125a4 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004f72:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	2301      	movs	r3, #1
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2232      	movs	r2, #50	; 0x32
 8004f80:	2161      	movs	r1, #97	; 0x61
 8004f82:	4821      	ldr	r0, [pc, #132]	; (8005008 <ChangeHourOnScreen+0xe4>)
 8004f84:	f7fc ff0c 	bl	8001da0 <EF_PutString>
		  }
		  OldHours = CHour;
 8004f88:	4a1c      	ldr	r2, [pc, #112]	; (8004ffc <ChangeHourOnScreen+0xd8>)
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	7013      	strb	r3, [r2, #0]
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <ChangeHourOnScreen+0xec>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	79ba      	ldrb	r2, [r7, #6]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d02b      	beq.n	8004ff0 <ChangeHourOnScreen+0xcc>
	  {
		  uint8_t  CDayOfWeek = DS3231_GetDayOfWeek();
 8004f98:	f7fd fd6c 	bl	8002a74 <DS3231_GetDayOfWeek>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	717b      	strb	r3, [r7, #5]
		makeScheduleActivity(CHour, CMinute, CDayOfWeek); // Check if changed hour and minute are set in schedules
 8004fa0:	797a      	ldrb	r2, [r7, #5]
 8004fa2:	79b9      	ldrb	r1, [r7, #6]
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fb90 	bl	80056cc <makeScheduleActivity>

		  if(State == MENUTFT_PARAMETERS)
 8004fac:	4b14      	ldr	r3, [pc, #80]	; (8005000 <ChangeHourOnScreen+0xdc>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d11a      	bne.n	8004fea <ChangeHourOnScreen+0xc6>
		  {
			  if(CMinute < 10)
 8004fb4:	79bb      	ldrb	r3, [r7, #6]
 8004fb6:	2b09      	cmp	r3, #9
 8004fb8:	d806      	bhi.n	8004fc8 <ChangeHourOnScreen+0xa4>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8004fba:	79bb      	ldrb	r3, [r7, #6]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4915      	ldr	r1, [pc, #84]	; (8005014 <ChangeHourOnScreen+0xf0>)
 8004fc0:	4811      	ldr	r0, [pc, #68]	; (8005008 <ChangeHourOnScreen+0xe4>)
 8004fc2:	f00d faef 	bl	80125a4 <siprintf>
 8004fc6:	e005      	b.n	8004fd4 <ChangeHourOnScreen+0xb0>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8004fc8:	79bb      	ldrb	r3, [r7, #6]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4912      	ldr	r1, [pc, #72]	; (8005018 <ChangeHourOnScreen+0xf4>)
 8004fce:	480e      	ldr	r0, [pc, #56]	; (8005008 <ChangeHourOnScreen+0xe4>)
 8004fd0:	f00d fae8 	bl	80125a4 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004fd4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	2301      	movs	r3, #1
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2232      	movs	r2, #50	; 0x32
 8004fe2:	2196      	movs	r1, #150	; 0x96
 8004fe4:	4808      	ldr	r0, [pc, #32]	; (8005008 <ChangeHourOnScreen+0xe4>)
 8004fe6:	f7fc fedb 	bl	8001da0 <EF_PutString>
		  }
		  OldMinutes = CMinute;
 8004fea:	4a09      	ldr	r2, [pc, #36]	; (8005010 <ChangeHourOnScreen+0xec>)
 8004fec:	79bb      	ldrb	r3, [r7, #6]
 8004fee:	7013      	strb	r3, [r2, #0]
	  }

}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	08029de4 	.word	0x08029de4
 8004ffc:	20000250 	.word	0x20000250
 8005000:	20000298 	.word	0x20000298
 8005004:	080166dc 	.word	0x080166dc
 8005008:	200002c8 	.word	0x200002c8
 800500c:	080166e4 	.word	0x080166e4
 8005010:	20000251 	.word	0x20000251
 8005014:	080166e8 	.word	0x080166e8
 8005018:	080166f0 	.word	0x080166f0

0800501c <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8005030:	f7fd ff00 	bl	8002e34 <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8005034:	f7fd ff36 	bl	8002ea4 <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8005038:	e005      	b.n	8005046 <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 800503a:	2018      	movs	r0, #24
 800503c:	f004 fae2 	bl	8009604 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8005040:	2019      	movs	r0, #25
 8005042:	f004 fadf 	bl	8009604 <SendComand>
}
 8005046:	bf00      	nop
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af02      	add	r7, sp, #8
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d12e      	bne.n	80050c2 <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8005064:	f7fd fee6 	bl	8002e34 <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 8005068:	481b      	ldr	r0, [pc, #108]	; (80050d8 <predefinedActivityKarmienie+0x88>)
 800506a:	f7fc fc7f 	bl	800196c <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800506e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	230a      	movs	r3, #10
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	2328      	movs	r3, #40	; 0x28
 800507a:	2278      	movs	r2, #120	; 0x78
 800507c:	213c      	movs	r1, #60	; 0x3c
 800507e:	2064      	movs	r0, #100	; 0x64
 8005080:	f7fc fc23 	bl	80018ca <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8005084:	4915      	ldr	r1, [pc, #84]	; (80050dc <predefinedActivityKarmienie+0x8c>)
 8005086:	4816      	ldr	r0, [pc, #88]	; (80050e0 <predefinedActivityKarmienie+0x90>)
 8005088:	f00d fa8c 	bl	80125a4 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800508c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	2300      	movs	r3, #0
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	2300      	movs	r3, #0
 8005098:	223e      	movs	r2, #62	; 0x3e
 800509a:	2177      	movs	r1, #119	; 0x77
 800509c:	4810      	ldr	r0, [pc, #64]	; (80050e0 <predefinedActivityKarmienie+0x90>)
 800509e:	f7fc fe7f 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 80050a2:	4910      	ldr	r1, [pc, #64]	; (80050e4 <predefinedActivityKarmienie+0x94>)
 80050a4:	480e      	ldr	r0, [pc, #56]	; (80050e0 <predefinedActivityKarmienie+0x90>)
 80050a6:	f00d fa7d 	bl	80125a4 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	2250      	movs	r2, #80	; 0x50
 80050b8:	2193      	movs	r1, #147	; 0x93
 80050ba:	4809      	ldr	r0, [pc, #36]	; (80050e0 <predefinedActivityKarmienie+0x90>)
 80050bc:	f7fc fe70 	bl	8001da0 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 80050c0:	e005      	b.n	80050ce <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 80050c2:	2018      	movs	r0, #24
 80050c4:	f004 fa9e 	bl	8009604 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 80050c8:	4807      	ldr	r0, [pc, #28]	; (80050e8 <predefinedActivityKarmienie+0x98>)
 80050ca:	f00a fe53 	bl	800fd74 <HAL_TIM_Base_Start_IT>
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	08027e6c 	.word	0x08027e6c
 80050dc:	080164d4 	.word	0x080164d4
 80050e0:	200002c8 	.word	0x200002c8
 80050e4:	080164e4 	.word	0x080164e4
 80050e8:	20000998 	.word	0x20000998

080050ec <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 80050f2:	487d      	ldr	r0, [pc, #500]	; (80052e8 <drawCurrentStateOfSwitches+0x1fc>)
 80050f4:	f7fc fc3a 	bl	800196c <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 80050f8:	4b7c      	ldr	r3, [pc, #496]	; (80052ec <drawCurrentStateOfSwitches+0x200>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01c      	beq.n	800513a <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005100:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	2305      	movs	r3, #5
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	2315      	movs	r3, #21
 800510c:	2221      	movs	r2, #33	; 0x21
 800510e:	2141      	movs	r1, #65	; 0x41
 8005110:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005114:	f7fc fbd9 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005118:	4975      	ldr	r1, [pc, #468]	; (80052f0 <drawCurrentStateOfSwitches+0x204>)
 800511a:	4876      	ldr	r0, [pc, #472]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 800511c:	f00d fa42 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005120:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	2300      	movs	r3, #0
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	2300      	movs	r3, #0
 800512c:	2243      	movs	r2, #67	; 0x43
 800512e:	f240 1111 	movw	r1, #273	; 0x111
 8005132:	4870      	ldr	r0, [pc, #448]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 8005134:	f7fc fe34 	bl	8001da0 <EF_PutString>
 8005138:	e01b      	b.n	8005172 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800513a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	2305      	movs	r3, #5
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	2315      	movs	r3, #21
 8005146:	2221      	movs	r2, #33	; 0x21
 8005148:	2141      	movs	r1, #65	; 0x41
 800514a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800514e:	f7fc fbbc 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005152:	4969      	ldr	r1, [pc, #420]	; (80052f8 <drawCurrentStateOfSwitches+0x20c>)
 8005154:	4867      	ldr	r0, [pc, #412]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 8005156:	f00d fa25 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800515a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	2300      	movs	r3, #0
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2300      	movs	r3, #0
 8005166:	2243      	movs	r2, #67	; 0x43
 8005168:	f240 1111 	movw	r1, #273	; 0x111
 800516c:	4861      	ldr	r0, [pc, #388]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 800516e:	f7fc fe17 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8005172:	4b5e      	ldr	r3, [pc, #376]	; (80052ec <drawCurrentStateOfSwitches+0x200>)
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d01c      	beq.n	80051b4 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800517a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	2305      	movs	r3, #5
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	2315      	movs	r3, #21
 8005186:	2221      	movs	r2, #33	; 0x21
 8005188:	215f      	movs	r1, #95	; 0x5f
 800518a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800518e:	f7fc fb9c 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005192:	4957      	ldr	r1, [pc, #348]	; (80052f0 <drawCurrentStateOfSwitches+0x204>)
 8005194:	4857      	ldr	r0, [pc, #348]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 8005196:	f00d fa05 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800519a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	2300      	movs	r3, #0
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	2300      	movs	r3, #0
 80051a6:	2261      	movs	r2, #97	; 0x61
 80051a8:	f240 1111 	movw	r1, #273	; 0x111
 80051ac:	4851      	ldr	r0, [pc, #324]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 80051ae:	f7fc fdf7 	bl	8001da0 <EF_PutString>
 80051b2:	e01b      	b.n	80051ec <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80051b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	2305      	movs	r3, #5
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	2315      	movs	r3, #21
 80051c0:	2221      	movs	r2, #33	; 0x21
 80051c2:	215f      	movs	r1, #95	; 0x5f
 80051c4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80051c8:	f7fc fb7f 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80051cc:	494a      	ldr	r1, [pc, #296]	; (80052f8 <drawCurrentStateOfSwitches+0x20c>)
 80051ce:	4849      	ldr	r0, [pc, #292]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 80051d0:	f00d f9e8 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	2300      	movs	r3, #0
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	2300      	movs	r3, #0
 80051e0:	2261      	movs	r2, #97	; 0x61
 80051e2:	f240 1111 	movw	r1, #273	; 0x111
 80051e6:	4843      	ldr	r0, [pc, #268]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 80051e8:	f7fc fdda 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 80051ec:	4b3f      	ldr	r3, [pc, #252]	; (80052ec <drawCurrentStateOfSwitches+0x200>)
 80051ee:	789b      	ldrb	r3, [r3, #2]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01c      	beq.n	800522e <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80051f4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	2305      	movs	r3, #5
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	2315      	movs	r3, #21
 8005200:	2221      	movs	r2, #33	; 0x21
 8005202:	217d      	movs	r1, #125	; 0x7d
 8005204:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005208:	f7fc fb5f 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800520c:	4938      	ldr	r1, [pc, #224]	; (80052f0 <drawCurrentStateOfSwitches+0x204>)
 800520e:	4839      	ldr	r0, [pc, #228]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 8005210:	f00d f9c8 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005214:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	2300      	movs	r3, #0
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	2300      	movs	r3, #0
 8005220:	227f      	movs	r2, #127	; 0x7f
 8005222:	f240 1111 	movw	r1, #273	; 0x111
 8005226:	4833      	ldr	r0, [pc, #204]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 8005228:	f7fc fdba 	bl	8001da0 <EF_PutString>
 800522c:	e01b      	b.n	8005266 <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800522e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	2305      	movs	r3, #5
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	2315      	movs	r3, #21
 800523a:	2221      	movs	r2, #33	; 0x21
 800523c:	217d      	movs	r1, #125	; 0x7d
 800523e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005242:	f7fc fb42 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005246:	492c      	ldr	r1, [pc, #176]	; (80052f8 <drawCurrentStateOfSwitches+0x20c>)
 8005248:	482a      	ldr	r0, [pc, #168]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 800524a:	f00d f9ab 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800524e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	2300      	movs	r3, #0
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	2300      	movs	r3, #0
 800525a:	227f      	movs	r2, #127	; 0x7f
 800525c:	f240 1111 	movw	r1, #273	; 0x111
 8005260:	4824      	ldr	r0, [pc, #144]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 8005262:	f7fc fd9d 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8005266:	4b21      	ldr	r3, [pc, #132]	; (80052ec <drawCurrentStateOfSwitches+0x200>)
 8005268:	78db      	ldrb	r3, [r3, #3]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01c      	beq.n	80052a8 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800526e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	2305      	movs	r3, #5
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	2315      	movs	r3, #21
 800527a:	2221      	movs	r2, #33	; 0x21
 800527c:	219b      	movs	r1, #155	; 0x9b
 800527e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005282:	f7fc fb22 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005286:	491a      	ldr	r1, [pc, #104]	; (80052f0 <drawCurrentStateOfSwitches+0x204>)
 8005288:	481a      	ldr	r0, [pc, #104]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 800528a:	f00d f98b 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800528e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	2300      	movs	r3, #0
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	2300      	movs	r3, #0
 800529a:	229d      	movs	r2, #157	; 0x9d
 800529c:	f240 1111 	movw	r1, #273	; 0x111
 80052a0:	4814      	ldr	r0, [pc, #80]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 80052a2:	f7fc fd7d 	bl	8001da0 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80052a6:	e01b      	b.n	80052e0 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80052a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	2305      	movs	r3, #5
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	2315      	movs	r3, #21
 80052b4:	2221      	movs	r2, #33	; 0x21
 80052b6:	219b      	movs	r1, #155	; 0x9b
 80052b8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80052bc:	f7fc fb05 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80052c0:	490d      	ldr	r1, [pc, #52]	; (80052f8 <drawCurrentStateOfSwitches+0x20c>)
 80052c2:	480c      	ldr	r0, [pc, #48]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 80052c4:	f00d f96e 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80052c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	2300      	movs	r3, #0
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	229d      	movs	r2, #157	; 0x9d
 80052d6:	f240 1111 	movw	r1, #273	; 0x111
 80052da:	4806      	ldr	r0, [pc, #24]	; (80052f4 <drawCurrentStateOfSwitches+0x208>)
 80052dc:	f7fc fd60 	bl	8001da0 <EF_PutString>
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	08027e6c 	.word	0x08027e6c
 80052ec:	200002b0 	.word	0x200002b0
 80052f0:	080164e0 	.word	0x080164e0
 80052f4:	200002c8 	.word	0x200002c8
 80052f8:	080164e4 	.word	0x080164e4

080052fc <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8005302:	4875      	ldr	r0, [pc, #468]	; (80054d8 <drawCurrentStateOfLights+0x1dc>)
 8005304:	f7fc fb32 	bl	800196c <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8005308:	4b74      	ldr	r3, [pc, #464]	; (80054dc <drawCurrentStateOfLights+0x1e0>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01a      	beq.n	8005346 <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005310:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	2305      	movs	r3, #5
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	2315      	movs	r3, #21
 800531c:	2221      	movs	r2, #33	; 0x21
 800531e:	2141      	movs	r1, #65	; 0x41
 8005320:	20c8      	movs	r0, #200	; 0xc8
 8005322:	f7fc fad2 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005326:	496e      	ldr	r1, [pc, #440]	; (80054e0 <drawCurrentStateOfLights+0x1e4>)
 8005328:	486e      	ldr	r0, [pc, #440]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 800532a:	f00d f93b 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800532e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	2300      	movs	r3, #0
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	2300      	movs	r3, #0
 800533a:	2243      	movs	r2, #67	; 0x43
 800533c:	21cb      	movs	r1, #203	; 0xcb
 800533e:	4869      	ldr	r0, [pc, #420]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005340:	f7fc fd2e 	bl	8001da0 <EF_PutString>
 8005344:	e019      	b.n	800537a <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005346:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	2305      	movs	r3, #5
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	2315      	movs	r3, #21
 8005352:	2221      	movs	r2, #33	; 0x21
 8005354:	2141      	movs	r1, #65	; 0x41
 8005356:	20c8      	movs	r0, #200	; 0xc8
 8005358:	f7fc fab7 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800535c:	4962      	ldr	r1, [pc, #392]	; (80054e8 <drawCurrentStateOfLights+0x1ec>)
 800535e:	4861      	ldr	r0, [pc, #388]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005360:	f00d f920 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005364:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	2300      	movs	r3, #0
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	2300      	movs	r3, #0
 8005370:	2243      	movs	r2, #67	; 0x43
 8005372:	21cb      	movs	r1, #203	; 0xcb
 8005374:	485b      	ldr	r0, [pc, #364]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005376:	f7fc fd13 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 800537a:	4b58      	ldr	r3, [pc, #352]	; (80054dc <drawCurrentStateOfLights+0x1e0>)
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01a      	beq.n	80053b8 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005382:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	2305      	movs	r3, #5
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	2315      	movs	r3, #21
 800538e:	2221      	movs	r2, #33	; 0x21
 8005390:	215f      	movs	r1, #95	; 0x5f
 8005392:	20c8      	movs	r0, #200	; 0xc8
 8005394:	f7fc fa99 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005398:	4951      	ldr	r1, [pc, #324]	; (80054e0 <drawCurrentStateOfLights+0x1e4>)
 800539a:	4852      	ldr	r0, [pc, #328]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 800539c:	f00d f902 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80053a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	2261      	movs	r2, #97	; 0x61
 80053ae:	21cb      	movs	r1, #203	; 0xcb
 80053b0:	484c      	ldr	r0, [pc, #304]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 80053b2:	f7fc fcf5 	bl	8001da0 <EF_PutString>
 80053b6:	e019      	b.n	80053ec <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80053b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	2305      	movs	r3, #5
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	2315      	movs	r3, #21
 80053c4:	2221      	movs	r2, #33	; 0x21
 80053c6:	215f      	movs	r1, #95	; 0x5f
 80053c8:	20c8      	movs	r0, #200	; 0xc8
 80053ca:	f7fc fa7e 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80053ce:	4946      	ldr	r1, [pc, #280]	; (80054e8 <drawCurrentStateOfLights+0x1ec>)
 80053d0:	4844      	ldr	r0, [pc, #272]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 80053d2:	f00d f8e7 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80053d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	2300      	movs	r3, #0
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	2300      	movs	r3, #0
 80053e2:	2261      	movs	r2, #97	; 0x61
 80053e4:	21cb      	movs	r1, #203	; 0xcb
 80053e6:	483f      	ldr	r0, [pc, #252]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 80053e8:	f7fc fcda 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 80053ec:	4b3b      	ldr	r3, [pc, #236]	; (80054dc <drawCurrentStateOfLights+0x1e0>)
 80053ee:	789b      	ldrb	r3, [r3, #2]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01a      	beq.n	800542a <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80053f4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	2305      	movs	r3, #5
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	2315      	movs	r3, #21
 8005400:	2221      	movs	r2, #33	; 0x21
 8005402:	217d      	movs	r1, #125	; 0x7d
 8005404:	20c8      	movs	r0, #200	; 0xc8
 8005406:	f7fc fa60 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800540a:	4935      	ldr	r1, [pc, #212]	; (80054e0 <drawCurrentStateOfLights+0x1e4>)
 800540c:	4835      	ldr	r0, [pc, #212]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 800540e:	f00d f8c9 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005412:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005416:	9301      	str	r3, [sp, #4]
 8005418:	2300      	movs	r3, #0
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	2300      	movs	r3, #0
 800541e:	227f      	movs	r2, #127	; 0x7f
 8005420:	21cb      	movs	r1, #203	; 0xcb
 8005422:	4830      	ldr	r0, [pc, #192]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005424:	f7fc fcbc 	bl	8001da0 <EF_PutString>
 8005428:	e019      	b.n	800545e <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800542a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800542e:	9301      	str	r3, [sp, #4]
 8005430:	2305      	movs	r3, #5
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	2315      	movs	r3, #21
 8005436:	2221      	movs	r2, #33	; 0x21
 8005438:	217d      	movs	r1, #125	; 0x7d
 800543a:	20c8      	movs	r0, #200	; 0xc8
 800543c:	f7fc fa45 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005440:	4929      	ldr	r1, [pc, #164]	; (80054e8 <drawCurrentStateOfLights+0x1ec>)
 8005442:	4828      	ldr	r0, [pc, #160]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005444:	f00d f8ae 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005448:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800544c:	9301      	str	r3, [sp, #4]
 800544e:	2300      	movs	r3, #0
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	2300      	movs	r3, #0
 8005454:	227f      	movs	r2, #127	; 0x7f
 8005456:	21cb      	movs	r1, #203	; 0xcb
 8005458:	4822      	ldr	r0, [pc, #136]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 800545a:	f7fc fca1 	bl	8001da0 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 800545e:	4b1f      	ldr	r3, [pc, #124]	; (80054dc <drawCurrentStateOfLights+0x1e0>)
 8005460:	78db      	ldrb	r3, [r3, #3]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01a      	beq.n	800549c <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005466:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	2305      	movs	r3, #5
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	2315      	movs	r3, #21
 8005472:	2221      	movs	r2, #33	; 0x21
 8005474:	219b      	movs	r1, #155	; 0x9b
 8005476:	20c8      	movs	r0, #200	; 0xc8
 8005478:	f7fc fa27 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800547c:	4918      	ldr	r1, [pc, #96]	; (80054e0 <drawCurrentStateOfLights+0x1e4>)
 800547e:	4819      	ldr	r0, [pc, #100]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005480:	f00d f890 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005484:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	2300      	movs	r3, #0
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	2300      	movs	r3, #0
 8005490:	229d      	movs	r2, #157	; 0x9d
 8005492:	21cb      	movs	r1, #203	; 0xcb
 8005494:	4813      	ldr	r0, [pc, #76]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 8005496:	f7fc fc83 	bl	8001da0 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800549a:	e019      	b.n	80054d0 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800549c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	2305      	movs	r3, #5
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	2315      	movs	r3, #21
 80054a8:	2221      	movs	r2, #33	; 0x21
 80054aa:	219b      	movs	r1, #155	; 0x9b
 80054ac:	20c8      	movs	r0, #200	; 0xc8
 80054ae:	f7fc fa0c 	bl	80018ca <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80054b2:	490d      	ldr	r1, [pc, #52]	; (80054e8 <drawCurrentStateOfLights+0x1ec>)
 80054b4:	480b      	ldr	r0, [pc, #44]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 80054b6:	f00d f875 	bl	80125a4 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80054ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	2300      	movs	r3, #0
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	2300      	movs	r3, #0
 80054c6:	229d      	movs	r2, #157	; 0x9d
 80054c8:	21cb      	movs	r1, #203	; 0xcb
 80054ca:	4806      	ldr	r0, [pc, #24]	; (80054e4 <drawCurrentStateOfLights+0x1e8>)
 80054cc:	f7fc fc68 	bl	8001da0 <EF_PutString>
}
 80054d0:	bf00      	nop
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	08027e6c 	.word	0x08027e6c
 80054dc:	200002b4 	.word	0x200002b4
 80054e0:	080164e0 	.word	0x080164e0
 80054e4:	200002c8 	.word	0x200002c8
 80054e8:	080164e4 	.word	0x080164e4

080054ec <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	f107 030c 	add.w	r3, r7, #12
 80054fe:	2100      	movs	r1, #0
 8005500:	460a      	mov	r2, r1
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	460a      	mov	r2, r1
 8005506:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 8005508:	f107 0208 	add.w	r2, r7, #8
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	4611      	mov	r1, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f7fd fcff 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 8005516:	7a3b      	ldrb	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <restoreTFTScheduleDayOfWeek+0x3a>
 800551c:	2101      	movs	r1, #1
 800551e:	2001      	movs	r0, #1
 8005520:	f001 fca0 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8005524:	e003      	b.n	800552e <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 8005526:	2100      	movs	r1, #0
 8005528:	2001      	movs	r0, #1
 800552a:	f001 fc9b 	bl	8006e64 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 800552e:	7a7b      	ldrb	r3, [r7, #9]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d004      	beq.n	800553e <restoreTFTScheduleDayOfWeek+0x52>
 8005534:	2101      	movs	r1, #1
 8005536:	2002      	movs	r0, #2
 8005538:	f001 fc94 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 800553c:	e003      	b.n	8005546 <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 800553e:	2100      	movs	r1, #0
 8005540:	2002      	movs	r0, #2
 8005542:	f001 fc8f 	bl	8006e64 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 8005546:	7abb      	ldrb	r3, [r7, #10]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <restoreTFTScheduleDayOfWeek+0x6a>
 800554c:	2101      	movs	r1, #1
 800554e:	2003      	movs	r0, #3
 8005550:	f001 fc88 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8005554:	e003      	b.n	800555e <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 8005556:	2100      	movs	r1, #0
 8005558:	2003      	movs	r0, #3
 800555a:	f001 fc83 	bl	8006e64 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 800555e:	7afb      	ldrb	r3, [r7, #11]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <restoreTFTScheduleDayOfWeek+0x82>
 8005564:	2101      	movs	r1, #1
 8005566:	2004      	movs	r0, #4
 8005568:	f001 fc7c 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 800556c:	e003      	b.n	8005576 <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 800556e:	2100      	movs	r1, #0
 8005570:	2004      	movs	r0, #4
 8005572:	f001 fc77 	bl	8006e64 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 8005576:	7b3b      	ldrb	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <restoreTFTScheduleDayOfWeek+0x9a>
 800557c:	2101      	movs	r1, #1
 800557e:	2005      	movs	r0, #5
 8005580:	f001 fc70 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8005584:	e003      	b.n	800558e <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 8005586:	2100      	movs	r1, #0
 8005588:	2005      	movs	r0, #5
 800558a:	f001 fc6b 	bl	8006e64 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 800558e:	7b7b      	ldrb	r3, [r7, #13]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <restoreTFTScheduleDayOfWeek+0xb2>
 8005594:	2101      	movs	r1, #1
 8005596:	2006      	movs	r0, #6
 8005598:	f001 fc64 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 800559c:	e003      	b.n	80055a6 <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 800559e:	2100      	movs	r1, #0
 80055a0:	2006      	movs	r0, #6
 80055a2:	f001 fc5f 	bl	8006e64 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 80055a6:	7bbb      	ldrb	r3, [r7, #14]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <restoreTFTScheduleDayOfWeek+0xca>
 80055ac:	2101      	movs	r1, #1
 80055ae:	2007      	movs	r0, #7
 80055b0:	f001 fc58 	bl	8006e64 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 80055b4:	e003      	b.n	80055be <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 80055b6:	2100      	movs	r1, #0
 80055b8:	2007      	movs	r0, #7
 80055ba:	f001 fc53 	bl	8006e64 <changeTFTScheduleDayOfWeek>
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b086      	sub	sp, #24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	4603      	mov	r3, r0
 80055ce:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	f107 0310 	add.w	r3, r7, #16
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 80055de:	f107 020c 	add.w	r2, r7, #12
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	4611      	mov	r1, r2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fd fd10 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 80055ec:	7b3b      	ldrb	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d004      	beq.n	80055fc <restoreTFTScheduleRelayLights+0x36>
 80055f2:	2101      	movs	r1, #1
 80055f4:	2001      	movs	r0, #1
 80055f6:	f001 fd12 	bl	800701e <changeTFTScheduleRelayLights>
 80055fa:	e003      	b.n	8005604 <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 80055fc:	2100      	movs	r1, #0
 80055fe:	2001      	movs	r0, #1
 8005600:	f001 fd0d 	bl	800701e <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 8005604:	7b7b      	ldrb	r3, [r7, #13]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <restoreTFTScheduleRelayLights+0x4e>
 800560a:	2101      	movs	r1, #1
 800560c:	2002      	movs	r0, #2
 800560e:	f001 fd06 	bl	800701e <changeTFTScheduleRelayLights>
 8005612:	e003      	b.n	800561c <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 8005614:	2100      	movs	r1, #0
 8005616:	2002      	movs	r0, #2
 8005618:	f001 fd01 	bl	800701e <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <restoreTFTScheduleRelayLights+0x66>
 8005622:	2101      	movs	r1, #1
 8005624:	2003      	movs	r0, #3
 8005626:	f001 fcfa 	bl	800701e <changeTFTScheduleRelayLights>
 800562a:	e003      	b.n	8005634 <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 800562c:	2100      	movs	r1, #0
 800562e:	2003      	movs	r0, #3
 8005630:	f001 fcf5 	bl	800701e <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d004      	beq.n	8005644 <restoreTFTScheduleRelayLights+0x7e>
 800563a:	2101      	movs	r1, #1
 800563c:	2004      	movs	r0, #4
 800563e:	f001 fcee 	bl	800701e <changeTFTScheduleRelayLights>
 8005642:	e003      	b.n	800564c <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 8005644:	2100      	movs	r1, #0
 8005646:	2004      	movs	r0, #4
 8005648:	f001 fce9 	bl	800701e <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 800564c:	7c3b      	ldrb	r3, [r7, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <restoreTFTScheduleRelayLights+0x96>
 8005652:	2101      	movs	r1, #1
 8005654:	2005      	movs	r0, #5
 8005656:	f001 fce2 	bl	800701e <changeTFTScheduleRelayLights>
 800565a:	e003      	b.n	8005664 <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 800565c:	2100      	movs	r1, #0
 800565e:	2005      	movs	r0, #5
 8005660:	f001 fcdd 	bl	800701e <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 8005664:	7c7b      	ldrb	r3, [r7, #17]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d004      	beq.n	8005674 <restoreTFTScheduleRelayLights+0xae>
 800566a:	2101      	movs	r1, #1
 800566c:	2006      	movs	r0, #6
 800566e:	f001 fcd6 	bl	800701e <changeTFTScheduleRelayLights>
 8005672:	e003      	b.n	800567c <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 8005674:	2100      	movs	r1, #0
 8005676:	2006      	movs	r0, #6
 8005678:	f001 fcd1 	bl	800701e <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 800567c:	7cbb      	ldrb	r3, [r7, #18]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d004      	beq.n	800568c <restoreTFTScheduleRelayLights+0xc6>
 8005682:	2101      	movs	r1, #1
 8005684:	2007      	movs	r0, #7
 8005686:	f001 fcca 	bl	800701e <changeTFTScheduleRelayLights>
 800568a:	e003      	b.n	8005694 <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 800568c:	2100      	movs	r1, #0
 800568e:	2007      	movs	r0, #7
 8005690:	f001 fcc5 	bl	800701e <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 8005694:	7cfb      	ldrb	r3, [r7, #19]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <restoreTFTScheduleRelayLights+0xde>
 800569a:	2101      	movs	r1, #1
 800569c:	2008      	movs	r0, #8
 800569e:	f001 fcbe 	bl	800701e <changeTFTScheduleRelayLights>
 80056a2:	e003      	b.n	80056ac <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 80056a4:	2100      	movs	r1, #0
 80056a6:	2008      	movs	r0, #8
 80056a8:	f001 fcb9 	bl	800701e <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 80056ac:	7d3b      	ldrb	r3, [r7, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d004      	beq.n	80056bc <restoreTFTScheduleRelayLights+0xf6>
 80056b2:	2101      	movs	r1, #1
 80056b4:	2009      	movs	r0, #9
 80056b6:	f001 fcb2 	bl	800701e <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 80056ba:	e003      	b.n	80056c4 <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 80056bc:	2100      	movs	r1, #0
 80056be:	2009      	movs	r0, #9
 80056c0:	f001 fcad 	bl	800701e <changeTFTScheduleRelayLights>
}
 80056c4:	bf00      	nop
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <makeScheduleActivity>:


void makeScheduleActivity(uint8_t CurrentHour, uint8_t CurrentMinute, uint8_t CurrentDayOfWeek)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	71fb      	strb	r3, [r7, #7]
 80056d6:	460b      	mov	r3, r1
 80056d8:	71bb      	strb	r3, [r7, #6]
 80056da:	4613      	mov	r3, r2
 80056dc:	717b      	strb	r3, [r7, #5]

	for(uint8_t i = 1 ; i <= NumberOfSchedules ; i++ ) // 'i' is a number of checking schedule
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
 80056e2:	e056      	b.n	8005792 <makeScheduleActivity+0xc6>
	{
		uint8_t ScheduleDayOfWeekTab[7]= {0}; // Tab to handle information about day of the week to which the schedule applies
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	f107 0314 	add.w	r3, r7, #20
 80056ec:	2100      	movs	r1, #0
 80056ee:	460a      	mov	r2, r1
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	460a      	mov	r2, r1
 80056f4:	709a      	strb	r2, [r3, #2]
		EEPROM_ScheduleDayInWeekRead(i, ScheduleDayOfWeekTab); // Get day of week from 'i' Schedule
 80056f6:	f107 0210 	add.w	r2, r7, #16
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fc08 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>

		if(1 == ScheduleDayOfWeekTab[CurrentDayOfWeek]) // If the current day of week the schedule 'i' applies
 8005704:	797b      	ldrb	r3, [r7, #5]
 8005706:	f107 0218 	add.w	r2, r7, #24
 800570a:	4413      	add	r3, r2
 800570c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d13b      	bne.n	800578c <makeScheduleActivity+0xc0>
		{
			// Check if some relays should be turn on
			uint8_t MinuteOnFromEEPROM = 67;
 8005714:	2343      	movs	r3, #67	; 0x43
 8005716:	73fb      	strb	r3, [r7, #15]
			EEPROM_ScheduleMinuteOnRead(i, &MinuteOnFromEEPROM); // Get set Minute ON from EEPROM
 8005718:	f107 020f 	add.w	r2, r7, #15
 800571c:	7dfb      	ldrb	r3, [r7, #23]
 800571e:	4611      	mov	r1, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f7fd fd6c 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
			if(CurrentMinute == MinuteOnFromEEPROM) // If Hour, Minute and Day of Week is set in this schedule
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	79ba      	ldrb	r2, [r7, #6]
 800572a:	429a      	cmp	r2, r3
 800572c:	d110      	bne.n	8005750 <makeScheduleActivity+0x84>
			{
				uint8_t HourOnFromEEPROM = 27;
 800572e:	231b      	movs	r3, #27
 8005730:	737b      	strb	r3, [r7, #13]
				EEPROM_ScheduleHourOnRead(i, &HourOnFromEEPROM); // Get set Hour ON from EEPROM
 8005732:	f107 020d 	add.w	r2, r7, #13
 8005736:	7dfb      	ldrb	r3, [r7, #23]
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f7fd fd3b 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
				if(CurrentHour == HourOnFromEEPROM)
 8005740:	7b7b      	ldrb	r3, [r7, #13]
 8005742:	79fa      	ldrb	r2, [r7, #7]
 8005744:	429a      	cmp	r2, r3
 8005746:	d103      	bne.n	8005750 <makeScheduleActivity+0x84>
				{
					makeRelayOn2(i);
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f82e 	bl	80057ac <makeRelayOn2>
				}
			}

			// Check if some relays should be turn off
			uint8_t MinuteOffFromEEPROM = 67;
 8005750:	2343      	movs	r3, #67	; 0x43
 8005752:	73bb      	strb	r3, [r7, #14]
			EEPROM_ScheduleMinuteOffRead(i, &MinuteOffFromEEPROM);
 8005754:	f107 020e 	add.w	r2, r7, #14
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	4611      	mov	r1, r2
 800575c:	4618      	mov	r0, r3
 800575e:	f7fd fd96 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
			if(CurrentMinute == MinuteOffFromEEPROM) // If Hour, Minute and Day of Week is set in this schedule
 8005762:	7bbb      	ldrb	r3, [r7, #14]
 8005764:	79ba      	ldrb	r2, [r7, #6]
 8005766:	429a      	cmp	r2, r3
 8005768:	d110      	bne.n	800578c <makeScheduleActivity+0xc0>
			{
				uint8_t HourOfFromEEPROM = 27;
 800576a:	231b      	movs	r3, #27
 800576c:	733b      	strb	r3, [r7, #12]
				EEPROM_ScheduleHourOffRead(i, &HourOfFromEEPROM);
 800576e:	f107 020c 	add.w	r2, r7, #12
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f7fd fd65 	bl	8003246 <EEPROM_ScheduleHourOffRead>
				if(CurrentHour == HourOfFromEEPROM)
 800577c:	7b3b      	ldrb	r3, [r7, #12]
 800577e:	79fa      	ldrb	r2, [r7, #7]
 8005780:	429a      	cmp	r2, r3
 8005782:	d103      	bne.n	800578c <makeScheduleActivity+0xc0>
				{
					makeRelayOff2(i);
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f8a6 	bl	80058d8 <makeRelayOff2>
	for(uint8_t i = 1 ; i <= NumberOfSchedules ; i++ ) // 'i' is a number of checking schedule
 800578c:	7dfb      	ldrb	r3, [r7, #23]
 800578e:	3301      	adds	r3, #1
 8005790:	75fb      	strb	r3, [r7, #23]
 8005792:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <makeScheduleActivity+0xdc>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	7dfa      	ldrb	r2, [r7, #23]
 8005798:	429a      	cmp	r2, r3
 800579a:	d9a3      	bls.n	80056e4 <makeScheduleActivity+0x18>
				}
			}
		}
	}
}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000030 	.word	0x20000030

080057ac <makeRelayOn2>:

void makeRelayOn2(uint8_t NumberOfShedule)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	71fb      	strb	r3, [r7, #7]
		uint8_t ScheduleRelayAppliesTab[9] = {0};  // { R1, R2, R3, R4, WS, L1, L2, L3, L4}
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	f107 0310 	add.w	r3, r7, #16
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	711a      	strb	r2, [r3, #4]
		EEPROM_ScheduleRelayAndSwitchTabRead(NumberOfShedule, ScheduleRelayAppliesTab);
 80057c4:	f107 020c 	add.w	r2, r7, #12
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	4611      	mov	r1, r2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fd fc1d 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
		if(ScheduleRelayAppliesTab[0] == 1)
 80057d2:	7b3b      	ldrb	r3, [r7, #12]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d109      	bne.n	80057ec <makeRelayOn2+0x40>
		{
			SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 80057d8:	2005      	movs	r0, #5
 80057da:	f003 ff13 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 80057de:	4933      	ldr	r1, [pc, #204]	; (80058ac <makeRelayOn2+0x100>)
 80057e0:	4833      	ldr	r0, [pc, #204]	; (80058b0 <makeRelayOn2+0x104>)
 80057e2:	f004 fe37 	bl	800a454 <UARTDMA_Print>
			SwitchesButtonState[0] = 1;
 80057e6:	4b33      	ldr	r3, [pc, #204]	; (80058b4 <makeRelayOn2+0x108>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	701a      	strb	r2, [r3, #0]
			//EEPROM_RelayStateUpdate(1, 1);
		}

		if(ScheduleRelayAppliesTab[1] == 1)
 80057ec:	7b7b      	ldrb	r3, [r7, #13]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d109      	bne.n	8005806 <makeRelayOn2+0x5a>
		{
			SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 80057f2:	2007      	movs	r0, #7
 80057f4:	f003 ff06 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 80057f8:	492f      	ldr	r1, [pc, #188]	; (80058b8 <makeRelayOn2+0x10c>)
 80057fa:	482d      	ldr	r0, [pc, #180]	; (80058b0 <makeRelayOn2+0x104>)
 80057fc:	f004 fe2a 	bl	800a454 <UARTDMA_Print>
			SwitchesButtonState[1] = 1;
 8005800:	4b2c      	ldr	r3, [pc, #176]	; (80058b4 <makeRelayOn2+0x108>)
 8005802:	2201      	movs	r2, #1
 8005804:	705a      	strb	r2, [r3, #1]
			//EEPROM_RelayStateUpdate(2, 1);
		}

		if(ScheduleRelayAppliesTab[2] == 1)
 8005806:	7bbb      	ldrb	r3, [r7, #14]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d109      	bne.n	8005820 <makeRelayOn2+0x74>
		{
			SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 800580c:	2009      	movs	r0, #9
 800580e:	f003 fef9 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 8005812:	492a      	ldr	r1, [pc, #168]	; (80058bc <makeRelayOn2+0x110>)
 8005814:	4826      	ldr	r0, [pc, #152]	; (80058b0 <makeRelayOn2+0x104>)
 8005816:	f004 fe1d 	bl	800a454 <UARTDMA_Print>
			SwitchesButtonState[2] = 1;
 800581a:	4b26      	ldr	r3, [pc, #152]	; (80058b4 <makeRelayOn2+0x108>)
 800581c:	2201      	movs	r2, #1
 800581e:	709a      	strb	r2, [r3, #2]
			//EEPROM_RelayStateUpdate(3, 1);
		}

		if(ScheduleRelayAppliesTab[3] == 1)
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d109      	bne.n	800583a <makeRelayOn2+0x8e>
		{
			SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8005826:	200b      	movs	r0, #11
 8005828:	f003 feec 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 800582c:	4924      	ldr	r1, [pc, #144]	; (80058c0 <makeRelayOn2+0x114>)
 800582e:	4820      	ldr	r0, [pc, #128]	; (80058b0 <makeRelayOn2+0x104>)
 8005830:	f004 fe10 	bl	800a454 <UARTDMA_Print>
			SwitchesButtonState[3] = 1;
 8005834:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <makeRelayOn2+0x108>)
 8005836:	2201      	movs	r2, #1
 8005838:	70da      	strb	r2, [r3, #3]
		if(ScheduleRelayAppliesTab[4] == 1)
		{
			//TODO! WS ON
		}

		if(ScheduleRelayAppliesTab[5] == 1)
 800583a:	7c7b      	ldrb	r3, [r7, #17]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d109      	bne.n	8005854 <makeRelayOn2+0xa8>
		{
			SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8005840:	200d      	movs	r0, #13
 8005842:	f003 fedf 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 8005846:	491f      	ldr	r1, [pc, #124]	; (80058c4 <makeRelayOn2+0x118>)
 8005848:	4819      	ldr	r0, [pc, #100]	; (80058b0 <makeRelayOn2+0x104>)
 800584a:	f004 fe03 	bl	800a454 <UARTDMA_Print>
			LightsButtonState[0] = 1;
 800584e:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <makeRelayOn2+0x11c>)
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
			//EEPROM_LightStateUpdate(1, 1);
		}

		if(ScheduleRelayAppliesTab[6] == 1)
 8005854:	7cbb      	ldrb	r3, [r7, #18]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d109      	bne.n	800586e <makeRelayOn2+0xc2>
		{
			SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 800585a:	200f      	movs	r0, #15
 800585c:	f003 fed2 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 8005860:	491a      	ldr	r1, [pc, #104]	; (80058cc <makeRelayOn2+0x120>)
 8005862:	4813      	ldr	r0, [pc, #76]	; (80058b0 <makeRelayOn2+0x104>)
 8005864:	f004 fdf6 	bl	800a454 <UARTDMA_Print>
			LightsButtonState[1] = 1;
 8005868:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <makeRelayOn2+0x11c>)
 800586a:	2201      	movs	r2, #1
 800586c:	705a      	strb	r2, [r3, #1]
			//EEPROM_LightStateUpdate(2, 1);
		}

		if(ScheduleRelayAppliesTab[7] == 1)
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d109      	bne.n	8005888 <makeRelayOn2+0xdc>
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8005874:	2011      	movs	r0, #17
 8005876:	f003 fec5 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 800587a:	4915      	ldr	r1, [pc, #84]	; (80058d0 <makeRelayOn2+0x124>)
 800587c:	480c      	ldr	r0, [pc, #48]	; (80058b0 <makeRelayOn2+0x104>)
 800587e:	f004 fde9 	bl	800a454 <UARTDMA_Print>
			LightsButtonState[2] = 1;
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <makeRelayOn2+0x11c>)
 8005884:	2201      	movs	r2, #1
 8005886:	709a      	strb	r2, [r3, #2]
			//EEPROM_LightStateUpdate(3, 1);
		}

		if(ScheduleRelayAppliesTab[8] == 1)
 8005888:	7d3b      	ldrb	r3, [r7, #20]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d109      	bne.n	80058a2 <makeRelayOn2+0xf6>
		{
			SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 800588e:	2013      	movs	r0, #19
 8005890:	f003 feb8 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 8005894:	490f      	ldr	r1, [pc, #60]	; (80058d4 <makeRelayOn2+0x128>)
 8005896:	4806      	ldr	r0, [pc, #24]	; (80058b0 <makeRelayOn2+0x104>)
 8005898:	f004 fddc 	bl	800a454 <UARTDMA_Print>
			LightsButtonState[3] = 1;
 800589c:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <makeRelayOn2+0x11c>)
 800589e:	2201      	movs	r2, #1
 80058a0:	70da      	strb	r2, [r3, #3]
			//EEPROM_LightStateUpdate(4, 1);
		}

}
 80058a2:	bf00      	nop
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	080166f8 	.word	0x080166f8
 80058b0:	200006c4 	.word	0x200006c4
 80058b4:	200002b0 	.word	0x200002b0
 80058b8:	08016704 	.word	0x08016704
 80058bc:	08016710 	.word	0x08016710
 80058c0:	0801671c 	.word	0x0801671c
 80058c4:	08016728 	.word	0x08016728
 80058c8:	200002b4 	.word	0x200002b4
 80058cc:	08016734 	.word	0x08016734
 80058d0:	08016740 	.word	0x08016740
 80058d4:	0801674c 	.word	0x0801674c

080058d8 <makeRelayOff2>:
void makeRelayOff2(uint8_t NumberOfShedule)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	71fb      	strb	r3, [r7, #7]
		uint8_t ScheduleRelayAppliesTab[9] = {0};  // { R1, R2, R3, R4, WS, L1, L2, L3, L4}
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	f107 0310 	add.w	r3, r7, #16
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	711a      	strb	r2, [r3, #4]
		EEPROM_ScheduleRelayAndSwitchTabRead(NumberOfShedule, ScheduleRelayAppliesTab);
 80058f0:	f107 020c 	add.w	r2, r7, #12
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	4611      	mov	r1, r2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fd fb87 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
		if(ScheduleRelayAppliesTab[0] == 1)
 80058fe:	7b3b      	ldrb	r3, [r7, #12]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d109      	bne.n	8005918 <makeRelayOff2+0x40>
		{
			SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8005904:	2006      	movs	r0, #6
 8005906:	f003 fe7d 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 800590a:	4933      	ldr	r1, [pc, #204]	; (80059d8 <makeRelayOff2+0x100>)
 800590c:	4833      	ldr	r0, [pc, #204]	; (80059dc <makeRelayOff2+0x104>)
 800590e:	f004 fda1 	bl	800a454 <UARTDMA_Print>
			SwitchesButtonState[0] = 0;
 8005912:	4b33      	ldr	r3, [pc, #204]	; (80059e0 <makeRelayOff2+0x108>)
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]
			//EEPROM_RelayStateUpdate(1, 0);
		}

		if(ScheduleRelayAppliesTab[1] == 1)
 8005918:	7b7b      	ldrb	r3, [r7, #13]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d109      	bne.n	8005932 <makeRelayOff2+0x5a>
		{
			SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 800591e:	2008      	movs	r0, #8
 8005920:	f003 fe70 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 8005924:	492f      	ldr	r1, [pc, #188]	; (80059e4 <makeRelayOff2+0x10c>)
 8005926:	482d      	ldr	r0, [pc, #180]	; (80059dc <makeRelayOff2+0x104>)
 8005928:	f004 fd94 	bl	800a454 <UARTDMA_Print>
			SwitchesButtonState[1] = 0;
 800592c:	4b2c      	ldr	r3, [pc, #176]	; (80059e0 <makeRelayOff2+0x108>)
 800592e:	2200      	movs	r2, #0
 8005930:	705a      	strb	r2, [r3, #1]
			//EEPROM_RelayStateUpdate(2, 0);
		}

		if(ScheduleRelayAppliesTab[2] == 1)
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d109      	bne.n	800594c <makeRelayOff2+0x74>
		{
			SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8005938:	200a      	movs	r0, #10
 800593a:	f003 fe63 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 800593e:	492a      	ldr	r1, [pc, #168]	; (80059e8 <makeRelayOff2+0x110>)
 8005940:	4826      	ldr	r0, [pc, #152]	; (80059dc <makeRelayOff2+0x104>)
 8005942:	f004 fd87 	bl	800a454 <UARTDMA_Print>
			SwitchesButtonState[2] = 0;
 8005946:	4b26      	ldr	r3, [pc, #152]	; (80059e0 <makeRelayOff2+0x108>)
 8005948:	2200      	movs	r2, #0
 800594a:	709a      	strb	r2, [r3, #2]
			//EEPROM_RelayStateUpdate(3, 0);
		}

		if(ScheduleRelayAppliesTab[3] == 1)
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d109      	bne.n	8005966 <makeRelayOff2+0x8e>
		{
			SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8005952:	200c      	movs	r0, #12
 8005954:	f003 fe56 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 8005958:	4924      	ldr	r1, [pc, #144]	; (80059ec <makeRelayOff2+0x114>)
 800595a:	4820      	ldr	r0, [pc, #128]	; (80059dc <makeRelayOff2+0x104>)
 800595c:	f004 fd7a 	bl	800a454 <UARTDMA_Print>
			SwitchesButtonState[3] = 0;
 8005960:	4b1f      	ldr	r3, [pc, #124]	; (80059e0 <makeRelayOff2+0x108>)
 8005962:	2200      	movs	r2, #0
 8005964:	70da      	strb	r2, [r3, #3]
		if(ScheduleRelayAppliesTab[4] == 1)
		{
			//TODO! WS OFF
		}

		if(ScheduleRelayAppliesTab[5] == 1)
 8005966:	7c7b      	ldrb	r3, [r7, #17]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d109      	bne.n	8005980 <makeRelayOff2+0xa8>
		{
			SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 800596c:	200e      	movs	r0, #14
 800596e:	f003 fe49 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 8005972:	491f      	ldr	r1, [pc, #124]	; (80059f0 <makeRelayOff2+0x118>)
 8005974:	4819      	ldr	r0, [pc, #100]	; (80059dc <makeRelayOff2+0x104>)
 8005976:	f004 fd6d 	bl	800a454 <UARTDMA_Print>
			LightsButtonState[0] = 0;
 800597a:	4b1e      	ldr	r3, [pc, #120]	; (80059f4 <makeRelayOff2+0x11c>)
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
			//EEPROM_LightStateUpdate(1, 0);
		}

		if(ScheduleRelayAppliesTab[6] == 1)
 8005980:	7cbb      	ldrb	r3, [r7, #18]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d109      	bne.n	800599a <makeRelayOff2+0xc2>
		{
			SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8005986:	2010      	movs	r0, #16
 8005988:	f003 fe3c 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 800598c:	491a      	ldr	r1, [pc, #104]	; (80059f8 <makeRelayOff2+0x120>)
 800598e:	4813      	ldr	r0, [pc, #76]	; (80059dc <makeRelayOff2+0x104>)
 8005990:	f004 fd60 	bl	800a454 <UARTDMA_Print>
			LightsButtonState[1] = 0;
 8005994:	4b17      	ldr	r3, [pc, #92]	; (80059f4 <makeRelayOff2+0x11c>)
 8005996:	2200      	movs	r2, #0
 8005998:	705a      	strb	r2, [r3, #1]
			//EEPROM_LightStateUpdate(2, 0);
		}

		if(ScheduleRelayAppliesTab[7] == 1)
 800599a:	7cfb      	ldrb	r3, [r7, #19]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d109      	bne.n	80059b4 <makeRelayOff2+0xdc>
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to OFF
 80059a0:	2011      	movs	r0, #17
 80059a2:	f003 fe2f 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 80059a6:	4915      	ldr	r1, [pc, #84]	; (80059fc <makeRelayOff2+0x124>)
 80059a8:	480c      	ldr	r0, [pc, #48]	; (80059dc <makeRelayOff2+0x104>)
 80059aa:	f004 fd53 	bl	800a454 <UARTDMA_Print>
			LightsButtonState[2] = 0;
 80059ae:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <makeRelayOff2+0x11c>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	709a      	strb	r2, [r3, #2]
			//EEPROM_LightStateUpdate(3, 0);
		}

		if(ScheduleRelayAppliesTab[8] == 1)
 80059b4:	7d3b      	ldrb	r3, [r7, #20]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d109      	bne.n	80059ce <makeRelayOff2+0xf6>
		{
			SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 80059ba:	2014      	movs	r0, #20
 80059bc:	f003 fe22 	bl	8009604 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 80059c0:	490f      	ldr	r1, [pc, #60]	; (8005a00 <makeRelayOff2+0x128>)
 80059c2:	4806      	ldr	r0, [pc, #24]	; (80059dc <makeRelayOff2+0x104>)
 80059c4:	f004 fd46 	bl	800a454 <UARTDMA_Print>
			LightsButtonState[3] = 0;
 80059c8:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <makeRelayOff2+0x11c>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	70da      	strb	r2, [r3, #3]
			//EEPROM_LightStateUpdate(4, 0);
		}
}
 80059ce:	bf00      	nop
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	08016758 	.word	0x08016758
 80059dc:	200006c4 	.word	0x200006c4
 80059e0:	200002b0 	.word	0x200002b0
 80059e4:	08016764 	.word	0x08016764
 80059e8:	08016770 	.word	0x08016770
 80059ec:	0801677c 	.word	0x0801677c
 80059f0:	08016788 	.word	0x08016788
 80059f4:	200002b4 	.word	0x200002b4
 80059f8:	08016794 	.word	0x08016794
 80059fc:	080167a0 	.word	0x080167a0
 8005a00:	080167ac 	.word	0x080167ac

08005a04 <initWait>:


//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 8005a0c:	bf00      	nop
 8005a0e:	f005 f839 	bl	800aa84 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <initWait+0x28>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d2f6      	bcs.n	8005a0e <initWait+0xa>
    {

    }
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000254 	.word	0x20000254

08005a30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	; 0x28
 8005a34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a36:	f107 0314 	add.w	r3, r7, #20
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	605a      	str	r2, [r3, #4]
 8005a40:	609a      	str	r2, [r3, #8]
 8005a42:	60da      	str	r2, [r3, #12]
 8005a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	4b5f      	ldr	r3, [pc, #380]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	4a5e      	ldr	r2, [pc, #376]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a50:	f043 0304 	orr.w	r3, r3, #4
 8005a54:	6313      	str	r3, [r2, #48]	; 0x30
 8005a56:	4b5c      	ldr	r3, [pc, #368]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	4b58      	ldr	r3, [pc, #352]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	4a57      	ldr	r2, [pc, #348]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	6313      	str	r3, [r2, #48]	; 0x30
 8005a72:	4b55      	ldr	r3, [pc, #340]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60bb      	str	r3, [r7, #8]
 8005a82:	4b51      	ldr	r3, [pc, #324]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	4a50      	ldr	r2, [pc, #320]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a8e:	4b4e      	ldr	r3, [pc, #312]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	60bb      	str	r3, [r7, #8]
 8005a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]
 8005a9e:	4b4a      	ldr	r3, [pc, #296]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	4a49      	ldr	r2, [pc, #292]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005aa4:	f043 0302 	orr.w	r3, r3, #2
 8005aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8005aaa:	4b47      	ldr	r3, [pc, #284]	; (8005bc8 <MX_GPIO_Init+0x198>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	607b      	str	r3, [r7, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005abc:	4843      	ldr	r0, [pc, #268]	; (8005bcc <MX_GPIO_Init+0x19c>)
 8005abe:	f005 ff5d 	bl	800b97c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f247 4102 	movw	r1, #29698	; 0x7402
 8005ac8:	4841      	ldr	r0, [pc, #260]	; (8005bd0 <MX_GPIO_Init+0x1a0>)
 8005aca:	f005 ff57 	bl	800b97c <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ad4:	483f      	ldr	r0, [pc, #252]	; (8005bd4 <MX_GPIO_Init+0x1a4>)
 8005ad6:	f005 ff51 	bl	800b97c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005aec:	f107 0314 	add.w	r3, r7, #20
 8005af0:	4619      	mov	r1, r3
 8005af2:	4836      	ldr	r0, [pc, #216]	; (8005bcc <MX_GPIO_Init+0x19c>)
 8005af4:	f005 fda6 	bl	800b644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 8005af8:	2310      	movs	r3, #16
 8005afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005afc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b02:	2301      	movs	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005b06:	f107 0314 	add.w	r3, r7, #20
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4831      	ldr	r0, [pc, #196]	; (8005bd4 <MX_GPIO_Init+0x1a4>)
 8005b0e:	f005 fd99 	bl	800b644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005b12:	f247 4302 	movw	r3, #29698	; 0x7402
 8005b16:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b20:	2300      	movs	r3, #0
 8005b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b24:	f107 0314 	add.w	r3, r7, #20
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4829      	ldr	r0, [pc, #164]	; (8005bd0 <MX_GPIO_Init+0x1a0>)
 8005b2c:	f005 fd8a 	bl	800b644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 8005b30:	2304      	movs	r3, #4
 8005b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005b34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005b3e:	f107 0314 	add.w	r3, r7, #20
 8005b42:	4619      	mov	r1, r3
 8005b44:	4822      	ldr	r0, [pc, #136]	; (8005bd0 <MX_GPIO_Init+0x1a0>)
 8005b46:	f005 fd7d 	bl	800b644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 8005b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005b58:	f107 0314 	add.w	r3, r7, #20
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	481c      	ldr	r0, [pc, #112]	; (8005bd0 <MX_GPIO_Init+0x1a0>)
 8005b60:	f005 fd70 	bl	800b644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005b6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005b74:	f107 0314 	add.w	r3, r7, #20
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4816      	ldr	r0, [pc, #88]	; (8005bd4 <MX_GPIO_Init+0x1a4>)
 8005b7c:	f005 fd62 	bl	800b644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 8005b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b86:	2301      	movs	r3, #1
 8005b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 8005b92:	f107 0314 	add.w	r3, r7, #20
 8005b96:	4619      	mov	r1, r3
 8005b98:	480e      	ldr	r0, [pc, #56]	; (8005bd4 <MX_GPIO_Init+0x1a4>)
 8005b9a:	f005 fd53 	bl	800b644 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	2008      	movs	r0, #8
 8005ba4:	f005 f8dd 	bl	800ad62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005ba8:	2008      	movs	r0, #8
 8005baa:	f005 f8f6 	bl	800ad9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	2017      	movs	r0, #23
 8005bb4:	f005 f8d5 	bl	800ad62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005bb8:	2017      	movs	r0, #23
 8005bba:	f005 f8ee 	bl	800ad9a <HAL_NVIC_EnableIRQ>

}
 8005bbe:	bf00      	nop
 8005bc0:	3728      	adds	r7, #40	; 0x28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40023800 	.word	0x40023800
 8005bcc:	40020800 	.word	0x40020800
 8005bd0:	40020400 	.word	0x40020400
 8005bd4:	40020000 	.word	0x40020000

08005bd8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005bdc:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005bde:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <MX_I2C1_Init+0x54>)
 8005be0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005be2:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005be4:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <MX_I2C1_Init+0x58>)
 8005be6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005be8:	4b0f      	ldr	r3, [pc, #60]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005bee:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005bf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c08:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c14:	4804      	ldr	r0, [pc, #16]	; (8005c28 <MX_I2C1_Init+0x50>)
 8005c16:	f005 fefd 	bl	800ba14 <HAL_I2C_Init>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005c20:	f000 fa9c 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005c24:	bf00      	nop
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000444 	.word	0x20000444
 8005c2c:	40005400 	.word	0x40005400
 8005c30:	00061a80 	.word	0x00061a80

08005c34 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005c38:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c3a:	4a13      	ldr	r2, [pc, #76]	; (8005c88 <MX_I2C3_Init+0x54>)
 8005c3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005c3e:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c40:	4a12      	ldr	r2, [pc, #72]	; (8005c8c <MX_I2C3_Init+0x58>)
 8005c42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005c4a:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c50:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c56:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005c5e:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c64:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005c70:	4804      	ldr	r0, [pc, #16]	; (8005c84 <MX_I2C3_Init+0x50>)
 8005c72:	f005 fecf 	bl	800ba14 <HAL_I2C_Init>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005c7c:	f000 fa6e 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005c80:	bf00      	nop
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20000390 	.word	0x20000390
 8005c88:	40005c00 	.word	0x40005c00
 8005c8c:	000186a0 	.word	0x000186a0

08005c90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08c      	sub	sp, #48	; 0x30
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c98:	f107 031c 	add.w	r3, r7, #28
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	609a      	str	r2, [r3, #8]
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a74      	ldr	r2, [pc, #464]	; (8005e80 <HAL_I2C_MspInit+0x1f0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	f040 8091 	bne.w	8005dd6 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	4b72      	ldr	r3, [pc, #456]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	4a71      	ldr	r2, [pc, #452]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005cbe:	f043 0302 	orr.w	r3, r3, #2
 8005cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8005cc4:	4b6f      	ldr	r3, [pc, #444]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 8005cd0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cd6:	2312      	movs	r3, #18
 8005cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ce2:	2304      	movs	r3, #4
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ce6:	f107 031c 	add.w	r3, r7, #28
 8005cea:	4619      	mov	r1, r3
 8005cec:	4866      	ldr	r0, [pc, #408]	; (8005e88 <HAL_I2C_MspInit+0x1f8>)
 8005cee:	f005 fca9 	bl	800b644 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	4b63      	ldr	r3, [pc, #396]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	4a62      	ldr	r2, [pc, #392]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d00:	6413      	str	r3, [r2, #64]	; 0x40
 8005d02:	4b60      	ldr	r3, [pc, #384]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005d0e:	4b5f      	ldr	r3, [pc, #380]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d10:	4a5f      	ldr	r2, [pc, #380]	; (8005e90 <HAL_I2C_MspInit+0x200>)
 8005d12:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005d14:	4b5d      	ldr	r3, [pc, #372]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d1a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d1c:	4b5b      	ldr	r3, [pc, #364]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d22:	4b5a      	ldr	r3, [pc, #360]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d28:	4b58      	ldr	r3, [pc, #352]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d2e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d30:	4b56      	ldr	r3, [pc, #344]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d36:	4b55      	ldr	r3, [pc, #340]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005d3c:	4b53      	ldr	r3, [pc, #332]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d42:	4b52      	ldr	r3, [pc, #328]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d48:	4b50      	ldr	r3, [pc, #320]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005d4e:	484f      	ldr	r0, [pc, #316]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d50:	f005 f868 	bl	800ae24 <HAL_DMA_Init>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8005d5a:	f000 f9ff 	bl	800615c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a4a      	ldr	r2, [pc, #296]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38
 8005d64:	4a49      	ldr	r2, [pc, #292]	; (8005e8c <HAL_I2C_MspInit+0x1fc>)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8005d6a:	4b4a      	ldr	r3, [pc, #296]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d6c:	4a4a      	ldr	r2, [pc, #296]	; (8005e98 <HAL_I2C_MspInit+0x208>)
 8005d6e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8005d70:	4b48      	ldr	r3, [pc, #288]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d76:	4b47      	ldr	r3, [pc, #284]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d78:	2240      	movs	r2, #64	; 0x40
 8005d7a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d7c:	4b45      	ldr	r3, [pc, #276]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d82:	4b44      	ldr	r3, [pc, #272]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d88:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d8a:	4b42      	ldr	r3, [pc, #264]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d90:	4b40      	ldr	r3, [pc, #256]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005d96:	4b3f      	ldr	r3, [pc, #252]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d9c:	4b3d      	ldr	r3, [pc, #244]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005da2:	4b3c      	ldr	r3, [pc, #240]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005da8:	483a      	ldr	r0, [pc, #232]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005daa:	f005 f83b 	bl	800ae24 <HAL_DMA_Init>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005db4:	f000 f9d2 	bl	800615c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a36      	ldr	r2, [pc, #216]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005dbc:	635a      	str	r2, [r3, #52]	; 0x34
 8005dbe:	4a35      	ldr	r2, [pc, #212]	; (8005e94 <HAL_I2C_MspInit+0x204>)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	2020      	movs	r0, #32
 8005dca:	f004 ffca 	bl	800ad62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005dce:	2020      	movs	r0, #32
 8005dd0:	f004 ffe3 	bl	800ad9a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005dd4:	e050      	b.n	8005e78 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a30      	ldr	r2, [pc, #192]	; (8005e9c <HAL_I2C_MspInit+0x20c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d14b      	bne.n	8005e78 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005de0:	2300      	movs	r3, #0
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	6313      	str	r3, [r2, #48]	; 0x30
 8005df0:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	4b20      	ldr	r3, [pc, #128]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	4a1f      	ldr	r2, [pc, #124]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005e06:	f043 0302 	orr.w	r3, r3, #2
 8005e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e0c:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 8005e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e1e:	2312      	movs	r3, #18
 8005e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e26:	2303      	movs	r3, #3
 8005e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005e2a:	2304      	movs	r3, #4
 8005e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005e2e:	f107 031c 	add.w	r3, r7, #28
 8005e32:	4619      	mov	r1, r3
 8005e34:	481a      	ldr	r0, [pc, #104]	; (8005ea0 <HAL_I2C_MspInit+0x210>)
 8005e36:	f005 fc05 	bl	800b644 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 8005e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e40:	2312      	movs	r3, #18
 8005e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005e4c:	2309      	movs	r3, #9
 8005e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005e50:	f107 031c 	add.w	r3, r7, #28
 8005e54:	4619      	mov	r1, r3
 8005e56:	480c      	ldr	r0, [pc, #48]	; (8005e88 <HAL_I2C_MspInit+0x1f8>)
 8005e58:	f005 fbf4 	bl	800b644 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60bb      	str	r3, [r7, #8]
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	4a07      	ldr	r2, [pc, #28]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005e66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <HAL_I2C_MspInit+0x1f4>)
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	68bb      	ldr	r3, [r7, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	3730      	adds	r7, #48	; 0x30
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40005400 	.word	0x40005400
 8005e84:	40023800 	.word	0x40023800
 8005e88:	40020400 	.word	0x40020400
 8005e8c:	20000498 	.word	0x20000498
 8005e90:	40026010 	.word	0x40026010
 8005e94:	200003e4 	.word	0x200003e4
 8005e98:	40026028 	.word	0x40026028
 8005e9c:	40005c00 	.word	0x40005c00
 8005ea0:	40020000 	.word	0x40020000

08005ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005eaa:	f004 fd85 	bl	800a9b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005eae:	f000 f87f 	bl	8005fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005eb2:	f7ff fdbd 	bl	8005a30 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005eb6:	f003 fd87 	bl	80099c8 <MX_SPI1_Init>
  MX_DMA_Init();
 8005eba:	f7fc fc59 	bl	8002770 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005ebe:	f004 fbb5 	bl	800a62c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8005ec2:	f003 fdb7 	bl	8009a34 <MX_SPI3_Init>
  MX_I2C1_Init();
 8005ec6:	f7ff fe87 	bl	8005bd8 <MX_I2C1_Init>
  MX_TIM11_Init();
 8005eca:	f004 f931 	bl	800a130 <MX_TIM11_Init>
  MX_TIM10_Init();
 8005ece:	f004 f90b 	bl	800a0e8 <MX_TIM10_Init>
  MX_I2C3_Init();
 8005ed2:	f7ff feaf 	bl	8005c34 <MX_I2C3_Init>
  MX_SPI5_Init();
 8005ed6:	f003 fde3 	bl	8009aa0 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8005eda:	f004 fb7d 	bl	800a5d8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8005ede:	f004 f8af 	bl	800a040 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005ee2:	f000 f8cd 	bl	8006080 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8005ee6:	4829      	ldr	r0, [pc, #164]	; (8005f8c <main+0xe8>)
 8005ee8:	f7fc f9a2 	bl	8002230 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8005eec:	4928      	ldr	r1, [pc, #160]	; (8005f90 <main+0xec>)
 8005eee:	4829      	ldr	r0, [pc, #164]	; (8005f94 <main+0xf0>)
 8005ef0:	f004 fb23 	bl	800a53a <UARTDMA_Init>
  UARTDMA_Init(&huartdma1, &huart1);
 8005ef4:	4928      	ldr	r1, [pc, #160]	; (8005f98 <main+0xf4>)
 8005ef6:	4829      	ldr	r0, [pc, #164]	; (8005f9c <main+0xf8>)
 8005ef8:	f004 fb1f 	bl	800a53a <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 8005efc:	2117      	movs	r1, #23
 8005efe:	4828      	ldr	r0, [pc, #160]	; (8005fa0 <main+0xfc>)
 8005f00:	f7fc fbe6 	bl	80026d0 <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 8005f04:	4827      	ldr	r0, [pc, #156]	; (8005fa4 <main+0x100>)
 8005f06:	f7fc fc89 	bl	800281c <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8005f0a:	2001      	movs	r0, #1
 8005f0c:	f7fc fce0 	bl	80028d0 <DS3231_SetInterruptMode>
  DS3231_SetRateSelect(DS3231_1HZ);
 8005f10:	2000      	movs	r0, #0
 8005f12:	f7fc fcfd 	bl	8002910 <DS3231_SetRateSelect>
  DS3231_EnableOscillator(DS3231_ENABLED);
 8005f16:	2001      	movs	r0, #1
 8005f18:	f7fc fd1a 	bl	8002950 <DS3231_EnableOscillator>
  // EEPROM CHECK TODO! Add check of eeprom and informing on screen about results
  uint8_t result = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	71fb      	strb	r3, [r7, #7]
  eeprom_read(0x01, &result, sizeof(result));
 8005f20:	1dfb      	adds	r3, r7, #7
 8005f22:	2201      	movs	r2, #1
 8005f24:	4619      	mov	r1, r3
 8005f26:	2001      	movs	r0, #1
 8005f28:	f7fc fe5e 	bl	8002be8 <eeprom_read>

  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 8005f2c:	481e      	ldr	r0, [pc, #120]	; (8005fa8 <main+0x104>)
 8005f2e:	f009 ff21 	bl	800fd74 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8005f32:	213c      	movs	r1, #60	; 0x3c
 8005f34:	481d      	ldr	r0, [pc, #116]	; (8005fac <main+0x108>)
 8005f36:	f00a f854 	bl	800ffe2 <HAL_TIM_Encoder_Start>

  int16_t EncoderValue = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	80bb      	strh	r3, [r7, #4]
  {

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005f3e:	4815      	ldr	r0, [pc, #84]	; (8005f94 <main+0xf0>)
 8005f40:	f004 faae 	bl	800a4a0 <UARTDMA_IsDataReceivedReady>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <main+0xac>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8005f4a:	4812      	ldr	r0, [pc, #72]	; (8005f94 <main+0xf0>)
 8005f4c:	f003 f864 	bl	8009018 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8005f50:	4810      	ldr	r0, [pc, #64]	; (8005f94 <main+0xf0>)
 8005f52:	f004 fab7 	bl	800a4c4 <UARTDMA_TransmitEvent>

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM ESP
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma1))
 8005f56:	4811      	ldr	r0, [pc, #68]	; (8005f9c <main+0xf8>)
 8005f58:	f004 faa2 	bl	800a4a0 <UARTDMA_IsDataReceivedReady>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <main+0xc4>
	  {
		  UART_ESP_ParseLine(&huartdma1); // Parsing function
 8005f62:	480e      	ldr	r0, [pc, #56]	; (8005f9c <main+0xf8>)
 8005f64:	f7fb f85a 	bl	800101c <UART_ESP_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO ESP
	  //
	  UARTDMA_TransmitEvent(&huartdma1);
 8005f68:	480c      	ldr	r0, [pc, #48]	; (8005f9c <main+0xf8>)
 8005f6a:	f004 faab 	bl	800a4c4 <UARTDMA_TransmitEvent>

	  ////////////////////////////////////////////////////////
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 8005f6e:	f7fc fadd 	bl	800252c <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 8005f72:	f000 f92f 	bl	80061d4 <MenuTFT>
	  ////////////////////////////////////////////////////////

	  EncoderValue = __HAL_TIM_GET_COUNTER(&htim2);
 8005f76:	4b0d      	ldr	r3, [pc, #52]	; (8005fac <main+0x108>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	80bb      	strh	r3, [r7, #4]
	  encoderUpgrade(&EncoderValue);
 8005f80:	1d3b      	adds	r3, r7, #4
 8005f82:	4618      	mov	r0, r3
 8005f84:	f002 ffbe 	bl	8008f04 <encoderUpgrade>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005f88:	e7d9      	b.n	8005f3e <main+0x9a>
 8005f8a:	bf00      	nop
 8005f8c:	20000940 	.word	0x20000940
 8005f90:	20000c34 	.word	0x20000c34
 8005f94:	200004f8 	.word	0x200004f8
 8005f98:	20000bf0 	.word	0x20000bf0
 8005f9c:	200006c4 	.word	0x200006c4
 8005fa0:	200008e8 	.word	0x200008e8
 8005fa4:	20000444 	.word	0x20000444
 8005fa8:	200009e0 	.word	0x200009e0
 8005fac:	20000a28 	.word	0x20000a28

08005fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b094      	sub	sp, #80	; 0x50
 8005fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fb6:	f107 0320 	add.w	r3, r7, #32
 8005fba:	2230      	movs	r2, #48	; 0x30
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f00b fc68 	bl	8011894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fc4:	f107 030c 	add.w	r3, r7, #12
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	605a      	str	r2, [r3, #4]
 8005fce:	609a      	str	r2, [r3, #8]
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60bb      	str	r3, [r7, #8]
 8005fd8:	4b27      	ldr	r3, [pc, #156]	; (8006078 <SystemClock_Config+0xc8>)
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	4a26      	ldr	r2, [pc, #152]	; (8006078 <SystemClock_Config+0xc8>)
 8005fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe4:	4b24      	ldr	r3, [pc, #144]	; (8006078 <SystemClock_Config+0xc8>)
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	607b      	str	r3, [r7, #4]
 8005ff4:	4b21      	ldr	r3, [pc, #132]	; (800607c <SystemClock_Config+0xcc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a20      	ldr	r2, [pc, #128]	; (800607c <SystemClock_Config+0xcc>)
 8005ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	4b1e      	ldr	r3, [pc, #120]	; (800607c <SystemClock_Config+0xcc>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006008:	607b      	str	r3, [r7, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800600c:	2301      	movs	r3, #1
 800600e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006016:	2302      	movs	r3, #2
 8006018:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800601a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800601e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8006020:	230c      	movs	r3, #12
 8006022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8006024:	2360      	movs	r3, #96	; 0x60
 8006026:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006028:	2302      	movs	r3, #2
 800602a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800602c:	2304      	movs	r3, #4
 800602e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006030:	f107 0320 	add.w	r3, r7, #32
 8006034:	4618      	mov	r0, r3
 8006036:	f008 fdf1 	bl	800ec1c <HAL_RCC_OscConfig>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006040:	f000 f88c 	bl	800615c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006044:	230f      	movs	r3, #15
 8006046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006048:	2302      	movs	r3, #2
 800604a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800604c:	2300      	movs	r3, #0
 800604e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800605a:	f107 030c 	add.w	r3, r7, #12
 800605e:	2103      	movs	r1, #3
 8006060:	4618      	mov	r0, r3
 8006062:	f009 f853 	bl	800f10c <HAL_RCC_ClockConfig>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800606c:	f000 f876 	bl	800615c <Error_Handler>
  }
}
 8006070:	bf00      	nop
 8006072:	3750      	adds	r7, #80	; 0x50
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40023800 	.word	0x40023800
 800607c:	40007000 	.word	0x40007000

08006080 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006084:	2200      	movs	r2, #0
 8006086:	2100      	movs	r1, #0
 8006088:	200a      	movs	r0, #10
 800608a:	f004 fe6a 	bl	800ad62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800608e:	200a      	movs	r0, #10
 8006090:	f004 fe83 	bl	800ad9a <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006094:	2200      	movs	r2, #0
 8006096:	2100      	movs	r1, #0
 8006098:	201f      	movs	r0, #31
 800609a:	f004 fe62 	bl	800ad62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800609e:	201f      	movs	r0, #31
 80060a0:	f004 fe7b 	bl	800ad9a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80060a4:	2200      	movs	r2, #0
 80060a6:	2100      	movs	r1, #0
 80060a8:	2026      	movs	r0, #38	; 0x26
 80060aa:	f004 fe5a 	bl	800ad62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80060ae:	2026      	movs	r0, #38	; 0x26
 80060b0:	f004 fe73 	bl	800ad9a <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80060b4:	2200      	movs	r2, #0
 80060b6:	2100      	movs	r1, #0
 80060b8:	2033      	movs	r0, #51	; 0x33
 80060ba:	f004 fe52 	bl	800ad62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80060be:	2033      	movs	r0, #51	; 0x33
 80060c0:	f004 fe6b 	bl	800ad9a <HAL_NVIC_EnableIRQ>
}
 80060c4:	bf00      	nop
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a12      	ldr	r2, [pc, #72]	; (8006120 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d101      	bne.n	80060de <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 80060da:	f7fe ff23 	bl	8004f24 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a10      	ldr	r2, [pc, #64]	; (8006124 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d117      	bne.n	8006118 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		//TODO! Make possibility to change FEEDING_TIME_IN_S
		if(FeedingCounter >= FEEDING_TIME_IN_S) // timer to count seconds from start feeding to turn off this activity
 80060e8:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d90d      	bls.n	800610c <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80060f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060f4:	480d      	ldr	r0, [pc, #52]	; (800612c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80060f6:	f005 fc5a 	bl	800b9ae <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 80060fa:	2000      	movs	r0, #0
 80060fc:	f7fe ffa8 	bl	8005050 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8006100:	4b09      	ldr	r3, [pc, #36]	; (8006128 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8006106:	480a      	ldr	r0, [pc, #40]	; (8006130 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006108:	f009 fe96 	bl	800fe38 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	b2da      	uxtb	r2, r3
 8006114:	4b04      	ldr	r3, [pc, #16]	; (8006128 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8006116:	701a      	strb	r2, [r3, #0]
	}
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40014800 	.word	0x40014800
 8006124:	40014400 	.word	0x40014400
 8006128:	20000258 	.word	0x20000258
 800612c:	40020800 	.word	0x40020800
 8006130:	20000998 	.word	0x20000998

08006134 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006144:	d101      	bne.n	800614a <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8006146:	f7fc fab7 	bl	80026b8 <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	2b10      	cmp	r3, #16
 800614e:	d101      	bne.n	8006154 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8006150:	f7fc fc42 	bl	80029d8 <DS3231_ClearAlarm2Flag>
	}
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8006162:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006166:	f7fc f805 	bl	8002174 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 800616a:	4814      	ldr	r0, [pc, #80]	; (80061bc <Error_Handler+0x60>)
 800616c:	f7fb fbfe 	bl	800196c <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8006170:	4a13      	ldr	r2, [pc, #76]	; (80061c0 <Error_Handler+0x64>)
 8006172:	4914      	ldr	r1, [pc, #80]	; (80061c4 <Error_Handler+0x68>)
 8006174:	4814      	ldr	r0, [pc, #80]	; (80061c8 <Error_Handler+0x6c>)
 8006176:	f00c fa15 	bl	80125a4 <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 800617a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	2301      	movs	r3, #1
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	2300      	movs	r3, #0
 8006186:	2214      	movs	r2, #20
 8006188:	210a      	movs	r1, #10
 800618a:	480f      	ldr	r0, [pc, #60]	; (80061c8 <Error_Handler+0x6c>)
 800618c:	f7fb fe08 	bl	8001da0 <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 8006190:	f240 134d 	movw	r3, #333	; 0x14d
 8006194:	4a0d      	ldr	r2, [pc, #52]	; (80061cc <Error_Handler+0x70>)
 8006196:	490e      	ldr	r1, [pc, #56]	; (80061d0 <Error_Handler+0x74>)
 8006198:	480b      	ldr	r0, [pc, #44]	; (80061c8 <Error_Handler+0x6c>)
 800619a:	f00c fa03 	bl	80125a4 <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 800619e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	2301      	movs	r3, #1
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	2300      	movs	r3, #0
 80061aa:	2232      	movs	r2, #50	; 0x32
 80061ac:	210a      	movs	r1, #10
 80061ae:	4806      	ldr	r0, [pc, #24]	; (80061c8 <Error_Handler+0x6c>)
 80061b0:	f7fb fdf6 	bl	8001da0 <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80061b4:	b672      	cpsid	i
}
 80061b6:	bf00      	nop

  __disable_irq();

  while (1)
 80061b8:	e7fe      	b.n	80061b8 <Error_Handler+0x5c>
 80061ba:	bf00      	nop
 80061bc:	08027e6c 	.word	0x08027e6c
 80061c0:	080167b8 	.word	0x080167b8
 80061c4:	080167cc 	.word	0x080167cc
 80061c8:	200002c8 	.word	0x200002c8
 80061cc:	0802739c 	.word	0x0802739c
 80061d0:	080167e4 	.word	0x080167e4

080061d4 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
	switch(State)
 80061d8:	4b4f      	ldr	r3, [pc, #316]	; (8006318 <MenuTFT+0x144>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	f200 8098 	bhi.w	8006312 <MenuTFT+0x13e>
 80061e2:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <MenuTFT+0x14>)
 80061e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	0800621f 	.word	0x0800621f
 80061f0:	08006253 	.word	0x08006253
 80061f4:	08006283 	.word	0x08006283
 80061f8:	080062a1 	.word	0x080062a1
 80061fc:	0800626b 	.word	0x0800626b
 8006200:	080062b9 	.word	0x080062b9
 8006204:	080062d7 	.word	0x080062d7
 8006208:	080062f5 	.word	0x080062f5
	{
	case MENUTFT_INIT:
		system_init();
 800620c:	f7fd f8f0 	bl	80033f0 <system_init>
		State = MENUTFT_PARAMETERS;
 8006210:	4b41      	ldr	r3, [pc, #260]	; (8006318 <MenuTFT+0x144>)
 8006212:	2201      	movs	r2, #1
 8006214:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8006216:	4b41      	ldr	r3, [pc, #260]	; (800631c <MenuTFT+0x148>)
 8006218:	2201      	movs	r2, #1
 800621a:	701a      	strb	r2, [r3, #0]
		break;
 800621c:	e079      	b.n	8006312 <MenuTFT+0x13e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 800621e:	4b3f      	ldr	r3, [pc, #252]	; (800631c <MenuTFT+0x148>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d112      	bne.n	800624c <MenuTFT+0x78>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8006226:	4b3e      	ldr	r3, [pc, #248]	; (8006320 <MenuTFT+0x14c>)
 8006228:	edd3 7a00 	vldr	s15, [r3]
 800622c:	4b3d      	ldr	r3, [pc, #244]	; (8006324 <MenuTFT+0x150>)
 800622e:	ed93 7a00 	vldr	s14, [r3]
 8006232:	eeb0 1a47 	vmov.f32	s2, s14
 8006236:	2100      	movs	r1, #0
 8006238:	2000      	movs	r0, #0
 800623a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8006328 <MenuTFT+0x154>
 800623e:	eeb0 0a67 	vmov.f32	s0, s15
 8006242:	f7fd fa53 	bl	80036ec <showCurrentParameters>
			StateChangeFlag = 0;
 8006246:	4b35      	ldr	r3, [pc, #212]	; (800631c <MenuTFT+0x148>)
 8006248:	2200      	movs	r2, #0
 800624a:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 800624c:	f000 f874 	bl	8006338 <TouchParametersActivity>
		break;
 8006250:	e05f      	b.n	8006312 <MenuTFT+0x13e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8006252:	4b32      	ldr	r3, [pc, #200]	; (800631c <MenuTFT+0x148>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d104      	bne.n	8006264 <MenuTFT+0x90>
		{
			showControlPanel();
 800625a:	f7fd fb91 	bl	8003980 <showControlPanel>
			StateChangeFlag = 0;
 800625e:	4b2f      	ldr	r3, [pc, #188]	; (800631c <MenuTFT+0x148>)
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8006264:	f000 f8c8 	bl	80063f8 <TouchSwitchActivity>
		break;
 8006268:	e053      	b.n	8006312 <MenuTFT+0x13e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 800626a:	4b2c      	ldr	r3, [pc, #176]	; (800631c <MenuTFT+0x148>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d104      	bne.n	800627c <MenuTFT+0xa8>
		{
			showLightsControlPanel();
 8006272:	f7fd fc5f 	bl	8003b34 <showLightsControlPanel>
			StateChangeFlag = 0;
 8006276:	4b29      	ldr	r3, [pc, #164]	; (800631c <MenuTFT+0x148>)
 8006278:	2200      	movs	r2, #0
 800627a:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 800627c:	f000 f92e 	bl	80064dc <TouchLightsActivity>
		break;
 8006280:	e047      	b.n	8006312 <MenuTFT+0x13e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8006282:	4b26      	ldr	r3, [pc, #152]	; (800631c <MenuTFT+0x148>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d107      	bne.n	800629a <MenuTFT+0xc6>
		{
			showClockSetPanel();
 800628a:	f7fd fd2b 	bl	8003ce4 <showClockSetPanel>
			ClockChangeFlag = 1;
 800628e:	4b27      	ldr	r3, [pc, #156]	; (800632c <MenuTFT+0x158>)
 8006290:	2201      	movs	r2, #1
 8006292:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006294:	4b21      	ldr	r3, [pc, #132]	; (800631c <MenuTFT+0x148>)
 8006296:	2200      	movs	r2, #0
 8006298:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 800629a:	f000 f98f 	bl	80065bc <TouchClockActivity>
		break;
 800629e:	e038      	b.n	8006312 <MenuTFT+0x13e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 80062a0:	4b1e      	ldr	r3, [pc, #120]	; (800631c <MenuTFT+0x148>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d104      	bne.n	80062b2 <MenuTFT+0xde>
		{
			showPreparedActivitiesPanel();
 80062a8:	f7fd fe84 	bl	8003fb4 <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 80062ac:	4b1b      	ldr	r3, [pc, #108]	; (800631c <MenuTFT+0x148>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 80062b2:	f000 fa4f 	bl	8006754 <TouchPredefinedActivityActivity>
		break;
 80062b6:	e02c      	b.n	8006312 <MenuTFT+0x13e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 80062b8:	4b18      	ldr	r3, [pc, #96]	; (800631c <MenuTFT+0x148>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d107      	bne.n	80062d0 <MenuTFT+0xfc>
		{
			showWSLedPanel();
 80062c0:	f7fd ff88 	bl	80041d4 <showWSLedPanel>
			WSLedChangeFlag = 1;
 80062c4:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <MenuTFT+0x15c>)
 80062c6:	2201      	movs	r2, #1
 80062c8:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80062ca:	4b14      	ldr	r3, [pc, #80]	; (800631c <MenuTFT+0x148>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 80062d0:	f000 fa8a 	bl	80067e8 <TouchWSLedActivity>
		break;
 80062d4:	e01d      	b.n	8006312 <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 80062d6:	4b11      	ldr	r3, [pc, #68]	; (800631c <MenuTFT+0x148>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d107      	bne.n	80062ee <MenuTFT+0x11a>
		{
			showSchedule1Panel();
 80062de:	f7fe fd15 	bl	8004d0c <showSchedule1Panel>
			ScheduleChangeFlag = 1;
 80062e2:	4b14      	ldr	r3, [pc, #80]	; (8006334 <MenuTFT+0x160>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80062e8:	4b0c      	ldr	r3, [pc, #48]	; (800631c <MenuTFT+0x148>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 80062ee:	f000 fae7 	bl	80068c0 <Schedule1Activity>
		break;
 80062f2:	e00e      	b.n	8006312 <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 80062f4:	4b09      	ldr	r3, [pc, #36]	; (800631c <MenuTFT+0x148>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d107      	bne.n	800630c <MenuTFT+0x138>
		{
			showSchedule2Panel();
 80062fc:	f7fe fd9a 	bl	8004e34 <showSchedule2Panel>
			ScheduleChangeFlag = 1;
 8006300:	4b0c      	ldr	r3, [pc, #48]	; (8006334 <MenuTFT+0x160>)
 8006302:	2201      	movs	r2, #1
 8006304:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006306:	4b05      	ldr	r3, [pc, #20]	; (800631c <MenuTFT+0x148>)
 8006308:	2200      	movs	r2, #0
 800630a:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 800630c:	f000 fbda 	bl	8006ac4 <Schedule2Activity>
		break;
 8006310:	bf00      	nop
	}
}
 8006312:	bf00      	nop
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20000298 	.word	0x20000298
 800631c:	20000259 	.word	0x20000259
 8006320:	2000029c 	.word	0x2000029c
 8006324:	200002a4 	.word	0x200002a4
 8006328:	00000000 	.word	0x00000000
 800632c:	2000025a 	.word	0x2000025a
 8006330:	2000025b 	.word	0x2000025b
 8006334:	2000025c 	.word	0x2000025c

08006338 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800633e:	f7fc f8e3 	bl	8002508 <XPT2046_IsTouched>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d04c      	beq.n	80063e2 <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006348:	f004 fb9c 	bl	800aa84 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	4b27      	ldr	r3, [pc, #156]	; (80063ec <TouchParametersActivity+0xb4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006358:	d343      	bcc.n	80063e2 <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800635a:	1d3a      	adds	r2, r7, #4
 800635c:	1dbb      	adds	r3, r7, #6
 800635e:	4611      	mov	r1, r2
 8006360:	4618      	mov	r0, r3
 8006362:	f7fc f893 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	2b09      	cmp	r3, #9
 800636a:	d90f      	bls.n	800638c <TouchParametersActivity+0x54>
 800636c:	88fb      	ldrh	r3, [r7, #6]
 800636e:	2b6e      	cmp	r3, #110	; 0x6e
 8006370:	d80c      	bhi.n	800638c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006372:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006374:	2bd7      	cmp	r3, #215	; 0xd7
 8006376:	d909      	bls.n	800638c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006378:	88bb      	ldrh	r3, [r7, #4]
 800637a:	2bec      	cmp	r3, #236	; 0xec
 800637c:	d806      	bhi.n	800638c <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 800637e:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <TouchParametersActivity+0xb8>)
 8006380:	2205      	movs	r2, #5
 8006382:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006384:	4b1b      	ldr	r3, [pc, #108]	; (80063f4 <TouchParametersActivity+0xbc>)
 8006386:	2201      	movs	r2, #1
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	e025      	b.n	80063d8 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	2bdb      	cmp	r3, #219	; 0xdb
 8006390:	d910      	bls.n	80063b4 <TouchParametersActivity+0x7c>
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006398:	d20c      	bcs.n	80063b4 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800639a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800639c:	2bd7      	cmp	r3, #215	; 0xd7
 800639e:	d909      	bls.n	80063b4 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80063a0:	88bb      	ldrh	r3, [r7, #4]
 80063a2:	2bec      	cmp	r3, #236	; 0xec
 80063a4:	d806      	bhi.n	80063b4 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 80063a6:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <TouchParametersActivity+0xb8>)
 80063a8:	2202      	movs	r2, #2
 80063aa:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80063ac:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <TouchParametersActivity+0xbc>)
 80063ae:	2201      	movs	r2, #1
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	e011      	b.n	80063d8 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80063b4:	88fb      	ldrh	r3, [r7, #6]
 80063b6:	2b77      	cmp	r3, #119	; 0x77
 80063b8:	d90e      	bls.n	80063d8 <TouchParametersActivity+0xa0>
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	2bd2      	cmp	r3, #210	; 0xd2
 80063be:	d80b      	bhi.n	80063d8 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80063c0:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80063c2:	2bd7      	cmp	r3, #215	; 0xd7
 80063c4:	d908      	bls.n	80063d8 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80063c6:	88bb      	ldrh	r3, [r7, #4]
 80063c8:	2bec      	cmp	r3, #236	; 0xec
 80063ca:	d805      	bhi.n	80063d8 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 80063cc:	4b08      	ldr	r3, [pc, #32]	; (80063f0 <TouchParametersActivity+0xb8>)
 80063ce:	2203      	movs	r2, #3
 80063d0:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <TouchParametersActivity+0xbc>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 80063d8:	f004 fb54 	bl	800aa84 <HAL_GetTick>
 80063dc:	4603      	mov	r3, r0
 80063de:	4a03      	ldr	r2, [pc, #12]	; (80063ec <TouchParametersActivity+0xb4>)
 80063e0:	6013      	str	r3, [r2, #0]
		}
	}
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000294 	.word	0x20000294
 80063f0:	20000298 	.word	0x20000298
 80063f4:	20000259 	.word	0x20000259

080063f8 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80063fe:	f7fc f883 	bl	8002508 <XPT2046_IsTouched>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d05d      	beq.n	80064c4 <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006408:	f004 fb3c 	bl	800aa84 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	4b2f      	ldr	r3, [pc, #188]	; (80064cc <TouchSwitchActivity+0xd4>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006418:	d354      	bcc.n	80064c4 <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800641a:	1d3a      	adds	r2, r7, #4
 800641c:	1dbb      	adds	r3, r7, #6
 800641e:	4611      	mov	r1, r2
 8006420:	4618      	mov	r0, r3
 8006422:	f7fc f833 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006426:	88fb      	ldrh	r3, [r7, #6]
 8006428:	2b09      	cmp	r3, #9
 800642a:	d90f      	bls.n	800644c <TouchSwitchActivity+0x54>
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	2b6e      	cmp	r3, #110	; 0x6e
 8006430:	d80c      	bhi.n	800644c <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006432:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006434:	2bd7      	cmp	r3, #215	; 0xd7
 8006436:	d909      	bls.n	800644c <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006438:	88bb      	ldrh	r3, [r7, #4]
 800643a:	2bec      	cmp	r3, #236	; 0xec
 800643c:	d806      	bhi.n	800644c <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 800643e:	4b24      	ldr	r3, [pc, #144]	; (80064d0 <TouchSwitchActivity+0xd8>)
 8006440:	2201      	movs	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006444:	4b23      	ldr	r3, [pc, #140]	; (80064d4 <TouchSwitchActivity+0xdc>)
 8006446:	2201      	movs	r2, #1
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	e036      	b.n	80064ba <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	2bdb      	cmp	r3, #219	; 0xdb
 8006450:	d910      	bls.n	8006474 <TouchSwitchActivity+0x7c>
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006458:	d20c      	bcs.n	8006474 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800645a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800645c:	2bd7      	cmp	r3, #215	; 0xd7
 800645e:	d909      	bls.n	8006474 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006460:	88bb      	ldrh	r3, [r7, #4]
 8006462:	2bec      	cmp	r3, #236	; 0xec
 8006464:	d806      	bhi.n	8006474 <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 8006466:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <TouchSwitchActivity+0xd8>)
 8006468:	2205      	movs	r2, #5
 800646a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800646c:	4b19      	ldr	r3, [pc, #100]	; (80064d4 <TouchSwitchActivity+0xdc>)
 800646e:	2201      	movs	r2, #1
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	e022      	b.n	80064ba <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	2b77      	cmp	r3, #119	; 0x77
 8006478:	d90f      	bls.n	800649a <TouchSwitchActivity+0xa2>
 800647a:	88fb      	ldrh	r3, [r7, #6]
 800647c:	2bd2      	cmp	r3, #210	; 0xd2
 800647e:	d80c      	bhi.n	800649a <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006480:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006482:	2bd7      	cmp	r3, #215	; 0xd7
 8006484:	d909      	bls.n	800649a <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006486:	88bb      	ldrh	r3, [r7, #4]
 8006488:	2bec      	cmp	r3, #236	; 0xec
 800648a:	d806      	bhi.n	800649a <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 800648c:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <TouchSwitchActivity+0xd8>)
 800648e:	2204      	movs	r2, #4
 8006490:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006492:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <TouchSwitchActivity+0xdc>)
 8006494:	2201      	movs	r2, #1
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	e00f      	b.n	80064ba <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 800649a:	88fb      	ldrh	r3, [r7, #6]
 800649c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80064a0:	d30b      	bcc.n	80064ba <TouchSwitchActivity+0xc2>
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80064a8:	d207      	bcs.n	80064ba <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80064aa:	480b      	ldr	r0, [pc, #44]	; (80064d8 <TouchSwitchActivity+0xe0>)
 80064ac:	f7fb fa5e 	bl	800196c <EF_SetFont>
				changeSwitchStatusTouch(y);
 80064b0:	88bb      	ldrh	r3, [r7, #4]
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 fe6f 	bl	8008198 <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 80064ba:	f004 fae3 	bl	800aa84 <HAL_GetTick>
 80064be:	4603      	mov	r3, r0
 80064c0:	4a02      	ldr	r2, [pc, #8]	; (80064cc <TouchSwitchActivity+0xd4>)
 80064c2:	6013      	str	r3, [r2, #0]
		}
	}
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20000294 	.word	0x20000294
 80064d0:	20000298 	.word	0x20000298
 80064d4:	20000259 	.word	0x20000259
 80064d8:	08027e6c 	.word	0x08027e6c

080064dc <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80064e2:	f7fc f811 	bl	8002508 <XPT2046_IsTouched>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d05b      	beq.n	80065a4 <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80064ec:	f004 faca 	bl	800aa84 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	4b2e      	ldr	r3, [pc, #184]	; (80065ac <TouchLightsActivity+0xd0>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064fc:	d352      	bcc.n	80065a4 <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80064fe:	1d3a      	adds	r2, r7, #4
 8006500:	1dbb      	adds	r3, r7, #6
 8006502:	4611      	mov	r1, r2
 8006504:	4618      	mov	r0, r3
 8006506:	f7fb ffc1 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800650a:	88fb      	ldrh	r3, [r7, #6]
 800650c:	2b09      	cmp	r3, #9
 800650e:	d90f      	bls.n	8006530 <TouchLightsActivity+0x54>
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	2b6e      	cmp	r3, #110	; 0x6e
 8006514:	d80c      	bhi.n	8006530 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006516:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006518:	2bd7      	cmp	r3, #215	; 0xd7
 800651a:	d909      	bls.n	8006530 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800651c:	88bb      	ldrh	r3, [r7, #4]
 800651e:	2bec      	cmp	r3, #236	; 0xec
 8006520:	d806      	bhi.n	8006530 <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 8006522:	4b23      	ldr	r3, [pc, #140]	; (80065b0 <TouchLightsActivity+0xd4>)
 8006524:	2202      	movs	r2, #2
 8006526:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006528:	4b22      	ldr	r3, [pc, #136]	; (80065b4 <TouchLightsActivity+0xd8>)
 800652a:	2201      	movs	r2, #1
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	e034      	b.n	800659a <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006530:	88fb      	ldrh	r3, [r7, #6]
 8006532:	2bdb      	cmp	r3, #219	; 0xdb
 8006534:	d910      	bls.n	8006558 <TouchLightsActivity+0x7c>
 8006536:	88fb      	ldrh	r3, [r7, #6]
 8006538:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800653c:	d20c      	bcs.n	8006558 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800653e:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006540:	2bd7      	cmp	r3, #215	; 0xd7
 8006542:	d909      	bls.n	8006558 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006544:	88bb      	ldrh	r3, [r7, #4]
 8006546:	2bec      	cmp	r3, #236	; 0xec
 8006548:	d806      	bhi.n	8006558 <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 800654a:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <TouchLightsActivity+0xd4>)
 800654c:	2201      	movs	r2, #1
 800654e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006550:	4b18      	ldr	r3, [pc, #96]	; (80065b4 <TouchLightsActivity+0xd8>)
 8006552:	2201      	movs	r2, #1
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	e020      	b.n	800659a <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006558:	88fb      	ldrh	r3, [r7, #6]
 800655a:	2b77      	cmp	r3, #119	; 0x77
 800655c:	d90f      	bls.n	800657e <TouchLightsActivity+0xa2>
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	2bd2      	cmp	r3, #210	; 0xd2
 8006562:	d80c      	bhi.n	800657e <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006564:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006566:	2bd7      	cmp	r3, #215	; 0xd7
 8006568:	d909      	bls.n	800657e <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800656a:	88bb      	ldrh	r3, [r7, #4]
 800656c:	2bec      	cmp	r3, #236	; 0xec
 800656e:	d806      	bhi.n	800657e <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 8006570:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <TouchLightsActivity+0xd4>)
 8006572:	2206      	movs	r2, #6
 8006574:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006576:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <TouchLightsActivity+0xd8>)
 8006578:	2201      	movs	r2, #1
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	e00d      	b.n	800659a <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 800657e:	88fb      	ldrh	r3, [r7, #6]
 8006580:	2bc7      	cmp	r3, #199	; 0xc7
 8006582:	d90a      	bls.n	800659a <TouchLightsActivity+0xbe>
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	2be9      	cmp	r3, #233	; 0xe9
 8006588:	d807      	bhi.n	800659a <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 800658a:	480b      	ldr	r0, [pc, #44]	; (80065b8 <TouchLightsActivity+0xdc>)
 800658c:	f7fb f9ee 	bl	800196c <EF_SetFont>
				changeLightsStatusTouch(y);
 8006590:	88bb      	ldrh	r3, [r7, #4]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	4618      	mov	r0, r3
 8006596:	f001 fe57 	bl	8008248 <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 800659a:	f004 fa73 	bl	800aa84 <HAL_GetTick>
 800659e:	4603      	mov	r3, r0
 80065a0:	4a02      	ldr	r2, [pc, #8]	; (80065ac <TouchLightsActivity+0xd0>)
 80065a2:	6013      	str	r3, [r2, #0]
		}
	}
}
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20000294 	.word	0x20000294
 80065b0:	20000298 	.word	0x20000298
 80065b4:	20000259 	.word	0x20000259
 80065b8:	08027e6c 	.word	0x08027e6c

080065bc <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af02      	add	r7, sp, #8

	// Check if screen was touched
		if(XPT2046_IsTouched())
 80065c2:	f7fb ffa1 	bl	8002508 <XPT2046_IsTouched>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 80a9 	beq.w	8006720 <TouchClockActivity+0x164>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80065ce:	4856      	ldr	r0, [pc, #344]	; (8006728 <TouchClockActivity+0x16c>)
 80065d0:	f7fb f9cc 	bl	800196c <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80065d4:	f004 fa56 	bl	800aa84 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	4b54      	ldr	r3, [pc, #336]	; (800672c <TouchClockActivity+0x170>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065e4:	f0c0 809c 	bcc.w	8006720 <TouchClockActivity+0x164>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80065e8:	1d3a      	adds	r2, r7, #4
 80065ea:	1dbb      	adds	r3, r7, #6
 80065ec:	4611      	mov	r1, r2
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fb ff4c 	bl	800248c <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 80065f4:	4b4e      	ldr	r3, [pc, #312]	; (8006730 <TouchClockActivity+0x174>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d114      	bne.n	8006626 <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 80065fc:	f7fc fa46 	bl	8002a8c <DS3231_GetHour>
 8006600:	4603      	mov	r3, r0
 8006602:	461a      	mov	r2, r3
 8006604:	4b4b      	ldr	r3, [pc, #300]	; (8006734 <TouchClockActivity+0x178>)
 8006606:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8006608:	f7fc fa4c 	bl	8002aa4 <DS3231_GetMinute>
 800660c:	4603      	mov	r3, r0
 800660e:	461a      	mov	r2, r3
 8006610:	4b49      	ldr	r3, [pc, #292]	; (8006738 <TouchClockActivity+0x17c>)
 8006612:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 8006614:	f7fc fa2e 	bl	8002a74 <DS3231_GetDayOfWeek>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	4b47      	ldr	r3, [pc, #284]	; (800673c <TouchClockActivity+0x180>)
 800661e:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8006620:	4b43      	ldr	r3, [pc, #268]	; (8006730 <TouchClockActivity+0x174>)
 8006622:	2200      	movs	r2, #0
 8006624:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006626:	88fb      	ldrh	r3, [r7, #6]
 8006628:	2b09      	cmp	r3, #9
 800662a:	d912      	bls.n	8006652 <TouchClockActivity+0x96>
 800662c:	88fb      	ldrh	r3, [r7, #6]
 800662e:	2b6e      	cmp	r3, #110	; 0x6e
 8006630:	d80f      	bhi.n	8006652 <TouchClockActivity+0x96>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006632:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006634:	2bd7      	cmp	r3, #215	; 0xd7
 8006636:	d90c      	bls.n	8006652 <TouchClockActivity+0x96>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006638:	88bb      	ldrh	r3, [r7, #4]
 800663a:	2bec      	cmp	r3, #236	; 0xec
 800663c:	d809      	bhi.n	8006652 <TouchClockActivity+0x96>
				{
					State = MENUTFT_PARAMETERS;
 800663e:	4b40      	ldr	r3, [pc, #256]	; (8006740 <TouchClockActivity+0x184>)
 8006640:	2201      	movs	r2, #1
 8006642:	701a      	strb	r2, [r3, #0]
					EncoderState = ENCODER_IDLE;
 8006644:	4b3f      	ldr	r3, [pc, #252]	; (8006744 <TouchClockActivity+0x188>)
 8006646:	2200      	movs	r2, #0
 8006648:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800664a:	4b3f      	ldr	r3, [pc, #252]	; (8006748 <TouchClockActivity+0x18c>)
 800664c:	2201      	movs	r2, #1
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	e061      	b.n	8006716 <TouchClockActivity+0x15a>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	2bdb      	cmp	r3, #219	; 0xdb
 8006656:	d92c      	bls.n	80066b2 <TouchClockActivity+0xf6>
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800665e:	d228      	bcs.n	80066b2 <TouchClockActivity+0xf6>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006660:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006662:	2bd7      	cmp	r3, #215	; 0xd7
 8006664:	d925      	bls.n	80066b2 <TouchClockActivity+0xf6>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006666:	88bb      	ldrh	r3, [r7, #4]
 8006668:	2bec      	cmp	r3, #236	; 0xec
 800666a:	d822      	bhi.n	80066b2 <TouchClockActivity+0xf6>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 800666c:	4b33      	ldr	r3, [pc, #204]	; (800673c <TouchClockActivity+0x180>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f7fc fa23 	bl	8002abc <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 8006676:	4b2f      	ldr	r3, [pc, #188]	; (8006734 <TouchClockActivity+0x178>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f7fc fa30 	bl	8002ae0 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8006680:	4b2d      	ldr	r3, [pc, #180]	; (8006738 <TouchClockActivity+0x17c>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	4618      	mov	r0, r3
 8006686:	f7fc fa40 	bl	8002b0a <DS3231_SetMinute>
					DS3231_SetSecond(50);
 800668a:	2032      	movs	r0, #50	; 0x32
 800668c:	f7fc fa4f 	bl	8002b2e <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8006690:	492e      	ldr	r1, [pc, #184]	; (800674c <TouchClockActivity+0x190>)
 8006692:	482f      	ldr	r0, [pc, #188]	; (8006750 <TouchClockActivity+0x194>)
 8006694:	f00b ff86 	bl	80125a4 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 8006698:	f24c 6318 	movw	r3, #50712	; 0xc618
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	2301      	movs	r3, #1
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80066a6:	220a      	movs	r2, #10
 80066a8:	212f      	movs	r1, #47	; 0x2f
 80066aa:	4829      	ldr	r0, [pc, #164]	; (8006750 <TouchClockActivity+0x194>)
 80066ac:	f7fb fb78 	bl	8001da0 <EF_PutString>
 80066b0:	e031      	b.n	8006716 <TouchClockActivity+0x15a>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	2b6d      	cmp	r3, #109	; 0x6d
 80066b6:	d912      	bls.n	80066de <TouchClockActivity+0x122>
 80066b8:	88fb      	ldrh	r3, [r7, #6]
 80066ba:	2bdc      	cmp	r3, #220	; 0xdc
 80066bc:	d80f      	bhi.n	80066de <TouchClockActivity+0x122>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 80066be:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 80066c0:	2bbd      	cmp	r3, #189	; 0xbd
 80066c2:	d90c      	bls.n	80066de <TouchClockActivity+0x122>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 80066c4:	88bb      	ldrh	r3, [r7, #4]
 80066c6:	2bd4      	cmp	r3, #212	; 0xd4
 80066c8:	d809      	bhi.n	80066de <TouchClockActivity+0x122>
				{
					State = MENUTFT_SCHEDULE_1;
 80066ca:	4b1d      	ldr	r3, [pc, #116]	; (8006740 <TouchClockActivity+0x184>)
 80066cc:	2207      	movs	r2, #7
 80066ce:	701a      	strb	r2, [r3, #0]
					EncoderState = ENCODER_IDLE;
 80066d0:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <TouchClockActivity+0x188>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80066d6:	4b1c      	ldr	r3, [pc, #112]	; (8006748 <TouchClockActivity+0x18c>)
 80066d8:	2201      	movs	r2, #1
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	e01b      	b.n	8006716 <TouchClockActivity+0x15a>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	2bef      	cmp	r3, #239	; 0xef
 80066e2:	d90a      	bls.n	80066fa <TouchClockActivity+0x13e>
 80066e4:	88fb      	ldrh	r3, [r7, #6]
 80066e6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80066ea:	d806      	bhi.n	80066fa <TouchClockActivity+0x13e>
				{
					clockIncreaseOneHourAndMinute(x, y);
 80066ec:	88fb      	ldrh	r3, [r7, #6]
 80066ee:	88ba      	ldrh	r2, [r7, #4]
 80066f0:	4611      	mov	r1, r2
 80066f2:	4618      	mov	r0, r3
 80066f4:	f001 fc38 	bl	8007f68 <clockIncreaseOneHourAndMinute>
 80066f8:	e00d      	b.n	8006716 <TouchClockActivity+0x15a>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 80066fa:	88fb      	ldrh	r3, [r7, #6]
 80066fc:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006700:	d309      	bcc.n	8006716 <TouchClockActivity+0x15a>
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006708:	d805      	bhi.n	8006716 <TouchClockActivity+0x15a>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	88ba      	ldrh	r2, [r7, #4]
 800670e:	4611      	mov	r1, r2
 8006710:	4618      	mov	r0, r3
 8006712:	f001 fcc1 	bl	8008098 <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 8006716:	f004 f9b5 	bl	800aa84 <HAL_GetTick>
 800671a:	4603      	mov	r3, r0
 800671c:	4a03      	ldr	r2, [pc, #12]	; (800672c <TouchClockActivity+0x170>)
 800671e:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	08029de4 	.word	0x08029de4
 800672c:	20000294 	.word	0x20000294
 8006730:	2000025a 	.word	0x2000025a
 8006734:	20000032 	.word	0x20000032
 8006738:	20000033 	.word	0x20000033
 800673c:	20000031 	.word	0x20000031
 8006740:	20000298 	.word	0x20000298
 8006744:	20000299 	.word	0x20000299
 8006748:	20000259 	.word	0x20000259
 800674c:	080167fc 	.word	0x080167fc
 8006750:	200002c8 	.word	0x200002c8

08006754 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
	if(XPT2046_IsTouched())
 800675a:	f7fb fed5 	bl	8002508 <XPT2046_IsTouched>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d034      	beq.n	80067ce <TouchPredefinedActivityActivity+0x7a>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006764:	f004 f98e 	bl	800aa84 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <TouchPredefinedActivityActivity+0x84>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006774:	d32b      	bcc.n	80067ce <TouchPredefinedActivityActivity+0x7a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006776:	1d3a      	adds	r2, r7, #4
 8006778:	1dbb      	adds	r3, r7, #6
 800677a:	4611      	mov	r1, r2
 800677c:	4618      	mov	r0, r3
 800677e:	f7fb fe85 	bl	800248c <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 8006782:	4816      	ldr	r0, [pc, #88]	; (80067dc <TouchPredefinedActivityActivity+0x88>)
 8006784:	f7fb f8f2 	bl	800196c <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006788:	88fb      	ldrh	r3, [r7, #6]
 800678a:	2b09      	cmp	r3, #9
 800678c:	d90f      	bls.n	80067ae <TouchPredefinedActivityActivity+0x5a>
 800678e:	88fb      	ldrh	r3, [r7, #6]
 8006790:	2b6e      	cmp	r3, #110	; 0x6e
 8006792:	d80c      	bhi.n	80067ae <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006794:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006796:	2bd7      	cmp	r3, #215	; 0xd7
 8006798:	d909      	bls.n	80067ae <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800679a:	88bb      	ldrh	r3, [r7, #4]
 800679c:	2bec      	cmp	r3, #236	; 0xec
 800679e:	d806      	bhi.n	80067ae <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <TouchPredefinedActivityActivity+0x8c>)
 80067a2:	2202      	movs	r2, #2
 80067a4:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80067a6:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <TouchPredefinedActivityActivity+0x90>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	e00a      	b.n	80067c4 <TouchPredefinedActivityActivity+0x70>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	2b63      	cmp	r3, #99	; 0x63
 80067b2:	d907      	bls.n	80067c4 <TouchPredefinedActivityActivity+0x70>
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	2bdc      	cmp	r3, #220	; 0xdc
 80067b8:	d804      	bhi.n	80067c4 <TouchPredefinedActivityActivity+0x70>
			{
				predefinedActivityTouchAction(y);
 80067ba:	88bb      	ldrh	r3, [r7, #4]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 fd9a 	bl	80082f8 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 80067c4:	f004 f95e 	bl	800aa84 <HAL_GetTick>
 80067c8:	4603      	mov	r3, r0
 80067ca:	4a03      	ldr	r2, [pc, #12]	; (80067d8 <TouchPredefinedActivityActivity+0x84>)
 80067cc:	6013      	str	r3, [r2, #0]
		}
	}
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000294 	.word	0x20000294
 80067dc:	08027e6c 	.word	0x08027e6c
 80067e0:	20000298 	.word	0x20000298
 80067e4:	20000259 	.word	0x20000259

080067e8 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 80067ee:	f7fb fe8b 	bl	8002508 <XPT2046_IsTouched>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d050      	beq.n	800689a <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80067f8:	482a      	ldr	r0, [pc, #168]	; (80068a4 <TouchWSLedActivity+0xbc>)
 80067fa:	f7fb f8b7 	bl	800196c <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80067fe:	f004 f941 	bl	800aa84 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	4b28      	ldr	r3, [pc, #160]	; (80068a8 <TouchWSLedActivity+0xc0>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800680e:	d344      	bcc.n	800689a <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006810:	1d3a      	adds	r2, r7, #4
 8006812:	1dbb      	adds	r3, r7, #6
 8006814:	4611      	mov	r1, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f7fb fe38 	bl	800248c <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 800681c:	4b23      	ldr	r3, [pc, #140]	; (80068ac <TouchWSLedActivity+0xc4>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d10b      	bne.n	800683c <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8006824:	bf00      	nop
 8006826:	2201      	movs	r2, #1
 8006828:	4921      	ldr	r1, [pc, #132]	; (80068b0 <TouchWSLedActivity+0xc8>)
 800682a:	2001      	movs	r0, #1
 800682c:	f7fc f9dc 	bl	8002be8 <eeprom_read>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1f7      	bne.n	8006826 <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 8006836:	4b1f      	ldr	r3, [pc, #124]	; (80068b4 <TouchWSLedActivity+0xcc>)
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	2b09      	cmp	r3, #9
 8006840:	d90f      	bls.n	8006862 <TouchWSLedActivity+0x7a>
 8006842:	88fb      	ldrh	r3, [r7, #6]
 8006844:	2b6e      	cmp	r3, #110	; 0x6e
 8006846:	d80c      	bhi.n	8006862 <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006848:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800684a:	2bd7      	cmp	r3, #215	; 0xd7
 800684c:	d909      	bls.n	8006862 <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800684e:	88bb      	ldrh	r3, [r7, #4]
 8006850:	2bec      	cmp	r3, #236	; 0xec
 8006852:	d806      	bhi.n	8006862 <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 8006854:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <TouchWSLedActivity+0xd0>)
 8006856:	2205      	movs	r2, #5
 8006858:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800685a:	4b18      	ldr	r3, [pc, #96]	; (80068bc <TouchWSLedActivity+0xd4>)
 800685c:	2201      	movs	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e016      	b.n	8006890 <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 8006862:	88bb      	ldrh	r3, [r7, #4]
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d90b      	bls.n	8006880 <TouchWSLedActivity+0x98>
 8006868:	88bb      	ldrh	r3, [r7, #4]
 800686a:	2b56      	cmp	r3, #86	; 0x56
 800686c:	d808      	bhi.n	8006880 <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	88ba      	ldrh	r2, [r7, #4]
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	4611      	mov	r1, r2
 8006878:	4618      	mov	r0, r3
 800687a:	f001 fe27 	bl	80084cc <increaseNumberOfWSLedOnTFT>
 800687e:	e007      	b.n	8006890 <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 8006880:	88fb      	ldrh	r3, [r7, #6]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	88ba      	ldrh	r2, [r7, #4]
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	4611      	mov	r1, r2
 800688a:	4618      	mov	r0, r3
 800688c:	f001 fea8 	bl	80085e0 <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 8006890:	f004 f8f8 	bl	800aa84 <HAL_GetTick>
 8006894:	4603      	mov	r3, r0
 8006896:	4a04      	ldr	r2, [pc, #16]	; (80068a8 <TouchWSLedActivity+0xc0>)
 8006898:	6013      	str	r3, [r2, #0]
			}
		}
}
 800689a:	bf00      	nop
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	08029de4 	.word	0x08029de4
 80068a8:	20000294 	.word	0x20000294
 80068ac:	2000025a 	.word	0x2000025a
 80068b0:	20000034 	.word	0x20000034
 80068b4:	2000025b 	.word	0x2000025b
 80068b8:	20000298 	.word	0x20000298
 80068bc:	20000259 	.word	0x20000259

080068c0 <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 80068c6:	4b70      	ldr	r3, [pc, #448]	; (8006a88 <Schedule1Activity+0x1c8>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d105      	bne.n	80068da <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 80068ce:	2001      	movs	r0, #1
 80068d0:	f001 faf6 	bl	8007ec0 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 80068d4:	4b6c      	ldr	r3, [pc, #432]	; (8006a88 <Schedule1Activity+0x1c8>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 80068da:	f7fb fe15 	bl	8002508 <XPT2046_IsTouched>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80cc 	beq.w	8006a7e <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80068e6:	f004 f8cd 	bl	800aa84 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	4b67      	ldr	r3, [pc, #412]	; (8006a8c <Schedule1Activity+0x1cc>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068f6:	f0c0 80c2 	bcc.w	8006a7e <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80068fa:	1d3a      	adds	r2, r7, #4
 80068fc:	1dbb      	adds	r3, r7, #6
 80068fe:	4611      	mov	r1, r2
 8006900:	4618      	mov	r0, r3
 8006902:	f7fb fdc3 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	2b09      	cmp	r3, #9
 800690a:	d90f      	bls.n	800692c <Schedule1Activity+0x6c>
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	2b6e      	cmp	r3, #110	; 0x6e
 8006910:	d80c      	bhi.n	800692c <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006912:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006914:	2bd7      	cmp	r3, #215	; 0xd7
 8006916:	d909      	bls.n	800692c <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006918:	88bb      	ldrh	r3, [r7, #4]
 800691a:	2bec      	cmp	r3, #236	; 0xec
 800691c:	d806      	bhi.n	800692c <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 800691e:	4b5c      	ldr	r3, [pc, #368]	; (8006a90 <Schedule1Activity+0x1d0>)
 8006920:	2203      	movs	r2, #3
 8006922:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006924:	4b5b      	ldr	r3, [pc, #364]	; (8006a94 <Schedule1Activity+0x1d4>)
 8006926:	2201      	movs	r2, #1
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	e0a3      	b.n	8006a74 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 800692c:	88fb      	ldrh	r3, [r7, #6]
 800692e:	2bdb      	cmp	r3, #219	; 0xdb
 8006930:	d910      	bls.n	8006954 <Schedule1Activity+0x94>
 8006932:	88fb      	ldrh	r3, [r7, #6]
 8006934:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006938:	d20c      	bcs.n	8006954 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800693a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 800693c:	2bd7      	cmp	r3, #215	; 0xd7
 800693e:	d909      	bls.n	8006954 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006940:	88bb      	ldrh	r3, [r7, #4]
 8006942:	2bec      	cmp	r3, #236	; 0xec
 8006944:	d806      	bhi.n	8006954 <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 8006946:	4b52      	ldr	r3, [pc, #328]	; (8006a90 <Schedule1Activity+0x1d0>)
 8006948:	2208      	movs	r2, #8
 800694a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800694c:	4b51      	ldr	r3, [pc, #324]	; (8006a94 <Schedule1Activity+0x1d4>)
 800694e:	2201      	movs	r2, #1
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	e08f      	b.n	8006a74 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006954:	88bb      	ldrh	r3, [r7, #4]
 8006956:	2b31      	cmp	r3, #49	; 0x31
 8006958:	d909      	bls.n	800696e <Schedule1Activity+0xae>
 800695a:	88bb      	ldrh	r3, [r7, #4]
 800695c:	2b46      	cmp	r3, #70	; 0x46
 800695e:	d806      	bhi.n	800696e <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 8006960:	88fb      	ldrh	r3, [r7, #6]
 8006962:	88ba      	ldrh	r2, [r7, #4]
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f000 f99a 	bl	8006ca0 <MenuTFTSchedule1ActivityDayOfWeekRow>
 800696c:	e082      	b.n	8006a74 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 800696e:	88bb      	ldrh	r3, [r7, #4]
 8006970:	2b64      	cmp	r3, #100	; 0x64
 8006972:	d909      	bls.n	8006988 <Schedule1Activity+0xc8>
 8006974:	88bb      	ldrh	r3, [r7, #4]
 8006976:	2b79      	cmp	r3, #121	; 0x79
 8006978:	d806      	bhi.n	8006988 <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 800697a:	88fb      	ldrh	r3, [r7, #6]
 800697c:	88ba      	ldrh	r2, [r7, #4]
 800697e:	4611      	mov	r1, r2
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fc67 	bl	8007254 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 8006986:	e075      	b.n	8006a74 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006988:	88bb      	ldrh	r3, [r7, #4]
 800698a:	2b87      	cmp	r3, #135	; 0x87
 800698c:	d909      	bls.n	80069a2 <Schedule1Activity+0xe2>
 800698e:	88bb      	ldrh	r3, [r7, #4]
 8006990:	2b9c      	cmp	r3, #156	; 0x9c
 8006992:	d806      	bhi.n	80069a2 <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 8006994:	88fb      	ldrh	r3, [r7, #6]
 8006996:	88ba      	ldrh	r2, [r7, #4]
 8006998:	4611      	mov	r1, r2
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fd24 	bl	80073e8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 80069a0:	e068      	b.n	8006a74 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80069a2:	88bb      	ldrh	r3, [r7, #4]
 80069a4:	2ba9      	cmp	r3, #169	; 0xa9
 80069a6:	d909      	bls.n	80069bc <Schedule1Activity+0xfc>
 80069a8:	88bb      	ldrh	r3, [r7, #4]
 80069aa:	2bbe      	cmp	r3, #190	; 0xbe
 80069ac:	d806      	bhi.n	80069bc <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	88ba      	ldrh	r2, [r7, #4]
 80069b2:	4611      	mov	r1, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 f857 	bl	8007a68 <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 80069ba:	e05b      	b.n	8006a74 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80069bc:	88fb      	ldrh	r3, [r7, #6]
 80069be:	2b77      	cmp	r3, #119	; 0x77
 80069c0:	d958      	bls.n	8006a74 <Schedule1Activity+0x1b4>
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	2bd2      	cmp	r3, #210	; 0xd2
 80069c6:	d855      	bhi.n	8006a74 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80069c8:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80069ca:	2bd7      	cmp	r3, #215	; 0xd7
 80069cc:	d952      	bls.n	8006a74 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80069ce:	88bb      	ldrh	r3, [r7, #4]
 80069d0:	2bec      	cmp	r3, #236	; 0xec
 80069d2:	d84f      	bhi.n	8006a74 <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 80069d4:	4b30      	ldr	r3, [pc, #192]	; (8006a98 <Schedule1Activity+0x1d8>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	4619      	mov	r1, r3
 80069da:	2001      	movs	r0, #1
 80069dc:	f7fc fc7b 	bl	80032d6 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 80069e0:	4b2e      	ldr	r3, [pc, #184]	; (8006a9c <Schedule1Activity+0x1dc>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	4619      	mov	r1, r3
 80069e6:	2001      	movs	r0, #1
 80069e8:	f7fc fc98 	bl	800331c <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 80069ec:	4b2c      	ldr	r3, [pc, #176]	; (8006aa0 <Schedule1Activity+0x1e0>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	4619      	mov	r1, r3
 80069f2:	2001      	movs	r0, #1
 80069f4:	f7fc fcb5 	bl	8003362 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 80069f8:	4b2a      	ldr	r3, [pc, #168]	; (8006aa4 <Schedule1Activity+0x1e4>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	4619      	mov	r1, r3
 80069fe:	2001      	movs	r0, #1
 8006a00:	f7fc fcd2 	bl	80033a8 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006a04:	4928      	ldr	r1, [pc, #160]	; (8006aa8 <Schedule1Activity+0x1e8>)
 8006a06:	2001      	movs	r0, #1
 8006a08:	f7fc fac5 	bl	8002f96 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006a0c:	4927      	ldr	r1, [pc, #156]	; (8006aac <Schedule1Activity+0x1ec>)
 8006a0e:	2001      	movs	r0, #1
 8006a10:	f7fc fb6c 	bl	80030ec <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006a14:	4826      	ldr	r0, [pc, #152]	; (8006ab0 <Schedule1Activity+0x1f0>)
 8006a16:	f7fa ffa9 	bl	800196c <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 8006a1a:	4926      	ldr	r1, [pc, #152]	; (8006ab4 <Schedule1Activity+0x1f4>)
 8006a1c:	4826      	ldr	r0, [pc, #152]	; (8006ab8 <Schedule1Activity+0x1f8>)
 8006a1e:	f00b fdc1 	bl	80125a4 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006a22:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	2301      	movs	r3, #1
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006a30:	220a      	movs	r2, #10
 8006a32:	2128      	movs	r1, #40	; 0x28
 8006a34:	4820      	ldr	r0, [pc, #128]	; (8006ab8 <Schedule1Activity+0x1f8>)
 8006a36:	f7fb f9b3 	bl	8001da0 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006a3a:	4820      	ldr	r0, [pc, #128]	; (8006abc <Schedule1Activity+0x1fc>)
 8006a3c:	f7fa ff96 	bl	800196c <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006a40:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	2305      	movs	r3, #5
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	2314      	movs	r3, #20
 8006a4c:	225a      	movs	r2, #90	; 0x5a
 8006a4e:	21d8      	movs	r1, #216	; 0xd8
 8006a50:	2078      	movs	r0, #120	; 0x78
 8006a52:	f7fa ff3a 	bl	80018ca <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006a56:	491a      	ldr	r1, [pc, #104]	; (8006ac0 <Schedule1Activity+0x200>)
 8006a58:	4817      	ldr	r0, [pc, #92]	; (8006ab8 <Schedule1Activity+0x1f8>)
 8006a5a:	f00b fda3 	bl	80125a4 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006a5e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	2300      	movs	r3, #0
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	22da      	movs	r2, #218	; 0xda
 8006a6c:	217e      	movs	r1, #126	; 0x7e
 8006a6e:	4812      	ldr	r0, [pc, #72]	; (8006ab8 <Schedule1Activity+0x1f8>)
 8006a70:	f7fb f996 	bl	8001da0 <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 8006a74:	f004 f806 	bl	800aa84 <HAL_GetTick>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	4a04      	ldr	r2, [pc, #16]	; (8006a8c <Schedule1Activity+0x1cc>)
 8006a7c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	2000025c 	.word	0x2000025c
 8006a8c:	20000294 	.word	0x20000294
 8006a90:	20000298 	.word	0x20000298
 8006a94:	20000259 	.word	0x20000259
 8006a98:	20000285 	.word	0x20000285
 8006a9c:	20000287 	.word	0x20000287
 8006aa0:	20000286 	.word	0x20000286
 8006aa4:	20000288 	.word	0x20000288
 8006aa8:	20000260 	.word	0x20000260
 8006aac:	20000268 	.word	0x20000268
 8006ab0:	08029de4 	.word	0x08029de4
 8006ab4:	0801680c 	.word	0x0801680c
 8006ab8:	200002c8 	.word	0x200002c8
 8006abc:	08027e6c 	.word	0x08027e6c
 8006ac0:	08016820 	.word	0x08016820

08006ac4 <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006aca:	4b66      	ldr	r3, [pc, #408]	; (8006c64 <Schedule2Activity+0x1a0>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d105      	bne.n	8006ade <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 8006ad2:	2002      	movs	r0, #2
 8006ad4:	f001 f9f4 	bl	8007ec0 <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006ad8:	4b62      	ldr	r3, [pc, #392]	; (8006c64 <Schedule2Activity+0x1a0>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006ade:	f7fb fd13 	bl	8002508 <XPT2046_IsTouched>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80b8 	beq.w	8006c5a <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006aea:	f003 ffcb 	bl	800aa84 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	4b5d      	ldr	r3, [pc, #372]	; (8006c68 <Schedule2Activity+0x1a4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006afa:	f0c0 80ae 	bcc.w	8006c5a <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006afe:	1d3a      	adds	r2, r7, #4
 8006b00:	1dbb      	adds	r3, r7, #6
 8006b02:	4611      	mov	r1, r2
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fb fcc1 	bl	800248c <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	2b09      	cmp	r3, #9
 8006b0e:	d90f      	bls.n	8006b30 <Schedule2Activity+0x6c>
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	2b6e      	cmp	r3, #110	; 0x6e
 8006b14:	d80c      	bhi.n	8006b30 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006b16:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006b18:	2bd7      	cmp	r3, #215	; 0xd7
 8006b1a:	d909      	bls.n	8006b30 <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006b1c:	88bb      	ldrh	r3, [r7, #4]
 8006b1e:	2bec      	cmp	r3, #236	; 0xec
 8006b20:	d806      	bhi.n	8006b30 <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006b22:	4b52      	ldr	r3, [pc, #328]	; (8006c6c <Schedule2Activity+0x1a8>)
 8006b24:	2203      	movs	r2, #3
 8006b26:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006b28:	4b51      	ldr	r3, [pc, #324]	; (8006c70 <Schedule2Activity+0x1ac>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	e08f      	b.n	8006c50 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006b30:	88bb      	ldrh	r3, [r7, #4]
 8006b32:	2b31      	cmp	r3, #49	; 0x31
 8006b34:	d909      	bls.n	8006b4a <Schedule2Activity+0x86>
 8006b36:	88bb      	ldrh	r3, [r7, #4]
 8006b38:	2b46      	cmp	r3, #70	; 0x46
 8006b3a:	d806      	bhi.n	8006b4a <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 8006b3c:	88fb      	ldrh	r3, [r7, #6]
 8006b3e:	88ba      	ldrh	r2, [r7, #4]
 8006b40:	4611      	mov	r1, r2
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fd1a 	bl	800757c <MenuTFTSchedule2ActivityDayOfWeekRow>
 8006b48:	e082      	b.n	8006c50 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006b4a:	88bb      	ldrh	r3, [r7, #4]
 8006b4c:	2b64      	cmp	r3, #100	; 0x64
 8006b4e:	d909      	bls.n	8006b64 <Schedule2Activity+0xa0>
 8006b50:	88bb      	ldrh	r3, [r7, #4]
 8006b52:	2b79      	cmp	r3, #121	; 0x79
 8006b54:	d806      	bhi.n	8006b64 <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 8006b56:	88fb      	ldrh	r3, [r7, #6]
 8006b58:	88ba      	ldrh	r2, [r7, #4]
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fdef 	bl	8007740 <MenuTFTSchedule2ActivityHourMinuteONAdd>
 8006b62:	e075      	b.n	8006c50 <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006b64:	88bb      	ldrh	r3, [r7, #4]
 8006b66:	2b87      	cmp	r3, #135	; 0x87
 8006b68:	d909      	bls.n	8006b7e <Schedule2Activity+0xba>
 8006b6a:	88bb      	ldrh	r3, [r7, #4]
 8006b6c:	2b9c      	cmp	r3, #156	; 0x9c
 8006b6e:	d806      	bhi.n	8006b7e <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	88ba      	ldrh	r2, [r7, #4]
 8006b74:	4611      	mov	r1, r2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 feac 	bl	80078d4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 8006b7c:	e068      	b.n	8006c50 <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006b7e:	88bb      	ldrh	r3, [r7, #4]
 8006b80:	2ba9      	cmp	r3, #169	; 0xa9
 8006b82:	d909      	bls.n	8006b98 <Schedule2Activity+0xd4>
 8006b84:	88bb      	ldrh	r3, [r7, #4]
 8006b86:	2bbe      	cmp	r3, #190	; 0xbe
 8006b88:	d806      	bhi.n	8006b98 <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	88ba      	ldrh	r2, [r7, #4]
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 f87f 	bl	8007c94 <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 8006b96:	e05b      	b.n	8006c50 <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006b98:	88fb      	ldrh	r3, [r7, #6]
 8006b9a:	2b77      	cmp	r3, #119	; 0x77
 8006b9c:	d958      	bls.n	8006c50 <Schedule2Activity+0x18c>
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	2bd2      	cmp	r3, #210	; 0xd2
 8006ba2:	d855      	bhi.n	8006c50 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006ba4:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006ba6:	2bd7      	cmp	r3, #215	; 0xd7
 8006ba8:	d952      	bls.n	8006c50 <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006baa:	88bb      	ldrh	r3, [r7, #4]
 8006bac:	2bec      	cmp	r3, #236	; 0xec
 8006bae:	d84f      	bhi.n	8006c50 <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 8006bb0:	4b30      	ldr	r3, [pc, #192]	; (8006c74 <Schedule2Activity+0x1b0>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	2002      	movs	r0, #2
 8006bb8:	f7fc fb8d 	bl	80032d6 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006bbc:	4b2e      	ldr	r3, [pc, #184]	; (8006c78 <Schedule2Activity+0x1b4>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	2002      	movs	r0, #2
 8006bc4:	f7fc fbaa 	bl	800331c <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006bc8:	4b2c      	ldr	r3, [pc, #176]	; (8006c7c <Schedule2Activity+0x1b8>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	2002      	movs	r0, #2
 8006bd0:	f7fc fbc7 	bl	8003362 <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 8006bd4:	4b2a      	ldr	r3, [pc, #168]	; (8006c80 <Schedule2Activity+0x1bc>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	2002      	movs	r0, #2
 8006bdc:	f7fc fbe4 	bl	80033a8 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 8006be0:	4928      	ldr	r1, [pc, #160]	; (8006c84 <Schedule2Activity+0x1c0>)
 8006be2:	2002      	movs	r0, #2
 8006be4:	f7fc f9d7 	bl	8002f96 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 8006be8:	4927      	ldr	r1, [pc, #156]	; (8006c88 <Schedule2Activity+0x1c4>)
 8006bea:	2002      	movs	r0, #2
 8006bec:	f7fc fa7e 	bl	80030ec <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006bf0:	4826      	ldr	r0, [pc, #152]	; (8006c8c <Schedule2Activity+0x1c8>)
 8006bf2:	f7fa febb 	bl	800196c <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 8006bf6:	4926      	ldr	r1, [pc, #152]	; (8006c90 <Schedule2Activity+0x1cc>)
 8006bf8:	4826      	ldr	r0, [pc, #152]	; (8006c94 <Schedule2Activity+0x1d0>)
 8006bfa:	f00b fcd3 	bl	80125a4 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006bfe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	2301      	movs	r3, #1
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006c0c:	220a      	movs	r2, #10
 8006c0e:	2128      	movs	r1, #40	; 0x28
 8006c10:	4820      	ldr	r0, [pc, #128]	; (8006c94 <Schedule2Activity+0x1d0>)
 8006c12:	f7fb f8c5 	bl	8001da0 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006c16:	4820      	ldr	r0, [pc, #128]	; (8006c98 <Schedule2Activity+0x1d4>)
 8006c18:	f7fa fea8 	bl	800196c <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006c1c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	2305      	movs	r3, #5
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	2314      	movs	r3, #20
 8006c28:	225a      	movs	r2, #90	; 0x5a
 8006c2a:	21d8      	movs	r1, #216	; 0xd8
 8006c2c:	2078      	movs	r0, #120	; 0x78
 8006c2e:	f7fa fe4c 	bl	80018ca <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006c32:	491a      	ldr	r1, [pc, #104]	; (8006c9c <Schedule2Activity+0x1d8>)
 8006c34:	4817      	ldr	r0, [pc, #92]	; (8006c94 <Schedule2Activity+0x1d0>)
 8006c36:	f00b fcb5 	bl	80125a4 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006c3a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	2300      	movs	r3, #0
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	2300      	movs	r3, #0
 8006c46:	22da      	movs	r2, #218	; 0xda
 8006c48:	217e      	movs	r1, #126	; 0x7e
 8006c4a:	4812      	ldr	r0, [pc, #72]	; (8006c94 <Schedule2Activity+0x1d0>)
 8006c4c:	f7fb f8a8 	bl	8001da0 <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 8006c50:	f003 ff18 	bl	800aa84 <HAL_GetTick>
 8006c54:	4603      	mov	r3, r0
 8006c56:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <Schedule2Activity+0x1a4>)
 8006c58:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	2000025c 	.word	0x2000025c
 8006c68:	20000294 	.word	0x20000294
 8006c6c:	20000298 	.word	0x20000298
 8006c70:	20000259 	.word	0x20000259
 8006c74:	20000289 	.word	0x20000289
 8006c78:	2000028b 	.word	0x2000028b
 8006c7c:	2000028a 	.word	0x2000028a
 8006c80:	2000028c 	.word	0x2000028c
 8006c84:	20000274 	.word	0x20000274
 8006c88:	2000027c 	.word	0x2000027c
 8006c8c:	08029de4 	.word	0x08029de4
 8006c90:	08016828 	.word	0x08016828
 8006c94:	200002c8 	.word	0x200002c8
 8006c98:	08027e6c 	.word	0x08027e6c
 8006c9c:	08016820 	.word	0x08016820

08006ca0 <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	460a      	mov	r2, r1
 8006caa:	80fb      	strh	r3, [r7, #6]
 8006cac:	4613      	mov	r3, r2
 8006cae:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	2b3b      	cmp	r3, #59	; 0x3b
 8006cb4:	d91a      	bls.n	8006cec <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	2b50      	cmp	r3, #80	; 0x50
 8006cba:	d817      	bhi.n	8006cec <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006cbc:	4b68      	ldr	r3, [pc, #416]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	2001      	movs	r0, #1
 8006cc8:	f000 f8cc 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8006ccc:	e003      	b.n	8006cd6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006cce:	2101      	movs	r1, #1
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	f000 f8c7 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006cd6:	4b62      	ldr	r3, [pc, #392]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bf0c      	ite	eq
 8006cde:	2301      	moveq	r3, #1
 8006ce0:	2300      	movne	r3, #0
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4b5e      	ldr	r3, [pc, #376]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	e0b4      	b.n	8006e56 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	2b59      	cmp	r3, #89	; 0x59
 8006cf0:	d91a      	bls.n	8006d28 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	2b6e      	cmp	r3, #110	; 0x6e
 8006cf6:	d817      	bhi.n	8006d28 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006cf8:	4b59      	ldr	r3, [pc, #356]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006cfa:	785b      	ldrb	r3, [r3, #1]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d004      	beq.n	8006d0a <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 8006d00:	2100      	movs	r1, #0
 8006d02:	2002      	movs	r0, #2
 8006d04:	f000 f8ae 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8006d08:	e003      	b.n	8006d12 <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	2002      	movs	r0, #2
 8006d0e:	f000 f8a9 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 8006d12:	4b53      	ldr	r3, [pc, #332]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d14:	785b      	ldrb	r3, [r3, #1]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	bf0c      	ite	eq
 8006d1a:	2301      	moveq	r3, #1
 8006d1c:	2300      	movne	r3, #0
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	4b4f      	ldr	r3, [pc, #316]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d24:	705a      	strb	r2, [r3, #1]
 8006d26:	e096      	b.n	8006e56 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006d28:	88fb      	ldrh	r3, [r7, #6]
 8006d2a:	2b77      	cmp	r3, #119	; 0x77
 8006d2c:	d91a      	bls.n	8006d64 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	2b8c      	cmp	r3, #140	; 0x8c
 8006d32:	d817      	bhi.n	8006d64 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006d34:	4b4a      	ldr	r3, [pc, #296]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d36:	789b      	ldrb	r3, [r3, #2]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d004      	beq.n	8006d46 <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	2003      	movs	r0, #3
 8006d40:	f000 f890 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8006d44:	e003      	b.n	8006d4e <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8006d46:	2101      	movs	r1, #1
 8006d48:	2003      	movs	r0, #3
 8006d4a:	f000 f88b 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 8006d4e:	4b44      	ldr	r3, [pc, #272]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d50:	789b      	ldrb	r3, [r3, #2]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	bf0c      	ite	eq
 8006d56:	2301      	moveq	r3, #1
 8006d58:	2300      	movne	r3, #0
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4b40      	ldr	r3, [pc, #256]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d60:	709a      	strb	r2, [r3, #2]
 8006d62:	e078      	b.n	8006e56 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8006d64:	88fb      	ldrh	r3, [r7, #6]
 8006d66:	2b95      	cmp	r3, #149	; 0x95
 8006d68:	d91a      	bls.n	8006da0 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	2baa      	cmp	r3, #170	; 0xaa
 8006d6e:	d817      	bhi.n	8006da0 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8006d70:	4b3b      	ldr	r3, [pc, #236]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d72:	78db      	ldrb	r3, [r3, #3]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d004      	beq.n	8006d82 <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 8006d78:	2100      	movs	r1, #0
 8006d7a:	2004      	movs	r0, #4
 8006d7c:	f000 f872 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8006d80:	e003      	b.n	8006d8a <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8006d82:	2101      	movs	r1, #1
 8006d84:	2004      	movs	r0, #4
 8006d86:	f000 f86d 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 8006d8a:	4b35      	ldr	r3, [pc, #212]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d8c:	78db      	ldrb	r3, [r3, #3]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bf0c      	ite	eq
 8006d92:	2301      	moveq	r3, #1
 8006d94:	2300      	movne	r3, #0
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4b31      	ldr	r3, [pc, #196]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006d9c:	70da      	strb	r2, [r3, #3]
 8006d9e:	e05a      	b.n	8006e56 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8006da0:	88fb      	ldrh	r3, [r7, #6]
 8006da2:	2bb3      	cmp	r3, #179	; 0xb3
 8006da4:	d91a      	bls.n	8006ddc <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 8006da6:	88fb      	ldrh	r3, [r7, #6]
 8006da8:	2bc8      	cmp	r3, #200	; 0xc8
 8006daa:	d817      	bhi.n	8006ddc <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006dac:	4b2c      	ldr	r3, [pc, #176]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006dae:	791b      	ldrb	r3, [r3, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d004      	beq.n	8006dbe <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 8006db4:	2100      	movs	r1, #0
 8006db6:	2005      	movs	r0, #5
 8006db8:	f000 f854 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8006dbc:	e003      	b.n	8006dc6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	2005      	movs	r0, #5
 8006dc2:	f000 f84f 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 8006dc6:	4b26      	ldr	r3, [pc, #152]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006dc8:	791b      	ldrb	r3, [r3, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bf0c      	ite	eq
 8006dce:	2301      	moveq	r3, #1
 8006dd0:	2300      	movne	r3, #0
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	4b22      	ldr	r3, [pc, #136]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006dd8:	711a      	strb	r2, [r3, #4]
 8006dda:	e03c      	b.n	8006e56 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006ddc:	88fb      	ldrh	r3, [r7, #6]
 8006dde:	2bd1      	cmp	r3, #209	; 0xd1
 8006de0:	d91a      	bls.n	8006e18 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 8006de2:	88fb      	ldrh	r3, [r7, #6]
 8006de4:	2be6      	cmp	r3, #230	; 0xe6
 8006de6:	d817      	bhi.n	8006e18 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006de8:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006dea:	795b      	ldrb	r3, [r3, #5]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d004      	beq.n	8006dfa <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 8006df0:	2100      	movs	r1, #0
 8006df2:	2006      	movs	r0, #6
 8006df4:	f000 f836 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8006df8:	e003      	b.n	8006e02 <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	2006      	movs	r0, #6
 8006dfe:	f000 f831 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 8006e02:	4b17      	ldr	r3, [pc, #92]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e04:	795b      	ldrb	r3, [r3, #5]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bf0c      	ite	eq
 8006e0a:	2301      	moveq	r3, #1
 8006e0c:	2300      	movne	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e14:	715a      	strb	r2, [r3, #5]
 8006e16:	e01e      	b.n	8006e56 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	2bef      	cmp	r3, #239	; 0xef
 8006e1c:	d91b      	bls.n	8006e56 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e24:	d817      	bhi.n	8006e56 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8006e26:	4b0e      	ldr	r3, [pc, #56]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e28:	799b      	ldrb	r3, [r3, #6]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d004      	beq.n	8006e38 <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 8006e2e:	2100      	movs	r1, #0
 8006e30:	2007      	movs	r0, #7
 8006e32:	f000 f817 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8006e36:	e003      	b.n	8006e40 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8006e38:	2101      	movs	r1, #1
 8006e3a:	2007      	movs	r0, #7
 8006e3c:	f000 f812 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e42:	799b      	ldrb	r3, [r3, #6]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	bf0c      	ite	eq
 8006e48:	2301      	moveq	r3, #1
 8006e4a:	2300      	movne	r3, #0
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	461a      	mov	r2, r3
 8006e50:	4b03      	ldr	r3, [pc, #12]	; (8006e60 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e52:	719a      	strb	r2, [r3, #6]
	}
}
 8006e54:	e7ff      	b.n	8006e56 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20000260 	.word	0x20000260

08006e64 <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	460a      	mov	r2, r1
 8006e6e:	71fb      	strb	r3, [r7, #7]
 8006e70:	4613      	mov	r3, r2
 8006e72:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d11a      	bne.n	8006eb0 <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 8006e7a:	79bb      	ldrb	r3, [r7, #6]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10b      	bne.n	8006e98 <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006e80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	2305      	movs	r3, #5
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	2312      	movs	r3, #18
 8006e8c:	2212      	movs	r2, #18
 8006e8e:	2133      	movs	r1, #51	; 0x33
 8006e90:	203d      	movs	r0, #61	; 0x3d
 8006e92:	f7fa fd1a 	bl	80018ca <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8006e96:	e0be      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006e98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	2305      	movs	r3, #5
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	2312      	movs	r3, #18
 8006ea4:	2212      	movs	r2, #18
 8006ea6:	2133      	movs	r1, #51	; 0x33
 8006ea8:	203d      	movs	r0, #61	; 0x3d
 8006eaa:	f7fa fd0e 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006eae:	e0b2      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d11a      	bne.n	8006eec <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 8006eb6:	79bb      	ldrb	r3, [r7, #6]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10b      	bne.n	8006ed4 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006ebc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006ec0:	9301      	str	r3, [sp, #4]
 8006ec2:	2305      	movs	r3, #5
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	2312      	movs	r3, #18
 8006ec8:	2212      	movs	r2, #18
 8006eca:	2133      	movs	r1, #51	; 0x33
 8006ecc:	205b      	movs	r0, #91	; 0x5b
 8006ece:	f7fa fcfc 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006ed2:	e0a0      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006ed4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	2305      	movs	r3, #5
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	2312      	movs	r3, #18
 8006ee0:	2212      	movs	r2, #18
 8006ee2:	2133      	movs	r1, #51	; 0x33
 8006ee4:	205b      	movs	r0, #91	; 0x5b
 8006ee6:	f7fa fcf0 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006eea:	e094      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d11a      	bne.n	8006f28 <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 8006ef2:	79bb      	ldrb	r3, [r7, #6]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006ef8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006efc:	9301      	str	r3, [sp, #4]
 8006efe:	2305      	movs	r3, #5
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	2312      	movs	r3, #18
 8006f04:	2212      	movs	r2, #18
 8006f06:	2133      	movs	r1, #51	; 0x33
 8006f08:	2079      	movs	r0, #121	; 0x79
 8006f0a:	f7fa fcde 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006f0e:	e082      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006f10:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	2305      	movs	r3, #5
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	2312      	movs	r3, #18
 8006f1c:	2212      	movs	r2, #18
 8006f1e:	2133      	movs	r1, #51	; 0x33
 8006f20:	2079      	movs	r0, #121	; 0x79
 8006f22:	f7fa fcd2 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006f26:	e076      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d11a      	bne.n	8006f64 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 8006f2e:	79bb      	ldrb	r3, [r7, #6]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10b      	bne.n	8006f4c <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006f34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006f38:	9301      	str	r3, [sp, #4]
 8006f3a:	2305      	movs	r3, #5
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	2312      	movs	r3, #18
 8006f40:	2212      	movs	r2, #18
 8006f42:	2133      	movs	r1, #51	; 0x33
 8006f44:	2097      	movs	r0, #151	; 0x97
 8006f46:	f7fa fcc0 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006f4a:	e064      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006f4c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006f50:	9301      	str	r3, [sp, #4]
 8006f52:	2305      	movs	r3, #5
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	2312      	movs	r3, #18
 8006f58:	2212      	movs	r2, #18
 8006f5a:	2133      	movs	r1, #51	; 0x33
 8006f5c:	2097      	movs	r0, #151	; 0x97
 8006f5e:	f7fa fcb4 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006f62:	e058      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	2b05      	cmp	r3, #5
 8006f68:	d11a      	bne.n	8006fa0 <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 8006f6a:	79bb      	ldrb	r3, [r7, #6]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10b      	bne.n	8006f88 <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006f70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006f74:	9301      	str	r3, [sp, #4]
 8006f76:	2305      	movs	r3, #5
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	2312      	movs	r3, #18
 8006f7c:	2212      	movs	r2, #18
 8006f7e:	2133      	movs	r1, #51	; 0x33
 8006f80:	20b5      	movs	r0, #181	; 0xb5
 8006f82:	f7fa fca2 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006f86:	e046      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006f88:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	2305      	movs	r3, #5
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	2312      	movs	r3, #18
 8006f94:	2212      	movs	r2, #18
 8006f96:	2133      	movs	r1, #51	; 0x33
 8006f98:	20b5      	movs	r0, #181	; 0xb5
 8006f9a:	f7fa fc96 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006f9e:	e03a      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	2b06      	cmp	r3, #6
 8006fa4:	d11a      	bne.n	8006fdc <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 8006fa6:	79bb      	ldrb	r3, [r7, #6]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10b      	bne.n	8006fc4 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006fac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006fb0:	9301      	str	r3, [sp, #4]
 8006fb2:	2305      	movs	r3, #5
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	2312      	movs	r3, #18
 8006fb8:	2212      	movs	r2, #18
 8006fba:	2133      	movs	r1, #51	; 0x33
 8006fbc:	20d3      	movs	r0, #211	; 0xd3
 8006fbe:	f7fa fc84 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006fc2:	e028      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006fc4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	2305      	movs	r3, #5
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	2312      	movs	r3, #18
 8006fd0:	2212      	movs	r2, #18
 8006fd2:	2133      	movs	r1, #51	; 0x33
 8006fd4:	20d3      	movs	r0, #211	; 0xd3
 8006fd6:	f7fa fc78 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006fda:	e01c      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	2b07      	cmp	r3, #7
 8006fe0:	d119      	bne.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 8006fe2:	79bb      	ldrb	r3, [r7, #6]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10b      	bne.n	8007000 <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006fe8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	2305      	movs	r3, #5
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	2312      	movs	r3, #18
 8006ff4:	2212      	movs	r2, #18
 8006ff6:	2133      	movs	r1, #51	; 0x33
 8006ff8:	20f1      	movs	r0, #241	; 0xf1
 8006ffa:	f7fa fc66 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8006ffe:	e00a      	b.n	8007016 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007000:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007004:	9301      	str	r3, [sp, #4]
 8007006:	2305      	movs	r3, #5
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	2312      	movs	r3, #18
 800700c:	2212      	movs	r2, #18
 800700e:	2133      	movs	r1, #51	; 0x33
 8007010:	20f1      	movs	r0, #241	; 0xf1
 8007012:	f7fa fc5a 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007016:	bf00      	nop
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af02      	add	r7, sp, #8
 8007024:	4603      	mov	r3, r0
 8007026:	460a      	mov	r2, r1
 8007028:	71fb      	strb	r3, [r7, #7]
 800702a:	4613      	mov	r3, r2
 800702c:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d11a      	bne.n	800706a <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 8007034:	79bb      	ldrb	r3, [r7, #6]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800703a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	2305      	movs	r3, #5
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	2312      	movs	r3, #18
 8007046:	2212      	movs	r2, #18
 8007048:	21ab      	movs	r1, #171	; 0xab
 800704a:	2016      	movs	r0, #22
 800704c:	f7fa fc3d 	bl	80018ca <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8007050:	e0fc      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007052:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	2305      	movs	r3, #5
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	2312      	movs	r3, #18
 800705e:	2212      	movs	r2, #18
 8007060:	21ab      	movs	r1, #171	; 0xab
 8007062:	2016      	movs	r0, #22
 8007064:	f7fa fc31 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007068:	e0f0      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	2b02      	cmp	r3, #2
 800706e:	d11a      	bne.n	80070a6 <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 8007070:	79bb      	ldrb	r3, [r7, #6]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10b      	bne.n	800708e <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007076:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	2305      	movs	r3, #5
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	2312      	movs	r3, #18
 8007082:	2212      	movs	r2, #18
 8007084:	21ab      	movs	r1, #171	; 0xab
 8007086:	2036      	movs	r0, #54	; 0x36
 8007088:	f7fa fc1f 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800708c:	e0de      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800708e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007092:	9301      	str	r3, [sp, #4]
 8007094:	2305      	movs	r3, #5
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	2312      	movs	r3, #18
 800709a:	2212      	movs	r2, #18
 800709c:	21ab      	movs	r1, #171	; 0xab
 800709e:	2036      	movs	r0, #54	; 0x36
 80070a0:	f7fa fc13 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80070a4:	e0d2      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d11a      	bne.n	80070e2 <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 80070ac:	79bb      	ldrb	r3, [r7, #6]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	2305      	movs	r3, #5
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	2312      	movs	r3, #18
 80070be:	2212      	movs	r2, #18
 80070c0:	21ab      	movs	r1, #171	; 0xab
 80070c2:	2056      	movs	r0, #86	; 0x56
 80070c4:	f7fa fc01 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80070c8:	e0c0      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80070ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80070ce:	9301      	str	r3, [sp, #4]
 80070d0:	2305      	movs	r3, #5
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	2312      	movs	r3, #18
 80070d6:	2212      	movs	r2, #18
 80070d8:	21ab      	movs	r1, #171	; 0xab
 80070da:	2056      	movs	r0, #86	; 0x56
 80070dc:	f7fa fbf5 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80070e0:	e0b4      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d11a      	bne.n	800711e <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 80070e8:	79bb      	ldrb	r3, [r7, #6]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10b      	bne.n	8007106 <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	2305      	movs	r3, #5
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	2312      	movs	r3, #18
 80070fa:	2212      	movs	r2, #18
 80070fc:	21ab      	movs	r1, #171	; 0xab
 80070fe:	2076      	movs	r0, #118	; 0x76
 8007100:	f7fa fbe3 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007104:	e0a2      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007106:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800710a:	9301      	str	r3, [sp, #4]
 800710c:	2305      	movs	r3, #5
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	2312      	movs	r3, #18
 8007112:	2212      	movs	r2, #18
 8007114:	21ab      	movs	r1, #171	; 0xab
 8007116:	2076      	movs	r0, #118	; 0x76
 8007118:	f7fa fbd7 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800711c:	e096      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	2b05      	cmp	r3, #5
 8007122:	d11a      	bne.n	800715a <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 8007124:	79bb      	ldrb	r3, [r7, #6]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10b      	bne.n	8007142 <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800712a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	2305      	movs	r3, #5
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	2312      	movs	r3, #18
 8007136:	2212      	movs	r2, #18
 8007138:	21ab      	movs	r1, #171	; 0xab
 800713a:	2096      	movs	r0, #150	; 0x96
 800713c:	f7fa fbc5 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007140:	e084      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007142:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	2305      	movs	r3, #5
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	2312      	movs	r3, #18
 800714e:	2212      	movs	r2, #18
 8007150:	21ab      	movs	r1, #171	; 0xab
 8007152:	2096      	movs	r0, #150	; 0x96
 8007154:	f7fa fbb9 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007158:	e078      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	2b06      	cmp	r3, #6
 800715e:	d11a      	bne.n	8007196 <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8007160:	79bb      	ldrb	r3, [r7, #6]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10b      	bne.n	800717e <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007166:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	2305      	movs	r3, #5
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	2312      	movs	r3, #18
 8007172:	2212      	movs	r2, #18
 8007174:	21ab      	movs	r1, #171	; 0xab
 8007176:	20b6      	movs	r0, #182	; 0xb6
 8007178:	f7fa fba7 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800717c:	e066      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800717e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	2305      	movs	r3, #5
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	2312      	movs	r3, #18
 800718a:	2212      	movs	r2, #18
 800718c:	21ab      	movs	r1, #171	; 0xab
 800718e:	20b6      	movs	r0, #182	; 0xb6
 8007190:	f7fa fb9b 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007194:	e05a      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	2b07      	cmp	r3, #7
 800719a:	d11a      	bne.n	80071d2 <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 800719c:	79bb      	ldrb	r3, [r7, #6]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10b      	bne.n	80071ba <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80071a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	2305      	movs	r3, #5
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	2312      	movs	r3, #18
 80071ae:	2212      	movs	r2, #18
 80071b0:	21ab      	movs	r1, #171	; 0xab
 80071b2:	20d6      	movs	r0, #214	; 0xd6
 80071b4:	f7fa fb89 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80071b8:	e048      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80071ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	2305      	movs	r3, #5
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	2312      	movs	r3, #18
 80071c6:	2212      	movs	r2, #18
 80071c8:	21ab      	movs	r1, #171	; 0xab
 80071ca:	20d6      	movs	r0, #214	; 0xd6
 80071cc:	f7fa fb7d 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80071d0:	e03c      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 80071d2:	79fb      	ldrb	r3, [r7, #7]
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d11a      	bne.n	800720e <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 80071d8:	79bb      	ldrb	r3, [r7, #6]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10b      	bne.n	80071f6 <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80071de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071e2:	9301      	str	r3, [sp, #4]
 80071e4:	2305      	movs	r3, #5
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	2312      	movs	r3, #18
 80071ea:	2212      	movs	r2, #18
 80071ec:	21ab      	movs	r1, #171	; 0xab
 80071ee:	20f6      	movs	r0, #246	; 0xf6
 80071f0:	f7fa fb6b 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 80071f4:	e02a      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80071f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	2305      	movs	r3, #5
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	2312      	movs	r3, #18
 8007202:	2212      	movs	r2, #18
 8007204:	21ab      	movs	r1, #171	; 0xab
 8007206:	20f6      	movs	r0, #246	; 0xf6
 8007208:	f7fa fb5f 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800720c:	e01e      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 800720e:	79fb      	ldrb	r3, [r7, #7]
 8007210:	2b09      	cmp	r3, #9
 8007212:	d11b      	bne.n	800724c <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 8007214:	79bb      	ldrb	r3, [r7, #6]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10c      	bne.n	8007234 <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800721a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	2305      	movs	r3, #5
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2312      	movs	r3, #18
 8007226:	2212      	movs	r2, #18
 8007228:	21ab      	movs	r1, #171	; 0xab
 800722a:	f44f 708b 	mov.w	r0, #278	; 0x116
 800722e:	f7fa fb4c 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 8007232:	e00b      	b.n	800724c <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007234:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	2305      	movs	r3, #5
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	2312      	movs	r3, #18
 8007240:	2212      	movs	r2, #18
 8007242:	21ab      	movs	r1, #171	; 0xab
 8007244:	f44f 708b 	mov.w	r0, #278	; 0x116
 8007248:	f7fa fb3f 	bl	80018ca <GFX_DrawFillRoundRectangle>
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <MenuTFTSchedule1ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af02      	add	r7, sp, #8
 800725a:	4603      	mov	r3, r0
 800725c:	460a      	mov	r2, r1
 800725e:	80fb      	strh	r3, [r7, #6]
 8007260:	4613      	mov	r3, r2
 8007262:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007264:	4859      	ldr	r0, [pc, #356]	; (80073cc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x178>)
 8007266:	f7fa fb81 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800726a:	88fb      	ldrh	r3, [r7, #6]
 800726c:	2bba      	cmp	r3, #186	; 0xba
 800726e:	d92f      	bls.n	80072d0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
 8007270:	88fb      	ldrh	r3, [r7, #6]
 8007272:	2bdd      	cmp	r3, #221	; 0xdd
 8007274:	d82c      	bhi.n	80072d0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule1 < 24)
 8007276:	4b56      	ldr	r3, [pc, #344]	; (80073d0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b17      	cmp	r3, #23
 800727c:	d806      	bhi.n	800728c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule1++;
 800727e:	4b54      	ldr	r3, [pc, #336]	; (80073d0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	3301      	adds	r3, #1
 8007284:	b2da      	uxtb	r2, r3
 8007286:	4b52      	ldr	r3, [pc, #328]	; (80073d0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	e002      	b.n	8007292 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule1 = 1;
 800728c:	4b50      	ldr	r3, [pc, #320]	; (80073d0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 800728e:	2201      	movs	r2, #1
 8007290:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 8007292:	4b4f      	ldr	r3, [pc, #316]	; (80073d0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b09      	cmp	r3, #9
 8007298:	d907      	bls.n	80072aa <MenuTFTSchedule1ActivityHourMinuteONAdd+0x56>
 800729a:	4b4d      	ldr	r3, [pc, #308]	; (80073d0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	494c      	ldr	r1, [pc, #304]	; (80073d4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 80072a2:	484d      	ldr	r0, [pc, #308]	; (80073d8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80072a4:	f00b f97e 	bl	80125a4 <siprintf>
 80072a8:	e006      	b.n	80072b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 80072aa:	4b49      	ldr	r3, [pc, #292]	; (80073d0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	494a      	ldr	r1, [pc, #296]	; (80073dc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 80072b2:	4849      	ldr	r0, [pc, #292]	; (80073d8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80072b4:	f00b f976 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80072b8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	2301      	movs	r3, #1
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	2300      	movs	r3, #0
 80072c4:	2264      	movs	r2, #100	; 0x64
 80072c6:	2150      	movs	r1, #80	; 0x50
 80072c8:	4843      	ldr	r0, [pc, #268]	; (80073d8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80072ca:	f7fa fd69 	bl	8001da0 <EF_PutString>
 80072ce:	e078      	b.n	80073c2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	2be8      	cmp	r3, #232	; 0xe8
 80072d4:	d930      	bls.n	8007338 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
 80072d6:	88fb      	ldrh	r3, [r7, #6]
 80072d8:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80072dc:	d22c      	bcs.n	8007338 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule1 < 59)
 80072de:	4b40      	ldr	r3, [pc, #256]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b3a      	cmp	r3, #58	; 0x3a
 80072e4:	d806      	bhi.n	80072f4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule1++;
 80072e6:	4b3e      	ldr	r3, [pc, #248]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	3301      	adds	r3, #1
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	4b3c      	ldr	r3, [pc, #240]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	e002      	b.n	80072fa <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule1 = 0;
 80072f4:	4b3a      	ldr	r3, [pc, #232]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 80072fa:	4b39      	ldr	r3, [pc, #228]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b09      	cmp	r3, #9
 8007300:	d907      	bls.n	8007312 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xbe>
 8007302:	4b37      	ldr	r3, [pc, #220]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	4932      	ldr	r1, [pc, #200]	; (80073d4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 800730a:	4833      	ldr	r0, [pc, #204]	; (80073d8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 800730c:	f00b f94a 	bl	80125a4 <siprintf>
 8007310:	e006      	b.n	8007320 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8007312:	4b33      	ldr	r3, [pc, #204]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	4930      	ldr	r1, [pc, #192]	; (80073dc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 800731a:	482f      	ldr	r0, [pc, #188]	; (80073d8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 800731c:	f00b f942 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007320:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007324:	9301      	str	r3, [sp, #4]
 8007326:	2301      	movs	r3, #1
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	2300      	movs	r3, #0
 800732c:	2264      	movs	r2, #100	; 0x64
 800732e:	218a      	movs	r1, #138	; 0x8a
 8007330:	4829      	ldr	r0, [pc, #164]	; (80073d8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8007332:	f7fa fd35 	bl	8001da0 <EF_PutString>
 8007336:	e044      	b.n	80073c2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800733e:	d940      	bls.n	80073c2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8007340:	88fb      	ldrh	r3, [r7, #6]
 8007342:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007346:	d23c      	bcs.n	80073c2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule1 < 49)
 8007348:	4b25      	ldr	r3, [pc, #148]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2b30      	cmp	r3, #48	; 0x30
 800734e:	d806      	bhi.n	800735e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8007350:	4b23      	ldr	r3, [pc, #140]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	330a      	adds	r3, #10
 8007356:	b2da      	uxtb	r2, r3
 8007358:	4b21      	ldr	r3, [pc, #132]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800735a:	701a      	strb	r2, [r3, #0]
 800735c:	e012      	b.n	8007384 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 800735e:	4b20      	ldr	r3, [pc, #128]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	f103 020a 	add.w	r2, r3, #10
 8007366:	4b1f      	ldr	r3, [pc, #124]	; (80073e4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x190>)
 8007368:	fb83 1302 	smull	r1, r3, r3, r2
 800736c:	4413      	add	r3, r2
 800736e:	1159      	asrs	r1, r3, #5
 8007370:	17d3      	asrs	r3, r2, #31
 8007372:	1ac9      	subs	r1, r1, r3
 8007374:	460b      	mov	r3, r1
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	1a5b      	subs	r3, r3, r1
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	1ad1      	subs	r1, r2, r3
 800737e:	b2ca      	uxtb	r2, r1
 8007380:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007382:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8007384:	4b16      	ldr	r3, [pc, #88]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b09      	cmp	r3, #9
 800738a:	d907      	bls.n	800739c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x148>
 800738c:	4b14      	ldr	r3, [pc, #80]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	4910      	ldr	r1, [pc, #64]	; (80073d4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8007394:	4810      	ldr	r0, [pc, #64]	; (80073d8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8007396:	f00b f905 	bl	80125a4 <siprintf>
 800739a:	e006      	b.n	80073aa <MenuTFTSchedule1ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 800739c:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	490e      	ldr	r1, [pc, #56]	; (80073dc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 80073a4:	480c      	ldr	r0, [pc, #48]	; (80073d8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80073a6:	f00b f8fd 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80073aa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	2301      	movs	r3, #1
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2300      	movs	r3, #0
 80073b6:	2264      	movs	r2, #100	; 0x64
 80073b8:	218a      	movs	r1, #138	; 0x8a
 80073ba:	4807      	ldr	r0, [pc, #28]	; (80073d8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80073bc:	f7fa fcf0 	bl	8001da0 <EF_PutString>
	}
}
 80073c0:	e7ff      	b.n	80073c2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 80073c2:	bf00      	nop
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	08029de4 	.word	0x08029de4
 80073d0:	20000285 	.word	0x20000285
 80073d4:	08016840 	.word	0x08016840
 80073d8:	200002c8 	.word	0x200002c8
 80073dc:	08016848 	.word	0x08016848
 80073e0:	20000287 	.word	0x20000287
 80073e4:	88888889 	.word	0x88888889

080073e8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af02      	add	r7, sp, #8
 80073ee:	4603      	mov	r3, r0
 80073f0:	460a      	mov	r2, r1
 80073f2:	80fb      	strh	r3, [r7, #6]
 80073f4:	4613      	mov	r3, r2
 80073f6:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80073f8:	4859      	ldr	r0, [pc, #356]	; (8007560 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x178>)
 80073fa:	f7fa fab7 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	2bba      	cmp	r3, #186	; 0xba
 8007402:	d92f      	bls.n	8007464 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
 8007404:	88fb      	ldrh	r3, [r7, #6]
 8007406:	2bdd      	cmp	r3, #221	; 0xdd
 8007408:	d82c      	bhi.n	8007464 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule1 < 24)
 800740a:	4b56      	ldr	r3, [pc, #344]	; (8007564 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b17      	cmp	r3, #23
 8007410:	d806      	bhi.n	8007420 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule1++;
 8007412:	4b54      	ldr	r3, [pc, #336]	; (8007564 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	3301      	adds	r3, #1
 8007418:	b2da      	uxtb	r2, r3
 800741a:	4b52      	ldr	r3, [pc, #328]	; (8007564 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	e002      	b.n	8007426 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule1 = 1;
 8007420:	4b50      	ldr	r3, [pc, #320]	; (8007564 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007422:	2201      	movs	r2, #1
 8007424:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 8007426:	4b4f      	ldr	r3, [pc, #316]	; (8007564 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b09      	cmp	r3, #9
 800742c:	d907      	bls.n	800743e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x56>
 800742e:	4b4d      	ldr	r3, [pc, #308]	; (8007564 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	494c      	ldr	r1, [pc, #304]	; (8007568 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8007436:	484d      	ldr	r0, [pc, #308]	; (800756c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007438:	f00b f8b4 	bl	80125a4 <siprintf>
 800743c:	e006      	b.n	800744c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 800743e:	4b49      	ldr	r3, [pc, #292]	; (8007564 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	494a      	ldr	r1, [pc, #296]	; (8007570 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8007446:	4849      	ldr	r0, [pc, #292]	; (800756c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007448:	f00b f8ac 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800744c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	2301      	movs	r3, #1
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	2300      	movs	r3, #0
 8007458:	2287      	movs	r2, #135	; 0x87
 800745a:	214e      	movs	r1, #78	; 0x4e
 800745c:	4843      	ldr	r0, [pc, #268]	; (800756c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800745e:	f7fa fc9f 	bl	8001da0 <EF_PutString>
 8007462:	e078      	b.n	8007556 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007464:	88fb      	ldrh	r3, [r7, #6]
 8007466:	2be8      	cmp	r3, #232	; 0xe8
 8007468:	d930      	bls.n	80074cc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
 800746a:	88fb      	ldrh	r3, [r7, #6]
 800746c:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007470:	d22c      	bcs.n	80074cc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule1 < 59)
 8007472:	4b40      	ldr	r3, [pc, #256]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b3a      	cmp	r3, #58	; 0x3a
 8007478:	d806      	bhi.n	8007488 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule1++;
 800747a:	4b3e      	ldr	r3, [pc, #248]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	3301      	adds	r3, #1
 8007480:	b2da      	uxtb	r2, r3
 8007482:	4b3c      	ldr	r3, [pc, #240]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	e002      	b.n	800748e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule1 = 0;
 8007488:	4b3a      	ldr	r3, [pc, #232]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 800748e:	4b39      	ldr	r3, [pc, #228]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b09      	cmp	r3, #9
 8007494:	d907      	bls.n	80074a6 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xbe>
 8007496:	4b37      	ldr	r3, [pc, #220]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	4932      	ldr	r1, [pc, #200]	; (8007568 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 800749e:	4833      	ldr	r0, [pc, #204]	; (800756c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80074a0:	f00b f880 	bl	80125a4 <siprintf>
 80074a4:	e006      	b.n	80074b4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 80074a6:	4b33      	ldr	r3, [pc, #204]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	4930      	ldr	r1, [pc, #192]	; (8007570 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 80074ae:	482f      	ldr	r0, [pc, #188]	; (800756c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80074b0:	f00b f878 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80074b4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	2301      	movs	r3, #1
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	2300      	movs	r3, #0
 80074c0:	2287      	movs	r2, #135	; 0x87
 80074c2:	218a      	movs	r1, #138	; 0x8a
 80074c4:	4829      	ldr	r0, [pc, #164]	; (800756c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80074c6:	f7fa fc6b 	bl	8001da0 <EF_PutString>
 80074ca:	e044      	b.n	8007556 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80074cc:	88fb      	ldrh	r3, [r7, #6]
 80074ce:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80074d2:	d940      	bls.n	8007556 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 80074d4:	88fb      	ldrh	r3, [r7, #6]
 80074d6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80074da:	d23c      	bcs.n	8007556 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule1 < 49)
 80074dc:	4b25      	ldr	r3, [pc, #148]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b30      	cmp	r3, #48	; 0x30
 80074e2:	d806      	bhi.n	80074f2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 80074e4:	4b23      	ldr	r3, [pc, #140]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	330a      	adds	r3, #10
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	4b21      	ldr	r3, [pc, #132]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	e012      	b.n	8007518 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 80074f2:	4b20      	ldr	r3, [pc, #128]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	f103 020a 	add.w	r2, r3, #10
 80074fa:	4b1f      	ldr	r3, [pc, #124]	; (8007578 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x190>)
 80074fc:	fb83 1302 	smull	r1, r3, r3, r2
 8007500:	4413      	add	r3, r2
 8007502:	1159      	asrs	r1, r3, #5
 8007504:	17d3      	asrs	r3, r2, #31
 8007506:	1ac9      	subs	r1, r1, r3
 8007508:	460b      	mov	r3, r1
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	1a5b      	subs	r3, r3, r1
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	1ad1      	subs	r1, r2, r3
 8007512:	b2ca      	uxtb	r2, r1
 8007514:	4b17      	ldr	r3, [pc, #92]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007516:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8007518:	4b16      	ldr	r3, [pc, #88]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b09      	cmp	r3, #9
 800751e:	d907      	bls.n	8007530 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x148>
 8007520:	4b14      	ldr	r3, [pc, #80]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	4910      	ldr	r1, [pc, #64]	; (8007568 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8007528:	4810      	ldr	r0, [pc, #64]	; (800756c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800752a:	f00b f83b 	bl	80125a4 <siprintf>
 800752e:	e006      	b.n	800753e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8007530:	4b10      	ldr	r3, [pc, #64]	; (8007574 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	490e      	ldr	r1, [pc, #56]	; (8007570 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8007538:	480c      	ldr	r0, [pc, #48]	; (800756c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 800753a:	f00b f833 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800753e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007542:	9301      	str	r3, [sp, #4]
 8007544:	2301      	movs	r3, #1
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	2300      	movs	r3, #0
 800754a:	2287      	movs	r2, #135	; 0x87
 800754c:	218a      	movs	r1, #138	; 0x8a
 800754e:	4807      	ldr	r0, [pc, #28]	; (800756c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007550:	f7fa fc26 	bl	8001da0 <EF_PutString>
	}
}
 8007554:	e7ff      	b.n	8007556 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	08029de4 	.word	0x08029de4
 8007564:	20000286 	.word	0x20000286
 8007568:	08016840 	.word	0x08016840
 800756c:	200002c8 	.word	0x200002c8
 8007570:	08016848 	.word	0x08016848
 8007574:	20000288 	.word	0x20000288
 8007578:	88888889 	.word	0x88888889

0800757c <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	4603      	mov	r3, r0
 8007584:	460a      	mov	r2, r1
 8007586:	80fb      	strh	r3, [r7, #6]
 8007588:	4613      	mov	r3, r2
 800758a:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 800758c:	88fb      	ldrh	r3, [r7, #6]
 800758e:	2b3b      	cmp	r3, #59	; 0x3b
 8007590:	d91a      	bls.n	80075c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 8007592:	88fb      	ldrh	r3, [r7, #6]
 8007594:	2b50      	cmp	r3, #80	; 0x50
 8007596:	d817      	bhi.n	80075c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8007598:	4b68      	ldr	r3, [pc, #416]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d004      	beq.n	80075aa <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 80075a0:	2100      	movs	r1, #0
 80075a2:	2001      	movs	r0, #1
 80075a4:	f7ff fc5e 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 80075a8:	e003      	b.n	80075b2 <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 80075aa:	2101      	movs	r1, #1
 80075ac:	2001      	movs	r0, #1
 80075ae:	f7ff fc59 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 80075b2:	4b62      	ldr	r3, [pc, #392]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	bf0c      	ite	eq
 80075ba:	2301      	moveq	r3, #1
 80075bc:	2300      	movne	r3, #0
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	461a      	mov	r2, r3
 80075c2:	4b5e      	ldr	r3, [pc, #376]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	e0b4      	b.n	8007732 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 80075c8:	88fb      	ldrh	r3, [r7, #6]
 80075ca:	2b59      	cmp	r3, #89	; 0x59
 80075cc:	d91a      	bls.n	8007604 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 80075ce:	88fb      	ldrh	r3, [r7, #6]
 80075d0:	2b6e      	cmp	r3, #110	; 0x6e
 80075d2:	d817      	bhi.n	8007604 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 80075d4:	4b59      	ldr	r3, [pc, #356]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d004      	beq.n	80075e6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 80075dc:	2100      	movs	r1, #0
 80075de:	2002      	movs	r0, #2
 80075e0:	f7ff fc40 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 80075e4:	e003      	b.n	80075ee <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 80075e6:	2101      	movs	r1, #1
 80075e8:	2002      	movs	r0, #2
 80075ea:	f7ff fc3b 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 80075ee:	4b53      	ldr	r3, [pc, #332]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bf0c      	ite	eq
 80075f6:	2301      	moveq	r3, #1
 80075f8:	2300      	movne	r3, #0
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	4b4f      	ldr	r3, [pc, #316]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007600:	705a      	strb	r2, [r3, #1]
 8007602:	e096      	b.n	8007732 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	2b77      	cmp	r3, #119	; 0x77
 8007608:	d91a      	bls.n	8007640 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	2b8c      	cmp	r3, #140	; 0x8c
 800760e:	d817      	bhi.n	8007640 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8007610:	4b4a      	ldr	r3, [pc, #296]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007612:	789b      	ldrb	r3, [r3, #2]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d004      	beq.n	8007622 <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 8007618:	2100      	movs	r1, #0
 800761a:	2003      	movs	r0, #3
 800761c:	f7ff fc22 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8007620:	e003      	b.n	800762a <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8007622:	2101      	movs	r1, #1
 8007624:	2003      	movs	r0, #3
 8007626:	f7ff fc1d 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 800762a:	4b44      	ldr	r3, [pc, #272]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800762c:	789b      	ldrb	r3, [r3, #2]
 800762e:	2b00      	cmp	r3, #0
 8007630:	bf0c      	ite	eq
 8007632:	2301      	moveq	r3, #1
 8007634:	2300      	movne	r3, #0
 8007636:	b2db      	uxtb	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	4b40      	ldr	r3, [pc, #256]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800763c:	709a      	strb	r2, [r3, #2]
 800763e:	e078      	b.n	8007732 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	2b95      	cmp	r3, #149	; 0x95
 8007644:	d91a      	bls.n	800767c <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	2baa      	cmp	r3, #170	; 0xaa
 800764a:	d817      	bhi.n	800767c <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 800764c:	4b3b      	ldr	r3, [pc, #236]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800764e:	78db      	ldrb	r3, [r3, #3]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d004      	beq.n	800765e <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 8007654:	2100      	movs	r1, #0
 8007656:	2004      	movs	r0, #4
 8007658:	f7ff fc04 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 800765c:	e003      	b.n	8007666 <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 800765e:	2101      	movs	r1, #1
 8007660:	2004      	movs	r0, #4
 8007662:	f7ff fbff 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 8007666:	4b35      	ldr	r3, [pc, #212]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007668:	78db      	ldrb	r3, [r3, #3]
 800766a:	2b00      	cmp	r3, #0
 800766c:	bf0c      	ite	eq
 800766e:	2301      	moveq	r3, #1
 8007670:	2300      	movne	r3, #0
 8007672:	b2db      	uxtb	r3, r3
 8007674:	461a      	mov	r2, r3
 8007676:	4b31      	ldr	r3, [pc, #196]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007678:	70da      	strb	r2, [r3, #3]
 800767a:	e05a      	b.n	8007732 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 800767c:	88fb      	ldrh	r3, [r7, #6]
 800767e:	2bb3      	cmp	r3, #179	; 0xb3
 8007680:	d91a      	bls.n	80076b8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 8007682:	88fb      	ldrh	r3, [r7, #6]
 8007684:	2bc8      	cmp	r3, #200	; 0xc8
 8007686:	d817      	bhi.n	80076b8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8007688:	4b2c      	ldr	r3, [pc, #176]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800768a:	791b      	ldrb	r3, [r3, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d004      	beq.n	800769a <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 8007690:	2100      	movs	r1, #0
 8007692:	2005      	movs	r0, #5
 8007694:	f7ff fbe6 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8007698:	e003      	b.n	80076a2 <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 800769a:	2101      	movs	r1, #1
 800769c:	2005      	movs	r0, #5
 800769e:	f7ff fbe1 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 80076a2:	4b26      	ldr	r3, [pc, #152]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076a4:	791b      	ldrb	r3, [r3, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bf0c      	ite	eq
 80076aa:	2301      	moveq	r3, #1
 80076ac:	2300      	movne	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	4b22      	ldr	r3, [pc, #136]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076b4:	711a      	strb	r2, [r3, #4]
 80076b6:	e03c      	b.n	8007732 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	2bd1      	cmp	r3, #209	; 0xd1
 80076bc:	d91a      	bls.n	80076f4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 80076be:	88fb      	ldrh	r3, [r7, #6]
 80076c0:	2be6      	cmp	r3, #230	; 0xe6
 80076c2:	d817      	bhi.n	80076f4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 80076c4:	4b1d      	ldr	r3, [pc, #116]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076c6:	795b      	ldrb	r3, [r3, #5]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 80076cc:	2100      	movs	r1, #0
 80076ce:	2006      	movs	r0, #6
 80076d0:	f7ff fbc8 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 80076d4:	e003      	b.n	80076de <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 80076d6:	2101      	movs	r1, #1
 80076d8:	2006      	movs	r0, #6
 80076da:	f7ff fbc3 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 80076de:	4b17      	ldr	r3, [pc, #92]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076e0:	795b      	ldrb	r3, [r3, #5]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	bf0c      	ite	eq
 80076e6:	2301      	moveq	r3, #1
 80076e8:	2300      	movne	r3, #0
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	461a      	mov	r2, r3
 80076ee:	4b13      	ldr	r3, [pc, #76]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80076f0:	715a      	strb	r2, [r3, #5]
 80076f2:	e01e      	b.n	8007732 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 80076f4:	88fb      	ldrh	r3, [r7, #6]
 80076f6:	2bef      	cmp	r3, #239	; 0xef
 80076f8:	d91b      	bls.n	8007732 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007700:	d817      	bhi.n	8007732 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8007702:	4b0e      	ldr	r3, [pc, #56]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007704:	799b      	ldrb	r3, [r3, #6]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 800770a:	2100      	movs	r1, #0
 800770c:	2007      	movs	r0, #7
 800770e:	f7ff fba9 	bl	8006e64 <changeTFTScheduleDayOfWeek>
 8007712:	e003      	b.n	800771c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007714:	2101      	movs	r1, #1
 8007716:	2007      	movs	r0, #7
 8007718:	f7ff fba4 	bl	8006e64 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 800771c:	4b07      	ldr	r3, [pc, #28]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800771e:	799b      	ldrb	r3, [r3, #6]
 8007720:	2b00      	cmp	r3, #0
 8007722:	bf0c      	ite	eq
 8007724:	2301      	moveq	r3, #1
 8007726:	2300      	movne	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	4b03      	ldr	r3, [pc, #12]	; (800773c <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800772e:	719a      	strb	r2, [r3, #6]
	}
}
 8007730:	e7ff      	b.n	8007732 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20000274 	.word	0x20000274

08007740 <MenuTFTSchedule2ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af02      	add	r7, sp, #8
 8007746:	4603      	mov	r3, r0
 8007748:	460a      	mov	r2, r1
 800774a:	80fb      	strh	r3, [r7, #6]
 800774c:	4613      	mov	r3, r2
 800774e:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007750:	4859      	ldr	r0, [pc, #356]	; (80078b8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x178>)
 8007752:	f7fa f90b 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	2bba      	cmp	r3, #186	; 0xba
 800775a:	d92f      	bls.n	80077bc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
 800775c:	88fb      	ldrh	r3, [r7, #6]
 800775e:	2bdd      	cmp	r3, #221	; 0xdd
 8007760:	d82c      	bhi.n	80077bc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule2 < 24)
 8007762:	4b56      	ldr	r3, [pc, #344]	; (80078bc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	2b17      	cmp	r3, #23
 8007768:	d806      	bhi.n	8007778 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule2++;
 800776a:	4b54      	ldr	r3, [pc, #336]	; (80078bc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	3301      	adds	r3, #1
 8007770:	b2da      	uxtb	r2, r3
 8007772:	4b52      	ldr	r3, [pc, #328]	; (80078bc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007774:	701a      	strb	r2, [r3, #0]
 8007776:	e002      	b.n	800777e <MenuTFTSchedule2ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule2 = 1;
 8007778:	4b50      	ldr	r3, [pc, #320]	; (80078bc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 800777a:	2201      	movs	r2, #1
 800777c:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 800777e:	4b4f      	ldr	r3, [pc, #316]	; (80078bc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b09      	cmp	r3, #9
 8007784:	d907      	bls.n	8007796 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x56>
 8007786:	4b4d      	ldr	r3, [pc, #308]	; (80078bc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	494c      	ldr	r1, [pc, #304]	; (80078c0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 800778e:	484d      	ldr	r0, [pc, #308]	; (80078c4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007790:	f00a ff08 	bl	80125a4 <siprintf>
 8007794:	e006      	b.n	80077a4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 8007796:	4b49      	ldr	r3, [pc, #292]	; (80078bc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	494a      	ldr	r1, [pc, #296]	; (80078c8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 800779e:	4849      	ldr	r0, [pc, #292]	; (80078c4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80077a0:	f00a ff00 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80077a4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	2301      	movs	r3, #1
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	2300      	movs	r3, #0
 80077b0:	2264      	movs	r2, #100	; 0x64
 80077b2:	214e      	movs	r1, #78	; 0x4e
 80077b4:	4843      	ldr	r0, [pc, #268]	; (80078c4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80077b6:	f7fa faf3 	bl	8001da0 <EF_PutString>
 80077ba:	e078      	b.n	80078ae <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80077bc:	88fb      	ldrh	r3, [r7, #6]
 80077be:	2be8      	cmp	r3, #232	; 0xe8
 80077c0:	d930      	bls.n	8007824 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80077c8:	d22c      	bcs.n	8007824 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule2 < 59)
 80077ca:	4b40      	ldr	r3, [pc, #256]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b3a      	cmp	r3, #58	; 0x3a
 80077d0:	d806      	bhi.n	80077e0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule2++;
 80077d2:	4b3e      	ldr	r3, [pc, #248]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	3301      	adds	r3, #1
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	4b3c      	ldr	r3, [pc, #240]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	e002      	b.n	80077e6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule2 = 0;
 80077e0:	4b3a      	ldr	r3, [pc, #232]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 80077e6:	4b39      	ldr	r3, [pc, #228]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b09      	cmp	r3, #9
 80077ec:	d907      	bls.n	80077fe <MenuTFTSchedule2ActivityHourMinuteONAdd+0xbe>
 80077ee:	4b37      	ldr	r3, [pc, #220]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	4932      	ldr	r1, [pc, #200]	; (80078c0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 80077f6:	4833      	ldr	r0, [pc, #204]	; (80078c4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80077f8:	f00a fed4 	bl	80125a4 <siprintf>
 80077fc:	e006      	b.n	800780c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 80077fe:	4b33      	ldr	r3, [pc, #204]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	4930      	ldr	r1, [pc, #192]	; (80078c8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 8007806:	482f      	ldr	r0, [pc, #188]	; (80078c4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007808:	f00a fecc 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800780c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	2301      	movs	r3, #1
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	2300      	movs	r3, #0
 8007818:	2264      	movs	r2, #100	; 0x64
 800781a:	218a      	movs	r1, #138	; 0x8a
 800781c:	4829      	ldr	r0, [pc, #164]	; (80078c4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800781e:	f7fa fabf 	bl	8001da0 <EF_PutString>
 8007822:	e044      	b.n	80078ae <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007824:	88fb      	ldrh	r3, [r7, #6]
 8007826:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800782a:	d940      	bls.n	80078ae <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 800782c:	88fb      	ldrh	r3, [r7, #6]
 800782e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007832:	d23c      	bcs.n	80078ae <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule2 < 49)
 8007834:	4b25      	ldr	r3, [pc, #148]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b30      	cmp	r3, #48	; 0x30
 800783a:	d806      	bhi.n	800784a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 800783c:	4b23      	ldr	r3, [pc, #140]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	330a      	adds	r3, #10
 8007842:	b2da      	uxtb	r2, r3
 8007844:	4b21      	ldr	r3, [pc, #132]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	e012      	b.n	8007870 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 800784a:	4b20      	ldr	r3, [pc, #128]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	f103 020a 	add.w	r2, r3, #10
 8007852:	4b1f      	ldr	r3, [pc, #124]	; (80078d0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x190>)
 8007854:	fb83 1302 	smull	r1, r3, r3, r2
 8007858:	4413      	add	r3, r2
 800785a:	1159      	asrs	r1, r3, #5
 800785c:	17d3      	asrs	r3, r2, #31
 800785e:	1ac9      	subs	r1, r1, r3
 8007860:	460b      	mov	r3, r1
 8007862:	011b      	lsls	r3, r3, #4
 8007864:	1a5b      	subs	r3, r3, r1
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	1ad1      	subs	r1, r2, r3
 800786a:	b2ca      	uxtb	r2, r1
 800786c:	4b17      	ldr	r3, [pc, #92]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800786e:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007870:	4b16      	ldr	r3, [pc, #88]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b09      	cmp	r3, #9
 8007876:	d907      	bls.n	8007888 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x148>
 8007878:	4b14      	ldr	r3, [pc, #80]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	4910      	ldr	r1, [pc, #64]	; (80078c0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 8007880:	4810      	ldr	r0, [pc, #64]	; (80078c4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007882:	f00a fe8f 	bl	80125a4 <siprintf>
 8007886:	e006      	b.n	8007896 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007888:	4b10      	ldr	r3, [pc, #64]	; (80078cc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	490e      	ldr	r1, [pc, #56]	; (80078c8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 8007890:	480c      	ldr	r0, [pc, #48]	; (80078c4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007892:	f00a fe87 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007896:	f24c 6318 	movw	r3, #50712	; 0xc618
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	2301      	movs	r3, #1
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	2300      	movs	r3, #0
 80078a2:	2264      	movs	r2, #100	; 0x64
 80078a4:	218a      	movs	r1, #138	; 0x8a
 80078a6:	4807      	ldr	r0, [pc, #28]	; (80078c4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80078a8:	f7fa fa7a 	bl	8001da0 <EF_PutString>
	}
}
 80078ac:	e7ff      	b.n	80078ae <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 80078ae:	bf00      	nop
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	08029de4 	.word	0x08029de4
 80078bc:	20000289 	.word	0x20000289
 80078c0:	08016840 	.word	0x08016840
 80078c4:	200002c8 	.word	0x200002c8
 80078c8:	08016848 	.word	0x08016848
 80078cc:	2000028b 	.word	0x2000028b
 80078d0:	88888889 	.word	0x88888889

080078d4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af02      	add	r7, sp, #8
 80078da:	4603      	mov	r3, r0
 80078dc:	460a      	mov	r2, r1
 80078de:	80fb      	strh	r3, [r7, #6]
 80078e0:	4613      	mov	r3, r2
 80078e2:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80078e4:	4859      	ldr	r0, [pc, #356]	; (8007a4c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x178>)
 80078e6:	f7fa f841 	bl	800196c <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	2bba      	cmp	r3, #186	; 0xba
 80078ee:	d92f      	bls.n	8007950 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
 80078f0:	88fb      	ldrh	r3, [r7, #6]
 80078f2:	2bdd      	cmp	r3, #221	; 0xdd
 80078f4:	d82c      	bhi.n	8007950 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule2 < 24)
 80078f6:	4b56      	ldr	r3, [pc, #344]	; (8007a50 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b17      	cmp	r3, #23
 80078fc:	d806      	bhi.n	800790c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule2++;
 80078fe:	4b54      	ldr	r3, [pc, #336]	; (8007a50 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	3301      	adds	r3, #1
 8007904:	b2da      	uxtb	r2, r3
 8007906:	4b52      	ldr	r3, [pc, #328]	; (8007a50 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007908:	701a      	strb	r2, [r3, #0]
 800790a:	e002      	b.n	8007912 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule2 = 1;
 800790c:	4b50      	ldr	r3, [pc, #320]	; (8007a50 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800790e:	2201      	movs	r2, #1
 8007910:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 8007912:	4b4f      	ldr	r3, [pc, #316]	; (8007a50 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b09      	cmp	r3, #9
 8007918:	d907      	bls.n	800792a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x56>
 800791a:	4b4d      	ldr	r3, [pc, #308]	; (8007a50 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	494c      	ldr	r1, [pc, #304]	; (8007a54 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007922:	484d      	ldr	r0, [pc, #308]	; (8007a58 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007924:	f00a fe3e 	bl	80125a4 <siprintf>
 8007928:	e006      	b.n	8007938 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 800792a:	4b49      	ldr	r3, [pc, #292]	; (8007a50 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	494a      	ldr	r1, [pc, #296]	; (8007a5c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007932:	4849      	ldr	r0, [pc, #292]	; (8007a58 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007934:	f00a fe36 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007938:	f24c 6318 	movw	r3, #50712	; 0xc618
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	2301      	movs	r3, #1
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	2300      	movs	r3, #0
 8007944:	2287      	movs	r2, #135	; 0x87
 8007946:	2150      	movs	r1, #80	; 0x50
 8007948:	4843      	ldr	r0, [pc, #268]	; (8007a58 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800794a:	f7fa fa29 	bl	8001da0 <EF_PutString>
 800794e:	e078      	b.n	8007a42 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007950:	88fb      	ldrh	r3, [r7, #6]
 8007952:	2be8      	cmp	r3, #232	; 0xe8
 8007954:	d930      	bls.n	80079b8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
 8007956:	88fb      	ldrh	r3, [r7, #6]
 8007958:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800795c:	d22c      	bcs.n	80079b8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule2 < 59)
 800795e:	4b40      	ldr	r3, [pc, #256]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b3a      	cmp	r3, #58	; 0x3a
 8007964:	d806      	bhi.n	8007974 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule2++;
 8007966:	4b3e      	ldr	r3, [pc, #248]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	3301      	adds	r3, #1
 800796c:	b2da      	uxtb	r2, r3
 800796e:	4b3c      	ldr	r3, [pc, #240]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	e002      	b.n	800797a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule2 = 0;
 8007974:	4b3a      	ldr	r3, [pc, #232]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 800797a:	4b39      	ldr	r3, [pc, #228]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b09      	cmp	r3, #9
 8007980:	d907      	bls.n	8007992 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xbe>
 8007982:	4b37      	ldr	r3, [pc, #220]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	4932      	ldr	r1, [pc, #200]	; (8007a54 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 800798a:	4833      	ldr	r0, [pc, #204]	; (8007a58 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800798c:	f00a fe0a 	bl	80125a4 <siprintf>
 8007990:	e006      	b.n	80079a0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007992:	4b33      	ldr	r3, [pc, #204]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	4930      	ldr	r1, [pc, #192]	; (8007a5c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 800799a:	482f      	ldr	r0, [pc, #188]	; (8007a58 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800799c:	f00a fe02 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80079a0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80079a4:	9301      	str	r3, [sp, #4]
 80079a6:	2301      	movs	r3, #1
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	2300      	movs	r3, #0
 80079ac:	2287      	movs	r2, #135	; 0x87
 80079ae:	218a      	movs	r1, #138	; 0x8a
 80079b0:	4829      	ldr	r0, [pc, #164]	; (8007a58 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80079b2:	f7fa f9f5 	bl	8001da0 <EF_PutString>
 80079b6:	e044      	b.n	8007a42 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80079b8:	88fb      	ldrh	r3, [r7, #6]
 80079ba:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80079be:	d940      	bls.n	8007a42 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80079c6:	d23c      	bcs.n	8007a42 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule2 < 49)
 80079c8:	4b25      	ldr	r3, [pc, #148]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b30      	cmp	r3, #48	; 0x30
 80079ce:	d806      	bhi.n	80079de <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 80079d0:	4b23      	ldr	r3, [pc, #140]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	330a      	adds	r3, #10
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	4b21      	ldr	r3, [pc, #132]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	e012      	b.n	8007a04 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 80079de:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	f103 020a 	add.w	r2, r3, #10
 80079e6:	4b1f      	ldr	r3, [pc, #124]	; (8007a64 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x190>)
 80079e8:	fb83 1302 	smull	r1, r3, r3, r2
 80079ec:	4413      	add	r3, r2
 80079ee:	1159      	asrs	r1, r3, #5
 80079f0:	17d3      	asrs	r3, r2, #31
 80079f2:	1ac9      	subs	r1, r1, r3
 80079f4:	460b      	mov	r3, r1
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	1a5b      	subs	r3, r3, r1
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	1ad1      	subs	r1, r2, r3
 80079fe:	b2ca      	uxtb	r2, r1
 8007a00:	4b17      	ldr	r3, [pc, #92]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a02:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007a04:	4b16      	ldr	r3, [pc, #88]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b09      	cmp	r3, #9
 8007a0a:	d907      	bls.n	8007a1c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x148>
 8007a0c:	4b14      	ldr	r3, [pc, #80]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	4910      	ldr	r1, [pc, #64]	; (8007a54 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007a14:	4810      	ldr	r0, [pc, #64]	; (8007a58 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007a16:	f00a fdc5 	bl	80125a4 <siprintf>
 8007a1a:	e006      	b.n	8007a2a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007a1c:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	490e      	ldr	r1, [pc, #56]	; (8007a5c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007a24:	480c      	ldr	r0, [pc, #48]	; (8007a58 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007a26:	f00a fdbd 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a2a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	2301      	movs	r3, #1
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	2300      	movs	r3, #0
 8007a36:	2287      	movs	r2, #135	; 0x87
 8007a38:	218a      	movs	r1, #138	; 0x8a
 8007a3a:	4807      	ldr	r0, [pc, #28]	; (8007a58 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007a3c:	f7fa f9b0 	bl	8001da0 <EF_PutString>
	}
}
 8007a40:	e7ff      	b.n	8007a42 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	08029de4 	.word	0x08029de4
 8007a50:	2000028a 	.word	0x2000028a
 8007a54:	08016840 	.word	0x08016840
 8007a58:	200002c8 	.word	0x200002c8
 8007a5c:	08016848 	.word	0x08016848
 8007a60:	2000028c 	.word	0x2000028c
 8007a64:	88888889 	.word	0x88888889

08007a68 <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	460a      	mov	r2, r1
 8007a72:	80fb      	strh	r3, [r7, #6]
 8007a74:	4613      	mov	r3, r2
 8007a76:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007a78:	88fb      	ldrh	r3, [r7, #6]
 8007a7a:	2b14      	cmp	r3, #20
 8007a7c:	d919      	bls.n	8007ab2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 8007a7e:	88fb      	ldrh	r3, [r7, #6]
 8007a80:	2b29      	cmp	r3, #41	; 0x29
 8007a82:	d816      	bhi.n	8007ab2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8007a84:	4b82      	ldr	r3, [pc, #520]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d004      	beq.n	8007a96 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	2001      	movs	r0, #1
 8007a90:	f7ff fac5 	bl	800701e <changeTFTScheduleRelayLights>
 8007a94:	e003      	b.n	8007a9e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8007a96:	2101      	movs	r1, #1
 8007a98:	2001      	movs	r0, #1
 8007a9a:	f7ff fac0 	bl	800701e <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007a9e:	4b7c      	ldr	r3, [pc, #496]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	bf0c      	ite	eq
 8007aa6:	2301      	moveq	r3, #1
 8007aa8:	2300      	movne	r3, #0
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	4b78      	ldr	r3, [pc, #480]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007ab0:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	2b34      	cmp	r3, #52	; 0x34
 8007ab6:	d919      	bls.n	8007aec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 8007ab8:	88fb      	ldrh	r3, [r7, #6]
 8007aba:	2b49      	cmp	r3, #73	; 0x49
 8007abc:	d816      	bhi.n	8007aec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007abe:	4b74      	ldr	r3, [pc, #464]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007ac0:	785b      	ldrb	r3, [r3, #1]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d004      	beq.n	8007ad0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	2002      	movs	r0, #2
 8007aca:	f7ff faa8 	bl	800701e <changeTFTScheduleRelayLights>
 8007ace:	e003      	b.n	8007ad8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	2002      	movs	r0, #2
 8007ad4:	f7ff faa3 	bl	800701e <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007ad8:	4b6d      	ldr	r3, [pc, #436]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	bf0c      	ite	eq
 8007ae0:	2301      	moveq	r3, #1
 8007ae2:	2300      	movne	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4b69      	ldr	r3, [pc, #420]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007aea:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007aec:	88fb      	ldrh	r3, [r7, #6]
 8007aee:	2b54      	cmp	r3, #84	; 0x54
 8007af0:	d919      	bls.n	8007b26 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	2b69      	cmp	r3, #105	; 0x69
 8007af6:	d816      	bhi.n	8007b26 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007af8:	4b65      	ldr	r3, [pc, #404]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007afa:	789b      	ldrb	r3, [r3, #2]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d004      	beq.n	8007b0a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 8007b00:	2100      	movs	r1, #0
 8007b02:	2003      	movs	r0, #3
 8007b04:	f7ff fa8b 	bl	800701e <changeTFTScheduleRelayLights>
 8007b08:	e003      	b.n	8007b12 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	2003      	movs	r0, #3
 8007b0e:	f7ff fa86 	bl	800701e <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 8007b12:	4b5f      	ldr	r3, [pc, #380]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b14:	789b      	ldrb	r3, [r3, #2]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bf0c      	ite	eq
 8007b1a:	2301      	moveq	r3, #1
 8007b1c:	2300      	movne	r3, #0
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	461a      	mov	r2, r3
 8007b22:	4b5b      	ldr	r3, [pc, #364]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b24:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	2b74      	cmp	r3, #116	; 0x74
 8007b2a:	d919      	bls.n	8007b60 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	2b89      	cmp	r3, #137	; 0x89
 8007b30:	d816      	bhi.n	8007b60 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 8007b32:	4b57      	ldr	r3, [pc, #348]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b34:	78db      	ldrb	r3, [r3, #3]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d004      	beq.n	8007b44 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	2004      	movs	r0, #4
 8007b3e:	f7ff fa6e 	bl	800701e <changeTFTScheduleRelayLights>
 8007b42:	e003      	b.n	8007b4c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 8007b44:	2101      	movs	r1, #1
 8007b46:	2004      	movs	r0, #4
 8007b48:	f7ff fa69 	bl	800701e <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8007b4c:	4b50      	ldr	r3, [pc, #320]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b4e:	78db      	ldrb	r3, [r3, #3]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	bf0c      	ite	eq
 8007b54:	2301      	moveq	r3, #1
 8007b56:	2300      	movne	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	4b4c      	ldr	r3, [pc, #304]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b5e:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007b60:	88fb      	ldrh	r3, [r7, #6]
 8007b62:	2b94      	cmp	r3, #148	; 0x94
 8007b64:	d919      	bls.n	8007b9a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	2ba9      	cmp	r3, #169	; 0xa9
 8007b6a:	d816      	bhi.n	8007b9a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8007b6c:	4b48      	ldr	r3, [pc, #288]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b6e:	791b      	ldrb	r3, [r3, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 8007b74:	2100      	movs	r1, #0
 8007b76:	2005      	movs	r0, #5
 8007b78:	f7ff fa51 	bl	800701e <changeTFTScheduleRelayLights>
 8007b7c:	e003      	b.n	8007b86 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8007b7e:	2101      	movs	r1, #1
 8007b80:	2005      	movs	r0, #5
 8007b82:	f7ff fa4c 	bl	800701e <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 8007b86:	4b42      	ldr	r3, [pc, #264]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b88:	791b      	ldrb	r3, [r3, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	bf0c      	ite	eq
 8007b8e:	2301      	moveq	r3, #1
 8007b90:	2300      	movne	r3, #0
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	461a      	mov	r2, r3
 8007b96:	4b3e      	ldr	r3, [pc, #248]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007b98:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	2bb4      	cmp	r3, #180	; 0xb4
 8007b9e:	d919      	bls.n	8007bd4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	2bc9      	cmp	r3, #201	; 0xc9
 8007ba4:	d816      	bhi.n	8007bd4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8007ba6:	4b3a      	ldr	r3, [pc, #232]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007ba8:	795b      	ldrb	r3, [r3, #5]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d004      	beq.n	8007bb8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 8007bae:	2100      	movs	r1, #0
 8007bb0:	2006      	movs	r0, #6
 8007bb2:	f7ff fa34 	bl	800701e <changeTFTScheduleRelayLights>
 8007bb6:	e003      	b.n	8007bc0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007bb8:	2101      	movs	r1, #1
 8007bba:	2006      	movs	r0, #6
 8007bbc:	f7ff fa2f 	bl	800701e <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007bc0:	4b33      	ldr	r3, [pc, #204]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007bc2:	795b      	ldrb	r3, [r3, #5]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	bf0c      	ite	eq
 8007bc8:	2301      	moveq	r3, #1
 8007bca:	2300      	movne	r3, #0
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4b2f      	ldr	r3, [pc, #188]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007bd2:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007bd4:	88fb      	ldrh	r3, [r7, #6]
 8007bd6:	2bd4      	cmp	r3, #212	; 0xd4
 8007bd8:	d919      	bls.n	8007c0e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	2be9      	cmp	r3, #233	; 0xe9
 8007bde:	d816      	bhi.n	8007c0e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007be0:	4b2b      	ldr	r3, [pc, #172]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007be2:	799b      	ldrb	r3, [r3, #6]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d004      	beq.n	8007bf2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 8007be8:	2100      	movs	r1, #0
 8007bea:	2007      	movs	r0, #7
 8007bec:	f7ff fa17 	bl	800701e <changeTFTScheduleRelayLights>
 8007bf0:	e003      	b.n	8007bfa <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 8007bf2:	2101      	movs	r1, #1
 8007bf4:	2007      	movs	r0, #7
 8007bf6:	f7ff fa12 	bl	800701e <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007bfa:	4b25      	ldr	r3, [pc, #148]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007bfc:	799b      	ldrb	r3, [r3, #6]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	bf0c      	ite	eq
 8007c02:	2301      	moveq	r3, #1
 8007c04:	2300      	movne	r3, #0
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4b21      	ldr	r3, [pc, #132]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c0c:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	2bf4      	cmp	r3, #244	; 0xf4
 8007c12:	d91a      	bls.n	8007c4a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007c1a:	d216      	bcs.n	8007c4a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007c1c:	4b1c      	ldr	r3, [pc, #112]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c1e:	79db      	ldrb	r3, [r3, #7]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d004      	beq.n	8007c2e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 8007c24:	2100      	movs	r1, #0
 8007c26:	2008      	movs	r0, #8
 8007c28:	f7ff f9f9 	bl	800701e <changeTFTScheduleRelayLights>
 8007c2c:	e003      	b.n	8007c36 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8007c2e:	2101      	movs	r1, #1
 8007c30:	2008      	movs	r0, #8
 8007c32:	f7ff f9f4 	bl	800701e <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 8007c36:	4b16      	ldr	r3, [pc, #88]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c38:	79db      	ldrb	r3, [r3, #7]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bf0c      	ite	eq
 8007c3e:	2301      	moveq	r3, #1
 8007c40:	2300      	movne	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c48:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8007c4a:	88fb      	ldrh	r3, [r7, #6]
 8007c4c:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8007c50:	d91a      	bls.n	8007c88 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007c58:	d216      	bcs.n	8007c88 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c5c:	7a1b      	ldrb	r3, [r3, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d004      	beq.n	8007c6c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 8007c62:	2100      	movs	r1, #0
 8007c64:	2009      	movs	r0, #9
 8007c66:	f7ff f9da 	bl	800701e <changeTFTScheduleRelayLights>
 8007c6a:	e003      	b.n	8007c74 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	2009      	movs	r0, #9
 8007c70:	f7ff f9d5 	bl	800701e <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c76:	7a1b      	ldrb	r3, [r3, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bf0c      	ite	eq
 8007c7c:	2301      	moveq	r3, #1
 8007c7e:	2300      	movne	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	461a      	mov	r2, r3
 8007c84:	4b02      	ldr	r3, [pc, #8]	; (8007c90 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007c86:	721a      	strb	r2, [r3, #8]
	}

}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000268 	.word	0x20000268

08007c94 <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	460a      	mov	r2, r1
 8007c9e:	80fb      	strh	r3, [r7, #6]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007ca4:	88fb      	ldrh	r3, [r7, #6]
 8007ca6:	2b14      	cmp	r3, #20
 8007ca8:	d919      	bls.n	8007cde <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 8007caa:	88fb      	ldrh	r3, [r7, #6]
 8007cac:	2b29      	cmp	r3, #41	; 0x29
 8007cae:	d816      	bhi.n	8007cde <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8007cb0:	4b82      	ldr	r3, [pc, #520]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d004      	beq.n	8007cc2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 8007cb8:	2100      	movs	r1, #0
 8007cba:	2001      	movs	r0, #1
 8007cbc:	f7ff f9af 	bl	800701e <changeTFTScheduleRelayLights>
 8007cc0:	e003      	b.n	8007cca <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	2001      	movs	r0, #1
 8007cc6:	f7ff f9aa 	bl	800701e <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007cca:	4b7c      	ldr	r3, [pc, #496]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	bf0c      	ite	eq
 8007cd2:	2301      	moveq	r3, #1
 8007cd4:	2300      	movne	r3, #0
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4b78      	ldr	r3, [pc, #480]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007cdc:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	2b34      	cmp	r3, #52	; 0x34
 8007ce2:	d919      	bls.n	8007d18 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 8007ce4:	88fb      	ldrh	r3, [r7, #6]
 8007ce6:	2b49      	cmp	r3, #73	; 0x49
 8007ce8:	d816      	bhi.n	8007d18 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007cea:	4b74      	ldr	r3, [pc, #464]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007cec:	785b      	ldrb	r3, [r3, #1]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	2002      	movs	r0, #2
 8007cf6:	f7ff f992 	bl	800701e <changeTFTScheduleRelayLights>
 8007cfa:	e003      	b.n	8007d04 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	2002      	movs	r0, #2
 8007d00:	f7ff f98d 	bl	800701e <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007d04:	4b6d      	ldr	r3, [pc, #436]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	bf0c      	ite	eq
 8007d0c:	2301      	moveq	r3, #1
 8007d0e:	2300      	movne	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	461a      	mov	r2, r3
 8007d14:	4b69      	ldr	r3, [pc, #420]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d16:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	2b54      	cmp	r3, #84	; 0x54
 8007d1c:	d919      	bls.n	8007d52 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 8007d1e:	88fb      	ldrh	r3, [r7, #6]
 8007d20:	2b69      	cmp	r3, #105	; 0x69
 8007d22:	d816      	bhi.n	8007d52 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007d24:	4b65      	ldr	r3, [pc, #404]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d26:	789b      	ldrb	r3, [r3, #2]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d004      	beq.n	8007d36 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	2003      	movs	r0, #3
 8007d30:	f7ff f975 	bl	800701e <changeTFTScheduleRelayLights>
 8007d34:	e003      	b.n	8007d3e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007d36:	2101      	movs	r1, #1
 8007d38:	2003      	movs	r0, #3
 8007d3a:	f7ff f970 	bl	800701e <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 8007d3e:	4b5f      	ldr	r3, [pc, #380]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d40:	789b      	ldrb	r3, [r3, #2]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	bf0c      	ite	eq
 8007d46:	2301      	moveq	r3, #1
 8007d48:	2300      	movne	r3, #0
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	4b5b      	ldr	r3, [pc, #364]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d50:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	2b74      	cmp	r3, #116	; 0x74
 8007d56:	d919      	bls.n	8007d8c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	2b89      	cmp	r3, #137	; 0x89
 8007d5c:	d816      	bhi.n	8007d8c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 8007d5e:	4b57      	ldr	r3, [pc, #348]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d60:	78db      	ldrb	r3, [r3, #3]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d004      	beq.n	8007d70 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 8007d66:	2100      	movs	r1, #0
 8007d68:	2004      	movs	r0, #4
 8007d6a:	f7ff f958 	bl	800701e <changeTFTScheduleRelayLights>
 8007d6e:	e003      	b.n	8007d78 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 8007d70:	2101      	movs	r1, #1
 8007d72:	2004      	movs	r0, #4
 8007d74:	f7ff f953 	bl	800701e <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8007d78:	4b50      	ldr	r3, [pc, #320]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d7a:	78db      	ldrb	r3, [r3, #3]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	bf0c      	ite	eq
 8007d80:	2301      	moveq	r3, #1
 8007d82:	2300      	movne	r3, #0
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	461a      	mov	r2, r3
 8007d88:	4b4c      	ldr	r3, [pc, #304]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d8a:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007d8c:	88fb      	ldrh	r3, [r7, #6]
 8007d8e:	2b94      	cmp	r3, #148	; 0x94
 8007d90:	d919      	bls.n	8007dc6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	2ba9      	cmp	r3, #169	; 0xa9
 8007d96:	d816      	bhi.n	8007dc6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8007d98:	4b48      	ldr	r3, [pc, #288]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007d9a:	791b      	ldrb	r3, [r3, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d004      	beq.n	8007daa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 8007da0:	2100      	movs	r1, #0
 8007da2:	2005      	movs	r0, #5
 8007da4:	f7ff f93b 	bl	800701e <changeTFTScheduleRelayLights>
 8007da8:	e003      	b.n	8007db2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8007daa:	2101      	movs	r1, #1
 8007dac:	2005      	movs	r0, #5
 8007dae:	f7ff f936 	bl	800701e <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 8007db2:	4b42      	ldr	r3, [pc, #264]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007db4:	791b      	ldrb	r3, [r3, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	bf0c      	ite	eq
 8007dba:	2301      	moveq	r3, #1
 8007dbc:	2300      	movne	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	4b3e      	ldr	r3, [pc, #248]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007dc4:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007dc6:	88fb      	ldrh	r3, [r7, #6]
 8007dc8:	2bb4      	cmp	r3, #180	; 0xb4
 8007dca:	d919      	bls.n	8007e00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 8007dcc:	88fb      	ldrh	r3, [r7, #6]
 8007dce:	2bc9      	cmp	r3, #201	; 0xc9
 8007dd0:	d816      	bhi.n	8007e00 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8007dd2:	4b3a      	ldr	r3, [pc, #232]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007dd4:	795b      	ldrb	r3, [r3, #5]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d004      	beq.n	8007de4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 8007dda:	2100      	movs	r1, #0
 8007ddc:	2006      	movs	r0, #6
 8007dde:	f7ff f91e 	bl	800701e <changeTFTScheduleRelayLights>
 8007de2:	e003      	b.n	8007dec <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007de4:	2101      	movs	r1, #1
 8007de6:	2006      	movs	r0, #6
 8007de8:	f7ff f919 	bl	800701e <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007dec:	4b33      	ldr	r3, [pc, #204]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007dee:	795b      	ldrb	r3, [r3, #5]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	bf0c      	ite	eq
 8007df4:	2301      	moveq	r3, #1
 8007df6:	2300      	movne	r3, #0
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	4b2f      	ldr	r3, [pc, #188]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007dfe:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007e00:	88fb      	ldrh	r3, [r7, #6]
 8007e02:	2bd4      	cmp	r3, #212	; 0xd4
 8007e04:	d919      	bls.n	8007e3a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	2be9      	cmp	r3, #233	; 0xe9
 8007e0a:	d816      	bhi.n	8007e3a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007e0c:	4b2b      	ldr	r3, [pc, #172]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e0e:	799b      	ldrb	r3, [r3, #6]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d004      	beq.n	8007e1e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 8007e14:	2100      	movs	r1, #0
 8007e16:	2007      	movs	r0, #7
 8007e18:	f7ff f901 	bl	800701e <changeTFTScheduleRelayLights>
 8007e1c:	e003      	b.n	8007e26 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 8007e1e:	2101      	movs	r1, #1
 8007e20:	2007      	movs	r0, #7
 8007e22:	f7ff f8fc 	bl	800701e <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007e26:	4b25      	ldr	r3, [pc, #148]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e28:	799b      	ldrb	r3, [r3, #6]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	bf0c      	ite	eq
 8007e2e:	2301      	moveq	r3, #1
 8007e30:	2300      	movne	r3, #0
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	461a      	mov	r2, r3
 8007e36:	4b21      	ldr	r3, [pc, #132]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e38:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	2bf4      	cmp	r3, #244	; 0xf4
 8007e3e:	d91a      	bls.n	8007e76 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007e46:	d216      	bcs.n	8007e76 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8007e48:	4b1c      	ldr	r3, [pc, #112]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e4a:	79db      	ldrb	r3, [r3, #7]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d004      	beq.n	8007e5a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 8007e50:	2100      	movs	r1, #0
 8007e52:	2008      	movs	r0, #8
 8007e54:	f7ff f8e3 	bl	800701e <changeTFTScheduleRelayLights>
 8007e58:	e003      	b.n	8007e62 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	2008      	movs	r0, #8
 8007e5e:	f7ff f8de 	bl	800701e <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 8007e62:	4b16      	ldr	r3, [pc, #88]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e64:	79db      	ldrb	r3, [r3, #7]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bf0c      	ite	eq
 8007e6a:	2301      	moveq	r3, #1
 8007e6c:	2300      	movne	r3, #0
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	4b12      	ldr	r3, [pc, #72]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e74:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8007e7c:	d91a      	bls.n	8007eb4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 8007e7e:	88fb      	ldrh	r3, [r7, #6]
 8007e80:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007e84:	d216      	bcs.n	8007eb4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8007e86:	4b0d      	ldr	r3, [pc, #52]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007e88:	7a1b      	ldrb	r3, [r3, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d004      	beq.n	8007e98 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 8007e8e:	2100      	movs	r1, #0
 8007e90:	2009      	movs	r0, #9
 8007e92:	f7ff f8c4 	bl	800701e <changeTFTScheduleRelayLights>
 8007e96:	e003      	b.n	8007ea0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8007e98:	2101      	movs	r1, #1
 8007e9a:	2009      	movs	r0, #9
 8007e9c:	f7ff f8bf 	bl	800701e <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8007ea0:	4b06      	ldr	r3, [pc, #24]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007ea2:	7a1b      	ldrb	r3, [r3, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2301      	moveq	r3, #1
 8007eaa:	2300      	movne	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	461a      	mov	r2, r3
 8007eb0:	4b02      	ldr	r3, [pc, #8]	; (8007ebc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007eb2:	721a      	strb	r2, [r3, #8]
	}
}
 8007eb4:	bf00      	nop
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	2000027c 	.word	0x2000027c

08007ec0 <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d118      	bne.n	8007f02 <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 8007ed0:	491b      	ldr	r1, [pc, #108]	; (8007f40 <updateAllSchedulesInfo+0x80>)
 8007ed2:	2001      	movs	r0, #1
 8007ed4:	f7fb f96f 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 8007ed8:	491a      	ldr	r1, [pc, #104]	; (8007f44 <updateAllSchedulesInfo+0x84>)
 8007eda:	2001      	movs	r0, #1
 8007edc:	f7fb f98f 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 8007ee0:	4919      	ldr	r1, [pc, #100]	; (8007f48 <updateAllSchedulesInfo+0x88>)
 8007ee2:	2001      	movs	r0, #1
 8007ee4:	f7fb f9af 	bl	8003246 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 8007ee8:	4918      	ldr	r1, [pc, #96]	; (8007f4c <updateAllSchedulesInfo+0x8c>)
 8007eea:	2001      	movs	r0, #1
 8007eec:	f7fb f9cf 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8007ef0:	4917      	ldr	r1, [pc, #92]	; (8007f50 <updateAllSchedulesInfo+0x90>)
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	f7fb f80e 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8007ef8:	4916      	ldr	r1, [pc, #88]	; (8007f54 <updateAllSchedulesInfo+0x94>)
 8007efa:	2001      	movs	r0, #1
 8007efc:	f7fb f886 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 8007f00:	e01a      	b.n	8007f38 <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d117      	bne.n	8007f38 <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 8007f08:	4913      	ldr	r1, [pc, #76]	; (8007f58 <updateAllSchedulesInfo+0x98>)
 8007f0a:	2002      	movs	r0, #2
 8007f0c:	f7fb f953 	bl	80031b6 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 8007f10:	4912      	ldr	r1, [pc, #72]	; (8007f5c <updateAllSchedulesInfo+0x9c>)
 8007f12:	2002      	movs	r0, #2
 8007f14:	f7fb f973 	bl	80031fe <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 8007f18:	4911      	ldr	r1, [pc, #68]	; (8007f60 <updateAllSchedulesInfo+0xa0>)
 8007f1a:	2002      	movs	r0, #2
 8007f1c:	f7fb f993 	bl	8003246 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 8007f20:	4910      	ldr	r1, [pc, #64]	; (8007f64 <updateAllSchedulesInfo+0xa4>)
 8007f22:	2002      	movs	r0, #2
 8007f24:	f7fb f9b3 	bl	800328e <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 8007f28:	4909      	ldr	r1, [pc, #36]	; (8007f50 <updateAllSchedulesInfo+0x90>)
 8007f2a:	2002      	movs	r0, #2
 8007f2c:	f7fa fff2 	bl	8002f14 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 8007f30:	4908      	ldr	r1, [pc, #32]	; (8007f54 <updateAllSchedulesInfo+0x94>)
 8007f32:	2002      	movs	r0, #2
 8007f34:	f7fb f86a 	bl	800300c <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20000285 	.word	0x20000285
 8007f44:	20000287 	.word	0x20000287
 8007f48:	20000286 	.word	0x20000286
 8007f4c:	20000288 	.word	0x20000288
 8007f50:	20000260 	.word	0x20000260
 8007f54:	20000268 	.word	0x20000268
 8007f58:	20000289 	.word	0x20000289
 8007f5c:	2000028b 	.word	0x2000028b
 8007f60:	2000028a 	.word	0x2000028a
 8007f64:	2000028c 	.word	0x2000028c

08007f68 <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af02      	add	r7, sp, #8
 8007f6e:	4603      	mov	r3, r0
 8007f70:	460a      	mov	r2, r1
 8007f72:	80fb      	strh	r3, [r7, #6]
 8007f74:	4613      	mov	r3, r2
 8007f76:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8007f78:	88bb      	ldrh	r3, [r7, #4]
 8007f7a:	2b4a      	cmp	r3, #74	; 0x4a
 8007f7c:	d926      	bls.n	8007fcc <clockIncreaseOneHourAndMinute+0x64>
 8007f7e:	88bb      	ldrh	r3, [r7, #4]
 8007f80:	2b60      	cmp	r3, #96	; 0x60
 8007f82:	d823      	bhi.n	8007fcc <clockIncreaseOneHourAndMinute+0x64>
	{
		EncoderState = ENCODER_CLOCK_HOUR;
 8007f84:	4b3d      	ldr	r3, [pc, #244]	; (800807c <clockIncreaseOneHourAndMinute+0x114>)
 8007f86:	2201      	movs	r2, #1
 8007f88:	701a      	strb	r2, [r3, #0]

		if(Hours < 24)
 8007f8a:	4b3d      	ldr	r3, [pc, #244]	; (8008080 <clockIncreaseOneHourAndMinute+0x118>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b17      	cmp	r3, #23
 8007f90:	d806      	bhi.n	8007fa0 <clockIncreaseOneHourAndMinute+0x38>
		{
			Hours++;
 8007f92:	4b3b      	ldr	r3, [pc, #236]	; (8008080 <clockIncreaseOneHourAndMinute+0x118>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	3301      	adds	r3, #1
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	4b39      	ldr	r3, [pc, #228]	; (8008080 <clockIncreaseOneHourAndMinute+0x118>)
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	e002      	b.n	8007fa6 <clockIncreaseOneHourAndMinute+0x3e>
		}
		else
		{
			Hours = 1;
 8007fa0:	4b37      	ldr	r3, [pc, #220]	; (8008080 <clockIncreaseOneHourAndMinute+0x118>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 8007fa6:	4b36      	ldr	r3, [pc, #216]	; (8008080 <clockIncreaseOneHourAndMinute+0x118>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	4935      	ldr	r1, [pc, #212]	; (8008084 <clockIncreaseOneHourAndMinute+0x11c>)
 8007fae:	4836      	ldr	r0, [pc, #216]	; (8008088 <clockIncreaseOneHourAndMinute+0x120>)
 8007fb0:	f00a faf8 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007fb4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	2301      	movs	r3, #1
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	2246      	movs	r2, #70	; 0x46
 8007fc2:	21a0      	movs	r1, #160	; 0xa0
 8007fc4:	4830      	ldr	r0, [pc, #192]	; (8008088 <clockIncreaseOneHourAndMinute+0x120>)
 8007fc6:	f7f9 feeb 	bl	8001da0 <EF_PutString>
 8007fca:	e053      	b.n	8008074 <clockIncreaseOneHourAndMinute+0x10c>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8007fcc:	88bb      	ldrh	r3, [r7, #4]
 8007fce:	2b72      	cmp	r3, #114	; 0x72
 8007fd0:	d926      	bls.n	8008020 <clockIncreaseOneHourAndMinute+0xb8>
 8007fd2:	88bb      	ldrh	r3, [r7, #4]
 8007fd4:	2b88      	cmp	r3, #136	; 0x88
 8007fd6:	d823      	bhi.n	8008020 <clockIncreaseOneHourAndMinute+0xb8>
	{
		EncoderState = ENCODER_CLOCK_MINUTE;
 8007fd8:	4b28      	ldr	r3, [pc, #160]	; (800807c <clockIncreaseOneHourAndMinute+0x114>)
 8007fda:	2202      	movs	r2, #2
 8007fdc:	701a      	strb	r2, [r3, #0]

		if(Minutes < 59)
 8007fde:	4b2b      	ldr	r3, [pc, #172]	; (800808c <clockIncreaseOneHourAndMinute+0x124>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	2b3a      	cmp	r3, #58	; 0x3a
 8007fe4:	d806      	bhi.n	8007ff4 <clockIncreaseOneHourAndMinute+0x8c>
		{
			Minutes++;
 8007fe6:	4b29      	ldr	r3, [pc, #164]	; (800808c <clockIncreaseOneHourAndMinute+0x124>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	3301      	adds	r3, #1
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	4b27      	ldr	r3, [pc, #156]	; (800808c <clockIncreaseOneHourAndMinute+0x124>)
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	e002      	b.n	8007ffa <clockIncreaseOneHourAndMinute+0x92>
		}
		else
		{
			Minutes = 0;
 8007ff4:	4b25      	ldr	r3, [pc, #148]	; (800808c <clockIncreaseOneHourAndMinute+0x124>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007ffa:	4b24      	ldr	r3, [pc, #144]	; (800808c <clockIncreaseOneHourAndMinute+0x124>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	461a      	mov	r2, r3
 8008000:	4920      	ldr	r1, [pc, #128]	; (8008084 <clockIncreaseOneHourAndMinute+0x11c>)
 8008002:	4821      	ldr	r0, [pc, #132]	; (8008088 <clockIncreaseOneHourAndMinute+0x120>)
 8008004:	f00a face 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008008:	f24c 6318 	movw	r3, #50712	; 0xc618
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	2301      	movs	r3, #1
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	2300      	movs	r3, #0
 8008014:	226e      	movs	r2, #110	; 0x6e
 8008016:	21a0      	movs	r1, #160	; 0xa0
 8008018:	481b      	ldr	r0, [pc, #108]	; (8008088 <clockIncreaseOneHourAndMinute+0x120>)
 800801a:	f7f9 fec1 	bl	8001da0 <EF_PutString>
 800801e:	e029      	b.n	8008074 <clockIncreaseOneHourAndMinute+0x10c>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8008020:	88bb      	ldrh	r3, [r7, #4]
 8008022:	2b9a      	cmp	r3, #154	; 0x9a
 8008024:	d926      	bls.n	8008074 <clockIncreaseOneHourAndMinute+0x10c>
 8008026:	88bb      	ldrh	r3, [r7, #4]
 8008028:	2bb0      	cmp	r3, #176	; 0xb0
 800802a:	d823      	bhi.n	8008074 <clockIncreaseOneHourAndMinute+0x10c>
	{
		EncoderState = ENCODER_CLOCK_DAY;
 800802c:	4b13      	ldr	r3, [pc, #76]	; (800807c <clockIncreaseOneHourAndMinute+0x114>)
 800802e:	2203      	movs	r2, #3
 8008030:	701a      	strb	r2, [r3, #0]

		if(DayOfWeek < 7)
 8008032:	4b17      	ldr	r3, [pc, #92]	; (8008090 <clockIncreaseOneHourAndMinute+0x128>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b06      	cmp	r3, #6
 8008038:	d806      	bhi.n	8008048 <clockIncreaseOneHourAndMinute+0xe0>
		{
			DayOfWeek++;
 800803a:	4b15      	ldr	r3, [pc, #84]	; (8008090 <clockIncreaseOneHourAndMinute+0x128>)
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	3301      	adds	r3, #1
 8008040:	b2da      	uxtb	r2, r3
 8008042:	4b13      	ldr	r3, [pc, #76]	; (8008090 <clockIncreaseOneHourAndMinute+0x128>)
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	e002      	b.n	800804e <clockIncreaseOneHourAndMinute+0xe6>
		}
		else
		{
			DayOfWeek = 1;
 8008048:	4b11      	ldr	r3, [pc, #68]	; (8008090 <clockIncreaseOneHourAndMinute+0x128>)
 800804a:	2201      	movs	r2, #1
 800804c:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 800804e:	4b10      	ldr	r3, [pc, #64]	; (8008090 <clockIncreaseOneHourAndMinute+0x128>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	490f      	ldr	r1, [pc, #60]	; (8008094 <clockIncreaseOneHourAndMinute+0x12c>)
 8008056:	480c      	ldr	r0, [pc, #48]	; (8008088 <clockIncreaseOneHourAndMinute+0x120>)
 8008058:	f00a faa4 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800805c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	2301      	movs	r3, #1
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	2300      	movs	r3, #0
 8008068:	2296      	movs	r2, #150	; 0x96
 800806a:	2114      	movs	r1, #20
 800806c:	4806      	ldr	r0, [pc, #24]	; (8008088 <clockIncreaseOneHourAndMinute+0x120>)
 800806e:	f7f9 fe97 	bl	8001da0 <EF_PutString>
	}
}
 8008072:	e7ff      	b.n	8008074 <clockIncreaseOneHourAndMinute+0x10c>
 8008074:	bf00      	nop
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20000299 	.word	0x20000299
 8008080:	20000032 	.word	0x20000032
 8008084:	08016850 	.word	0x08016850
 8008088:	200002c8 	.word	0x200002c8
 800808c:	20000033 	.word	0x20000033
 8008090:	20000031 	.word	0x20000031
 8008094:	08016858 	.word	0x08016858

08008098 <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af02      	add	r7, sp, #8
 800809e:	4603      	mov	r3, r0
 80080a0:	460a      	mov	r2, r1
 80080a2:	80fb      	strh	r3, [r7, #6]
 80080a4:	4613      	mov	r3, r2
 80080a6:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 80080a8:	88bb      	ldrh	r3, [r7, #4]
 80080aa:	2b4a      	cmp	r3, #74	; 0x4a
 80080ac:	d926      	bls.n	80080fc <clockIncreaseSixHoursTenMinutes+0x64>
 80080ae:	88bb      	ldrh	r3, [r7, #4]
 80080b0:	2b60      	cmp	r3, #96	; 0x60
 80080b2:	d823      	bhi.n	80080fc <clockIncreaseSixHoursTenMinutes+0x64>
	{
		EncoderState = ENCODER_CLOCK_HOUR;
 80080b4:	4b31      	ldr	r3, [pc, #196]	; (800817c <clockIncreaseSixHoursTenMinutes+0xe4>)
 80080b6:	2201      	movs	r2, #1
 80080b8:	701a      	strb	r2, [r3, #0]

		if(Hours < 19)
 80080ba:	4b31      	ldr	r3, [pc, #196]	; (8008180 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	2b12      	cmp	r3, #18
 80080c0:	d806      	bhi.n	80080d0 <clockIncreaseSixHoursTenMinutes+0x38>
		{
			Hours = Hours + 6;
 80080c2:	4b2f      	ldr	r3, [pc, #188]	; (8008180 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	3306      	adds	r3, #6
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	4b2d      	ldr	r3, [pc, #180]	; (8008180 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80080cc:	701a      	strb	r2, [r3, #0]
 80080ce:	e002      	b.n	80080d6 <clockIncreaseSixHoursTenMinutes+0x3e>
		}
		else
		{
			Hours = 1;
 80080d0:	4b2b      	ldr	r3, [pc, #172]	; (8008180 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80080d2:	2201      	movs	r2, #1
 80080d4:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 80080d6:	4b2a      	ldr	r3, [pc, #168]	; (8008180 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	4929      	ldr	r1, [pc, #164]	; (8008184 <clockIncreaseSixHoursTenMinutes+0xec>)
 80080de:	482a      	ldr	r0, [pc, #168]	; (8008188 <clockIncreaseSixHoursTenMinutes+0xf0>)
 80080e0:	f00a fa60 	bl	80125a4 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80080e4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80080e8:	9301      	str	r3, [sp, #4]
 80080ea:	2301      	movs	r3, #1
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	2300      	movs	r3, #0
 80080f0:	2246      	movs	r2, #70	; 0x46
 80080f2:	219d      	movs	r1, #157	; 0x9d
 80080f4:	4824      	ldr	r0, [pc, #144]	; (8008188 <clockIncreaseSixHoursTenMinutes+0xf0>)
 80080f6:	f7f9 fe53 	bl	8001da0 <EF_PutString>
 80080fa:	e038      	b.n	800816e <clockIncreaseSixHoursTenMinutes+0xd6>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 80080fc:	88bb      	ldrh	r3, [r7, #4]
 80080fe:	2b72      	cmp	r3, #114	; 0x72
 8008100:	d935      	bls.n	800816e <clockIncreaseSixHoursTenMinutes+0xd6>
 8008102:	88bb      	ldrh	r3, [r7, #4]
 8008104:	2b88      	cmp	r3, #136	; 0x88
 8008106:	d832      	bhi.n	800816e <clockIncreaseSixHoursTenMinutes+0xd6>
	{
		EncoderState = ENCODER_CLOCK_MINUTE;
 8008108:	4b1c      	ldr	r3, [pc, #112]	; (800817c <clockIncreaseSixHoursTenMinutes+0xe4>)
 800810a:	2202      	movs	r2, #2
 800810c:	701a      	strb	r2, [r3, #0]

		if(Minutes < 49)
 800810e:	4b1f      	ldr	r3, [pc, #124]	; (800818c <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b30      	cmp	r3, #48	; 0x30
 8008114:	d806      	bhi.n	8008124 <clockIncreaseSixHoursTenMinutes+0x8c>
		{
			Minutes = Minutes +10;
 8008116:	4b1d      	ldr	r3, [pc, #116]	; (800818c <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	330a      	adds	r3, #10
 800811c:	b2da      	uxtb	r2, r3
 800811e:	4b1b      	ldr	r3, [pc, #108]	; (800818c <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008120:	701a      	strb	r2, [r3, #0]
 8008122:	e012      	b.n	800814a <clockIncreaseSixHoursTenMinutes+0xb2>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 8008124:	4b19      	ldr	r3, [pc, #100]	; (800818c <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	f103 020a 	add.w	r2, r3, #10
 800812c:	4b18      	ldr	r3, [pc, #96]	; (8008190 <clockIncreaseSixHoursTenMinutes+0xf8>)
 800812e:	fb83 1302 	smull	r1, r3, r3, r2
 8008132:	4413      	add	r3, r2
 8008134:	1159      	asrs	r1, r3, #5
 8008136:	17d3      	asrs	r3, r2, #31
 8008138:	1ac9      	subs	r1, r1, r3
 800813a:	460b      	mov	r3, r1
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	1a5b      	subs	r3, r3, r1
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	1ad1      	subs	r1, r2, r3
 8008144:	b2ca      	uxtb	r2, r1
 8008146:	4b11      	ldr	r3, [pc, #68]	; (800818c <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008148:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 800814a:	4b10      	ldr	r3, [pc, #64]	; (800818c <clockIncreaseSixHoursTenMinutes+0xf4>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	490c      	ldr	r1, [pc, #48]	; (8008184 <clockIncreaseSixHoursTenMinutes+0xec>)
 8008152:	480d      	ldr	r0, [pc, #52]	; (8008188 <clockIncreaseSixHoursTenMinutes+0xf0>)
 8008154:	f00a fa26 	bl	80125a4 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008158:	f24c 6318 	movw	r3, #50712	; 0xc618
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	2301      	movs	r3, #1
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	2300      	movs	r3, #0
 8008164:	226e      	movs	r2, #110	; 0x6e
 8008166:	219c      	movs	r1, #156	; 0x9c
 8008168:	4807      	ldr	r0, [pc, #28]	; (8008188 <clockIncreaseSixHoursTenMinutes+0xf0>)
 800816a:	f7f9 fe19 	bl	8001da0 <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 800816e:	4809      	ldr	r0, [pc, #36]	; (8008194 <clockIncreaseSixHoursTenMinutes+0xfc>)
 8008170:	f7f9 fbfc 	bl	800196c <EF_SetFont>
}
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20000299 	.word	0x20000299
 8008180:	20000032 	.word	0x20000032
 8008184:	08016850 	.word	0x08016850
 8008188:	200002c8 	.word	0x200002c8
 800818c:	20000033 	.word	0x20000033
 8008190:	88888889 	.word	0x88888889
 8008194:	08029de4 	.word	0x08029de4

08008198 <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 80081a2:	79fb      	ldrb	r3, [r7, #7]
 80081a4:	2b40      	cmp	r3, #64	; 0x40
 80081a6:	d90e      	bls.n	80081c6 <changeSwitchStatusTouch+0x2e>
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	2b56      	cmp	r3, #86	; 0x56
 80081ac:	d80b      	bhi.n	80081c6 <changeSwitchStatusTouch+0x2e>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 80081ae:	4b24      	ldr	r3, [pc, #144]	; (8008240 <changeSwitchStatusTouch+0xa8>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <changeSwitchStatusTouch+0x26>
		{
			firstSwitchTurn(0);
 80081b6:	2000      	movs	r0, #0
 80081b8:	f000 faa4 	bl	8008704 <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 80081bc:	e038      	b.n	8008230 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstSwitchTurn(1);
 80081be:	2001      	movs	r0, #1
 80081c0:	f000 faa0 	bl	8008704 <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 80081c4:	e034      	b.n	8008230 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 80081c6:	79fb      	ldrb	r3, [r7, #7]
 80081c8:	2b5e      	cmp	r3, #94	; 0x5e
 80081ca:	d90e      	bls.n	80081ea <changeSwitchStatusTouch+0x52>
 80081cc:	79fb      	ldrb	r3, [r7, #7]
 80081ce:	2b74      	cmp	r3, #116	; 0x74
 80081d0:	d80b      	bhi.n	80081ea <changeSwitchStatusTouch+0x52>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 80081d2:	4b1b      	ldr	r3, [pc, #108]	; (8008240 <changeSwitchStatusTouch+0xa8>)
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <changeSwitchStatusTouch+0x4a>
		{
			secondSwitchTurn(0);
 80081da:	2000      	movs	r0, #0
 80081dc:	f000 fb14 	bl	8008808 <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 80081e0:	e026      	b.n	8008230 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondSwitchTurn(1);
 80081e2:	2001      	movs	r0, #1
 80081e4:	f000 fb10 	bl	8008808 <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 80081e8:	e022      	b.n	8008230 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 80081ea:	79fb      	ldrb	r3, [r7, #7]
 80081ec:	2b7c      	cmp	r3, #124	; 0x7c
 80081ee:	d90e      	bls.n	800820e <changeSwitchStatusTouch+0x76>
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	2b92      	cmp	r3, #146	; 0x92
 80081f4:	d80b      	bhi.n	800820e <changeSwitchStatusTouch+0x76>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 80081f6:	4b12      	ldr	r3, [pc, #72]	; (8008240 <changeSwitchStatusTouch+0xa8>)
 80081f8:	789b      	ldrb	r3, [r3, #2]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <changeSwitchStatusTouch+0x6e>
		{
			thirdSwitchTurn(0);
 80081fe:	2000      	movs	r0, #0
 8008200:	f000 fb84 	bl	800890c <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8008204:	e014      	b.n	8008230 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdSwitchTurn(1);
 8008206:	2001      	movs	r0, #1
 8008208:	f000 fb80 	bl	800890c <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 800820c:	e010      	b.n	8008230 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	2b9a      	cmp	r3, #154	; 0x9a
 8008212:	d90d      	bls.n	8008230 <changeSwitchStatusTouch+0x98>
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	2bb0      	cmp	r3, #176	; 0xb0
 8008218:	d80a      	bhi.n	8008230 <changeSwitchStatusTouch+0x98>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 800821a:	4b09      	ldr	r3, [pc, #36]	; (8008240 <changeSwitchStatusTouch+0xa8>)
 800821c:	78db      	ldrb	r3, [r3, #3]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <changeSwitchStatusTouch+0x92>
		{
			fourthSwitchTurn(0);
 8008222:	2000      	movs	r0, #0
 8008224:	f000 fbf4 	bl	8008a10 <fourthSwitchTurn>
 8008228:	e002      	b.n	8008230 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthSwitchTurn(1);
 800822a:	2001      	movs	r0, #1
 800822c:	f000 fbf0 	bl	8008a10 <fourthSwitchTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008230:	4804      	ldr	r0, [pc, #16]	; (8008244 <changeSwitchStatusTouch+0xac>)
 8008232:	f7f9 fb9b 	bl	800196c <EF_SetFont>
}
 8008236:	bf00      	nop
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	200002b0 	.word	0x200002b0
 8008244:	08029de4 	.word	0x08029de4

08008248 <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	4603      	mov	r3, r0
 8008250:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8008252:	79fb      	ldrb	r3, [r7, #7]
 8008254:	2b40      	cmp	r3, #64	; 0x40
 8008256:	d90e      	bls.n	8008276 <changeLightsStatusTouch+0x2e>
 8008258:	79fb      	ldrb	r3, [r7, #7]
 800825a:	2b56      	cmp	r3, #86	; 0x56
 800825c:	d80b      	bhi.n	8008276 <changeLightsStatusTouch+0x2e>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 800825e:	4b24      	ldr	r3, [pc, #144]	; (80082f0 <changeLightsStatusTouch+0xa8>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <changeLightsStatusTouch+0x26>
		{
			firstLightTurn(0);
 8008266:	2000      	movs	r0, #0
 8008268:	f000 fc54 	bl	8008b14 <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 800826c:	e038      	b.n	80082e0 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstLightTurn(1);
 800826e:	2001      	movs	r0, #1
 8008270:	f000 fc50 	bl	8008b14 <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 8008274:	e034      	b.n	80082e0 <changeLightsStatusTouch+0x98>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	2b5e      	cmp	r3, #94	; 0x5e
 800827a:	d90e      	bls.n	800829a <changeLightsStatusTouch+0x52>
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	2b74      	cmp	r3, #116	; 0x74
 8008280:	d80b      	bhi.n	800829a <changeLightsStatusTouch+0x52>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 8008282:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <changeLightsStatusTouch+0xa8>)
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <changeLightsStatusTouch+0x4a>
		{
			secondLightTurn(0);
 800828a:	2000      	movs	r0, #0
 800828c:	f000 fcc0 	bl	8008c10 <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8008290:	e026      	b.n	80082e0 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondLightTurn(1);
 8008292:	2001      	movs	r0, #1
 8008294:	f000 fcbc 	bl	8008c10 <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8008298:	e022      	b.n	80082e0 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	2b7c      	cmp	r3, #124	; 0x7c
 800829e:	d90e      	bls.n	80082be <changeLightsStatusTouch+0x76>
 80082a0:	79fb      	ldrb	r3, [r7, #7]
 80082a2:	2b92      	cmp	r3, #146	; 0x92
 80082a4:	d80b      	bhi.n	80082be <changeLightsStatusTouch+0x76>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 80082a6:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <changeLightsStatusTouch+0xa8>)
 80082a8:	789b      	ldrb	r3, [r3, #2]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <changeLightsStatusTouch+0x6e>
		{
			thirdLightTurn(0);
 80082ae:	2000      	movs	r0, #0
 80082b0:	f000 fd2c 	bl	8008d0c <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 80082b4:	e014      	b.n	80082e0 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdLightTurn(1);
 80082b6:	2001      	movs	r0, #1
 80082b8:	f000 fd28 	bl	8008d0c <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 80082bc:	e010      	b.n	80082e0 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	2b9a      	cmp	r3, #154	; 0x9a
 80082c2:	d90d      	bls.n	80082e0 <changeLightsStatusTouch+0x98>
 80082c4:	79fb      	ldrb	r3, [r7, #7]
 80082c6:	2bb0      	cmp	r3, #176	; 0xb0
 80082c8:	d80a      	bhi.n	80082e0 <changeLightsStatusTouch+0x98>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 80082ca:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <changeLightsStatusTouch+0xa8>)
 80082cc:	78db      	ldrb	r3, [r3, #3]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <changeLightsStatusTouch+0x92>
		{
			fourthLightTurn(0);
 80082d2:	2000      	movs	r0, #0
 80082d4:	f000 fd98 	bl	8008e08 <fourthLightTurn>
 80082d8:	e002      	b.n	80082e0 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthLightTurn(1);
 80082da:	2001      	movs	r0, #1
 80082dc:	f000 fd94 	bl	8008e08 <fourthLightTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 80082e0:	4804      	ldr	r0, [pc, #16]	; (80082f4 <changeLightsStatusTouch+0xac>)
 80082e2:	f7f9 fb43 	bl	800196c <EF_SetFont>
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	200002b4 	.word	0x200002b4
 80082f4:	08029de4 	.word	0x08029de4

080082f8 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	4603      	mov	r3, r0
 8008300:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	2b3b      	cmp	r3, #59	; 0x3b
 8008306:	d966      	bls.n	80083d6 <predefinedActivityTouchAction+0xde>
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	2b64      	cmp	r3, #100	; 0x64
 800830c:	d863      	bhi.n	80083d6 <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 800830e:	4b69      	ldr	r3, [pc, #420]	; (80084b4 <predefinedActivityTouchAction+0x1bc>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d02f      	beq.n	8008376 <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 8008316:	4b67      	ldr	r3, [pc, #412]	; (80084b4 <predefinedActivityTouchAction+0x1bc>)
 8008318:	2200      	movs	r2, #0
 800831a:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800831c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	230a      	movs	r3, #10
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	2328      	movs	r3, #40	; 0x28
 8008328:	2278      	movs	r2, #120	; 0x78
 800832a:	213c      	movs	r1, #60	; 0x3c
 800832c:	2064      	movs	r0, #100	; 0x64
 800832e:	f7f9 facc 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 8008332:	4961      	ldr	r1, [pc, #388]	; (80084b8 <predefinedActivityTouchAction+0x1c0>)
 8008334:	4861      	ldr	r0, [pc, #388]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 8008336:	f00a f935 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800833a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	2300      	movs	r3, #0
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	2300      	movs	r3, #0
 8008346:	223e      	movs	r2, #62	; 0x3e
 8008348:	2177      	movs	r1, #119	; 0x77
 800834a:	485c      	ldr	r0, [pc, #368]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 800834c:	f7f9 fd28 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 8008350:	495b      	ldr	r1, [pc, #364]	; (80084c0 <predefinedActivityTouchAction+0x1c8>)
 8008352:	485a      	ldr	r0, [pc, #360]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 8008354:	f00a f926 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008358:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	2300      	movs	r3, #0
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	2300      	movs	r3, #0
 8008364:	2250      	movs	r2, #80	; 0x50
 8008366:	2193      	movs	r1, #147	; 0x93
 8008368:	4854      	ldr	r0, [pc, #336]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 800836a:	f7f9 fd19 	bl	8001da0 <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 800836e:	2000      	movs	r0, #0
 8008370:	f7fc fe6e 	bl	8005050 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8008374:	e099      	b.n	80084aa <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 8008376:	4b4f      	ldr	r3, [pc, #316]	; (80084b4 <predefinedActivityTouchAction+0x1bc>)
 8008378:	2201      	movs	r2, #1
 800837a:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800837c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	230a      	movs	r3, #10
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	2328      	movs	r3, #40	; 0x28
 8008388:	2278      	movs	r2, #120	; 0x78
 800838a:	213c      	movs	r1, #60	; 0x3c
 800838c:	2064      	movs	r0, #100	; 0x64
 800838e:	f7f9 fa9c 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 8008392:	4949      	ldr	r1, [pc, #292]	; (80084b8 <predefinedActivityTouchAction+0x1c0>)
 8008394:	4849      	ldr	r0, [pc, #292]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 8008396:	f00a f905 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800839a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	2300      	movs	r3, #0
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	2300      	movs	r3, #0
 80083a6:	223e      	movs	r2, #62	; 0x3e
 80083a8:	2177      	movs	r1, #119	; 0x77
 80083aa:	4844      	ldr	r0, [pc, #272]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 80083ac:	f7f9 fcf8 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "ON");
 80083b0:	4944      	ldr	r1, [pc, #272]	; (80084c4 <predefinedActivityTouchAction+0x1cc>)
 80083b2:	4842      	ldr	r0, [pc, #264]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 80083b4:	f00a f8f6 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80083b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	2300      	movs	r3, #0
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	2300      	movs	r3, #0
 80083c4:	2250      	movs	r2, #80	; 0x50
 80083c6:	2193      	movs	r1, #147	; 0x93
 80083c8:	483c      	ldr	r0, [pc, #240]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 80083ca:	f7f9 fce9 	bl	8001da0 <EF_PutString>
			predefinedActivityKarmienie(1);
 80083ce:	2001      	movs	r0, #1
 80083d0:	f7fc fe3e 	bl	8005050 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 80083d4:	e069      	b.n	80084aa <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	2b77      	cmp	r3, #119	; 0x77
 80083da:	d966      	bls.n	80084aa <predefinedActivityTouchAction+0x1b2>
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	2ba0      	cmp	r3, #160	; 0xa0
 80083e0:	d863      	bhi.n	80084aa <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 80083e2:	4b34      	ldr	r3, [pc, #208]	; (80084b4 <predefinedActivityTouchAction+0x1bc>)
 80083e4:	785b      	ldrb	r3, [r3, #1]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d02f      	beq.n	800844a <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 80083ea:	4b32      	ldr	r3, [pc, #200]	; (80084b4 <predefinedActivityTouchAction+0x1bc>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80083f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	230a      	movs	r3, #10
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	2328      	movs	r3, #40	; 0x28
 80083fc:	2278      	movs	r2, #120	; 0x78
 80083fe:	2178      	movs	r1, #120	; 0x78
 8008400:	2064      	movs	r0, #100	; 0x64
 8008402:	f7f9 fa62 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8008406:	4930      	ldr	r1, [pc, #192]	; (80084c8 <predefinedActivityTouchAction+0x1d0>)
 8008408:	482c      	ldr	r0, [pc, #176]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 800840a:	f00a f8cb 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800840e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	2300      	movs	r3, #0
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	2300      	movs	r3, #0
 800841a:	227a      	movs	r2, #122	; 0x7a
 800841c:	2169      	movs	r1, #105	; 0x69
 800841e:	4827      	ldr	r0, [pc, #156]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 8008420:	f7f9 fcbe 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "OFF");
 8008424:	4926      	ldr	r1, [pc, #152]	; (80084c0 <predefinedActivityTouchAction+0x1c8>)
 8008426:	4825      	ldr	r0, [pc, #148]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 8008428:	f00a f8bc 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800842c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	2300      	movs	r3, #0
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	2300      	movs	r3, #0
 8008438:	228c      	movs	r2, #140	; 0x8c
 800843a:	2193      	movs	r1, #147	; 0x93
 800843c:	481f      	ldr	r0, [pc, #124]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 800843e:	f7f9 fcaf 	bl	8001da0 <EF_PutString>
			predefinedActivityCzyszczenie(0);
 8008442:	2000      	movs	r0, #0
 8008444:	f7fc fdea 	bl	800501c <predefinedActivityCzyszczenie>
			sprintf((char*)Msg, "ON");
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 8008448:	e02f      	b.n	80084aa <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 800844a:	4b1a      	ldr	r3, [pc, #104]	; (80084b4 <predefinedActivityTouchAction+0x1bc>)
 800844c:	2201      	movs	r2, #1
 800844e:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008450:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	230a      	movs	r3, #10
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	2328      	movs	r3, #40	; 0x28
 800845c:	2278      	movs	r2, #120	; 0x78
 800845e:	2178      	movs	r1, #120	; 0x78
 8008460:	2064      	movs	r0, #100	; 0x64
 8008462:	f7f9 fa32 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8008466:	4918      	ldr	r1, [pc, #96]	; (80084c8 <predefinedActivityTouchAction+0x1d0>)
 8008468:	4814      	ldr	r0, [pc, #80]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 800846a:	f00a f89b 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800846e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008472:	9301      	str	r3, [sp, #4]
 8008474:	2300      	movs	r3, #0
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	2300      	movs	r3, #0
 800847a:	227a      	movs	r2, #122	; 0x7a
 800847c:	2169      	movs	r1, #105	; 0x69
 800847e:	480f      	ldr	r0, [pc, #60]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 8008480:	f7f9 fc8e 	bl	8001da0 <EF_PutString>
			sprintf((char*)Msg, "ON");
 8008484:	490f      	ldr	r1, [pc, #60]	; (80084c4 <predefinedActivityTouchAction+0x1cc>)
 8008486:	480d      	ldr	r0, [pc, #52]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 8008488:	f00a f88c 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800848c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008490:	9301      	str	r3, [sp, #4]
 8008492:	2300      	movs	r3, #0
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	2300      	movs	r3, #0
 8008498:	228c      	movs	r2, #140	; 0x8c
 800849a:	2193      	movs	r1, #147	; 0x93
 800849c:	4807      	ldr	r0, [pc, #28]	; (80084bc <predefinedActivityTouchAction+0x1c4>)
 800849e:	f7f9 fc7f 	bl	8001da0 <EF_PutString>
			predefinedActivityCzyszczenie(1);
 80084a2:	2001      	movs	r0, #1
 80084a4:	f7fc fdba 	bl	800501c <predefinedActivityCzyszczenie>
}
 80084a8:	e7ff      	b.n	80084aa <predefinedActivityTouchAction+0x1b2>
 80084aa:	bf00      	nop
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	200002b8 	.word	0x200002b8
 80084b8:	0801686c 	.word	0x0801686c
 80084bc:	200002c8 	.word	0x200002c8
 80084c0:	08016878 	.word	0x08016878
 80084c4:	0801687c 	.word	0x0801687c
 80084c8:	08016880 	.word	0x08016880

080084cc <increaseNumberOfWSLedOnTFT>:

//
// Handling Touch to increase number of WS LED
//
void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	4603      	mov	r3, r0
 80084d4:	460a      	mov	r2, r1
 80084d6:	71fb      	strb	r3, [r7, #7]
 80084d8:	4613      	mov	r3, r2
 80084da:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 80084dc:	79fb      	ldrb	r3, [r7, #7]
 80084de:	2bd8      	cmp	r3, #216	; 0xd8
 80084e0:	d92f      	bls.n	8008542 <increaseNumberOfWSLedOnTFT+0x76>
 80084e2:	79fb      	ldrb	r3, [r7, #7]
 80084e4:	2bf7      	cmp	r3, #247	; 0xf7
 80084e6:	d82c      	bhi.n	8008542 <increaseNumberOfWSLedOnTFT+0x76>
	{
		if(NrOfLeds < 98)
 80084e8:	4b38      	ldr	r3, [pc, #224]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b61      	cmp	r3, #97	; 0x61
 80084ee:	d806      	bhi.n	80084fe <increaseNumberOfWSLedOnTFT+0x32>
		{
			NrOfLeds++;
 80084f0:	4b36      	ldr	r3, [pc, #216]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	3301      	adds	r3, #1
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	4b34      	ldr	r3, [pc, #208]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e002      	b.n	8008504 <increaseNumberOfWSLedOnTFT+0x38>
		}
		else
		{
			NrOfLeds = 1;
 80084fe:	4b33      	ldr	r3, [pc, #204]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 8008500:	2201      	movs	r2, #1
 8008502:	701a      	strb	r2, [r3, #0]
		}
		if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008504:	4b31      	ldr	r3, [pc, #196]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b09      	cmp	r3, #9
 800850a:	d807      	bhi.n	800851c <increaseNumberOfWSLedOnTFT+0x50>
 800850c:	4b2f      	ldr	r3, [pc, #188]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	492f      	ldr	r1, [pc, #188]	; (80085d0 <increaseNumberOfWSLedOnTFT+0x104>)
 8008514:	482f      	ldr	r0, [pc, #188]	; (80085d4 <increaseNumberOfWSLedOnTFT+0x108>)
 8008516:	f00a f845 	bl	80125a4 <siprintf>
 800851a:	e006      	b.n	800852a <increaseNumberOfWSLedOnTFT+0x5e>
		else sprintf((char*)Msg, " %d", NrOfLeds);
 800851c:	4b2b      	ldr	r3, [pc, #172]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	461a      	mov	r2, r3
 8008522:	492d      	ldr	r1, [pc, #180]	; (80085d8 <increaseNumberOfWSLedOnTFT+0x10c>)
 8008524:	482b      	ldr	r0, [pc, #172]	; (80085d4 <increaseNumberOfWSLedOnTFT+0x108>)
 8008526:	f00a f83d 	bl	80125a4 <siprintf>
		EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800852a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	2301      	movs	r3, #1
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	2300      	movs	r3, #0
 8008536:	223c      	movs	r2, #60	; 0x3c
 8008538:	21ac      	movs	r1, #172	; 0xac
 800853a:	4826      	ldr	r0, [pc, #152]	; (80085d4 <increaseNumberOfWSLedOnTFT+0x108>)
 800853c:	f7f9 fc30 	bl	8001da0 <EF_PutString>
		sprintf((char*)Msg, "OK");
		EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 8008540:	e03f      	b.n	80085c2 <increaseNumberOfWSLedOnTFT+0xf6>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	2bfb      	cmp	r3, #251	; 0xfb
 8008546:	d93c      	bls.n	80085c2 <increaseNumberOfWSLedOnTFT+0xf6>
		if(NrOfLeds < 90)
 8008548:	4b20      	ldr	r3, [pc, #128]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b59      	cmp	r3, #89	; 0x59
 800854e:	d806      	bhi.n	800855e <increaseNumberOfWSLedOnTFT+0x92>
			NrOfLeds = NrOfLeds + 10;
 8008550:	4b1e      	ldr	r3, [pc, #120]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	330a      	adds	r3, #10
 8008556:	b2da      	uxtb	r2, r3
 8008558:	4b1c      	ldr	r3, [pc, #112]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	e013      	b.n	8008586 <increaseNumberOfWSLedOnTFT+0xba>
			NrOfLeds = (NrOfLeds + 10) % 99;
 800855e:	4b1b      	ldr	r3, [pc, #108]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	f103 020a 	add.w	r2, r3, #10
 8008566:	4b1d      	ldr	r3, [pc, #116]	; (80085dc <increaseNumberOfWSLedOnTFT+0x110>)
 8008568:	fb83 1302 	smull	r1, r3, r3, r2
 800856c:	4413      	add	r3, r2
 800856e:	1199      	asrs	r1, r3, #6
 8008570:	17d3      	asrs	r3, r2, #31
 8008572:	1ac9      	subs	r1, r1, r3
 8008574:	460b      	mov	r3, r1
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	440b      	add	r3, r1
 800857a:	0159      	lsls	r1, r3, #5
 800857c:	440b      	add	r3, r1
 800857e:	1ad1      	subs	r1, r2, r3
 8008580:	b2ca      	uxtb	r2, r1
 8008582:	4b12      	ldr	r3, [pc, #72]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 8008584:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8008586:	4b11      	ldr	r3, [pc, #68]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b09      	cmp	r3, #9
 800858c:	d807      	bhi.n	800859e <increaseNumberOfWSLedOnTFT+0xd2>
 800858e:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	490e      	ldr	r1, [pc, #56]	; (80085d0 <increaseNumberOfWSLedOnTFT+0x104>)
 8008596:	480f      	ldr	r0, [pc, #60]	; (80085d4 <increaseNumberOfWSLedOnTFT+0x108>)
 8008598:	f00a f804 	bl	80125a4 <siprintf>
 800859c:	e006      	b.n	80085ac <increaseNumberOfWSLedOnTFT+0xe0>
	else sprintf((char*)Msg, " %d", NrOfLeds);
 800859e:	4b0b      	ldr	r3, [pc, #44]	; (80085cc <increaseNumberOfWSLedOnTFT+0x100>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	490c      	ldr	r1, [pc, #48]	; (80085d8 <increaseNumberOfWSLedOnTFT+0x10c>)
 80085a6:	480b      	ldr	r0, [pc, #44]	; (80085d4 <increaseNumberOfWSLedOnTFT+0x108>)
 80085a8:	f009 fffc 	bl	80125a4 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80085ac:	f24c 6318 	movw	r3, #50712	; 0xc618
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	2301      	movs	r3, #1
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	2300      	movs	r3, #0
 80085b8:	223c      	movs	r2, #60	; 0x3c
 80085ba:	21ac      	movs	r1, #172	; 0xac
 80085bc:	4805      	ldr	r0, [pc, #20]	; (80085d4 <increaseNumberOfWSLedOnTFT+0x108>)
 80085be:	f7f9 fbef 	bl	8001da0 <EF_PutString>
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000034 	.word	0x20000034
 80085d0:	0801688c 	.word	0x0801688c
 80085d4:	200002c8 	.word	0x200002c8
 80085d8:	08016894 	.word	0x08016894
 80085dc:	a57eb503 	.word	0xa57eb503

080085e0 <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	460a      	mov	r2, r1
 80085ea:	71fb      	strb	r3, [r7, #7]
 80085ec:	4613      	mov	r3, r2
 80085ee:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 80085f0:	79bb      	ldrb	r3, [r7, #6]
 80085f2:	2b5e      	cmp	r3, #94	; 0x5e
 80085f4:	d91e      	bls.n	8008634 <changeTypeOfWSLights+0x54>
 80085f6:	79bb      	ldrb	r3, [r7, #6]
 80085f8:	2b74      	cmp	r3, #116	; 0x74
 80085fa:	d81b      	bhi.n	8008634 <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	2b95      	cmp	r3, #149	; 0x95
 8008600:	d906      	bls.n	8008610 <changeTypeOfWSLights+0x30>
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	2bbe      	cmp	r3, #190	; 0xbe
 8008606:	d803      	bhi.n	8008610 <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 8008608:	201d      	movs	r0, #29
 800860a:	f000 fffb 	bl	8009604 <SendComand>
 800860e:	e010      	b.n	8008632 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	2bc9      	cmp	r3, #201	; 0xc9
 8008614:	d906      	bls.n	8008624 <changeTypeOfWSLights+0x44>
 8008616:	79fb      	ldrb	r3, [r7, #7]
 8008618:	2bf2      	cmp	r3, #242	; 0xf2
 800861a:	d803      	bhi.n	8008624 <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 800861c:	201e      	movs	r0, #30
 800861e:	f000 fff1 	bl	8009604 <SendComand>
 8008622:	e006      	b.n	8008632 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008624:	79fb      	ldrb	r3, [r7, #7]
 8008626:	2bfd      	cmp	r3, #253	; 0xfd
 8008628:	d962      	bls.n	80086f0 <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 800862a:	201f      	movs	r0, #31
 800862c:	f000 ffea 	bl	8009604 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008630:	e05e      	b.n	80086f0 <changeTypeOfWSLights+0x110>
 8008632:	e05d      	b.n	80086f0 <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 8008634:	79bb      	ldrb	r3, [r7, #6]
 8008636:	2b7c      	cmp	r3, #124	; 0x7c
 8008638:	d91e      	bls.n	8008678 <changeTypeOfWSLights+0x98>
 800863a:	79bb      	ldrb	r3, [r7, #6]
 800863c:	2b92      	cmp	r3, #146	; 0x92
 800863e:	d81b      	bhi.n	8008678 <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	2b95      	cmp	r3, #149	; 0x95
 8008644:	d906      	bls.n	8008654 <changeTypeOfWSLights+0x74>
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	2bbe      	cmp	r3, #190	; 0xbe
 800864a:	d803      	bhi.n	8008654 <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 800864c:	2020      	movs	r0, #32
 800864e:	f000 ffd9 	bl	8009604 <SendComand>
 8008652:	e010      	b.n	8008676 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	2bc9      	cmp	r3, #201	; 0xc9
 8008658:	d906      	bls.n	8008668 <changeTypeOfWSLights+0x88>
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	2bf2      	cmp	r3, #242	; 0xf2
 800865e:	d803      	bhi.n	8008668 <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 8008660:	2021      	movs	r0, #33	; 0x21
 8008662:	f000 ffcf 	bl	8009604 <SendComand>
 8008666:	e006      	b.n	8008676 <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	2bfd      	cmp	r3, #253	; 0xfd
 800866c:	d942      	bls.n	80086f4 <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 800866e:	2022      	movs	r0, #34	; 0x22
 8008670:	f000 ffc8 	bl	8009604 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008674:	e03e      	b.n	80086f4 <changeTypeOfWSLights+0x114>
 8008676:	e03d      	b.n	80086f4 <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8008678:	79bb      	ldrb	r3, [r7, #6]
 800867a:	2b9b      	cmp	r3, #155	; 0x9b
 800867c:	d91e      	bls.n	80086bc <changeTypeOfWSLights+0xdc>
 800867e:	79bb      	ldrb	r3, [r7, #6]
 8008680:	2bb1      	cmp	r3, #177	; 0xb1
 8008682:	d81b      	bhi.n	80086bc <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	2b13      	cmp	r3, #19
 8008688:	d906      	bls.n	8008698 <changeTypeOfWSLights+0xb8>
 800868a:	79fb      	ldrb	r3, [r7, #7]
 800868c:	2b64      	cmp	r3, #100	; 0x64
 800868e:	d803      	bhi.n	8008698 <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 8008690:	2023      	movs	r0, #35	; 0x23
 8008692:	f000 ffb7 	bl	8009604 <SendComand>
 8008696:	e010      	b.n	80086ba <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	2b77      	cmp	r3, #119	; 0x77
 800869c:	d906      	bls.n	80086ac <changeTypeOfWSLights+0xcc>
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	2bc8      	cmp	r3, #200	; 0xc8
 80086a2:	d803      	bhi.n	80086ac <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 80086a4:	201c      	movs	r0, #28
 80086a6:	f000 ffad 	bl	8009604 <SendComand>
 80086aa:	e006      	b.n	80086ba <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	2bdb      	cmp	r3, #219	; 0xdb
 80086b0:	d922      	bls.n	80086f8 <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 80086b2:	2024      	movs	r0, #36	; 0x24
 80086b4:	f000 ffa6 	bl	8009604 <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80086b8:	e01e      	b.n	80086f8 <changeTypeOfWSLights+0x118>
 80086ba:	e01d      	b.n	80086f8 <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 80086bc:	79bb      	ldrb	r3, [r7, #6]
 80086be:	2bba      	cmp	r3, #186	; 0xba
 80086c0:	d91b      	bls.n	80086fa <changeTypeOfWSLights+0x11a>
 80086c2:	79bb      	ldrb	r3, [r7, #6]
 80086c4:	2bd0      	cmp	r3, #208	; 0xd0
 80086c6:	d818      	bhi.n	80086fa <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	2b45      	cmp	r3, #69	; 0x45
 80086cc:	d906      	bls.n	80086dc <changeTypeOfWSLights+0xfc>
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	2b96      	cmp	r3, #150	; 0x96
 80086d2:	d803      	bhi.n	80086dc <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 80086d4:	2026      	movs	r0, #38	; 0x26
 80086d6:	f000 ff95 	bl	8009604 <SendComand>
 80086da:	e00e      	b.n	80086fa <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	2ba9      	cmp	r3, #169	; 0xa9
 80086e0:	d90b      	bls.n	80086fa <changeTypeOfWSLights+0x11a>
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	2bfa      	cmp	r3, #250	; 0xfa
 80086e6:	d808      	bhi.n	80086fa <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 80086e8:	2027      	movs	r0, #39	; 0x27
 80086ea:	f000 ff8b 	bl	8009604 <SendComand>
		}
	}
}
 80086ee:	e004      	b.n	80086fa <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80086f0:	bf00      	nop
 80086f2:	e002      	b.n	80086fa <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80086f4:	bf00      	nop
 80086f6:	e000      	b.n	80086fa <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80086f8:	bf00      	nop
}
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <firstSwitchTurn>:
////////////////////////////////////////////////////////////////////
//
// Functions to change state of relays to manage switches and lights
//
void firstSwitchTurn(uint8_t NewState)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af02      	add	r7, sp, #8
 800870a:	4603      	mov	r3, r0
 800870c:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d131      	bne.n	8008778 <firstSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8008714:	2006      	movs	r0, #6
 8008716:	f000 ff75 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 800871a:	4932      	ldr	r1, [pc, #200]	; (80087e4 <firstSwitchTurn+0xe0>)
 800871c:	4832      	ldr	r0, [pc, #200]	; (80087e8 <firstSwitchTurn+0xe4>)
 800871e:	f001 fe99 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008722:	4b32      	ldr	r3, [pc, #200]	; (80087ec <firstSwitchTurn+0xe8>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d11e      	bne.n	8008768 <firstSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 800872a:	4831      	ldr	r0, [pc, #196]	; (80087f0 <firstSwitchTurn+0xec>)
 800872c:	f7f9 f91e 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008730:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008734:	9301      	str	r3, [sp, #4]
 8008736:	2305      	movs	r3, #5
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	2315      	movs	r3, #21
 800873c:	2221      	movs	r2, #33	; 0x21
 800873e:	2141      	movs	r1, #65	; 0x41
 8008740:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008744:	f7f9 f8c1 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008748:	492a      	ldr	r1, [pc, #168]	; (80087f4 <firstSwitchTurn+0xf0>)
 800874a:	482b      	ldr	r0, [pc, #172]	; (80087f8 <firstSwitchTurn+0xf4>)
 800874c:	f009 ff2a 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008750:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008754:	9301      	str	r3, [sp, #4]
 8008756:	2300      	movs	r3, #0
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	2300      	movs	r3, #0
 800875c:	2243      	movs	r2, #67	; 0x43
 800875e:	f240 1111 	movw	r1, #273	; 0x111
 8008762:	4825      	ldr	r0, [pc, #148]	; (80087f8 <firstSwitchTurn+0xf4>)
 8008764:	f7f9 fb1c 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[0] = 0;
 8008768:	4b24      	ldr	r3, [pc, #144]	; (80087fc <firstSwitchTurn+0xf8>)
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 0);
 800876e:	2100      	movs	r1, #0
 8008770:	2001      	movs	r0, #1
 8008772:	f7fa fa7f 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[0] = 1;
		EEPROM_RelayStateUpdate(1, 1);
	}
}
 8008776:	e030      	b.n	80087da <firstSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8008778:	2005      	movs	r0, #5
 800877a:	f000 ff43 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 800877e:	4920      	ldr	r1, [pc, #128]	; (8008800 <firstSwitchTurn+0xfc>)
 8008780:	4819      	ldr	r0, [pc, #100]	; (80087e8 <firstSwitchTurn+0xe4>)
 8008782:	f001 fe67 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008786:	4b19      	ldr	r3, [pc, #100]	; (80087ec <firstSwitchTurn+0xe8>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d11e      	bne.n	80087cc <firstSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 800878e:	4818      	ldr	r0, [pc, #96]	; (80087f0 <firstSwitchTurn+0xec>)
 8008790:	f7f9 f8ec 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008794:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	2305      	movs	r3, #5
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	2315      	movs	r3, #21
 80087a0:	2221      	movs	r2, #33	; 0x21
 80087a2:	2141      	movs	r1, #65	; 0x41
 80087a4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80087a8:	f7f9 f88f 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 80087ac:	4915      	ldr	r1, [pc, #84]	; (8008804 <firstSwitchTurn+0x100>)
 80087ae:	4812      	ldr	r0, [pc, #72]	; (80087f8 <firstSwitchTurn+0xf4>)
 80087b0:	f009 fef8 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80087b4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	2300      	movs	r3, #0
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	2300      	movs	r3, #0
 80087c0:	2243      	movs	r2, #67	; 0x43
 80087c2:	f240 1111 	movw	r1, #273	; 0x111
 80087c6:	480c      	ldr	r0, [pc, #48]	; (80087f8 <firstSwitchTurn+0xf4>)
 80087c8:	f7f9 faea 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[0] = 1;
 80087cc:	4b0b      	ldr	r3, [pc, #44]	; (80087fc <firstSwitchTurn+0xf8>)
 80087ce:	2201      	movs	r2, #1
 80087d0:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 1);
 80087d2:	2101      	movs	r1, #1
 80087d4:	2001      	movs	r0, #1
 80087d6:	f7fa fa4d 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 80087da:	bf00      	nop
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	08016898 	.word	0x08016898
 80087e8:	200006c4 	.word	0x200006c4
 80087ec:	20000298 	.word	0x20000298
 80087f0:	08027e6c 	.word	0x08027e6c
 80087f4:	08016878 	.word	0x08016878
 80087f8:	200002c8 	.word	0x200002c8
 80087fc:	200002b0 	.word	0x200002b0
 8008800:	080168a4 	.word	0x080168a4
 8008804:	0801687c 	.word	0x0801687c

08008808 <secondSwitchTurn>:
void secondSwitchTurn(uint8_t NewState)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af02      	add	r7, sp, #8
 800880e:	4603      	mov	r3, r0
 8008810:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d131      	bne.n	800887c <secondSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8008818:	2008      	movs	r0, #8
 800881a:	f000 fef3 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 800881e:	4932      	ldr	r1, [pc, #200]	; (80088e8 <secondSwitchTurn+0xe0>)
 8008820:	4832      	ldr	r0, [pc, #200]	; (80088ec <secondSwitchTurn+0xe4>)
 8008822:	f001 fe17 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008826:	4b32      	ldr	r3, [pc, #200]	; (80088f0 <secondSwitchTurn+0xe8>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b02      	cmp	r3, #2
 800882c:	d11e      	bne.n	800886c <secondSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 800882e:	4831      	ldr	r0, [pc, #196]	; (80088f4 <secondSwitchTurn+0xec>)
 8008830:	f7f9 f89c 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008834:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	2305      	movs	r3, #5
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	2315      	movs	r3, #21
 8008840:	2221      	movs	r2, #33	; 0x21
 8008842:	215f      	movs	r1, #95	; 0x5f
 8008844:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008848:	f7f9 f83f 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 800884c:	492a      	ldr	r1, [pc, #168]	; (80088f8 <secondSwitchTurn+0xf0>)
 800884e:	482b      	ldr	r0, [pc, #172]	; (80088fc <secondSwitchTurn+0xf4>)
 8008850:	f009 fea8 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008854:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	2300      	movs	r3, #0
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	2300      	movs	r3, #0
 8008860:	2261      	movs	r2, #97	; 0x61
 8008862:	f240 1111 	movw	r1, #273	; 0x111
 8008866:	4825      	ldr	r0, [pc, #148]	; (80088fc <secondSwitchTurn+0xf4>)
 8008868:	f7f9 fa9a 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[1] = 0;
 800886c:	4b24      	ldr	r3, [pc, #144]	; (8008900 <secondSwitchTurn+0xf8>)
 800886e:	2200      	movs	r2, #0
 8008870:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 0);
 8008872:	2100      	movs	r1, #0
 8008874:	2002      	movs	r0, #2
 8008876:	f7fa f9fd 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[1] = 1;
		EEPROM_RelayStateUpdate(2, 1);
	}
}
 800887a:	e030      	b.n	80088de <secondSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 800887c:	2007      	movs	r0, #7
 800887e:	f000 fec1 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 8008882:	4920      	ldr	r1, [pc, #128]	; (8008904 <secondSwitchTurn+0xfc>)
 8008884:	4819      	ldr	r0, [pc, #100]	; (80088ec <secondSwitchTurn+0xe4>)
 8008886:	f001 fde5 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 800888a:	4b19      	ldr	r3, [pc, #100]	; (80088f0 <secondSwitchTurn+0xe8>)
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d11e      	bne.n	80088d0 <secondSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008892:	4818      	ldr	r0, [pc, #96]	; (80088f4 <secondSwitchTurn+0xec>)
 8008894:	f7f9 f86a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008898:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	2305      	movs	r3, #5
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	2315      	movs	r3, #21
 80088a4:	2221      	movs	r2, #33	; 0x21
 80088a6:	215f      	movs	r1, #95	; 0x5f
 80088a8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80088ac:	f7f9 f80d 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 80088b0:	4915      	ldr	r1, [pc, #84]	; (8008908 <secondSwitchTurn+0x100>)
 80088b2:	4812      	ldr	r0, [pc, #72]	; (80088fc <secondSwitchTurn+0xf4>)
 80088b4:	f009 fe76 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80088b8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	2300      	movs	r3, #0
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	2300      	movs	r3, #0
 80088c4:	2261      	movs	r2, #97	; 0x61
 80088c6:	f240 1111 	movw	r1, #273	; 0x111
 80088ca:	480c      	ldr	r0, [pc, #48]	; (80088fc <secondSwitchTurn+0xf4>)
 80088cc:	f7f9 fa68 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[1] = 1;
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <secondSwitchTurn+0xf8>)
 80088d2:	2201      	movs	r2, #1
 80088d4:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 1);
 80088d6:	2101      	movs	r1, #1
 80088d8:	2002      	movs	r0, #2
 80088da:	f7fa f9cb 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 80088de:	bf00      	nop
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	080168b0 	.word	0x080168b0
 80088ec:	200006c4 	.word	0x200006c4
 80088f0:	20000298 	.word	0x20000298
 80088f4:	08027e6c 	.word	0x08027e6c
 80088f8:	08016878 	.word	0x08016878
 80088fc:	200002c8 	.word	0x200002c8
 8008900:	200002b0 	.word	0x200002b0
 8008904:	080168bc 	.word	0x080168bc
 8008908:	0801687c 	.word	0x0801687c

0800890c <thirdSwitchTurn>:
void thirdSwitchTurn(uint8_t NewState)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af02      	add	r7, sp, #8
 8008912:	4603      	mov	r3, r0
 8008914:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d131      	bne.n	8008980 <thirdSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 800891c:	200a      	movs	r0, #10
 800891e:	f000 fe71 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 8008922:	4932      	ldr	r1, [pc, #200]	; (80089ec <thirdSwitchTurn+0xe0>)
 8008924:	4832      	ldr	r0, [pc, #200]	; (80089f0 <thirdSwitchTurn+0xe4>)
 8008926:	f001 fd95 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 800892a:	4b32      	ldr	r3, [pc, #200]	; (80089f4 <thirdSwitchTurn+0xe8>)
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d11e      	bne.n	8008970 <thirdSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008932:	4831      	ldr	r0, [pc, #196]	; (80089f8 <thirdSwitchTurn+0xec>)
 8008934:	f7f9 f81a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008938:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	2305      	movs	r3, #5
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	2315      	movs	r3, #21
 8008944:	2221      	movs	r2, #33	; 0x21
 8008946:	217d      	movs	r1, #125	; 0x7d
 8008948:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800894c:	f7f8 ffbd 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008950:	492a      	ldr	r1, [pc, #168]	; (80089fc <thirdSwitchTurn+0xf0>)
 8008952:	482b      	ldr	r0, [pc, #172]	; (8008a00 <thirdSwitchTurn+0xf4>)
 8008954:	f009 fe26 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008958:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	2300      	movs	r3, #0
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	2300      	movs	r3, #0
 8008964:	227f      	movs	r2, #127	; 0x7f
 8008966:	f240 1111 	movw	r1, #273	; 0x111
 800896a:	4825      	ldr	r0, [pc, #148]	; (8008a00 <thirdSwitchTurn+0xf4>)
 800896c:	f7f9 fa18 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[2] = 0;
 8008970:	4b24      	ldr	r3, [pc, #144]	; (8008a04 <thirdSwitchTurn+0xf8>)
 8008972:	2200      	movs	r2, #0
 8008974:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 0);
 8008976:	2100      	movs	r1, #0
 8008978:	2003      	movs	r0, #3
 800897a:	f7fa f97b 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[2] = 1;
		EEPROM_RelayStateUpdate(3, 1);
	}
}
 800897e:	e030      	b.n	80089e2 <thirdSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8008980:	2009      	movs	r0, #9
 8008982:	f000 fe3f 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 8008986:	4920      	ldr	r1, [pc, #128]	; (8008a08 <thirdSwitchTurn+0xfc>)
 8008988:	4819      	ldr	r0, [pc, #100]	; (80089f0 <thirdSwitchTurn+0xe4>)
 800898a:	f001 fd63 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 800898e:	4b19      	ldr	r3, [pc, #100]	; (80089f4 <thirdSwitchTurn+0xe8>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2b02      	cmp	r3, #2
 8008994:	d11e      	bne.n	80089d4 <thirdSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008996:	4818      	ldr	r0, [pc, #96]	; (80089f8 <thirdSwitchTurn+0xec>)
 8008998:	f7f8 ffe8 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800899c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	2305      	movs	r3, #5
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	2315      	movs	r3, #21
 80089a8:	2221      	movs	r2, #33	; 0x21
 80089aa:	217d      	movs	r1, #125	; 0x7d
 80089ac:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80089b0:	f7f8 ff8b 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 80089b4:	4915      	ldr	r1, [pc, #84]	; (8008a0c <thirdSwitchTurn+0x100>)
 80089b6:	4812      	ldr	r0, [pc, #72]	; (8008a00 <thirdSwitchTurn+0xf4>)
 80089b8:	f009 fdf4 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80089bc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	2300      	movs	r3, #0
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	2300      	movs	r3, #0
 80089c8:	227f      	movs	r2, #127	; 0x7f
 80089ca:	f240 1111 	movw	r1, #273	; 0x111
 80089ce:	480c      	ldr	r0, [pc, #48]	; (8008a00 <thirdSwitchTurn+0xf4>)
 80089d0:	f7f9 f9e6 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[2] = 1;
 80089d4:	4b0b      	ldr	r3, [pc, #44]	; (8008a04 <thirdSwitchTurn+0xf8>)
 80089d6:	2201      	movs	r2, #1
 80089d8:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 1);
 80089da:	2101      	movs	r1, #1
 80089dc:	2003      	movs	r0, #3
 80089de:	f7fa f949 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 80089e2:	bf00      	nop
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	080168c8 	.word	0x080168c8
 80089f0:	200006c4 	.word	0x200006c4
 80089f4:	20000298 	.word	0x20000298
 80089f8:	08027e6c 	.word	0x08027e6c
 80089fc:	08016878 	.word	0x08016878
 8008a00:	200002c8 	.word	0x200002c8
 8008a04:	200002b0 	.word	0x200002b0
 8008a08:	080168d4 	.word	0x080168d4
 8008a0c:	0801687c 	.word	0x0801687c

08008a10 <fourthSwitchTurn>:
void fourthSwitchTurn(uint8_t NewState)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af02      	add	r7, sp, #8
 8008a16:	4603      	mov	r3, r0
 8008a18:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d131      	bne.n	8008a84 <fourthSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8008a20:	200c      	movs	r0, #12
 8008a22:	f000 fdef 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 8008a26:	4932      	ldr	r1, [pc, #200]	; (8008af0 <fourthSwitchTurn+0xe0>)
 8008a28:	4832      	ldr	r0, [pc, #200]	; (8008af4 <fourthSwitchTurn+0xe4>)
 8008a2a:	f001 fd13 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008a2e:	4b32      	ldr	r3, [pc, #200]	; (8008af8 <fourthSwitchTurn+0xe8>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d11e      	bne.n	8008a74 <fourthSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008a36:	4831      	ldr	r0, [pc, #196]	; (8008afc <fourthSwitchTurn+0xec>)
 8008a38:	f7f8 ff98 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008a3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008a40:	9301      	str	r3, [sp, #4]
 8008a42:	2305      	movs	r3, #5
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	2315      	movs	r3, #21
 8008a48:	2221      	movs	r2, #33	; 0x21
 8008a4a:	219b      	movs	r1, #155	; 0x9b
 8008a4c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008a50:	f7f8 ff3b 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008a54:	492a      	ldr	r1, [pc, #168]	; (8008b00 <fourthSwitchTurn+0xf0>)
 8008a56:	482b      	ldr	r0, [pc, #172]	; (8008b04 <fourthSwitchTurn+0xf4>)
 8008a58:	f009 fda4 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008a5c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	2300      	movs	r3, #0
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	2300      	movs	r3, #0
 8008a68:	229d      	movs	r2, #157	; 0x9d
 8008a6a:	f240 1111 	movw	r1, #273	; 0x111
 8008a6e:	4825      	ldr	r0, [pc, #148]	; (8008b04 <fourthSwitchTurn+0xf4>)
 8008a70:	f7f9 f996 	bl	8001da0 <EF_PutString>
		}
		SwitchesButtonState[3] = 0;
 8008a74:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <fourthSwitchTurn+0xf8>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 0);
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	2004      	movs	r0, #4
 8008a7e:	f7fa f8f9 	bl	8002c74 <EEPROM_RelayStateUpdate>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[3] = 1;
		EEPROM_RelayStateUpdate(4, 1);
	}
}
 8008a82:	e030      	b.n	8008ae6 <fourthSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8008a84:	200b      	movs	r0, #11
 8008a86:	f000 fdbd 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 8008a8a:	4920      	ldr	r1, [pc, #128]	; (8008b0c <fourthSwitchTurn+0xfc>)
 8008a8c:	4819      	ldr	r0, [pc, #100]	; (8008af4 <fourthSwitchTurn+0xe4>)
 8008a8e:	f001 fce1 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008a92:	4b19      	ldr	r3, [pc, #100]	; (8008af8 <fourthSwitchTurn+0xe8>)
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d11e      	bne.n	8008ad8 <fourthSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008a9a:	4818      	ldr	r0, [pc, #96]	; (8008afc <fourthSwitchTurn+0xec>)
 8008a9c:	f7f8 ff66 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008aa0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	2305      	movs	r3, #5
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	2315      	movs	r3, #21
 8008aac:	2221      	movs	r2, #33	; 0x21
 8008aae:	219b      	movs	r1, #155	; 0x9b
 8008ab0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008ab4:	f7f8 ff09 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008ab8:	4915      	ldr	r1, [pc, #84]	; (8008b10 <fourthSwitchTurn+0x100>)
 8008aba:	4812      	ldr	r0, [pc, #72]	; (8008b04 <fourthSwitchTurn+0xf4>)
 8008abc:	f009 fd72 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008ac0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	2300      	movs	r3, #0
 8008acc:	229d      	movs	r2, #157	; 0x9d
 8008ace:	f240 1111 	movw	r1, #273	; 0x111
 8008ad2:	480c      	ldr	r0, [pc, #48]	; (8008b04 <fourthSwitchTurn+0xf4>)
 8008ad4:	f7f9 f964 	bl	8001da0 <EF_PutString>
		SwitchesButtonState[3] = 1;
 8008ad8:	4b0b      	ldr	r3, [pc, #44]	; (8008b08 <fourthSwitchTurn+0xf8>)
 8008ada:	2201      	movs	r2, #1
 8008adc:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 1);
 8008ade:	2101      	movs	r1, #1
 8008ae0:	2004      	movs	r0, #4
 8008ae2:	f7fa f8c7 	bl	8002c74 <EEPROM_RelayStateUpdate>
}
 8008ae6:	bf00      	nop
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	080168e0 	.word	0x080168e0
 8008af4:	200006c4 	.word	0x200006c4
 8008af8:	20000298 	.word	0x20000298
 8008afc:	08027e6c 	.word	0x08027e6c
 8008b00:	08016878 	.word	0x08016878
 8008b04:	200002c8 	.word	0x200002c8
 8008b08:	200002b0 	.word	0x200002b0
 8008b0c:	080168ec 	.word	0x080168ec
 8008b10:	0801687c 	.word	0x0801687c

08008b14 <firstLightTurn>:


void firstLightTurn(uint8_t NewState)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d12f      	bne.n	8008b84 <firstLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8008b24:	200e      	movs	r0, #14
 8008b26:	f000 fd6d 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 8008b2a:	4930      	ldr	r1, [pc, #192]	; (8008bec <firstLightTurn+0xd8>)
 8008b2c:	4830      	ldr	r0, [pc, #192]	; (8008bf0 <firstLightTurn+0xdc>)
 8008b2e:	f001 fc91 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008b32:	4b30      	ldr	r3, [pc, #192]	; (8008bf4 <firstLightTurn+0xe0>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	2b05      	cmp	r3, #5
 8008b38:	d11c      	bne.n	8008b74 <firstLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008b3a:	482f      	ldr	r0, [pc, #188]	; (8008bf8 <firstLightTurn+0xe4>)
 8008b3c:	f7f8 ff16 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008b40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	2305      	movs	r3, #5
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	2315      	movs	r3, #21
 8008b4c:	2221      	movs	r2, #33	; 0x21
 8008b4e:	2141      	movs	r1, #65	; 0x41
 8008b50:	20c8      	movs	r0, #200	; 0xc8
 8008b52:	f7f8 feba 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008b56:	4929      	ldr	r1, [pc, #164]	; (8008bfc <firstLightTurn+0xe8>)
 8008b58:	4829      	ldr	r0, [pc, #164]	; (8008c00 <firstLightTurn+0xec>)
 8008b5a:	f009 fd23 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008b5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	2300      	movs	r3, #0
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2243      	movs	r2, #67	; 0x43
 8008b6c:	21cb      	movs	r1, #203	; 0xcb
 8008b6e:	4824      	ldr	r0, [pc, #144]	; (8008c00 <firstLightTurn+0xec>)
 8008b70:	f7f9 f916 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[0] = 0;
 8008b74:	4b23      	ldr	r3, [pc, #140]	; (8008c04 <firstLightTurn+0xf0>)
 8008b76:	2200      	movs	r2, #0
 8008b78:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 0);
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	2001      	movs	r0, #1
 8008b7e:	f7fa f8b2 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[0] = 1;
		EEPROM_LightStateUpdate(1, 1);
	}
}
 8008b82:	e02e      	b.n	8008be2 <firstLightTurn+0xce>
		SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8008b84:	200d      	movs	r0, #13
 8008b86:	f000 fd3d 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 8008b8a:	491f      	ldr	r1, [pc, #124]	; (8008c08 <firstLightTurn+0xf4>)
 8008b8c:	4818      	ldr	r0, [pc, #96]	; (8008bf0 <firstLightTurn+0xdc>)
 8008b8e:	f001 fc61 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008b92:	4b18      	ldr	r3, [pc, #96]	; (8008bf4 <firstLightTurn+0xe0>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	2b05      	cmp	r3, #5
 8008b98:	d11c      	bne.n	8008bd4 <firstLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8008b9a:	4817      	ldr	r0, [pc, #92]	; (8008bf8 <firstLightTurn+0xe4>)
 8008b9c:	f7f8 fee6 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008ba0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	2305      	movs	r3, #5
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	2315      	movs	r3, #21
 8008bac:	2221      	movs	r2, #33	; 0x21
 8008bae:	2141      	movs	r1, #65	; 0x41
 8008bb0:	20c8      	movs	r0, #200	; 0xc8
 8008bb2:	f7f8 fe8a 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008bb6:	4915      	ldr	r1, [pc, #84]	; (8008c0c <firstLightTurn+0xf8>)
 8008bb8:	4811      	ldr	r0, [pc, #68]	; (8008c00 <firstLightTurn+0xec>)
 8008bba:	f009 fcf3 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008bbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2243      	movs	r2, #67	; 0x43
 8008bcc:	21cb      	movs	r1, #203	; 0xcb
 8008bce:	480c      	ldr	r0, [pc, #48]	; (8008c00 <firstLightTurn+0xec>)
 8008bd0:	f7f9 f8e6 	bl	8001da0 <EF_PutString>
		LightsButtonState[0] = 1;
 8008bd4:	4b0b      	ldr	r3, [pc, #44]	; (8008c04 <firstLightTurn+0xf0>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 1);
 8008bda:	2101      	movs	r1, #1
 8008bdc:	2001      	movs	r0, #1
 8008bde:	f7fa f882 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	080168f8 	.word	0x080168f8
 8008bf0:	200006c4 	.word	0x200006c4
 8008bf4:	20000298 	.word	0x20000298
 8008bf8:	08027e6c 	.word	0x08027e6c
 8008bfc:	08016878 	.word	0x08016878
 8008c00:	200002c8 	.word	0x200002c8
 8008c04:	200002b4 	.word	0x200002b4
 8008c08:	08016904 	.word	0x08016904
 8008c0c:	0801687c 	.word	0x0801687c

08008c10 <secondLightTurn>:
void secondLightTurn(uint8_t NewState)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	4603      	mov	r3, r0
 8008c18:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008c1a:	79fb      	ldrb	r3, [r7, #7]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d12f      	bne.n	8008c80 <secondLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8008c20:	2010      	movs	r0, #16
 8008c22:	f000 fcef 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 8008c26:	4930      	ldr	r1, [pc, #192]	; (8008ce8 <secondLightTurn+0xd8>)
 8008c28:	4830      	ldr	r0, [pc, #192]	; (8008cec <secondLightTurn+0xdc>)
 8008c2a:	f001 fc13 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008c2e:	4b30      	ldr	r3, [pc, #192]	; (8008cf0 <secondLightTurn+0xe0>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	2b05      	cmp	r3, #5
 8008c34:	d11c      	bne.n	8008c70 <secondLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008c36:	482f      	ldr	r0, [pc, #188]	; (8008cf4 <secondLightTurn+0xe4>)
 8008c38:	f7f8 fe98 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008c3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	2305      	movs	r3, #5
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	2315      	movs	r3, #21
 8008c48:	2221      	movs	r2, #33	; 0x21
 8008c4a:	215f      	movs	r1, #95	; 0x5f
 8008c4c:	20c8      	movs	r0, #200	; 0xc8
 8008c4e:	f7f8 fe3c 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008c52:	4929      	ldr	r1, [pc, #164]	; (8008cf8 <secondLightTurn+0xe8>)
 8008c54:	4829      	ldr	r0, [pc, #164]	; (8008cfc <secondLightTurn+0xec>)
 8008c56:	f009 fca5 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008c5a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	2300      	movs	r3, #0
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	2300      	movs	r3, #0
 8008c66:	2261      	movs	r2, #97	; 0x61
 8008c68:	21cb      	movs	r1, #203	; 0xcb
 8008c6a:	4824      	ldr	r0, [pc, #144]	; (8008cfc <secondLightTurn+0xec>)
 8008c6c:	f7f9 f898 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[1] = 0;
 8008c70:	4b23      	ldr	r3, [pc, #140]	; (8008d00 <secondLightTurn+0xf0>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 0);
 8008c76:	2100      	movs	r1, #0
 8008c78:	2002      	movs	r0, #2
 8008c7a:	f7fa f834 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[1] = 1;
		EEPROM_LightStateUpdate(2, 1);
	}
}
 8008c7e:	e02e      	b.n	8008cde <secondLightTurn+0xce>
		SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8008c80:	200f      	movs	r0, #15
 8008c82:	f000 fcbf 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 8008c86:	491f      	ldr	r1, [pc, #124]	; (8008d04 <secondLightTurn+0xf4>)
 8008c88:	4818      	ldr	r0, [pc, #96]	; (8008cec <secondLightTurn+0xdc>)
 8008c8a:	f001 fbe3 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008c8e:	4b18      	ldr	r3, [pc, #96]	; (8008cf0 <secondLightTurn+0xe0>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b05      	cmp	r3, #5
 8008c94:	d11c      	bne.n	8008cd0 <secondLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8008c96:	4817      	ldr	r0, [pc, #92]	; (8008cf4 <secondLightTurn+0xe4>)
 8008c98:	f7f8 fe68 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008c9c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	2305      	movs	r3, #5
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	2315      	movs	r3, #21
 8008ca8:	2221      	movs	r2, #33	; 0x21
 8008caa:	215f      	movs	r1, #95	; 0x5f
 8008cac:	20c8      	movs	r0, #200	; 0xc8
 8008cae:	f7f8 fe0c 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008cb2:	4915      	ldr	r1, [pc, #84]	; (8008d08 <secondLightTurn+0xf8>)
 8008cb4:	4811      	ldr	r0, [pc, #68]	; (8008cfc <secondLightTurn+0xec>)
 8008cb6:	f009 fc75 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008cba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	2261      	movs	r2, #97	; 0x61
 8008cc8:	21cb      	movs	r1, #203	; 0xcb
 8008cca:	480c      	ldr	r0, [pc, #48]	; (8008cfc <secondLightTurn+0xec>)
 8008ccc:	f7f9 f868 	bl	8001da0 <EF_PutString>
		LightsButtonState[1] = 1;
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <secondLightTurn+0xf0>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 1);
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	2002      	movs	r0, #2
 8008cda:	f7fa f804 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	08016910 	.word	0x08016910
 8008cec:	200006c4 	.word	0x200006c4
 8008cf0:	20000298 	.word	0x20000298
 8008cf4:	08027e6c 	.word	0x08027e6c
 8008cf8:	08016878 	.word	0x08016878
 8008cfc:	200002c8 	.word	0x200002c8
 8008d00:	200002b4 	.word	0x200002b4
 8008d04:	0801691c 	.word	0x0801691c
 8008d08:	0801687c 	.word	0x0801687c

08008d0c <thirdLightTurn>:
void thirdLightTurn(uint8_t NewState)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af02      	add	r7, sp, #8
 8008d12:	4603      	mov	r3, r0
 8008d14:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d12f      	bne.n	8008d7c <thirdLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8008d1c:	2012      	movs	r0, #18
 8008d1e:	f000 fc71 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 8008d22:	4930      	ldr	r1, [pc, #192]	; (8008de4 <thirdLightTurn+0xd8>)
 8008d24:	4830      	ldr	r0, [pc, #192]	; (8008de8 <thirdLightTurn+0xdc>)
 8008d26:	f001 fb95 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008d2a:	4b30      	ldr	r3, [pc, #192]	; (8008dec <thirdLightTurn+0xe0>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b05      	cmp	r3, #5
 8008d30:	d11c      	bne.n	8008d6c <thirdLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008d32:	482f      	ldr	r0, [pc, #188]	; (8008df0 <thirdLightTurn+0xe4>)
 8008d34:	f7f8 fe1a 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008d38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008d3c:	9301      	str	r3, [sp, #4]
 8008d3e:	2305      	movs	r3, #5
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	2315      	movs	r3, #21
 8008d44:	2221      	movs	r2, #33	; 0x21
 8008d46:	217d      	movs	r1, #125	; 0x7d
 8008d48:	20c8      	movs	r0, #200	; 0xc8
 8008d4a:	f7f8 fdbe 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008d4e:	4929      	ldr	r1, [pc, #164]	; (8008df4 <thirdLightTurn+0xe8>)
 8008d50:	4829      	ldr	r0, [pc, #164]	; (8008df8 <thirdLightTurn+0xec>)
 8008d52:	f009 fc27 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008d56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	2300      	movs	r3, #0
 8008d62:	227f      	movs	r2, #127	; 0x7f
 8008d64:	21cb      	movs	r1, #203	; 0xcb
 8008d66:	4824      	ldr	r0, [pc, #144]	; (8008df8 <thirdLightTurn+0xec>)
 8008d68:	f7f9 f81a 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[2] = 0;
 8008d6c:	4b23      	ldr	r3, [pc, #140]	; (8008dfc <thirdLightTurn+0xf0>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 0);
 8008d72:	2100      	movs	r1, #0
 8008d74:	2003      	movs	r0, #3
 8008d76:	f7f9 ffb6 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[2] = 1;
		EEPROM_LightStateUpdate(3, 1);
	}
}
 8008d7a:	e02e      	b.n	8008dda <thirdLightTurn+0xce>
		SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8008d7c:	2011      	movs	r0, #17
 8008d7e:	f000 fc41 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 8008d82:	491f      	ldr	r1, [pc, #124]	; (8008e00 <thirdLightTurn+0xf4>)
 8008d84:	4818      	ldr	r0, [pc, #96]	; (8008de8 <thirdLightTurn+0xdc>)
 8008d86:	f001 fb65 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008d8a:	4b18      	ldr	r3, [pc, #96]	; (8008dec <thirdLightTurn+0xe0>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b05      	cmp	r3, #5
 8008d90:	d11c      	bne.n	8008dcc <thirdLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8008d92:	4817      	ldr	r0, [pc, #92]	; (8008df0 <thirdLightTurn+0xe4>)
 8008d94:	f7f8 fdea 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008d98:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	2305      	movs	r3, #5
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	2315      	movs	r3, #21
 8008da4:	2221      	movs	r2, #33	; 0x21
 8008da6:	217d      	movs	r1, #125	; 0x7d
 8008da8:	20c8      	movs	r0, #200	; 0xc8
 8008daa:	f7f8 fd8e 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008dae:	4915      	ldr	r1, [pc, #84]	; (8008e04 <thirdLightTurn+0xf8>)
 8008db0:	4811      	ldr	r0, [pc, #68]	; (8008df8 <thirdLightTurn+0xec>)
 8008db2:	f009 fbf7 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008db6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008dba:	9301      	str	r3, [sp, #4]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	227f      	movs	r2, #127	; 0x7f
 8008dc4:	21cb      	movs	r1, #203	; 0xcb
 8008dc6:	480c      	ldr	r0, [pc, #48]	; (8008df8 <thirdLightTurn+0xec>)
 8008dc8:	f7f8 ffea 	bl	8001da0 <EF_PutString>
		LightsButtonState[2] = 1;
 8008dcc:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <thirdLightTurn+0xf0>)
 8008dce:	2201      	movs	r2, #1
 8008dd0:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 1);
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	2003      	movs	r0, #3
 8008dd6:	f7f9 ff86 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8008dda:	bf00      	nop
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	08016928 	.word	0x08016928
 8008de8:	200006c4 	.word	0x200006c4
 8008dec:	20000298 	.word	0x20000298
 8008df0:	08027e6c 	.word	0x08027e6c
 8008df4:	08016878 	.word	0x08016878
 8008df8:	200002c8 	.word	0x200002c8
 8008dfc:	200002b4 	.word	0x200002b4
 8008e00:	08016934 	.word	0x08016934
 8008e04:	0801687c 	.word	0x0801687c

08008e08 <fourthLightTurn>:
void fourthLightTurn(uint8_t NewState)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af02      	add	r7, sp, #8
 8008e0e:	4603      	mov	r3, r0
 8008e10:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d12f      	bne.n	8008e78 <fourthLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8008e18:	2014      	movs	r0, #20
 8008e1a:	f000 fbf3 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 8008e1e:	4930      	ldr	r1, [pc, #192]	; (8008ee0 <fourthLightTurn+0xd8>)
 8008e20:	4830      	ldr	r0, [pc, #192]	; (8008ee4 <fourthLightTurn+0xdc>)
 8008e22:	f001 fb17 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008e26:	4b30      	ldr	r3, [pc, #192]	; (8008ee8 <fourthLightTurn+0xe0>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	d11c      	bne.n	8008e68 <fourthLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008e2e:	482f      	ldr	r0, [pc, #188]	; (8008eec <fourthLightTurn+0xe4>)
 8008e30:	f7f8 fd9c 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008e34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	2305      	movs	r3, #5
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	2315      	movs	r3, #21
 8008e40:	2221      	movs	r2, #33	; 0x21
 8008e42:	219b      	movs	r1, #155	; 0x9b
 8008e44:	20c8      	movs	r0, #200	; 0xc8
 8008e46:	f7f8 fd40 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "OFF");
 8008e4a:	4929      	ldr	r1, [pc, #164]	; (8008ef0 <fourthLightTurn+0xe8>)
 8008e4c:	4829      	ldr	r0, [pc, #164]	; (8008ef4 <fourthLightTurn+0xec>)
 8008e4e:	f009 fba9 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008e52:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	2300      	movs	r3, #0
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	229d      	movs	r2, #157	; 0x9d
 8008e60:	21cb      	movs	r1, #203	; 0xcb
 8008e62:	4824      	ldr	r0, [pc, #144]	; (8008ef4 <fourthLightTurn+0xec>)
 8008e64:	f7f8 ff9c 	bl	8001da0 <EF_PutString>
		}
		LightsButtonState[3] = 0;
 8008e68:	4b23      	ldr	r3, [pc, #140]	; (8008ef8 <fourthLightTurn+0xf0>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 0);
 8008e6e:	2100      	movs	r1, #0
 8008e70:	2004      	movs	r0, #4
 8008e72:	f7f9 ff38 	bl	8002ce6 <EEPROM_LightStateUpdate>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[3] = 1;
		EEPROM_LightStateUpdate(4, 1);
	}
}
 8008e76:	e02e      	b.n	8008ed6 <fourthLightTurn+0xce>
		SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 8008e78:	2013      	movs	r0, #19
 8008e7a:	f000 fbc3 	bl	8009604 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 8008e7e:	491f      	ldr	r1, [pc, #124]	; (8008efc <fourthLightTurn+0xf4>)
 8008e80:	4818      	ldr	r0, [pc, #96]	; (8008ee4 <fourthLightTurn+0xdc>)
 8008e82:	f001 fae7 	bl	800a454 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8008e86:	4b18      	ldr	r3, [pc, #96]	; (8008ee8 <fourthLightTurn+0xe0>)
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	2b05      	cmp	r3, #5
 8008e8c:	d11c      	bne.n	8008ec8 <fourthLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 8008e8e:	4817      	ldr	r0, [pc, #92]	; (8008eec <fourthLightTurn+0xe4>)
 8008e90:	f7f8 fd6c 	bl	800196c <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008e94:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	2305      	movs	r3, #5
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	2315      	movs	r3, #21
 8008ea0:	2221      	movs	r2, #33	; 0x21
 8008ea2:	219b      	movs	r1, #155	; 0x9b
 8008ea4:	20c8      	movs	r0, #200	; 0xc8
 8008ea6:	f7f8 fd10 	bl	80018ca <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "ON");
 8008eaa:	4915      	ldr	r1, [pc, #84]	; (8008f00 <fourthLightTurn+0xf8>)
 8008eac:	4811      	ldr	r0, [pc, #68]	; (8008ef4 <fourthLightTurn+0xec>)
 8008eae:	f009 fb79 	bl	80125a4 <siprintf>
			EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008eb2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	229d      	movs	r2, #157	; 0x9d
 8008ec0:	21cb      	movs	r1, #203	; 0xcb
 8008ec2:	480c      	ldr	r0, [pc, #48]	; (8008ef4 <fourthLightTurn+0xec>)
 8008ec4:	f7f8 ff6c 	bl	8001da0 <EF_PutString>
		LightsButtonState[3] = 1;
 8008ec8:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <fourthLightTurn+0xf0>)
 8008eca:	2201      	movs	r2, #1
 8008ecc:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 1);
 8008ece:	2101      	movs	r1, #1
 8008ed0:	2004      	movs	r0, #4
 8008ed2:	f7f9 ff08 	bl	8002ce6 <EEPROM_LightStateUpdate>
}
 8008ed6:	bf00      	nop
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	08016940 	.word	0x08016940
 8008ee4:	200006c4 	.word	0x200006c4
 8008ee8:	20000298 	.word	0x20000298
 8008eec:	08027e6c 	.word	0x08027e6c
 8008ef0:	08016878 	.word	0x08016878
 8008ef4:	200002c8 	.word	0x200002c8
 8008ef8:	200002b4 	.word	0x200002b4
 8008efc:	0801694c 	.word	0x0801694c
 8008f00:	0801687c 	.word	0x0801687c

08008f04 <encoderUpgrade>:

void encoderUpgrade(int16_t *EncoderCntWsk)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
	EncoderCounter = *EncoderCntWsk;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008f12:	4b3d      	ldr	r3, [pc, #244]	; (8009008 <encoderUpgrade+0x104>)
 8008f14:	801a      	strh	r2, [r3, #0]
	if(EncoderCounter != EncoderCounterPrevious) // if was rotated
 8008f16:	4b3c      	ldr	r3, [pc, #240]	; (8009008 <encoderUpgrade+0x104>)
 8008f18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008f1c:	4b3b      	ldr	r3, [pc, #236]	; (800900c <encoderUpgrade+0x108>)
 8008f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d06b      	beq.n	8008ffe <encoderUpgrade+0xfa>
	{
		if (EncoderCounter > EncoderCounterPrevious) // if increase
 8008f26:	4b38      	ldr	r3, [pc, #224]	; (8009008 <encoderUpgrade+0x104>)
 8008f28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008f2c:	4b37      	ldr	r3, [pc, #220]	; (800900c <encoderUpgrade+0x108>)
 8008f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	dd46      	ble.n	8008fc4 <encoderUpgrade+0xc0>
		{
			if((EncoderCounter - EncoderCounterPrevious >= 2)) // if full rotate was done
 8008f36:	4b34      	ldr	r3, [pc, #208]	; (8009008 <encoderUpgrade+0x104>)
 8008f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	4b33      	ldr	r3, [pc, #204]	; (800900c <encoderUpgrade+0x108>)
 8008f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	dd59      	ble.n	8008ffe <encoderUpgrade+0xfa>
			{
				RotateUpgradeNumber = (EncoderCounter - EncoderCounterPrevious)/2;
 8008f4a:	4b2f      	ldr	r3, [pc, #188]	; (8009008 <encoderUpgrade+0x104>)
 8008f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f50:	461a      	mov	r2, r3
 8008f52:	4b2e      	ldr	r3, [pc, #184]	; (800900c <encoderUpgrade+0x108>)
 8008f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	0fda      	lsrs	r2, r3, #31
 8008f5c:	4413      	add	r3, r2
 8008f5e:	105b      	asrs	r3, r3, #1
 8008f60:	b21a      	sxth	r2, r3
 8008f62:	4b2b      	ldr	r3, [pc, #172]	; (8009010 <encoderUpgrade+0x10c>)
 8008f64:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 8008f66:	2301      	movs	r3, #1
 8008f68:	73fb      	strb	r3, [r7, #15]
 8008f6a:	e01c      	b.n	8008fa6 <encoderUpgrade+0xa2>
				{
					if(EncoderState == ENCODER_CLOCK_MINUTE)
 8008f6c:	4b29      	ldr	r3, [pc, #164]	; (8009014 <encoderUpgrade+0x110>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d104      	bne.n	8008f7e <encoderUpgrade+0x7a>
					{
						clockIncreaseOneHourAndMinute(1, (CLOCK_B_2_POZ_Y + (CLOCK_BUTTON_H/2)));
 8008f74:	217d      	movs	r1, #125	; 0x7d
 8008f76:	2001      	movs	r0, #1
 8008f78:	f7fe fff6 	bl	8007f68 <clockIncreaseOneHourAndMinute>
 8008f7c:	e010      	b.n	8008fa0 <encoderUpgrade+0x9c>
					}
					else if(EncoderState == ENCODER_CLOCK_HOUR)
 8008f7e:	4b25      	ldr	r3, [pc, #148]	; (8009014 <encoderUpgrade+0x110>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d104      	bne.n	8008f90 <encoderUpgrade+0x8c>
					{
						clockIncreaseOneHourAndMinute(1, (CLOCK_B_1_POZ_Y + (CLOCK_BUTTON_H/2)));
 8008f86:	2155      	movs	r1, #85	; 0x55
 8008f88:	2001      	movs	r0, #1
 8008f8a:	f7fe ffed 	bl	8007f68 <clockIncreaseOneHourAndMinute>
 8008f8e:	e007      	b.n	8008fa0 <encoderUpgrade+0x9c>
					}
					else if (EncoderState == ENCODER_CLOCK_DAY)
 8008f90:	4b20      	ldr	r3, [pc, #128]	; (8009014 <encoderUpgrade+0x110>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d103      	bne.n	8008fa0 <encoderUpgrade+0x9c>
					{
						clockIncreaseOneHourAndMinute(1, (CLOCK_B_3_POZ_Y + (CLOCK_BUTTON_H/2)));
 8008f98:	21a5      	movs	r1, #165	; 0xa5
 8008f9a:	2001      	movs	r0, #1
 8008f9c:	f7fe ffe4 	bl	8007f68 <clockIncreaseOneHourAndMinute>
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	73fb      	strb	r3, [r7, #15]
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	4a19      	ldr	r2, [pc, #100]	; (8009010 <encoderUpgrade+0x10c>)
 8008faa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	dddc      	ble.n	8008f6c <encoderUpgrade+0x68>
					}

				}
				RotateUpgradeNumber = 0;
 8008fb2:	4b17      	ldr	r3, [pc, #92]	; (8009010 <encoderUpgrade+0x10c>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	801a      	strh	r2, [r3, #0]
				EncoderCounterPrevious = EncoderCounter;
 8008fb8:	4b13      	ldr	r3, [pc, #76]	; (8009008 <encoderUpgrade+0x104>)
 8008fba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008fbe:	4b13      	ldr	r3, [pc, #76]	; (800900c <encoderUpgrade+0x108>)
 8008fc0:	801a      	strh	r2, [r3, #0]

				EncoderCounterPrevious = EncoderCounter;
			}
		}
	}
}
 8008fc2:	e01c      	b.n	8008ffe <encoderUpgrade+0xfa>
			if(EncoderCounterPrevious - EncoderCounter >= 2) // if full rotate was done
 8008fc4:	4b11      	ldr	r3, [pc, #68]	; (800900c <encoderUpgrade+0x108>)
 8008fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <encoderUpgrade+0x104>)
 8008fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	dd12      	ble.n	8008ffe <encoderUpgrade+0xfa>
				RotateUpgradeNumber = (EncoderCounterPrevious - EncoderCounter)/2;
 8008fd8:	4b0c      	ldr	r3, [pc, #48]	; (800900c <encoderUpgrade+0x108>)
 8008fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	4b09      	ldr	r3, [pc, #36]	; (8009008 <encoderUpgrade+0x104>)
 8008fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	0fda      	lsrs	r2, r3, #31
 8008fea:	4413      	add	r3, r2
 8008fec:	105b      	asrs	r3, r3, #1
 8008fee:	b21a      	sxth	r2, r3
 8008ff0:	4b07      	ldr	r3, [pc, #28]	; (8009010 <encoderUpgrade+0x10c>)
 8008ff2:	801a      	strh	r2, [r3, #0]
				EncoderCounterPrevious = EncoderCounter;
 8008ff4:	4b04      	ldr	r3, [pc, #16]	; (8009008 <encoderUpgrade+0x104>)
 8008ff6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008ffa:	4b04      	ldr	r3, [pc, #16]	; (800900c <encoderUpgrade+0x108>)
 8008ffc:	801a      	strh	r2, [r3, #0]
}
 8008ffe:	bf00      	nop
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	2000028e 	.word	0x2000028e
 800900c:	20000290 	.word	0x20000290
 8009010:	20000292 	.word	0x20000292
 8009014:	20000299 	.word	0x20000299

08009018 <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b094      	sub	sp, #80	; 0x50
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8009020:	f107 0308 	add.w	r3, r7, #8
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f001 f9e3 	bl	800a3f2 <UARTDMA_GetLineFromReceiveBuffer>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d15f      	bne.n	80090f2 <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8009032:	f107 0308 	add.w	r3, r7, #8
 8009036:	4931      	ldr	r1, [pc, #196]	; (80090fc <UART_ParseLine+0xe4>)
 8009038:	4618      	mov	r0, r3
 800903a:	f00a f90d 	bl	8013258 <strtok>
 800903e:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8009040:	492f      	ldr	r1, [pc, #188]	; (8009100 <UART_ParseLine+0xe8>)
 8009042:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009044:	f7f7 f8cc 	bl	80001e0 <strcmp>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d102      	bne.n	8009054 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 800904e:	f000 f869 	bl	8009124 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8009052:	e04e      	b.n	80090f2 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8009054:	492b      	ldr	r1, [pc, #172]	; (8009104 <UART_ParseLine+0xec>)
 8009056:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009058:	f7f7 f8c2 	bl	80001e0 <strcmp>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d102      	bne.n	8009068 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8009062:	f000 f8ad 	bl	80091c0 <UART_ParseAnswStatus>
}
 8009066:	e044      	b.n	80090f2 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8009068:	4927      	ldr	r1, [pc, #156]	; (8009108 <UART_ParseLine+0xf0>)
 800906a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800906c:	f7f7 f8b8 	bl	80001e0 <strcmp>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d102      	bne.n	800907c <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8009076:	f000 f8ab 	bl	80091d0 <UART_ParseAnswTemp>
}
 800907a:	e03a      	b.n	80090f2 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 800907c:	4923      	ldr	r1, [pc, #140]	; (800910c <UART_ParseLine+0xf4>)
 800907e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009080:	f7f7 f8ae 	bl	80001e0 <strcmp>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d102      	bne.n	8009090 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 800908a:	f000 f953 	bl	8009334 <UART_ParseAnswPres>
}
 800908e:	e030      	b.n	80090f2 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8009090:	491f      	ldr	r1, [pc, #124]	; (8009110 <UART_ParseLine+0xf8>)
 8009092:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009094:	f7f7 f8a4 	bl	80001e0 <strcmp>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d102      	bne.n	80090a4 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 800909e:	f000 f9d7 	bl	8009450 <UART_ParseAnswChangeRelayState>
}
 80090a2:	e026      	b.n	80090f2 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 80090a4:	491b      	ldr	r1, [pc, #108]	; (8009114 <UART_ParseLine+0xfc>)
 80090a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80090a8:	f7f7 f89a 	bl	80001e0 <strcmp>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d102      	bne.n	80090b8 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 80090b2:	f000 f9d4 	bl	800945e <UART_ParseAnswChangeLightState>
}
 80090b6:	e01c      	b.n	80090f2 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 80090b8:	4917      	ldr	r1, [pc, #92]	; (8009118 <UART_ParseLine+0x100>)
 80090ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80090bc:	f7f7 f890 	bl	80001e0 <strcmp>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d102      	bne.n	80090cc <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 80090c6:	f000 f9d1 	bl	800946c <UART_ParseAnswRelayStateStatus>
}
 80090ca:	e012      	b.n	80090f2 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 80090cc:	4913      	ldr	r1, [pc, #76]	; (800911c <UART_ParseLine+0x104>)
 80090ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80090d0:	f7f7 f886 	bl	80001e0 <strcmp>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d102      	bne.n	80090e0 <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 80090da:	f000 fa2d 	bl	8009538 <UART_ParseAnswLightsStateStatus>
}
 80090de:	e008      	b.n	80090f2 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 80090e0:	490f      	ldr	r1, [pc, #60]	; (8009120 <UART_ParseLine+0x108>)
 80090e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80090e4:	f7f7 f87c 	bl	80001e0 <strcmp>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 80090ee:	f000 f96d 	bl	80093cc <UART_ParseAnswDist>
}
 80090f2:	bf00      	nop
 80090f4:	3750      	adds	r7, #80	; 0x50
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	08016958 	.word	0x08016958
 8009100:	0801695c 	.word	0x0801695c
 8009104:	08016960 	.word	0x08016960
 8009108:	08016968 	.word	0x08016968
 800910c:	08016970 	.word	0x08016970
 8009110:	08016978 	.word	0x08016978
 8009114:	08016984 	.word	0x08016984
 8009118:	08016990 	.word	0x08016990
 800911c:	0801699c 	.word	0x0801699c
 8009120:	080169a8 	.word	0x080169a8

08009124 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800912a:	491f      	ldr	r1, [pc, #124]	; (80091a8 <UART_ParseLED+0x84>)
 800912c:	2000      	movs	r0, #0
 800912e:	f00a f893 	bl	8013258 <strtok>
 8009132:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d031      	beq.n	80091a0 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b2f      	cmp	r3, #47	; 0x2f
 8009142:	d903      	bls.n	800914c <UART_ParseLED+0x28>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b39      	cmp	r3, #57	; 0x39
 800914a:	d904      	bls.n	8009156 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 800914c:	4917      	ldr	r1, [pc, #92]	; (80091ac <UART_ParseLED+0x88>)
 800914e:	4818      	ldr	r0, [pc, #96]	; (80091b0 <UART_ParseLED+0x8c>)
 8009150:	f001 f980 	bl	800a454 <UARTDMA_Print>
			return;	// And exit parsing
 8009154:	e024      	b.n	80091a0 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f008 fb6d 	bl	8011836 <atoi>
 800915c:	4603      	mov	r3, r0
 800915e:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d10a      	bne.n	800917c <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8009166:	2200      	movs	r2, #0
 8009168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800916c:	4811      	ldr	r0, [pc, #68]	; (80091b4 <UART_ParseLED+0x90>)
 800916e:	f002 fc05 	bl	800b97c <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8009172:	4911      	ldr	r1, [pc, #68]	; (80091b8 <UART_ParseLED+0x94>)
 8009174:	480e      	ldr	r0, [pc, #56]	; (80091b0 <UART_ParseLED+0x8c>)
 8009176:	f001 f96d 	bl	800a454 <UARTDMA_Print>
 800917a:	e011      	b.n	80091a0 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10a      	bne.n	8009198 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8009182:	2201      	movs	r2, #1
 8009184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009188:	480a      	ldr	r0, [pc, #40]	; (80091b4 <UART_ParseLED+0x90>)
 800918a:	f002 fbf7 	bl	800b97c <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 800918e:	490b      	ldr	r1, [pc, #44]	; (80091bc <UART_ParseLED+0x98>)
 8009190:	4807      	ldr	r0, [pc, #28]	; (80091b0 <UART_ParseLED+0x8c>)
 8009192:	f001 f95f 	bl	800a454 <UARTDMA_Print>
 8009196:	e003      	b.n	80091a0 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8009198:	4904      	ldr	r1, [pc, #16]	; (80091ac <UART_ParseLED+0x88>)
 800919a:	4805      	ldr	r0, [pc, #20]	; (80091b0 <UART_ParseLED+0x8c>)
 800919c:	f001 f95a 	bl	800a454 <UARTDMA_Print>
		}
	}
}
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	080169b0 	.word	0x080169b0
 80091ac:	080169b4 	.word	0x080169b4
 80091b0:	200004f8 	.word	0x200004f8
 80091b4:	40020800 	.word	0x40020800
 80091b8:	080169c4 	.word	0x080169c4
 80091bc:	080169d0 	.word	0x080169d0

080091c0 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 80091c4:	bf00      	nop
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
	...

080091d0 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 80091da:	494e      	ldr	r1, [pc, #312]	; (8009314 <UART_ParseAnswTemp+0x144>)
 80091dc:	2000      	movs	r0, #0
 80091de:	f00a f83b 	bl	8013258 <strtok>
 80091e2:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 808f 	beq.w	800930c <UART_ParseAnswTemp+0x13c>
	{
			NrCzujnika = atoi(ParsePointer);
 80091ee:	68b8      	ldr	r0, [r7, #8]
 80091f0:	f008 fb21 	bl	8011836 <atoi>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d010      	beq.n	8009222 <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009200:	4944      	ldr	r1, [pc, #272]	; (8009314 <UART_ParseAnswTemp+0x144>)
 8009202:	2000      	movs	r0, #0
 8009204:	f00a f828 	bl	8013258 <strtok>
 8009208:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f008 fb10 	bl	8011830 <atof>
 8009210:	ec53 2b10 	vmov	r2, r3, d0
 8009214:	4610      	mov	r0, r2
 8009216:	4619      	mov	r1, r3
 8009218:	f7f7 fcfe 	bl	8000c18 <__aeabi_d2f>
 800921c:	4603      	mov	r3, r0
 800921e:	4a3e      	ldr	r2, [pc, #248]	; (8009318 <UART_ParseAnswTemp+0x148>)
 8009220:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8009222:	4b3e      	ldr	r3, [pc, #248]	; (800931c <UART_ParseAnswTemp+0x14c>)
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d170      	bne.n	800930c <UART_ParseAnswTemp+0x13c>
			{
				if(NrCzujnika == 1)
 800922a:	7bfb      	ldrb	r3, [r7, #15]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d120      	bne.n	8009272 <UART_ParseAnswTemp+0xa2>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8009230:	483b      	ldr	r0, [pc, #236]	; (8009320 <UART_ParseAnswTemp+0x150>)
 8009232:	f7f8 fb9b 	bl	800196c <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8009236:	4b38      	ldr	r3, [pc, #224]	; (8009318 <UART_ParseAnswTemp+0x148>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4618      	mov	r0, r3
 800923c:	f7f7 f99c 	bl	8000578 <__aeabi_f2d>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4937      	ldr	r1, [pc, #220]	; (8009324 <UART_ParseAnswTemp+0x154>)
 8009246:	4838      	ldr	r0, [pc, #224]	; (8009328 <UART_ParseAnswTemp+0x158>)
 8009248:	f009 f9ac 	bl	80125a4 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800924c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	2301      	movs	r3, #1
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	2300      	movs	r3, #0
 8009258:	2250      	movs	r2, #80	; 0x50
 800925a:	2114      	movs	r1, #20
 800925c:	4832      	ldr	r0, [pc, #200]	; (8009328 <UART_ParseAnswTemp+0x158>)
 800925e:	f7f8 fd9f 	bl	8001da0 <EF_PutString>
						ESP_SendCurrentTempOutside(CTemp);
 8009262:	4b2d      	ldr	r3, [pc, #180]	; (8009318 <UART_ParseAnswTemp+0x148>)
 8009264:	edd3 7a00 	vldr	s15, [r3]
 8009268:	eeb0 0a67 	vmov.f32	s0, s15
 800926c:	f7f7 ffc4 	bl	80011f8 <ESP_SendCurrentTempOutside>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8009270:	e04c      	b.n	800930c <UART_ParseAnswTemp+0x13c>
				else if(NrCzujnika == 2)
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d149      	bne.n	800930c <UART_ParseAnswTemp+0x13c>
						if (CTemp == 0.0) // Error in connection to ds18b20 - TODO! Send information about error in connection
 8009278:	4b27      	ldr	r3, [pc, #156]	; (8009318 <UART_ParseAnswTemp+0x148>)
 800927a:	edd3 7a00 	vldr	s15, [r3]
 800927e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009286:	d11d      	bne.n	80092c4 <UART_ParseAnswTemp+0xf4>
							CTemp = LCTemp;
 8009288:	4b28      	ldr	r3, [pc, #160]	; (800932c <UART_ParseAnswTemp+0x15c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a22      	ldr	r2, [pc, #136]	; (8009318 <UART_ParseAnswTemp+0x148>)
 800928e:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8009290:	4823      	ldr	r0, [pc, #140]	; (8009320 <UART_ParseAnswTemp+0x150>)
 8009292:	f7f8 fb6b 	bl	800196c <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8009296:	4b20      	ldr	r3, [pc, #128]	; (8009318 <UART_ParseAnswTemp+0x148>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4618      	mov	r0, r3
 800929c:	f7f7 f96c 	bl	8000578 <__aeabi_f2d>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4922      	ldr	r1, [pc, #136]	; (8009330 <UART_ParseAnswTemp+0x160>)
 80092a6:	4820      	ldr	r0, [pc, #128]	; (8009328 <UART_ParseAnswTemp+0x158>)
 80092a8:	f009 f97c 	bl	80125a4 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80092ac:	f24c 6318 	movw	r3, #50712	; 0xc618
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	2301      	movs	r3, #1
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	2300      	movs	r3, #0
 80092b8:	226e      	movs	r2, #110	; 0x6e
 80092ba:	2114      	movs	r1, #20
 80092bc:	481a      	ldr	r0, [pc, #104]	; (8009328 <UART_ParseAnswTemp+0x158>)
 80092be:	f7f8 fd6f 	bl	8001da0 <EF_PutString>
	}
 80092c2:	e023      	b.n	800930c <UART_ParseAnswTemp+0x13c>
							EF_SetFont(&arialBlack_20ptFontInfo);
 80092c4:	4816      	ldr	r0, [pc, #88]	; (8009320 <UART_ParseAnswTemp+0x150>)
 80092c6:	f7f8 fb51 	bl	800196c <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 80092ca:	4b13      	ldr	r3, [pc, #76]	; (8009318 <UART_ParseAnswTemp+0x148>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7f7 f952 	bl	8000578 <__aeabi_f2d>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	4915      	ldr	r1, [pc, #84]	; (8009330 <UART_ParseAnswTemp+0x160>)
 80092da:	4813      	ldr	r0, [pc, #76]	; (8009328 <UART_ParseAnswTemp+0x158>)
 80092dc:	f009 f962 	bl	80125a4 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80092e0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	2301      	movs	r3, #1
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	2300      	movs	r3, #0
 80092ec:	226e      	movs	r2, #110	; 0x6e
 80092ee:	2114      	movs	r1, #20
 80092f0:	480d      	ldr	r0, [pc, #52]	; (8009328 <UART_ParseAnswTemp+0x158>)
 80092f2:	f7f8 fd55 	bl	8001da0 <EF_PutString>
							LCTemp = CTemp;
 80092f6:	4b08      	ldr	r3, [pc, #32]	; (8009318 <UART_ParseAnswTemp+0x148>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a0c      	ldr	r2, [pc, #48]	; (800932c <UART_ParseAnswTemp+0x15c>)
 80092fc:	6013      	str	r3, [r2, #0]
							ESP_SendCurrentTempInside(CTemp);
 80092fe:	4b06      	ldr	r3, [pc, #24]	; (8009318 <UART_ParseAnswTemp+0x148>)
 8009300:	edd3 7a00 	vldr	s15, [r3]
 8009304:	eeb0 0a67 	vmov.f32	s0, s15
 8009308:	f7f7 ff5a 	bl	80011c0 <ESP_SendCurrentTempInside>
	}
 800930c:	bf00      	nop
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	080169b0 	.word	0x080169b0
 8009318:	2000029c 	.word	0x2000029c
 800931c:	20000298 	.word	0x20000298
 8009320:	08029de4 	.word	0x08029de4
 8009324:	080169dc 	.word	0x080169dc
 8009328:	200002c8 	.word	0x200002c8
 800932c:	200002a0 	.word	0x200002a0
 8009330:	080169f0 	.word	0x080169f0

08009334 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 800933a:	491e      	ldr	r1, [pc, #120]	; (80093b4 <UART_ParseAnswPres+0x80>)
 800933c:	2000      	movs	r0, #0
 800933e:	f009 ff8b 	bl	8013258 <strtok>
 8009342:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d02f      	beq.n	80093ac <UART_ParseAnswPres+0x78>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f008 fa6f 	bl	8011830 <atof>
 8009352:	ec53 2b10 	vmov	r2, r3, d0
 8009356:	4610      	mov	r0, r2
 8009358:	4619      	mov	r1, r3
 800935a:	f7f7 fc5d 	bl	8000c18 <__aeabi_d2f>
 800935e:	4603      	mov	r3, r0
 8009360:	4a15      	ldr	r2, [pc, #84]	; (80093b8 <UART_ParseAnswPres+0x84>)
 8009362:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8009364:	4b15      	ldr	r3, [pc, #84]	; (80093bc <UART_ParseAnswPres+0x88>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d11f      	bne.n	80093ac <UART_ParseAnswPres+0x78>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800936c:	4814      	ldr	r0, [pc, #80]	; (80093c0 <UART_ParseAnswPres+0x8c>)
 800936e:	f7f8 fafd 	bl	800196c <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8009372:	4b11      	ldr	r3, [pc, #68]	; (80093b8 <UART_ParseAnswPres+0x84>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4618      	mov	r0, r3
 8009378:	f7f7 f8fe 	bl	8000578 <__aeabi_f2d>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4910      	ldr	r1, [pc, #64]	; (80093c4 <UART_ParseAnswPres+0x90>)
 8009382:	4811      	ldr	r0, [pc, #68]	; (80093c8 <UART_ParseAnswPres+0x94>)
 8009384:	f009 f90e 	bl	80125a4 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009388:	f24c 6318 	movw	r3, #50712	; 0xc618
 800938c:	9301      	str	r3, [sp, #4]
 800938e:	2301      	movs	r3, #1
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	2300      	movs	r3, #0
 8009394:	22aa      	movs	r2, #170	; 0xaa
 8009396:	2114      	movs	r1, #20
 8009398:	480b      	ldr	r0, [pc, #44]	; (80093c8 <UART_ParseAnswPres+0x94>)
 800939a:	f7f8 fd01 	bl	8001da0 <EF_PutString>
			ESP_SendCurrentPressure(CPres);
 800939e:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <UART_ParseAnswPres+0x84>)
 80093a0:	edd3 7a00 	vldr	s15, [r3]
 80093a4:	eeb0 0a67 	vmov.f32	s0, s15
 80093a8:	f7f7 ff42 	bl	8001230 <ESP_SendCurrentPressure>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	080169b0 	.word	0x080169b0
 80093b8:	200002a4 	.word	0x200002a4
 80093bc:	20000298 	.word	0x20000298
 80093c0:	08029de4 	.word	0x08029de4
 80093c4:	08016a04 	.word	0x08016a04
 80093c8:	200002c8 	.word	0x200002c8

080093cc <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 80093d2:	4919      	ldr	r1, [pc, #100]	; (8009438 <UART_ParseAnswDist+0x6c>)
 80093d4:	2000      	movs	r0, #0
 80093d6:	f009 ff3f 	bl	8013258 <strtok>
 80093da:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d024      	beq.n	800942e <UART_ParseAnswDist+0x62>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f008 fa26 	bl	8011836 <atoi>
 80093ea:	4603      	mov	r3, r0
 80093ec:	461a      	mov	r2, r3
 80093ee:	4b13      	ldr	r3, [pc, #76]	; (800943c <UART_ParseAnswDist+0x70>)
 80093f0:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 80093f2:	4b13      	ldr	r3, [pc, #76]	; (8009440 <UART_ParseAnswDist+0x74>)
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d119      	bne.n	800942e <UART_ParseAnswDist+0x62>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80093fa:	4812      	ldr	r0, [pc, #72]	; (8009444 <UART_ParseAnswDist+0x78>)
 80093fc:	f7f8 fab6 	bl	800196c <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 8009400:	4b0e      	ldr	r3, [pc, #56]	; (800943c <UART_ParseAnswDist+0x70>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	4910      	ldr	r1, [pc, #64]	; (8009448 <UART_ParseAnswDist+0x7c>)
 8009408:	4810      	ldr	r0, [pc, #64]	; (800944c <UART_ParseAnswDist+0x80>)
 800940a:	f009 f8cb 	bl	80125a4 <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800940e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009412:	9301      	str	r3, [sp, #4]
 8009414:	2301      	movs	r3, #1
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	2300      	movs	r3, #0
 800941a:	228c      	movs	r2, #140	; 0x8c
 800941c:	21ad      	movs	r1, #173	; 0xad
 800941e:	480b      	ldr	r0, [pc, #44]	; (800944c <UART_ParseAnswDist+0x80>)
 8009420:	f7f8 fcbe 	bl	8001da0 <EF_PutString>
			ESP_SendCurrentWaterLvl(CDist2water);
 8009424:	4b05      	ldr	r3, [pc, #20]	; (800943c <UART_ParseAnswDist+0x70>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4618      	mov	r0, r3
 800942a:	f7f7 ff1d 	bl	8001268 <ESP_SendCurrentWaterLvl>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 800942e:	bf00      	nop
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	080169b0 	.word	0x080169b0
 800943c:	200002ac 	.word	0x200002ac
 8009440:	20000298 	.word	0x20000298
 8009444:	08029de4 	.word	0x08029de4
 8009448:	08016a1c 	.word	0x08016a1c
 800944c:	200002c8 	.word	0x200002c8

08009450 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8009450:	b480      	push	{r7}
 8009452:	af00      	add	r7, sp, #0
	//TODO!
}
 8009454:	bf00      	nop
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 800945e:	b480      	push	{r7}
 8009460:	af00      	add	r7, sp, #0
	//TODO!
}
 8009462:	bf00      	nop
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8009472:	2300      	movs	r3, #0
 8009474:	71fb      	strb	r3, [r7, #7]
 8009476:	e04a      	b.n	800950e <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009478:	4928      	ldr	r1, [pc, #160]	; (800951c <UART_ParseAnswRelayStateStatus+0xb0>)
 800947a:	2000      	movs	r0, #0
 800947c:	f009 feec 	bl	8013258 <strtok>
 8009480:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d02f      	beq.n	80094ea <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800948a:	2300      	movs	r3, #0
 800948c:	71bb      	strb	r3, [r7, #6]
 800948e:	e025      	b.n	80094dc <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8009490:	79bb      	ldrb	r3, [r7, #6]
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	4413      	add	r3, r2
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	2b2f      	cmp	r3, #47	; 0x2f
 800949a:	d905      	bls.n	80094a8 <UART_ParseAnswRelayStateStatus+0x3c>
 800949c:	79bb      	ldrb	r3, [r7, #6]
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	4413      	add	r3, r2
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b39      	cmp	r3, #57	; 0x39
 80094a6:	d90e      	bls.n	80094c6 <UART_ParseAnswRelayStateStatus+0x5a>
 80094a8:	79bb      	ldrb	r3, [r7, #6]
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	4413      	add	r3, r2
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b2e      	cmp	r3, #46	; 0x2e
 80094b2:	d008      	beq.n	80094c6 <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 80094b4:	491a      	ldr	r1, [pc, #104]	; (8009520 <UART_ParseAnswRelayStateStatus+0xb4>)
 80094b6:	481b      	ldr	r0, [pc, #108]	; (8009524 <UART_ParseAnswRelayStateStatus+0xb8>)
 80094b8:	f009 f874 	bl	80125a4 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 80094bc:	4919      	ldr	r1, [pc, #100]	; (8009524 <UART_ParseAnswRelayStateStatus+0xb8>)
 80094be:	481a      	ldr	r0, [pc, #104]	; (8009528 <UART_ParseAnswRelayStateStatus+0xbc>)
 80094c0:	f000 ffc8 	bl	800a454 <UARTDMA_Print>
					return;	// And exit parsing
 80094c4:	e026      	b.n	8009514 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 80094c6:	6838      	ldr	r0, [r7, #0]
 80094c8:	f008 f9b5 	bl	8011836 <atoi>
 80094cc:	4602      	mov	r2, r0
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	b2d1      	uxtb	r1, r2
 80094d2:	4a16      	ldr	r2, [pc, #88]	; (800952c <UART_ParseAnswRelayStateStatus+0xc0>)
 80094d4:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80094d6:	79bb      	ldrb	r3, [r7, #6]
 80094d8:	3301      	adds	r3, #1
 80094da:	71bb      	strb	r3, [r7, #6]
 80094dc:	79bb      	ldrb	r3, [r7, #6]
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	4413      	add	r3, r2
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1d3      	bne.n	8009490 <UART_ParseAnswRelayStateStatus+0x24>
 80094e8:	e008      	b.n	80094fc <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 80094ea:	4911      	ldr	r1, [pc, #68]	; (8009530 <UART_ParseAnswRelayStateStatus+0xc4>)
 80094ec:	480d      	ldr	r0, [pc, #52]	; (8009524 <UART_ParseAnswRelayStateStatus+0xb8>)
 80094ee:	f009 f859 	bl	80125a4 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 80094f2:	490c      	ldr	r1, [pc, #48]	; (8009524 <UART_ParseAnswRelayStateStatus+0xb8>)
 80094f4:	480c      	ldr	r0, [pc, #48]	; (8009528 <UART_ParseAnswRelayStateStatus+0xbc>)
 80094f6:	f000 ffad 	bl	800a454 <UARTDMA_Print>
			return;	// And exit parsing
 80094fa:	e00b      	b.n	8009514 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 80094fc:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <UART_ParseAnswRelayStateStatus+0xc8>)
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d101      	bne.n	8009508 <UART_ParseAnswRelayStateStatus+0x9c>
 8009504:	f7fb fdf2 	bl	80050ec <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8009508:	79fb      	ldrb	r3, [r7, #7]
 800950a:	3301      	adds	r3, #1
 800950c:	71fb      	strb	r3, [r7, #7]
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	2b03      	cmp	r3, #3
 8009512:	d9b1      	bls.n	8009478 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	080169b0 	.word	0x080169b0
 8009520:	08016a28 	.word	0x08016a28
 8009524:	20000308 	.word	0x20000308
 8009528:	200004f8 	.word	0x200004f8
 800952c:	200002b0 	.word	0x200002b0
 8009530:	08016a3c 	.word	0x08016a3c
 8009534:	20000298 	.word	0x20000298

08009538 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 800953e:	2300      	movs	r3, #0
 8009540:	71fb      	strb	r3, [r7, #7]
 8009542:	e04a      	b.n	80095da <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009544:	4928      	ldr	r1, [pc, #160]	; (80095e8 <UART_ParseAnswLightsStateStatus+0xb0>)
 8009546:	2000      	movs	r0, #0
 8009548:	f009 fe86 	bl	8013258 <strtok>
 800954c:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d02f      	beq.n	80095b6 <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8009556:	2300      	movs	r3, #0
 8009558:	71bb      	strb	r3, [r7, #6]
 800955a:	e025      	b.n	80095a8 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 800955c:	79bb      	ldrb	r3, [r7, #6]
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	4413      	add	r3, r2
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2b2f      	cmp	r3, #47	; 0x2f
 8009566:	d905      	bls.n	8009574 <UART_ParseAnswLightsStateStatus+0x3c>
 8009568:	79bb      	ldrb	r3, [r7, #6]
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	4413      	add	r3, r2
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	2b39      	cmp	r3, #57	; 0x39
 8009572:	d90e      	bls.n	8009592 <UART_ParseAnswLightsStateStatus+0x5a>
 8009574:	79bb      	ldrb	r3, [r7, #6]
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	4413      	add	r3, r2
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	2b2e      	cmp	r3, #46	; 0x2e
 800957e:	d008      	beq.n	8009592 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8009580:	491a      	ldr	r1, [pc, #104]	; (80095ec <UART_ParseAnswLightsStateStatus+0xb4>)
 8009582:	481b      	ldr	r0, [pc, #108]	; (80095f0 <UART_ParseAnswLightsStateStatus+0xb8>)
 8009584:	f009 f80e 	bl	80125a4 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8009588:	4919      	ldr	r1, [pc, #100]	; (80095f0 <UART_ParseAnswLightsStateStatus+0xb8>)
 800958a:	481a      	ldr	r0, [pc, #104]	; (80095f4 <UART_ParseAnswLightsStateStatus+0xbc>)
 800958c:	f000 ff62 	bl	800a454 <UARTDMA_Print>
					return;	// And exit parsing
 8009590:	e026      	b.n	80095e0 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8009592:	6838      	ldr	r0, [r7, #0]
 8009594:	f008 f94f 	bl	8011836 <atoi>
 8009598:	4602      	mov	r2, r0
 800959a:	79fb      	ldrb	r3, [r7, #7]
 800959c:	b2d1      	uxtb	r1, r2
 800959e:	4a16      	ldr	r2, [pc, #88]	; (80095f8 <UART_ParseAnswLightsStateStatus+0xc0>)
 80095a0:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80095a2:	79bb      	ldrb	r3, [r7, #6]
 80095a4:	3301      	adds	r3, #1
 80095a6:	71bb      	strb	r3, [r7, #6]
 80095a8:	79bb      	ldrb	r3, [r7, #6]
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	4413      	add	r3, r2
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1d3      	bne.n	800955c <UART_ParseAnswLightsStateStatus+0x24>
 80095b4:	e008      	b.n	80095c8 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 80095b6:	4911      	ldr	r1, [pc, #68]	; (80095fc <UART_ParseAnswLightsStateStatus+0xc4>)
 80095b8:	480d      	ldr	r0, [pc, #52]	; (80095f0 <UART_ParseAnswLightsStateStatus+0xb8>)
 80095ba:	f008 fff3 	bl	80125a4 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 80095be:	490c      	ldr	r1, [pc, #48]	; (80095f0 <UART_ParseAnswLightsStateStatus+0xb8>)
 80095c0:	480c      	ldr	r0, [pc, #48]	; (80095f4 <UART_ParseAnswLightsStateStatus+0xbc>)
 80095c2:	f000 ff47 	bl	800a454 <UARTDMA_Print>
			return;	// And exit parsing
 80095c6:	e00b      	b.n	80095e0 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 80095c8:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <UART_ParseAnswLightsStateStatus+0xc8>)
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b05      	cmp	r3, #5
 80095ce:	d101      	bne.n	80095d4 <UART_ParseAnswLightsStateStatus+0x9c>
 80095d0:	f7fb fe94 	bl	80052fc <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 80095d4:	79fb      	ldrb	r3, [r7, #7]
 80095d6:	3301      	adds	r3, #1
 80095d8:	71fb      	strb	r3, [r7, #7]
 80095da:	79fb      	ldrb	r3, [r7, #7]
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d9b1      	bls.n	8009544 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	080169b0 	.word	0x080169b0
 80095ec:	08016a28 	.word	0x08016a28
 80095f0:	20000308 	.word	0x20000308
 80095f4:	200004f8 	.word	0x200004f8
 80095f8:	200002b4 	.word	0x200002b4
 80095fc:	08016a3c 	.word	0x08016a3c
 8009600:	20000298 	.word	0x20000298

08009604 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	2b27      	cmp	r3, #39	; 0x27
 8009616:	f200 8129 	bhi.w	800986c <SendComand+0x268>
 800961a:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <SendComand+0x1c>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	080096c1 	.word	0x080096c1
 8009624:	080096cb 	.word	0x080096cb
 8009628:	080096d5 	.word	0x080096d5
 800962c:	080096df 	.word	0x080096df
 8009630:	080096f3 	.word	0x080096f3
 8009634:	080096fd 	.word	0x080096fd
 8009638:	08009707 	.word	0x08009707
 800963c:	08009711 	.word	0x08009711
 8009640:	0800971b 	.word	0x0800971b
 8009644:	08009725 	.word	0x08009725
 8009648:	0800972f 	.word	0x0800972f
 800964c:	08009739 	.word	0x08009739
 8009650:	08009743 	.word	0x08009743
 8009654:	0800976b 	.word	0x0800976b
 8009658:	08009775 	.word	0x08009775
 800965c:	0800977f 	.word	0x0800977f
 8009660:	08009789 	.word	0x08009789
 8009664:	08009793 	.word	0x08009793
 8009668:	0800979d 	.word	0x0800979d
 800966c:	080097a7 	.word	0x080097a7
 8009670:	080097b1 	.word	0x080097b1
 8009674:	08009761 	.word	0x08009761
 8009678:	080097cf 	.word	0x080097cf
 800967c:	0800974d 	.word	0x0800974d
 8009680:	08009757 	.word	0x08009757
 8009684:	080097bb 	.word	0x080097bb
 8009688:	080097c5 	.word	0x080097c5
 800968c:	080096e9 	.word	0x080096e9
 8009690:	080097d9 	.word	0x080097d9
 8009694:	080097e3 	.word	0x080097e3
 8009698:	080097ed 	.word	0x080097ed
 800969c:	080097f7 	.word	0x080097f7
 80096a0:	08009801 	.word	0x08009801
 80096a4:	0800980b 	.word	0x0800980b
 80096a8:	08009815 	.word	0x08009815
 80096ac:	0800981f 	.word	0x0800981f
 80096b0:	08009829 	.word	0x08009829
 80096b4:	08009833 	.word	0x08009833
 80096b8:	08009859 	.word	0x08009859
 80096bc:	08009863 	.word	0x08009863
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 80096c0:	496d      	ldr	r1, [pc, #436]	; (8009878 <SendComand+0x274>)
 80096c2:	486e      	ldr	r0, [pc, #440]	; (800987c <SendComand+0x278>)
 80096c4:	f000 fec6 	bl	800a454 <UARTDMA_Print>
			break;
 80096c8:	e0d0      	b.n	800986c <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 80096ca:	496d      	ldr	r1, [pc, #436]	; (8009880 <SendComand+0x27c>)
 80096cc:	486b      	ldr	r0, [pc, #428]	; (800987c <SendComand+0x278>)
 80096ce:	f000 fec1 	bl	800a454 <UARTDMA_Print>
			break;
 80096d2:	e0cb      	b.n	800986c <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 80096d4:	496b      	ldr	r1, [pc, #428]	; (8009884 <SendComand+0x280>)
 80096d6:	4869      	ldr	r0, [pc, #420]	; (800987c <SendComand+0x278>)
 80096d8:	f000 febc 	bl	800a454 <UARTDMA_Print>
			break;
 80096dc:	e0c6      	b.n	800986c <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 80096de:	496a      	ldr	r1, [pc, #424]	; (8009888 <SendComand+0x284>)
 80096e0:	4866      	ldr	r0, [pc, #408]	; (800987c <SendComand+0x278>)
 80096e2:	f000 feb7 	bl	800a454 <UARTDMA_Print>
			break;
 80096e6:	e0c1      	b.n	800986c <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 80096e8:	4968      	ldr	r1, [pc, #416]	; (800988c <SendComand+0x288>)
 80096ea:	4864      	ldr	r0, [pc, #400]	; (800987c <SendComand+0x278>)
 80096ec:	f000 feb2 	bl	800a454 <UARTDMA_Print>
			break;
 80096f0:	e0bc      	b.n	800986c <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 80096f2:	4967      	ldr	r1, [pc, #412]	; (8009890 <SendComand+0x28c>)
 80096f4:	4861      	ldr	r0, [pc, #388]	; (800987c <SendComand+0x278>)
 80096f6:	f000 fead 	bl	800a454 <UARTDMA_Print>
			break;
 80096fa:	e0b7      	b.n	800986c <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 80096fc:	4965      	ldr	r1, [pc, #404]	; (8009894 <SendComand+0x290>)
 80096fe:	485f      	ldr	r0, [pc, #380]	; (800987c <SendComand+0x278>)
 8009700:	f000 fea8 	bl	800a454 <UARTDMA_Print>
			break;
 8009704:	e0b2      	b.n	800986c <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8009706:	4964      	ldr	r1, [pc, #400]	; (8009898 <SendComand+0x294>)
 8009708:	485c      	ldr	r0, [pc, #368]	; (800987c <SendComand+0x278>)
 800970a:	f000 fea3 	bl	800a454 <UARTDMA_Print>
			break;
 800970e:	e0ad      	b.n	800986c <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8009710:	4962      	ldr	r1, [pc, #392]	; (800989c <SendComand+0x298>)
 8009712:	485a      	ldr	r0, [pc, #360]	; (800987c <SendComand+0x278>)
 8009714:	f000 fe9e 	bl	800a454 <UARTDMA_Print>
			break;
 8009718:	e0a8      	b.n	800986c <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 800971a:	4961      	ldr	r1, [pc, #388]	; (80098a0 <SendComand+0x29c>)
 800971c:	4857      	ldr	r0, [pc, #348]	; (800987c <SendComand+0x278>)
 800971e:	f000 fe99 	bl	800a454 <UARTDMA_Print>
			break;
 8009722:	e0a3      	b.n	800986c <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8009724:	495f      	ldr	r1, [pc, #380]	; (80098a4 <SendComand+0x2a0>)
 8009726:	4855      	ldr	r0, [pc, #340]	; (800987c <SendComand+0x278>)
 8009728:	f000 fe94 	bl	800a454 <UARTDMA_Print>
			break;
 800972c:	e09e      	b.n	800986c <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 800972e:	495e      	ldr	r1, [pc, #376]	; (80098a8 <SendComand+0x2a4>)
 8009730:	4852      	ldr	r0, [pc, #328]	; (800987c <SendComand+0x278>)
 8009732:	f000 fe8f 	bl	800a454 <UARTDMA_Print>
			break;
 8009736:	e099      	b.n	800986c <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8009738:	495c      	ldr	r1, [pc, #368]	; (80098ac <SendComand+0x2a8>)
 800973a:	4850      	ldr	r0, [pc, #320]	; (800987c <SendComand+0x278>)
 800973c:	f000 fe8a 	bl	800a454 <UARTDMA_Print>
			break;
 8009740:	e094      	b.n	800986c <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8009742:	495b      	ldr	r1, [pc, #364]	; (80098b0 <SendComand+0x2ac>)
 8009744:	484d      	ldr	r0, [pc, #308]	; (800987c <SendComand+0x278>)
 8009746:	f000 fe85 	bl	800a454 <UARTDMA_Print>
			break;
 800974a:	e08f      	b.n	800986c <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 800974c:	4959      	ldr	r1, [pc, #356]	; (80098b4 <SendComand+0x2b0>)
 800974e:	484b      	ldr	r0, [pc, #300]	; (800987c <SendComand+0x278>)
 8009750:	f000 fe80 	bl	800a454 <UARTDMA_Print>
			break;
 8009754:	e08a      	b.n	800986c <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8009756:	4958      	ldr	r1, [pc, #352]	; (80098b8 <SendComand+0x2b4>)
 8009758:	4848      	ldr	r0, [pc, #288]	; (800987c <SendComand+0x278>)
 800975a:	f000 fe7b 	bl	800a454 <UARTDMA_Print>
			break;
 800975e:	e085      	b.n	800986c <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8009760:	4956      	ldr	r1, [pc, #344]	; (80098bc <SendComand+0x2b8>)
 8009762:	4846      	ldr	r0, [pc, #280]	; (800987c <SendComand+0x278>)
 8009764:	f000 fe76 	bl	800a454 <UARTDMA_Print>
			break;
 8009768:	e080      	b.n	800986c <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 800976a:	4955      	ldr	r1, [pc, #340]	; (80098c0 <SendComand+0x2bc>)
 800976c:	4843      	ldr	r0, [pc, #268]	; (800987c <SendComand+0x278>)
 800976e:	f000 fe71 	bl	800a454 <UARTDMA_Print>
			break;
 8009772:	e07b      	b.n	800986c <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8009774:	4953      	ldr	r1, [pc, #332]	; (80098c4 <SendComand+0x2c0>)
 8009776:	4841      	ldr	r0, [pc, #260]	; (800987c <SendComand+0x278>)
 8009778:	f000 fe6c 	bl	800a454 <UARTDMA_Print>
			break;
 800977c:	e076      	b.n	800986c <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 800977e:	4952      	ldr	r1, [pc, #328]	; (80098c8 <SendComand+0x2c4>)
 8009780:	483e      	ldr	r0, [pc, #248]	; (800987c <SendComand+0x278>)
 8009782:	f000 fe67 	bl	800a454 <UARTDMA_Print>
			break;
 8009786:	e071      	b.n	800986c <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8009788:	4950      	ldr	r1, [pc, #320]	; (80098cc <SendComand+0x2c8>)
 800978a:	483c      	ldr	r0, [pc, #240]	; (800987c <SendComand+0x278>)
 800978c:	f000 fe62 	bl	800a454 <UARTDMA_Print>
			break;
 8009790:	e06c      	b.n	800986c <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8009792:	494f      	ldr	r1, [pc, #316]	; (80098d0 <SendComand+0x2cc>)
 8009794:	4839      	ldr	r0, [pc, #228]	; (800987c <SendComand+0x278>)
 8009796:	f000 fe5d 	bl	800a454 <UARTDMA_Print>
			break;
 800979a:	e067      	b.n	800986c <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 800979c:	494d      	ldr	r1, [pc, #308]	; (80098d4 <SendComand+0x2d0>)
 800979e:	4837      	ldr	r0, [pc, #220]	; (800987c <SendComand+0x278>)
 80097a0:	f000 fe58 	bl	800a454 <UARTDMA_Print>
			break;
 80097a4:	e062      	b.n	800986c <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 80097a6:	494c      	ldr	r1, [pc, #304]	; (80098d8 <SendComand+0x2d4>)
 80097a8:	4834      	ldr	r0, [pc, #208]	; (800987c <SendComand+0x278>)
 80097aa:	f000 fe53 	bl	800a454 <UARTDMA_Print>
			break;
 80097ae:	e05d      	b.n	800986c <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 80097b0:	494a      	ldr	r1, [pc, #296]	; (80098dc <SendComand+0x2d8>)
 80097b2:	4832      	ldr	r0, [pc, #200]	; (800987c <SendComand+0x278>)
 80097b4:	f000 fe4e 	bl	800a454 <UARTDMA_Print>
			break;
 80097b8:	e058      	b.n	800986c <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 80097ba:	4949      	ldr	r1, [pc, #292]	; (80098e0 <SendComand+0x2dc>)
 80097bc:	482f      	ldr	r0, [pc, #188]	; (800987c <SendComand+0x278>)
 80097be:	f000 fe49 	bl	800a454 <UARTDMA_Print>
			break;
 80097c2:	e053      	b.n	800986c <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 80097c4:	4947      	ldr	r1, [pc, #284]	; (80098e4 <SendComand+0x2e0>)
 80097c6:	482d      	ldr	r0, [pc, #180]	; (800987c <SendComand+0x278>)
 80097c8:	f000 fe44 	bl	800a454 <UARTDMA_Print>
			break;
 80097cc:	e04e      	b.n	800986c <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 80097ce:	4946      	ldr	r1, [pc, #280]	; (80098e8 <SendComand+0x2e4>)
 80097d0:	482a      	ldr	r0, [pc, #168]	; (800987c <SendComand+0x278>)
 80097d2:	f000 fe3f 	bl	800a454 <UARTDMA_Print>
			break;
 80097d6:	e049      	b.n	800986c <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 80097d8:	4944      	ldr	r1, [pc, #272]	; (80098ec <SendComand+0x2e8>)
 80097da:	4828      	ldr	r0, [pc, #160]	; (800987c <SendComand+0x278>)
 80097dc:	f000 fe3a 	bl	800a454 <UARTDMA_Print>
			break;
 80097e0:	e044      	b.n	800986c <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 80097e2:	4943      	ldr	r1, [pc, #268]	; (80098f0 <SendComand+0x2ec>)
 80097e4:	4825      	ldr	r0, [pc, #148]	; (800987c <SendComand+0x278>)
 80097e6:	f000 fe35 	bl	800a454 <UARTDMA_Print>
			break;
 80097ea:	e03f      	b.n	800986c <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 80097ec:	4941      	ldr	r1, [pc, #260]	; (80098f4 <SendComand+0x2f0>)
 80097ee:	4823      	ldr	r0, [pc, #140]	; (800987c <SendComand+0x278>)
 80097f0:	f000 fe30 	bl	800a454 <UARTDMA_Print>
			break;
 80097f4:	e03a      	b.n	800986c <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 80097f6:	4940      	ldr	r1, [pc, #256]	; (80098f8 <SendComand+0x2f4>)
 80097f8:	4820      	ldr	r0, [pc, #128]	; (800987c <SendComand+0x278>)
 80097fa:	f000 fe2b 	bl	800a454 <UARTDMA_Print>
			break;
 80097fe:	e035      	b.n	800986c <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8009800:	493e      	ldr	r1, [pc, #248]	; (80098fc <SendComand+0x2f8>)
 8009802:	481e      	ldr	r0, [pc, #120]	; (800987c <SendComand+0x278>)
 8009804:	f000 fe26 	bl	800a454 <UARTDMA_Print>
			break;
 8009808:	e030      	b.n	800986c <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 800980a:	493d      	ldr	r1, [pc, #244]	; (8009900 <SendComand+0x2fc>)
 800980c:	481b      	ldr	r0, [pc, #108]	; (800987c <SendComand+0x278>)
 800980e:	f000 fe21 	bl	800a454 <UARTDMA_Print>
			break;
 8009812:	e02b      	b.n	800986c <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8009814:	493b      	ldr	r1, [pc, #236]	; (8009904 <SendComand+0x300>)
 8009816:	4819      	ldr	r0, [pc, #100]	; (800987c <SendComand+0x278>)
 8009818:	f000 fe1c 	bl	800a454 <UARTDMA_Print>
			break;
 800981c:	e026      	b.n	800986c <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 800981e:	493a      	ldr	r1, [pc, #232]	; (8009908 <SendComand+0x304>)
 8009820:	4816      	ldr	r0, [pc, #88]	; (800987c <SendComand+0x278>)
 8009822:	f000 fe17 	bl	800a454 <UARTDMA_Print>
			break;
 8009826:	e021      	b.n	800986c <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8009828:	4938      	ldr	r1, [pc, #224]	; (800990c <SendComand+0x308>)
 800982a:	4814      	ldr	r0, [pc, #80]	; (800987c <SendComand+0x278>)
 800982c:	f000 fe12 	bl	800a454 <UARTDMA_Print>
			break;
 8009830:	e01c      	b.n	800986c <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8009832:	4b37      	ldr	r3, [pc, #220]	; (8009910 <SendComand+0x30c>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	2b08      	cmp	r3, #8
 8009838:	d802      	bhi.n	8009840 <SendComand+0x23c>
 800983a:	4b35      	ldr	r3, [pc, #212]	; (8009910 <SendComand+0x30c>)
 800983c:	2209      	movs	r2, #9
 800983e:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8009840:	4b33      	ldr	r3, [pc, #204]	; (8009910 <SendComand+0x30c>)
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	461a      	mov	r2, r3
 8009846:	4933      	ldr	r1, [pc, #204]	; (8009914 <SendComand+0x310>)
 8009848:	4833      	ldr	r0, [pc, #204]	; (8009918 <SendComand+0x314>)
 800984a:	f008 feab 	bl	80125a4 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800984e:	4932      	ldr	r1, [pc, #200]	; (8009918 <SendComand+0x314>)
 8009850:	480a      	ldr	r0, [pc, #40]	; (800987c <SendComand+0x278>)
 8009852:	f000 fdff 	bl	800a454 <UARTDMA_Print>
			break;
 8009856:	e009      	b.n	800986c <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8009858:	4930      	ldr	r1, [pc, #192]	; (800991c <SendComand+0x318>)
 800985a:	4808      	ldr	r0, [pc, #32]	; (800987c <SendComand+0x278>)
 800985c:	f000 fdfa 	bl	800a454 <UARTDMA_Print>
			break;
 8009860:	e004      	b.n	800986c <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8009862:	492f      	ldr	r1, [pc, #188]	; (8009920 <SendComand+0x31c>)
 8009864:	4805      	ldr	r0, [pc, #20]	; (800987c <SendComand+0x278>)
 8009866:	f000 fdf5 	bl	800a454 <UARTDMA_Print>
			break;
 800986a:	bf00      	nop
		}
	return 1;
 800986c:	2301      	movs	r3, #1
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	08016a58 	.word	0x08016a58
 800987c:	200004f8 	.word	0x200004f8
 8009880:	08016a60 	.word	0x08016a60
 8009884:	08016a68 	.word	0x08016a68
 8009888:	08016a74 	.word	0x08016a74
 800988c:	08016a7c 	.word	0x08016a7c
 8009890:	08016a84 	.word	0x08016a84
 8009894:	08016a8c 	.word	0x08016a8c
 8009898:	08016a9c 	.word	0x08016a9c
 800989c:	08016aac 	.word	0x08016aac
 80098a0:	08016abc 	.word	0x08016abc
 80098a4:	08016acc 	.word	0x08016acc
 80098a8:	08016adc 	.word	0x08016adc
 80098ac:	08016aec 	.word	0x08016aec
 80098b0:	08016afc 	.word	0x08016afc
 80098b4:	08016b0c 	.word	0x08016b0c
 80098b8:	08016b1c 	.word	0x08016b1c
 80098bc:	08016b2c 	.word	0x08016b2c
 80098c0:	08016b3c 	.word	0x08016b3c
 80098c4:	08016b4c 	.word	0x08016b4c
 80098c8:	08016b5c 	.word	0x08016b5c
 80098cc:	08016b6c 	.word	0x08016b6c
 80098d0:	08016b7c 	.word	0x08016b7c
 80098d4:	08016b8c 	.word	0x08016b8c
 80098d8:	08016b9c 	.word	0x08016b9c
 80098dc:	08016bac 	.word	0x08016bac
 80098e0:	08016bbc 	.word	0x08016bbc
 80098e4:	08016bcc 	.word	0x08016bcc
 80098e8:	08016bdc 	.word	0x08016bdc
 80098ec:	08016bec 	.word	0x08016bec
 80098f0:	08016bfc 	.word	0x08016bfc
 80098f4:	08016c0c 	.word	0x08016c0c
 80098f8:	08016c1c 	.word	0x08016c1c
 80098fc:	08016c2c 	.word	0x08016c2c
 8009900:	08016c3c 	.word	0x08016c3c
 8009904:	08016c4c 	.word	0x08016c4c
 8009908:	08016c5c 	.word	0x08016c5c
 800990c:	08016c6c 	.word	0x08016c6c
 8009910:	20000034 	.word	0x20000034
 8009914:	08016c7c 	.word	0x08016c7c
 8009918:	20000308 	.word	0x20000308
 800991c:	08016c8c 	.word	0x08016c8c
 8009920:	08016c9c 	.word	0x08016c9c

08009924 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	781a      	ldrb	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	429a      	cmp	r2, r3
 8009938:	d101      	bne.n	800993e <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 800993a:	2301      	movs	r3, #1
 800993c:	e015      	b.n	800996a <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	461a      	mov	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4413      	add	r3, r2
 8009948:	789a      	ldrb	r2, [r3, #2]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	785b      	ldrb	r3, [r3, #1]
 8009952:	3301      	adds	r3, #1
 8009954:	425a      	negs	r2, r3
 8009956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800995a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800995e:	bf58      	it	pl
 8009960:	4253      	negpl	r3, r2
 8009962:	b2da      	uxtb	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8009976:	b480      	push	{r7}
 8009978:	b085      	sub	sp, #20
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	460b      	mov	r3, r1
 8009980:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	3301      	adds	r3, #1
 8009988:	425a      	negs	r2, r3
 800998a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800998e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009992:	bf58      	it	pl
 8009994:	4253      	negpl	r3, r2
 8009996:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	785b      	ldrb	r3, [r3, #1]
 800999c:	7bfa      	ldrb	r2, [r7, #15]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d101      	bne.n	80099a6 <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 80099a2:	2301      	movs	r3, #1
 80099a4:	e00a      	b.n	80099bc <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4413      	add	r3, r2
 80099b0:	78fa      	ldrb	r2, [r7, #3]
 80099b2:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	7bfa      	ldrb	r2, [r7, #15]
 80099b8:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80099cc:	4b17      	ldr	r3, [pc, #92]	; (8009a2c <MX_SPI1_Init+0x64>)
 80099ce:	4a18      	ldr	r2, [pc, #96]	; (8009a30 <MX_SPI1_Init+0x68>)
 80099d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80099d2:	4b16      	ldr	r3, [pc, #88]	; (8009a2c <MX_SPI1_Init+0x64>)
 80099d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80099d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80099da:	4b14      	ldr	r3, [pc, #80]	; (8009a2c <MX_SPI1_Init+0x64>)
 80099dc:	2200      	movs	r2, #0
 80099de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80099e0:	4b12      	ldr	r3, [pc, #72]	; (8009a2c <MX_SPI1_Init+0x64>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80099e6:	4b11      	ldr	r3, [pc, #68]	; (8009a2c <MX_SPI1_Init+0x64>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80099ec:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <MX_SPI1_Init+0x64>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80099f2:	4b0e      	ldr	r3, [pc, #56]	; (8009a2c <MX_SPI1_Init+0x64>)
 80099f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80099fa:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <MX_SPI1_Init+0x64>)
 80099fc:	2210      	movs	r2, #16
 80099fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009a00:	4b0a      	ldr	r3, [pc, #40]	; (8009a2c <MX_SPI1_Init+0x64>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009a06:	4b09      	ldr	r3, [pc, #36]	; (8009a2c <MX_SPI1_Init+0x64>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a0c:	4b07      	ldr	r3, [pc, #28]	; (8009a2c <MX_SPI1_Init+0x64>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009a12:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <MX_SPI1_Init+0x64>)
 8009a14:	220a      	movs	r2, #10
 8009a16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009a18:	4804      	ldr	r0, [pc, #16]	; (8009a2c <MX_SPI1_Init+0x64>)
 8009a1a:	f005 fd47 	bl	800f4ac <HAL_SPI_Init>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009a24:	f7fc fb9a 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009a28:	bf00      	nop
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	20000940 	.word	0x20000940
 8009a30:	40013000 	.word	0x40013000

08009a34 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8009a38:	4b17      	ldr	r3, [pc, #92]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a3a:	4a18      	ldr	r2, [pc, #96]	; (8009a9c <MX_SPI3_Init+0x68>)
 8009a3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009a3e:	4b16      	ldr	r3, [pc, #88]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009a44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8009a46:	4b14      	ldr	r3, [pc, #80]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009a4c:	4b12      	ldr	r3, [pc, #72]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a52:	4b11      	ldr	r3, [pc, #68]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009a58:	4b0f      	ldr	r3, [pc, #60]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009a5e:	4b0e      	ldr	r3, [pc, #56]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009a66:	4b0c      	ldr	r3, [pc, #48]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a68:	2220      	movs	r2, #32
 8009a6a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009a72:	4b09      	ldr	r3, [pc, #36]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a78:	4b07      	ldr	r3, [pc, #28]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8009a7e:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a80:	220a      	movs	r2, #10
 8009a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009a84:	4804      	ldr	r0, [pc, #16]	; (8009a98 <MX_SPI3_Init+0x64>)
 8009a86:	f005 fd11 	bl	800f4ac <HAL_SPI_Init>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8009a90:	f7fc fb64 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009a94:	bf00      	nop
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	200008e8 	.word	0x200008e8
 8009a9c:	40003c00 	.word	0x40003c00

08009aa0 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8009aa4:	4b17      	ldr	r3, [pc, #92]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009aa6:	4a18      	ldr	r2, [pc, #96]	; (8009b08 <MX_SPI5_Init+0x68>)
 8009aa8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8009aaa:	4b16      	ldr	r3, [pc, #88]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009ab0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8009ab2:	4b14      	ldr	r3, [pc, #80]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8009ab8:	4b12      	ldr	r3, [pc, #72]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009abe:	4b11      	ldr	r3, [pc, #68]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009ac4:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8009aca:	4b0e      	ldr	r3, [pc, #56]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ad0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009ad2:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009ad8:	4b0a      	ldr	r3, [pc, #40]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8009ade:	4b09      	ldr	r3, [pc, #36]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ae4:	4b07      	ldr	r3, [pc, #28]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8009aea:	4b06      	ldr	r3, [pc, #24]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009aec:	220a      	movs	r2, #10
 8009aee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8009af0:	4804      	ldr	r0, [pc, #16]	; (8009b04 <MX_SPI5_Init+0x64>)
 8009af2:	f005 fcdb 	bl	800f4ac <HAL_SPI_Init>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8009afc:	f7fc fb2e 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8009b00:	bf00      	nop
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	20000890 	.word	0x20000890
 8009b08:	40015000 	.word	0x40015000

08009b0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08e      	sub	sp, #56	; 0x38
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b18:	2200      	movs	r2, #0
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	605a      	str	r2, [r3, #4]
 8009b1e:	609a      	str	r2, [r3, #8]
 8009b20:	60da      	str	r2, [r3, #12]
 8009b22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a5a      	ldr	r2, [pc, #360]	; (8009c94 <HAL_SPI_MspInit+0x188>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d12c      	bne.n	8009b88 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009b2e:	2300      	movs	r3, #0
 8009b30:	623b      	str	r3, [r7, #32]
 8009b32:	4b59      	ldr	r3, [pc, #356]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b36:	4a58      	ldr	r2, [pc, #352]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009b38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8009b3e:	4b56      	ldr	r3, [pc, #344]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b46:	623b      	str	r3, [r7, #32]
 8009b48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	61fb      	str	r3, [r7, #28]
 8009b4e:	4b52      	ldr	r3, [pc, #328]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b52:	4a51      	ldr	r2, [pc, #324]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009b54:	f043 0301 	orr.w	r3, r3, #1
 8009b58:	6313      	str	r3, [r2, #48]	; 0x30
 8009b5a:	4b4f      	ldr	r3, [pc, #316]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	61fb      	str	r3, [r7, #28]
 8009b64:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 8009b66:	23e0      	movs	r3, #224	; 0xe0
 8009b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b72:	2303      	movs	r3, #3
 8009b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009b76:	2305      	movs	r3, #5
 8009b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b7e:	4619      	mov	r1, r3
 8009b80:	4846      	ldr	r0, [pc, #280]	; (8009c9c <HAL_SPI_MspInit+0x190>)
 8009b82:	f001 fd5f 	bl	800b644 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8009b86:	e081      	b.n	8009c8c <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a44      	ldr	r2, [pc, #272]	; (8009ca0 <HAL_SPI_MspInit+0x194>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d12c      	bne.n	8009bec <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009b92:	2300      	movs	r3, #0
 8009b94:	61bb      	str	r3, [r7, #24]
 8009b96:	4b40      	ldr	r3, [pc, #256]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	4a3f      	ldr	r2, [pc, #252]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ba2:	4b3d      	ldr	r3, [pc, #244]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009baa:	61bb      	str	r3, [r7, #24]
 8009bac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009bae:	2300      	movs	r3, #0
 8009bb0:	617b      	str	r3, [r7, #20]
 8009bb2:	4b39      	ldr	r3, [pc, #228]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb6:	4a38      	ldr	r2, [pc, #224]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009bb8:	f043 0302 	orr.w	r3, r3, #2
 8009bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8009bbe:	4b36      	ldr	r3, [pc, #216]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 8009bca:	2338      	movs	r3, #56	; 0x38
 8009bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bce:	2302      	movs	r3, #2
 8009bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009bda:	2306      	movs	r3, #6
 8009bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009be2:	4619      	mov	r1, r3
 8009be4:	482f      	ldr	r0, [pc, #188]	; (8009ca4 <HAL_SPI_MspInit+0x198>)
 8009be6:	f001 fd2d 	bl	800b644 <HAL_GPIO_Init>
}
 8009bea:	e04f      	b.n	8009c8c <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a2d      	ldr	r2, [pc, #180]	; (8009ca8 <HAL_SPI_MspInit+0x19c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d14a      	bne.n	8009c8c <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	613b      	str	r3, [r7, #16]
 8009bfa:	4b27      	ldr	r3, [pc, #156]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bfe:	4a26      	ldr	r2, [pc, #152]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c04:	6453      	str	r3, [r2, #68]	; 0x44
 8009c06:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c0e:	613b      	str	r3, [r7, #16]
 8009c10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c12:	2300      	movs	r3, #0
 8009c14:	60fb      	str	r3, [r7, #12]
 8009c16:	4b20      	ldr	r3, [pc, #128]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1a:	4a1f      	ldr	r2, [pc, #124]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009c1c:	f043 0302 	orr.w	r3, r3, #2
 8009c20:	6313      	str	r3, [r2, #48]	; 0x30
 8009c22:	4b1d      	ldr	r3, [pc, #116]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c26:	f003 0302 	and.w	r3, r3, #2
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60bb      	str	r3, [r7, #8]
 8009c32:	4b19      	ldr	r3, [pc, #100]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c36:	4a18      	ldr	r2, [pc, #96]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009c38:	f043 0301 	orr.w	r3, r3, #1
 8009c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8009c3e:	4b16      	ldr	r3, [pc, #88]	; (8009c98 <HAL_SPI_MspInit+0x18c>)
 8009c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	60bb      	str	r3, [r7, #8]
 8009c48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c4e:	2302      	movs	r3, #2
 8009c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c52:	2300      	movs	r3, #0
 8009c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c56:	2303      	movs	r3, #3
 8009c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8009c5a:	2306      	movs	r3, #6
 8009c5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 8009c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c62:	4619      	mov	r1, r3
 8009c64:	480f      	ldr	r0, [pc, #60]	; (8009ca4 <HAL_SPI_MspInit+0x198>)
 8009c66:	f001 fced 	bl	800b644 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 8009c6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c70:	2302      	movs	r3, #2
 8009c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c74:	2300      	movs	r3, #0
 8009c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8009c7c:	2306      	movs	r3, #6
 8009c7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c84:	4619      	mov	r1, r3
 8009c86:	4805      	ldr	r0, [pc, #20]	; (8009c9c <HAL_SPI_MspInit+0x190>)
 8009c88:	f001 fcdc 	bl	800b644 <HAL_GPIO_Init>
}
 8009c8c:	bf00      	nop
 8009c8e:	3738      	adds	r7, #56	; 0x38
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	40013000 	.word	0x40013000
 8009c98:	40023800 	.word	0x40023800
 8009c9c:	40020000 	.word	0x40020000
 8009ca0:	40003c00 	.word	0x40003c00
 8009ca4:	40020400 	.word	0x40020400
 8009ca8:	40015000 	.word	0x40015000

08009cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	607b      	str	r3, [r7, #4]
 8009cb6:	4b10      	ldr	r3, [pc, #64]	; (8009cf8 <HAL_MspInit+0x4c>)
 8009cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cba:	4a0f      	ldr	r2, [pc, #60]	; (8009cf8 <HAL_MspInit+0x4c>)
 8009cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8009cc2:	4b0d      	ldr	r3, [pc, #52]	; (8009cf8 <HAL_MspInit+0x4c>)
 8009cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cca:	607b      	str	r3, [r7, #4]
 8009ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009cce:	2300      	movs	r3, #0
 8009cd0:	603b      	str	r3, [r7, #0]
 8009cd2:	4b09      	ldr	r3, [pc, #36]	; (8009cf8 <HAL_MspInit+0x4c>)
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	4a08      	ldr	r2, [pc, #32]	; (8009cf8 <HAL_MspInit+0x4c>)
 8009cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8009cde:	4b06      	ldr	r3, [pc, #24]	; (8009cf8 <HAL_MspInit+0x4c>)
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ce6:	603b      	str	r3, [r7, #0]
 8009ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009cea:	bf00      	nop
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	40023800 	.word	0x40023800

08009cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009d00:	e7fe      	b.n	8009d00 <NMI_Handler+0x4>

08009d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009d02:	b480      	push	{r7}
 8009d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009d06:	e7fe      	b.n	8009d06 <HardFault_Handler+0x4>

08009d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009d0c:	e7fe      	b.n	8009d0c <MemManage_Handler+0x4>

08009d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009d12:	e7fe      	b.n	8009d12 <BusFault_Handler+0x4>

08009d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009d14:	b480      	push	{r7}
 8009d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009d18:	e7fe      	b.n	8009d18 <UsageFault_Handler+0x4>

08009d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009d1e:	bf00      	nop
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009d2c:	bf00      	nop
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009d36:	b480      	push	{r7}
 8009d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009d3a:	bf00      	nop
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009d48:	f000 fe88 	bl	800aa5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009d4c:	bf00      	nop
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART2_TX_2uC_Pin);
 8009d54:	2004      	movs	r0, #4
 8009d56:	f001 fe45 	bl	800b9e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8009d5a:	bf00      	nop
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 8009d62:	2010      	movs	r0, #16
 8009d64:	f001 fe3e 	bl	800b9e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009d68:	bf00      	nop
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8009d70:	4802      	ldr	r0, [pc, #8]	; (8009d7c <DMA1_Stream0_IRQHandler+0x10>)
 8009d72:	f001 f9ef 	bl	800b154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009d76:	bf00      	nop
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20000498 	.word	0x20000498

08009d80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8009d84:	4802      	ldr	r0, [pc, #8]	; (8009d90 <DMA1_Stream1_IRQHandler+0x10>)
 8009d86:	f001 f9e5 	bl	800b154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009d8a:	bf00      	nop
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	200003e4 	.word	0x200003e4

08009d94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8009d98:	4802      	ldr	r0, [pc, #8]	; (8009da4 <DMA1_Stream5_IRQHandler+0x10>)
 8009d9a:	f000 faa5 	bl	800a2e8 <UARTDMA_DmaReceiveIrqHandler>
	return;
 8009d9e:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	200004f8 	.word	0x200004f8

08009da8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009dac:	4802      	ldr	r0, [pc, #8]	; (8009db8 <DMA1_Stream6_IRQHandler+0x10>)
 8009dae:	f001 f9d1 	bl	800b154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8009db2:	bf00      	nop
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20000b90 	.word	0x20000b90

08009dbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8009dc0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009dc4:	f001 fe0e 	bl	800b9e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009dc8:	bf00      	nop
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8009dd0:	4802      	ldr	r0, [pc, #8]	; (8009ddc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009dd2:	f006 f994 	bl	80100fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009dd6:	bf00      	nop
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20000998 	.word	0x20000998

08009de0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8009de4:	4802      	ldr	r0, [pc, #8]	; (8009df0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8009de6:	f006 f98a 	bl	80100fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8009dea:	bf00      	nop
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	200009e0 	.word	0x200009e0

08009df4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009df8:	4802      	ldr	r0, [pc, #8]	; (8009e04 <I2C1_EV_IRQHandler+0x10>)
 8009dfa:	f002 fd93 	bl	800c924 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009dfe:	bf00      	nop
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20000444 	.word	0x20000444

08009e08 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8009e0c:	4802      	ldr	r0, [pc, #8]	; (8009e18 <I2C1_ER_IRQHandler+0x10>)
 8009e0e:	f002 fefa 	bl	800cc06 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8009e12:	bf00      	nop
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	20000444 	.word	0x20000444

08009e1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma1);
 8009e20:	4803      	ldr	r0, [pc, #12]	; (8009e30 <USART1_IRQHandler+0x14>)
 8009e22:	f000 fa37 	bl	800a294 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009e26:	4803      	ldr	r0, [pc, #12]	; (8009e34 <USART1_IRQHandler+0x18>)
 8009e28:	f006 fcbe 	bl	80107a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009e2c:	bf00      	nop
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	200006c4 	.word	0x200006c4
 8009e34:	20000bf0 	.word	0x20000bf0

08009e38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 8009e3c:	4803      	ldr	r0, [pc, #12]	; (8009e4c <USART2_IRQHandler+0x14>)
 8009e3e:	f000 fa29 	bl	800a294 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009e42:	4803      	ldr	r0, [pc, #12]	; (8009e50 <USART2_IRQHandler+0x18>)
 8009e44:	f006 fcb0 	bl	80107a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009e48:	bf00      	nop
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	200004f8 	.word	0x200004f8
 8009e50:	20000c34 	.word	0x20000c34

08009e54 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8009e58:	4802      	ldr	r0, [pc, #8]	; (8009e64 <SPI3_IRQHandler+0x10>)
 8009e5a:	f005 fd53 	bl	800f904 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8009e5e:	bf00      	nop
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	200008e8 	.word	0x200008e8

08009e68 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma1);
 8009e6c:	4802      	ldr	r0, [pc, #8]	; (8009e78 <DMA2_Stream2_IRQHandler+0x10>)
 8009e6e:	f000 fa3b 	bl	800a2e8 <UARTDMA_DmaReceiveIrqHandler>
	return;
 8009e72:	bf00      	nop
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	200006c4 	.word	0x200006c4

08009e7c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009e80:	4802      	ldr	r0, [pc, #8]	; (8009e8c <DMA2_Stream7_IRQHandler+0x10>)
 8009e82:	f001 f967 	bl	800b154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8009e86:	bf00      	nop
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20000ad0 	.word	0x20000ad0

08009e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009e90:	b480      	push	{r7}
 8009e92:	af00      	add	r7, sp, #0
	return 1;
 8009e94:	2301      	movs	r3, #1
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <_kill>:

int _kill(int pid, int sig)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009eaa:	f007 fcc9 	bl	8011840 <__errno>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2216      	movs	r2, #22
 8009eb2:	601a      	str	r2, [r3, #0]
	return -1;
 8009eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <_exit>:

void _exit (int status)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7ff ffe7 	bl	8009ea0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009ed2:	e7fe      	b.n	8009ed2 <_exit+0x12>

08009ed4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	e00a      	b.n	8009efc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009ee6:	f3af 8000 	nop.w
 8009eea:	4601      	mov	r1, r0
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	60ba      	str	r2, [r7, #8]
 8009ef2:	b2ca      	uxtb	r2, r1
 8009ef4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	617b      	str	r3, [r7, #20]
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	dbf0      	blt.n	8009ee6 <_read+0x12>
	}

return len;
 8009f04:	687b      	ldr	r3, [r7, #4]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3718      	adds	r7, #24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b086      	sub	sp, #24
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	60f8      	str	r0, [r7, #12]
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e009      	b.n	8009f34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	60ba      	str	r2, [r7, #8]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	3301      	adds	r3, #1
 8009f32:	617b      	str	r3, [r7, #20]
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	dbf1      	blt.n	8009f20 <_write+0x12>
	}
	return len;
 8009f3c:	687b      	ldr	r3, [r7, #4]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <_close>:

int _close(int file)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b083      	sub	sp, #12
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
	return -1;
 8009f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009f6e:	605a      	str	r2, [r3, #4]
	return 0;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <_isatty>:

int _isatty(int file)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
	return 1;
 8009f86:	2301      	movs	r3, #1
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
	return 0;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
	...

08009fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009fb8:	4a14      	ldr	r2, [pc, #80]	; (800a00c <_sbrk+0x5c>)
 8009fba:	4b15      	ldr	r3, [pc, #84]	; (800a010 <_sbrk+0x60>)
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009fc4:	4b13      	ldr	r3, [pc, #76]	; (800a014 <_sbrk+0x64>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d102      	bne.n	8009fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009fcc:	4b11      	ldr	r3, [pc, #68]	; (800a014 <_sbrk+0x64>)
 8009fce:	4a12      	ldr	r2, [pc, #72]	; (800a018 <_sbrk+0x68>)
 8009fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009fd2:	4b10      	ldr	r3, [pc, #64]	; (800a014 <_sbrk+0x64>)
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4413      	add	r3, r2
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d207      	bcs.n	8009ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009fe0:	f007 fc2e 	bl	8011840 <__errno>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	220c      	movs	r2, #12
 8009fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009fea:	f04f 33ff 	mov.w	r3, #4294967295
 8009fee:	e009      	b.n	800a004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009ff0:	4b08      	ldr	r3, [pc, #32]	; (800a014 <_sbrk+0x64>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009ff6:	4b07      	ldr	r3, [pc, #28]	; (800a014 <_sbrk+0x64>)
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	4a05      	ldr	r2, [pc, #20]	; (800a014 <_sbrk+0x64>)
 800a000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a002:	68fb      	ldr	r3, [r7, #12]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3718      	adds	r7, #24
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	20020000 	.word	0x20020000
 800a010:	00000400 	.word	0x00000400
 800a014:	200002bc 	.word	0x200002bc
 800a018:	20000c90 	.word	0x20000c90

0800a01c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a01c:	b480      	push	{r7}
 800a01e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a020:	4b06      	ldr	r3, [pc, #24]	; (800a03c <SystemInit+0x20>)
 800a022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a026:	4a05      	ldr	r2, [pc, #20]	; (800a03c <SystemInit+0x20>)
 800a028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a02c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a030:	bf00      	nop
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	e000ed00 	.word	0xe000ed00

0800a040 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08c      	sub	sp, #48	; 0x30
 800a044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a046:	f107 030c 	add.w	r3, r7, #12
 800a04a:	2224      	movs	r2, #36	; 0x24
 800a04c:	2100      	movs	r1, #0
 800a04e:	4618      	mov	r0, r3
 800a050:	f007 fc20 	bl	8011894 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a054:	1d3b      	adds	r3, r7, #4
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a05c:	4b21      	ldr	r3, [pc, #132]	; (800a0e4 <MX_TIM2_Init+0xa4>)
 800a05e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a062:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a064:	4b1f      	ldr	r3, [pc, #124]	; (800a0e4 <MX_TIM2_Init+0xa4>)
 800a066:	2200      	movs	r2, #0
 800a068:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a06a:	4b1e      	ldr	r3, [pc, #120]	; (800a0e4 <MX_TIM2_Init+0xa4>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800a070:	4b1c      	ldr	r3, [pc, #112]	; (800a0e4 <MX_TIM2_Init+0xa4>)
 800a072:	f04f 32ff 	mov.w	r2, #4294967295
 800a076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a078:	4b1a      	ldr	r3, [pc, #104]	; (800a0e4 <MX_TIM2_Init+0xa4>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a07e:	4b19      	ldr	r3, [pc, #100]	; (800a0e4 <MX_TIM2_Init+0xa4>)
 800a080:	2200      	movs	r2, #0
 800a082:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800a084:	2301      	movs	r3, #1
 800a086:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a088:	2300      	movs	r3, #0
 800a08a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a08c:	2301      	movs	r3, #1
 800a08e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a090:	2300      	movs	r3, #0
 800a092:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a094:	2300      	movs	r3, #0
 800a096:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a098:	2300      	movs	r3, #0
 800a09a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a09c:	2301      	movs	r3, #1
 800a09e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800a0a8:	f107 030c 	add.w	r3, r7, #12
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	480d      	ldr	r0, [pc, #52]	; (800a0e4 <MX_TIM2_Init+0xa4>)
 800a0b0:	f005 fef1 	bl	800fe96 <HAL_TIM_Encoder_Init>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d001      	beq.n	800a0be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800a0ba:	f7fc f84f 	bl	800615c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a0c6:	1d3b      	adds	r3, r7, #4
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4806      	ldr	r0, [pc, #24]	; (800a0e4 <MX_TIM2_Init+0xa4>)
 800a0cc:	f006 f9ee 	bl	80104ac <HAL_TIMEx_MasterConfigSynchronization>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800a0d6:	f7fc f841 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a0da:	bf00      	nop
 800a0dc:	3730      	adds	r7, #48	; 0x30
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20000a28 	.word	0x20000a28

0800a0e8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800a0ec:	4b0e      	ldr	r3, [pc, #56]	; (800a128 <MX_TIM10_Init+0x40>)
 800a0ee:	4a0f      	ldr	r2, [pc, #60]	; (800a12c <MX_TIM10_Init+0x44>)
 800a0f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 800a0f2:	4b0d      	ldr	r3, [pc, #52]	; (800a128 <MX_TIM10_Init+0x40>)
 800a0f4:	f242 720f 	movw	r2, #9999	; 0x270f
 800a0f8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0fa:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <MX_TIM10_Init+0x40>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 800a100:	4b09      	ldr	r3, [pc, #36]	; (800a128 <MX_TIM10_Init+0x40>)
 800a102:	f242 720f 	movw	r2, #9999	; 0x270f
 800a106:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a108:	4b07      	ldr	r3, [pc, #28]	; (800a128 <MX_TIM10_Init+0x40>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a10e:	4b06      	ldr	r3, [pc, #24]	; (800a128 <MX_TIM10_Init+0x40>)
 800a110:	2200      	movs	r2, #0
 800a112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800a114:	4804      	ldr	r0, [pc, #16]	; (800a128 <MX_TIM10_Init+0x40>)
 800a116:	f005 fddd 	bl	800fcd4 <HAL_TIM_Base_Init>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800a120:	f7fc f81c 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800a124:	bf00      	nop
 800a126:	bd80      	pop	{r7, pc}
 800a128:	20000998 	.word	0x20000998
 800a12c:	40014400 	.word	0x40014400

0800a130 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800a134:	4b0f      	ldr	r3, [pc, #60]	; (800a174 <MX_TIM11_Init+0x44>)
 800a136:	4a10      	ldr	r2, [pc, #64]	; (800a178 <MX_TIM11_Init+0x48>)
 800a138:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800a13a:	4b0e      	ldr	r3, [pc, #56]	; (800a174 <MX_TIM11_Init+0x44>)
 800a13c:	f643 2297 	movw	r2, #14999	; 0x3a97
 800a140:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a142:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <MX_TIM11_Init+0x44>)
 800a144:	2200      	movs	r2, #0
 800a146:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 800a148:	4b0a      	ldr	r3, [pc, #40]	; (800a174 <MX_TIM11_Init+0x44>)
 800a14a:	f247 522f 	movw	r2, #29999	; 0x752f
 800a14e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800a150:	4b08      	ldr	r3, [pc, #32]	; (800a174 <MX_TIM11_Init+0x44>)
 800a152:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a156:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a158:	4b06      	ldr	r3, [pc, #24]	; (800a174 <MX_TIM11_Init+0x44>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800a15e:	4805      	ldr	r0, [pc, #20]	; (800a174 <MX_TIM11_Init+0x44>)
 800a160:	f005 fdb8 	bl	800fcd4 <HAL_TIM_Base_Init>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800a16a:	f7fb fff7 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800a16e:	bf00      	nop
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	200009e0 	.word	0x200009e0
 800a178:	40014800 	.word	0x40014800

0800a17c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08a      	sub	sp, #40	; 0x28
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a184:	f107 0314 	add.w	r3, r7, #20
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	605a      	str	r2, [r3, #4]
 800a18e:	609a      	str	r2, [r3, #8]
 800a190:	60da      	str	r2, [r3, #12]
 800a192:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a19c:	d12b      	bne.n	800a1f6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a19e:	2300      	movs	r3, #0
 800a1a0:	613b      	str	r3, [r7, #16]
 800a1a2:	4b17      	ldr	r3, [pc, #92]	; (800a200 <HAL_TIM_Encoder_MspInit+0x84>)
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	4a16      	ldr	r2, [pc, #88]	; (800a200 <HAL_TIM_Encoder_MspInit+0x84>)
 800a1a8:	f043 0301 	orr.w	r3, r3, #1
 800a1ac:	6413      	str	r3, [r2, #64]	; 0x40
 800a1ae:	4b14      	ldr	r3, [pc, #80]	; (800a200 <HAL_TIM_Encoder_MspInit+0x84>)
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	f003 0301 	and.w	r3, r3, #1
 800a1b6:	613b      	str	r3, [r7, #16]
 800a1b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	4b10      	ldr	r3, [pc, #64]	; (800a200 <HAL_TIM_Encoder_MspInit+0x84>)
 800a1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c2:	4a0f      	ldr	r2, [pc, #60]	; (800a200 <HAL_TIM_Encoder_MspInit+0x84>)
 800a1c4:	f043 0301 	orr.w	r3, r3, #1
 800a1c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a1ca:	4b0d      	ldr	r3, [pc, #52]	; (800a200 <HAL_TIM_Encoder_MspInit+0x84>)
 800a1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1da:	2302      	movs	r3, #2
 800a1dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1ea:	f107 0314 	add.w	r3, r7, #20
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	4804      	ldr	r0, [pc, #16]	; (800a204 <HAL_TIM_Encoder_MspInit+0x88>)
 800a1f2:	f001 fa27 	bl	800b644 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800a1f6:	bf00      	nop
 800a1f8:	3728      	adds	r7, #40	; 0x28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	40023800 	.word	0x40023800
 800a204:	40020000 	.word	0x40020000

0800a208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a1c      	ldr	r2, [pc, #112]	; (800a288 <HAL_TIM_Base_MspInit+0x80>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d116      	bne.n	800a248 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a21a:	2300      	movs	r3, #0
 800a21c:	60fb      	str	r3, [r7, #12]
 800a21e:	4b1b      	ldr	r3, [pc, #108]	; (800a28c <HAL_TIM_Base_MspInit+0x84>)
 800a220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a222:	4a1a      	ldr	r2, [pc, #104]	; (800a28c <HAL_TIM_Base_MspInit+0x84>)
 800a224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a228:	6453      	str	r3, [r2, #68]	; 0x44
 800a22a:	4b18      	ldr	r3, [pc, #96]	; (800a28c <HAL_TIM_Base_MspInit+0x84>)
 800a22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a22e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a232:	60fb      	str	r3, [r7, #12]
 800a234:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800a236:	2200      	movs	r2, #0
 800a238:	2100      	movs	r1, #0
 800a23a:	2019      	movs	r0, #25
 800a23c:	f000 fd91 	bl	800ad62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a240:	2019      	movs	r0, #25
 800a242:	f000 fdaa 	bl	800ad9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800a246:	e01a      	b.n	800a27e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a10      	ldr	r2, [pc, #64]	; (800a290 <HAL_TIM_Base_MspInit+0x88>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d115      	bne.n	800a27e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800a252:	2300      	movs	r3, #0
 800a254:	60bb      	str	r3, [r7, #8]
 800a256:	4b0d      	ldr	r3, [pc, #52]	; (800a28c <HAL_TIM_Base_MspInit+0x84>)
 800a258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a25a:	4a0c      	ldr	r2, [pc, #48]	; (800a28c <HAL_TIM_Base_MspInit+0x84>)
 800a25c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a260:	6453      	str	r3, [r2, #68]	; 0x44
 800a262:	4b0a      	ldr	r3, [pc, #40]	; (800a28c <HAL_TIM_Base_MspInit+0x84>)
 800a264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a26a:	60bb      	str	r3, [r7, #8]
 800a26c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800a26e:	2200      	movs	r2, #0
 800a270:	2100      	movs	r1, #0
 800a272:	201a      	movs	r0, #26
 800a274:	f000 fd75 	bl	800ad62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800a278:	201a      	movs	r0, #26
 800a27a:	f000 fd8e 	bl	800ad9a <HAL_NVIC_EnableIRQ>
}
 800a27e:	bf00      	nop
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	40014400 	.word	0x40014400
 800a28c:	40023800 	.word	0x40023800
 800a290:	40014800 	.word	0x40014800

0800a294 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0310 	and.w	r3, r3, #16
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d017      	beq.n	800a2dc <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f022 0201 	bic.w	r2, r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	60fb      	str	r3, [r7, #12]
	}
}
 800a2dc:	bf00      	nop
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2f8:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0310 	and.w	r3, r3, #16
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d056      	beq.n	800a3ba <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a314:	2220      	movs	r2, #32
 800a316:	409a      	lsls	r2, r3
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	b29b      	uxth	r3, r3
 800a328:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800a32c:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3304      	adds	r3, #4
 800a332:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800a334:	2300      	movs	r3, #0
 800a336:	82fb      	strh	r3, [r7, #22]
 800a338:	e01a      	b.n	800a370 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800a340:	8afb      	ldrh	r3, [r7, #22]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	4413      	add	r3, r2
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	4619      	mov	r1, r3
 800a34a:	f7ff fb14 	bl	8009976 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 800a34e:	8afb      	ldrh	r3, [r7, #22]
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	4413      	add	r3, r2
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b0a      	cmp	r3, #10
 800a358:	d107      	bne.n	800a36a <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800a360:	3301      	adds	r3, #1
 800a362:	b2da      	uxtb	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800a36a:	8afb      	ldrh	r3, [r7, #22]
 800a36c:	3301      	adds	r3, #1
 800a36e:	82fb      	strh	r3, [r7, #22]
 800a370:	8afa      	ldrh	r2, [r7, #22]
 800a372:	89fb      	ldrh	r3, [r7, #14]
 800a374:	429a      	cmp	r2, r3
 800a376:	d3e0      	bcc.n	800a33a <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a380:	223f      	movs	r2, #63	; 0x3f
 800a382:	409a      	lsls	r2, r3
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	1d1a      	adds	r2, r3, #4
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2240      	movs	r2, #64	; 0x40
 800a3a0:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f042 0201 	orr.w	r2, r2, #1
 800a3b8:	601a      	str	r2, [r3, #0]
	}
}
 800a3ba:	bf00      	nop
 800a3bc:	3718      	adds	r7, #24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f203 1347 	addw	r3, r3, #327	; 0x147
 800a3d4:	78fa      	ldrb	r2, [r7, #3]
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7ff facc 	bl	8009976 <RB_Write>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e000      	b.n	800a3ea <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800a406:	2b00      	cmp	r3, #0
 800a408:	d01f      	beq.n	800a44a <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800a40a:	e013      	b.n	800a434 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	2b0a      	cmp	r3, #10
 800a412:	d10c      	bne.n	800a42e <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800a420:	3b01      	subs	r3, #1
 800a422:	b2da      	uxtb	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 800a42a:	2300      	movs	r3, #0
 800a42c:	e00e      	b.n	800a44c <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3301      	adds	r3, #1
 800a432:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3344      	adds	r3, #68	; 0x44
 800a438:	68f9      	ldr	r1, [r7, #12]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff fa72 	bl	8009924 <RB_Read>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d0e2      	beq.n	800a40c <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 800a446:	2300      	movs	r3, #0
 800a448:	e000      	b.n	800a44c <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 800a44a:	2301      	movs	r3, #1
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800a462:	e012      	b.n	800a48a <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 800a464:	7afb      	ldrb	r3, [r7, #11]
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff ffaa 	bl	800a3c2 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3301      	adds	r3, #1
 800a472:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 800a474:	7afb      	ldrb	r3, [r7, #11]
 800a476:	2b0a      	cmp	r3, #10
 800a478:	d107      	bne.n	800a48a <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800a480:	3301      	adds	r3, #1
 800a482:	b2da      	uxtb	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	72fb      	strb	r3, [r7, #11]
 800a490:	7afb      	ldrb	r3, [r7, #11]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1e6      	bne.n	800a464 <UARTDMA_Print+0x10>
		}
	}
}
 800a496:	bf00      	nop
 800a498:	bf00      	nop
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e000      	b.n	800a4b8 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d028      	beq.n	800a532 <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800a4e0:	e013      	b.n	800a50a <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 800a4e2:	7b7b      	ldrb	r3, [r7, #13]
 800a4e4:	2b0a      	cmp	r3, #10
 800a4e6:	d107      	bne.n	800a4f8 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 800a4f8:	89fb      	ldrh	r3, [r7, #14]
 800a4fa:	1c5a      	adds	r2, r3, #1
 800a4fc:	81fa      	strh	r2, [r7, #14]
 800a4fe:	4619      	mov	r1, r3
 800a500:	7b7a      	ldrb	r2, [r7, #13]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	440b      	add	r3, r1
 800a506:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f203 1347 	addw	r3, r3, #327	; 0x147
 800a510:	f107 020d 	add.w	r2, r7, #13
 800a514:	4611      	mov	r1, r2
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff fa04 	bl	8009924 <RB_Read>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d0df      	beq.n	800a4e2 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	33c7      	adds	r3, #199	; 0xc7
 800a52a:	89fa      	ldrh	r2, [r7, #14]
 800a52c:	4619      	mov	r1, r3
 800a52e:	f006 f88d 	bl	801064c <HAL_UART_Transmit_DMA>
	}
}
 800a532:	bf00      	nop
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b082      	sub	sp, #8
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68da      	ldr	r2, [r3, #12]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f042 0210 	orr.w	r2, r2, #16
 800a55c:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f042 0210 	orr.w	r2, r2, #16
 800a574:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f042 0210 	orr.w	r2, r2, #16
 800a58c:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	3304      	adds	r3, #4
 800a596:	2240      	movs	r2, #64	; 0x40
 800a598:	4619      	mov	r1, r3
 800a59a:	f006 f8d5 	bl	8010748 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0208 	bic.w	r2, r2, #8
 800a5b4:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f022 0208 	bic.w	r2, r2, #8
 800a5cc:	601a      	str	r2, [r3, #0]
}
 800a5ce:	bf00      	nop
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a5dc:	4b11      	ldr	r3, [pc, #68]	; (800a624 <MX_USART1_UART_Init+0x4c>)
 800a5de:	4a12      	ldr	r2, [pc, #72]	; (800a628 <MX_USART1_UART_Init+0x50>)
 800a5e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a5e2:	4b10      	ldr	r3, [pc, #64]	; (800a624 <MX_USART1_UART_Init+0x4c>)
 800a5e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a5e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a5ea:	4b0e      	ldr	r3, [pc, #56]	; (800a624 <MX_USART1_UART_Init+0x4c>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a5f0:	4b0c      	ldr	r3, [pc, #48]	; (800a624 <MX_USART1_UART_Init+0x4c>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a5f6:	4b0b      	ldr	r3, [pc, #44]	; (800a624 <MX_USART1_UART_Init+0x4c>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a5fc:	4b09      	ldr	r3, [pc, #36]	; (800a624 <MX_USART1_UART_Init+0x4c>)
 800a5fe:	220c      	movs	r2, #12
 800a600:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a602:	4b08      	ldr	r3, [pc, #32]	; (800a624 <MX_USART1_UART_Init+0x4c>)
 800a604:	2200      	movs	r2, #0
 800a606:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a608:	4b06      	ldr	r3, [pc, #24]	; (800a624 <MX_USART1_UART_Init+0x4c>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a60e:	4805      	ldr	r0, [pc, #20]	; (800a624 <MX_USART1_UART_Init+0x4c>)
 800a610:	f005 ffce 	bl	80105b0 <HAL_UART_Init>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a61a:	f7fb fd9f 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a61e:	bf00      	nop
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	20000bf0 	.word	0x20000bf0
 800a628:	40011000 	.word	0x40011000

0800a62c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a630:	4b11      	ldr	r3, [pc, #68]	; (800a678 <MX_USART2_UART_Init+0x4c>)
 800a632:	4a12      	ldr	r2, [pc, #72]	; (800a67c <MX_USART2_UART_Init+0x50>)
 800a634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a636:	4b10      	ldr	r3, [pc, #64]	; (800a678 <MX_USART2_UART_Init+0x4c>)
 800a638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a63c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a63e:	4b0e      	ldr	r3, [pc, #56]	; (800a678 <MX_USART2_UART_Init+0x4c>)
 800a640:	2200      	movs	r2, #0
 800a642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a644:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <MX_USART2_UART_Init+0x4c>)
 800a646:	2200      	movs	r2, #0
 800a648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a64a:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <MX_USART2_UART_Init+0x4c>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a650:	4b09      	ldr	r3, [pc, #36]	; (800a678 <MX_USART2_UART_Init+0x4c>)
 800a652:	220c      	movs	r2, #12
 800a654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a656:	4b08      	ldr	r3, [pc, #32]	; (800a678 <MX_USART2_UART_Init+0x4c>)
 800a658:	2200      	movs	r2, #0
 800a65a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a65c:	4b06      	ldr	r3, [pc, #24]	; (800a678 <MX_USART2_UART_Init+0x4c>)
 800a65e:	2200      	movs	r2, #0
 800a660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a662:	4805      	ldr	r0, [pc, #20]	; (800a678 <MX_USART2_UART_Init+0x4c>)
 800a664:	f005 ffa4 	bl	80105b0 <HAL_UART_Init>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a66e:	f7fb fd75 	bl	800615c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a672:	bf00      	nop
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20000c34 	.word	0x20000c34
 800a67c:	40004400 	.word	0x40004400

0800a680 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b08c      	sub	sp, #48	; 0x30
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a688:	f107 031c 	add.w	r3, r7, #28
 800a68c:	2200      	movs	r2, #0
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	605a      	str	r2, [r3, #4]
 800a692:	609a      	str	r2, [r3, #8]
 800a694:	60da      	str	r2, [r3, #12]
 800a696:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a59      	ldr	r2, [pc, #356]	; (800a804 <HAL_UART_MspInit+0x184>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	f040 80c0 	bne.w	800a824 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	61bb      	str	r3, [r7, #24]
 800a6a8:	4b57      	ldr	r3, [pc, #348]	; (800a808 <HAL_UART_MspInit+0x188>)
 800a6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ac:	4a56      	ldr	r2, [pc, #344]	; (800a808 <HAL_UART_MspInit+0x188>)
 800a6ae:	f043 0310 	orr.w	r3, r3, #16
 800a6b2:	6453      	str	r3, [r2, #68]	; 0x44
 800a6b4:	4b54      	ldr	r3, [pc, #336]	; (800a808 <HAL_UART_MspInit+0x188>)
 800a6b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b8:	f003 0310 	and.w	r3, r3, #16
 800a6bc:	61bb      	str	r3, [r7, #24]
 800a6be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	617b      	str	r3, [r7, #20]
 800a6c4:	4b50      	ldr	r3, [pc, #320]	; (800a808 <HAL_UART_MspInit+0x188>)
 800a6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c8:	4a4f      	ldr	r2, [pc, #316]	; (800a808 <HAL_UART_MspInit+0x188>)
 800a6ca:	f043 0301 	orr.w	r3, r3, #1
 800a6ce:	6313      	str	r3, [r2, #48]	; 0x30
 800a6d0:	4b4d      	ldr	r3, [pc, #308]	; (800a808 <HAL_UART_MspInit+0x188>)
 800a6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d4:	f003 0301 	and.w	r3, r3, #1
 800a6d8:	617b      	str	r3, [r7, #20]
 800a6da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a6dc:	2300      	movs	r3, #0
 800a6de:	613b      	str	r3, [r7, #16]
 800a6e0:	4b49      	ldr	r3, [pc, #292]	; (800a808 <HAL_UART_MspInit+0x188>)
 800a6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e4:	4a48      	ldr	r2, [pc, #288]	; (800a808 <HAL_UART_MspInit+0x188>)
 800a6e6:	f043 0302 	orr.w	r3, r3, #2
 800a6ea:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ec:	4b46      	ldr	r3, [pc, #280]	; (800a808 <HAL_UART_MspInit+0x188>)
 800a6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	613b      	str	r3, [r7, #16]
 800a6f6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 800a6f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6fe:	2302      	movs	r3, #2
 800a700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a702:	2300      	movs	r3, #0
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a706:	2303      	movs	r3, #3
 800a708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a70a:	2307      	movs	r3, #7
 800a70c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 800a70e:	f107 031c 	add.w	r3, r7, #28
 800a712:	4619      	mov	r1, r3
 800a714:	483d      	ldr	r0, [pc, #244]	; (800a80c <HAL_UART_MspInit+0x18c>)
 800a716:	f000 ff95 	bl	800b644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 800a71a:	2380      	movs	r3, #128	; 0x80
 800a71c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a71e:	2302      	movs	r3, #2
 800a720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a722:	2300      	movs	r3, #0
 800a724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a726:	2303      	movs	r3, #3
 800a728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a72a:	2307      	movs	r3, #7
 800a72c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 800a72e:	f107 031c 	add.w	r3, r7, #28
 800a732:	4619      	mov	r1, r3
 800a734:	4836      	ldr	r0, [pc, #216]	; (800a810 <HAL_UART_MspInit+0x190>)
 800a736:	f000 ff85 	bl	800b644 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800a73a:	4b36      	ldr	r3, [pc, #216]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a73c:	4a36      	ldr	r2, [pc, #216]	; (800a818 <HAL_UART_MspInit+0x198>)
 800a73e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800a740:	4b34      	ldr	r3, [pc, #208]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a746:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a748:	4b32      	ldr	r3, [pc, #200]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a74e:	4b31      	ldr	r3, [pc, #196]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a750:	2200      	movs	r2, #0
 800a752:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a754:	4b2f      	ldr	r3, [pc, #188]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a75a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a75c:	4b2d      	ldr	r3, [pc, #180]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a75e:	2200      	movs	r2, #0
 800a760:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a762:	4b2c      	ldr	r3, [pc, #176]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a764:	2200      	movs	r2, #0
 800a766:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800a768:	4b2a      	ldr	r3, [pc, #168]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a76e:	4b29      	ldr	r3, [pc, #164]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a770:	2200      	movs	r2, #0
 800a772:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a774:	4b27      	ldr	r3, [pc, #156]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a776:	2200      	movs	r2, #0
 800a778:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a77a:	4826      	ldr	r0, [pc, #152]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a77c:	f000 fb52 	bl	800ae24 <HAL_DMA_Init>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d001      	beq.n	800a78a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800a786:	f7fb fce9 	bl	800615c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a21      	ldr	r2, [pc, #132]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a78e:	639a      	str	r2, [r3, #56]	; 0x38
 800a790:	4a20      	ldr	r2, [pc, #128]	; (800a814 <HAL_UART_MspInit+0x194>)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a796:	4b21      	ldr	r3, [pc, #132]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a798:	4a21      	ldr	r2, [pc, #132]	; (800a820 <HAL_UART_MspInit+0x1a0>)
 800a79a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a79c:	4b1f      	ldr	r3, [pc, #124]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a79e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a7a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a7a4:	4b1d      	ldr	r3, [pc, #116]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a7a6:	2240      	movs	r2, #64	; 0x40
 800a7a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7aa:	4b1c      	ldr	r3, [pc, #112]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a7b0:	4b1a      	ldr	r3, [pc, #104]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a7b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a7b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a7b8:	4b18      	ldr	r3, [pc, #96]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a7be:	4b17      	ldr	r3, [pc, #92]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a7c4:	4b15      	ldr	r3, [pc, #84]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a7ca:	4b14      	ldr	r3, [pc, #80]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a7d0:	4b12      	ldr	r3, [pc, #72]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a7d6:	4811      	ldr	r0, [pc, #68]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a7d8:	f000 fb24 	bl	800ae24 <HAL_DMA_Init>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800a7e2:	f7fb fcbb 	bl	800615c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a0c      	ldr	r2, [pc, #48]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a7ea:	635a      	str	r2, [r3, #52]	; 0x34
 800a7ec:	4a0b      	ldr	r2, [pc, #44]	; (800a81c <HAL_UART_MspInit+0x19c>)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	2025      	movs	r0, #37	; 0x25
 800a7f8:	f000 fab3 	bl	800ad62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a7fc:	2025      	movs	r0, #37	; 0x25
 800a7fe:	f000 facc 	bl	800ad9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a802:	e09d      	b.n	800a940 <HAL_UART_MspInit+0x2c0>
 800a804:	40011000 	.word	0x40011000
 800a808:	40023800 	.word	0x40023800
 800a80c:	40020000 	.word	0x40020000
 800a810:	40020400 	.word	0x40020400
 800a814:	20000b30 	.word	0x20000b30
 800a818:	40026440 	.word	0x40026440
 800a81c:	20000ad0 	.word	0x20000ad0
 800a820:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a47      	ldr	r2, [pc, #284]	; (800a948 <HAL_UART_MspInit+0x2c8>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	f040 8088 	bne.w	800a940 <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a830:	2300      	movs	r3, #0
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	4b45      	ldr	r3, [pc, #276]	; (800a94c <HAL_UART_MspInit+0x2cc>)
 800a836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a838:	4a44      	ldr	r2, [pc, #272]	; (800a94c <HAL_UART_MspInit+0x2cc>)
 800a83a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a83e:	6413      	str	r3, [r2, #64]	; 0x40
 800a840:	4b42      	ldr	r3, [pc, #264]	; (800a94c <HAL_UART_MspInit+0x2cc>)
 800a842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a848:	60fb      	str	r3, [r7, #12]
 800a84a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a84c:	2300      	movs	r3, #0
 800a84e:	60bb      	str	r3, [r7, #8]
 800a850:	4b3e      	ldr	r3, [pc, #248]	; (800a94c <HAL_UART_MspInit+0x2cc>)
 800a852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a854:	4a3d      	ldr	r2, [pc, #244]	; (800a94c <HAL_UART_MspInit+0x2cc>)
 800a856:	f043 0301 	orr.w	r3, r3, #1
 800a85a:	6313      	str	r3, [r2, #48]	; 0x30
 800a85c:	4b3b      	ldr	r3, [pc, #236]	; (800a94c <HAL_UART_MspInit+0x2cc>)
 800a85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	60bb      	str	r3, [r7, #8]
 800a866:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 800a868:	230c      	movs	r3, #12
 800a86a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a86c:	2302      	movs	r3, #2
 800a86e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a870:	2300      	movs	r3, #0
 800a872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a874:	2303      	movs	r3, #3
 800a876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a878:	2307      	movs	r3, #7
 800a87a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a87c:	f107 031c 	add.w	r3, r7, #28
 800a880:	4619      	mov	r1, r3
 800a882:	4833      	ldr	r0, [pc, #204]	; (800a950 <HAL_UART_MspInit+0x2d0>)
 800a884:	f000 fede 	bl	800b644 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800a888:	4b32      	ldr	r3, [pc, #200]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a88a:	4a33      	ldr	r2, [pc, #204]	; (800a958 <HAL_UART_MspInit+0x2d8>)
 800a88c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800a88e:	4b31      	ldr	r3, [pc, #196]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a890:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a894:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a896:	4b2f      	ldr	r3, [pc, #188]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a898:	2200      	movs	r2, #0
 800a89a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a89c:	4b2d      	ldr	r3, [pc, #180]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a8a2:	4b2c      	ldr	r3, [pc, #176]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a8a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a8a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a8aa:	4b2a      	ldr	r3, [pc, #168]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8b0:	4b28      	ldr	r3, [pc, #160]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800a8b6:	4b27      	ldr	r3, [pc, #156]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a8bc:	4b25      	ldr	r3, [pc, #148]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a8be:	2200      	movs	r2, #0
 800a8c0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a8c2:	4b24      	ldr	r3, [pc, #144]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a8c8:	4822      	ldr	r0, [pc, #136]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a8ca:	f000 faab 	bl	800ae24 <HAL_DMA_Init>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d001      	beq.n	800a8d8 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800a8d4:	f7fb fc42 	bl	800615c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a1e      	ldr	r2, [pc, #120]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a8dc:	639a      	str	r2, [r3, #56]	; 0x38
 800a8de:	4a1d      	ldr	r2, [pc, #116]	; (800a954 <HAL_UART_MspInit+0x2d4>)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800a8e4:	4b1d      	ldr	r3, [pc, #116]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a8e6:	4a1e      	ldr	r2, [pc, #120]	; (800a960 <HAL_UART_MspInit+0x2e0>)
 800a8e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800a8ea:	4b1c      	ldr	r3, [pc, #112]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a8ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a8f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a8f2:	4b1a      	ldr	r3, [pc, #104]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a8f4:	2240      	movs	r2, #64	; 0x40
 800a8f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a8f8:	4b18      	ldr	r3, [pc, #96]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a8fe:	4b17      	ldr	r3, [pc, #92]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a904:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a906:	4b15      	ldr	r3, [pc, #84]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a908:	2200      	movs	r2, #0
 800a90a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a90c:	4b13      	ldr	r3, [pc, #76]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a90e:	2200      	movs	r2, #0
 800a910:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800a912:	4b12      	ldr	r3, [pc, #72]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a914:	2200      	movs	r2, #0
 800a916:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a918:	4b10      	ldr	r3, [pc, #64]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a91a:	2200      	movs	r2, #0
 800a91c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a91e:	4b0f      	ldr	r3, [pc, #60]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a920:	2200      	movs	r2, #0
 800a922:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800a924:	480d      	ldr	r0, [pc, #52]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a926:	f000 fa7d 	bl	800ae24 <HAL_DMA_Init>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d001      	beq.n	800a934 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 800a930:	f7fb fc14 	bl	800615c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a09      	ldr	r2, [pc, #36]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a938:	635a      	str	r2, [r3, #52]	; 0x34
 800a93a:	4a08      	ldr	r2, [pc, #32]	; (800a95c <HAL_UART_MspInit+0x2dc>)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a940:	bf00      	nop
 800a942:	3730      	adds	r7, #48	; 0x30
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	40004400 	.word	0x40004400
 800a94c:	40023800 	.word	0x40023800
 800a950:	40020000 	.word	0x40020000
 800a954:	20000a70 	.word	0x20000a70
 800a958:	40026088 	.word	0x40026088
 800a95c:	20000b90 	.word	0x20000b90
 800a960:	400260a0 	.word	0x400260a0

0800a964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800a964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a99c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a968:	480d      	ldr	r0, [pc, #52]	; (800a9a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a96a:	490e      	ldr	r1, [pc, #56]	; (800a9a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a96c:	4a0e      	ldr	r2, [pc, #56]	; (800a9a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a96e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a970:	e002      	b.n	800a978 <LoopCopyDataInit>

0800a972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a976:	3304      	adds	r3, #4

0800a978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a97a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a97c:	d3f9      	bcc.n	800a972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a97e:	4a0b      	ldr	r2, [pc, #44]	; (800a9ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a980:	4c0b      	ldr	r4, [pc, #44]	; (800a9b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a982:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a984:	e001      	b.n	800a98a <LoopFillZerobss>

0800a986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a988:	3204      	adds	r2, #4

0800a98a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a98a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a98c:	d3fb      	bcc.n	800a986 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a98e:	f7ff fb45 	bl	800a01c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a992:	f006 ff5b 	bl	801184c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a996:	f7fb fa85 	bl	8005ea4 <main>
  bx  lr    
 800a99a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800a99c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a9a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a9a4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 800a9a8:	0802a318 	.word	0x0802a318
  ldr r2, =_sbss
 800a9ac:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800a9b0:	20000c8c 	.word	0x20000c8c

0800a9b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a9b4:	e7fe      	b.n	800a9b4 <ADC_IRQHandler>
	...

0800a9b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a9bc:	4b0e      	ldr	r3, [pc, #56]	; (800a9f8 <HAL_Init+0x40>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a0d      	ldr	r2, [pc, #52]	; (800a9f8 <HAL_Init+0x40>)
 800a9c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a9c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a9c8:	4b0b      	ldr	r3, [pc, #44]	; (800a9f8 <HAL_Init+0x40>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a0a      	ldr	r2, [pc, #40]	; (800a9f8 <HAL_Init+0x40>)
 800a9ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a9d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a9d4:	4b08      	ldr	r3, [pc, #32]	; (800a9f8 <HAL_Init+0x40>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a07      	ldr	r2, [pc, #28]	; (800a9f8 <HAL_Init+0x40>)
 800a9da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a9e0:	2003      	movs	r0, #3
 800a9e2:	f000 f9b3 	bl	800ad4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	f000 f808 	bl	800a9fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a9ec:	f7ff f95e 	bl	8009cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	40023c00 	.word	0x40023c00

0800a9fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800aa04:	4b12      	ldr	r3, [pc, #72]	; (800aa50 <HAL_InitTick+0x54>)
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	4b12      	ldr	r3, [pc, #72]	; (800aa54 <HAL_InitTick+0x58>)
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aa12:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa16:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 f9d9 	bl	800add2 <HAL_SYSTICK_Config>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e00e      	b.n	800aa48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2b0f      	cmp	r3, #15
 800aa2e:	d80a      	bhi.n	800aa46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800aa30:	2200      	movs	r2, #0
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	f04f 30ff 	mov.w	r0, #4294967295
 800aa38:	f000 f993 	bl	800ad62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800aa3c:	4a06      	ldr	r2, [pc, #24]	; (800aa58 <HAL_InitTick+0x5c>)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	e000      	b.n	800aa48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	20000038 	.word	0x20000038
 800aa54:	20000040 	.word	0x20000040
 800aa58:	2000003c 	.word	0x2000003c

0800aa5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800aa60:	4b06      	ldr	r3, [pc, #24]	; (800aa7c <HAL_IncTick+0x20>)
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	461a      	mov	r2, r3
 800aa66:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <HAL_IncTick+0x24>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	4a04      	ldr	r2, [pc, #16]	; (800aa80 <HAL_IncTick+0x24>)
 800aa6e:	6013      	str	r3, [r2, #0]
}
 800aa70:	bf00      	nop
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	20000040 	.word	0x20000040
 800aa80:	20000c78 	.word	0x20000c78

0800aa84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800aa84:	b480      	push	{r7}
 800aa86:	af00      	add	r7, sp, #0
  return uwTick;
 800aa88:	4b03      	ldr	r3, [pc, #12]	; (800aa98 <HAL_GetTick+0x14>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	20000c78 	.word	0x20000c78

0800aa9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aaa4:	f7ff ffee 	bl	800aa84 <HAL_GetTick>
 800aaa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab4:	d005      	beq.n	800aac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aab6:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <HAL_Delay+0x44>)
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4413      	add	r3, r2
 800aac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800aac2:	bf00      	nop
 800aac4:	f7ff ffde 	bl	800aa84 <HAL_GetTick>
 800aac8:	4602      	mov	r2, r0
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d8f7      	bhi.n	800aac4 <HAL_Delay+0x28>
  {
  }
}
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	20000040 	.word	0x20000040

0800aae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f003 0307 	and.w	r3, r3, #7
 800aaf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aaf4:	4b0c      	ldr	r3, [pc, #48]	; (800ab28 <__NVIC_SetPriorityGrouping+0x44>)
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ab00:	4013      	ands	r3, r2
 800ab02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ab0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ab10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ab16:	4a04      	ldr	r2, [pc, #16]	; (800ab28 <__NVIC_SetPriorityGrouping+0x44>)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	60d3      	str	r3, [r2, #12]
}
 800ab1c:	bf00      	nop
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr
 800ab28:	e000ed00 	.word	0xe000ed00

0800ab2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ab30:	4b04      	ldr	r3, [pc, #16]	; (800ab44 <__NVIC_GetPriorityGrouping+0x18>)
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	0a1b      	lsrs	r3, r3, #8
 800ab36:	f003 0307 	and.w	r3, r3, #7
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	e000ed00 	.word	0xe000ed00

0800ab48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	db0b      	blt.n	800ab72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab5a:	79fb      	ldrb	r3, [r7, #7]
 800ab5c:	f003 021f 	and.w	r2, r3, #31
 800ab60:	4907      	ldr	r1, [pc, #28]	; (800ab80 <__NVIC_EnableIRQ+0x38>)
 800ab62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab66:	095b      	lsrs	r3, r3, #5
 800ab68:	2001      	movs	r0, #1
 800ab6a:	fa00 f202 	lsl.w	r2, r0, r2
 800ab6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ab72:	bf00      	nop
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	e000e100 	.word	0xe000e100

0800ab84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	db12      	blt.n	800abbc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab96:	79fb      	ldrb	r3, [r7, #7]
 800ab98:	f003 021f 	and.w	r2, r3, #31
 800ab9c:	490a      	ldr	r1, [pc, #40]	; (800abc8 <__NVIC_DisableIRQ+0x44>)
 800ab9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aba2:	095b      	lsrs	r3, r3, #5
 800aba4:	2001      	movs	r0, #1
 800aba6:	fa00 f202 	lsl.w	r2, r0, r2
 800abaa:	3320      	adds	r3, #32
 800abac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800abb0:	f3bf 8f4f 	dsb	sy
}
 800abb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800abb6:	f3bf 8f6f 	isb	sy
}
 800abba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	e000e100 	.word	0xe000e100

0800abcc <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	4603      	mov	r3, r0
 800abd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	db0e      	blt.n	800abfc <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800abde:	4a0b      	ldr	r2, [pc, #44]	; (800ac0c <__NVIC_GetPendingIRQ+0x40>)
 800abe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abe4:	095b      	lsrs	r3, r3, #5
 800abe6:	3340      	adds	r3, #64	; 0x40
 800abe8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800abec:	79fb      	ldrb	r3, [r7, #7]
 800abee:	f003 031f 	and.w	r3, r3, #31
 800abf2:	fa22 f303 	lsr.w	r3, r2, r3
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	e000      	b.n	800abfe <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800abfc:	2300      	movs	r3, #0
  }
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	370c      	adds	r7, #12
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	e000e100 	.word	0xe000e100

0800ac10 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	db0c      	blt.n	800ac3c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac22:	79fb      	ldrb	r3, [r7, #7]
 800ac24:	f003 021f 	and.w	r2, r3, #31
 800ac28:	4907      	ldr	r1, [pc, #28]	; (800ac48 <__NVIC_ClearPendingIRQ+0x38>)
 800ac2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac2e:	095b      	lsrs	r3, r3, #5
 800ac30:	2001      	movs	r0, #1
 800ac32:	fa00 f202 	lsl.w	r2, r0, r2
 800ac36:	3360      	adds	r3, #96	; 0x60
 800ac38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	e000e100 	.word	0xe000e100

0800ac4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	6039      	str	r1, [r7, #0]
 800ac56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	db0a      	blt.n	800ac76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	490c      	ldr	r1, [pc, #48]	; (800ac98 <__NVIC_SetPriority+0x4c>)
 800ac66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac6a:	0112      	lsls	r2, r2, #4
 800ac6c:	b2d2      	uxtb	r2, r2
 800ac6e:	440b      	add	r3, r1
 800ac70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ac74:	e00a      	b.n	800ac8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	4908      	ldr	r1, [pc, #32]	; (800ac9c <__NVIC_SetPriority+0x50>)
 800ac7c:	79fb      	ldrb	r3, [r7, #7]
 800ac7e:	f003 030f 	and.w	r3, r3, #15
 800ac82:	3b04      	subs	r3, #4
 800ac84:	0112      	lsls	r2, r2, #4
 800ac86:	b2d2      	uxtb	r2, r2
 800ac88:	440b      	add	r3, r1
 800ac8a:	761a      	strb	r2, [r3, #24]
}
 800ac8c:	bf00      	nop
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr
 800ac98:	e000e100 	.word	0xe000e100
 800ac9c:	e000ed00 	.word	0xe000ed00

0800aca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b089      	sub	sp, #36	; 0x24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f003 0307 	and.w	r3, r3, #7
 800acb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	f1c3 0307 	rsb	r3, r3, #7
 800acba:	2b04      	cmp	r3, #4
 800acbc:	bf28      	it	cs
 800acbe:	2304      	movcs	r3, #4
 800acc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	3304      	adds	r3, #4
 800acc6:	2b06      	cmp	r3, #6
 800acc8:	d902      	bls.n	800acd0 <NVIC_EncodePriority+0x30>
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	3b03      	subs	r3, #3
 800acce:	e000      	b.n	800acd2 <NVIC_EncodePriority+0x32>
 800acd0:	2300      	movs	r3, #0
 800acd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acd4:	f04f 32ff 	mov.w	r2, #4294967295
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	fa02 f303 	lsl.w	r3, r2, r3
 800acde:	43da      	mvns	r2, r3
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	401a      	ands	r2, r3
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ace8:	f04f 31ff 	mov.w	r1, #4294967295
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	fa01 f303 	lsl.w	r3, r1, r3
 800acf2:	43d9      	mvns	r1, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acf8:	4313      	orrs	r3, r2
         );
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3724      	adds	r7, #36	; 0x24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3b01      	subs	r3, #1
 800ad14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad18:	d301      	bcc.n	800ad1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e00f      	b.n	800ad3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad1e:	4a0a      	ldr	r2, [pc, #40]	; (800ad48 <SysTick_Config+0x40>)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ad26:	210f      	movs	r1, #15
 800ad28:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2c:	f7ff ff8e 	bl	800ac4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad30:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <SysTick_Config+0x40>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad36:	4b04      	ldr	r3, [pc, #16]	; (800ad48 <SysTick_Config+0x40>)
 800ad38:	2207      	movs	r2, #7
 800ad3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	e000e010 	.word	0xe000e010

0800ad4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff fec5 	bl	800aae4 <__NVIC_SetPriorityGrouping>
}
 800ad5a:	bf00      	nop
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b086      	sub	sp, #24
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	4603      	mov	r3, r0
 800ad6a:	60b9      	str	r1, [r7, #8]
 800ad6c:	607a      	str	r2, [r7, #4]
 800ad6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ad74:	f7ff feda 	bl	800ab2c <__NVIC_GetPriorityGrouping>
 800ad78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	68b9      	ldr	r1, [r7, #8]
 800ad7e:	6978      	ldr	r0, [r7, #20]
 800ad80:	f7ff ff8e 	bl	800aca0 <NVIC_EncodePriority>
 800ad84:	4602      	mov	r2, r0
 800ad86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7ff ff5d 	bl	800ac4c <__NVIC_SetPriority>
}
 800ad92:	bf00      	nop
 800ad94:	3718      	adds	r7, #24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b082      	sub	sp, #8
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	4603      	mov	r3, r0
 800ada2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ada4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff fecd 	bl	800ab48 <__NVIC_EnableIRQ>
}
 800adae:	bf00      	nop
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b082      	sub	sp, #8
 800adba:	af00      	add	r7, sp, #0
 800adbc:	4603      	mov	r3, r0
 800adbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800adc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff fedd 	bl	800ab84 <__NVIC_DisableIRQ>
}
 800adca:	bf00      	nop
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b082      	sub	sp, #8
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7ff ff94 	bl	800ad08 <SysTick_Config>
 800ade0:	4603      	mov	r3, r0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b082      	sub	sp, #8
 800adee:	af00      	add	r7, sp, #0
 800adf0:	4603      	mov	r3, r0
 800adf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800adf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff fee7 	bl	800abcc <__NVIC_GetPendingIRQ>
 800adfe:	4603      	mov	r3, r0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	4603      	mov	r3, r0
 800ae10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800ae12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7ff fefa 	bl	800ac10 <__NVIC_ClearPendingIRQ>
}
 800ae1c:	bf00      	nop
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800ae30:	f7ff fe28 	bl	800aa84 <HAL_GetTick>
 800ae34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d101      	bne.n	800ae40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e099      	b.n	800af74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2202      	movs	r2, #2
 800ae44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f022 0201 	bic.w	r2, r2, #1
 800ae5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ae60:	e00f      	b.n	800ae82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ae62:	f7ff fe0f 	bl	800aa84 <HAL_GetTick>
 800ae66:	4602      	mov	r2, r0
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	2b05      	cmp	r3, #5
 800ae6e:	d908      	bls.n	800ae82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2220      	movs	r2, #32
 800ae74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2203      	movs	r2, #3
 800ae7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e078      	b.n	800af74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1e8      	bne.n	800ae62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	4b38      	ldr	r3, [pc, #224]	; (800af7c <HAL_DMA_Init+0x158>)
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aeae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aeba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a1b      	ldr	r3, [r3, #32]
 800aecc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed8:	2b04      	cmp	r3, #4
 800aeda:	d107      	bne.n	800aeec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee4:	4313      	orrs	r3, r2
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	f023 0307 	bic.w	r3, r3, #7
 800af02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af12:	2b04      	cmp	r3, #4
 800af14:	d117      	bne.n	800af46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00e      	beq.n	800af46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fb0f 	bl	800b54c <DMA_CheckFifoParam>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d008      	beq.n	800af46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2240      	movs	r2, #64	; 0x40
 800af38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800af42:	2301      	movs	r3, #1
 800af44:	e016      	b.n	800af74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fac6 	bl	800b4e0 <DMA_CalcBaseAndBitshift>
 800af54:	4603      	mov	r3, r0
 800af56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af5c:	223f      	movs	r2, #63	; 0x3f
 800af5e:	409a      	lsls	r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3718      	adds	r7, #24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	f010803f 	.word	0xf010803f

0800af80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d101      	bne.n	800afa6 <HAL_DMA_Start_IT+0x26>
 800afa2:	2302      	movs	r3, #2
 800afa4:	e040      	b.n	800b028 <HAL_DMA_Start_IT+0xa8>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d12f      	bne.n	800b01a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2202      	movs	r2, #2
 800afbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	68b9      	ldr	r1, [r7, #8]
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f000 fa58 	bl	800b484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afd8:	223f      	movs	r2, #63	; 0x3f
 800afda:	409a      	lsls	r2, r3
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f042 0216 	orr.w	r2, r2, #22
 800afee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d007      	beq.n	800b008 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f042 0208 	orr.w	r2, r2, #8
 800b006:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f042 0201 	orr.w	r2, r2, #1
 800b016:	601a      	str	r2, [r3, #0]
 800b018:	e005      	b.n	800b026 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b022:	2302      	movs	r3, #2
 800b024:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b026:	7dfb      	ldrb	r3, [r7, #23]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3718      	adds	r7, #24
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b03c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b03e:	f7ff fd21 	bl	800aa84 <HAL_GetTick>
 800b042:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d008      	beq.n	800b062 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2280      	movs	r2, #128	; 0x80
 800b054:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e052      	b.n	800b108 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f022 0216 	bic.w	r2, r2, #22
 800b070:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	695a      	ldr	r2, [r3, #20]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b080:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b086:	2b00      	cmp	r3, #0
 800b088:	d103      	bne.n	800b092 <HAL_DMA_Abort+0x62>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d007      	beq.n	800b0a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f022 0208 	bic.w	r2, r2, #8
 800b0a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f022 0201 	bic.w	r2, r2, #1
 800b0b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b0b2:	e013      	b.n	800b0dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b0b4:	f7ff fce6 	bl	800aa84 <HAL_GetTick>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	2b05      	cmp	r3, #5
 800b0c0:	d90c      	bls.n	800b0dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2220      	movs	r2, #32
 800b0c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2203      	movs	r2, #3
 800b0cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	e015      	b.n	800b108 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f003 0301 	and.w	r3, r3, #1
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1e4      	bne.n	800b0b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0ee:	223f      	movs	r2, #63	; 0x3f
 800b0f0:	409a      	lsls	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b02      	cmp	r3, #2
 800b122:	d004      	beq.n	800b12e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2280      	movs	r2, #128	; 0x80
 800b128:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e00c      	b.n	800b148 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2205      	movs	r2, #5
 800b132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f022 0201 	bic.w	r2, r2, #1
 800b144:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b15c:	2300      	movs	r3, #0
 800b15e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b160:	4b92      	ldr	r3, [pc, #584]	; (800b3ac <HAL_DMA_IRQHandler+0x258>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a92      	ldr	r2, [pc, #584]	; (800b3b0 <HAL_DMA_IRQHandler+0x25c>)
 800b166:	fba2 2303 	umull	r2, r3, r2, r3
 800b16a:	0a9b      	lsrs	r3, r3, #10
 800b16c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b17e:	2208      	movs	r2, #8
 800b180:	409a      	lsls	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	4013      	ands	r3, r2
 800b186:	2b00      	cmp	r3, #0
 800b188:	d01a      	beq.n	800b1c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 0304 	and.w	r3, r3, #4
 800b194:	2b00      	cmp	r3, #0
 800b196:	d013      	beq.n	800b1c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f022 0204 	bic.w	r2, r2, #4
 800b1a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1ac:	2208      	movs	r2, #8
 800b1ae:	409a      	lsls	r2, r3
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b8:	f043 0201 	orr.w	r2, r3, #1
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	409a      	lsls	r2, r3
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d012      	beq.n	800b1f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	695b      	ldr	r3, [r3, #20]
 800b1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00b      	beq.n	800b1f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	409a      	lsls	r2, r3
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ee:	f043 0202 	orr.w	r2, r3, #2
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1fa:	2204      	movs	r2, #4
 800b1fc:	409a      	lsls	r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	4013      	ands	r3, r2
 800b202:	2b00      	cmp	r3, #0
 800b204:	d012      	beq.n	800b22c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0302 	and.w	r3, r3, #2
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00b      	beq.n	800b22c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b218:	2204      	movs	r2, #4
 800b21a:	409a      	lsls	r2, r3
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b224:	f043 0204 	orr.w	r2, r3, #4
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b230:	2210      	movs	r2, #16
 800b232:	409a      	lsls	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	4013      	ands	r3, r2
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d043      	beq.n	800b2c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f003 0308 	and.w	r3, r3, #8
 800b246:	2b00      	cmp	r3, #0
 800b248:	d03c      	beq.n	800b2c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b24e:	2210      	movs	r2, #16
 800b250:	409a      	lsls	r2, r3
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b260:	2b00      	cmp	r3, #0
 800b262:	d018      	beq.n	800b296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d108      	bne.n	800b284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b276:	2b00      	cmp	r3, #0
 800b278:	d024      	beq.n	800b2c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	4798      	blx	r3
 800b282:	e01f      	b.n	800b2c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d01b      	beq.n	800b2c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	4798      	blx	r3
 800b294:	e016      	b.n	800b2c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d107      	bne.n	800b2b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f022 0208 	bic.w	r2, r2, #8
 800b2b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d003      	beq.n	800b2c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2c8:	2220      	movs	r2, #32
 800b2ca:	409a      	lsls	r2, r3
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 808e 	beq.w	800b3f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 0310 	and.w	r3, r3, #16
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f000 8086 	beq.w	800b3f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ea:	2220      	movs	r2, #32
 800b2ec:	409a      	lsls	r2, r3
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	2b05      	cmp	r3, #5
 800b2fc:	d136      	bne.n	800b36c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f022 0216 	bic.w	r2, r2, #22
 800b30c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	695a      	ldr	r2, [r3, #20]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b31c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b322:	2b00      	cmp	r3, #0
 800b324:	d103      	bne.n	800b32e <HAL_DMA_IRQHandler+0x1da>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d007      	beq.n	800b33e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f022 0208 	bic.w	r2, r2, #8
 800b33c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b342:	223f      	movs	r2, #63	; 0x3f
 800b344:	409a      	lsls	r2, r3
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d07d      	beq.n	800b45e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	4798      	blx	r3
        }
        return;
 800b36a:	e078      	b.n	800b45e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b376:	2b00      	cmp	r3, #0
 800b378:	d01c      	beq.n	800b3b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d108      	bne.n	800b39a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d030      	beq.n	800b3f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	4798      	blx	r3
 800b398:	e02b      	b.n	800b3f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d027      	beq.n	800b3f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	4798      	blx	r3
 800b3aa:	e022      	b.n	800b3f2 <HAL_DMA_IRQHandler+0x29e>
 800b3ac:	20000038 	.word	0x20000038
 800b3b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10f      	bne.n	800b3e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f022 0210 	bic.w	r2, r2, #16
 800b3d0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d003      	beq.n	800b3f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d032      	beq.n	800b460 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	2b00      	cmp	r3, #0
 800b404:	d022      	beq.n	800b44c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2205      	movs	r2, #5
 800b40a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f022 0201 	bic.w	r2, r2, #1
 800b41c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	3301      	adds	r3, #1
 800b422:	60bb      	str	r3, [r7, #8]
 800b424:	697a      	ldr	r2, [r7, #20]
 800b426:	429a      	cmp	r2, r3
 800b428:	d307      	bcc.n	800b43a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 0301 	and.w	r3, r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1f2      	bne.n	800b41e <HAL_DMA_IRQHandler+0x2ca>
 800b438:	e000      	b.n	800b43c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b43a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d005      	beq.n	800b460 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	4798      	blx	r3
 800b45c:	e000      	b.n	800b460 <HAL_DMA_IRQHandler+0x30c>
        return;
 800b45e:	bf00      	nop
    }
  }
}
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop

0800b468 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b476:	b2db      	uxtb	r3, r3
}
 800b478:	4618      	mov	r0, r3
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
 800b490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b4a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	2b40      	cmp	r3, #64	; 0x40
 800b4b0:	d108      	bne.n	800b4c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b4c2:	e007      	b.n	800b4d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	60da      	str	r2, [r3, #12]
}
 800b4d4:	bf00      	nop
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	3b10      	subs	r3, #16
 800b4f0:	4a14      	ldr	r2, [pc, #80]	; (800b544 <DMA_CalcBaseAndBitshift+0x64>)
 800b4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f6:	091b      	lsrs	r3, r3, #4
 800b4f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b4fa:	4a13      	ldr	r2, [pc, #76]	; (800b548 <DMA_CalcBaseAndBitshift+0x68>)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4413      	add	r3, r2
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	461a      	mov	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2b03      	cmp	r3, #3
 800b50c:	d909      	bls.n	800b522 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b516:	f023 0303 	bic.w	r3, r3, #3
 800b51a:	1d1a      	adds	r2, r3, #4
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	659a      	str	r2, [r3, #88]	; 0x58
 800b520:	e007      	b.n	800b532 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b52a:	f023 0303 	bic.w	r3, r3, #3
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b536:	4618      	mov	r0, r3
 800b538:	3714      	adds	r7, #20
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	aaaaaaab 	.word	0xaaaaaaab
 800b548:	08029df0 	.word	0x08029df0

0800b54c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b55c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	699b      	ldr	r3, [r3, #24]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d11f      	bne.n	800b5a6 <DMA_CheckFifoParam+0x5a>
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d856      	bhi.n	800b61a <DMA_CheckFifoParam+0xce>
 800b56c:	a201      	add	r2, pc, #4	; (adr r2, 800b574 <DMA_CheckFifoParam+0x28>)
 800b56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b572:	bf00      	nop
 800b574:	0800b585 	.word	0x0800b585
 800b578:	0800b597 	.word	0x0800b597
 800b57c:	0800b585 	.word	0x0800b585
 800b580:	0800b61b 	.word	0x0800b61b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d046      	beq.n	800b61e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b594:	e043      	b.n	800b61e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b59e:	d140      	bne.n	800b622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b5a4:	e03d      	b.n	800b622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ae:	d121      	bne.n	800b5f4 <DMA_CheckFifoParam+0xa8>
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	d837      	bhi.n	800b626 <DMA_CheckFifoParam+0xda>
 800b5b6:	a201      	add	r2, pc, #4	; (adr r2, 800b5bc <DMA_CheckFifoParam+0x70>)
 800b5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5bc:	0800b5cd 	.word	0x0800b5cd
 800b5c0:	0800b5d3 	.word	0x0800b5d3
 800b5c4:	0800b5cd 	.word	0x0800b5cd
 800b5c8:	0800b5e5 	.word	0x0800b5e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b5d0:	e030      	b.n	800b634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d025      	beq.n	800b62a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b5e2:	e022      	b.n	800b62a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b5ec:	d11f      	bne.n	800b62e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b5f2:	e01c      	b.n	800b62e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d903      	bls.n	800b602 <DMA_CheckFifoParam+0xb6>
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	2b03      	cmp	r3, #3
 800b5fe:	d003      	beq.n	800b608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b600:	e018      	b.n	800b634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	73fb      	strb	r3, [r7, #15]
      break;
 800b606:	e015      	b.n	800b634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00e      	beq.n	800b632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	73fb      	strb	r3, [r7, #15]
      break;
 800b618:	e00b      	b.n	800b632 <DMA_CheckFifoParam+0xe6>
      break;
 800b61a:	bf00      	nop
 800b61c:	e00a      	b.n	800b634 <DMA_CheckFifoParam+0xe8>
      break;
 800b61e:	bf00      	nop
 800b620:	e008      	b.n	800b634 <DMA_CheckFifoParam+0xe8>
      break;
 800b622:	bf00      	nop
 800b624:	e006      	b.n	800b634 <DMA_CheckFifoParam+0xe8>
      break;
 800b626:	bf00      	nop
 800b628:	e004      	b.n	800b634 <DMA_CheckFifoParam+0xe8>
      break;
 800b62a:	bf00      	nop
 800b62c:	e002      	b.n	800b634 <DMA_CheckFifoParam+0xe8>
      break;   
 800b62e:	bf00      	nop
 800b630:	e000      	b.n	800b634 <DMA_CheckFifoParam+0xe8>
      break;
 800b632:	bf00      	nop
    }
  } 
  
  return status; 
 800b634:	7bfb      	ldrb	r3, [r7, #15]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop

0800b644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b644:	b480      	push	{r7}
 800b646:	b089      	sub	sp, #36	; 0x24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b64e:	2300      	movs	r3, #0
 800b650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b652:	2300      	movs	r3, #0
 800b654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b656:	2300      	movs	r3, #0
 800b658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b65a:	2300      	movs	r3, #0
 800b65c:	61fb      	str	r3, [r7, #28]
 800b65e:	e159      	b.n	800b914 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b660:	2201      	movs	r2, #1
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	fa02 f303 	lsl.w	r3, r2, r3
 800b668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	4013      	ands	r3, r2
 800b672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b674:	693a      	ldr	r2, [r7, #16]
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	429a      	cmp	r2, r3
 800b67a:	f040 8148 	bne.w	800b90e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f003 0303 	and.w	r3, r3, #3
 800b686:	2b01      	cmp	r3, #1
 800b688:	d005      	beq.n	800b696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b692:	2b02      	cmp	r3, #2
 800b694:	d130      	bne.n	800b6f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	2203      	movs	r2, #3
 800b6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6a6:	43db      	mvns	r3, r3
 800b6a8:	69ba      	ldr	r2, [r7, #24]
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	68da      	ldr	r2, [r3, #12]
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	005b      	lsls	r3, r3, #1
 800b6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ba:	69ba      	ldr	r2, [r7, #24]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	69ba      	ldr	r2, [r7, #24]
 800b6c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d4:	43db      	mvns	r3, r3
 800b6d6:	69ba      	ldr	r2, [r7, #24]
 800b6d8:	4013      	ands	r3, r2
 800b6da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	091b      	lsrs	r3, r3, #4
 800b6e2:	f003 0201 	and.w	r2, r3, #1
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ec:	69ba      	ldr	r2, [r7, #24]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	69ba      	ldr	r2, [r7, #24]
 800b6f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	f003 0303 	and.w	r3, r3, #3
 800b700:	2b03      	cmp	r3, #3
 800b702:	d017      	beq.n	800b734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	005b      	lsls	r3, r3, #1
 800b70e:	2203      	movs	r2, #3
 800b710:	fa02 f303 	lsl.w	r3, r2, r3
 800b714:	43db      	mvns	r3, r3
 800b716:	69ba      	ldr	r2, [r7, #24]
 800b718:	4013      	ands	r3, r2
 800b71a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	689a      	ldr	r2, [r3, #8]
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	005b      	lsls	r3, r3, #1
 800b724:	fa02 f303 	lsl.w	r3, r2, r3
 800b728:	69ba      	ldr	r2, [r7, #24]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	69ba      	ldr	r2, [r7, #24]
 800b732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	f003 0303 	and.w	r3, r3, #3
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d123      	bne.n	800b788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	08da      	lsrs	r2, r3, #3
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	3208      	adds	r2, #8
 800b748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	f003 0307 	and.w	r3, r3, #7
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	220f      	movs	r2, #15
 800b758:	fa02 f303 	lsl.w	r3, r2, r3
 800b75c:	43db      	mvns	r3, r3
 800b75e:	69ba      	ldr	r2, [r7, #24]
 800b760:	4013      	ands	r3, r2
 800b762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	691a      	ldr	r2, [r3, #16]
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	f003 0307 	and.w	r3, r3, #7
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	fa02 f303 	lsl.w	r3, r2, r3
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	4313      	orrs	r3, r2
 800b778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	08da      	lsrs	r2, r3, #3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3208      	adds	r2, #8
 800b782:	69b9      	ldr	r1, [r7, #24]
 800b784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	005b      	lsls	r3, r3, #1
 800b792:	2203      	movs	r2, #3
 800b794:	fa02 f303 	lsl.w	r3, r2, r3
 800b798:	43db      	mvns	r3, r3
 800b79a:	69ba      	ldr	r2, [r7, #24]
 800b79c:	4013      	ands	r3, r2
 800b79e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f003 0203 	and.w	r2, r3, #3
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b0:	69ba      	ldr	r2, [r7, #24]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	69ba      	ldr	r2, [r7, #24]
 800b7ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f000 80a2 	beq.w	800b90e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	4b57      	ldr	r3, [pc, #348]	; (800b92c <HAL_GPIO_Init+0x2e8>)
 800b7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7d2:	4a56      	ldr	r2, [pc, #344]	; (800b92c <HAL_GPIO_Init+0x2e8>)
 800b7d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b7d8:	6453      	str	r3, [r2, #68]	; 0x44
 800b7da:	4b54      	ldr	r3, [pc, #336]	; (800b92c <HAL_GPIO_Init+0x2e8>)
 800b7dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7e2:	60fb      	str	r3, [r7, #12]
 800b7e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b7e6:	4a52      	ldr	r2, [pc, #328]	; (800b930 <HAL_GPIO_Init+0x2ec>)
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	089b      	lsrs	r3, r3, #2
 800b7ec:	3302      	adds	r3, #2
 800b7ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	f003 0303 	and.w	r3, r3, #3
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	220f      	movs	r2, #15
 800b7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b802:	43db      	mvns	r3, r3
 800b804:	69ba      	ldr	r2, [r7, #24]
 800b806:	4013      	ands	r3, r2
 800b808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a49      	ldr	r2, [pc, #292]	; (800b934 <HAL_GPIO_Init+0x2f0>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d019      	beq.n	800b846 <HAL_GPIO_Init+0x202>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a48      	ldr	r2, [pc, #288]	; (800b938 <HAL_GPIO_Init+0x2f4>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d013      	beq.n	800b842 <HAL_GPIO_Init+0x1fe>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a47      	ldr	r2, [pc, #284]	; (800b93c <HAL_GPIO_Init+0x2f8>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d00d      	beq.n	800b83e <HAL_GPIO_Init+0x1fa>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a46      	ldr	r2, [pc, #280]	; (800b940 <HAL_GPIO_Init+0x2fc>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d007      	beq.n	800b83a <HAL_GPIO_Init+0x1f6>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a45      	ldr	r2, [pc, #276]	; (800b944 <HAL_GPIO_Init+0x300>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d101      	bne.n	800b836 <HAL_GPIO_Init+0x1f2>
 800b832:	2304      	movs	r3, #4
 800b834:	e008      	b.n	800b848 <HAL_GPIO_Init+0x204>
 800b836:	2307      	movs	r3, #7
 800b838:	e006      	b.n	800b848 <HAL_GPIO_Init+0x204>
 800b83a:	2303      	movs	r3, #3
 800b83c:	e004      	b.n	800b848 <HAL_GPIO_Init+0x204>
 800b83e:	2302      	movs	r3, #2
 800b840:	e002      	b.n	800b848 <HAL_GPIO_Init+0x204>
 800b842:	2301      	movs	r3, #1
 800b844:	e000      	b.n	800b848 <HAL_GPIO_Init+0x204>
 800b846:	2300      	movs	r3, #0
 800b848:	69fa      	ldr	r2, [r7, #28]
 800b84a:	f002 0203 	and.w	r2, r2, #3
 800b84e:	0092      	lsls	r2, r2, #2
 800b850:	4093      	lsls	r3, r2
 800b852:	69ba      	ldr	r2, [r7, #24]
 800b854:	4313      	orrs	r3, r2
 800b856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b858:	4935      	ldr	r1, [pc, #212]	; (800b930 <HAL_GPIO_Init+0x2ec>)
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	089b      	lsrs	r3, r3, #2
 800b85e:	3302      	adds	r3, #2
 800b860:	69ba      	ldr	r2, [r7, #24]
 800b862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b866:	4b38      	ldr	r3, [pc, #224]	; (800b948 <HAL_GPIO_Init+0x304>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	43db      	mvns	r3, r3
 800b870:	69ba      	ldr	r2, [r7, #24]
 800b872:	4013      	ands	r3, r2
 800b874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d003      	beq.n	800b88a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800b882:	69ba      	ldr	r2, [r7, #24]
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	4313      	orrs	r3, r2
 800b888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b88a:	4a2f      	ldr	r2, [pc, #188]	; (800b948 <HAL_GPIO_Init+0x304>)
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b890:	4b2d      	ldr	r3, [pc, #180]	; (800b948 <HAL_GPIO_Init+0x304>)
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	43db      	mvns	r3, r3
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	4013      	ands	r3, r2
 800b89e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d003      	beq.n	800b8b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800b8ac:	69ba      	ldr	r2, [r7, #24]
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b8b4:	4a24      	ldr	r2, [pc, #144]	; (800b948 <HAL_GPIO_Init+0x304>)
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b8ba:	4b23      	ldr	r3, [pc, #140]	; (800b948 <HAL_GPIO_Init+0x304>)
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	43db      	mvns	r3, r3
 800b8c4:	69ba      	ldr	r2, [r7, #24]
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d003      	beq.n	800b8de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b8de:	4a1a      	ldr	r2, [pc, #104]	; (800b948 <HAL_GPIO_Init+0x304>)
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b8e4:	4b18      	ldr	r3, [pc, #96]	; (800b948 <HAL_GPIO_Init+0x304>)
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	43db      	mvns	r3, r3
 800b8ee:	69ba      	ldr	r2, [r7, #24]
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d003      	beq.n	800b908 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800b900:	69ba      	ldr	r2, [r7, #24]
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	4313      	orrs	r3, r2
 800b906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b908:	4a0f      	ldr	r2, [pc, #60]	; (800b948 <HAL_GPIO_Init+0x304>)
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	3301      	adds	r3, #1
 800b912:	61fb      	str	r3, [r7, #28]
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	2b0f      	cmp	r3, #15
 800b918:	f67f aea2 	bls.w	800b660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b91c:	bf00      	nop
 800b91e:	bf00      	nop
 800b920:	3724      	adds	r7, #36	; 0x24
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	40023800 	.word	0x40023800
 800b930:	40013800 	.word	0x40013800
 800b934:	40020000 	.word	0x40020000
 800b938:	40020400 	.word	0x40020400
 800b93c:	40020800 	.word	0x40020800
 800b940:	40020c00 	.word	0x40020c00
 800b944:	40021000 	.word	0x40021000
 800b948:	40013c00 	.word	0x40013c00

0800b94c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	460b      	mov	r3, r1
 800b956:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	691a      	ldr	r2, [r3, #16]
 800b95c:	887b      	ldrh	r3, [r7, #2]
 800b95e:	4013      	ands	r3, r2
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b964:	2301      	movs	r3, #1
 800b966:	73fb      	strb	r3, [r7, #15]
 800b968:	e001      	b.n	800b96e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b96a:	2300      	movs	r3, #0
 800b96c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	460b      	mov	r3, r1
 800b986:	807b      	strh	r3, [r7, #2]
 800b988:	4613      	mov	r3, r2
 800b98a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b98c:	787b      	ldrb	r3, [r7, #1]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d003      	beq.n	800b99a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b992:	887a      	ldrh	r2, [r7, #2]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b998:	e003      	b.n	800b9a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b99a:	887b      	ldrh	r3, [r7, #2]
 800b99c:	041a      	lsls	r2, r3, #16
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	619a      	str	r2, [r3, #24]
}
 800b9a2:	bf00      	nop
 800b9a4:	370c      	adds	r7, #12
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b085      	sub	sp, #20
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	695b      	ldr	r3, [r3, #20]
 800b9be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b9c0:	887a      	ldrh	r2, [r7, #2]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	041a      	lsls	r2, r3, #16
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	43d9      	mvns	r1, r3
 800b9cc:	887b      	ldrh	r3, [r7, #2]
 800b9ce:	400b      	ands	r3, r1
 800b9d0:	431a      	orrs	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	619a      	str	r2, [r3, #24]
}
 800b9d6:	bf00      	nop
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
	...

0800b9e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b9ee:	4b08      	ldr	r3, [pc, #32]	; (800ba10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b9f0:	695a      	ldr	r2, [r3, #20]
 800b9f2:	88fb      	ldrh	r3, [r7, #6]
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d006      	beq.n	800ba08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b9fa:	4a05      	ldr	r2, [pc, #20]	; (800ba10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b9fc:	88fb      	ldrh	r3, [r7, #6]
 800b9fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ba00:	88fb      	ldrh	r3, [r7, #6]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fa fb96 	bl	8006134 <HAL_GPIO_EXTI_Callback>
  }
}
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	40013c00 	.word	0x40013c00

0800ba14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d101      	bne.n	800ba26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	e12b      	b.n	800bc7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d106      	bne.n	800ba40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f7fa f928 	bl	8005c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2224      	movs	r2, #36	; 0x24
 800ba44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f022 0201 	bic.w	r2, r2, #1
 800ba56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ba76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ba78:	f003 fcf0 	bl	800f45c <HAL_RCC_GetPCLK1Freq>
 800ba7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	4a81      	ldr	r2, [pc, #516]	; (800bc88 <HAL_I2C_Init+0x274>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d807      	bhi.n	800ba98 <HAL_I2C_Init+0x84>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	4a80      	ldr	r2, [pc, #512]	; (800bc8c <HAL_I2C_Init+0x278>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	bf94      	ite	ls
 800ba90:	2301      	movls	r3, #1
 800ba92:	2300      	movhi	r3, #0
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	e006      	b.n	800baa6 <HAL_I2C_Init+0x92>
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	4a7d      	ldr	r2, [pc, #500]	; (800bc90 <HAL_I2C_Init+0x27c>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	bf94      	ite	ls
 800baa0:	2301      	movls	r3, #1
 800baa2:	2300      	movhi	r3, #0
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	e0e7      	b.n	800bc7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	4a78      	ldr	r2, [pc, #480]	; (800bc94 <HAL_I2C_Init+0x280>)
 800bab2:	fba2 2303 	umull	r2, r3, r2, r3
 800bab6:	0c9b      	lsrs	r3, r3, #18
 800bab8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	430a      	orrs	r2, r1
 800bacc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	6a1b      	ldr	r3, [r3, #32]
 800bad4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	4a6a      	ldr	r2, [pc, #424]	; (800bc88 <HAL_I2C_Init+0x274>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d802      	bhi.n	800bae8 <HAL_I2C_Init+0xd4>
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	3301      	adds	r3, #1
 800bae6:	e009      	b.n	800bafc <HAL_I2C_Init+0xe8>
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800baee:	fb02 f303 	mul.w	r3, r2, r3
 800baf2:	4a69      	ldr	r2, [pc, #420]	; (800bc98 <HAL_I2C_Init+0x284>)
 800baf4:	fba2 2303 	umull	r2, r3, r2, r3
 800baf8:	099b      	lsrs	r3, r3, #6
 800bafa:	3301      	adds	r3, #1
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	6812      	ldr	r2, [r2, #0]
 800bb00:	430b      	orrs	r3, r1
 800bb02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	69db      	ldr	r3, [r3, #28]
 800bb0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800bb0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	495c      	ldr	r1, [pc, #368]	; (800bc88 <HAL_I2C_Init+0x274>)
 800bb18:	428b      	cmp	r3, r1
 800bb1a:	d819      	bhi.n	800bb50 <HAL_I2C_Init+0x13c>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	1e59      	subs	r1, r3, #1
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	fbb1 f3f3 	udiv	r3, r1, r3
 800bb2a:	1c59      	adds	r1, r3, #1
 800bb2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bb30:	400b      	ands	r3, r1
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00a      	beq.n	800bb4c <HAL_I2C_Init+0x138>
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	1e59      	subs	r1, r3, #1
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	005b      	lsls	r3, r3, #1
 800bb40:	fbb1 f3f3 	udiv	r3, r1, r3
 800bb44:	3301      	adds	r3, #1
 800bb46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb4a:	e051      	b.n	800bbf0 <HAL_I2C_Init+0x1dc>
 800bb4c:	2304      	movs	r3, #4
 800bb4e:	e04f      	b.n	800bbf0 <HAL_I2C_Init+0x1dc>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d111      	bne.n	800bb7c <HAL_I2C_Init+0x168>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	1e58      	subs	r0, r3, #1
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6859      	ldr	r1, [r3, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	005b      	lsls	r3, r3, #1
 800bb64:	440b      	add	r3, r1
 800bb66:	fbb0 f3f3 	udiv	r3, r0, r3
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	bf0c      	ite	eq
 800bb74:	2301      	moveq	r3, #1
 800bb76:	2300      	movne	r3, #0
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	e012      	b.n	800bba2 <HAL_I2C_Init+0x18e>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	1e58      	subs	r0, r3, #1
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6859      	ldr	r1, [r3, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	440b      	add	r3, r1
 800bb8a:	0099      	lsls	r1, r3, #2
 800bb8c:	440b      	add	r3, r1
 800bb8e:	fbb0 f3f3 	udiv	r3, r0, r3
 800bb92:	3301      	adds	r3, #1
 800bb94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	bf0c      	ite	eq
 800bb9c:	2301      	moveq	r3, #1
 800bb9e:	2300      	movne	r3, #0
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <HAL_I2C_Init+0x196>
 800bba6:	2301      	movs	r3, #1
 800bba8:	e022      	b.n	800bbf0 <HAL_I2C_Init+0x1dc>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10e      	bne.n	800bbd0 <HAL_I2C_Init+0x1bc>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	1e58      	subs	r0, r3, #1
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6859      	ldr	r1, [r3, #4]
 800bbba:	460b      	mov	r3, r1
 800bbbc:	005b      	lsls	r3, r3, #1
 800bbbe:	440b      	add	r3, r1
 800bbc0:	fbb0 f3f3 	udiv	r3, r0, r3
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbce:	e00f      	b.n	800bbf0 <HAL_I2C_Init+0x1dc>
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	1e58      	subs	r0, r3, #1
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6859      	ldr	r1, [r3, #4]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	440b      	add	r3, r1
 800bbde:	0099      	lsls	r1, r3, #2
 800bbe0:	440b      	add	r3, r1
 800bbe2:	fbb0 f3f3 	udiv	r3, r0, r3
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bbf0:	6879      	ldr	r1, [r7, #4]
 800bbf2:	6809      	ldr	r1, [r1, #0]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	69da      	ldr	r2, [r3, #28]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	431a      	orrs	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	430a      	orrs	r2, r1
 800bc12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800bc1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	6911      	ldr	r1, [r2, #16]
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	68d2      	ldr	r2, [r2, #12]
 800bc2a:	4311      	orrs	r1, r2
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	6812      	ldr	r2, [r2, #0]
 800bc30:	430b      	orrs	r3, r1
 800bc32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	695a      	ldr	r2, [r3, #20]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	431a      	orrs	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	430a      	orrs	r2, r1
 800bc4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f042 0201 	orr.w	r2, r2, #1
 800bc5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	000186a0 	.word	0x000186a0
 800bc8c:	001e847f 	.word	0x001e847f
 800bc90:	003d08ff 	.word	0x003d08ff
 800bc94:	431bde83 	.word	0x431bde83
 800bc98:	10624dd3 	.word	0x10624dd3

0800bc9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b088      	sub	sp, #32
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	607a      	str	r2, [r7, #4]
 800bca6:	461a      	mov	r2, r3
 800bca8:	460b      	mov	r3, r1
 800bcaa:	817b      	strh	r3, [r7, #10]
 800bcac:	4613      	mov	r3, r2
 800bcae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bcb0:	f7fe fee8 	bl	800aa84 <HAL_GetTick>
 800bcb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	2b20      	cmp	r3, #32
 800bcc0:	f040 80e0 	bne.w	800be84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	2319      	movs	r3, #25
 800bcca:	2201      	movs	r2, #1
 800bccc:	4970      	ldr	r1, [pc, #448]	; (800be90 <HAL_I2C_Master_Transmit+0x1f4>)
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f002 fd7a 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	e0d3      	b.n	800be86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d101      	bne.n	800bcec <HAL_I2C_Master_Transmit+0x50>
 800bce8:	2302      	movs	r3, #2
 800bcea:	e0cc      	b.n	800be86 <HAL_I2C_Master_Transmit+0x1ea>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 0301 	and.w	r3, r3, #1
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d007      	beq.n	800bd12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f042 0201 	orr.w	r2, r2, #1
 800bd10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2221      	movs	r2, #33	; 0x21
 800bd26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2210      	movs	r2, #16
 800bd2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	893a      	ldrh	r2, [r7, #8]
 800bd42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	4a50      	ldr	r2, [pc, #320]	; (800be94 <HAL_I2C_Master_Transmit+0x1f8>)
 800bd52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800bd54:	8979      	ldrh	r1, [r7, #10]
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	6a3a      	ldr	r2, [r7, #32]
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f002 f9be 	bl	800e0dc <I2C_MasterRequestWrite>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d001      	beq.n	800bd6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800bd66:	2301      	movs	r3, #1
 800bd68:	e08d      	b.n	800be86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	613b      	str	r3, [r7, #16]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	695b      	ldr	r3, [r3, #20]
 800bd74:	613b      	str	r3, [r7, #16]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	699b      	ldr	r3, [r3, #24]
 800bd7c:	613b      	str	r3, [r7, #16]
 800bd7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800bd80:	e066      	b.n	800be50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	6a39      	ldr	r1, [r7, #32]
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f002 fdf4 	bl	800e974 <I2C_WaitOnTXEFlagUntilTimeout>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00d      	beq.n	800bdae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	d107      	bne.n	800bdaa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bda8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e06b      	b.n	800be86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb2:	781a      	ldrb	r2, [r3, #0]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbe:	1c5a      	adds	r2, r3, #1
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	f003 0304 	and.w	r3, r3, #4
 800bde8:	2b04      	cmp	r3, #4
 800bdea:	d11b      	bne.n	800be24 <HAL_I2C_Master_Transmit+0x188>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d017      	beq.n	800be24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf8:	781a      	ldrb	r2, [r3, #0]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	1c5a      	adds	r2, r3, #1
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be0e:	b29b      	uxth	r3, r3
 800be10:	3b01      	subs	r3, #1
 800be12:	b29a      	uxth	r2, r3
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be1c:	3b01      	subs	r3, #1
 800be1e:	b29a      	uxth	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be24:	697a      	ldr	r2, [r7, #20]
 800be26:	6a39      	ldr	r1, [r7, #32]
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f002 fde4 	bl	800e9f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00d      	beq.n	800be50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be38:	2b04      	cmp	r3, #4
 800be3a:	d107      	bne.n	800be4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	e01a      	b.n	800be86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be54:	2b00      	cmp	r3, #0
 800be56:	d194      	bne.n	800bd82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2220      	movs	r2, #32
 800be6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800be80:	2300      	movs	r3, #0
 800be82:	e000      	b.n	800be86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800be84:	2302      	movs	r3, #2
  }
}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	00100002 	.word	0x00100002
 800be94:	ffff0000 	.word	0xffff0000

0800be98 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b08c      	sub	sp, #48	; 0x30
 800be9c:	af02      	add	r7, sp, #8
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	607a      	str	r2, [r7, #4]
 800bea2:	461a      	mov	r2, r3
 800bea4:	460b      	mov	r3, r1
 800bea6:	817b      	strh	r3, [r7, #10]
 800bea8:	4613      	mov	r3, r2
 800beaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800beac:	f7fe fdea 	bl	800aa84 <HAL_GetTick>
 800beb0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b20      	cmp	r3, #32
 800bebc:	f040 820b 	bne.w	800c2d6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	2319      	movs	r3, #25
 800bec6:	2201      	movs	r2, #1
 800bec8:	497c      	ldr	r1, [pc, #496]	; (800c0bc <HAL_I2C_Master_Receive+0x224>)
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f002 fc7c 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d001      	beq.n	800beda <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800bed6:	2302      	movs	r3, #2
 800bed8:	e1fe      	b.n	800c2d8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d101      	bne.n	800bee8 <HAL_I2C_Master_Receive+0x50>
 800bee4:	2302      	movs	r3, #2
 800bee6:	e1f7      	b.n	800c2d8 <HAL_I2C_Master_Receive+0x440>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 0301 	and.w	r3, r3, #1
 800befa:	2b01      	cmp	r3, #1
 800befc:	d007      	beq.n	800bf0e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f042 0201 	orr.w	r2, r2, #1
 800bf0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2222      	movs	r2, #34	; 0x22
 800bf22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2210      	movs	r2, #16
 800bf2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	893a      	ldrh	r2, [r7, #8]
 800bf3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	4a5c      	ldr	r2, [pc, #368]	; (800c0c0 <HAL_I2C_Master_Receive+0x228>)
 800bf4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800bf50:	8979      	ldrh	r1, [r7, #10]
 800bf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf56:	68f8      	ldr	r0, [r7, #12]
 800bf58:	f002 f942 	bl	800e1e0 <I2C_MasterRequestRead>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d001      	beq.n	800bf66 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	e1b8      	b.n	800c2d8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d113      	bne.n	800bf96 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf6e:	2300      	movs	r3, #0
 800bf70:	623b      	str	r3, [r7, #32]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	695b      	ldr	r3, [r3, #20]
 800bf78:	623b      	str	r3, [r7, #32]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	699b      	ldr	r3, [r3, #24]
 800bf80:	623b      	str	r3, [r7, #32]
 800bf82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	e18c      	b.n	800c2b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d11b      	bne.n	800bfd6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bfae:	2300      	movs	r3, #0
 800bfb0:	61fb      	str	r3, [r7, #28]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	61fb      	str	r3, [r7, #28]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	61fb      	str	r3, [r7, #28]
 800bfc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	e16c      	b.n	800c2b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d11b      	bne.n	800c016 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bffc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bffe:	2300      	movs	r3, #0
 800c000:	61bb      	str	r3, [r7, #24]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	61bb      	str	r3, [r7, #24]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	699b      	ldr	r3, [r3, #24]
 800c010:	61bb      	str	r3, [r7, #24]
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	e14c      	b.n	800c2b0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c024:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c026:	2300      	movs	r3, #0
 800c028:	617b      	str	r3, [r7, #20]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	695b      	ldr	r3, [r3, #20]
 800c030:	617b      	str	r3, [r7, #20]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	699b      	ldr	r3, [r3, #24]
 800c038:	617b      	str	r3, [r7, #20]
 800c03a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c03c:	e138      	b.n	800c2b0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c042:	2b03      	cmp	r3, #3
 800c044:	f200 80f1 	bhi.w	800c22a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d123      	bne.n	800c098 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f002 fd41 	bl	800eadc <I2C_WaitOnRXNEFlagUntilTimeout>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e139      	b.n	800c2d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	691a      	ldr	r2, [r3, #16]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06e:	b2d2      	uxtb	r2, r2
 800c070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c076:	1c5a      	adds	r2, r3, #1
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c080:	3b01      	subs	r3, #1
 800c082:	b29a      	uxth	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	3b01      	subs	r3, #1
 800c090:	b29a      	uxth	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c096:	e10b      	b.n	800c2b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d14e      	bne.n	800c13e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	4906      	ldr	r1, [pc, #24]	; (800c0c4 <HAL_I2C_Master_Receive+0x22c>)
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f002 fb8c 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d008      	beq.n	800c0c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e10e      	b.n	800c2d8 <HAL_I2C_Master_Receive+0x440>
 800c0ba:	bf00      	nop
 800c0bc:	00100002 	.word	0x00100002
 800c0c0:	ffff0000 	.word	0xffff0000
 800c0c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	691a      	ldr	r2, [r3, #16]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e2:	b2d2      	uxtb	r2, r2
 800c0e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ea:	1c5a      	adds	r2, r3, #1
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c100:	b29b      	uxth	r3, r3
 800c102:	3b01      	subs	r3, #1
 800c104:	b29a      	uxth	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	691a      	ldr	r2, [r3, #16]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c114:	b2d2      	uxtb	r2, r2
 800c116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11c:	1c5a      	adds	r2, r3, #1
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c126:	3b01      	subs	r3, #1
 800c128:	b29a      	uxth	r2, r3
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c132:	b29b      	uxth	r3, r3
 800c134:	3b01      	subs	r3, #1
 800c136:	b29a      	uxth	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c13c:	e0b8      	b.n	800c2b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	2200      	movs	r2, #0
 800c146:	4966      	ldr	r1, [pc, #408]	; (800c2e0 <HAL_I2C_Master_Receive+0x448>)
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f002 fb3d 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d001      	beq.n	800c158 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	e0bf      	b.n	800c2d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	691a      	ldr	r2, [r3, #16]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c172:	b2d2      	uxtb	r2, r2
 800c174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17a:	1c5a      	adds	r2, r3, #1
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c184:	3b01      	subs	r3, #1
 800c186:	b29a      	uxth	r2, r3
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c190:	b29b      	uxth	r3, r3
 800c192:	3b01      	subs	r3, #1
 800c194:	b29a      	uxth	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	9300      	str	r3, [sp, #0]
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	494f      	ldr	r1, [pc, #316]	; (800c2e0 <HAL_I2C_Master_Receive+0x448>)
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f002 fb0f 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d001      	beq.n	800c1b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e091      	b.n	800c2d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c1c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	691a      	ldr	r2, [r3, #16]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ce:	b2d2      	uxtb	r2, r2
 800c1d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d6:	1c5a      	adds	r2, r3, #1
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	691a      	ldr	r2, [r3, #16]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c200:	b2d2      	uxtb	r2, r2
 800c202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c208:	1c5a      	adds	r2, r3, #1
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c212:	3b01      	subs	r3, #1
 800c214:	b29a      	uxth	r2, r3
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c21e:	b29b      	uxth	r3, r3
 800c220:	3b01      	subs	r3, #1
 800c222:	b29a      	uxth	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c228:	e042      	b.n	800c2b0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c22a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c22c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f002 fc54 	bl	800eadc <I2C_WaitOnRXNEFlagUntilTimeout>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d001      	beq.n	800c23e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800c23a:	2301      	movs	r3, #1
 800c23c:	e04c      	b.n	800c2d8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	691a      	ldr	r2, [r3, #16]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c248:	b2d2      	uxtb	r2, r2
 800c24a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c25a:	3b01      	subs	r3, #1
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c266:	b29b      	uxth	r3, r3
 800c268:	3b01      	subs	r3, #1
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	695b      	ldr	r3, [r3, #20]
 800c276:	f003 0304 	and.w	r3, r3, #4
 800c27a:	2b04      	cmp	r3, #4
 800c27c:	d118      	bne.n	800c2b0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	691a      	ldr	r2, [r3, #16]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c288:	b2d2      	uxtb	r2, r2
 800c28a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c29a:	3b01      	subs	r3, #1
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f47f aec2 	bne.w	800c03e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2220      	movs	r2, #32
 800c2be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	e000      	b.n	800c2d8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c2d6:	2302      	movs	r3, #2
  }
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3728      	adds	r7, #40	; 0x28
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	00010004 	.word	0x00010004

0800c2e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b088      	sub	sp, #32
 800c2e8:	af02      	add	r7, sp, #8
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	4608      	mov	r0, r1
 800c2ee:	4611      	mov	r1, r2
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	817b      	strh	r3, [r7, #10]
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	813b      	strh	r3, [r7, #8]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c2fe:	f7fe fbc1 	bl	800aa84 <HAL_GetTick>
 800c302:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	2b20      	cmp	r3, #32
 800c30e:	f040 80d9 	bne.w	800c4c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	2319      	movs	r3, #25
 800c318:	2201      	movs	r2, #1
 800c31a:	496d      	ldr	r1, [pc, #436]	; (800c4d0 <HAL_I2C_Mem_Write+0x1ec>)
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f002 fa53 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d001      	beq.n	800c32c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c328:	2302      	movs	r3, #2
 800c32a:	e0cc      	b.n	800c4c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c332:	2b01      	cmp	r3, #1
 800c334:	d101      	bne.n	800c33a <HAL_I2C_Mem_Write+0x56>
 800c336:	2302      	movs	r3, #2
 800c338:	e0c5      	b.n	800c4c6 <HAL_I2C_Mem_Write+0x1e2>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2201      	movs	r2, #1
 800c33e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f003 0301 	and.w	r3, r3, #1
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d007      	beq.n	800c360 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f042 0201 	orr.w	r2, r2, #1
 800c35e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c36e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2221      	movs	r2, #33	; 0x21
 800c374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2240      	movs	r2, #64	; 0x40
 800c37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6a3a      	ldr	r2, [r7, #32]
 800c38a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c390:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c396:	b29a      	uxth	r2, r3
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	4a4d      	ldr	r2, [pc, #308]	; (800c4d4 <HAL_I2C_Mem_Write+0x1f0>)
 800c3a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c3a2:	88f8      	ldrh	r0, [r7, #6]
 800c3a4:	893a      	ldrh	r2, [r7, #8]
 800c3a6:	8979      	ldrh	r1, [r7, #10]
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	9301      	str	r3, [sp, #4]
 800c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ae:	9300      	str	r3, [sp, #0]
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f001 ffe2 	bl	800e37c <I2C_RequestMemoryWrite>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d052      	beq.n	800c464 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e081      	b.n	800c4c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c3c2:	697a      	ldr	r2, [r7, #20]
 800c3c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f002 fad4 	bl	800e974 <I2C_WaitOnTXEFlagUntilTimeout>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00d      	beq.n	800c3ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d6:	2b04      	cmp	r3, #4
 800c3d8:	d107      	bne.n	800c3ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e06b      	b.n	800c4c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f2:	781a      	ldrb	r2, [r3, #0]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c408:	3b01      	subs	r3, #1
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c414:	b29b      	uxth	r3, r3
 800c416:	3b01      	subs	r3, #1
 800c418:	b29a      	uxth	r2, r3
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	695b      	ldr	r3, [r3, #20]
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	2b04      	cmp	r3, #4
 800c42a:	d11b      	bne.n	800c464 <HAL_I2C_Mem_Write+0x180>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c430:	2b00      	cmp	r3, #0
 800c432:	d017      	beq.n	800c464 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c438:	781a      	ldrb	r2, [r3, #0]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c444:	1c5a      	adds	r2, r3, #1
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c44e:	3b01      	subs	r3, #1
 800c450:	b29a      	uxth	r2, r3
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	3b01      	subs	r3, #1
 800c45e:	b29a      	uxth	r2, r3
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1aa      	bne.n	800c3c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c46c:	697a      	ldr	r2, [r7, #20]
 800c46e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f002 fac0 	bl	800e9f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00d      	beq.n	800c498 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c480:	2b04      	cmp	r3, #4
 800c482:	d107      	bne.n	800c494 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c492:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e016      	b.n	800c4c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2220      	movs	r2, #32
 800c4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	e000      	b.n	800c4c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800c4c4:	2302      	movs	r3, #2
  }
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3718      	adds	r7, #24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	00100002 	.word	0x00100002
 800c4d4:	ffff0000 	.word	0xffff0000

0800c4d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b08c      	sub	sp, #48	; 0x30
 800c4dc:	af02      	add	r7, sp, #8
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	4608      	mov	r0, r1
 800c4e2:	4611      	mov	r1, r2
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	817b      	strh	r3, [r7, #10]
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	813b      	strh	r3, [r7, #8]
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c4f2:	f7fe fac7 	bl	800aa84 <HAL_GetTick>
 800c4f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	2b20      	cmp	r3, #32
 800c502:	f040 8208 	bne.w	800c916 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	2319      	movs	r3, #25
 800c50c:	2201      	movs	r2, #1
 800c50e:	497b      	ldr	r1, [pc, #492]	; (800c6fc <HAL_I2C_Mem_Read+0x224>)
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f002 f959 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d001      	beq.n	800c520 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800c51c:	2302      	movs	r3, #2
 800c51e:	e1fb      	b.n	800c918 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c526:	2b01      	cmp	r3, #1
 800c528:	d101      	bne.n	800c52e <HAL_I2C_Mem_Read+0x56>
 800c52a:	2302      	movs	r3, #2
 800c52c:	e1f4      	b.n	800c918 <HAL_I2C_Mem_Read+0x440>
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2201      	movs	r2, #1
 800c532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f003 0301 	and.w	r3, r3, #1
 800c540:	2b01      	cmp	r3, #1
 800c542:	d007      	beq.n	800c554 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f042 0201 	orr.w	r2, r2, #1
 800c552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2222      	movs	r2, #34	; 0x22
 800c568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2240      	movs	r2, #64	; 0x40
 800c570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c57e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c58a:	b29a      	uxth	r2, r3
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	4a5b      	ldr	r2, [pc, #364]	; (800c700 <HAL_I2C_Mem_Read+0x228>)
 800c594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c596:	88f8      	ldrh	r0, [r7, #6]
 800c598:	893a      	ldrh	r2, [r7, #8]
 800c59a:	8979      	ldrh	r1, [r7, #10]
 800c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59e:	9301      	str	r3, [sp, #4]
 800c5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f001 ff7e 	bl	800e4a8 <I2C_RequestMemoryRead>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d001      	beq.n	800c5b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e1b0      	b.n	800c918 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d113      	bne.n	800c5e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c5be:	2300      	movs	r3, #0
 800c5c0:	623b      	str	r3, [r7, #32]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	695b      	ldr	r3, [r3, #20]
 800c5c8:	623b      	str	r3, [r7, #32]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	623b      	str	r3, [r7, #32]
 800c5d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5e2:	601a      	str	r2, [r3, #0]
 800c5e4:	e184      	b.n	800c8f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d11b      	bne.n	800c626 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c5fe:	2300      	movs	r3, #0
 800c600:	61fb      	str	r3, [r7, #28]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	695b      	ldr	r3, [r3, #20]
 800c608:	61fb      	str	r3, [r7, #28]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	699b      	ldr	r3, [r3, #24]
 800c610:	61fb      	str	r3, [r7, #28]
 800c612:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	e164      	b.n	800c8f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d11b      	bne.n	800c666 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c63c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c64c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c64e:	2300      	movs	r3, #0
 800c650:	61bb      	str	r3, [r7, #24]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	695b      	ldr	r3, [r3, #20]
 800c658:	61bb      	str	r3, [r7, #24]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	699b      	ldr	r3, [r3, #24]
 800c660:	61bb      	str	r3, [r7, #24]
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	e144      	b.n	800c8f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c666:	2300      	movs	r3, #0
 800c668:	617b      	str	r3, [r7, #20]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	617b      	str	r3, [r7, #20]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	699b      	ldr	r3, [r3, #24]
 800c678:	617b      	str	r3, [r7, #20]
 800c67a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c67c:	e138      	b.n	800c8f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c682:	2b03      	cmp	r3, #3
 800c684:	f200 80f1 	bhi.w	800c86a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d123      	bne.n	800c6d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c692:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f002 fa21 	bl	800eadc <I2C_WaitOnRXNEFlagUntilTimeout>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d001      	beq.n	800c6a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e139      	b.n	800c918 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	691a      	ldr	r2, [r3, #16]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ae:	b2d2      	uxtb	r2, r2
 800c6b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b6:	1c5a      	adds	r2, r3, #1
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c6d6:	e10b      	b.n	800c8f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	d14e      	bne.n	800c77e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	4906      	ldr	r1, [pc, #24]	; (800c704 <HAL_I2C_Mem_Read+0x22c>)
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f002 f86c 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d008      	beq.n	800c708 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e10e      	b.n	800c918 <HAL_I2C_Mem_Read+0x440>
 800c6fa:	bf00      	nop
 800c6fc:	00100002 	.word	0x00100002
 800c700:	ffff0000 	.word	0xffff0000
 800c704:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	691a      	ldr	r2, [r3, #16]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c722:	b2d2      	uxtb	r2, r2
 800c724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72a:	1c5a      	adds	r2, r3, #1
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c734:	3b01      	subs	r3, #1
 800c736:	b29a      	uxth	r2, r3
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c740:	b29b      	uxth	r3, r3
 800c742:	3b01      	subs	r3, #1
 800c744:	b29a      	uxth	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	691a      	ldr	r2, [r3, #16]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c754:	b2d2      	uxtb	r2, r2
 800c756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75c:	1c5a      	adds	r2, r3, #1
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c766:	3b01      	subs	r3, #1
 800c768:	b29a      	uxth	r2, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c772:	b29b      	uxth	r3, r3
 800c774:	3b01      	subs	r3, #1
 800c776:	b29a      	uxth	r2, r3
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c77c:	e0b8      	b.n	800c8f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c784:	2200      	movs	r2, #0
 800c786:	4966      	ldr	r1, [pc, #408]	; (800c920 <HAL_I2C_Mem_Read+0x448>)
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f002 f81d 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d001      	beq.n	800c798 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800c794:	2301      	movs	r3, #1
 800c796:	e0bf      	b.n	800c918 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	691a      	ldr	r2, [r3, #16]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b2:	b2d2      	uxtb	r2, r2
 800c7b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	b29a      	uxth	r2, r3
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	494f      	ldr	r1, [pc, #316]	; (800c920 <HAL_I2C_Mem_Read+0x448>)
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f001 ffef 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d001      	beq.n	800c7f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e091      	b.n	800c918 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	691a      	ldr	r2, [r3, #16]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80e:	b2d2      	uxtb	r2, r2
 800c810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c816:	1c5a      	adds	r2, r3, #1
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c820:	3b01      	subs	r3, #1
 800c822:	b29a      	uxth	r2, r3
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	3b01      	subs	r3, #1
 800c830:	b29a      	uxth	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	691a      	ldr	r2, [r3, #16]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c840:	b2d2      	uxtb	r2, r2
 800c842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c848:	1c5a      	adds	r2, r3, #1
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c852:	3b01      	subs	r3, #1
 800c854:	b29a      	uxth	r2, r3
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c85e:	b29b      	uxth	r3, r3
 800c860:	3b01      	subs	r3, #1
 800c862:	b29a      	uxth	r2, r3
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c868:	e042      	b.n	800c8f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c86a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c86c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f002 f934 	bl	800eadc <I2C_WaitOnRXNEFlagUntilTimeout>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	e04c      	b.n	800c918 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	691a      	ldr	r2, [r3, #16]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c888:	b2d2      	uxtb	r2, r2
 800c88a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c89a:	3b01      	subs	r3, #1
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	695b      	ldr	r3, [r3, #20]
 800c8b6:	f003 0304 	and.w	r3, r3, #4
 800c8ba:	2b04      	cmp	r3, #4
 800c8bc:	d118      	bne.n	800c8f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	691a      	ldr	r2, [r3, #16]
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c8:	b2d2      	uxtb	r2, r2
 800c8ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d0:	1c5a      	adds	r2, r3, #1
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	f47f aec2 	bne.w	800c67e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2220      	movs	r2, #32
 800c8fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c912:	2300      	movs	r3, #0
 800c914:	e000      	b.n	800c918 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c916:	2302      	movs	r3, #2
  }
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3728      	adds	r7, #40	; 0x28
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	00010004 	.word	0x00010004

0800c924 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b088      	sub	sp, #32
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800c92c:	2300      	movs	r3, #0
 800c92e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c944:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c94c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
 800c950:	2b10      	cmp	r3, #16
 800c952:	d003      	beq.n	800c95c <HAL_I2C_EV_IRQHandler+0x38>
 800c954:	7bfb      	ldrb	r3, [r7, #15]
 800c956:	2b40      	cmp	r3, #64	; 0x40
 800c958:	f040 80c1 	bne.w	800cade <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	699b      	ldr	r3, [r3, #24]
 800c962:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	f003 0301 	and.w	r3, r3, #1
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10d      	bne.n	800c992 <HAL_I2C_EV_IRQHandler+0x6e>
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800c97c:	d003      	beq.n	800c986 <HAL_I2C_EV_IRQHandler+0x62>
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c984:	d101      	bne.n	800c98a <HAL_I2C_EV_IRQHandler+0x66>
 800c986:	2301      	movs	r3, #1
 800c988:	e000      	b.n	800c98c <HAL_I2C_EV_IRQHandler+0x68>
 800c98a:	2300      	movs	r3, #0
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	f000 8132 	beq.w	800cbf6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	f003 0301 	and.w	r3, r3, #1
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00c      	beq.n	800c9b6 <HAL_I2C_EV_IRQHandler+0x92>
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	0a5b      	lsrs	r3, r3, #9
 800c9a0:	f003 0301 	and.w	r3, r3, #1
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d006      	beq.n	800c9b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f002 f91c 	bl	800ebe6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fd79 	bl	800d4a6 <I2C_Master_SB>
 800c9b4:	e092      	b.n	800cadc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	08db      	lsrs	r3, r3, #3
 800c9ba:	f003 0301 	and.w	r3, r3, #1
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d009      	beq.n	800c9d6 <HAL_I2C_EV_IRQHandler+0xb2>
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	0a5b      	lsrs	r3, r3, #9
 800c9c6:	f003 0301 	and.w	r3, r3, #1
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d003      	beq.n	800c9d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fdef 	bl	800d5b2 <I2C_Master_ADD10>
 800c9d4:	e082      	b.n	800cadc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	085b      	lsrs	r3, r3, #1
 800c9da:	f003 0301 	and.w	r3, r3, #1
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d009      	beq.n	800c9f6 <HAL_I2C_EV_IRQHandler+0xd2>
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	0a5b      	lsrs	r3, r3, #9
 800c9e6:	f003 0301 	and.w	r3, r3, #1
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d003      	beq.n	800c9f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 fe09 	bl	800d606 <I2C_Master_ADDR>
 800c9f4:	e072      	b.n	800cadc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	089b      	lsrs	r3, r3, #2
 800c9fa:	f003 0301 	and.w	r3, r3, #1
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d03b      	beq.n	800ca7a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca10:	f000 80f3 	beq.w	800cbfa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	09db      	lsrs	r3, r3, #7
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00f      	beq.n	800ca40 <HAL_I2C_EV_IRQHandler+0x11c>
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	0a9b      	lsrs	r3, r3, #10
 800ca24:	f003 0301 	and.w	r3, r3, #1
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d009      	beq.n	800ca40 <HAL_I2C_EV_IRQHandler+0x11c>
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	089b      	lsrs	r3, r3, #2
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d103      	bne.n	800ca40 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f9f3 	bl	800ce24 <I2C_MasterTransmit_TXE>
 800ca3e:	e04d      	b.n	800cadc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	089b      	lsrs	r3, r3, #2
 800ca44:	f003 0301 	and.w	r3, r3, #1
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f000 80d6 	beq.w	800cbfa <HAL_I2C_EV_IRQHandler+0x2d6>
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	0a5b      	lsrs	r3, r3, #9
 800ca52:	f003 0301 	and.w	r3, r3, #1
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f000 80cf 	beq.w	800cbfa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ca5c:	7bbb      	ldrb	r3, [r7, #14]
 800ca5e:	2b21      	cmp	r3, #33	; 0x21
 800ca60:	d103      	bne.n	800ca6a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fa7a 	bl	800cf5c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ca68:	e0c7      	b.n	800cbfa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	2b40      	cmp	r3, #64	; 0x40
 800ca6e:	f040 80c4 	bne.w	800cbfa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fae8 	bl	800d048 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ca78:	e0bf      	b.n	800cbfa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca88:	f000 80b7 	beq.w	800cbfa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	099b      	lsrs	r3, r3, #6
 800ca90:	f003 0301 	and.w	r3, r3, #1
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00f      	beq.n	800cab8 <HAL_I2C_EV_IRQHandler+0x194>
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	0a9b      	lsrs	r3, r3, #10
 800ca9c:	f003 0301 	and.w	r3, r3, #1
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d009      	beq.n	800cab8 <HAL_I2C_EV_IRQHandler+0x194>
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	089b      	lsrs	r3, r3, #2
 800caa8:	f003 0301 	and.w	r3, r3, #1
 800caac:	2b00      	cmp	r3, #0
 800caae:	d103      	bne.n	800cab8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fb5d 	bl	800d170 <I2C_MasterReceive_RXNE>
 800cab6:	e011      	b.n	800cadc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	089b      	lsrs	r3, r3, #2
 800cabc:	f003 0301 	and.w	r3, r3, #1
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f000 809a 	beq.w	800cbfa <HAL_I2C_EV_IRQHandler+0x2d6>
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	0a5b      	lsrs	r3, r3, #9
 800caca:	f003 0301 	and.w	r3, r3, #1
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f000 8093 	beq.w	800cbfa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 fbfc 	bl	800d2d2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cada:	e08e      	b.n	800cbfa <HAL_I2C_EV_IRQHandler+0x2d6>
 800cadc:	e08d      	b.n	800cbfa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d004      	beq.n	800caf0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	695b      	ldr	r3, [r3, #20]
 800caec:	61fb      	str	r3, [r7, #28]
 800caee:	e007      	b.n	800cb00 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	699b      	ldr	r3, [r3, #24]
 800caf6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	695b      	ldr	r3, [r3, #20]
 800cafe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	085b      	lsrs	r3, r3, #1
 800cb04:	f003 0301 	and.w	r3, r3, #1
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d012      	beq.n	800cb32 <HAL_I2C_EV_IRQHandler+0x20e>
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	0a5b      	lsrs	r3, r3, #9
 800cb10:	f003 0301 	and.w	r3, r3, #1
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d00c      	beq.n	800cb32 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d003      	beq.n	800cb28 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	699b      	ldr	r3, [r3, #24]
 800cb26:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800cb28:	69b9      	ldr	r1, [r7, #24]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 ffba 	bl	800daa4 <I2C_Slave_ADDR>
 800cb30:	e066      	b.n	800cc00 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	091b      	lsrs	r3, r3, #4
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d009      	beq.n	800cb52 <HAL_I2C_EV_IRQHandler+0x22e>
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	0a5b      	lsrs	r3, r3, #9
 800cb42:	f003 0301 	and.w	r3, r3, #1
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d003      	beq.n	800cb52 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 fff4 	bl	800db38 <I2C_Slave_STOPF>
 800cb50:	e056      	b.n	800cc00 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cb52:	7bbb      	ldrb	r3, [r7, #14]
 800cb54:	2b21      	cmp	r3, #33	; 0x21
 800cb56:	d002      	beq.n	800cb5e <HAL_I2C_EV_IRQHandler+0x23a>
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
 800cb5a:	2b29      	cmp	r3, #41	; 0x29
 800cb5c:	d125      	bne.n	800cbaa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	09db      	lsrs	r3, r3, #7
 800cb62:	f003 0301 	and.w	r3, r3, #1
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00f      	beq.n	800cb8a <HAL_I2C_EV_IRQHandler+0x266>
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	0a9b      	lsrs	r3, r3, #10
 800cb6e:	f003 0301 	and.w	r3, r3, #1
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d009      	beq.n	800cb8a <HAL_I2C_EV_IRQHandler+0x266>
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	089b      	lsrs	r3, r3, #2
 800cb7a:	f003 0301 	and.w	r3, r3, #1
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d103      	bne.n	800cb8a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fed0 	bl	800d928 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cb88:	e039      	b.n	800cbfe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	089b      	lsrs	r3, r3, #2
 800cb8e:	f003 0301 	and.w	r3, r3, #1
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d033      	beq.n	800cbfe <HAL_I2C_EV_IRQHandler+0x2da>
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	0a5b      	lsrs	r3, r3, #9
 800cb9a:	f003 0301 	and.w	r3, r3, #1
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d02d      	beq.n	800cbfe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 fefd 	bl	800d9a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cba8:	e029      	b.n	800cbfe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	099b      	lsrs	r3, r3, #6
 800cbae:	f003 0301 	and.w	r3, r3, #1
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d00f      	beq.n	800cbd6 <HAL_I2C_EV_IRQHandler+0x2b2>
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	0a9b      	lsrs	r3, r3, #10
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d009      	beq.n	800cbd6 <HAL_I2C_EV_IRQHandler+0x2b2>
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	089b      	lsrs	r3, r3, #2
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d103      	bne.n	800cbd6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 ff08 	bl	800d9e4 <I2C_SlaveReceive_RXNE>
 800cbd4:	e014      	b.n	800cc00 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	089b      	lsrs	r3, r3, #2
 800cbda:	f003 0301 	and.w	r3, r3, #1
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00e      	beq.n	800cc00 <HAL_I2C_EV_IRQHandler+0x2dc>
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	0a5b      	lsrs	r3, r3, #9
 800cbe6:	f003 0301 	and.w	r3, r3, #1
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d008      	beq.n	800cc00 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 ff36 	bl	800da60 <I2C_SlaveReceive_BTF>
 800cbf4:	e004      	b.n	800cc00 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800cbf6:	bf00      	nop
 800cbf8:	e002      	b.n	800cc00 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cbfa:	bf00      	nop
 800cbfc:	e000      	b.n	800cc00 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cbfe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800cc00:	3720      	adds	r7, #32
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b08a      	sub	sp, #40	; 0x28
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	695b      	ldr	r3, [r3, #20]
 800cc14:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc28:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800cc2a:	6a3b      	ldr	r3, [r7, #32]
 800cc2c:	0a1b      	lsrs	r3, r3, #8
 800cc2e:	f003 0301 	and.w	r3, r3, #1
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00e      	beq.n	800cc54 <HAL_I2C_ER_IRQHandler+0x4e>
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	0a1b      	lsrs	r3, r3, #8
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d008      	beq.n	800cc54 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800cc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc44:	f043 0301 	orr.w	r3, r3, #1
 800cc48:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cc52:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800cc54:	6a3b      	ldr	r3, [r7, #32]
 800cc56:	0a5b      	lsrs	r3, r3, #9
 800cc58:	f003 0301 	and.w	r3, r3, #1
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00e      	beq.n	800cc7e <HAL_I2C_ER_IRQHandler+0x78>
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	0a1b      	lsrs	r3, r3, #8
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d008      	beq.n	800cc7e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6e:	f043 0302 	orr.w	r3, r3, #2
 800cc72:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800cc7c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800cc7e:	6a3b      	ldr	r3, [r7, #32]
 800cc80:	0a9b      	lsrs	r3, r3, #10
 800cc82:	f003 0301 	and.w	r3, r3, #1
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d03f      	beq.n	800cd0a <HAL_I2C_ER_IRQHandler+0x104>
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	0a1b      	lsrs	r3, r3, #8
 800cc8e:	f003 0301 	and.w	r3, r3, #1
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d039      	beq.n	800cd0a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800cc96:	7efb      	ldrb	r3, [r7, #27]
 800cc98:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cca8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800ccb0:	7ebb      	ldrb	r3, [r7, #26]
 800ccb2:	2b20      	cmp	r3, #32
 800ccb4:	d112      	bne.n	800ccdc <HAL_I2C_ER_IRQHandler+0xd6>
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d10f      	bne.n	800ccdc <HAL_I2C_ER_IRQHandler+0xd6>
 800ccbc:	7cfb      	ldrb	r3, [r7, #19]
 800ccbe:	2b21      	cmp	r3, #33	; 0x21
 800ccc0:	d008      	beq.n	800ccd4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800ccc2:	7cfb      	ldrb	r3, [r7, #19]
 800ccc4:	2b29      	cmp	r3, #41	; 0x29
 800ccc6:	d005      	beq.n	800ccd4 <HAL_I2C_ER_IRQHandler+0xce>
 800ccc8:	7cfb      	ldrb	r3, [r7, #19]
 800ccca:	2b28      	cmp	r3, #40	; 0x28
 800cccc:	d106      	bne.n	800ccdc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b21      	cmp	r3, #33	; 0x21
 800ccd2:	d103      	bne.n	800ccdc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f001 f85f 	bl	800dd98 <I2C_Slave_AF>
 800ccda:	e016      	b.n	800cd0a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cce4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800cce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce8:	f043 0304 	orr.w	r3, r3, #4
 800ccec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ccee:	7efb      	ldrb	r3, [r7, #27]
 800ccf0:	2b10      	cmp	r3, #16
 800ccf2:	d002      	beq.n	800ccfa <HAL_I2C_ER_IRQHandler+0xf4>
 800ccf4:	7efb      	ldrb	r3, [r7, #27]
 800ccf6:	2b40      	cmp	r3, #64	; 0x40
 800ccf8:	d107      	bne.n	800cd0a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd08:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	0adb      	lsrs	r3, r3, #11
 800cd0e:	f003 0301 	and.w	r3, r3, #1
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00e      	beq.n	800cd34 <HAL_I2C_ER_IRQHandler+0x12e>
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	0a1b      	lsrs	r3, r3, #8
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d008      	beq.n	800cd34 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800cd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd24:	f043 0308 	orr.w	r3, r3, #8
 800cd28:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800cd32:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d008      	beq.n	800cd4c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd40:	431a      	orrs	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f001 f896 	bl	800de78 <I2C_ITError>
  }
}
 800cd4c:	bf00      	nop
 800cd4e:	3728      	adds	r7, #40	; 0x28
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800cd5c:	bf00      	nop
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b083      	sub	sp, #12
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800cd70:	bf00      	nop
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800cd84:	bf00      	nop
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b083      	sub	sp, #12
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800cd98:	bf00      	nop
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	460b      	mov	r3, r1
 800cdae:	70fb      	strb	r3, [r7, #3]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800cdb4:	bf00      	nop
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800cdc8:	bf00      	nop
 800cdca:	370c      	adds	r7, #12
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800cddc:	bf00      	nop
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800cdf0:	bf00      	nop
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr

0800cdfc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ce04:	bf00      	nop
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ce18:	bf00      	nop
 800ce1a:	370c      	adds	r7, #12
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce40:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d150      	bne.n	800ceec <I2C_MasterTransmit_TXE+0xc8>
 800ce4a:	7bfb      	ldrb	r3, [r7, #15]
 800ce4c:	2b21      	cmp	r3, #33	; 0x21
 800ce4e:	d14d      	bne.n	800ceec <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2b08      	cmp	r3, #8
 800ce54:	d01d      	beq.n	800ce92 <I2C_MasterTransmit_TXE+0x6e>
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2b20      	cmp	r3, #32
 800ce5a:	d01a      	beq.n	800ce92 <I2C_MasterTransmit_TXE+0x6e>
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ce62:	d016      	beq.n	800ce92 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	685a      	ldr	r2, [r3, #4]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ce72:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2211      	movs	r2, #17
 800ce78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2220      	movs	r2, #32
 800ce86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7ff ff62 	bl	800cd54 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ce90:	e060      	b.n	800cf54 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	685a      	ldr	r2, [r3, #4]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cea0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ceb0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2220      	movs	r2, #32
 800cebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	2b40      	cmp	r3, #64	; 0x40
 800ceca:	d107      	bne.n	800cedc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f7ff ff7d 	bl	800cdd4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ceda:	e03b      	b.n	800cf54 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2200      	movs	r2, #0
 800cee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7ff ff35 	bl	800cd54 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ceea:	e033      	b.n	800cf54 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
 800ceee:	2b21      	cmp	r3, #33	; 0x21
 800cef0:	d005      	beq.n	800cefe <I2C_MasterTransmit_TXE+0xda>
 800cef2:	7bbb      	ldrb	r3, [r7, #14]
 800cef4:	2b40      	cmp	r3, #64	; 0x40
 800cef6:	d12d      	bne.n	800cf54 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
 800cefa:	2b22      	cmp	r3, #34	; 0x22
 800cefc:	d12a      	bne.n	800cf54 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d108      	bne.n	800cf1a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	685a      	ldr	r2, [r3, #4]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf16:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800cf18:	e01c      	b.n	800cf54 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	2b40      	cmp	r3, #64	; 0x40
 800cf24:	d103      	bne.n	800cf2e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f88e 	bl	800d048 <I2C_MemoryTransmit_TXE_BTF>
}
 800cf2c:	e012      	b.n	800cf54 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf32:	781a      	ldrb	r2, [r3, #0]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3e:	1c5a      	adds	r2, r3, #1
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800cf52:	e7ff      	b.n	800cf54 <I2C_MasterTransmit_TXE+0x130>
 800cf54:	bf00      	nop
 800cf56:	3710      	adds	r7, #16
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf68:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b21      	cmp	r3, #33	; 0x21
 800cf74:	d164      	bne.n	800d040 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d012      	beq.n	800cfa6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf84:	781a      	ldrb	r2, [r3, #0]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf90:	1c5a      	adds	r2, r3, #1
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800cfa4:	e04c      	b.n	800d040 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2b08      	cmp	r3, #8
 800cfaa:	d01d      	beq.n	800cfe8 <I2C_MasterTransmit_BTF+0x8c>
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b20      	cmp	r3, #32
 800cfb0:	d01a      	beq.n	800cfe8 <I2C_MasterTransmit_BTF+0x8c>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cfb8:	d016      	beq.n	800cfe8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	685a      	ldr	r2, [r3, #4]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cfc8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2211      	movs	r2, #17
 800cfce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2220      	movs	r2, #32
 800cfdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7ff feb7 	bl	800cd54 <HAL_I2C_MasterTxCpltCallback>
}
 800cfe6:	e02b      	b.n	800d040 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	685a      	ldr	r2, [r3, #4]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cff6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d006:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2220      	movs	r2, #32
 800d012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b40      	cmp	r3, #64	; 0x40
 800d020:	d107      	bne.n	800d032 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7ff fed2 	bl	800cdd4 <HAL_I2C_MemTxCpltCallback>
}
 800d030:	e006      	b.n	800d040 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2200      	movs	r2, #0
 800d036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff fe8a 	bl	800cd54 <HAL_I2C_MasterTxCpltCallback>
}
 800d040:	bf00      	nop
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d056:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d11d      	bne.n	800d09c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d064:	2b01      	cmp	r3, #1
 800d066:	d10b      	bne.n	800d080 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d078:	1c9a      	adds	r2, r3, #2
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800d07e:	e073      	b.n	800d168 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d084:	b29b      	uxth	r3, r3
 800d086:	121b      	asrs	r3, r3, #8
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d094:	1c5a      	adds	r2, r3, #1
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d09a:	e065      	b.n	800d168 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d10b      	bne.n	800d0bc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0a8:	b2da      	uxtb	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0b4:	1c5a      	adds	r2, r3, #1
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d0ba:	e055      	b.n	800d168 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0c0:	2b02      	cmp	r3, #2
 800d0c2:	d151      	bne.n	800d168 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800d0c4:	7bfb      	ldrb	r3, [r7, #15]
 800d0c6:	2b22      	cmp	r3, #34	; 0x22
 800d0c8:	d10d      	bne.n	800d0e6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0d8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0de:	1c5a      	adds	r2, r3, #1
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d0e4:	e040      	b.n	800d168 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d015      	beq.n	800d11c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800d0f0:	7bfb      	ldrb	r3, [r7, #15]
 800d0f2:	2b21      	cmp	r3, #33	; 0x21
 800d0f4:	d112      	bne.n	800d11c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fa:	781a      	ldrb	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d106:	1c5a      	adds	r2, r3, #1
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d110:	b29b      	uxth	r3, r3
 800d112:	3b01      	subs	r3, #1
 800d114:	b29a      	uxth	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d11a:	e025      	b.n	800d168 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d120:	b29b      	uxth	r3, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d120      	bne.n	800d168 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800d126:	7bfb      	ldrb	r3, [r7, #15]
 800d128:	2b21      	cmp	r3, #33	; 0x21
 800d12a:	d11d      	bne.n	800d168 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d13a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d14a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2220      	movs	r2, #32
 800d156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7ff fe36 	bl	800cdd4 <HAL_I2C_MemTxCpltCallback>
}
 800d168:	bf00      	nop
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	2b22      	cmp	r3, #34	; 0x22
 800d182:	f040 80a2 	bne.w	800d2ca <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2b03      	cmp	r3, #3
 800d192:	d921      	bls.n	800d1d8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	691a      	ldr	r2, [r3, #16]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19e:	b2d2      	uxtb	r2, r2
 800d1a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a6:	1c5a      	adds	r2, r3, #1
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	2b03      	cmp	r3, #3
 800d1c2:	f040 8082 	bne.w	800d2ca <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	685a      	ldr	r2, [r3, #4]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1d4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800d1d6:	e078      	b.n	800d2ca <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	d074      	beq.n	800d2ca <I2C_MasterReceive_RXNE+0x15a>
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d002      	beq.n	800d1ec <I2C_MasterReceive_RXNE+0x7c>
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d16e      	bne.n	800d2ca <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f001 fc43 	bl	800ea78 <I2C_WaitOnSTOPRequestThroughIT>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d142      	bne.n	800d27e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d206:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	685a      	ldr	r2, [r3, #4]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d216:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	691a      	ldr	r2, [r3, #16]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d222:	b2d2      	uxtb	r2, r2
 800d224:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22a:	1c5a      	adds	r2, r3, #1
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d234:	b29b      	uxth	r3, r3
 800d236:	3b01      	subs	r3, #1
 800d238:	b29a      	uxth	r2, r3
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2220      	movs	r2, #32
 800d242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	2b40      	cmp	r3, #64	; 0x40
 800d250:	d10a      	bne.n	800d268 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff fdc1 	bl	800cde8 <HAL_I2C_MemRxCpltCallback>
}
 800d266:	e030      	b.n	800d2ca <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2212      	movs	r2, #18
 800d274:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7ff fd76 	bl	800cd68 <HAL_I2C_MasterRxCpltCallback>
}
 800d27c:	e025      	b.n	800d2ca <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	685a      	ldr	r2, [r3, #4]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d28c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	691a      	ldr	r2, [r3, #16]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d298:	b2d2      	uxtb	r2, r2
 800d29a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2220      	movs	r2, #32
 800d2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7ff fd99 	bl	800cdfc <HAL_I2C_ErrorCallback>
}
 800d2ca:	bf00      	nop
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b084      	sub	sp, #16
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2de:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	2b04      	cmp	r3, #4
 800d2e8:	d11b      	bne.n	800d322 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	685a      	ldr	r2, [r3, #4]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2f8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	691a      	ldr	r2, [r3, #16]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d304:	b2d2      	uxtb	r2, r2
 800d306:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d30c:	1c5a      	adds	r2, r3, #1
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d316:	b29b      	uxth	r3, r3
 800d318:	3b01      	subs	r3, #1
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800d320:	e0bd      	b.n	800d49e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d326:	b29b      	uxth	r3, r3
 800d328:	2b03      	cmp	r3, #3
 800d32a:	d129      	bne.n	800d380 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	685a      	ldr	r2, [r3, #4]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d33a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2b04      	cmp	r3, #4
 800d340:	d00a      	beq.n	800d358 <I2C_MasterReceive_BTF+0x86>
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2b02      	cmp	r3, #2
 800d346:	d007      	beq.n	800d358 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d356:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	691a      	ldr	r2, [r3, #16]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d362:	b2d2      	uxtb	r2, r2
 800d364:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36a:	1c5a      	adds	r2, r3, #1
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d374:	b29b      	uxth	r3, r3
 800d376:	3b01      	subs	r3, #1
 800d378:	b29a      	uxth	r2, r3
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d37e:	e08e      	b.n	800d49e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d384:	b29b      	uxth	r3, r3
 800d386:	2b02      	cmp	r3, #2
 800d388:	d176      	bne.n	800d478 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d002      	beq.n	800d396 <I2C_MasterReceive_BTF+0xc4>
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2b10      	cmp	r3, #16
 800d394:	d108      	bne.n	800d3a8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3a4:	601a      	str	r2, [r3, #0]
 800d3a6:	e019      	b.n	800d3dc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2b04      	cmp	r3, #4
 800d3ac:	d002      	beq.n	800d3b4 <I2C_MasterReceive_BTF+0xe2>
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	d108      	bne.n	800d3c6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d3c2:	601a      	str	r2, [r3, #0]
 800d3c4:	e00a      	b.n	800d3dc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2b10      	cmp	r3, #16
 800d3ca:	d007      	beq.n	800d3dc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	691a      	ldr	r2, [r3, #16]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e6:	b2d2      	uxtb	r2, r2
 800d3e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ee:	1c5a      	adds	r2, r3, #1
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	691a      	ldr	r2, [r3, #16]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40c:	b2d2      	uxtb	r2, r2
 800d40e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d414:	1c5a      	adds	r2, r3, #1
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d41e:	b29b      	uxth	r3, r3
 800d420:	3b01      	subs	r3, #1
 800d422:	b29a      	uxth	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	685a      	ldr	r2, [r3, #4]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d436:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2220      	movs	r2, #32
 800d43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d446:	b2db      	uxtb	r3, r3
 800d448:	2b40      	cmp	r3, #64	; 0x40
 800d44a:	d10a      	bne.n	800d462 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f7ff fcc4 	bl	800cde8 <HAL_I2C_MemRxCpltCallback>
}
 800d460:	e01d      	b.n	800d49e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2212      	movs	r2, #18
 800d46e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f7ff fc79 	bl	800cd68 <HAL_I2C_MasterRxCpltCallback>
}
 800d476:	e012      	b.n	800d49e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	691a      	ldr	r2, [r3, #16]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d482:	b2d2      	uxtb	r2, r2
 800d484:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48a:	1c5a      	adds	r2, r3, #1
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d494:	b29b      	uxth	r3, r3
 800d496:	3b01      	subs	r3, #1
 800d498:	b29a      	uxth	r2, r3
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d49e:	bf00      	nop
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800d4a6:	b480      	push	{r7}
 800d4a8:	b083      	sub	sp, #12
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	2b40      	cmp	r3, #64	; 0x40
 800d4b8:	d117      	bne.n	800d4ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d109      	bne.n	800d4d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d4d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800d4d4:	e067      	b.n	800d5a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	f043 0301 	orr.w	r3, r3, #1
 800d4e0:	b2da      	uxtb	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	611a      	str	r2, [r3, #16]
}
 800d4e8:	e05d      	b.n	800d5a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	691b      	ldr	r3, [r3, #16]
 800d4ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4f2:	d133      	bne.n	800d55c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b21      	cmp	r3, #33	; 0x21
 800d4fe:	d109      	bne.n	800d514 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d504:	b2db      	uxtb	r3, r3
 800d506:	461a      	mov	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d510:	611a      	str	r2, [r3, #16]
 800d512:	e008      	b.n	800d526 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	f043 0301 	orr.w	r3, r3, #1
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d004      	beq.n	800d538 <I2C_Master_SB+0x92>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d534:	2b00      	cmp	r3, #0
 800d536:	d108      	bne.n	800d54a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d032      	beq.n	800d5a6 <I2C_Master_SB+0x100>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d546:	2b00      	cmp	r3, #0
 800d548:	d02d      	beq.n	800d5a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	685a      	ldr	r2, [r3, #4]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d558:	605a      	str	r2, [r3, #4]
}
 800d55a:	e024      	b.n	800d5a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10e      	bne.n	800d582 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d568:	b29b      	uxth	r3, r3
 800d56a:	11db      	asrs	r3, r3, #7
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	f003 0306 	and.w	r3, r3, #6
 800d572:	b2db      	uxtb	r3, r3
 800d574:	f063 030f 	orn	r3, r3, #15
 800d578:	b2da      	uxtb	r2, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	611a      	str	r2, [r3, #16]
}
 800d580:	e011      	b.n	800d5a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d586:	2b01      	cmp	r3, #1
 800d588:	d10d      	bne.n	800d5a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d58e:	b29b      	uxth	r3, r3
 800d590:	11db      	asrs	r3, r3, #7
 800d592:	b2db      	uxtb	r3, r3
 800d594:	f003 0306 	and.w	r3, r3, #6
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	f063 030e 	orn	r3, r3, #14
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	611a      	str	r2, [r3, #16]
}
 800d5a6:	bf00      	nop
 800d5a8:	370c      	adds	r7, #12
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr

0800d5b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800d5b2:	b480      	push	{r7}
 800d5b4:	b083      	sub	sp, #12
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d004      	beq.n	800d5d8 <I2C_Master_ADD10+0x26>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d108      	bne.n	800d5ea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00c      	beq.n	800d5fa <I2C_Master_ADD10+0x48>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d007      	beq.n	800d5fa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	685a      	ldr	r2, [r3, #4]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5f8:	605a      	str	r2, [r3, #4]
  }
}
 800d5fa:	bf00      	nop
 800d5fc:	370c      	adds	r7, #12
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800d606:	b480      	push	{r7}
 800d608:	b091      	sub	sp, #68	; 0x44
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d614:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d622:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	2b22      	cmp	r3, #34	; 0x22
 800d62e:	f040 8169 	bne.w	800d904 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10f      	bne.n	800d65a <I2C_Master_ADDR+0x54>
 800d63a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d63e:	2b40      	cmp	r3, #64	; 0x40
 800d640:	d10b      	bne.n	800d65a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d642:	2300      	movs	r3, #0
 800d644:	633b      	str	r3, [r7, #48]	; 0x30
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	695b      	ldr	r3, [r3, #20]
 800d64c:	633b      	str	r3, [r7, #48]	; 0x30
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	699b      	ldr	r3, [r3, #24]
 800d654:	633b      	str	r3, [r7, #48]	; 0x30
 800d656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d658:	e160      	b.n	800d91c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d11d      	bne.n	800d69e <I2C_Master_ADDR+0x98>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	691b      	ldr	r3, [r3, #16]
 800d666:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d66a:	d118      	bne.n	800d69e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d66c:	2300      	movs	r3, #0
 800d66e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	695b      	ldr	r3, [r3, #20]
 800d676:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	699b      	ldr	r3, [r3, #24]
 800d67e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d680:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d690:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d696:	1c5a      	adds	r2, r3, #1
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	651a      	str	r2, [r3, #80]	; 0x50
 800d69c:	e13e      	b.n	800d91c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d113      	bne.n	800d6d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	695b      	ldr	r3, [r3, #20]
 800d6b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6cc:	601a      	str	r2, [r3, #0]
 800d6ce:	e115      	b.n	800d8fc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	f040 808a 	bne.w	800d7f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d6e2:	d137      	bne.n	800d754 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d702:	d113      	bne.n	800d72c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d712:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d714:	2300      	movs	r3, #0
 800d716:	627b      	str	r3, [r7, #36]	; 0x24
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	695b      	ldr	r3, [r3, #20]
 800d71e:	627b      	str	r3, [r7, #36]	; 0x24
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	699b      	ldr	r3, [r3, #24]
 800d726:	627b      	str	r3, [r7, #36]	; 0x24
 800d728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72a:	e0e7      	b.n	800d8fc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d72c:	2300      	movs	r3, #0
 800d72e:	623b      	str	r3, [r7, #32]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	695b      	ldr	r3, [r3, #20]
 800d736:	623b      	str	r3, [r7, #32]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	699b      	ldr	r3, [r3, #24]
 800d73e:	623b      	str	r3, [r7, #32]
 800d740:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	e0d3      	b.n	800d8fc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800d754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d756:	2b08      	cmp	r3, #8
 800d758:	d02e      	beq.n	800d7b8 <I2C_Master_ADDR+0x1b2>
 800d75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75c:	2b20      	cmp	r3, #32
 800d75e:	d02b      	beq.n	800d7b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800d760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d762:	2b12      	cmp	r3, #18
 800d764:	d102      	bne.n	800d76c <I2C_Master_ADDR+0x166>
 800d766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d125      	bne.n	800d7b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800d76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76e:	2b04      	cmp	r3, #4
 800d770:	d00e      	beq.n	800d790 <I2C_Master_ADDR+0x18a>
 800d772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d774:	2b02      	cmp	r3, #2
 800d776:	d00b      	beq.n	800d790 <I2C_Master_ADDR+0x18a>
 800d778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77a:	2b10      	cmp	r3, #16
 800d77c:	d008      	beq.n	800d790 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d78c:	601a      	str	r2, [r3, #0]
 800d78e:	e007      	b.n	800d7a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d79e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	61fb      	str	r3, [r7, #28]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	695b      	ldr	r3, [r3, #20]
 800d7aa:	61fb      	str	r3, [r7, #28]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	699b      	ldr	r3, [r3, #24]
 800d7b2:	61fb      	str	r3, [r7, #28]
 800d7b4:	69fb      	ldr	r3, [r7, #28]
 800d7b6:	e0a1      	b.n	800d8fc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	61bb      	str	r3, [r7, #24]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	695b      	ldr	r3, [r3, #20]
 800d7d2:	61bb      	str	r3, [r7, #24]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	61bb      	str	r3, [r7, #24]
 800d7dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7ec:	601a      	str	r2, [r3, #0]
 800d7ee:	e085      	b.n	800d8fc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	2b02      	cmp	r3, #2
 800d7f8:	d14d      	bne.n	800d896 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800d7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fc:	2b04      	cmp	r3, #4
 800d7fe:	d016      	beq.n	800d82e <I2C_Master_ADDR+0x228>
 800d800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d802:	2b02      	cmp	r3, #2
 800d804:	d013      	beq.n	800d82e <I2C_Master_ADDR+0x228>
 800d806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d808:	2b10      	cmp	r3, #16
 800d80a:	d010      	beq.n	800d82e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d81a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d82a:	601a      	str	r2, [r3, #0]
 800d82c:	e007      	b.n	800d83e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d83c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d84c:	d117      	bne.n	800d87e <I2C_Master_ADDR+0x278>
 800d84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d850:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d854:	d00b      	beq.n	800d86e <I2C_Master_ADDR+0x268>
 800d856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d008      	beq.n	800d86e <I2C_Master_ADDR+0x268>
 800d85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85e:	2b08      	cmp	r3, #8
 800d860:	d005      	beq.n	800d86e <I2C_Master_ADDR+0x268>
 800d862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d864:	2b10      	cmp	r3, #16
 800d866:	d002      	beq.n	800d86e <I2C_Master_ADDR+0x268>
 800d868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86a:	2b20      	cmp	r3, #32
 800d86c:	d107      	bne.n	800d87e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	685a      	ldr	r2, [r3, #4]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d87c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d87e:	2300      	movs	r3, #0
 800d880:	617b      	str	r3, [r7, #20]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	695b      	ldr	r3, [r3, #20]
 800d888:	617b      	str	r3, [r7, #20]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	699b      	ldr	r3, [r3, #24]
 800d890:	617b      	str	r3, [r7, #20]
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	e032      	b.n	800d8fc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d8a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8b4:	d117      	bne.n	800d8e6 <I2C_Master_ADDR+0x2e0>
 800d8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d8bc:	d00b      	beq.n	800d8d6 <I2C_Master_ADDR+0x2d0>
 800d8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d008      	beq.n	800d8d6 <I2C_Master_ADDR+0x2d0>
 800d8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c6:	2b08      	cmp	r3, #8
 800d8c8:	d005      	beq.n	800d8d6 <I2C_Master_ADDR+0x2d0>
 800d8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8cc:	2b10      	cmp	r3, #16
 800d8ce:	d002      	beq.n	800d8d6 <I2C_Master_ADDR+0x2d0>
 800d8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d2:	2b20      	cmp	r3, #32
 800d8d4:	d107      	bne.n	800d8e6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d8e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	613b      	str	r3, [r7, #16]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	695b      	ldr	r3, [r3, #20]
 800d8f0:	613b      	str	r3, [r7, #16]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	699b      	ldr	r3, [r3, #24]
 800d8f8:	613b      	str	r3, [r7, #16]
 800d8fa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2200      	movs	r2, #0
 800d900:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800d902:	e00b      	b.n	800d91c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d904:	2300      	movs	r3, #0
 800d906:	60fb      	str	r3, [r7, #12]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	695b      	ldr	r3, [r3, #20]
 800d90e:	60fb      	str	r3, [r7, #12]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	699b      	ldr	r3, [r3, #24]
 800d916:	60fb      	str	r3, [r7, #12]
 800d918:	68fb      	ldr	r3, [r7, #12]
}
 800d91a:	e7ff      	b.n	800d91c <I2C_Master_ADDR+0x316>
 800d91c:	bf00      	nop
 800d91e:	3744      	adds	r7, #68	; 0x44
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d936:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d02b      	beq.n	800d99a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d946:	781a      	ldrb	r2, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d952:	1c5a      	adds	r2, r3, #1
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	3b01      	subs	r3, #1
 800d960:	b29a      	uxth	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d114      	bne.n	800d99a <I2C_SlaveTransmit_TXE+0x72>
 800d970:	7bfb      	ldrb	r3, [r7, #15]
 800d972:	2b29      	cmp	r3, #41	; 0x29
 800d974:	d111      	bne.n	800d99a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d984:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2221      	movs	r2, #33	; 0x21
 800d98a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2228      	movs	r2, #40	; 0x28
 800d990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f7ff f9f1 	bl	800cd7c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d99a:	bf00      	nop
 800d99c:	3710      	adds	r7, #16
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d011      	beq.n	800d9d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b8:	781a      	ldrb	r2, [r3, #0]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c4:	1c5a      	adds	r2, r3, #1
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800d9d8:	bf00      	nop
 800d9da:	370c      	adds	r7, #12
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d02c      	beq.n	800da58 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	691a      	ldr	r2, [r3, #16]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da08:	b2d2      	uxtb	r2, r2
 800da0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da10:	1c5a      	adds	r2, r3, #1
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	3b01      	subs	r3, #1
 800da1e:	b29a      	uxth	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da28:	b29b      	uxth	r3, r3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d114      	bne.n	800da58 <I2C_SlaveReceive_RXNE+0x74>
 800da2e:	7bfb      	ldrb	r3, [r7, #15]
 800da30:	2b2a      	cmp	r3, #42	; 0x2a
 800da32:	d111      	bne.n	800da58 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	685a      	ldr	r2, [r3, #4]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da42:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2222      	movs	r2, #34	; 0x22
 800da48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2228      	movs	r2, #40	; 0x28
 800da4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7ff f99c 	bl	800cd90 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800da58:	bf00      	nop
 800da5a:	3710      	adds	r7, #16
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d012      	beq.n	800da98 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	691a      	ldr	r2, [r3, #16]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7c:	b2d2      	uxtb	r2, r2
 800da7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da84:	1c5a      	adds	r2, r3, #1
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da8e:	b29b      	uxth	r3, r3
 800da90:	3b01      	subs	r3, #1
 800da92:	b29a      	uxth	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800da98:	bf00      	nop
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800daae:	2300      	movs	r3, #0
 800dab0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dabe:	2b28      	cmp	r3, #40	; 0x28
 800dac0:	d127      	bne.n	800db12 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	685a      	ldr	r2, [r3, #4]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dad0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	089b      	lsrs	r3, r3, #2
 800dad6:	f003 0301 	and.w	r3, r3, #1
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800dade:	2301      	movs	r3, #1
 800dae0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	09db      	lsrs	r3, r3, #7
 800dae6:	f003 0301 	and.w	r3, r3, #1
 800daea:	2b00      	cmp	r3, #0
 800daec:	d103      	bne.n	800daf6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	81bb      	strh	r3, [r7, #12]
 800daf4:	e002      	b.n	800dafc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800db04:	89ba      	ldrh	r2, [r7, #12]
 800db06:	7bfb      	ldrb	r3, [r7, #15]
 800db08:	4619      	mov	r1, r3
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7ff f94a 	bl	800cda4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800db10:	e00e      	b.n	800db30 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db12:	2300      	movs	r3, #0
 800db14:	60bb      	str	r3, [r7, #8]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	695b      	ldr	r3, [r3, #20]
 800db1c:	60bb      	str	r3, [r7, #8]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	699b      	ldr	r3, [r3, #24]
 800db24:	60bb      	str	r3, [r7, #8]
 800db26:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800db30:	bf00      	nop
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db46:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	685a      	ldr	r2, [r3, #4]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800db56:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800db58:	2300      	movs	r3, #0
 800db5a:	60bb      	str	r3, [r7, #8]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	695b      	ldr	r3, [r3, #20]
 800db62:	60bb      	str	r3, [r7, #8]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f042 0201 	orr.w	r2, r2, #1
 800db72:	601a      	str	r2, [r3, #0]
 800db74:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db84:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db94:	d172      	bne.n	800dc7c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800db96:	7bfb      	ldrb	r3, [r7, #15]
 800db98:	2b22      	cmp	r3, #34	; 0x22
 800db9a:	d002      	beq.n	800dba2 <I2C_Slave_STOPF+0x6a>
 800db9c:	7bfb      	ldrb	r3, [r7, #15]
 800db9e:	2b2a      	cmp	r3, #42	; 0x2a
 800dba0:	d135      	bne.n	800dc0e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d005      	beq.n	800dbc6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbbe:	f043 0204 	orr.w	r2, r3, #4
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	685a      	ldr	r2, [r3, #4]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dbd4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fd fc44 	bl	800b468 <HAL_DMA_GetState>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d049      	beq.n	800dc7a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbea:	4a69      	ldr	r2, [pc, #420]	; (800dd90 <I2C_Slave_STOPF+0x258>)
 800dbec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fd fa8c 	bl	800b110 <HAL_DMA_Abort_IT>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d03d      	beq.n	800dc7a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dc08:	4610      	mov	r0, r2
 800dc0a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dc0c:	e035      	b.n	800dc7a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d005      	beq.n	800dc32 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2a:	f043 0204 	orr.w	r2, r3, #4
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	685a      	ldr	r2, [r3, #4]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dc40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fd fc0e 	bl	800b468 <HAL_DMA_GetState>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d014      	beq.n	800dc7c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc56:	4a4e      	ldr	r2, [pc, #312]	; (800dd90 <I2C_Slave_STOPF+0x258>)
 800dc58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fd fa56 	bl	800b110 <HAL_DMA_Abort_IT>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d008      	beq.n	800dc7c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dc74:	4610      	mov	r0, r2
 800dc76:	4798      	blx	r3
 800dc78:	e000      	b.n	800dc7c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dc7a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d03e      	beq.n	800dd04 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	695b      	ldr	r3, [r3, #20]
 800dc8c:	f003 0304 	and.w	r3, r3, #4
 800dc90:	2b04      	cmp	r3, #4
 800dc92:	d112      	bne.n	800dcba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	691a      	ldr	r2, [r3, #16]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9e:	b2d2      	uxtb	r2, r2
 800dca0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	695b      	ldr	r3, [r3, #20]
 800dcc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcc4:	2b40      	cmp	r3, #64	; 0x40
 800dcc6:	d112      	bne.n	800dcee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	691a      	ldr	r2, [r3, #16]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd2:	b2d2      	uxtb	r2, r2
 800dcd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcda:	1c5a      	adds	r2, r3, #1
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	3b01      	subs	r3, #1
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d005      	beq.n	800dd04 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcfc:	f043 0204 	orr.w	r2, r3, #4
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d003      	beq.n	800dd14 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 f8b3 	bl	800de78 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800dd12:	e039      	b.n	800dd88 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800dd14:	7bfb      	ldrb	r3, [r7, #15]
 800dd16:	2b2a      	cmp	r3, #42	; 0x2a
 800dd18:	d109      	bne.n	800dd2e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2228      	movs	r2, #40	; 0x28
 800dd24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f7ff f831 	bl	800cd90 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	2b28      	cmp	r3, #40	; 0x28
 800dd38:	d111      	bne.n	800dd5e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4a15      	ldr	r2, [pc, #84]	; (800dd94 <I2C_Slave_STOPF+0x25c>)
 800dd3e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2220      	movs	r2, #32
 800dd4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7ff f832 	bl	800cdc0 <HAL_I2C_ListenCpltCallback>
}
 800dd5c:	e014      	b.n	800dd88 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd62:	2b22      	cmp	r3, #34	; 0x22
 800dd64:	d002      	beq.n	800dd6c <I2C_Slave_STOPF+0x234>
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
 800dd68:	2b22      	cmp	r3, #34	; 0x22
 800dd6a:	d10d      	bne.n	800dd88 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2220      	movs	r2, #32
 800dd76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f7ff f804 	bl	800cd90 <HAL_I2C_SlaveRxCpltCallback>
}
 800dd88:	bf00      	nop
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	0800e679 	.word	0x0800e679
 800dd94:	ffff0000 	.word	0xffff0000

0800dd98 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dda6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	2b08      	cmp	r3, #8
 800ddb2:	d002      	beq.n	800ddba <I2C_Slave_AF+0x22>
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	2b20      	cmp	r3, #32
 800ddb8:	d129      	bne.n	800de0e <I2C_Slave_AF+0x76>
 800ddba:	7bfb      	ldrb	r3, [r7, #15]
 800ddbc:	2b28      	cmp	r3, #40	; 0x28
 800ddbe:	d126      	bne.n	800de0e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	4a2c      	ldr	r2, [pc, #176]	; (800de74 <I2C_Slave_AF+0xdc>)
 800ddc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	685a      	ldr	r2, [r3, #4]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ddd4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ddde:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2220      	movs	r2, #32
 800ddfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2200      	movs	r2, #0
 800de02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7fe ffda 	bl	800cdc0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800de0c:	e02e      	b.n	800de6c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800de0e:	7bfb      	ldrb	r3, [r7, #15]
 800de10:	2b21      	cmp	r3, #33	; 0x21
 800de12:	d126      	bne.n	800de62 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4a17      	ldr	r2, [pc, #92]	; (800de74 <I2C_Slave_AF+0xdc>)
 800de18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2221      	movs	r2, #33	; 0x21
 800de1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2220      	movs	r2, #32
 800de24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	685a      	ldr	r2, [r3, #4]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800de3e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800de48:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de58:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7fe ff8e 	bl	800cd7c <HAL_I2C_SlaveTxCpltCallback>
}
 800de60:	e004      	b.n	800de6c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800de6a:	615a      	str	r2, [r3, #20]
}
 800de6c:	bf00      	nop
 800de6e:	3710      	adds	r7, #16
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	ffff0000 	.word	0xffff0000

0800de78 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de86:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800de8e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800de90:	7bbb      	ldrb	r3, [r7, #14]
 800de92:	2b10      	cmp	r3, #16
 800de94:	d002      	beq.n	800de9c <I2C_ITError+0x24>
 800de96:	7bbb      	ldrb	r3, [r7, #14]
 800de98:	2b40      	cmp	r3, #64	; 0x40
 800de9a:	d10a      	bne.n	800deb2 <I2C_ITError+0x3a>
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	2b22      	cmp	r3, #34	; 0x22
 800dea0:	d107      	bne.n	800deb2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800deb0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800deb2:	7bfb      	ldrb	r3, [r7, #15]
 800deb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800deb8:	2b28      	cmp	r3, #40	; 0x28
 800deba:	d107      	bne.n	800decc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2228      	movs	r2, #40	; 0x28
 800dec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800deca:	e015      	b.n	800def8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ded6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800deda:	d00a      	beq.n	800def2 <I2C_ITError+0x7a>
 800dedc:	7bfb      	ldrb	r3, [r7, #15]
 800dede:	2b60      	cmp	r3, #96	; 0x60
 800dee0:	d007      	beq.n	800def2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2220      	movs	r2, #32
 800dee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2200      	movs	r2, #0
 800deee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df06:	d162      	bne.n	800dfce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	685a      	ldr	r2, [r3, #4]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df16:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800df20:	b2db      	uxtb	r3, r3
 800df22:	2b01      	cmp	r3, #1
 800df24:	d020      	beq.n	800df68 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df2a:	4a6a      	ldr	r2, [pc, #424]	; (800e0d4 <I2C_ITError+0x25c>)
 800df2c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df32:	4618      	mov	r0, r3
 800df34:	f7fd f8ec 	bl	800b110 <HAL_DMA_Abort_IT>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f000 8089 	beq.w	800e052 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f022 0201 	bic.w	r2, r2, #1
 800df4e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2220      	movs	r2, #32
 800df54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800df62:	4610      	mov	r0, r2
 800df64:	4798      	blx	r3
 800df66:	e074      	b.n	800e052 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6c:	4a59      	ldr	r2, [pc, #356]	; (800e0d4 <I2C_ITError+0x25c>)
 800df6e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df74:	4618      	mov	r0, r3
 800df76:	f7fd f8cb 	bl	800b110 <HAL_DMA_Abort_IT>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d068      	beq.n	800e052 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	695b      	ldr	r3, [r3, #20]
 800df86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df8a:	2b40      	cmp	r3, #64	; 0x40
 800df8c:	d10b      	bne.n	800dfa6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	691a      	ldr	r2, [r3, #16]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df98:	b2d2      	uxtb	r2, r2
 800df9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa0:	1c5a      	adds	r2, r3, #1
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f022 0201 	bic.w	r2, r2, #1
 800dfb4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2220      	movs	r2, #32
 800dfba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dfc8:	4610      	mov	r0, r2
 800dfca:	4798      	blx	r3
 800dfcc:	e041      	b.n	800e052 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b60      	cmp	r3, #96	; 0x60
 800dfd8:	d125      	bne.n	800e026 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2220      	movs	r2, #32
 800dfde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	695b      	ldr	r3, [r3, #20]
 800dfee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dff2:	2b40      	cmp	r3, #64	; 0x40
 800dff4:	d10b      	bne.n	800e00e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	691a      	ldr	r2, [r3, #16]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e000:	b2d2      	uxtb	r2, r2
 800e002:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e008:	1c5a      	adds	r2, r3, #1
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f022 0201 	bic.w	r2, r2, #1
 800e01c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7fe fef6 	bl	800ce10 <HAL_I2C_AbortCpltCallback>
 800e024:	e015      	b.n	800e052 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	695b      	ldr	r3, [r3, #20]
 800e02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e030:	2b40      	cmp	r3, #64	; 0x40
 800e032:	d10b      	bne.n	800e04c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	691a      	ldr	r2, [r3, #16]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03e:	b2d2      	uxtb	r2, r2
 800e040:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	1c5a      	adds	r2, r3, #1
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7fe fed5 	bl	800cdfc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e056:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	f003 0301 	and.w	r3, r3, #1
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10e      	bne.n	800e080 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d109      	bne.n	800e080 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e072:	2b00      	cmp	r3, #0
 800e074:	d104      	bne.n	800e080 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d007      	beq.n	800e090 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	685a      	ldr	r2, [r3, #4]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e08e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e096:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e09c:	f003 0304 	and.w	r3, r3, #4
 800e0a0:	2b04      	cmp	r3, #4
 800e0a2:	d113      	bne.n	800e0cc <I2C_ITError+0x254>
 800e0a4:	7bfb      	ldrb	r3, [r7, #15]
 800e0a6:	2b28      	cmp	r3, #40	; 0x28
 800e0a8:	d110      	bne.n	800e0cc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	4a0a      	ldr	r2, [pc, #40]	; (800e0d8 <I2C_ITError+0x260>)
 800e0ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2220      	movs	r2, #32
 800e0ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f7fe fe7a 	bl	800cdc0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e0cc:	bf00      	nop
 800e0ce:	3710      	adds	r7, #16
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	0800e679 	.word	0x0800e679
 800e0d8:	ffff0000 	.word	0xffff0000

0800e0dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b088      	sub	sp, #32
 800e0e0:	af02      	add	r7, sp, #8
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	607a      	str	r2, [r7, #4]
 800e0e6:	603b      	str	r3, [r7, #0]
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	2b08      	cmp	r3, #8
 800e0f6:	d006      	beq.n	800e106 <I2C_MasterRequestWrite+0x2a>
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d003      	beq.n	800e106 <I2C_MasterRequestWrite+0x2a>
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e104:	d108      	bne.n	800e118 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e114:	601a      	str	r2, [r3, #0]
 800e116:	e00b      	b.n	800e130 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e11c:	2b12      	cmp	r3, #18
 800e11e:	d107      	bne.n	800e130 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e12e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2200      	movs	r2, #0
 800e138:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f000 fb43 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d00d      	beq.n	800e164 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e156:	d103      	bne.n	800e160 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e15e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e160:	2303      	movs	r3, #3
 800e162:	e035      	b.n	800e1d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	691b      	ldr	r3, [r3, #16]
 800e168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e16c:	d108      	bne.n	800e180 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e16e:	897b      	ldrh	r3, [r7, #10]
 800e170:	b2db      	uxtb	r3, r3
 800e172:	461a      	mov	r2, r3
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e17c:	611a      	str	r2, [r3, #16]
 800e17e:	e01b      	b.n	800e1b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e180:	897b      	ldrh	r3, [r7, #10]
 800e182:	11db      	asrs	r3, r3, #7
 800e184:	b2db      	uxtb	r3, r3
 800e186:	f003 0306 	and.w	r3, r3, #6
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	f063 030f 	orn	r3, r3, #15
 800e190:	b2da      	uxtb	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	490e      	ldr	r1, [pc, #56]	; (800e1d8 <I2C_MasterRequestWrite+0xfc>)
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f000 fb69 	bl	800e876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e010      	b.n	800e1d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e1ae:	897b      	ldrh	r3, [r7, #10]
 800e1b0:	b2da      	uxtb	r2, r3
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	4907      	ldr	r1, [pc, #28]	; (800e1dc <I2C_MasterRequestWrite+0x100>)
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	f000 fb59 	bl	800e876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d001      	beq.n	800e1ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e000      	b.n	800e1d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e1ce:	2300      	movs	r3, #0
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3718      	adds	r7, #24
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}
 800e1d8:	00010008 	.word	0x00010008
 800e1dc:	00010002 	.word	0x00010002

0800e1e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b088      	sub	sp, #32
 800e1e4:	af02      	add	r7, sp, #8
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	607a      	str	r2, [r7, #4]
 800e1ea:	603b      	str	r3, [r7, #0]
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e204:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2b08      	cmp	r3, #8
 800e20a:	d006      	beq.n	800e21a <I2C_MasterRequestRead+0x3a>
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	2b01      	cmp	r3, #1
 800e210:	d003      	beq.n	800e21a <I2C_MasterRequestRead+0x3a>
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e218:	d108      	bne.n	800e22c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e228:	601a      	str	r2, [r3, #0]
 800e22a:	e00b      	b.n	800e244 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e230:	2b11      	cmp	r3, #17
 800e232:	d107      	bne.n	800e244 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e242:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f000 fab9 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00d      	beq.n	800e278 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e26a:	d103      	bne.n	800e274 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e272:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e274:	2303      	movs	r3, #3
 800e276:	e079      	b.n	800e36c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	691b      	ldr	r3, [r3, #16]
 800e27c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e280:	d108      	bne.n	800e294 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e282:	897b      	ldrh	r3, [r7, #10]
 800e284:	b2db      	uxtb	r3, r3
 800e286:	f043 0301 	orr.w	r3, r3, #1
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	611a      	str	r2, [r3, #16]
 800e292:	e05f      	b.n	800e354 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e294:	897b      	ldrh	r3, [r7, #10]
 800e296:	11db      	asrs	r3, r3, #7
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	f003 0306 	and.w	r3, r3, #6
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	f063 030f 	orn	r3, r3, #15
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	4930      	ldr	r1, [pc, #192]	; (800e374 <I2C_MasterRequestRead+0x194>)
 800e2b2:	68f8      	ldr	r0, [r7, #12]
 800e2b4:	f000 fadf 	bl	800e876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d001      	beq.n	800e2c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e054      	b.n	800e36c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e2c2:	897b      	ldrh	r3, [r7, #10]
 800e2c4:	b2da      	uxtb	r2, r3
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	4929      	ldr	r1, [pc, #164]	; (800e378 <I2C_MasterRequestRead+0x198>)
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	f000 facf 	bl	800e876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d001      	beq.n	800e2e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	e044      	b.n	800e36c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	613b      	str	r3, [r7, #16]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	695b      	ldr	r3, [r3, #20]
 800e2ec:	613b      	str	r3, [r7, #16]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	699b      	ldr	r3, [r3, #24]
 800e2f4:	613b      	str	r3, [r7, #16]
 800e2f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e306:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	9300      	str	r3, [sp, #0]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2200      	movs	r2, #0
 800e310:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e314:	68f8      	ldr	r0, [r7, #12]
 800e316:	f000 fa57 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00d      	beq.n	800e33c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e32a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e32e:	d103      	bne.n	800e338 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e336:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e338:	2303      	movs	r3, #3
 800e33a:	e017      	b.n	800e36c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e33c:	897b      	ldrh	r3, [r7, #10]
 800e33e:	11db      	asrs	r3, r3, #7
 800e340:	b2db      	uxtb	r3, r3
 800e342:	f003 0306 	and.w	r3, r3, #6
 800e346:	b2db      	uxtb	r3, r3
 800e348:	f063 030e 	orn	r3, r3, #14
 800e34c:	b2da      	uxtb	r2, r3
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	4907      	ldr	r1, [pc, #28]	; (800e378 <I2C_MasterRequestRead+0x198>)
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f000 fa8b 	bl	800e876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d001      	beq.n	800e36a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e366:	2301      	movs	r3, #1
 800e368:	e000      	b.n	800e36c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e36a:	2300      	movs	r3, #0
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3718      	adds	r7, #24
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	00010008 	.word	0x00010008
 800e378:	00010002 	.word	0x00010002

0800e37c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b088      	sub	sp, #32
 800e380:	af02      	add	r7, sp, #8
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	4608      	mov	r0, r1
 800e386:	4611      	mov	r1, r2
 800e388:	461a      	mov	r2, r3
 800e38a:	4603      	mov	r3, r0
 800e38c:	817b      	strh	r3, [r7, #10]
 800e38e:	460b      	mov	r3, r1
 800e390:	813b      	strh	r3, [r7, #8]
 800e392:	4613      	mov	r3, r2
 800e394:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e3a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	6a3b      	ldr	r3, [r7, #32]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f000 fa08 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00d      	beq.n	800e3da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3cc:	d103      	bne.n	800e3d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e3d6:	2303      	movs	r3, #3
 800e3d8:	e05f      	b.n	800e49a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e3da:	897b      	ldrh	r3, [r7, #10]
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	461a      	mov	r2, r3
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e3e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ec:	6a3a      	ldr	r2, [r7, #32]
 800e3ee:	492d      	ldr	r1, [pc, #180]	; (800e4a4 <I2C_RequestMemoryWrite+0x128>)
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f000 fa40 	bl	800e876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e04c      	b.n	800e49a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e400:	2300      	movs	r3, #0
 800e402:	617b      	str	r3, [r7, #20]
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	695b      	ldr	r3, [r3, #20]
 800e40a:	617b      	str	r3, [r7, #20]
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	699b      	ldr	r3, [r3, #24]
 800e412:	617b      	str	r3, [r7, #20]
 800e414:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e418:	6a39      	ldr	r1, [r7, #32]
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f000 faaa 	bl	800e974 <I2C_WaitOnTXEFlagUntilTimeout>
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00d      	beq.n	800e442 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e42a:	2b04      	cmp	r3, #4
 800e42c:	d107      	bne.n	800e43e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e43c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e43e:	2301      	movs	r3, #1
 800e440:	e02b      	b.n	800e49a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e442:	88fb      	ldrh	r3, [r7, #6]
 800e444:	2b01      	cmp	r3, #1
 800e446:	d105      	bne.n	800e454 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e448:	893b      	ldrh	r3, [r7, #8]
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	611a      	str	r2, [r3, #16]
 800e452:	e021      	b.n	800e498 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e454:	893b      	ldrh	r3, [r7, #8]
 800e456:	0a1b      	lsrs	r3, r3, #8
 800e458:	b29b      	uxth	r3, r3
 800e45a:	b2da      	uxtb	r2, r3
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e464:	6a39      	ldr	r1, [r7, #32]
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f000 fa84 	bl	800e974 <I2C_WaitOnTXEFlagUntilTimeout>
 800e46c:	4603      	mov	r3, r0
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00d      	beq.n	800e48e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e476:	2b04      	cmp	r3, #4
 800e478:	d107      	bne.n	800e48a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e488:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e48a:	2301      	movs	r3, #1
 800e48c:	e005      	b.n	800e49a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e48e:	893b      	ldrh	r3, [r7, #8]
 800e490:	b2da      	uxtb	r2, r3
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e498:	2300      	movs	r3, #0
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3718      	adds	r7, #24
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	00010002 	.word	0x00010002

0800e4a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b088      	sub	sp, #32
 800e4ac:	af02      	add	r7, sp, #8
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	4608      	mov	r0, r1
 800e4b2:	4611      	mov	r1, r2
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	817b      	strh	r3, [r7, #10]
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	813b      	strh	r3, [r7, #8]
 800e4be:	4613      	mov	r3, r2
 800e4c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e4d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e4e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	6a3b      	ldr	r3, [r7, #32]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f000 f96a 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00d      	beq.n	800e516 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e508:	d103      	bne.n	800e512 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e510:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e512:	2303      	movs	r3, #3
 800e514:	e0aa      	b.n	800e66c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e516:	897b      	ldrh	r3, [r7, #10]
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	461a      	mov	r2, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e524:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	6a3a      	ldr	r2, [r7, #32]
 800e52a:	4952      	ldr	r1, [pc, #328]	; (800e674 <I2C_RequestMemoryRead+0x1cc>)
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 f9a2 	bl	800e876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e538:	2301      	movs	r3, #1
 800e53a:	e097      	b.n	800e66c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e53c:	2300      	movs	r3, #0
 800e53e:	617b      	str	r3, [r7, #20]
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	695b      	ldr	r3, [r3, #20]
 800e546:	617b      	str	r3, [r7, #20]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	699b      	ldr	r3, [r3, #24]
 800e54e:	617b      	str	r3, [r7, #20]
 800e550:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e554:	6a39      	ldr	r1, [r7, #32]
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f000 fa0c 	bl	800e974 <I2C_WaitOnTXEFlagUntilTimeout>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d00d      	beq.n	800e57e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e566:	2b04      	cmp	r3, #4
 800e568:	d107      	bne.n	800e57a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e578:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e57a:	2301      	movs	r3, #1
 800e57c:	e076      	b.n	800e66c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e57e:	88fb      	ldrh	r3, [r7, #6]
 800e580:	2b01      	cmp	r3, #1
 800e582:	d105      	bne.n	800e590 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e584:	893b      	ldrh	r3, [r7, #8]
 800e586:	b2da      	uxtb	r2, r3
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	611a      	str	r2, [r3, #16]
 800e58e:	e021      	b.n	800e5d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e590:	893b      	ldrh	r3, [r7, #8]
 800e592:	0a1b      	lsrs	r3, r3, #8
 800e594:	b29b      	uxth	r3, r3
 800e596:	b2da      	uxtb	r2, r3
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5a0:	6a39      	ldr	r1, [r7, #32]
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f000 f9e6 	bl	800e974 <I2C_WaitOnTXEFlagUntilTimeout>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00d      	beq.n	800e5ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5b2:	2b04      	cmp	r3, #4
 800e5b4:	d107      	bne.n	800e5c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e050      	b.n	800e66c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e5ca:	893b      	ldrh	r3, [r7, #8]
 800e5cc:	b2da      	uxtb	r2, r3
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e5d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5d6:	6a39      	ldr	r1, [r7, #32]
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f000 f9cb 	bl	800e974 <I2C_WaitOnTXEFlagUntilTimeout>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d00d      	beq.n	800e600 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5e8:	2b04      	cmp	r3, #4
 800e5ea:	d107      	bne.n	800e5fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	e035      	b.n	800e66c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e60e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	6a3b      	ldr	r3, [r7, #32]
 800e616:	2200      	movs	r2, #0
 800e618:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e61c:	68f8      	ldr	r0, [r7, #12]
 800e61e:	f000 f8d3 	bl	800e7c8 <I2C_WaitOnFlagUntilTimeout>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00d      	beq.n	800e644 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e636:	d103      	bne.n	800e640 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e63e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e640:	2303      	movs	r3, #3
 800e642:	e013      	b.n	800e66c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e644:	897b      	ldrh	r3, [r7, #10]
 800e646:	b2db      	uxtb	r3, r3
 800e648:	f043 0301 	orr.w	r3, r3, #1
 800e64c:	b2da      	uxtb	r2, r3
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e656:	6a3a      	ldr	r2, [r7, #32]
 800e658:	4906      	ldr	r1, [pc, #24]	; (800e674 <I2C_RequestMemoryRead+0x1cc>)
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f000 f90b 	bl	800e876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d001      	beq.n	800e66a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e666:	2301      	movs	r3, #1
 800e668:	e000      	b.n	800e66c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e66a:	2300      	movs	r3, #0
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3718      	adds	r7, #24
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	00010002 	.word	0x00010002

0800e678 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b086      	sub	sp, #24
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e680:	2300      	movs	r3, #0
 800e682:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e688:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e690:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e692:	4b4b      	ldr	r3, [pc, #300]	; (800e7c0 <I2C_DMAAbort+0x148>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	08db      	lsrs	r3, r3, #3
 800e698:	4a4a      	ldr	r2, [pc, #296]	; (800e7c4 <I2C_DMAAbort+0x14c>)
 800e69a:	fba2 2303 	umull	r2, r3, r2, r3
 800e69e:	0a1a      	lsrs	r2, r3, #8
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4413      	add	r3, r2
 800e6a6:	00da      	lsls	r2, r3, #3
 800e6a8:	1ad3      	subs	r3, r2, r3
 800e6aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d106      	bne.n	800e6c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6b6:	f043 0220 	orr.w	r2, r3, #32
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800e6be:	e00a      	b.n	800e6d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	3b01      	subs	r3, #1
 800e6c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6d4:	d0ea      	beq.n	800e6ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d003      	beq.n	800e6e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d003      	beq.n	800e6f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e704:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	2200      	movs	r2, #0
 800e70a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e710:	2b00      	cmp	r3, #0
 800e712:	d003      	beq.n	800e71c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e718:	2200      	movs	r2, #0
 800e71a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e720:	2b00      	cmp	r3, #0
 800e722:	d003      	beq.n	800e72c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e728:	2200      	movs	r2, #0
 800e72a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f022 0201 	bic.w	r2, r2, #1
 800e73a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b60      	cmp	r3, #96	; 0x60
 800e746:	d10e      	bne.n	800e766 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	2220      	movs	r2, #32
 800e74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	2200      	movs	r2, #0
 800e754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	2200      	movs	r2, #0
 800e75c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e75e:	6978      	ldr	r0, [r7, #20]
 800e760:	f7fe fb56 	bl	800ce10 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e764:	e027      	b.n	800e7b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e766:	7cfb      	ldrb	r3, [r7, #19]
 800e768:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e76c:	2b28      	cmp	r3, #40	; 0x28
 800e76e:	d117      	bne.n	800e7a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f042 0201 	orr.w	r2, r2, #1
 800e77e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e78e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	2200      	movs	r2, #0
 800e794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	2228      	movs	r2, #40	; 0x28
 800e79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e79e:	e007      	b.n	800e7b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	2220      	movs	r2, #32
 800e7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800e7b0:	6978      	ldr	r0, [r7, #20]
 800e7b2:	f7fe fb23 	bl	800cdfc <HAL_I2C_ErrorCallback>
}
 800e7b6:	bf00      	nop
 800e7b8:	3718      	adds	r7, #24
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	20000038 	.word	0x20000038
 800e7c4:	14f8b589 	.word	0x14f8b589

0800e7c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	603b      	str	r3, [r7, #0]
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e7d8:	e025      	b.n	800e826 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e0:	d021      	beq.n	800e826 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7e2:	f7fc f94f 	bl	800aa84 <HAL_GetTick>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	1ad3      	subs	r3, r2, r3
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d302      	bcc.n	800e7f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d116      	bne.n	800e826 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2220      	movs	r2, #32
 800e802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2200      	movs	r2, #0
 800e80a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e812:	f043 0220 	orr.w	r2, r3, #32
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2200      	movs	r2, #0
 800e81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e822:	2301      	movs	r3, #1
 800e824:	e023      	b.n	800e86e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	0c1b      	lsrs	r3, r3, #16
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d10d      	bne.n	800e84c <I2C_WaitOnFlagUntilTimeout+0x84>
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	695b      	ldr	r3, [r3, #20]
 800e836:	43da      	mvns	r2, r3
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	4013      	ands	r3, r2
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	2b00      	cmp	r3, #0
 800e840:	bf0c      	ite	eq
 800e842:	2301      	moveq	r3, #1
 800e844:	2300      	movne	r3, #0
 800e846:	b2db      	uxtb	r3, r3
 800e848:	461a      	mov	r2, r3
 800e84a:	e00c      	b.n	800e866 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	699b      	ldr	r3, [r3, #24]
 800e852:	43da      	mvns	r2, r3
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	4013      	ands	r3, r2
 800e858:	b29b      	uxth	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	bf0c      	ite	eq
 800e85e:	2301      	moveq	r3, #1
 800e860:	2300      	movne	r3, #0
 800e862:	b2db      	uxtb	r3, r3
 800e864:	461a      	mov	r2, r3
 800e866:	79fb      	ldrb	r3, [r7, #7]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d0b6      	beq.n	800e7da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e86c:	2300      	movs	r3, #0
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b084      	sub	sp, #16
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	60f8      	str	r0, [r7, #12]
 800e87e:	60b9      	str	r1, [r7, #8]
 800e880:	607a      	str	r2, [r7, #4]
 800e882:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e884:	e051      	b.n	800e92a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	695b      	ldr	r3, [r3, #20]
 800e88c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e894:	d123      	bne.n	800e8de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e8ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2220      	movs	r2, #32
 800e8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ca:	f043 0204 	orr.w	r2, r3, #4
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e046      	b.n	800e96c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8e4:	d021      	beq.n	800e92a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8e6:	f7fc f8cd 	bl	800aa84 <HAL_GetTick>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d302      	bcc.n	800e8fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d116      	bne.n	800e92a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2220      	movs	r2, #32
 800e906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2200      	movs	r2, #0
 800e90e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e916:	f043 0220 	orr.w	r2, r3, #32
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2200      	movs	r2, #0
 800e922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e926:	2301      	movs	r3, #1
 800e928:	e020      	b.n	800e96c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	0c1b      	lsrs	r3, r3, #16
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	2b01      	cmp	r3, #1
 800e932:	d10c      	bne.n	800e94e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	695b      	ldr	r3, [r3, #20]
 800e93a:	43da      	mvns	r2, r3
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	4013      	ands	r3, r2
 800e940:	b29b      	uxth	r3, r3
 800e942:	2b00      	cmp	r3, #0
 800e944:	bf14      	ite	ne
 800e946:	2301      	movne	r3, #1
 800e948:	2300      	moveq	r3, #0
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	e00b      	b.n	800e966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	699b      	ldr	r3, [r3, #24]
 800e954:	43da      	mvns	r2, r3
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	4013      	ands	r3, r2
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	bf14      	ite	ne
 800e960:	2301      	movne	r3, #1
 800e962:	2300      	moveq	r3, #0
 800e964:	b2db      	uxtb	r3, r3
 800e966:	2b00      	cmp	r3, #0
 800e968:	d18d      	bne.n	800e886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3710      	adds	r7, #16
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e980:	e02d      	b.n	800e9de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f000 f900 	bl	800eb88 <I2C_IsAcknowledgeFailed>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d001      	beq.n	800e992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e98e:	2301      	movs	r3, #1
 800e990:	e02d      	b.n	800e9ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e998:	d021      	beq.n	800e9de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e99a:	f7fc f873 	bl	800aa84 <HAL_GetTick>
 800e99e:	4602      	mov	r2, r0
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	68ba      	ldr	r2, [r7, #8]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d302      	bcc.n	800e9b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d116      	bne.n	800e9de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2220      	movs	r2, #32
 800e9ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ca:	f043 0220 	orr.w	r2, r3, #32
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e9da:	2301      	movs	r3, #1
 800e9dc:	e007      	b.n	800e9ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	695b      	ldr	r3, [r3, #20]
 800e9e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9e8:	2b80      	cmp	r3, #128	; 0x80
 800e9ea:	d1ca      	bne.n	800e982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e9ec:	2300      	movs	r3, #0
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e9f6:	b580      	push	{r7, lr}
 800e9f8:	b084      	sub	sp, #16
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	60f8      	str	r0, [r7, #12]
 800e9fe:	60b9      	str	r1, [r7, #8]
 800ea00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ea02:	e02d      	b.n	800ea60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f000 f8bf 	bl	800eb88 <I2C_IsAcknowledgeFailed>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d001      	beq.n	800ea14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ea10:	2301      	movs	r3, #1
 800ea12:	e02d      	b.n	800ea70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea1a:	d021      	beq.n	800ea60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea1c:	f7fc f832 	bl	800aa84 <HAL_GetTick>
 800ea20:	4602      	mov	r2, r0
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	1ad3      	subs	r3, r2, r3
 800ea26:	68ba      	ldr	r2, [r7, #8]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d302      	bcc.n	800ea32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d116      	bne.n	800ea60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2200      	movs	r2, #0
 800ea36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2220      	movs	r2, #32
 800ea3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2200      	movs	r2, #0
 800ea44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea4c:	f043 0220 	orr.w	r2, r3, #32
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e007      	b.n	800ea70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	f003 0304 	and.w	r3, r3, #4
 800ea6a:	2b04      	cmp	r3, #4
 800ea6c:	d1ca      	bne.n	800ea04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ea6e:	2300      	movs	r3, #0
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3710      	adds	r7, #16
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ea80:	2300      	movs	r3, #0
 800ea82:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800ea84:	4b13      	ldr	r3, [pc, #76]	; (800ead4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	08db      	lsrs	r3, r3, #3
 800ea8a:	4a13      	ldr	r2, [pc, #76]	; (800ead8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800ea8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ea90:	0a1a      	lsrs	r2, r3, #8
 800ea92:	4613      	mov	r3, r2
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4413      	add	r3, r2
 800ea98:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	3b01      	subs	r3, #1
 800ea9e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d107      	bne.n	800eab6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaaa:	f043 0220 	orr.w	r2, r3, #32
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	e008      	b.n	800eac8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eac4:	d0e9      	beq.n	800ea9a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3714      	adds	r7, #20
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr
 800ead4:	20000038 	.word	0x20000038
 800ead8:	14f8b589 	.word	0x14f8b589

0800eadc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800eae8:	e042      	b.n	800eb70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	695b      	ldr	r3, [r3, #20]
 800eaf0:	f003 0310 	and.w	r3, r3, #16
 800eaf4:	2b10      	cmp	r3, #16
 800eaf6:	d119      	bne.n	800eb2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f06f 0210 	mvn.w	r2, #16
 800eb00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2200      	movs	r2, #0
 800eb06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2220      	movs	r2, #32
 800eb0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2200      	movs	r2, #0
 800eb24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e029      	b.n	800eb80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb2c:	f7fb ffaa 	bl	800aa84 <HAL_GetTick>
 800eb30:	4602      	mov	r2, r0
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	1ad3      	subs	r3, r2, r3
 800eb36:	68ba      	ldr	r2, [r7, #8]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d302      	bcc.n	800eb42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d116      	bne.n	800eb70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2200      	movs	r2, #0
 800eb46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2220      	movs	r2, #32
 800eb4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2200      	movs	r2, #0
 800eb54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb5c:	f043 0220 	orr.w	r2, r3, #32
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e007      	b.n	800eb80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	695b      	ldr	r3, [r3, #20]
 800eb76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb7a:	2b40      	cmp	r3, #64	; 0x40
 800eb7c:	d1b5      	bne.n	800eaea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800eb7e:	2300      	movs	r3, #0
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	695b      	ldr	r3, [r3, #20]
 800eb96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eb9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb9e:	d11b      	bne.n	800ebd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800eba8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2200      	movs	r2, #0
 800ebae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2220      	movs	r2, #32
 800ebb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebc4:	f043 0204 	orr.w	r2, r3, #4
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	e000      	b.n	800ebda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	370c      	adds	r7, #12
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr

0800ebe6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ebe6:	b480      	push	{r7}
 800ebe8:	b083      	sub	sp, #12
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ebf6:	d103      	bne.n	800ec00 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ebfe:	e007      	b.n	800ec10 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec04:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ec08:	d102      	bne.n	800ec10 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2208      	movs	r2, #8
 800ec0e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ec10:	bf00      	nop
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d101      	bne.n	800ec2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	e264      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f003 0301 	and.w	r3, r3, #1
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d075      	beq.n	800ed26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ec3a:	4ba3      	ldr	r3, [pc, #652]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ec3c:	689b      	ldr	r3, [r3, #8]
 800ec3e:	f003 030c 	and.w	r3, r3, #12
 800ec42:	2b04      	cmp	r3, #4
 800ec44:	d00c      	beq.n	800ec60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ec46:	4ba0      	ldr	r3, [pc, #640]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ec4e:	2b08      	cmp	r3, #8
 800ec50:	d112      	bne.n	800ec78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ec52:	4b9d      	ldr	r3, [pc, #628]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec5e:	d10b      	bne.n	800ec78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ec60:	4b99      	ldr	r3, [pc, #612]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d05b      	beq.n	800ed24 <HAL_RCC_OscConfig+0x108>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d157      	bne.n	800ed24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ec74:	2301      	movs	r3, #1
 800ec76:	e23f      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec80:	d106      	bne.n	800ec90 <HAL_RCC_OscConfig+0x74>
 800ec82:	4b91      	ldr	r3, [pc, #580]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	4a90      	ldr	r2, [pc, #576]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ec88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec8c:	6013      	str	r3, [r2, #0]
 800ec8e:	e01d      	b.n	800eccc <HAL_RCC_OscConfig+0xb0>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ec98:	d10c      	bne.n	800ecb4 <HAL_RCC_OscConfig+0x98>
 800ec9a:	4b8b      	ldr	r3, [pc, #556]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4a8a      	ldr	r2, [pc, #552]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800eca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eca4:	6013      	str	r3, [r2, #0]
 800eca6:	4b88      	ldr	r3, [pc, #544]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4a87      	ldr	r2, [pc, #540]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ecac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ecb0:	6013      	str	r3, [r2, #0]
 800ecb2:	e00b      	b.n	800eccc <HAL_RCC_OscConfig+0xb0>
 800ecb4:	4b84      	ldr	r3, [pc, #528]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a83      	ldr	r2, [pc, #524]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ecba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ecbe:	6013      	str	r3, [r2, #0]
 800ecc0:	4b81      	ldr	r3, [pc, #516]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	4a80      	ldr	r2, [pc, #512]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ecc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ecca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d013      	beq.n	800ecfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecd4:	f7fb fed6 	bl	800aa84 <HAL_GetTick>
 800ecd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ecda:	e008      	b.n	800ecee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ecdc:	f7fb fed2 	bl	800aa84 <HAL_GetTick>
 800ece0:	4602      	mov	r2, r0
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	2b64      	cmp	r3, #100	; 0x64
 800ece8:	d901      	bls.n	800ecee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ecea:	2303      	movs	r3, #3
 800ecec:	e204      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ecee:	4b76      	ldr	r3, [pc, #472]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d0f0      	beq.n	800ecdc <HAL_RCC_OscConfig+0xc0>
 800ecfa:	e014      	b.n	800ed26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecfc:	f7fb fec2 	bl	800aa84 <HAL_GetTick>
 800ed00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ed02:	e008      	b.n	800ed16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ed04:	f7fb febe 	bl	800aa84 <HAL_GetTick>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	1ad3      	subs	r3, r2, r3
 800ed0e:	2b64      	cmp	r3, #100	; 0x64
 800ed10:	d901      	bls.n	800ed16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ed12:	2303      	movs	r3, #3
 800ed14:	e1f0      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ed16:	4b6c      	ldr	r3, [pc, #432]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d1f0      	bne.n	800ed04 <HAL_RCC_OscConfig+0xe8>
 800ed22:	e000      	b.n	800ed26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ed24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f003 0302 	and.w	r3, r3, #2
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d063      	beq.n	800edfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ed32:	4b65      	ldr	r3, [pc, #404]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ed34:	689b      	ldr	r3, [r3, #8]
 800ed36:	f003 030c 	and.w	r3, r3, #12
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00b      	beq.n	800ed56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ed3e:	4b62      	ldr	r3, [pc, #392]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ed40:	689b      	ldr	r3, [r3, #8]
 800ed42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ed46:	2b08      	cmp	r3, #8
 800ed48:	d11c      	bne.n	800ed84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ed4a:	4b5f      	ldr	r3, [pc, #380]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d116      	bne.n	800ed84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ed56:	4b5c      	ldr	r3, [pc, #368]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f003 0302 	and.w	r3, r3, #2
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d005      	beq.n	800ed6e <HAL_RCC_OscConfig+0x152>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d001      	beq.n	800ed6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e1c4      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ed6e:	4b56      	ldr	r3, [pc, #344]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	691b      	ldr	r3, [r3, #16]
 800ed7a:	00db      	lsls	r3, r3, #3
 800ed7c:	4952      	ldr	r1, [pc, #328]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ed82:	e03a      	b.n	800edfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d020      	beq.n	800edce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ed8c:	4b4f      	ldr	r3, [pc, #316]	; (800eecc <HAL_RCC_OscConfig+0x2b0>)
 800ed8e:	2201      	movs	r2, #1
 800ed90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed92:	f7fb fe77 	bl	800aa84 <HAL_GetTick>
 800ed96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ed98:	e008      	b.n	800edac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ed9a:	f7fb fe73 	bl	800aa84 <HAL_GetTick>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	1ad3      	subs	r3, r2, r3
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	d901      	bls.n	800edac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800eda8:	2303      	movs	r3, #3
 800edaa:	e1a5      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800edac:	4b46      	ldr	r3, [pc, #280]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f003 0302 	and.w	r3, r3, #2
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d0f0      	beq.n	800ed9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800edb8:	4b43      	ldr	r3, [pc, #268]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	691b      	ldr	r3, [r3, #16]
 800edc4:	00db      	lsls	r3, r3, #3
 800edc6:	4940      	ldr	r1, [pc, #256]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800edc8:	4313      	orrs	r3, r2
 800edca:	600b      	str	r3, [r1, #0]
 800edcc:	e015      	b.n	800edfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800edce:	4b3f      	ldr	r3, [pc, #252]	; (800eecc <HAL_RCC_OscConfig+0x2b0>)
 800edd0:	2200      	movs	r2, #0
 800edd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edd4:	f7fb fe56 	bl	800aa84 <HAL_GetTick>
 800edd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800edda:	e008      	b.n	800edee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eddc:	f7fb fe52 	bl	800aa84 <HAL_GetTick>
 800ede0:	4602      	mov	r2, r0
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	1ad3      	subs	r3, r2, r3
 800ede6:	2b02      	cmp	r3, #2
 800ede8:	d901      	bls.n	800edee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800edea:	2303      	movs	r3, #3
 800edec:	e184      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800edee:	4b36      	ldr	r3, [pc, #216]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f003 0302 	and.w	r3, r3, #2
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d1f0      	bne.n	800eddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f003 0308 	and.w	r3, r3, #8
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d030      	beq.n	800ee68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	695b      	ldr	r3, [r3, #20]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d016      	beq.n	800ee3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ee0e:	4b30      	ldr	r3, [pc, #192]	; (800eed0 <HAL_RCC_OscConfig+0x2b4>)
 800ee10:	2201      	movs	r2, #1
 800ee12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee14:	f7fb fe36 	bl	800aa84 <HAL_GetTick>
 800ee18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ee1a:	e008      	b.n	800ee2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ee1c:	f7fb fe32 	bl	800aa84 <HAL_GetTick>
 800ee20:	4602      	mov	r2, r0
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	2b02      	cmp	r3, #2
 800ee28:	d901      	bls.n	800ee2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ee2a:	2303      	movs	r3, #3
 800ee2c:	e164      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ee2e:	4b26      	ldr	r3, [pc, #152]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ee30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee32:	f003 0302 	and.w	r3, r3, #2
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d0f0      	beq.n	800ee1c <HAL_RCC_OscConfig+0x200>
 800ee3a:	e015      	b.n	800ee68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ee3c:	4b24      	ldr	r3, [pc, #144]	; (800eed0 <HAL_RCC_OscConfig+0x2b4>)
 800ee3e:	2200      	movs	r2, #0
 800ee40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ee42:	f7fb fe1f 	bl	800aa84 <HAL_GetTick>
 800ee46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ee48:	e008      	b.n	800ee5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ee4a:	f7fb fe1b 	bl	800aa84 <HAL_GetTick>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	d901      	bls.n	800ee5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ee58:	2303      	movs	r3, #3
 800ee5a:	e14d      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ee5c:	4b1a      	ldr	r3, [pc, #104]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ee5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee60:	f003 0302 	and.w	r3, r3, #2
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1f0      	bne.n	800ee4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f003 0304 	and.w	r3, r3, #4
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	f000 80a0 	beq.w	800efb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ee76:	2300      	movs	r3, #0
 800ee78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ee7a:	4b13      	ldr	r3, [pc, #76]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ee7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d10f      	bne.n	800eea6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ee86:	2300      	movs	r3, #0
 800ee88:	60bb      	str	r3, [r7, #8]
 800ee8a:	4b0f      	ldr	r3, [pc, #60]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ee8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee8e:	4a0e      	ldr	r2, [pc, #56]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ee90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee94:	6413      	str	r3, [r2, #64]	; 0x40
 800ee96:	4b0c      	ldr	r3, [pc, #48]	; (800eec8 <HAL_RCC_OscConfig+0x2ac>)
 800ee98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee9e:	60bb      	str	r3, [r7, #8]
 800eea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800eea2:	2301      	movs	r3, #1
 800eea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eea6:	4b0b      	ldr	r3, [pc, #44]	; (800eed4 <HAL_RCC_OscConfig+0x2b8>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d121      	bne.n	800eef6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800eeb2:	4b08      	ldr	r3, [pc, #32]	; (800eed4 <HAL_RCC_OscConfig+0x2b8>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a07      	ldr	r2, [pc, #28]	; (800eed4 <HAL_RCC_OscConfig+0x2b8>)
 800eeb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eebe:	f7fb fde1 	bl	800aa84 <HAL_GetTick>
 800eec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eec4:	e011      	b.n	800eeea <HAL_RCC_OscConfig+0x2ce>
 800eec6:	bf00      	nop
 800eec8:	40023800 	.word	0x40023800
 800eecc:	42470000 	.word	0x42470000
 800eed0:	42470e80 	.word	0x42470e80
 800eed4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eed8:	f7fb fdd4 	bl	800aa84 <HAL_GetTick>
 800eedc:	4602      	mov	r2, r0
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	1ad3      	subs	r3, r2, r3
 800eee2:	2b02      	cmp	r3, #2
 800eee4:	d901      	bls.n	800eeea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800eee6:	2303      	movs	r3, #3
 800eee8:	e106      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eeea:	4b85      	ldr	r3, [pc, #532]	; (800f100 <HAL_RCC_OscConfig+0x4e4>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d0f0      	beq.n	800eed8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	689b      	ldr	r3, [r3, #8]
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d106      	bne.n	800ef0c <HAL_RCC_OscConfig+0x2f0>
 800eefe:	4b81      	ldr	r3, [pc, #516]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800ef00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef02:	4a80      	ldr	r2, [pc, #512]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800ef04:	f043 0301 	orr.w	r3, r3, #1
 800ef08:	6713      	str	r3, [r2, #112]	; 0x70
 800ef0a:	e01c      	b.n	800ef46 <HAL_RCC_OscConfig+0x32a>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	2b05      	cmp	r3, #5
 800ef12:	d10c      	bne.n	800ef2e <HAL_RCC_OscConfig+0x312>
 800ef14:	4b7b      	ldr	r3, [pc, #492]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800ef16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef18:	4a7a      	ldr	r2, [pc, #488]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800ef1a:	f043 0304 	orr.w	r3, r3, #4
 800ef1e:	6713      	str	r3, [r2, #112]	; 0x70
 800ef20:	4b78      	ldr	r3, [pc, #480]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800ef22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef24:	4a77      	ldr	r2, [pc, #476]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800ef26:	f043 0301 	orr.w	r3, r3, #1
 800ef2a:	6713      	str	r3, [r2, #112]	; 0x70
 800ef2c:	e00b      	b.n	800ef46 <HAL_RCC_OscConfig+0x32a>
 800ef2e:	4b75      	ldr	r3, [pc, #468]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800ef30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef32:	4a74      	ldr	r2, [pc, #464]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800ef34:	f023 0301 	bic.w	r3, r3, #1
 800ef38:	6713      	str	r3, [r2, #112]	; 0x70
 800ef3a:	4b72      	ldr	r3, [pc, #456]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800ef3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef3e:	4a71      	ldr	r2, [pc, #452]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800ef40:	f023 0304 	bic.w	r3, r3, #4
 800ef44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d015      	beq.n	800ef7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef4e:	f7fb fd99 	bl	800aa84 <HAL_GetTick>
 800ef52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ef54:	e00a      	b.n	800ef6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ef56:	f7fb fd95 	bl	800aa84 <HAL_GetTick>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	1ad3      	subs	r3, r2, r3
 800ef60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d901      	bls.n	800ef6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800ef68:	2303      	movs	r3, #3
 800ef6a:	e0c5      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ef6c:	4b65      	ldr	r3, [pc, #404]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800ef6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef70:	f003 0302 	and.w	r3, r3, #2
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d0ee      	beq.n	800ef56 <HAL_RCC_OscConfig+0x33a>
 800ef78:	e014      	b.n	800efa4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef7a:	f7fb fd83 	bl	800aa84 <HAL_GetTick>
 800ef7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ef80:	e00a      	b.n	800ef98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ef82:	f7fb fd7f 	bl	800aa84 <HAL_GetTick>
 800ef86:	4602      	mov	r2, r0
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	1ad3      	subs	r3, r2, r3
 800ef8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d901      	bls.n	800ef98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800ef94:	2303      	movs	r3, #3
 800ef96:	e0af      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ef98:	4b5a      	ldr	r3, [pc, #360]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800ef9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef9c:	f003 0302 	and.w	r3, r3, #2
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d1ee      	bne.n	800ef82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800efa4:	7dfb      	ldrb	r3, [r7, #23]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d105      	bne.n	800efb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800efaa:	4b56      	ldr	r3, [pc, #344]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800efac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efae:	4a55      	ldr	r2, [pc, #340]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800efb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800efb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	699b      	ldr	r3, [r3, #24]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	f000 809b 	beq.w	800f0f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800efc0:	4b50      	ldr	r3, [pc, #320]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	f003 030c 	and.w	r3, r3, #12
 800efc8:	2b08      	cmp	r3, #8
 800efca:	d05c      	beq.n	800f086 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	699b      	ldr	r3, [r3, #24]
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	d141      	bne.n	800f058 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800efd4:	4b4c      	ldr	r3, [pc, #304]	; (800f108 <HAL_RCC_OscConfig+0x4ec>)
 800efd6:	2200      	movs	r2, #0
 800efd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800efda:	f7fb fd53 	bl	800aa84 <HAL_GetTick>
 800efde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800efe0:	e008      	b.n	800eff4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800efe2:	f7fb fd4f 	bl	800aa84 <HAL_GetTick>
 800efe6:	4602      	mov	r2, r0
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	1ad3      	subs	r3, r2, r3
 800efec:	2b02      	cmp	r3, #2
 800efee:	d901      	bls.n	800eff4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800eff0:	2303      	movs	r3, #3
 800eff2:	e081      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eff4:	4b43      	ldr	r3, [pc, #268]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800effc:	2b00      	cmp	r3, #0
 800effe:	d1f0      	bne.n	800efe2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	69da      	ldr	r2, [r3, #28]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6a1b      	ldr	r3, [r3, #32]
 800f008:	431a      	orrs	r2, r3
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00e:	019b      	lsls	r3, r3, #6
 800f010:	431a      	orrs	r2, r3
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f016:	085b      	lsrs	r3, r3, #1
 800f018:	3b01      	subs	r3, #1
 800f01a:	041b      	lsls	r3, r3, #16
 800f01c:	431a      	orrs	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f022:	061b      	lsls	r3, r3, #24
 800f024:	4937      	ldr	r1, [pc, #220]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800f026:	4313      	orrs	r3, r2
 800f028:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f02a:	4b37      	ldr	r3, [pc, #220]	; (800f108 <HAL_RCC_OscConfig+0x4ec>)
 800f02c:	2201      	movs	r2, #1
 800f02e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f030:	f7fb fd28 	bl	800aa84 <HAL_GetTick>
 800f034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f036:	e008      	b.n	800f04a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f038:	f7fb fd24 	bl	800aa84 <HAL_GetTick>
 800f03c:	4602      	mov	r2, r0
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	1ad3      	subs	r3, r2, r3
 800f042:	2b02      	cmp	r3, #2
 800f044:	d901      	bls.n	800f04a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800f046:	2303      	movs	r3, #3
 800f048:	e056      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f04a:	4b2e      	ldr	r3, [pc, #184]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f052:	2b00      	cmp	r3, #0
 800f054:	d0f0      	beq.n	800f038 <HAL_RCC_OscConfig+0x41c>
 800f056:	e04e      	b.n	800f0f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f058:	4b2b      	ldr	r3, [pc, #172]	; (800f108 <HAL_RCC_OscConfig+0x4ec>)
 800f05a:	2200      	movs	r2, #0
 800f05c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f05e:	f7fb fd11 	bl	800aa84 <HAL_GetTick>
 800f062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f064:	e008      	b.n	800f078 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f066:	f7fb fd0d 	bl	800aa84 <HAL_GetTick>
 800f06a:	4602      	mov	r2, r0
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	1ad3      	subs	r3, r2, r3
 800f070:	2b02      	cmp	r3, #2
 800f072:	d901      	bls.n	800f078 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800f074:	2303      	movs	r3, #3
 800f076:	e03f      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f078:	4b22      	ldr	r3, [pc, #136]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f080:	2b00      	cmp	r3, #0
 800f082:	d1f0      	bne.n	800f066 <HAL_RCC_OscConfig+0x44a>
 800f084:	e037      	b.n	800f0f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	699b      	ldr	r3, [r3, #24]
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d101      	bne.n	800f092 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800f08e:	2301      	movs	r3, #1
 800f090:	e032      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f092:	4b1c      	ldr	r3, [pc, #112]	; (800f104 <HAL_RCC_OscConfig+0x4e8>)
 800f094:	685b      	ldr	r3, [r3, #4]
 800f096:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	699b      	ldr	r3, [r3, #24]
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d028      	beq.n	800f0f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d121      	bne.n	800f0f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d11a      	bne.n	800f0f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f0bc:	68fa      	ldr	r2, [r7, #12]
 800f0be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f0c2:	4013      	ands	r3, r2
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f0c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d111      	bne.n	800f0f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0d8:	085b      	lsrs	r3, r3, #1
 800f0da:	3b01      	subs	r3, #1
 800f0dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d107      	bne.n	800f0f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d001      	beq.n	800f0f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	e000      	b.n	800f0f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800f0f6:	2300      	movs	r3, #0
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3718      	adds	r7, #24
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	40007000 	.word	0x40007000
 800f104:	40023800 	.word	0x40023800
 800f108:	42470060 	.word	0x42470060

0800f10c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d101      	bne.n	800f120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f11c:	2301      	movs	r3, #1
 800f11e:	e0cc      	b.n	800f2ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f120:	4b68      	ldr	r3, [pc, #416]	; (800f2c4 <HAL_RCC_ClockConfig+0x1b8>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f003 0307 	and.w	r3, r3, #7
 800f128:	683a      	ldr	r2, [r7, #0]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d90c      	bls.n	800f148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f12e:	4b65      	ldr	r3, [pc, #404]	; (800f2c4 <HAL_RCC_ClockConfig+0x1b8>)
 800f130:	683a      	ldr	r2, [r7, #0]
 800f132:	b2d2      	uxtb	r2, r2
 800f134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f136:	4b63      	ldr	r3, [pc, #396]	; (800f2c4 <HAL_RCC_ClockConfig+0x1b8>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f003 0307 	and.w	r3, r3, #7
 800f13e:	683a      	ldr	r2, [r7, #0]
 800f140:	429a      	cmp	r2, r3
 800f142:	d001      	beq.n	800f148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f144:	2301      	movs	r3, #1
 800f146:	e0b8      	b.n	800f2ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f003 0302 	and.w	r3, r3, #2
 800f150:	2b00      	cmp	r3, #0
 800f152:	d020      	beq.n	800f196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f003 0304 	and.w	r3, r3, #4
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d005      	beq.n	800f16c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f160:	4b59      	ldr	r3, [pc, #356]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	4a58      	ldr	r2, [pc, #352]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f16a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	f003 0308 	and.w	r3, r3, #8
 800f174:	2b00      	cmp	r3, #0
 800f176:	d005      	beq.n	800f184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f178:	4b53      	ldr	r3, [pc, #332]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f17a:	689b      	ldr	r3, [r3, #8]
 800f17c:	4a52      	ldr	r2, [pc, #328]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f17e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f184:	4b50      	ldr	r3, [pc, #320]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	494d      	ldr	r1, [pc, #308]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f192:	4313      	orrs	r3, r2
 800f194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f003 0301 	and.w	r3, r3, #1
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d044      	beq.n	800f22c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d107      	bne.n	800f1ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f1aa:	4b47      	ldr	r3, [pc, #284]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d119      	bne.n	800f1ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	e07f      	b.n	800f2ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	2b02      	cmp	r3, #2
 800f1c0:	d003      	beq.n	800f1ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f1c6:	2b03      	cmp	r3, #3
 800f1c8:	d107      	bne.n	800f1da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f1ca:	4b3f      	ldr	r3, [pc, #252]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d109      	bne.n	800f1ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	e06f      	b.n	800f2ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f1da:	4b3b      	ldr	r3, [pc, #236]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f003 0302 	and.w	r3, r3, #2
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d101      	bne.n	800f1ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e067      	b.n	800f2ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f1ea:	4b37      	ldr	r3, [pc, #220]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f1ec:	689b      	ldr	r3, [r3, #8]
 800f1ee:	f023 0203 	bic.w	r2, r3, #3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	4934      	ldr	r1, [pc, #208]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f1f8:	4313      	orrs	r3, r2
 800f1fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f1fc:	f7fb fc42 	bl	800aa84 <HAL_GetTick>
 800f200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f202:	e00a      	b.n	800f21a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f204:	f7fb fc3e 	bl	800aa84 <HAL_GetTick>
 800f208:	4602      	mov	r2, r0
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	1ad3      	subs	r3, r2, r3
 800f20e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f212:	4293      	cmp	r3, r2
 800f214:	d901      	bls.n	800f21a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f216:	2303      	movs	r3, #3
 800f218:	e04f      	b.n	800f2ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f21a:	4b2b      	ldr	r3, [pc, #172]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	f003 020c 	and.w	r2, r3, #12
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	009b      	lsls	r3, r3, #2
 800f228:	429a      	cmp	r2, r3
 800f22a:	d1eb      	bne.n	800f204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f22c:	4b25      	ldr	r3, [pc, #148]	; (800f2c4 <HAL_RCC_ClockConfig+0x1b8>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f003 0307 	and.w	r3, r3, #7
 800f234:	683a      	ldr	r2, [r7, #0]
 800f236:	429a      	cmp	r2, r3
 800f238:	d20c      	bcs.n	800f254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f23a:	4b22      	ldr	r3, [pc, #136]	; (800f2c4 <HAL_RCC_ClockConfig+0x1b8>)
 800f23c:	683a      	ldr	r2, [r7, #0]
 800f23e:	b2d2      	uxtb	r2, r2
 800f240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f242:	4b20      	ldr	r3, [pc, #128]	; (800f2c4 <HAL_RCC_ClockConfig+0x1b8>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f003 0307 	and.w	r3, r3, #7
 800f24a:	683a      	ldr	r2, [r7, #0]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d001      	beq.n	800f254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f250:	2301      	movs	r3, #1
 800f252:	e032      	b.n	800f2ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f003 0304 	and.w	r3, r3, #4
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d008      	beq.n	800f272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f260:	4b19      	ldr	r3, [pc, #100]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f262:	689b      	ldr	r3, [r3, #8]
 800f264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	68db      	ldr	r3, [r3, #12]
 800f26c:	4916      	ldr	r1, [pc, #88]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f26e:	4313      	orrs	r3, r2
 800f270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f003 0308 	and.w	r3, r3, #8
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d009      	beq.n	800f292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f27e:	4b12      	ldr	r3, [pc, #72]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f280:	689b      	ldr	r3, [r3, #8]
 800f282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	691b      	ldr	r3, [r3, #16]
 800f28a:	00db      	lsls	r3, r3, #3
 800f28c:	490e      	ldr	r1, [pc, #56]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f28e:	4313      	orrs	r3, r2
 800f290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f292:	f000 f821 	bl	800f2d8 <HAL_RCC_GetSysClockFreq>
 800f296:	4602      	mov	r2, r0
 800f298:	4b0b      	ldr	r3, [pc, #44]	; (800f2c8 <HAL_RCC_ClockConfig+0x1bc>)
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	091b      	lsrs	r3, r3, #4
 800f29e:	f003 030f 	and.w	r3, r3, #15
 800f2a2:	490a      	ldr	r1, [pc, #40]	; (800f2cc <HAL_RCC_ClockConfig+0x1c0>)
 800f2a4:	5ccb      	ldrb	r3, [r1, r3]
 800f2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800f2aa:	4a09      	ldr	r2, [pc, #36]	; (800f2d0 <HAL_RCC_ClockConfig+0x1c4>)
 800f2ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f2ae:	4b09      	ldr	r3, [pc, #36]	; (800f2d4 <HAL_RCC_ClockConfig+0x1c8>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fb fba2 	bl	800a9fc <HAL_InitTick>

  return HAL_OK;
 800f2b8:	2300      	movs	r3, #0
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	40023c00 	.word	0x40023c00
 800f2c8:	40023800 	.word	0x40023800
 800f2cc:	080273ac 	.word	0x080273ac
 800f2d0:	20000038 	.word	0x20000038
 800f2d4:	2000003c 	.word	0x2000003c

0800f2d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f2d8:	b5b0      	push	{r4, r5, r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f2de:	2100      	movs	r1, #0
 800f2e0:	6079      	str	r1, [r7, #4]
 800f2e2:	2100      	movs	r1, #0
 800f2e4:	60f9      	str	r1, [r7, #12]
 800f2e6:	2100      	movs	r1, #0
 800f2e8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800f2ea:	2100      	movs	r1, #0
 800f2ec:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f2ee:	4952      	ldr	r1, [pc, #328]	; (800f438 <HAL_RCC_GetSysClockFreq+0x160>)
 800f2f0:	6889      	ldr	r1, [r1, #8]
 800f2f2:	f001 010c 	and.w	r1, r1, #12
 800f2f6:	2908      	cmp	r1, #8
 800f2f8:	d00d      	beq.n	800f316 <HAL_RCC_GetSysClockFreq+0x3e>
 800f2fa:	2908      	cmp	r1, #8
 800f2fc:	f200 8094 	bhi.w	800f428 <HAL_RCC_GetSysClockFreq+0x150>
 800f300:	2900      	cmp	r1, #0
 800f302:	d002      	beq.n	800f30a <HAL_RCC_GetSysClockFreq+0x32>
 800f304:	2904      	cmp	r1, #4
 800f306:	d003      	beq.n	800f310 <HAL_RCC_GetSysClockFreq+0x38>
 800f308:	e08e      	b.n	800f428 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f30a:	4b4c      	ldr	r3, [pc, #304]	; (800f43c <HAL_RCC_GetSysClockFreq+0x164>)
 800f30c:	60bb      	str	r3, [r7, #8]
       break;
 800f30e:	e08e      	b.n	800f42e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f310:	4b4b      	ldr	r3, [pc, #300]	; (800f440 <HAL_RCC_GetSysClockFreq+0x168>)
 800f312:	60bb      	str	r3, [r7, #8]
      break;
 800f314:	e08b      	b.n	800f42e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f316:	4948      	ldr	r1, [pc, #288]	; (800f438 <HAL_RCC_GetSysClockFreq+0x160>)
 800f318:	6849      	ldr	r1, [r1, #4]
 800f31a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800f31e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f320:	4945      	ldr	r1, [pc, #276]	; (800f438 <HAL_RCC_GetSysClockFreq+0x160>)
 800f322:	6849      	ldr	r1, [r1, #4]
 800f324:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800f328:	2900      	cmp	r1, #0
 800f32a:	d024      	beq.n	800f376 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f32c:	4942      	ldr	r1, [pc, #264]	; (800f438 <HAL_RCC_GetSysClockFreq+0x160>)
 800f32e:	6849      	ldr	r1, [r1, #4]
 800f330:	0989      	lsrs	r1, r1, #6
 800f332:	4608      	mov	r0, r1
 800f334:	f04f 0100 	mov.w	r1, #0
 800f338:	f240 14ff 	movw	r4, #511	; 0x1ff
 800f33c:	f04f 0500 	mov.w	r5, #0
 800f340:	ea00 0204 	and.w	r2, r0, r4
 800f344:	ea01 0305 	and.w	r3, r1, r5
 800f348:	493d      	ldr	r1, [pc, #244]	; (800f440 <HAL_RCC_GetSysClockFreq+0x168>)
 800f34a:	fb01 f003 	mul.w	r0, r1, r3
 800f34e:	2100      	movs	r1, #0
 800f350:	fb01 f102 	mul.w	r1, r1, r2
 800f354:	1844      	adds	r4, r0, r1
 800f356:	493a      	ldr	r1, [pc, #232]	; (800f440 <HAL_RCC_GetSysClockFreq+0x168>)
 800f358:	fba2 0101 	umull	r0, r1, r2, r1
 800f35c:	1863      	adds	r3, r4, r1
 800f35e:	4619      	mov	r1, r3
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	461a      	mov	r2, r3
 800f364:	f04f 0300 	mov.w	r3, #0
 800f368:	f7f1 fca6 	bl	8000cb8 <__aeabi_uldivmod>
 800f36c:	4602      	mov	r2, r0
 800f36e:	460b      	mov	r3, r1
 800f370:	4613      	mov	r3, r2
 800f372:	60fb      	str	r3, [r7, #12]
 800f374:	e04a      	b.n	800f40c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f376:	4b30      	ldr	r3, [pc, #192]	; (800f438 <HAL_RCC_GetSysClockFreq+0x160>)
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	099b      	lsrs	r3, r3, #6
 800f37c:	461a      	mov	r2, r3
 800f37e:	f04f 0300 	mov.w	r3, #0
 800f382:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f386:	f04f 0100 	mov.w	r1, #0
 800f38a:	ea02 0400 	and.w	r4, r2, r0
 800f38e:	ea03 0501 	and.w	r5, r3, r1
 800f392:	4620      	mov	r0, r4
 800f394:	4629      	mov	r1, r5
 800f396:	f04f 0200 	mov.w	r2, #0
 800f39a:	f04f 0300 	mov.w	r3, #0
 800f39e:	014b      	lsls	r3, r1, #5
 800f3a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f3a4:	0142      	lsls	r2, r0, #5
 800f3a6:	4610      	mov	r0, r2
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	1b00      	subs	r0, r0, r4
 800f3ac:	eb61 0105 	sbc.w	r1, r1, r5
 800f3b0:	f04f 0200 	mov.w	r2, #0
 800f3b4:	f04f 0300 	mov.w	r3, #0
 800f3b8:	018b      	lsls	r3, r1, #6
 800f3ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f3be:	0182      	lsls	r2, r0, #6
 800f3c0:	1a12      	subs	r2, r2, r0
 800f3c2:	eb63 0301 	sbc.w	r3, r3, r1
 800f3c6:	f04f 0000 	mov.w	r0, #0
 800f3ca:	f04f 0100 	mov.w	r1, #0
 800f3ce:	00d9      	lsls	r1, r3, #3
 800f3d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f3d4:	00d0      	lsls	r0, r2, #3
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	460b      	mov	r3, r1
 800f3da:	1912      	adds	r2, r2, r4
 800f3dc:	eb45 0303 	adc.w	r3, r5, r3
 800f3e0:	f04f 0000 	mov.w	r0, #0
 800f3e4:	f04f 0100 	mov.w	r1, #0
 800f3e8:	0299      	lsls	r1, r3, #10
 800f3ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800f3ee:	0290      	lsls	r0, r2, #10
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	f04f 0300 	mov.w	r3, #0
 800f400:	f7f1 fc5a 	bl	8000cb8 <__aeabi_uldivmod>
 800f404:	4602      	mov	r2, r0
 800f406:	460b      	mov	r3, r1
 800f408:	4613      	mov	r3, r2
 800f40a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f40c:	4b0a      	ldr	r3, [pc, #40]	; (800f438 <HAL_RCC_GetSysClockFreq+0x160>)
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	0c1b      	lsrs	r3, r3, #16
 800f412:	f003 0303 	and.w	r3, r3, #3
 800f416:	3301      	adds	r3, #1
 800f418:	005b      	lsls	r3, r3, #1
 800f41a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	fbb2 f3f3 	udiv	r3, r2, r3
 800f424:	60bb      	str	r3, [r7, #8]
      break;
 800f426:	e002      	b.n	800f42e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f428:	4b04      	ldr	r3, [pc, #16]	; (800f43c <HAL_RCC_GetSysClockFreq+0x164>)
 800f42a:	60bb      	str	r3, [r7, #8]
      break;
 800f42c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f42e:	68bb      	ldr	r3, [r7, #8]
}
 800f430:	4618      	mov	r0, r3
 800f432:	3710      	adds	r7, #16
 800f434:	46bd      	mov	sp, r7
 800f436:	bdb0      	pop	{r4, r5, r7, pc}
 800f438:	40023800 	.word	0x40023800
 800f43c:	00f42400 	.word	0x00f42400
 800f440:	017d7840 	.word	0x017d7840

0800f444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f444:	b480      	push	{r7}
 800f446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f448:	4b03      	ldr	r3, [pc, #12]	; (800f458 <HAL_RCC_GetHCLKFreq+0x14>)
 800f44a:	681b      	ldr	r3, [r3, #0]
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	46bd      	mov	sp, r7
 800f450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f454:	4770      	bx	lr
 800f456:	bf00      	nop
 800f458:	20000038 	.word	0x20000038

0800f45c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f460:	f7ff fff0 	bl	800f444 <HAL_RCC_GetHCLKFreq>
 800f464:	4602      	mov	r2, r0
 800f466:	4b05      	ldr	r3, [pc, #20]	; (800f47c <HAL_RCC_GetPCLK1Freq+0x20>)
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	0a9b      	lsrs	r3, r3, #10
 800f46c:	f003 0307 	and.w	r3, r3, #7
 800f470:	4903      	ldr	r1, [pc, #12]	; (800f480 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f472:	5ccb      	ldrb	r3, [r1, r3]
 800f474:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f478:	4618      	mov	r0, r3
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	40023800 	.word	0x40023800
 800f480:	080273bc 	.word	0x080273bc

0800f484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f488:	f7ff ffdc 	bl	800f444 <HAL_RCC_GetHCLKFreq>
 800f48c:	4602      	mov	r2, r0
 800f48e:	4b05      	ldr	r3, [pc, #20]	; (800f4a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	0b5b      	lsrs	r3, r3, #13
 800f494:	f003 0307 	and.w	r3, r3, #7
 800f498:	4903      	ldr	r1, [pc, #12]	; (800f4a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f49a:	5ccb      	ldrb	r3, [r1, r3]
 800f49c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	40023800 	.word	0x40023800
 800f4a8:	080273bc 	.word	0x080273bc

0800f4ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d101      	bne.n	800f4be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	e07b      	b.n	800f5b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d108      	bne.n	800f4d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f4ce:	d009      	beq.n	800f4e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	61da      	str	r2, [r3, #28]
 800f4d6:	e005      	b.n	800f4e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d106      	bne.n	800f504 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7fa fb04 	bl	8009b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2202      	movs	r2, #2
 800f508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f51a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	689b      	ldr	r3, [r3, #8]
 800f528:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f52c:	431a      	orrs	r2, r3
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f536:	431a      	orrs	r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	691b      	ldr	r3, [r3, #16]
 800f53c:	f003 0302 	and.w	r3, r3, #2
 800f540:	431a      	orrs	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	695b      	ldr	r3, [r3, #20]
 800f546:	f003 0301 	and.w	r3, r3, #1
 800f54a:	431a      	orrs	r2, r3
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	699b      	ldr	r3, [r3, #24]
 800f550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f554:	431a      	orrs	r2, r3
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	69db      	ldr	r3, [r3, #28]
 800f55a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f55e:	431a      	orrs	r2, r3
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6a1b      	ldr	r3, [r3, #32]
 800f564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f568:	ea42 0103 	orr.w	r1, r2, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f570:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	430a      	orrs	r2, r1
 800f57a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	699b      	ldr	r3, [r3, #24]
 800f580:	0c1b      	lsrs	r3, r3, #16
 800f582:	f003 0104 	and.w	r1, r3, #4
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58a:	f003 0210 	and.w	r2, r3, #16
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	430a      	orrs	r2, r1
 800f594:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	69da      	ldr	r2, [r3, #28]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f5a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f5b4:	2300      	movs	r3, #0
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b08c      	sub	sp, #48	; 0x30
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	60f8      	str	r0, [r7, #12]
 800f5c6:	60b9      	str	r1, [r7, #8]
 800f5c8:	607a      	str	r2, [r7, #4]
 800f5ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d101      	bne.n	800f5e4 <HAL_SPI_TransmitReceive+0x26>
 800f5e0:	2302      	movs	r3, #2
 800f5e2:	e18a      	b.n	800f8fa <HAL_SPI_TransmitReceive+0x33c>
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f5ec:	f7fb fa4a 	bl	800aa84 <HAL_GetTick>
 800f5f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f5f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f602:	887b      	ldrh	r3, [r7, #2]
 800f604:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d00f      	beq.n	800f62e <HAL_SPI_TransmitReceive+0x70>
 800f60e:	69fb      	ldr	r3, [r7, #28]
 800f610:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f614:	d107      	bne.n	800f626 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d103      	bne.n	800f626 <HAL_SPI_TransmitReceive+0x68>
 800f61e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f622:	2b04      	cmp	r3, #4
 800f624:	d003      	beq.n	800f62e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f626:	2302      	movs	r3, #2
 800f628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f62c:	e15b      	b.n	800f8e6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d005      	beq.n	800f640 <HAL_SPI_TransmitReceive+0x82>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d002      	beq.n	800f640 <HAL_SPI_TransmitReceive+0x82>
 800f63a:	887b      	ldrh	r3, [r7, #2]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d103      	bne.n	800f648 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f640:	2301      	movs	r3, #1
 800f642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f646:	e14e      	b.n	800f8e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	2b04      	cmp	r3, #4
 800f652:	d003      	beq.n	800f65c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2205      	movs	r2, #5
 800f658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2200      	movs	r2, #0
 800f660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	887a      	ldrh	r2, [r7, #2]
 800f66c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	887a      	ldrh	r2, [r7, #2]
 800f672:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	887a      	ldrh	r2, [r7, #2]
 800f67e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	887a      	ldrh	r2, [r7, #2]
 800f684:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2200      	movs	r2, #0
 800f68a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2200      	movs	r2, #0
 800f690:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f69c:	2b40      	cmp	r3, #64	; 0x40
 800f69e:	d007      	beq.n	800f6b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	681a      	ldr	r2, [r3, #0]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f6ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6b8:	d178      	bne.n	800f7ac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d002      	beq.n	800f6c8 <HAL_SPI_TransmitReceive+0x10a>
 800f6c2:	8b7b      	ldrh	r3, [r7, #26]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d166      	bne.n	800f796 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6cc:	881a      	ldrh	r2, [r3, #0]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6d8:	1c9a      	adds	r2, r3, #2
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	3b01      	subs	r3, #1
 800f6e6:	b29a      	uxth	r2, r3
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f6ec:	e053      	b.n	800f796 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	f003 0302 	and.w	r3, r3, #2
 800f6f8:	2b02      	cmp	r3, #2
 800f6fa:	d11b      	bne.n	800f734 <HAL_SPI_TransmitReceive+0x176>
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f700:	b29b      	uxth	r3, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	d016      	beq.n	800f734 <HAL_SPI_TransmitReceive+0x176>
 800f706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d113      	bne.n	800f734 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f710:	881a      	ldrh	r2, [r3, #0]
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f71c:	1c9a      	adds	r2, r3, #2
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f726:	b29b      	uxth	r3, r3
 800f728:	3b01      	subs	r3, #1
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f730:	2300      	movs	r3, #0
 800f732:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	f003 0301 	and.w	r3, r3, #1
 800f73e:	2b01      	cmp	r3, #1
 800f740:	d119      	bne.n	800f776 <HAL_SPI_TransmitReceive+0x1b8>
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f746:	b29b      	uxth	r3, r3
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d014      	beq.n	800f776 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	68da      	ldr	r2, [r3, #12]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f756:	b292      	uxth	r2, r2
 800f758:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f75e:	1c9a      	adds	r2, r3, #2
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f768:	b29b      	uxth	r3, r3
 800f76a:	3b01      	subs	r3, #1
 800f76c:	b29a      	uxth	r2, r3
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f772:	2301      	movs	r3, #1
 800f774:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f776:	f7fb f985 	bl	800aa84 <HAL_GetTick>
 800f77a:	4602      	mov	r2, r0
 800f77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77e:	1ad3      	subs	r3, r2, r3
 800f780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f782:	429a      	cmp	r2, r3
 800f784:	d807      	bhi.n	800f796 <HAL_SPI_TransmitReceive+0x1d8>
 800f786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f78c:	d003      	beq.n	800f796 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f78e:	2303      	movs	r3, #3
 800f790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f794:	e0a7      	b.n	800f8e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d1a6      	bne.n	800f6ee <HAL_SPI_TransmitReceive+0x130>
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d1a1      	bne.n	800f6ee <HAL_SPI_TransmitReceive+0x130>
 800f7aa:	e07c      	b.n	800f8a6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d002      	beq.n	800f7ba <HAL_SPI_TransmitReceive+0x1fc>
 800f7b4:	8b7b      	ldrh	r3, [r7, #26]
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d16b      	bne.n	800f892 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	330c      	adds	r3, #12
 800f7c4:	7812      	ldrb	r2, [r2, #0]
 800f7c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7cc:	1c5a      	adds	r2, r3, #1
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	b29a      	uxth	r2, r3
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f7e0:	e057      	b.n	800f892 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	689b      	ldr	r3, [r3, #8]
 800f7e8:	f003 0302 	and.w	r3, r3, #2
 800f7ec:	2b02      	cmp	r3, #2
 800f7ee:	d11c      	bne.n	800f82a <HAL_SPI_TransmitReceive+0x26c>
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d017      	beq.n	800f82a <HAL_SPI_TransmitReceive+0x26c>
 800f7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d114      	bne.n	800f82a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	330c      	adds	r3, #12
 800f80a:	7812      	ldrb	r2, [r2, #0]
 800f80c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f812:	1c5a      	adds	r2, r3, #1
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	3b01      	subs	r3, #1
 800f820:	b29a      	uxth	r2, r3
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f826:	2300      	movs	r3, #0
 800f828:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	689b      	ldr	r3, [r3, #8]
 800f830:	f003 0301 	and.w	r3, r3, #1
 800f834:	2b01      	cmp	r3, #1
 800f836:	d119      	bne.n	800f86c <HAL_SPI_TransmitReceive+0x2ae>
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d014      	beq.n	800f86c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	68da      	ldr	r2, [r3, #12]
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f84c:	b2d2      	uxtb	r2, r2
 800f84e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f854:	1c5a      	adds	r2, r3, #1
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f85e:	b29b      	uxth	r3, r3
 800f860:	3b01      	subs	r3, #1
 800f862:	b29a      	uxth	r2, r3
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f868:	2301      	movs	r3, #1
 800f86a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f86c:	f7fb f90a 	bl	800aa84 <HAL_GetTick>
 800f870:	4602      	mov	r2, r0
 800f872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f878:	429a      	cmp	r2, r3
 800f87a:	d803      	bhi.n	800f884 <HAL_SPI_TransmitReceive+0x2c6>
 800f87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f882:	d102      	bne.n	800f88a <HAL_SPI_TransmitReceive+0x2cc>
 800f884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f886:	2b00      	cmp	r3, #0
 800f888:	d103      	bne.n	800f892 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f88a:	2303      	movs	r3, #3
 800f88c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f890:	e029      	b.n	800f8e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f896:	b29b      	uxth	r3, r3
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d1a2      	bne.n	800f7e2 <HAL_SPI_TransmitReceive+0x224>
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d19d      	bne.n	800f7e2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f000 f9d0 	bl	800fc50 <SPI_EndRxTxTransaction>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d006      	beq.n	800f8c4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	2220      	movs	r2, #32
 800f8c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f8c2:	e010      	b.n	800f8e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	689b      	ldr	r3, [r3, #8]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d10b      	bne.n	800f8e4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	617b      	str	r3, [r7, #20]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	617b      	str	r3, [r7, #20]
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	617b      	str	r3, [r7, #20]
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	e000      	b.n	800f8e6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f8e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f8f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3730      	adds	r7, #48	; 0x30
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
	...

0800f904 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b088      	sub	sp, #32
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f91c:	69bb      	ldr	r3, [r7, #24]
 800f91e:	099b      	lsrs	r3, r3, #6
 800f920:	f003 0301 	and.w	r3, r3, #1
 800f924:	2b00      	cmp	r3, #0
 800f926:	d10f      	bne.n	800f948 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f928:	69bb      	ldr	r3, [r7, #24]
 800f92a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d00a      	beq.n	800f948 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	099b      	lsrs	r3, r3, #6
 800f936:	f003 0301 	and.w	r3, r3, #1
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d004      	beq.n	800f948 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	4798      	blx	r3
    return;
 800f946:	e0d7      	b.n	800faf8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f948:	69bb      	ldr	r3, [r7, #24]
 800f94a:	085b      	lsrs	r3, r3, #1
 800f94c:	f003 0301 	and.w	r3, r3, #1
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00a      	beq.n	800f96a <HAL_SPI_IRQHandler+0x66>
 800f954:	69fb      	ldr	r3, [r7, #28]
 800f956:	09db      	lsrs	r3, r3, #7
 800f958:	f003 0301 	and.w	r3, r3, #1
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d004      	beq.n	800f96a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	4798      	blx	r3
    return;
 800f968:	e0c6      	b.n	800faf8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	095b      	lsrs	r3, r3, #5
 800f96e:	f003 0301 	and.w	r3, r3, #1
 800f972:	2b00      	cmp	r3, #0
 800f974:	d10c      	bne.n	800f990 <HAL_SPI_IRQHandler+0x8c>
 800f976:	69bb      	ldr	r3, [r7, #24]
 800f978:	099b      	lsrs	r3, r3, #6
 800f97a:	f003 0301 	and.w	r3, r3, #1
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d106      	bne.n	800f990 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f982:	69bb      	ldr	r3, [r7, #24]
 800f984:	0a1b      	lsrs	r3, r3, #8
 800f986:	f003 0301 	and.w	r3, r3, #1
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	f000 80b4 	beq.w	800faf8 <HAL_SPI_IRQHandler+0x1f4>
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	095b      	lsrs	r3, r3, #5
 800f994:	f003 0301 	and.w	r3, r3, #1
 800f998:	2b00      	cmp	r3, #0
 800f99a:	f000 80ad 	beq.w	800faf8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	099b      	lsrs	r3, r3, #6
 800f9a2:	f003 0301 	and.w	r3, r3, #1
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d023      	beq.n	800f9f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	2b03      	cmp	r3, #3
 800f9b4:	d011      	beq.n	800f9da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9ba:	f043 0204 	orr.w	r2, r3, #4
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	617b      	str	r3, [r7, #20]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	617b      	str	r3, [r7, #20]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	689b      	ldr	r3, [r3, #8]
 800f9d4:	617b      	str	r3, [r7, #20]
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	e00b      	b.n	800f9f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f9da:	2300      	movs	r3, #0
 800f9dc:	613b      	str	r3, [r7, #16]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	613b      	str	r3, [r7, #16]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	689b      	ldr	r3, [r3, #8]
 800f9ec:	613b      	str	r3, [r7, #16]
 800f9ee:	693b      	ldr	r3, [r7, #16]
        return;
 800f9f0:	e082      	b.n	800faf8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	095b      	lsrs	r3, r3, #5
 800f9f6:	f003 0301 	and.w	r3, r3, #1
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d014      	beq.n	800fa28 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa02:	f043 0201 	orr.w	r2, r3, #1
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	60fb      	str	r3, [r7, #12]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	60fb      	str	r3, [r7, #12]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa24:	601a      	str	r2, [r3, #0]
 800fa26:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800fa28:	69bb      	ldr	r3, [r7, #24]
 800fa2a:	0a1b      	lsrs	r3, r3, #8
 800fa2c:	f003 0301 	and.w	r3, r3, #1
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00c      	beq.n	800fa4e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa38:	f043 0208 	orr.w	r2, r3, #8
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fa40:	2300      	movs	r3, #0
 800fa42:	60bb      	str	r3, [r7, #8]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	60bb      	str	r3, [r7, #8]
 800fa4c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d04f      	beq.n	800faf6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	685a      	ldr	r2, [r3, #4]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fa64:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2201      	movs	r2, #1
 800fa6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	f003 0302 	and.w	r3, r3, #2
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d104      	bne.n	800fa82 <HAL_SPI_IRQHandler+0x17e>
 800fa78:	69fb      	ldr	r3, [r7, #28]
 800fa7a:	f003 0301 	and.w	r3, r3, #1
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d034      	beq.n	800faec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	685a      	ldr	r2, [r3, #4]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f022 0203 	bic.w	r2, r2, #3
 800fa90:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d011      	beq.n	800fabe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa9e:	4a18      	ldr	r2, [pc, #96]	; (800fb00 <HAL_SPI_IRQHandler+0x1fc>)
 800faa0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fb fb32 	bl	800b110 <HAL_DMA_Abort_IT>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d005      	beq.n	800fabe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d016      	beq.n	800faf4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800faca:	4a0d      	ldr	r2, [pc, #52]	; (800fb00 <HAL_SPI_IRQHandler+0x1fc>)
 800facc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fb fb1c 	bl	800b110 <HAL_DMA_Abort_IT>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d00a      	beq.n	800faf4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fae2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800faea:	e003      	b.n	800faf4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f000 f809 	bl	800fb04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800faf2:	e000      	b.n	800faf6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800faf4:	bf00      	nop
    return;
 800faf6:	bf00      	nop
  }
}
 800faf8:	3720      	adds	r7, #32
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	0800fb19 	.word	0x0800fb19

0800fb04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800fb04:	b480      	push	{r7}
 800fb06:	b083      	sub	sp, #12
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800fb0c:	bf00      	nop
 800fb0e:	370c      	adds	r7, #12
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr

0800fb18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	f7ff ffe6 	bl	800fb04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800fb38:	bf00      	nop
 800fb3a:	3710      	adds	r7, #16
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b088      	sub	sp, #32
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	603b      	str	r3, [r7, #0]
 800fb4c:	4613      	mov	r3, r2
 800fb4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fb50:	f7fa ff98 	bl	800aa84 <HAL_GetTick>
 800fb54:	4602      	mov	r2, r0
 800fb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb58:	1a9b      	subs	r3, r3, r2
 800fb5a:	683a      	ldr	r2, [r7, #0]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800fb60:	f7fa ff90 	bl	800aa84 <HAL_GetTick>
 800fb64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fb66:	4b39      	ldr	r3, [pc, #228]	; (800fc4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	015b      	lsls	r3, r3, #5
 800fb6c:	0d1b      	lsrs	r3, r3, #20
 800fb6e:	69fa      	ldr	r2, [r7, #28]
 800fb70:	fb02 f303 	mul.w	r3, r2, r3
 800fb74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fb76:	e054      	b.n	800fc22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb7e:	d050      	beq.n	800fc22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fb80:	f7fa ff80 	bl	800aa84 <HAL_GetTick>
 800fb84:	4602      	mov	r2, r0
 800fb86:	69bb      	ldr	r3, [r7, #24]
 800fb88:	1ad3      	subs	r3, r2, r3
 800fb8a:	69fa      	ldr	r2, [r7, #28]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d902      	bls.n	800fb96 <SPI_WaitFlagStateUntilTimeout+0x56>
 800fb90:	69fb      	ldr	r3, [r7, #28]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d13d      	bne.n	800fc12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	685a      	ldr	r2, [r3, #4]
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fbae:	d111      	bne.n	800fbd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	689b      	ldr	r3, [r3, #8]
 800fbb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbb8:	d004      	beq.n	800fbc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	689b      	ldr	r3, [r3, #8]
 800fbbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbc2:	d107      	bne.n	800fbd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	681a      	ldr	r2, [r3, #0]
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fbd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fbdc:	d10f      	bne.n	800fbfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fbec:	601a      	str	r2, [r3, #0]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fbfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2201      	movs	r2, #1
 800fc02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800fc0e:	2303      	movs	r3, #3
 800fc10:	e017      	b.n	800fc42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d101      	bne.n	800fc1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	3b01      	subs	r3, #1
 800fc20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	689a      	ldr	r2, [r3, #8]
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	4013      	ands	r3, r2
 800fc2c:	68ba      	ldr	r2, [r7, #8]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	bf0c      	ite	eq
 800fc32:	2301      	moveq	r3, #1
 800fc34:	2300      	movne	r3, #0
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	461a      	mov	r2, r3
 800fc3a:	79fb      	ldrb	r3, [r7, #7]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d19b      	bne.n	800fb78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fc40:	2300      	movs	r3, #0
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3720      	adds	r7, #32
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	20000038 	.word	0x20000038

0800fc50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b088      	sub	sp, #32
 800fc54:	af02      	add	r7, sp, #8
 800fc56:	60f8      	str	r0, [r7, #12]
 800fc58:	60b9      	str	r1, [r7, #8]
 800fc5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fc5c:	4b1b      	ldr	r3, [pc, #108]	; (800fccc <SPI_EndRxTxTransaction+0x7c>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a1b      	ldr	r2, [pc, #108]	; (800fcd0 <SPI_EndRxTxTransaction+0x80>)
 800fc62:	fba2 2303 	umull	r2, r3, r2, r3
 800fc66:	0d5b      	lsrs	r3, r3, #21
 800fc68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fc6c:	fb02 f303 	mul.w	r3, r2, r3
 800fc70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	685b      	ldr	r3, [r3, #4]
 800fc76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc7a:	d112      	bne.n	800fca2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	9300      	str	r3, [sp, #0]
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	2200      	movs	r2, #0
 800fc84:	2180      	movs	r1, #128	; 0x80
 800fc86:	68f8      	ldr	r0, [r7, #12]
 800fc88:	f7ff ff5a 	bl	800fb40 <SPI_WaitFlagStateUntilTimeout>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d016      	beq.n	800fcc0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc96:	f043 0220 	orr.w	r2, r3, #32
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800fc9e:	2303      	movs	r3, #3
 800fca0:	e00f      	b.n	800fcc2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d00a      	beq.n	800fcbe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	3b01      	subs	r3, #1
 800fcac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcb8:	2b80      	cmp	r3, #128	; 0x80
 800fcba:	d0f2      	beq.n	800fca2 <SPI_EndRxTxTransaction+0x52>
 800fcbc:	e000      	b.n	800fcc0 <SPI_EndRxTxTransaction+0x70>
        break;
 800fcbe:	bf00      	nop
  }

  return HAL_OK;
 800fcc0:	2300      	movs	r3, #0
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3718      	adds	r7, #24
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	20000038 	.word	0x20000038
 800fcd0:	165e9f81 	.word	0x165e9f81

0800fcd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d101      	bne.n	800fce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fce2:	2301      	movs	r3, #1
 800fce4:	e041      	b.n	800fd6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d106      	bne.n	800fd00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f7fa fa84 	bl	800a208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2202      	movs	r2, #2
 800fd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681a      	ldr	r2, [r3, #0]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	3304      	adds	r3, #4
 800fd10:	4619      	mov	r1, r3
 800fd12:	4610      	mov	r0, r2
 800fd14:	f000 fb24 	bl	8010360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2201      	movs	r2, #1
 800fd24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2201      	movs	r2, #1
 800fd34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2201      	movs	r2, #1
 800fd44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2201      	movs	r2, #1
 800fd54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2201      	movs	r2, #1
 800fd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fd68:	2300      	movs	r3, #0
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
	...

0800fd74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b085      	sub	sp, #20
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d001      	beq.n	800fd8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e044      	b.n	800fe16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2202      	movs	r2, #2
 800fd90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	68da      	ldr	r2, [r3, #12]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	f042 0201 	orr.w	r2, r2, #1
 800fda2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4a1e      	ldr	r2, [pc, #120]	; (800fe24 <HAL_TIM_Base_Start_IT+0xb0>)
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	d018      	beq.n	800fde0 <HAL_TIM_Base_Start_IT+0x6c>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdb6:	d013      	beq.n	800fde0 <HAL_TIM_Base_Start_IT+0x6c>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	4a1a      	ldr	r2, [pc, #104]	; (800fe28 <HAL_TIM_Base_Start_IT+0xb4>)
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d00e      	beq.n	800fde0 <HAL_TIM_Base_Start_IT+0x6c>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4a19      	ldr	r2, [pc, #100]	; (800fe2c <HAL_TIM_Base_Start_IT+0xb8>)
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	d009      	beq.n	800fde0 <HAL_TIM_Base_Start_IT+0x6c>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a17      	ldr	r2, [pc, #92]	; (800fe30 <HAL_TIM_Base_Start_IT+0xbc>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d004      	beq.n	800fde0 <HAL_TIM_Base_Start_IT+0x6c>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	4a16      	ldr	r2, [pc, #88]	; (800fe34 <HAL_TIM_Base_Start_IT+0xc0>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d111      	bne.n	800fe04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	f003 0307 	and.w	r3, r3, #7
 800fdea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2b06      	cmp	r3, #6
 800fdf0:	d010      	beq.n	800fe14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	f042 0201 	orr.w	r2, r2, #1
 800fe00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe02:	e007      	b.n	800fe14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f042 0201 	orr.w	r2, r2, #1
 800fe12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3714      	adds	r7, #20
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr
 800fe22:	bf00      	nop
 800fe24:	40010000 	.word	0x40010000
 800fe28:	40000400 	.word	0x40000400
 800fe2c:	40000800 	.word	0x40000800
 800fe30:	40000c00 	.word	0x40000c00
 800fe34:	40014000 	.word	0x40014000

0800fe38 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b083      	sub	sp, #12
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	68da      	ldr	r2, [r3, #12]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f022 0201 	bic.w	r2, r2, #1
 800fe4e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	6a1a      	ldr	r2, [r3, #32]
 800fe56:	f241 1311 	movw	r3, #4369	; 0x1111
 800fe5a:	4013      	ands	r3, r2
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d10f      	bne.n	800fe80 <HAL_TIM_Base_Stop_IT+0x48>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	6a1a      	ldr	r2, [r3, #32]
 800fe66:	f240 4344 	movw	r3, #1092	; 0x444
 800fe6a:	4013      	ands	r3, r2
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d107      	bne.n	800fe80 <HAL_TIM_Base_Stop_IT+0x48>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	681a      	ldr	r2, [r3, #0]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f022 0201 	bic.w	r2, r2, #1
 800fe7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2201      	movs	r2, #1
 800fe84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800fe88:	2300      	movs	r3, #0
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	370c      	adds	r7, #12
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr

0800fe96 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b086      	sub	sp, #24
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
 800fe9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d101      	bne.n	800feaa <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800fea6:	2301      	movs	r3, #1
 800fea8:	e097      	b.n	800ffda <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800feb0:	b2db      	uxtb	r3, r3
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d106      	bne.n	800fec4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2200      	movs	r2, #0
 800feba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f7fa f95c 	bl	800a17c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2202      	movs	r2, #2
 800fec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	689b      	ldr	r3, [r3, #8]
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	6812      	ldr	r2, [r2, #0]
 800fed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800feda:	f023 0307 	bic.w	r3, r3, #7
 800fede:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	3304      	adds	r3, #4
 800fee8:	4619      	mov	r1, r3
 800feea:	4610      	mov	r0, r2
 800feec:	f000 fa38 	bl	8010360 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	689b      	ldr	r3, [r3, #8]
 800fef6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	699b      	ldr	r3, [r3, #24]
 800fefe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	6a1b      	ldr	r3, [r3, #32]
 800ff06:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	697a      	ldr	r2, [r7, #20]
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff18:	f023 0303 	bic.w	r3, r3, #3
 800ff1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	689a      	ldr	r2, [r3, #8]
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	699b      	ldr	r3, [r3, #24]
 800ff26:	021b      	lsls	r3, r3, #8
 800ff28:	4313      	orrs	r3, r2
 800ff2a:	693a      	ldr	r2, [r7, #16]
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ff36:	f023 030c 	bic.w	r3, r3, #12
 800ff3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ff42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ff46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	68da      	ldr	r2, [r3, #12]
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	69db      	ldr	r3, [r3, #28]
 800ff50:	021b      	lsls	r3, r3, #8
 800ff52:	4313      	orrs	r3, r2
 800ff54:	693a      	ldr	r2, [r7, #16]
 800ff56:	4313      	orrs	r3, r2
 800ff58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	691b      	ldr	r3, [r3, #16]
 800ff5e:	011a      	lsls	r2, r3, #4
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	6a1b      	ldr	r3, [r3, #32]
 800ff64:	031b      	lsls	r3, r3, #12
 800ff66:	4313      	orrs	r3, r2
 800ff68:	693a      	ldr	r2, [r7, #16]
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ff74:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ff7c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	685a      	ldr	r2, [r3, #4]
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	695b      	ldr	r3, [r3, #20]
 800ff86:	011b      	lsls	r3, r3, #4
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	68fa      	ldr	r2, [r7, #12]
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	697a      	ldr	r2, [r7, #20]
 800ff96:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	693a      	ldr	r2, [r7, #16]
 800ff9e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2201      	movs	r2, #1
 800ffbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2201      	movs	r2, #1
 800ffcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ffd8:	2300      	movs	r3, #0
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3718      	adds	r7, #24
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b084      	sub	sp, #16
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
 800ffea:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fff2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fffa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010002:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801000a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d110      	bne.n	8010034 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010012:	7bfb      	ldrb	r3, [r7, #15]
 8010014:	2b01      	cmp	r3, #1
 8010016:	d102      	bne.n	801001e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8010018:	7b7b      	ldrb	r3, [r7, #13]
 801001a:	2b01      	cmp	r3, #1
 801001c:	d001      	beq.n	8010022 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 801001e:	2301      	movs	r3, #1
 8010020:	e069      	b.n	80100f6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2202      	movs	r2, #2
 8010026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2202      	movs	r2, #2
 801002e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010032:	e031      	b.n	8010098 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	2b04      	cmp	r3, #4
 8010038:	d110      	bne.n	801005c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801003a:	7bbb      	ldrb	r3, [r7, #14]
 801003c:	2b01      	cmp	r3, #1
 801003e:	d102      	bne.n	8010046 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010040:	7b3b      	ldrb	r3, [r7, #12]
 8010042:	2b01      	cmp	r3, #1
 8010044:	d001      	beq.n	801004a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8010046:	2301      	movs	r3, #1
 8010048:	e055      	b.n	80100f6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2202      	movs	r2, #2
 801004e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2202      	movs	r2, #2
 8010056:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801005a:	e01d      	b.n	8010098 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801005c:	7bfb      	ldrb	r3, [r7, #15]
 801005e:	2b01      	cmp	r3, #1
 8010060:	d108      	bne.n	8010074 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8010062:	7bbb      	ldrb	r3, [r7, #14]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d105      	bne.n	8010074 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010068:	7b7b      	ldrb	r3, [r7, #13]
 801006a:	2b01      	cmp	r3, #1
 801006c:	d102      	bne.n	8010074 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801006e:	7b3b      	ldrb	r3, [r7, #12]
 8010070:	2b01      	cmp	r3, #1
 8010072:	d001      	beq.n	8010078 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8010074:	2301      	movs	r3, #1
 8010076:	e03e      	b.n	80100f6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2202      	movs	r2, #2
 801007c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2202      	movs	r2, #2
 8010084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2202      	movs	r2, #2
 801008c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2202      	movs	r2, #2
 8010094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d003      	beq.n	80100a6 <HAL_TIM_Encoder_Start+0xc4>
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	2b04      	cmp	r3, #4
 80100a2:	d008      	beq.n	80100b6 <HAL_TIM_Encoder_Start+0xd4>
 80100a4:	e00f      	b.n	80100c6 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2201      	movs	r2, #1
 80100ac:	2100      	movs	r1, #0
 80100ae:	4618      	mov	r0, r3
 80100b0:	f000 f9d6 	bl	8010460 <TIM_CCxChannelCmd>
      break;
 80100b4:	e016      	b.n	80100e4 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	2201      	movs	r2, #1
 80100bc:	2104      	movs	r1, #4
 80100be:	4618      	mov	r0, r3
 80100c0:	f000 f9ce 	bl	8010460 <TIM_CCxChannelCmd>
      break;
 80100c4:	e00e      	b.n	80100e4 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	2201      	movs	r2, #1
 80100cc:	2100      	movs	r1, #0
 80100ce:	4618      	mov	r0, r3
 80100d0:	f000 f9c6 	bl	8010460 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	2201      	movs	r2, #1
 80100da:	2104      	movs	r1, #4
 80100dc:	4618      	mov	r0, r3
 80100de:	f000 f9bf 	bl	8010460 <TIM_CCxChannelCmd>
      break;
 80100e2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	681a      	ldr	r2, [r3, #0]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f042 0201 	orr.w	r2, r2, #1
 80100f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80100f4:	2300      	movs	r3, #0
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	3710      	adds	r7, #16
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}

080100fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80100fe:	b580      	push	{r7, lr}
 8010100:	b082      	sub	sp, #8
 8010102:	af00      	add	r7, sp, #0
 8010104:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	691b      	ldr	r3, [r3, #16]
 801010c:	f003 0302 	and.w	r3, r3, #2
 8010110:	2b02      	cmp	r3, #2
 8010112:	d122      	bne.n	801015a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	68db      	ldr	r3, [r3, #12]
 801011a:	f003 0302 	and.w	r3, r3, #2
 801011e:	2b02      	cmp	r3, #2
 8010120:	d11b      	bne.n	801015a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f06f 0202 	mvn.w	r2, #2
 801012a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2201      	movs	r2, #1
 8010130:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	699b      	ldr	r3, [r3, #24]
 8010138:	f003 0303 	and.w	r3, r3, #3
 801013c:	2b00      	cmp	r3, #0
 801013e:	d003      	beq.n	8010148 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f000 f8ee 	bl	8010322 <HAL_TIM_IC_CaptureCallback>
 8010146:	e005      	b.n	8010154 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 f8e0 	bl	801030e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f000 f8f1 	bl	8010336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2200      	movs	r2, #0
 8010158:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	f003 0304 	and.w	r3, r3, #4
 8010164:	2b04      	cmp	r3, #4
 8010166:	d122      	bne.n	80101ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	68db      	ldr	r3, [r3, #12]
 801016e:	f003 0304 	and.w	r3, r3, #4
 8010172:	2b04      	cmp	r3, #4
 8010174:	d11b      	bne.n	80101ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f06f 0204 	mvn.w	r2, #4
 801017e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2202      	movs	r2, #2
 8010184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	699b      	ldr	r3, [r3, #24]
 801018c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010190:	2b00      	cmp	r3, #0
 8010192:	d003      	beq.n	801019c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 f8c4 	bl	8010322 <HAL_TIM_IC_CaptureCallback>
 801019a:	e005      	b.n	80101a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 f8b6 	bl	801030e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 f8c7 	bl	8010336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	691b      	ldr	r3, [r3, #16]
 80101b4:	f003 0308 	and.w	r3, r3, #8
 80101b8:	2b08      	cmp	r3, #8
 80101ba:	d122      	bne.n	8010202 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	f003 0308 	and.w	r3, r3, #8
 80101c6:	2b08      	cmp	r3, #8
 80101c8:	d11b      	bne.n	8010202 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f06f 0208 	mvn.w	r2, #8
 80101d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2204      	movs	r2, #4
 80101d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	69db      	ldr	r3, [r3, #28]
 80101e0:	f003 0303 	and.w	r3, r3, #3
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d003      	beq.n	80101f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f000 f89a 	bl	8010322 <HAL_TIM_IC_CaptureCallback>
 80101ee:	e005      	b.n	80101fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f000 f88c 	bl	801030e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f000 f89d 	bl	8010336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2200      	movs	r2, #0
 8010200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	691b      	ldr	r3, [r3, #16]
 8010208:	f003 0310 	and.w	r3, r3, #16
 801020c:	2b10      	cmp	r3, #16
 801020e:	d122      	bne.n	8010256 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	f003 0310 	and.w	r3, r3, #16
 801021a:	2b10      	cmp	r3, #16
 801021c:	d11b      	bne.n	8010256 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f06f 0210 	mvn.w	r2, #16
 8010226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2208      	movs	r2, #8
 801022c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	69db      	ldr	r3, [r3, #28]
 8010234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010238:	2b00      	cmp	r3, #0
 801023a:	d003      	beq.n	8010244 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f000 f870 	bl	8010322 <HAL_TIM_IC_CaptureCallback>
 8010242:	e005      	b.n	8010250 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 f862 	bl	801030e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 f873 	bl	8010336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	691b      	ldr	r3, [r3, #16]
 801025c:	f003 0301 	and.w	r3, r3, #1
 8010260:	2b01      	cmp	r3, #1
 8010262:	d10e      	bne.n	8010282 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	68db      	ldr	r3, [r3, #12]
 801026a:	f003 0301 	and.w	r3, r3, #1
 801026e:	2b01      	cmp	r3, #1
 8010270:	d107      	bne.n	8010282 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f06f 0201 	mvn.w	r2, #1
 801027a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f7f5 ff23 	bl	80060c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	691b      	ldr	r3, [r3, #16]
 8010288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801028c:	2b80      	cmp	r3, #128	; 0x80
 801028e:	d10e      	bne.n	80102ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801029a:	2b80      	cmp	r3, #128	; 0x80
 801029c:	d107      	bne.n	80102ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80102a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f000 f977 	bl	801059c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	691b      	ldr	r3, [r3, #16]
 80102b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102b8:	2b40      	cmp	r3, #64	; 0x40
 80102ba:	d10e      	bne.n	80102da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102c6:	2b40      	cmp	r3, #64	; 0x40
 80102c8:	d107      	bne.n	80102da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80102d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f000 f838 	bl	801034a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	691b      	ldr	r3, [r3, #16]
 80102e0:	f003 0320 	and.w	r3, r3, #32
 80102e4:	2b20      	cmp	r3, #32
 80102e6:	d10e      	bne.n	8010306 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	68db      	ldr	r3, [r3, #12]
 80102ee:	f003 0320 	and.w	r3, r3, #32
 80102f2:	2b20      	cmp	r3, #32
 80102f4:	d107      	bne.n	8010306 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	f06f 0220 	mvn.w	r2, #32
 80102fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 f941 	bl	8010588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010306:	bf00      	nop
 8010308:	3708      	adds	r7, #8
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}

0801030e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801030e:	b480      	push	{r7}
 8010310:	b083      	sub	sp, #12
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010316:	bf00      	nop
 8010318:	370c      	adds	r7, #12
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr

08010322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010322:	b480      	push	{r7}
 8010324:	b083      	sub	sp, #12
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801032a:	bf00      	nop
 801032c:	370c      	adds	r7, #12
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr

08010336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010336:	b480      	push	{r7}
 8010338:	b083      	sub	sp, #12
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801033e:	bf00      	nop
 8010340:	370c      	adds	r7, #12
 8010342:	46bd      	mov	sp, r7
 8010344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010348:	4770      	bx	lr

0801034a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801034a:	b480      	push	{r7}
 801034c:	b083      	sub	sp, #12
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010352:	bf00      	nop
 8010354:	370c      	adds	r7, #12
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr
	...

08010360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010360:	b480      	push	{r7}
 8010362:	b085      	sub	sp, #20
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	4a34      	ldr	r2, [pc, #208]	; (8010444 <TIM_Base_SetConfig+0xe4>)
 8010374:	4293      	cmp	r3, r2
 8010376:	d00f      	beq.n	8010398 <TIM_Base_SetConfig+0x38>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801037e:	d00b      	beq.n	8010398 <TIM_Base_SetConfig+0x38>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	4a31      	ldr	r2, [pc, #196]	; (8010448 <TIM_Base_SetConfig+0xe8>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d007      	beq.n	8010398 <TIM_Base_SetConfig+0x38>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	4a30      	ldr	r2, [pc, #192]	; (801044c <TIM_Base_SetConfig+0xec>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d003      	beq.n	8010398 <TIM_Base_SetConfig+0x38>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	4a2f      	ldr	r2, [pc, #188]	; (8010450 <TIM_Base_SetConfig+0xf0>)
 8010394:	4293      	cmp	r3, r2
 8010396:	d108      	bne.n	80103aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801039e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	68fa      	ldr	r2, [r7, #12]
 80103a6:	4313      	orrs	r3, r2
 80103a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	4a25      	ldr	r2, [pc, #148]	; (8010444 <TIM_Base_SetConfig+0xe4>)
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d01b      	beq.n	80103ea <TIM_Base_SetConfig+0x8a>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80103b8:	d017      	beq.n	80103ea <TIM_Base_SetConfig+0x8a>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	4a22      	ldr	r2, [pc, #136]	; (8010448 <TIM_Base_SetConfig+0xe8>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d013      	beq.n	80103ea <TIM_Base_SetConfig+0x8a>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4a21      	ldr	r2, [pc, #132]	; (801044c <TIM_Base_SetConfig+0xec>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d00f      	beq.n	80103ea <TIM_Base_SetConfig+0x8a>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	4a20      	ldr	r2, [pc, #128]	; (8010450 <TIM_Base_SetConfig+0xf0>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d00b      	beq.n	80103ea <TIM_Base_SetConfig+0x8a>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	4a1f      	ldr	r2, [pc, #124]	; (8010454 <TIM_Base_SetConfig+0xf4>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d007      	beq.n	80103ea <TIM_Base_SetConfig+0x8a>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4a1e      	ldr	r2, [pc, #120]	; (8010458 <TIM_Base_SetConfig+0xf8>)
 80103de:	4293      	cmp	r3, r2
 80103e0:	d003      	beq.n	80103ea <TIM_Base_SetConfig+0x8a>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4a1d      	ldr	r2, [pc, #116]	; (801045c <TIM_Base_SetConfig+0xfc>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d108      	bne.n	80103fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	68fa      	ldr	r2, [r7, #12]
 80103f8:	4313      	orrs	r3, r2
 80103fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	695b      	ldr	r3, [r3, #20]
 8010406:	4313      	orrs	r3, r2
 8010408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	68fa      	ldr	r2, [r7, #12]
 801040e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	689a      	ldr	r2, [r3, #8]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	681a      	ldr	r2, [r3, #0]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	4a08      	ldr	r2, [pc, #32]	; (8010444 <TIM_Base_SetConfig+0xe4>)
 8010424:	4293      	cmp	r3, r2
 8010426:	d103      	bne.n	8010430 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	691a      	ldr	r2, [r3, #16]
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2201      	movs	r2, #1
 8010434:	615a      	str	r2, [r3, #20]
}
 8010436:	bf00      	nop
 8010438:	3714      	adds	r7, #20
 801043a:	46bd      	mov	sp, r7
 801043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010440:	4770      	bx	lr
 8010442:	bf00      	nop
 8010444:	40010000 	.word	0x40010000
 8010448:	40000400 	.word	0x40000400
 801044c:	40000800 	.word	0x40000800
 8010450:	40000c00 	.word	0x40000c00
 8010454:	40014000 	.word	0x40014000
 8010458:	40014400 	.word	0x40014400
 801045c:	40014800 	.word	0x40014800

08010460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010460:	b480      	push	{r7}
 8010462:	b087      	sub	sp, #28
 8010464:	af00      	add	r7, sp, #0
 8010466:	60f8      	str	r0, [r7, #12]
 8010468:	60b9      	str	r1, [r7, #8]
 801046a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	f003 031f 	and.w	r3, r3, #31
 8010472:	2201      	movs	r2, #1
 8010474:	fa02 f303 	lsl.w	r3, r2, r3
 8010478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	6a1a      	ldr	r2, [r3, #32]
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	43db      	mvns	r3, r3
 8010482:	401a      	ands	r2, r3
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	6a1a      	ldr	r2, [r3, #32]
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	f003 031f 	and.w	r3, r3, #31
 8010492:	6879      	ldr	r1, [r7, #4]
 8010494:	fa01 f303 	lsl.w	r3, r1, r3
 8010498:	431a      	orrs	r2, r3
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	621a      	str	r2, [r3, #32]
}
 801049e:	bf00      	nop
 80104a0:	371c      	adds	r7, #28
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr
	...

080104ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b085      	sub	sp, #20
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80104bc:	2b01      	cmp	r3, #1
 80104be:	d101      	bne.n	80104c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80104c0:	2302      	movs	r3, #2
 80104c2:	e050      	b.n	8010566 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2201      	movs	r2, #1
 80104c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2202      	movs	r2, #2
 80104d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	689b      	ldr	r3, [r3, #8]
 80104e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	4313      	orrs	r3, r2
 80104f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	68fa      	ldr	r2, [r7, #12]
 80104fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	4a1c      	ldr	r2, [pc, #112]	; (8010574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8010504:	4293      	cmp	r3, r2
 8010506:	d018      	beq.n	801053a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010510:	d013      	beq.n	801053a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4a18      	ldr	r2, [pc, #96]	; (8010578 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d00e      	beq.n	801053a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	4a16      	ldr	r2, [pc, #88]	; (801057c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d009      	beq.n	801053a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4a15      	ldr	r2, [pc, #84]	; (8010580 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d004      	beq.n	801053a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	4a13      	ldr	r2, [pc, #76]	; (8010584 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d10c      	bne.n	8010554 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	68ba      	ldr	r2, [r7, #8]
 8010548:	4313      	orrs	r3, r2
 801054a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	68ba      	ldr	r2, [r7, #8]
 8010552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2201      	movs	r2, #1
 8010558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2200      	movs	r2, #0
 8010560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010564:	2300      	movs	r3, #0
}
 8010566:	4618      	mov	r0, r3
 8010568:	3714      	adds	r7, #20
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop
 8010574:	40010000 	.word	0x40010000
 8010578:	40000400 	.word	0x40000400
 801057c:	40000800 	.word	0x40000800
 8010580:	40000c00 	.word	0x40000c00
 8010584:	40014000 	.word	0x40014000

08010588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010590:	bf00      	nop
 8010592:	370c      	adds	r7, #12
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80105a4:	bf00      	nop
 80105a6:	370c      	adds	r7, #12
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d101      	bne.n	80105c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80105be:	2301      	movs	r3, #1
 80105c0:	e03f      	b.n	8010642 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d106      	bne.n	80105dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2200      	movs	r2, #0
 80105d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f7fa f852 	bl	800a680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2224      	movs	r2, #36	; 0x24
 80105e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	68da      	ldr	r2, [r3, #12]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80105f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f000 ff53 	bl	80114a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	691a      	ldr	r2, [r3, #16]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	695a      	ldr	r2, [r3, #20]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	68da      	ldr	r2, [r3, #12]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2200      	movs	r2, #0
 801062e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2220      	movs	r2, #32
 8010634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2220      	movs	r2, #32
 801063c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010640:	2300      	movs	r3, #0
}
 8010642:	4618      	mov	r0, r3
 8010644:	3708      	adds	r7, #8
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
	...

0801064c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b08c      	sub	sp, #48	; 0x30
 8010650:	af00      	add	r7, sp, #0
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	4613      	mov	r3, r2
 8010658:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010660:	b2db      	uxtb	r3, r3
 8010662:	2b20      	cmp	r3, #32
 8010664:	d165      	bne.n	8010732 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d002      	beq.n	8010672 <HAL_UART_Transmit_DMA+0x26>
 801066c:	88fb      	ldrh	r3, [r7, #6]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d101      	bne.n	8010676 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8010672:	2301      	movs	r3, #1
 8010674:	e05e      	b.n	8010734 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801067c:	2b01      	cmp	r3, #1
 801067e:	d101      	bne.n	8010684 <HAL_UART_Transmit_DMA+0x38>
 8010680:	2302      	movs	r3, #2
 8010682:	e057      	b.n	8010734 <HAL_UART_Transmit_DMA+0xe8>
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2201      	movs	r2, #1
 8010688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 801068c:	68ba      	ldr	r2, [r7, #8]
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	88fa      	ldrh	r2, [r7, #6]
 8010696:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	88fa      	ldrh	r2, [r7, #6]
 801069c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	2200      	movs	r2, #0
 80106a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2221      	movs	r2, #33	; 0x21
 80106a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106b0:	4a22      	ldr	r2, [pc, #136]	; (801073c <HAL_UART_Transmit_DMA+0xf0>)
 80106b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106b8:	4a21      	ldr	r2, [pc, #132]	; (8010740 <HAL_UART_Transmit_DMA+0xf4>)
 80106ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106c0:	4a20      	ldr	r2, [pc, #128]	; (8010744 <HAL_UART_Transmit_DMA+0xf8>)
 80106c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106c8:	2200      	movs	r2, #0
 80106ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80106cc:	f107 0308 	add.w	r3, r7, #8
 80106d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80106d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d8:	6819      	ldr	r1, [r3, #0]
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	3304      	adds	r3, #4
 80106e0:	461a      	mov	r2, r3
 80106e2:	88fb      	ldrh	r3, [r7, #6]
 80106e4:	f7fa fc4c 	bl	800af80 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80106f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2200      	movs	r2, #0
 80106f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	3314      	adds	r3, #20
 8010700:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	e853 3f00 	ldrex	r3, [r3]
 8010708:	617b      	str	r3, [r7, #20]
   return(result);
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010710:	62bb      	str	r3, [r7, #40]	; 0x28
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	3314      	adds	r3, #20
 8010718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801071a:	627a      	str	r2, [r7, #36]	; 0x24
 801071c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801071e:	6a39      	ldr	r1, [r7, #32]
 8010720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010722:	e841 2300 	strex	r3, r2, [r1]
 8010726:	61fb      	str	r3, [r7, #28]
   return(result);
 8010728:	69fb      	ldr	r3, [r7, #28]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d1e5      	bne.n	80106fa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 801072e:	2300      	movs	r3, #0
 8010730:	e000      	b.n	8010734 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8010732:	2302      	movs	r3, #2
  }
}
 8010734:	4618      	mov	r0, r3
 8010736:	3730      	adds	r7, #48	; 0x30
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	08010d41 	.word	0x08010d41
 8010740:	08010ddb 	.word	0x08010ddb
 8010744:	08010f53 	.word	0x08010f53

08010748 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b084      	sub	sp, #16
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	4613      	mov	r3, r2
 8010754:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801075c:	b2db      	uxtb	r3, r3
 801075e:	2b20      	cmp	r3, #32
 8010760:	d11d      	bne.n	801079e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d002      	beq.n	801076e <HAL_UART_Receive_DMA+0x26>
 8010768:	88fb      	ldrh	r3, [r7, #6]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d101      	bne.n	8010772 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801076e:	2301      	movs	r3, #1
 8010770:	e016      	b.n	80107a0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010778:	2b01      	cmp	r3, #1
 801077a:	d101      	bne.n	8010780 <HAL_UART_Receive_DMA+0x38>
 801077c:	2302      	movs	r3, #2
 801077e:	e00f      	b.n	80107a0 <HAL_UART_Receive_DMA+0x58>
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2201      	movs	r2, #1
 8010784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2200      	movs	r2, #0
 801078c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801078e:	88fb      	ldrh	r3, [r7, #6]
 8010790:	461a      	mov	r2, r3
 8010792:	68b9      	ldr	r1, [r7, #8]
 8010794:	68f8      	ldr	r0, [r7, #12]
 8010796:	f000 fc27 	bl	8010fe8 <UART_Start_Receive_DMA>
 801079a:	4603      	mov	r3, r0
 801079c:	e000      	b.n	80107a0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 801079e:	2302      	movs	r3, #2
  }
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3710      	adds	r7, #16
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b0ba      	sub	sp, #232	; 0xe8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	695b      	ldr	r3, [r3, #20]
 80107ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80107ce:	2300      	movs	r3, #0
 80107d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80107d4:	2300      	movs	r3, #0
 80107d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80107da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107de:	f003 030f 	and.w	r3, r3, #15
 80107e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80107e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d10f      	bne.n	801080e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80107ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107f2:	f003 0320 	and.w	r3, r3, #32
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d009      	beq.n	801080e <HAL_UART_IRQHandler+0x66>
 80107fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107fe:	f003 0320 	and.w	r3, r3, #32
 8010802:	2b00      	cmp	r3, #0
 8010804:	d003      	beq.n	801080e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f000 fd8f 	bl	801132a <UART_Receive_IT>
      return;
 801080c:	e256      	b.n	8010cbc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801080e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010812:	2b00      	cmp	r3, #0
 8010814:	f000 80de 	beq.w	80109d4 <HAL_UART_IRQHandler+0x22c>
 8010818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801081c:	f003 0301 	and.w	r3, r3, #1
 8010820:	2b00      	cmp	r3, #0
 8010822:	d106      	bne.n	8010832 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010828:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801082c:	2b00      	cmp	r3, #0
 801082e:	f000 80d1 	beq.w	80109d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010836:	f003 0301 	and.w	r3, r3, #1
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00b      	beq.n	8010856 <HAL_UART_IRQHandler+0xae>
 801083e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010846:	2b00      	cmp	r3, #0
 8010848:	d005      	beq.n	8010856 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801084e:	f043 0201 	orr.w	r2, r3, #1
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801085a:	f003 0304 	and.w	r3, r3, #4
 801085e:	2b00      	cmp	r3, #0
 8010860:	d00b      	beq.n	801087a <HAL_UART_IRQHandler+0xd2>
 8010862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010866:	f003 0301 	and.w	r3, r3, #1
 801086a:	2b00      	cmp	r3, #0
 801086c:	d005      	beq.n	801087a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010872:	f043 0202 	orr.w	r2, r3, #2
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801087a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801087e:	f003 0302 	and.w	r3, r3, #2
 8010882:	2b00      	cmp	r3, #0
 8010884:	d00b      	beq.n	801089e <HAL_UART_IRQHandler+0xf6>
 8010886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801088a:	f003 0301 	and.w	r3, r3, #1
 801088e:	2b00      	cmp	r3, #0
 8010890:	d005      	beq.n	801089e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010896:	f043 0204 	orr.w	r2, r3, #4
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801089e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108a2:	f003 0308 	and.w	r3, r3, #8
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d011      	beq.n	80108ce <HAL_UART_IRQHandler+0x126>
 80108aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108ae:	f003 0320 	and.w	r3, r3, #32
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d105      	bne.n	80108c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80108b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108ba:	f003 0301 	and.w	r3, r3, #1
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d005      	beq.n	80108ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108c6:	f043 0208 	orr.w	r2, r3, #8
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	f000 81ed 	beq.w	8010cb2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80108d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108dc:	f003 0320 	and.w	r3, r3, #32
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d008      	beq.n	80108f6 <HAL_UART_IRQHandler+0x14e>
 80108e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108e8:	f003 0320 	and.w	r3, r3, #32
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d002      	beq.n	80108f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f000 fd1a 	bl	801132a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	695b      	ldr	r3, [r3, #20]
 80108fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010900:	2b40      	cmp	r3, #64	; 0x40
 8010902:	bf0c      	ite	eq
 8010904:	2301      	moveq	r3, #1
 8010906:	2300      	movne	r3, #0
 8010908:	b2db      	uxtb	r3, r3
 801090a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010912:	f003 0308 	and.w	r3, r3, #8
 8010916:	2b00      	cmp	r3, #0
 8010918:	d103      	bne.n	8010922 <HAL_UART_IRQHandler+0x17a>
 801091a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801091e:	2b00      	cmp	r3, #0
 8010920:	d04f      	beq.n	80109c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f000 fc22 	bl	801116c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	695b      	ldr	r3, [r3, #20]
 801092e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010932:	2b40      	cmp	r3, #64	; 0x40
 8010934:	d141      	bne.n	80109ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	3314      	adds	r3, #20
 801093c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010944:	e853 3f00 	ldrex	r3, [r3]
 8010948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801094c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	3314      	adds	r3, #20
 801095e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010962:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801096a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801096e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010972:	e841 2300 	strex	r3, r2, [r1]
 8010976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801097a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801097e:	2b00      	cmp	r3, #0
 8010980:	d1d9      	bne.n	8010936 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010986:	2b00      	cmp	r3, #0
 8010988:	d013      	beq.n	80109b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801098e:	4a7d      	ldr	r2, [pc, #500]	; (8010b84 <HAL_UART_IRQHandler+0x3dc>)
 8010990:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010996:	4618      	mov	r0, r3
 8010998:	f7fa fbba 	bl	800b110 <HAL_DMA_Abort_IT>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d016      	beq.n	80109d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80109ac:	4610      	mov	r0, r2
 80109ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109b0:	e00e      	b.n	80109d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f000 f9ae 	bl	8010d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109b8:	e00a      	b.n	80109d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 f9aa 	bl	8010d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109c0:	e006      	b.n	80109d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 f9a6 	bl	8010d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2200      	movs	r2, #0
 80109cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80109ce:	e170      	b.n	8010cb2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109d0:	bf00      	nop
    return;
 80109d2:	e16e      	b.n	8010cb2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109d8:	2b01      	cmp	r3, #1
 80109da:	f040 814a 	bne.w	8010c72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80109de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109e2:	f003 0310 	and.w	r3, r3, #16
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	f000 8143 	beq.w	8010c72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80109ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109f0:	f003 0310 	and.w	r3, r3, #16
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	f000 813c 	beq.w	8010c72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80109fa:	2300      	movs	r3, #0
 80109fc:	60bb      	str	r3, [r7, #8]
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	60bb      	str	r3, [r7, #8]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	685b      	ldr	r3, [r3, #4]
 8010a0c:	60bb      	str	r3, [r7, #8]
 8010a0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	695b      	ldr	r3, [r3, #20]
 8010a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a1a:	2b40      	cmp	r3, #64	; 0x40
 8010a1c:	f040 80b4 	bne.w	8010b88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	685b      	ldr	r3, [r3, #4]
 8010a28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010a2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	f000 8140 	beq.w	8010cb6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	f080 8139 	bcs.w	8010cb6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010a4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a50:	69db      	ldr	r3, [r3, #28]
 8010a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a56:	f000 8088 	beq.w	8010b6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	330c      	adds	r3, #12
 8010a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a68:	e853 3f00 	ldrex	r3, [r3]
 8010a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	330c      	adds	r3, #12
 8010a82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010a86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010a92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010a96:	e841 2300 	strex	r3, r2, [r1]
 8010a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d1d9      	bne.n	8010a5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	3314      	adds	r3, #20
 8010aac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ab0:	e853 3f00 	ldrex	r3, [r3]
 8010ab4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ab8:	f023 0301 	bic.w	r3, r3, #1
 8010abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	3314      	adds	r3, #20
 8010ac6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010aca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010ace:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010ad2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010ad6:	e841 2300 	strex	r3, r2, [r1]
 8010ada:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d1e1      	bne.n	8010aa6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	3314      	adds	r3, #20
 8010ae8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010aec:	e853 3f00 	ldrex	r3, [r3]
 8010af0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	3314      	adds	r3, #20
 8010b02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010b06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010b08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010b0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010b0e:	e841 2300 	strex	r3, r2, [r1]
 8010b12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d1e3      	bne.n	8010ae2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2220      	movs	r2, #32
 8010b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	330c      	adds	r3, #12
 8010b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b32:	e853 3f00 	ldrex	r3, [r3]
 8010b36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b3a:	f023 0310 	bic.w	r3, r3, #16
 8010b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	330c      	adds	r3, #12
 8010b48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010b4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8010b4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010b52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b54:	e841 2300 	strex	r3, r2, [r1]
 8010b58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d1e3      	bne.n	8010b28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7fa fa63 	bl	800b030 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	1ad3      	subs	r3, r2, r3
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	4619      	mov	r1, r3
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f000 f8d4 	bl	8010d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010b80:	e099      	b.n	8010cb6 <HAL_UART_IRQHandler+0x50e>
 8010b82:	bf00      	nop
 8010b84:	08011233 	.word	0x08011233
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	1ad3      	subs	r3, r2, r3
 8010b94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	f000 808b 	beq.w	8010cba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	f000 8086 	beq.w	8010cba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	330c      	adds	r3, #12
 8010bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bb8:	e853 3f00 	ldrex	r3, [r3]
 8010bbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	330c      	adds	r3, #12
 8010bce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010bd2:	647a      	str	r2, [r7, #68]	; 0x44
 8010bd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010bd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010bda:	e841 2300 	strex	r3, r2, [r1]
 8010bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d1e3      	bne.n	8010bae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	3314      	adds	r3, #20
 8010bec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf0:	e853 3f00 	ldrex	r3, [r3]
 8010bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8010bf6:	6a3b      	ldr	r3, [r7, #32]
 8010bf8:	f023 0301 	bic.w	r3, r3, #1
 8010bfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	3314      	adds	r3, #20
 8010c06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010c0a:	633a      	str	r2, [r7, #48]	; 0x30
 8010c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c12:	e841 2300 	strex	r3, r2, [r1]
 8010c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d1e3      	bne.n	8010be6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2220      	movs	r2, #32
 8010c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	330c      	adds	r3, #12
 8010c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	e853 3f00 	ldrex	r3, [r3]
 8010c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	f023 0310 	bic.w	r3, r3, #16
 8010c42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	330c      	adds	r3, #12
 8010c4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010c50:	61fa      	str	r2, [r7, #28]
 8010c52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c54:	69b9      	ldr	r1, [r7, #24]
 8010c56:	69fa      	ldr	r2, [r7, #28]
 8010c58:	e841 2300 	strex	r3, r2, [r1]
 8010c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d1e3      	bne.n	8010c2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010c68:	4619      	mov	r1, r3
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 f85c 	bl	8010d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010c70:	e023      	b.n	8010cba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d009      	beq.n	8010c92 <HAL_UART_IRQHandler+0x4ea>
 8010c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d003      	beq.n	8010c92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f000 fae5 	bl	801125a <UART_Transmit_IT>
    return;
 8010c90:	e014      	b.n	8010cbc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d00e      	beq.n	8010cbc <HAL_UART_IRQHandler+0x514>
 8010c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d008      	beq.n	8010cbc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 fb25 	bl	80112fa <UART_EndTransmit_IT>
    return;
 8010cb0:	e004      	b.n	8010cbc <HAL_UART_IRQHandler+0x514>
    return;
 8010cb2:	bf00      	nop
 8010cb4:	e002      	b.n	8010cbc <HAL_UART_IRQHandler+0x514>
      return;
 8010cb6:	bf00      	nop
 8010cb8:	e000      	b.n	8010cbc <HAL_UART_IRQHandler+0x514>
      return;
 8010cba:	bf00      	nop
  }
}
 8010cbc:	37e8      	adds	r7, #232	; 0xe8
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
 8010cc2:	bf00      	nop

08010cc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b083      	sub	sp, #12
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010ccc:	bf00      	nop
 8010cce:	370c      	adds	r7, #12
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd6:	4770      	bx	lr

08010cd8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b083      	sub	sp, #12
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8010ce0:	bf00      	nop
 8010ce2:	370c      	adds	r7, #12
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr

08010cec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b083      	sub	sp, #12
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8010cf4:	bf00      	nop
 8010cf6:	370c      	adds	r7, #12
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010d08:	bf00      	nop
 8010d0a:	370c      	adds	r7, #12
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010d1c:	bf00      	nop
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010d34:	bf00      	nop
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b090      	sub	sp, #64	; 0x40
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d137      	bne.n	8010dcc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8010d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d5e:	2200      	movs	r2, #0
 8010d60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	3314      	adds	r3, #20
 8010d68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6c:	e853 3f00 	ldrex	r3, [r3]
 8010d70:	623b      	str	r3, [r7, #32]
   return(result);
 8010d72:	6a3b      	ldr	r3, [r7, #32]
 8010d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d78:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	3314      	adds	r3, #20
 8010d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d82:	633a      	str	r2, [r7, #48]	; 0x30
 8010d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d8a:	e841 2300 	strex	r3, r2, [r1]
 8010d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d1e5      	bne.n	8010d62 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	330c      	adds	r3, #12
 8010d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	e853 3f00 	ldrex	r3, [r3]
 8010da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dac:	637b      	str	r3, [r7, #52]	; 0x34
 8010dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	330c      	adds	r3, #12
 8010db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010db6:	61fa      	str	r2, [r7, #28]
 8010db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dba:	69b9      	ldr	r1, [r7, #24]
 8010dbc:	69fa      	ldr	r2, [r7, #28]
 8010dbe:	e841 2300 	strex	r3, r2, [r1]
 8010dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d1e5      	bne.n	8010d96 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010dca:	e002      	b.n	8010dd2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8010dcc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010dce:	f7ff ff79 	bl	8010cc4 <HAL_UART_TxCpltCallback>
}
 8010dd2:	bf00      	nop
 8010dd4:	3740      	adds	r7, #64	; 0x40
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}

08010dda <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	b084      	sub	sp, #16
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010de8:	68f8      	ldr	r0, [r7, #12]
 8010dea:	f7ff ff75 	bl	8010cd8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010dee:	bf00      	nop
 8010df0:	3710      	adds	r7, #16
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}

08010df6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010df6:	b580      	push	{r7, lr}
 8010df8:	b09c      	sub	sp, #112	; 0x70
 8010dfa:	af00      	add	r7, sp, #0
 8010dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e02:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d172      	bne.n	8010ef8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8010e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e14:	2200      	movs	r2, #0
 8010e16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	330c      	adds	r3, #12
 8010e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e22:	e853 3f00 	ldrex	r3, [r3]
 8010e26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	330c      	adds	r3, #12
 8010e36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010e38:	65ba      	str	r2, [r7, #88]	; 0x58
 8010e3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e40:	e841 2300 	strex	r3, r2, [r1]
 8010e44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d1e5      	bne.n	8010e18 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	3314      	adds	r3, #20
 8010e52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e56:	e853 3f00 	ldrex	r3, [r3]
 8010e5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e5e:	f023 0301 	bic.w	r3, r3, #1
 8010e62:	667b      	str	r3, [r7, #100]	; 0x64
 8010e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	3314      	adds	r3, #20
 8010e6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010e6c:	647a      	str	r2, [r7, #68]	; 0x44
 8010e6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e74:	e841 2300 	strex	r3, r2, [r1]
 8010e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1e5      	bne.n	8010e4c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	3314      	adds	r3, #20
 8010e86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8a:	e853 3f00 	ldrex	r3, [r3]
 8010e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8010e90:	6a3b      	ldr	r3, [r7, #32]
 8010e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e96:	663b      	str	r3, [r7, #96]	; 0x60
 8010e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	3314      	adds	r3, #20
 8010e9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010ea0:	633a      	str	r2, [r7, #48]	; 0x30
 8010ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ea4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ea8:	e841 2300 	strex	r3, r2, [r1]
 8010eac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d1e5      	bne.n	8010e80 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010eb6:	2220      	movs	r2, #32
 8010eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	d119      	bne.n	8010ef8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	330c      	adds	r3, #12
 8010eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	e853 3f00 	ldrex	r3, [r3]
 8010ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	f023 0310 	bic.w	r3, r3, #16
 8010eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	330c      	adds	r3, #12
 8010ee2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010ee4:	61fa      	str	r2, [r7, #28]
 8010ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ee8:	69b9      	ldr	r1, [r7, #24]
 8010eea:	69fa      	ldr	r2, [r7, #28]
 8010eec:	e841 2300 	strex	r3, r2, [r1]
 8010ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d1e5      	bne.n	8010ec4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	d106      	bne.n	8010f0e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010f04:	4619      	mov	r1, r3
 8010f06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010f08:	f7ff ff0e 	bl	8010d28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010f0c:	e002      	b.n	8010f14 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8010f0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010f10:	f7ff feec 	bl	8010cec <HAL_UART_RxCpltCallback>
}
 8010f14:	bf00      	nop
 8010f16:	3770      	adds	r7, #112	; 0x70
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f28:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f2e:	2b01      	cmp	r3, #1
 8010f30:	d108      	bne.n	8010f44 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010f36:	085b      	lsrs	r3, r3, #1
 8010f38:	b29b      	uxth	r3, r3
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	68f8      	ldr	r0, [r7, #12]
 8010f3e:	f7ff fef3 	bl	8010d28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010f42:	e002      	b.n	8010f4a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8010f44:	68f8      	ldr	r0, [r7, #12]
 8010f46:	f7ff fedb 	bl	8010d00 <HAL_UART_RxHalfCpltCallback>
}
 8010f4a:	bf00      	nop
 8010f4c:	3710      	adds	r7, #16
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}

08010f52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010f52:	b580      	push	{r7, lr}
 8010f54:	b084      	sub	sp, #16
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	695b      	ldr	r3, [r3, #20]
 8010f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f6e:	2b80      	cmp	r3, #128	; 0x80
 8010f70:	bf0c      	ite	eq
 8010f72:	2301      	moveq	r3, #1
 8010f74:	2300      	movne	r3, #0
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	2b21      	cmp	r3, #33	; 0x21
 8010f84:	d108      	bne.n	8010f98 <UART_DMAError+0x46>
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d005      	beq.n	8010f98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010f92:	68b8      	ldr	r0, [r7, #8]
 8010f94:	f000 f8c2 	bl	801111c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	695b      	ldr	r3, [r3, #20]
 8010f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fa2:	2b40      	cmp	r3, #64	; 0x40
 8010fa4:	bf0c      	ite	eq
 8010fa6:	2301      	moveq	r3, #1
 8010fa8:	2300      	movne	r3, #0
 8010faa:	b2db      	uxtb	r3, r3
 8010fac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	2b22      	cmp	r3, #34	; 0x22
 8010fb8:	d108      	bne.n	8010fcc <UART_DMAError+0x7a>
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d005      	beq.n	8010fcc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010fc6:	68b8      	ldr	r0, [r7, #8]
 8010fc8:	f000 f8d0 	bl	801116c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fd0:	f043 0210 	orr.w	r2, r3, #16
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010fd8:	68b8      	ldr	r0, [r7, #8]
 8010fda:	f7ff fe9b 	bl	8010d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fde:	bf00      	nop
 8010fe0:	3710      	adds	r7, #16
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
	...

08010fe8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b098      	sub	sp, #96	; 0x60
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	60f8      	str	r0, [r7, #12]
 8010ff0:	60b9      	str	r1, [r7, #8]
 8010ff2:	4613      	mov	r3, r2
 8010ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8010ff6:	68ba      	ldr	r2, [r7, #8]
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	88fa      	ldrh	r2, [r7, #6]
 8011000:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	2200      	movs	r2, #0
 8011006:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	2222      	movs	r2, #34	; 0x22
 801100c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011014:	4a3e      	ldr	r2, [pc, #248]	; (8011110 <UART_Start_Receive_DMA+0x128>)
 8011016:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801101c:	4a3d      	ldr	r2, [pc, #244]	; (8011114 <UART_Start_Receive_DMA+0x12c>)
 801101e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011024:	4a3c      	ldr	r2, [pc, #240]	; (8011118 <UART_Start_Receive_DMA+0x130>)
 8011026:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801102c:	2200      	movs	r2, #0
 801102e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8011030:	f107 0308 	add.w	r3, r7, #8
 8011034:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	3304      	adds	r3, #4
 8011040:	4619      	mov	r1, r3
 8011042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011044:	681a      	ldr	r2, [r3, #0]
 8011046:	88fb      	ldrh	r3, [r7, #6]
 8011048:	f7f9 ff9a 	bl	800af80 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801104c:	2300      	movs	r3, #0
 801104e:	613b      	str	r3, [r7, #16]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	613b      	str	r3, [r7, #16]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	613b      	str	r3, [r7, #16]
 8011060:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2200      	movs	r2, #0
 8011066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	330c      	adds	r3, #12
 8011070:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011074:	e853 3f00 	ldrex	r3, [r3]
 8011078:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801107a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801107c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011080:	65bb      	str	r3, [r7, #88]	; 0x58
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	330c      	adds	r3, #12
 8011088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801108a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801108c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801108e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011090:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011092:	e841 2300 	strex	r3, r2, [r1]
 8011096:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801109a:	2b00      	cmp	r3, #0
 801109c:	d1e5      	bne.n	801106a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	3314      	adds	r3, #20
 80110a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a8:	e853 3f00 	ldrex	r3, [r3]
 80110ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80110ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b0:	f043 0301 	orr.w	r3, r3, #1
 80110b4:	657b      	str	r3, [r7, #84]	; 0x54
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	3314      	adds	r3, #20
 80110bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80110be:	63ba      	str	r2, [r7, #56]	; 0x38
 80110c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80110c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110c6:	e841 2300 	strex	r3, r2, [r1]
 80110ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80110cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d1e5      	bne.n	801109e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	3314      	adds	r3, #20
 80110d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110da:	69bb      	ldr	r3, [r7, #24]
 80110dc:	e853 3f00 	ldrex	r3, [r3]
 80110e0:	617b      	str	r3, [r7, #20]
   return(result);
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110e8:	653b      	str	r3, [r7, #80]	; 0x50
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	3314      	adds	r3, #20
 80110f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80110f2:	627a      	str	r2, [r7, #36]	; 0x24
 80110f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110f6:	6a39      	ldr	r1, [r7, #32]
 80110f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110fa:	e841 2300 	strex	r3, r2, [r1]
 80110fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d1e5      	bne.n	80110d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8011106:	2300      	movs	r3, #0
}
 8011108:	4618      	mov	r0, r3
 801110a:	3760      	adds	r7, #96	; 0x60
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}
 8011110:	08010df7 	.word	0x08010df7
 8011114:	08010f1d 	.word	0x08010f1d
 8011118:	08010f53 	.word	0x08010f53

0801111c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801111c:	b480      	push	{r7}
 801111e:	b089      	sub	sp, #36	; 0x24
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	330c      	adds	r3, #12
 801112a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	e853 3f00 	ldrex	r3, [r3]
 8011132:	60bb      	str	r3, [r7, #8]
   return(result);
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801113a:	61fb      	str	r3, [r7, #28]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	330c      	adds	r3, #12
 8011142:	69fa      	ldr	r2, [r7, #28]
 8011144:	61ba      	str	r2, [r7, #24]
 8011146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011148:	6979      	ldr	r1, [r7, #20]
 801114a:	69ba      	ldr	r2, [r7, #24]
 801114c:	e841 2300 	strex	r3, r2, [r1]
 8011150:	613b      	str	r3, [r7, #16]
   return(result);
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d1e5      	bne.n	8011124 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2220      	movs	r2, #32
 801115c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8011160:	bf00      	nop
 8011162:	3724      	adds	r7, #36	; 0x24
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr

0801116c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801116c:	b480      	push	{r7}
 801116e:	b095      	sub	sp, #84	; 0x54
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	330c      	adds	r3, #12
 801117a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801117c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801117e:	e853 3f00 	ldrex	r3, [r3]
 8011182:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011186:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801118a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	330c      	adds	r3, #12
 8011192:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011194:	643a      	str	r2, [r7, #64]	; 0x40
 8011196:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011198:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801119a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801119c:	e841 2300 	strex	r3, r2, [r1]
 80111a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80111a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d1e5      	bne.n	8011174 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	3314      	adds	r3, #20
 80111ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111b0:	6a3b      	ldr	r3, [r7, #32]
 80111b2:	e853 3f00 	ldrex	r3, [r3]
 80111b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80111b8:	69fb      	ldr	r3, [r7, #28]
 80111ba:	f023 0301 	bic.w	r3, r3, #1
 80111be:	64bb      	str	r3, [r7, #72]	; 0x48
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	3314      	adds	r3, #20
 80111c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80111c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80111ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80111ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111d0:	e841 2300 	strex	r3, r2, [r1]
 80111d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80111d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d1e5      	bne.n	80111a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d119      	bne.n	8011218 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	330c      	adds	r3, #12
 80111ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	e853 3f00 	ldrex	r3, [r3]
 80111f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	f023 0310 	bic.w	r3, r3, #16
 80111fa:	647b      	str	r3, [r7, #68]	; 0x44
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	330c      	adds	r3, #12
 8011202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011204:	61ba      	str	r2, [r7, #24]
 8011206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011208:	6979      	ldr	r1, [r7, #20]
 801120a:	69ba      	ldr	r2, [r7, #24]
 801120c:	e841 2300 	strex	r3, r2, [r1]
 8011210:	613b      	str	r3, [r7, #16]
   return(result);
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d1e5      	bne.n	80111e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2220      	movs	r2, #32
 801121c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2200      	movs	r2, #0
 8011224:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011226:	bf00      	nop
 8011228:	3754      	adds	r7, #84	; 0x54
 801122a:	46bd      	mov	sp, r7
 801122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011230:	4770      	bx	lr

08011232 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011232:	b580      	push	{r7, lr}
 8011234:	b084      	sub	sp, #16
 8011236:	af00      	add	r7, sp, #0
 8011238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801123e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2200      	movs	r2, #0
 8011244:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	2200      	movs	r2, #0
 801124a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801124c:	68f8      	ldr	r0, [r7, #12]
 801124e:	f7ff fd61 	bl	8010d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011252:	bf00      	nop
 8011254:	3710      	adds	r7, #16
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}

0801125a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801125a:	b480      	push	{r7}
 801125c:	b085      	sub	sp, #20
 801125e:	af00      	add	r7, sp, #0
 8011260:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011268:	b2db      	uxtb	r3, r3
 801126a:	2b21      	cmp	r3, #33	; 0x21
 801126c:	d13e      	bne.n	80112ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	689b      	ldr	r3, [r3, #8]
 8011272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011276:	d114      	bne.n	80112a2 <UART_Transmit_IT+0x48>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	691b      	ldr	r3, [r3, #16]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d110      	bne.n	80112a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6a1b      	ldr	r3, [r3, #32]
 8011284:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	881b      	ldrh	r3, [r3, #0]
 801128a:	461a      	mov	r2, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011294:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6a1b      	ldr	r3, [r3, #32]
 801129a:	1c9a      	adds	r2, r3, #2
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	621a      	str	r2, [r3, #32]
 80112a0:	e008      	b.n	80112b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6a1b      	ldr	r3, [r3, #32]
 80112a6:	1c59      	adds	r1, r3, #1
 80112a8:	687a      	ldr	r2, [r7, #4]
 80112aa:	6211      	str	r1, [r2, #32]
 80112ac:	781a      	ldrb	r2, [r3, #0]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80112b8:	b29b      	uxth	r3, r3
 80112ba:	3b01      	subs	r3, #1
 80112bc:	b29b      	uxth	r3, r3
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	4619      	mov	r1, r3
 80112c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d10f      	bne.n	80112e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	68da      	ldr	r2, [r3, #12]
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80112d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	68da      	ldr	r2, [r3, #12]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80112e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80112e8:	2300      	movs	r3, #0
 80112ea:	e000      	b.n	80112ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80112ec:	2302      	movs	r3, #2
  }
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3714      	adds	r7, #20
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr

080112fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80112fa:	b580      	push	{r7, lr}
 80112fc:	b082      	sub	sp, #8
 80112fe:	af00      	add	r7, sp, #0
 8011300:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	68da      	ldr	r2, [r3, #12]
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011310:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2220      	movs	r2, #32
 8011316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f7ff fcd2 	bl	8010cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011320:	2300      	movs	r3, #0
}
 8011322:	4618      	mov	r0, r3
 8011324:	3708      	adds	r7, #8
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}

0801132a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801132a:	b580      	push	{r7, lr}
 801132c:	b08c      	sub	sp, #48	; 0x30
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011338:	b2db      	uxtb	r3, r3
 801133a:	2b22      	cmp	r3, #34	; 0x22
 801133c:	f040 80ab 	bne.w	8011496 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	689b      	ldr	r3, [r3, #8]
 8011344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011348:	d117      	bne.n	801137a <UART_Receive_IT+0x50>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	691b      	ldr	r3, [r3, #16]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d113      	bne.n	801137a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011352:	2300      	movs	r3, #0
 8011354:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801135a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	b29b      	uxth	r3, r3
 8011364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011368:	b29a      	uxth	r2, r3
 801136a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011372:	1c9a      	adds	r2, r3, #2
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	629a      	str	r2, [r3, #40]	; 0x28
 8011378:	e026      	b.n	80113c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801137e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011380:	2300      	movs	r3, #0
 8011382:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	689b      	ldr	r3, [r3, #8]
 8011388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801138c:	d007      	beq.n	801139e <UART_Receive_IT+0x74>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	689b      	ldr	r3, [r3, #8]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d10a      	bne.n	80113ac <UART_Receive_IT+0x82>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	691b      	ldr	r3, [r3, #16]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d106      	bne.n	80113ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	685b      	ldr	r3, [r3, #4]
 80113a4:	b2da      	uxtb	r2, r3
 80113a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a8:	701a      	strb	r2, [r3, #0]
 80113aa:	e008      	b.n	80113be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113b8:	b2da      	uxtb	r2, r3
 80113ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113c2:	1c5a      	adds	r2, r3, #1
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	3b01      	subs	r3, #1
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	4619      	mov	r1, r3
 80113d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d15a      	bne.n	8011492 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	68da      	ldr	r2, [r3, #12]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f022 0220 	bic.w	r2, r2, #32
 80113ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	68da      	ldr	r2, [r3, #12]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80113fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	695a      	ldr	r2, [r3, #20]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	f022 0201 	bic.w	r2, r2, #1
 801140a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2220      	movs	r2, #32
 8011410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011418:	2b01      	cmp	r3, #1
 801141a:	d135      	bne.n	8011488 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2200      	movs	r2, #0
 8011420:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	330c      	adds	r3, #12
 8011428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	e853 3f00 	ldrex	r3, [r3]
 8011430:	613b      	str	r3, [r7, #16]
   return(result);
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	f023 0310 	bic.w	r3, r3, #16
 8011438:	627b      	str	r3, [r7, #36]	; 0x24
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	330c      	adds	r3, #12
 8011440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011442:	623a      	str	r2, [r7, #32]
 8011444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011446:	69f9      	ldr	r1, [r7, #28]
 8011448:	6a3a      	ldr	r2, [r7, #32]
 801144a:	e841 2300 	strex	r3, r2, [r1]
 801144e:	61bb      	str	r3, [r7, #24]
   return(result);
 8011450:	69bb      	ldr	r3, [r7, #24]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d1e5      	bne.n	8011422 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f003 0310 	and.w	r3, r3, #16
 8011460:	2b10      	cmp	r3, #16
 8011462:	d10a      	bne.n	801147a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011464:	2300      	movs	r3, #0
 8011466:	60fb      	str	r3, [r7, #12]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	60fb      	str	r3, [r7, #12]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	60fb      	str	r3, [r7, #12]
 8011478:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801147e:	4619      	mov	r1, r3
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7ff fc51 	bl	8010d28 <HAL_UARTEx_RxEventCallback>
 8011486:	e002      	b.n	801148e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f7ff fc2f 	bl	8010cec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801148e:	2300      	movs	r3, #0
 8011490:	e002      	b.n	8011498 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8011492:	2300      	movs	r3, #0
 8011494:	e000      	b.n	8011498 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8011496:	2302      	movs	r3, #2
  }
}
 8011498:	4618      	mov	r0, r3
 801149a:	3730      	adds	r7, #48	; 0x30
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80114a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a4:	b09f      	sub	sp, #124	; 0x7c
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80114aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	691b      	ldr	r3, [r3, #16]
 80114b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80114b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114b6:	68d9      	ldr	r1, [r3, #12]
 80114b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	ea40 0301 	orr.w	r3, r0, r1
 80114c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80114c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114c4:	689a      	ldr	r2, [r3, #8]
 80114c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114c8:	691b      	ldr	r3, [r3, #16]
 80114ca:	431a      	orrs	r2, r3
 80114cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114ce:	695b      	ldr	r3, [r3, #20]
 80114d0:	431a      	orrs	r2, r3
 80114d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114d4:	69db      	ldr	r3, [r3, #28]
 80114d6:	4313      	orrs	r3, r2
 80114d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80114da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80114e4:	f021 010c 	bic.w	r1, r1, #12
 80114e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114ea:	681a      	ldr	r2, [r3, #0]
 80114ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80114ee:	430b      	orrs	r3, r1
 80114f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80114f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	695b      	ldr	r3, [r3, #20]
 80114f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80114fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114fe:	6999      	ldr	r1, [r3, #24]
 8011500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011502:	681a      	ldr	r2, [r3, #0]
 8011504:	ea40 0301 	orr.w	r3, r0, r1
 8011508:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801150a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801150c:	681a      	ldr	r2, [r3, #0]
 801150e:	4bc5      	ldr	r3, [pc, #788]	; (8011824 <UART_SetConfig+0x384>)
 8011510:	429a      	cmp	r2, r3
 8011512:	d004      	beq.n	801151e <UART_SetConfig+0x7e>
 8011514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	4bc3      	ldr	r3, [pc, #780]	; (8011828 <UART_SetConfig+0x388>)
 801151a:	429a      	cmp	r2, r3
 801151c:	d103      	bne.n	8011526 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801151e:	f7fd ffb1 	bl	800f484 <HAL_RCC_GetPCLK2Freq>
 8011522:	6778      	str	r0, [r7, #116]	; 0x74
 8011524:	e002      	b.n	801152c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011526:	f7fd ff99 	bl	800f45c <HAL_RCC_GetPCLK1Freq>
 801152a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801152c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801152e:	69db      	ldr	r3, [r3, #28]
 8011530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011534:	f040 80b6 	bne.w	80116a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801153a:	461c      	mov	r4, r3
 801153c:	f04f 0500 	mov.w	r5, #0
 8011540:	4622      	mov	r2, r4
 8011542:	462b      	mov	r3, r5
 8011544:	1891      	adds	r1, r2, r2
 8011546:	6439      	str	r1, [r7, #64]	; 0x40
 8011548:	415b      	adcs	r3, r3
 801154a:	647b      	str	r3, [r7, #68]	; 0x44
 801154c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011550:	1912      	adds	r2, r2, r4
 8011552:	eb45 0303 	adc.w	r3, r5, r3
 8011556:	f04f 0000 	mov.w	r0, #0
 801155a:	f04f 0100 	mov.w	r1, #0
 801155e:	00d9      	lsls	r1, r3, #3
 8011560:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011564:	00d0      	lsls	r0, r2, #3
 8011566:	4602      	mov	r2, r0
 8011568:	460b      	mov	r3, r1
 801156a:	1911      	adds	r1, r2, r4
 801156c:	6639      	str	r1, [r7, #96]	; 0x60
 801156e:	416b      	adcs	r3, r5
 8011570:	667b      	str	r3, [r7, #100]	; 0x64
 8011572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	461a      	mov	r2, r3
 8011578:	f04f 0300 	mov.w	r3, #0
 801157c:	1891      	adds	r1, r2, r2
 801157e:	63b9      	str	r1, [r7, #56]	; 0x38
 8011580:	415b      	adcs	r3, r3
 8011582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011588:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801158c:	f7ef fb94 	bl	8000cb8 <__aeabi_uldivmod>
 8011590:	4602      	mov	r2, r0
 8011592:	460b      	mov	r3, r1
 8011594:	4ba5      	ldr	r3, [pc, #660]	; (801182c <UART_SetConfig+0x38c>)
 8011596:	fba3 2302 	umull	r2, r3, r3, r2
 801159a:	095b      	lsrs	r3, r3, #5
 801159c:	011e      	lsls	r6, r3, #4
 801159e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80115a0:	461c      	mov	r4, r3
 80115a2:	f04f 0500 	mov.w	r5, #0
 80115a6:	4622      	mov	r2, r4
 80115a8:	462b      	mov	r3, r5
 80115aa:	1891      	adds	r1, r2, r2
 80115ac:	6339      	str	r1, [r7, #48]	; 0x30
 80115ae:	415b      	adcs	r3, r3
 80115b0:	637b      	str	r3, [r7, #52]	; 0x34
 80115b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80115b6:	1912      	adds	r2, r2, r4
 80115b8:	eb45 0303 	adc.w	r3, r5, r3
 80115bc:	f04f 0000 	mov.w	r0, #0
 80115c0:	f04f 0100 	mov.w	r1, #0
 80115c4:	00d9      	lsls	r1, r3, #3
 80115c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80115ca:	00d0      	lsls	r0, r2, #3
 80115cc:	4602      	mov	r2, r0
 80115ce:	460b      	mov	r3, r1
 80115d0:	1911      	adds	r1, r2, r4
 80115d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80115d4:	416b      	adcs	r3, r5
 80115d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80115d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	461a      	mov	r2, r3
 80115de:	f04f 0300 	mov.w	r3, #0
 80115e2:	1891      	adds	r1, r2, r2
 80115e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80115e6:	415b      	adcs	r3, r3
 80115e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80115ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80115f2:	f7ef fb61 	bl	8000cb8 <__aeabi_uldivmod>
 80115f6:	4602      	mov	r2, r0
 80115f8:	460b      	mov	r3, r1
 80115fa:	4b8c      	ldr	r3, [pc, #560]	; (801182c <UART_SetConfig+0x38c>)
 80115fc:	fba3 1302 	umull	r1, r3, r3, r2
 8011600:	095b      	lsrs	r3, r3, #5
 8011602:	2164      	movs	r1, #100	; 0x64
 8011604:	fb01 f303 	mul.w	r3, r1, r3
 8011608:	1ad3      	subs	r3, r2, r3
 801160a:	00db      	lsls	r3, r3, #3
 801160c:	3332      	adds	r3, #50	; 0x32
 801160e:	4a87      	ldr	r2, [pc, #540]	; (801182c <UART_SetConfig+0x38c>)
 8011610:	fba2 2303 	umull	r2, r3, r2, r3
 8011614:	095b      	lsrs	r3, r3, #5
 8011616:	005b      	lsls	r3, r3, #1
 8011618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801161c:	441e      	add	r6, r3
 801161e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011620:	4618      	mov	r0, r3
 8011622:	f04f 0100 	mov.w	r1, #0
 8011626:	4602      	mov	r2, r0
 8011628:	460b      	mov	r3, r1
 801162a:	1894      	adds	r4, r2, r2
 801162c:	623c      	str	r4, [r7, #32]
 801162e:	415b      	adcs	r3, r3
 8011630:	627b      	str	r3, [r7, #36]	; 0x24
 8011632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011636:	1812      	adds	r2, r2, r0
 8011638:	eb41 0303 	adc.w	r3, r1, r3
 801163c:	f04f 0400 	mov.w	r4, #0
 8011640:	f04f 0500 	mov.w	r5, #0
 8011644:	00dd      	lsls	r5, r3, #3
 8011646:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801164a:	00d4      	lsls	r4, r2, #3
 801164c:	4622      	mov	r2, r4
 801164e:	462b      	mov	r3, r5
 8011650:	1814      	adds	r4, r2, r0
 8011652:	653c      	str	r4, [r7, #80]	; 0x50
 8011654:	414b      	adcs	r3, r1
 8011656:	657b      	str	r3, [r7, #84]	; 0x54
 8011658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801165a:	685b      	ldr	r3, [r3, #4]
 801165c:	461a      	mov	r2, r3
 801165e:	f04f 0300 	mov.w	r3, #0
 8011662:	1891      	adds	r1, r2, r2
 8011664:	61b9      	str	r1, [r7, #24]
 8011666:	415b      	adcs	r3, r3
 8011668:	61fb      	str	r3, [r7, #28]
 801166a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801166e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8011672:	f7ef fb21 	bl	8000cb8 <__aeabi_uldivmod>
 8011676:	4602      	mov	r2, r0
 8011678:	460b      	mov	r3, r1
 801167a:	4b6c      	ldr	r3, [pc, #432]	; (801182c <UART_SetConfig+0x38c>)
 801167c:	fba3 1302 	umull	r1, r3, r3, r2
 8011680:	095b      	lsrs	r3, r3, #5
 8011682:	2164      	movs	r1, #100	; 0x64
 8011684:	fb01 f303 	mul.w	r3, r1, r3
 8011688:	1ad3      	subs	r3, r2, r3
 801168a:	00db      	lsls	r3, r3, #3
 801168c:	3332      	adds	r3, #50	; 0x32
 801168e:	4a67      	ldr	r2, [pc, #412]	; (801182c <UART_SetConfig+0x38c>)
 8011690:	fba2 2303 	umull	r2, r3, r2, r3
 8011694:	095b      	lsrs	r3, r3, #5
 8011696:	f003 0207 	and.w	r2, r3, #7
 801169a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	4432      	add	r2, r6
 80116a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80116a2:	e0b9      	b.n	8011818 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80116a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80116a6:	461c      	mov	r4, r3
 80116a8:	f04f 0500 	mov.w	r5, #0
 80116ac:	4622      	mov	r2, r4
 80116ae:	462b      	mov	r3, r5
 80116b0:	1891      	adds	r1, r2, r2
 80116b2:	6139      	str	r1, [r7, #16]
 80116b4:	415b      	adcs	r3, r3
 80116b6:	617b      	str	r3, [r7, #20]
 80116b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80116bc:	1912      	adds	r2, r2, r4
 80116be:	eb45 0303 	adc.w	r3, r5, r3
 80116c2:	f04f 0000 	mov.w	r0, #0
 80116c6:	f04f 0100 	mov.w	r1, #0
 80116ca:	00d9      	lsls	r1, r3, #3
 80116cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80116d0:	00d0      	lsls	r0, r2, #3
 80116d2:	4602      	mov	r2, r0
 80116d4:	460b      	mov	r3, r1
 80116d6:	eb12 0804 	adds.w	r8, r2, r4
 80116da:	eb43 0905 	adc.w	r9, r3, r5
 80116de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	4618      	mov	r0, r3
 80116e4:	f04f 0100 	mov.w	r1, #0
 80116e8:	f04f 0200 	mov.w	r2, #0
 80116ec:	f04f 0300 	mov.w	r3, #0
 80116f0:	008b      	lsls	r3, r1, #2
 80116f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80116f6:	0082      	lsls	r2, r0, #2
 80116f8:	4640      	mov	r0, r8
 80116fa:	4649      	mov	r1, r9
 80116fc:	f7ef fadc 	bl	8000cb8 <__aeabi_uldivmod>
 8011700:	4602      	mov	r2, r0
 8011702:	460b      	mov	r3, r1
 8011704:	4b49      	ldr	r3, [pc, #292]	; (801182c <UART_SetConfig+0x38c>)
 8011706:	fba3 2302 	umull	r2, r3, r3, r2
 801170a:	095b      	lsrs	r3, r3, #5
 801170c:	011e      	lsls	r6, r3, #4
 801170e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011710:	4618      	mov	r0, r3
 8011712:	f04f 0100 	mov.w	r1, #0
 8011716:	4602      	mov	r2, r0
 8011718:	460b      	mov	r3, r1
 801171a:	1894      	adds	r4, r2, r2
 801171c:	60bc      	str	r4, [r7, #8]
 801171e:	415b      	adcs	r3, r3
 8011720:	60fb      	str	r3, [r7, #12]
 8011722:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011726:	1812      	adds	r2, r2, r0
 8011728:	eb41 0303 	adc.w	r3, r1, r3
 801172c:	f04f 0400 	mov.w	r4, #0
 8011730:	f04f 0500 	mov.w	r5, #0
 8011734:	00dd      	lsls	r5, r3, #3
 8011736:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801173a:	00d4      	lsls	r4, r2, #3
 801173c:	4622      	mov	r2, r4
 801173e:	462b      	mov	r3, r5
 8011740:	1814      	adds	r4, r2, r0
 8011742:	64bc      	str	r4, [r7, #72]	; 0x48
 8011744:	414b      	adcs	r3, r1
 8011746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	4618      	mov	r0, r3
 801174e:	f04f 0100 	mov.w	r1, #0
 8011752:	f04f 0200 	mov.w	r2, #0
 8011756:	f04f 0300 	mov.w	r3, #0
 801175a:	008b      	lsls	r3, r1, #2
 801175c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011760:	0082      	lsls	r2, r0, #2
 8011762:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8011766:	f7ef faa7 	bl	8000cb8 <__aeabi_uldivmod>
 801176a:	4602      	mov	r2, r0
 801176c:	460b      	mov	r3, r1
 801176e:	4b2f      	ldr	r3, [pc, #188]	; (801182c <UART_SetConfig+0x38c>)
 8011770:	fba3 1302 	umull	r1, r3, r3, r2
 8011774:	095b      	lsrs	r3, r3, #5
 8011776:	2164      	movs	r1, #100	; 0x64
 8011778:	fb01 f303 	mul.w	r3, r1, r3
 801177c:	1ad3      	subs	r3, r2, r3
 801177e:	011b      	lsls	r3, r3, #4
 8011780:	3332      	adds	r3, #50	; 0x32
 8011782:	4a2a      	ldr	r2, [pc, #168]	; (801182c <UART_SetConfig+0x38c>)
 8011784:	fba2 2303 	umull	r2, r3, r2, r3
 8011788:	095b      	lsrs	r3, r3, #5
 801178a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801178e:	441e      	add	r6, r3
 8011790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011792:	4618      	mov	r0, r3
 8011794:	f04f 0100 	mov.w	r1, #0
 8011798:	4602      	mov	r2, r0
 801179a:	460b      	mov	r3, r1
 801179c:	1894      	adds	r4, r2, r2
 801179e:	603c      	str	r4, [r7, #0]
 80117a0:	415b      	adcs	r3, r3
 80117a2:	607b      	str	r3, [r7, #4]
 80117a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80117a8:	1812      	adds	r2, r2, r0
 80117aa:	eb41 0303 	adc.w	r3, r1, r3
 80117ae:	f04f 0400 	mov.w	r4, #0
 80117b2:	f04f 0500 	mov.w	r5, #0
 80117b6:	00dd      	lsls	r5, r3, #3
 80117b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80117bc:	00d4      	lsls	r4, r2, #3
 80117be:	4622      	mov	r2, r4
 80117c0:	462b      	mov	r3, r5
 80117c2:	eb12 0a00 	adds.w	sl, r2, r0
 80117c6:	eb43 0b01 	adc.w	fp, r3, r1
 80117ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	4618      	mov	r0, r3
 80117d0:	f04f 0100 	mov.w	r1, #0
 80117d4:	f04f 0200 	mov.w	r2, #0
 80117d8:	f04f 0300 	mov.w	r3, #0
 80117dc:	008b      	lsls	r3, r1, #2
 80117de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80117e2:	0082      	lsls	r2, r0, #2
 80117e4:	4650      	mov	r0, sl
 80117e6:	4659      	mov	r1, fp
 80117e8:	f7ef fa66 	bl	8000cb8 <__aeabi_uldivmod>
 80117ec:	4602      	mov	r2, r0
 80117ee:	460b      	mov	r3, r1
 80117f0:	4b0e      	ldr	r3, [pc, #56]	; (801182c <UART_SetConfig+0x38c>)
 80117f2:	fba3 1302 	umull	r1, r3, r3, r2
 80117f6:	095b      	lsrs	r3, r3, #5
 80117f8:	2164      	movs	r1, #100	; 0x64
 80117fa:	fb01 f303 	mul.w	r3, r1, r3
 80117fe:	1ad3      	subs	r3, r2, r3
 8011800:	011b      	lsls	r3, r3, #4
 8011802:	3332      	adds	r3, #50	; 0x32
 8011804:	4a09      	ldr	r2, [pc, #36]	; (801182c <UART_SetConfig+0x38c>)
 8011806:	fba2 2303 	umull	r2, r3, r2, r3
 801180a:	095b      	lsrs	r3, r3, #5
 801180c:	f003 020f 	and.w	r2, r3, #15
 8011810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	4432      	add	r2, r6
 8011816:	609a      	str	r2, [r3, #8]
}
 8011818:	bf00      	nop
 801181a:	377c      	adds	r7, #124	; 0x7c
 801181c:	46bd      	mov	sp, r7
 801181e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011822:	bf00      	nop
 8011824:	40011000 	.word	0x40011000
 8011828:	40011400 	.word	0x40011400
 801182c:	51eb851f 	.word	0x51eb851f

08011830 <atof>:
 8011830:	2100      	movs	r1, #0
 8011832:	f001 bd05 	b.w	8013240 <strtod>

08011836 <atoi>:
 8011836:	220a      	movs	r2, #10
 8011838:	2100      	movs	r1, #0
 801183a:	f001 bdef 	b.w	801341c <strtol>
	...

08011840 <__errno>:
 8011840:	4b01      	ldr	r3, [pc, #4]	; (8011848 <__errno+0x8>)
 8011842:	6818      	ldr	r0, [r3, #0]
 8011844:	4770      	bx	lr
 8011846:	bf00      	nop
 8011848:	20000044 	.word	0x20000044

0801184c <__libc_init_array>:
 801184c:	b570      	push	{r4, r5, r6, lr}
 801184e:	4d0d      	ldr	r5, [pc, #52]	; (8011884 <__libc_init_array+0x38>)
 8011850:	4c0d      	ldr	r4, [pc, #52]	; (8011888 <__libc_init_array+0x3c>)
 8011852:	1b64      	subs	r4, r4, r5
 8011854:	10a4      	asrs	r4, r4, #2
 8011856:	2600      	movs	r6, #0
 8011858:	42a6      	cmp	r6, r4
 801185a:	d109      	bne.n	8011870 <__libc_init_array+0x24>
 801185c:	4d0b      	ldr	r5, [pc, #44]	; (801188c <__libc_init_array+0x40>)
 801185e:	4c0c      	ldr	r4, [pc, #48]	; (8011890 <__libc_init_array+0x44>)
 8011860:	f004 fcb8 	bl	80161d4 <_init>
 8011864:	1b64      	subs	r4, r4, r5
 8011866:	10a4      	asrs	r4, r4, #2
 8011868:	2600      	movs	r6, #0
 801186a:	42a6      	cmp	r6, r4
 801186c:	d105      	bne.n	801187a <__libc_init_array+0x2e>
 801186e:	bd70      	pop	{r4, r5, r6, pc}
 8011870:	f855 3b04 	ldr.w	r3, [r5], #4
 8011874:	4798      	blx	r3
 8011876:	3601      	adds	r6, #1
 8011878:	e7ee      	b.n	8011858 <__libc_init_array+0xc>
 801187a:	f855 3b04 	ldr.w	r3, [r5], #4
 801187e:	4798      	blx	r3
 8011880:	3601      	adds	r6, #1
 8011882:	e7f2      	b.n	801186a <__libc_init_array+0x1e>
 8011884:	0802a310 	.word	0x0802a310
 8011888:	0802a310 	.word	0x0802a310
 801188c:	0802a310 	.word	0x0802a310
 8011890:	0802a314 	.word	0x0802a314

08011894 <memset>:
 8011894:	4402      	add	r2, r0
 8011896:	4603      	mov	r3, r0
 8011898:	4293      	cmp	r3, r2
 801189a:	d100      	bne.n	801189e <memset+0xa>
 801189c:	4770      	bx	lr
 801189e:	f803 1b01 	strb.w	r1, [r3], #1
 80118a2:	e7f9      	b.n	8011898 <memset+0x4>

080118a4 <__cvt>:
 80118a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80118a8:	ec55 4b10 	vmov	r4, r5, d0
 80118ac:	2d00      	cmp	r5, #0
 80118ae:	460e      	mov	r6, r1
 80118b0:	4619      	mov	r1, r3
 80118b2:	462b      	mov	r3, r5
 80118b4:	bfbb      	ittet	lt
 80118b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80118ba:	461d      	movlt	r5, r3
 80118bc:	2300      	movge	r3, #0
 80118be:	232d      	movlt	r3, #45	; 0x2d
 80118c0:	700b      	strb	r3, [r1, #0]
 80118c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80118c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80118c8:	4691      	mov	r9, r2
 80118ca:	f023 0820 	bic.w	r8, r3, #32
 80118ce:	bfbc      	itt	lt
 80118d0:	4622      	movlt	r2, r4
 80118d2:	4614      	movlt	r4, r2
 80118d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80118d8:	d005      	beq.n	80118e6 <__cvt+0x42>
 80118da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80118de:	d100      	bne.n	80118e2 <__cvt+0x3e>
 80118e0:	3601      	adds	r6, #1
 80118e2:	2102      	movs	r1, #2
 80118e4:	e000      	b.n	80118e8 <__cvt+0x44>
 80118e6:	2103      	movs	r1, #3
 80118e8:	ab03      	add	r3, sp, #12
 80118ea:	9301      	str	r3, [sp, #4]
 80118ec:	ab02      	add	r3, sp, #8
 80118ee:	9300      	str	r3, [sp, #0]
 80118f0:	ec45 4b10 	vmov	d0, r4, r5
 80118f4:	4653      	mov	r3, sl
 80118f6:	4632      	mov	r2, r6
 80118f8:	f001 fe46 	bl	8013588 <_dtoa_r>
 80118fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011900:	4607      	mov	r7, r0
 8011902:	d102      	bne.n	801190a <__cvt+0x66>
 8011904:	f019 0f01 	tst.w	r9, #1
 8011908:	d022      	beq.n	8011950 <__cvt+0xac>
 801190a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801190e:	eb07 0906 	add.w	r9, r7, r6
 8011912:	d110      	bne.n	8011936 <__cvt+0x92>
 8011914:	783b      	ldrb	r3, [r7, #0]
 8011916:	2b30      	cmp	r3, #48	; 0x30
 8011918:	d10a      	bne.n	8011930 <__cvt+0x8c>
 801191a:	2200      	movs	r2, #0
 801191c:	2300      	movs	r3, #0
 801191e:	4620      	mov	r0, r4
 8011920:	4629      	mov	r1, r5
 8011922:	f7ef f8e9 	bl	8000af8 <__aeabi_dcmpeq>
 8011926:	b918      	cbnz	r0, 8011930 <__cvt+0x8c>
 8011928:	f1c6 0601 	rsb	r6, r6, #1
 801192c:	f8ca 6000 	str.w	r6, [sl]
 8011930:	f8da 3000 	ldr.w	r3, [sl]
 8011934:	4499      	add	r9, r3
 8011936:	2200      	movs	r2, #0
 8011938:	2300      	movs	r3, #0
 801193a:	4620      	mov	r0, r4
 801193c:	4629      	mov	r1, r5
 801193e:	f7ef f8db 	bl	8000af8 <__aeabi_dcmpeq>
 8011942:	b108      	cbz	r0, 8011948 <__cvt+0xa4>
 8011944:	f8cd 900c 	str.w	r9, [sp, #12]
 8011948:	2230      	movs	r2, #48	; 0x30
 801194a:	9b03      	ldr	r3, [sp, #12]
 801194c:	454b      	cmp	r3, r9
 801194e:	d307      	bcc.n	8011960 <__cvt+0xbc>
 8011950:	9b03      	ldr	r3, [sp, #12]
 8011952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011954:	1bdb      	subs	r3, r3, r7
 8011956:	4638      	mov	r0, r7
 8011958:	6013      	str	r3, [r2, #0]
 801195a:	b004      	add	sp, #16
 801195c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011960:	1c59      	adds	r1, r3, #1
 8011962:	9103      	str	r1, [sp, #12]
 8011964:	701a      	strb	r2, [r3, #0]
 8011966:	e7f0      	b.n	801194a <__cvt+0xa6>

08011968 <__exponent>:
 8011968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801196a:	4603      	mov	r3, r0
 801196c:	2900      	cmp	r1, #0
 801196e:	bfb8      	it	lt
 8011970:	4249      	neglt	r1, r1
 8011972:	f803 2b02 	strb.w	r2, [r3], #2
 8011976:	bfb4      	ite	lt
 8011978:	222d      	movlt	r2, #45	; 0x2d
 801197a:	222b      	movge	r2, #43	; 0x2b
 801197c:	2909      	cmp	r1, #9
 801197e:	7042      	strb	r2, [r0, #1]
 8011980:	dd2a      	ble.n	80119d8 <__exponent+0x70>
 8011982:	f10d 0407 	add.w	r4, sp, #7
 8011986:	46a4      	mov	ip, r4
 8011988:	270a      	movs	r7, #10
 801198a:	46a6      	mov	lr, r4
 801198c:	460a      	mov	r2, r1
 801198e:	fb91 f6f7 	sdiv	r6, r1, r7
 8011992:	fb07 1516 	mls	r5, r7, r6, r1
 8011996:	3530      	adds	r5, #48	; 0x30
 8011998:	2a63      	cmp	r2, #99	; 0x63
 801199a:	f104 34ff 	add.w	r4, r4, #4294967295
 801199e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80119a2:	4631      	mov	r1, r6
 80119a4:	dcf1      	bgt.n	801198a <__exponent+0x22>
 80119a6:	3130      	adds	r1, #48	; 0x30
 80119a8:	f1ae 0502 	sub.w	r5, lr, #2
 80119ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80119b0:	1c44      	adds	r4, r0, #1
 80119b2:	4629      	mov	r1, r5
 80119b4:	4561      	cmp	r1, ip
 80119b6:	d30a      	bcc.n	80119ce <__exponent+0x66>
 80119b8:	f10d 0209 	add.w	r2, sp, #9
 80119bc:	eba2 020e 	sub.w	r2, r2, lr
 80119c0:	4565      	cmp	r5, ip
 80119c2:	bf88      	it	hi
 80119c4:	2200      	movhi	r2, #0
 80119c6:	4413      	add	r3, r2
 80119c8:	1a18      	subs	r0, r3, r0
 80119ca:	b003      	add	sp, #12
 80119cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80119d6:	e7ed      	b.n	80119b4 <__exponent+0x4c>
 80119d8:	2330      	movs	r3, #48	; 0x30
 80119da:	3130      	adds	r1, #48	; 0x30
 80119dc:	7083      	strb	r3, [r0, #2]
 80119de:	70c1      	strb	r1, [r0, #3]
 80119e0:	1d03      	adds	r3, r0, #4
 80119e2:	e7f1      	b.n	80119c8 <__exponent+0x60>

080119e4 <_printf_float>:
 80119e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e8:	ed2d 8b02 	vpush	{d8}
 80119ec:	b08d      	sub	sp, #52	; 0x34
 80119ee:	460c      	mov	r4, r1
 80119f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80119f4:	4616      	mov	r6, r2
 80119f6:	461f      	mov	r7, r3
 80119f8:	4605      	mov	r5, r0
 80119fa:	f002 ff33 	bl	8014864 <_localeconv_r>
 80119fe:	f8d0 a000 	ldr.w	sl, [r0]
 8011a02:	4650      	mov	r0, sl
 8011a04:	f7ee fbf6 	bl	80001f4 <strlen>
 8011a08:	2300      	movs	r3, #0
 8011a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8011a0c:	6823      	ldr	r3, [r4, #0]
 8011a0e:	9305      	str	r3, [sp, #20]
 8011a10:	f8d8 3000 	ldr.w	r3, [r8]
 8011a14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011a18:	3307      	adds	r3, #7
 8011a1a:	f023 0307 	bic.w	r3, r3, #7
 8011a1e:	f103 0208 	add.w	r2, r3, #8
 8011a22:	f8c8 2000 	str.w	r2, [r8]
 8011a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011a2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011a32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011a36:	9307      	str	r3, [sp, #28]
 8011a38:	f8cd 8018 	str.w	r8, [sp, #24]
 8011a3c:	ee08 0a10 	vmov	s16, r0
 8011a40:	4b9f      	ldr	r3, [pc, #636]	; (8011cc0 <_printf_float+0x2dc>)
 8011a42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a46:	f04f 32ff 	mov.w	r2, #4294967295
 8011a4a:	f7ef f887 	bl	8000b5c <__aeabi_dcmpun>
 8011a4e:	bb88      	cbnz	r0, 8011ab4 <_printf_float+0xd0>
 8011a50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a54:	4b9a      	ldr	r3, [pc, #616]	; (8011cc0 <_printf_float+0x2dc>)
 8011a56:	f04f 32ff 	mov.w	r2, #4294967295
 8011a5a:	f7ef f861 	bl	8000b20 <__aeabi_dcmple>
 8011a5e:	bb48      	cbnz	r0, 8011ab4 <_printf_float+0xd0>
 8011a60:	2200      	movs	r2, #0
 8011a62:	2300      	movs	r3, #0
 8011a64:	4640      	mov	r0, r8
 8011a66:	4649      	mov	r1, r9
 8011a68:	f7ef f850 	bl	8000b0c <__aeabi_dcmplt>
 8011a6c:	b110      	cbz	r0, 8011a74 <_printf_float+0x90>
 8011a6e:	232d      	movs	r3, #45	; 0x2d
 8011a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a74:	4b93      	ldr	r3, [pc, #588]	; (8011cc4 <_printf_float+0x2e0>)
 8011a76:	4894      	ldr	r0, [pc, #592]	; (8011cc8 <_printf_float+0x2e4>)
 8011a78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011a7c:	bf94      	ite	ls
 8011a7e:	4698      	movls	r8, r3
 8011a80:	4680      	movhi	r8, r0
 8011a82:	2303      	movs	r3, #3
 8011a84:	6123      	str	r3, [r4, #16]
 8011a86:	9b05      	ldr	r3, [sp, #20]
 8011a88:	f023 0204 	bic.w	r2, r3, #4
 8011a8c:	6022      	str	r2, [r4, #0]
 8011a8e:	f04f 0900 	mov.w	r9, #0
 8011a92:	9700      	str	r7, [sp, #0]
 8011a94:	4633      	mov	r3, r6
 8011a96:	aa0b      	add	r2, sp, #44	; 0x2c
 8011a98:	4621      	mov	r1, r4
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	f000 f9d8 	bl	8011e50 <_printf_common>
 8011aa0:	3001      	adds	r0, #1
 8011aa2:	f040 8090 	bne.w	8011bc6 <_printf_float+0x1e2>
 8011aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8011aaa:	b00d      	add	sp, #52	; 0x34
 8011aac:	ecbd 8b02 	vpop	{d8}
 8011ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab4:	4642      	mov	r2, r8
 8011ab6:	464b      	mov	r3, r9
 8011ab8:	4640      	mov	r0, r8
 8011aba:	4649      	mov	r1, r9
 8011abc:	f7ef f84e 	bl	8000b5c <__aeabi_dcmpun>
 8011ac0:	b140      	cbz	r0, 8011ad4 <_printf_float+0xf0>
 8011ac2:	464b      	mov	r3, r9
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	bfbc      	itt	lt
 8011ac8:	232d      	movlt	r3, #45	; 0x2d
 8011aca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011ace:	487f      	ldr	r0, [pc, #508]	; (8011ccc <_printf_float+0x2e8>)
 8011ad0:	4b7f      	ldr	r3, [pc, #508]	; (8011cd0 <_printf_float+0x2ec>)
 8011ad2:	e7d1      	b.n	8011a78 <_printf_float+0x94>
 8011ad4:	6863      	ldr	r3, [r4, #4]
 8011ad6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011ada:	9206      	str	r2, [sp, #24]
 8011adc:	1c5a      	adds	r2, r3, #1
 8011ade:	d13f      	bne.n	8011b60 <_printf_float+0x17c>
 8011ae0:	2306      	movs	r3, #6
 8011ae2:	6063      	str	r3, [r4, #4]
 8011ae4:	9b05      	ldr	r3, [sp, #20]
 8011ae6:	6861      	ldr	r1, [r4, #4]
 8011ae8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011aec:	2300      	movs	r3, #0
 8011aee:	9303      	str	r3, [sp, #12]
 8011af0:	ab0a      	add	r3, sp, #40	; 0x28
 8011af2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011af6:	ab09      	add	r3, sp, #36	; 0x24
 8011af8:	ec49 8b10 	vmov	d0, r8, r9
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	6022      	str	r2, [r4, #0]
 8011b00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011b04:	4628      	mov	r0, r5
 8011b06:	f7ff fecd 	bl	80118a4 <__cvt>
 8011b0a:	9b06      	ldr	r3, [sp, #24]
 8011b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b0e:	2b47      	cmp	r3, #71	; 0x47
 8011b10:	4680      	mov	r8, r0
 8011b12:	d108      	bne.n	8011b26 <_printf_float+0x142>
 8011b14:	1cc8      	adds	r0, r1, #3
 8011b16:	db02      	blt.n	8011b1e <_printf_float+0x13a>
 8011b18:	6863      	ldr	r3, [r4, #4]
 8011b1a:	4299      	cmp	r1, r3
 8011b1c:	dd41      	ble.n	8011ba2 <_printf_float+0x1be>
 8011b1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8011b22:	fa5f fb8b 	uxtb.w	fp, fp
 8011b26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011b2a:	d820      	bhi.n	8011b6e <_printf_float+0x18a>
 8011b2c:	3901      	subs	r1, #1
 8011b2e:	465a      	mov	r2, fp
 8011b30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011b34:	9109      	str	r1, [sp, #36]	; 0x24
 8011b36:	f7ff ff17 	bl	8011968 <__exponent>
 8011b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b3c:	1813      	adds	r3, r2, r0
 8011b3e:	2a01      	cmp	r2, #1
 8011b40:	4681      	mov	r9, r0
 8011b42:	6123      	str	r3, [r4, #16]
 8011b44:	dc02      	bgt.n	8011b4c <_printf_float+0x168>
 8011b46:	6822      	ldr	r2, [r4, #0]
 8011b48:	07d2      	lsls	r2, r2, #31
 8011b4a:	d501      	bpl.n	8011b50 <_printf_float+0x16c>
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	6123      	str	r3, [r4, #16]
 8011b50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d09c      	beq.n	8011a92 <_printf_float+0xae>
 8011b58:	232d      	movs	r3, #45	; 0x2d
 8011b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b5e:	e798      	b.n	8011a92 <_printf_float+0xae>
 8011b60:	9a06      	ldr	r2, [sp, #24]
 8011b62:	2a47      	cmp	r2, #71	; 0x47
 8011b64:	d1be      	bne.n	8011ae4 <_printf_float+0x100>
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d1bc      	bne.n	8011ae4 <_printf_float+0x100>
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	e7b9      	b.n	8011ae2 <_printf_float+0xfe>
 8011b6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011b72:	d118      	bne.n	8011ba6 <_printf_float+0x1c2>
 8011b74:	2900      	cmp	r1, #0
 8011b76:	6863      	ldr	r3, [r4, #4]
 8011b78:	dd0b      	ble.n	8011b92 <_printf_float+0x1ae>
 8011b7a:	6121      	str	r1, [r4, #16]
 8011b7c:	b913      	cbnz	r3, 8011b84 <_printf_float+0x1a0>
 8011b7e:	6822      	ldr	r2, [r4, #0]
 8011b80:	07d0      	lsls	r0, r2, #31
 8011b82:	d502      	bpl.n	8011b8a <_printf_float+0x1a6>
 8011b84:	3301      	adds	r3, #1
 8011b86:	440b      	add	r3, r1
 8011b88:	6123      	str	r3, [r4, #16]
 8011b8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8011b8c:	f04f 0900 	mov.w	r9, #0
 8011b90:	e7de      	b.n	8011b50 <_printf_float+0x16c>
 8011b92:	b913      	cbnz	r3, 8011b9a <_printf_float+0x1b6>
 8011b94:	6822      	ldr	r2, [r4, #0]
 8011b96:	07d2      	lsls	r2, r2, #31
 8011b98:	d501      	bpl.n	8011b9e <_printf_float+0x1ba>
 8011b9a:	3302      	adds	r3, #2
 8011b9c:	e7f4      	b.n	8011b88 <_printf_float+0x1a4>
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	e7f2      	b.n	8011b88 <_printf_float+0x1a4>
 8011ba2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ba8:	4299      	cmp	r1, r3
 8011baa:	db05      	blt.n	8011bb8 <_printf_float+0x1d4>
 8011bac:	6823      	ldr	r3, [r4, #0]
 8011bae:	6121      	str	r1, [r4, #16]
 8011bb0:	07d8      	lsls	r0, r3, #31
 8011bb2:	d5ea      	bpl.n	8011b8a <_printf_float+0x1a6>
 8011bb4:	1c4b      	adds	r3, r1, #1
 8011bb6:	e7e7      	b.n	8011b88 <_printf_float+0x1a4>
 8011bb8:	2900      	cmp	r1, #0
 8011bba:	bfd4      	ite	le
 8011bbc:	f1c1 0202 	rsble	r2, r1, #2
 8011bc0:	2201      	movgt	r2, #1
 8011bc2:	4413      	add	r3, r2
 8011bc4:	e7e0      	b.n	8011b88 <_printf_float+0x1a4>
 8011bc6:	6823      	ldr	r3, [r4, #0]
 8011bc8:	055a      	lsls	r2, r3, #21
 8011bca:	d407      	bmi.n	8011bdc <_printf_float+0x1f8>
 8011bcc:	6923      	ldr	r3, [r4, #16]
 8011bce:	4642      	mov	r2, r8
 8011bd0:	4631      	mov	r1, r6
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	47b8      	blx	r7
 8011bd6:	3001      	adds	r0, #1
 8011bd8:	d12c      	bne.n	8011c34 <_printf_float+0x250>
 8011bda:	e764      	b.n	8011aa6 <_printf_float+0xc2>
 8011bdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011be0:	f240 80e0 	bls.w	8011da4 <_printf_float+0x3c0>
 8011be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011be8:	2200      	movs	r2, #0
 8011bea:	2300      	movs	r3, #0
 8011bec:	f7ee ff84 	bl	8000af8 <__aeabi_dcmpeq>
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d034      	beq.n	8011c5e <_printf_float+0x27a>
 8011bf4:	4a37      	ldr	r2, [pc, #220]	; (8011cd4 <_printf_float+0x2f0>)
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	4631      	mov	r1, r6
 8011bfa:	4628      	mov	r0, r5
 8011bfc:	47b8      	blx	r7
 8011bfe:	3001      	adds	r0, #1
 8011c00:	f43f af51 	beq.w	8011aa6 <_printf_float+0xc2>
 8011c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	db02      	blt.n	8011c12 <_printf_float+0x22e>
 8011c0c:	6823      	ldr	r3, [r4, #0]
 8011c0e:	07d8      	lsls	r0, r3, #31
 8011c10:	d510      	bpl.n	8011c34 <_printf_float+0x250>
 8011c12:	ee18 3a10 	vmov	r3, s16
 8011c16:	4652      	mov	r2, sl
 8011c18:	4631      	mov	r1, r6
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	47b8      	blx	r7
 8011c1e:	3001      	adds	r0, #1
 8011c20:	f43f af41 	beq.w	8011aa6 <_printf_float+0xc2>
 8011c24:	f04f 0800 	mov.w	r8, #0
 8011c28:	f104 091a 	add.w	r9, r4, #26
 8011c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c2e:	3b01      	subs	r3, #1
 8011c30:	4543      	cmp	r3, r8
 8011c32:	dc09      	bgt.n	8011c48 <_printf_float+0x264>
 8011c34:	6823      	ldr	r3, [r4, #0]
 8011c36:	079b      	lsls	r3, r3, #30
 8011c38:	f100 8105 	bmi.w	8011e46 <_printf_float+0x462>
 8011c3c:	68e0      	ldr	r0, [r4, #12]
 8011c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c40:	4298      	cmp	r0, r3
 8011c42:	bfb8      	it	lt
 8011c44:	4618      	movlt	r0, r3
 8011c46:	e730      	b.n	8011aaa <_printf_float+0xc6>
 8011c48:	2301      	movs	r3, #1
 8011c4a:	464a      	mov	r2, r9
 8011c4c:	4631      	mov	r1, r6
 8011c4e:	4628      	mov	r0, r5
 8011c50:	47b8      	blx	r7
 8011c52:	3001      	adds	r0, #1
 8011c54:	f43f af27 	beq.w	8011aa6 <_printf_float+0xc2>
 8011c58:	f108 0801 	add.w	r8, r8, #1
 8011c5c:	e7e6      	b.n	8011c2c <_printf_float+0x248>
 8011c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	dc39      	bgt.n	8011cd8 <_printf_float+0x2f4>
 8011c64:	4a1b      	ldr	r2, [pc, #108]	; (8011cd4 <_printf_float+0x2f0>)
 8011c66:	2301      	movs	r3, #1
 8011c68:	4631      	mov	r1, r6
 8011c6a:	4628      	mov	r0, r5
 8011c6c:	47b8      	blx	r7
 8011c6e:	3001      	adds	r0, #1
 8011c70:	f43f af19 	beq.w	8011aa6 <_printf_float+0xc2>
 8011c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c78:	4313      	orrs	r3, r2
 8011c7a:	d102      	bne.n	8011c82 <_printf_float+0x29e>
 8011c7c:	6823      	ldr	r3, [r4, #0]
 8011c7e:	07d9      	lsls	r1, r3, #31
 8011c80:	d5d8      	bpl.n	8011c34 <_printf_float+0x250>
 8011c82:	ee18 3a10 	vmov	r3, s16
 8011c86:	4652      	mov	r2, sl
 8011c88:	4631      	mov	r1, r6
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	47b8      	blx	r7
 8011c8e:	3001      	adds	r0, #1
 8011c90:	f43f af09 	beq.w	8011aa6 <_printf_float+0xc2>
 8011c94:	f04f 0900 	mov.w	r9, #0
 8011c98:	f104 0a1a 	add.w	sl, r4, #26
 8011c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c9e:	425b      	negs	r3, r3
 8011ca0:	454b      	cmp	r3, r9
 8011ca2:	dc01      	bgt.n	8011ca8 <_printf_float+0x2c4>
 8011ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ca6:	e792      	b.n	8011bce <_printf_float+0x1ea>
 8011ca8:	2301      	movs	r3, #1
 8011caa:	4652      	mov	r2, sl
 8011cac:	4631      	mov	r1, r6
 8011cae:	4628      	mov	r0, r5
 8011cb0:	47b8      	blx	r7
 8011cb2:	3001      	adds	r0, #1
 8011cb4:	f43f aef7 	beq.w	8011aa6 <_printf_float+0xc2>
 8011cb8:	f109 0901 	add.w	r9, r9, #1
 8011cbc:	e7ee      	b.n	8011c9c <_printf_float+0x2b8>
 8011cbe:	bf00      	nop
 8011cc0:	7fefffff 	.word	0x7fefffff
 8011cc4:	08029dfc 	.word	0x08029dfc
 8011cc8:	08029e00 	.word	0x08029e00
 8011ccc:	08029e08 	.word	0x08029e08
 8011cd0:	08029e04 	.word	0x08029e04
 8011cd4:	08029e0c 	.word	0x08029e0c
 8011cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	bfa8      	it	ge
 8011ce0:	461a      	movge	r2, r3
 8011ce2:	2a00      	cmp	r2, #0
 8011ce4:	4691      	mov	r9, r2
 8011ce6:	dc37      	bgt.n	8011d58 <_printf_float+0x374>
 8011ce8:	f04f 0b00 	mov.w	fp, #0
 8011cec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011cf0:	f104 021a 	add.w	r2, r4, #26
 8011cf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011cf6:	9305      	str	r3, [sp, #20]
 8011cf8:	eba3 0309 	sub.w	r3, r3, r9
 8011cfc:	455b      	cmp	r3, fp
 8011cfe:	dc33      	bgt.n	8011d68 <_printf_float+0x384>
 8011d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d04:	429a      	cmp	r2, r3
 8011d06:	db3b      	blt.n	8011d80 <_printf_float+0x39c>
 8011d08:	6823      	ldr	r3, [r4, #0]
 8011d0a:	07da      	lsls	r2, r3, #31
 8011d0c:	d438      	bmi.n	8011d80 <_printf_float+0x39c>
 8011d0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d10:	9b05      	ldr	r3, [sp, #20]
 8011d12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d14:	1ad3      	subs	r3, r2, r3
 8011d16:	eba2 0901 	sub.w	r9, r2, r1
 8011d1a:	4599      	cmp	r9, r3
 8011d1c:	bfa8      	it	ge
 8011d1e:	4699      	movge	r9, r3
 8011d20:	f1b9 0f00 	cmp.w	r9, #0
 8011d24:	dc35      	bgt.n	8011d92 <_printf_float+0x3ae>
 8011d26:	f04f 0800 	mov.w	r8, #0
 8011d2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d2e:	f104 0a1a 	add.w	sl, r4, #26
 8011d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d36:	1a9b      	subs	r3, r3, r2
 8011d38:	eba3 0309 	sub.w	r3, r3, r9
 8011d3c:	4543      	cmp	r3, r8
 8011d3e:	f77f af79 	ble.w	8011c34 <_printf_float+0x250>
 8011d42:	2301      	movs	r3, #1
 8011d44:	4652      	mov	r2, sl
 8011d46:	4631      	mov	r1, r6
 8011d48:	4628      	mov	r0, r5
 8011d4a:	47b8      	blx	r7
 8011d4c:	3001      	adds	r0, #1
 8011d4e:	f43f aeaa 	beq.w	8011aa6 <_printf_float+0xc2>
 8011d52:	f108 0801 	add.w	r8, r8, #1
 8011d56:	e7ec      	b.n	8011d32 <_printf_float+0x34e>
 8011d58:	4613      	mov	r3, r2
 8011d5a:	4631      	mov	r1, r6
 8011d5c:	4642      	mov	r2, r8
 8011d5e:	4628      	mov	r0, r5
 8011d60:	47b8      	blx	r7
 8011d62:	3001      	adds	r0, #1
 8011d64:	d1c0      	bne.n	8011ce8 <_printf_float+0x304>
 8011d66:	e69e      	b.n	8011aa6 <_printf_float+0xc2>
 8011d68:	2301      	movs	r3, #1
 8011d6a:	4631      	mov	r1, r6
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	9205      	str	r2, [sp, #20]
 8011d70:	47b8      	blx	r7
 8011d72:	3001      	adds	r0, #1
 8011d74:	f43f ae97 	beq.w	8011aa6 <_printf_float+0xc2>
 8011d78:	9a05      	ldr	r2, [sp, #20]
 8011d7a:	f10b 0b01 	add.w	fp, fp, #1
 8011d7e:	e7b9      	b.n	8011cf4 <_printf_float+0x310>
 8011d80:	ee18 3a10 	vmov	r3, s16
 8011d84:	4652      	mov	r2, sl
 8011d86:	4631      	mov	r1, r6
 8011d88:	4628      	mov	r0, r5
 8011d8a:	47b8      	blx	r7
 8011d8c:	3001      	adds	r0, #1
 8011d8e:	d1be      	bne.n	8011d0e <_printf_float+0x32a>
 8011d90:	e689      	b.n	8011aa6 <_printf_float+0xc2>
 8011d92:	9a05      	ldr	r2, [sp, #20]
 8011d94:	464b      	mov	r3, r9
 8011d96:	4442      	add	r2, r8
 8011d98:	4631      	mov	r1, r6
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	47b8      	blx	r7
 8011d9e:	3001      	adds	r0, #1
 8011da0:	d1c1      	bne.n	8011d26 <_printf_float+0x342>
 8011da2:	e680      	b.n	8011aa6 <_printf_float+0xc2>
 8011da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011da6:	2a01      	cmp	r2, #1
 8011da8:	dc01      	bgt.n	8011dae <_printf_float+0x3ca>
 8011daa:	07db      	lsls	r3, r3, #31
 8011dac:	d538      	bpl.n	8011e20 <_printf_float+0x43c>
 8011dae:	2301      	movs	r3, #1
 8011db0:	4642      	mov	r2, r8
 8011db2:	4631      	mov	r1, r6
 8011db4:	4628      	mov	r0, r5
 8011db6:	47b8      	blx	r7
 8011db8:	3001      	adds	r0, #1
 8011dba:	f43f ae74 	beq.w	8011aa6 <_printf_float+0xc2>
 8011dbe:	ee18 3a10 	vmov	r3, s16
 8011dc2:	4652      	mov	r2, sl
 8011dc4:	4631      	mov	r1, r6
 8011dc6:	4628      	mov	r0, r5
 8011dc8:	47b8      	blx	r7
 8011dca:	3001      	adds	r0, #1
 8011dcc:	f43f ae6b 	beq.w	8011aa6 <_printf_float+0xc2>
 8011dd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	f7ee fe8e 	bl	8000af8 <__aeabi_dcmpeq>
 8011ddc:	b9d8      	cbnz	r0, 8011e16 <_printf_float+0x432>
 8011dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011de0:	f108 0201 	add.w	r2, r8, #1
 8011de4:	3b01      	subs	r3, #1
 8011de6:	4631      	mov	r1, r6
 8011de8:	4628      	mov	r0, r5
 8011dea:	47b8      	blx	r7
 8011dec:	3001      	adds	r0, #1
 8011dee:	d10e      	bne.n	8011e0e <_printf_float+0x42a>
 8011df0:	e659      	b.n	8011aa6 <_printf_float+0xc2>
 8011df2:	2301      	movs	r3, #1
 8011df4:	4652      	mov	r2, sl
 8011df6:	4631      	mov	r1, r6
 8011df8:	4628      	mov	r0, r5
 8011dfa:	47b8      	blx	r7
 8011dfc:	3001      	adds	r0, #1
 8011dfe:	f43f ae52 	beq.w	8011aa6 <_printf_float+0xc2>
 8011e02:	f108 0801 	add.w	r8, r8, #1
 8011e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e08:	3b01      	subs	r3, #1
 8011e0a:	4543      	cmp	r3, r8
 8011e0c:	dcf1      	bgt.n	8011df2 <_printf_float+0x40e>
 8011e0e:	464b      	mov	r3, r9
 8011e10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011e14:	e6dc      	b.n	8011bd0 <_printf_float+0x1ec>
 8011e16:	f04f 0800 	mov.w	r8, #0
 8011e1a:	f104 0a1a 	add.w	sl, r4, #26
 8011e1e:	e7f2      	b.n	8011e06 <_printf_float+0x422>
 8011e20:	2301      	movs	r3, #1
 8011e22:	4642      	mov	r2, r8
 8011e24:	e7df      	b.n	8011de6 <_printf_float+0x402>
 8011e26:	2301      	movs	r3, #1
 8011e28:	464a      	mov	r2, r9
 8011e2a:	4631      	mov	r1, r6
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	47b8      	blx	r7
 8011e30:	3001      	adds	r0, #1
 8011e32:	f43f ae38 	beq.w	8011aa6 <_printf_float+0xc2>
 8011e36:	f108 0801 	add.w	r8, r8, #1
 8011e3a:	68e3      	ldr	r3, [r4, #12]
 8011e3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e3e:	1a5b      	subs	r3, r3, r1
 8011e40:	4543      	cmp	r3, r8
 8011e42:	dcf0      	bgt.n	8011e26 <_printf_float+0x442>
 8011e44:	e6fa      	b.n	8011c3c <_printf_float+0x258>
 8011e46:	f04f 0800 	mov.w	r8, #0
 8011e4a:	f104 0919 	add.w	r9, r4, #25
 8011e4e:	e7f4      	b.n	8011e3a <_printf_float+0x456>

08011e50 <_printf_common>:
 8011e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e54:	4616      	mov	r6, r2
 8011e56:	4699      	mov	r9, r3
 8011e58:	688a      	ldr	r2, [r1, #8]
 8011e5a:	690b      	ldr	r3, [r1, #16]
 8011e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e60:	4293      	cmp	r3, r2
 8011e62:	bfb8      	it	lt
 8011e64:	4613      	movlt	r3, r2
 8011e66:	6033      	str	r3, [r6, #0]
 8011e68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e6c:	4607      	mov	r7, r0
 8011e6e:	460c      	mov	r4, r1
 8011e70:	b10a      	cbz	r2, 8011e76 <_printf_common+0x26>
 8011e72:	3301      	adds	r3, #1
 8011e74:	6033      	str	r3, [r6, #0]
 8011e76:	6823      	ldr	r3, [r4, #0]
 8011e78:	0699      	lsls	r1, r3, #26
 8011e7a:	bf42      	ittt	mi
 8011e7c:	6833      	ldrmi	r3, [r6, #0]
 8011e7e:	3302      	addmi	r3, #2
 8011e80:	6033      	strmi	r3, [r6, #0]
 8011e82:	6825      	ldr	r5, [r4, #0]
 8011e84:	f015 0506 	ands.w	r5, r5, #6
 8011e88:	d106      	bne.n	8011e98 <_printf_common+0x48>
 8011e8a:	f104 0a19 	add.w	sl, r4, #25
 8011e8e:	68e3      	ldr	r3, [r4, #12]
 8011e90:	6832      	ldr	r2, [r6, #0]
 8011e92:	1a9b      	subs	r3, r3, r2
 8011e94:	42ab      	cmp	r3, r5
 8011e96:	dc26      	bgt.n	8011ee6 <_printf_common+0x96>
 8011e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e9c:	1e13      	subs	r3, r2, #0
 8011e9e:	6822      	ldr	r2, [r4, #0]
 8011ea0:	bf18      	it	ne
 8011ea2:	2301      	movne	r3, #1
 8011ea4:	0692      	lsls	r2, r2, #26
 8011ea6:	d42b      	bmi.n	8011f00 <_printf_common+0xb0>
 8011ea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011eac:	4649      	mov	r1, r9
 8011eae:	4638      	mov	r0, r7
 8011eb0:	47c0      	blx	r8
 8011eb2:	3001      	adds	r0, #1
 8011eb4:	d01e      	beq.n	8011ef4 <_printf_common+0xa4>
 8011eb6:	6823      	ldr	r3, [r4, #0]
 8011eb8:	68e5      	ldr	r5, [r4, #12]
 8011eba:	6832      	ldr	r2, [r6, #0]
 8011ebc:	f003 0306 	and.w	r3, r3, #6
 8011ec0:	2b04      	cmp	r3, #4
 8011ec2:	bf08      	it	eq
 8011ec4:	1aad      	subeq	r5, r5, r2
 8011ec6:	68a3      	ldr	r3, [r4, #8]
 8011ec8:	6922      	ldr	r2, [r4, #16]
 8011eca:	bf0c      	ite	eq
 8011ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ed0:	2500      	movne	r5, #0
 8011ed2:	4293      	cmp	r3, r2
 8011ed4:	bfc4      	itt	gt
 8011ed6:	1a9b      	subgt	r3, r3, r2
 8011ed8:	18ed      	addgt	r5, r5, r3
 8011eda:	2600      	movs	r6, #0
 8011edc:	341a      	adds	r4, #26
 8011ede:	42b5      	cmp	r5, r6
 8011ee0:	d11a      	bne.n	8011f18 <_printf_common+0xc8>
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	e008      	b.n	8011ef8 <_printf_common+0xa8>
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	4652      	mov	r2, sl
 8011eea:	4649      	mov	r1, r9
 8011eec:	4638      	mov	r0, r7
 8011eee:	47c0      	blx	r8
 8011ef0:	3001      	adds	r0, #1
 8011ef2:	d103      	bne.n	8011efc <_printf_common+0xac>
 8011ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011efc:	3501      	adds	r5, #1
 8011efe:	e7c6      	b.n	8011e8e <_printf_common+0x3e>
 8011f00:	18e1      	adds	r1, r4, r3
 8011f02:	1c5a      	adds	r2, r3, #1
 8011f04:	2030      	movs	r0, #48	; 0x30
 8011f06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f0a:	4422      	add	r2, r4
 8011f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f14:	3302      	adds	r3, #2
 8011f16:	e7c7      	b.n	8011ea8 <_printf_common+0x58>
 8011f18:	2301      	movs	r3, #1
 8011f1a:	4622      	mov	r2, r4
 8011f1c:	4649      	mov	r1, r9
 8011f1e:	4638      	mov	r0, r7
 8011f20:	47c0      	blx	r8
 8011f22:	3001      	adds	r0, #1
 8011f24:	d0e6      	beq.n	8011ef4 <_printf_common+0xa4>
 8011f26:	3601      	adds	r6, #1
 8011f28:	e7d9      	b.n	8011ede <_printf_common+0x8e>
	...

08011f2c <_printf_i>:
 8011f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f30:	460c      	mov	r4, r1
 8011f32:	4691      	mov	r9, r2
 8011f34:	7e27      	ldrb	r7, [r4, #24]
 8011f36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011f38:	2f78      	cmp	r7, #120	; 0x78
 8011f3a:	4680      	mov	r8, r0
 8011f3c:	469a      	mov	sl, r3
 8011f3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f42:	d807      	bhi.n	8011f54 <_printf_i+0x28>
 8011f44:	2f62      	cmp	r7, #98	; 0x62
 8011f46:	d80a      	bhi.n	8011f5e <_printf_i+0x32>
 8011f48:	2f00      	cmp	r7, #0
 8011f4a:	f000 80d8 	beq.w	80120fe <_printf_i+0x1d2>
 8011f4e:	2f58      	cmp	r7, #88	; 0x58
 8011f50:	f000 80a3 	beq.w	801209a <_printf_i+0x16e>
 8011f54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f5c:	e03a      	b.n	8011fd4 <_printf_i+0xa8>
 8011f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f62:	2b15      	cmp	r3, #21
 8011f64:	d8f6      	bhi.n	8011f54 <_printf_i+0x28>
 8011f66:	a001      	add	r0, pc, #4	; (adr r0, 8011f6c <_printf_i+0x40>)
 8011f68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011f6c:	08011fc5 	.word	0x08011fc5
 8011f70:	08011fd9 	.word	0x08011fd9
 8011f74:	08011f55 	.word	0x08011f55
 8011f78:	08011f55 	.word	0x08011f55
 8011f7c:	08011f55 	.word	0x08011f55
 8011f80:	08011f55 	.word	0x08011f55
 8011f84:	08011fd9 	.word	0x08011fd9
 8011f88:	08011f55 	.word	0x08011f55
 8011f8c:	08011f55 	.word	0x08011f55
 8011f90:	08011f55 	.word	0x08011f55
 8011f94:	08011f55 	.word	0x08011f55
 8011f98:	080120e5 	.word	0x080120e5
 8011f9c:	08012009 	.word	0x08012009
 8011fa0:	080120c7 	.word	0x080120c7
 8011fa4:	08011f55 	.word	0x08011f55
 8011fa8:	08011f55 	.word	0x08011f55
 8011fac:	08012107 	.word	0x08012107
 8011fb0:	08011f55 	.word	0x08011f55
 8011fb4:	08012009 	.word	0x08012009
 8011fb8:	08011f55 	.word	0x08011f55
 8011fbc:	08011f55 	.word	0x08011f55
 8011fc0:	080120cf 	.word	0x080120cf
 8011fc4:	680b      	ldr	r3, [r1, #0]
 8011fc6:	1d1a      	adds	r2, r3, #4
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	600a      	str	r2, [r1, #0]
 8011fcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	e0a3      	b.n	8012120 <_printf_i+0x1f4>
 8011fd8:	6825      	ldr	r5, [r4, #0]
 8011fda:	6808      	ldr	r0, [r1, #0]
 8011fdc:	062e      	lsls	r6, r5, #24
 8011fde:	f100 0304 	add.w	r3, r0, #4
 8011fe2:	d50a      	bpl.n	8011ffa <_printf_i+0xce>
 8011fe4:	6805      	ldr	r5, [r0, #0]
 8011fe6:	600b      	str	r3, [r1, #0]
 8011fe8:	2d00      	cmp	r5, #0
 8011fea:	da03      	bge.n	8011ff4 <_printf_i+0xc8>
 8011fec:	232d      	movs	r3, #45	; 0x2d
 8011fee:	426d      	negs	r5, r5
 8011ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ff4:	485e      	ldr	r0, [pc, #376]	; (8012170 <_printf_i+0x244>)
 8011ff6:	230a      	movs	r3, #10
 8011ff8:	e019      	b.n	801202e <_printf_i+0x102>
 8011ffa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011ffe:	6805      	ldr	r5, [r0, #0]
 8012000:	600b      	str	r3, [r1, #0]
 8012002:	bf18      	it	ne
 8012004:	b22d      	sxthne	r5, r5
 8012006:	e7ef      	b.n	8011fe8 <_printf_i+0xbc>
 8012008:	680b      	ldr	r3, [r1, #0]
 801200a:	6825      	ldr	r5, [r4, #0]
 801200c:	1d18      	adds	r0, r3, #4
 801200e:	6008      	str	r0, [r1, #0]
 8012010:	0628      	lsls	r0, r5, #24
 8012012:	d501      	bpl.n	8012018 <_printf_i+0xec>
 8012014:	681d      	ldr	r5, [r3, #0]
 8012016:	e002      	b.n	801201e <_printf_i+0xf2>
 8012018:	0669      	lsls	r1, r5, #25
 801201a:	d5fb      	bpl.n	8012014 <_printf_i+0xe8>
 801201c:	881d      	ldrh	r5, [r3, #0]
 801201e:	4854      	ldr	r0, [pc, #336]	; (8012170 <_printf_i+0x244>)
 8012020:	2f6f      	cmp	r7, #111	; 0x6f
 8012022:	bf0c      	ite	eq
 8012024:	2308      	moveq	r3, #8
 8012026:	230a      	movne	r3, #10
 8012028:	2100      	movs	r1, #0
 801202a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801202e:	6866      	ldr	r6, [r4, #4]
 8012030:	60a6      	str	r6, [r4, #8]
 8012032:	2e00      	cmp	r6, #0
 8012034:	bfa2      	ittt	ge
 8012036:	6821      	ldrge	r1, [r4, #0]
 8012038:	f021 0104 	bicge.w	r1, r1, #4
 801203c:	6021      	strge	r1, [r4, #0]
 801203e:	b90d      	cbnz	r5, 8012044 <_printf_i+0x118>
 8012040:	2e00      	cmp	r6, #0
 8012042:	d04d      	beq.n	80120e0 <_printf_i+0x1b4>
 8012044:	4616      	mov	r6, r2
 8012046:	fbb5 f1f3 	udiv	r1, r5, r3
 801204a:	fb03 5711 	mls	r7, r3, r1, r5
 801204e:	5dc7      	ldrb	r7, [r0, r7]
 8012050:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012054:	462f      	mov	r7, r5
 8012056:	42bb      	cmp	r3, r7
 8012058:	460d      	mov	r5, r1
 801205a:	d9f4      	bls.n	8012046 <_printf_i+0x11a>
 801205c:	2b08      	cmp	r3, #8
 801205e:	d10b      	bne.n	8012078 <_printf_i+0x14c>
 8012060:	6823      	ldr	r3, [r4, #0]
 8012062:	07df      	lsls	r7, r3, #31
 8012064:	d508      	bpl.n	8012078 <_printf_i+0x14c>
 8012066:	6923      	ldr	r3, [r4, #16]
 8012068:	6861      	ldr	r1, [r4, #4]
 801206a:	4299      	cmp	r1, r3
 801206c:	bfde      	ittt	le
 801206e:	2330      	movle	r3, #48	; 0x30
 8012070:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012074:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012078:	1b92      	subs	r2, r2, r6
 801207a:	6122      	str	r2, [r4, #16]
 801207c:	f8cd a000 	str.w	sl, [sp]
 8012080:	464b      	mov	r3, r9
 8012082:	aa03      	add	r2, sp, #12
 8012084:	4621      	mov	r1, r4
 8012086:	4640      	mov	r0, r8
 8012088:	f7ff fee2 	bl	8011e50 <_printf_common>
 801208c:	3001      	adds	r0, #1
 801208e:	d14c      	bne.n	801212a <_printf_i+0x1fe>
 8012090:	f04f 30ff 	mov.w	r0, #4294967295
 8012094:	b004      	add	sp, #16
 8012096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801209a:	4835      	ldr	r0, [pc, #212]	; (8012170 <_printf_i+0x244>)
 801209c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80120a0:	6823      	ldr	r3, [r4, #0]
 80120a2:	680e      	ldr	r6, [r1, #0]
 80120a4:	061f      	lsls	r7, r3, #24
 80120a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80120aa:	600e      	str	r6, [r1, #0]
 80120ac:	d514      	bpl.n	80120d8 <_printf_i+0x1ac>
 80120ae:	07d9      	lsls	r1, r3, #31
 80120b0:	bf44      	itt	mi
 80120b2:	f043 0320 	orrmi.w	r3, r3, #32
 80120b6:	6023      	strmi	r3, [r4, #0]
 80120b8:	b91d      	cbnz	r5, 80120c2 <_printf_i+0x196>
 80120ba:	6823      	ldr	r3, [r4, #0]
 80120bc:	f023 0320 	bic.w	r3, r3, #32
 80120c0:	6023      	str	r3, [r4, #0]
 80120c2:	2310      	movs	r3, #16
 80120c4:	e7b0      	b.n	8012028 <_printf_i+0xfc>
 80120c6:	6823      	ldr	r3, [r4, #0]
 80120c8:	f043 0320 	orr.w	r3, r3, #32
 80120cc:	6023      	str	r3, [r4, #0]
 80120ce:	2378      	movs	r3, #120	; 0x78
 80120d0:	4828      	ldr	r0, [pc, #160]	; (8012174 <_printf_i+0x248>)
 80120d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80120d6:	e7e3      	b.n	80120a0 <_printf_i+0x174>
 80120d8:	065e      	lsls	r6, r3, #25
 80120da:	bf48      	it	mi
 80120dc:	b2ad      	uxthmi	r5, r5
 80120de:	e7e6      	b.n	80120ae <_printf_i+0x182>
 80120e0:	4616      	mov	r6, r2
 80120e2:	e7bb      	b.n	801205c <_printf_i+0x130>
 80120e4:	680b      	ldr	r3, [r1, #0]
 80120e6:	6826      	ldr	r6, [r4, #0]
 80120e8:	6960      	ldr	r0, [r4, #20]
 80120ea:	1d1d      	adds	r5, r3, #4
 80120ec:	600d      	str	r5, [r1, #0]
 80120ee:	0635      	lsls	r5, r6, #24
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	d501      	bpl.n	80120f8 <_printf_i+0x1cc>
 80120f4:	6018      	str	r0, [r3, #0]
 80120f6:	e002      	b.n	80120fe <_printf_i+0x1d2>
 80120f8:	0671      	lsls	r1, r6, #25
 80120fa:	d5fb      	bpl.n	80120f4 <_printf_i+0x1c8>
 80120fc:	8018      	strh	r0, [r3, #0]
 80120fe:	2300      	movs	r3, #0
 8012100:	6123      	str	r3, [r4, #16]
 8012102:	4616      	mov	r6, r2
 8012104:	e7ba      	b.n	801207c <_printf_i+0x150>
 8012106:	680b      	ldr	r3, [r1, #0]
 8012108:	1d1a      	adds	r2, r3, #4
 801210a:	600a      	str	r2, [r1, #0]
 801210c:	681e      	ldr	r6, [r3, #0]
 801210e:	6862      	ldr	r2, [r4, #4]
 8012110:	2100      	movs	r1, #0
 8012112:	4630      	mov	r0, r6
 8012114:	f7ee f87c 	bl	8000210 <memchr>
 8012118:	b108      	cbz	r0, 801211e <_printf_i+0x1f2>
 801211a:	1b80      	subs	r0, r0, r6
 801211c:	6060      	str	r0, [r4, #4]
 801211e:	6863      	ldr	r3, [r4, #4]
 8012120:	6123      	str	r3, [r4, #16]
 8012122:	2300      	movs	r3, #0
 8012124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012128:	e7a8      	b.n	801207c <_printf_i+0x150>
 801212a:	6923      	ldr	r3, [r4, #16]
 801212c:	4632      	mov	r2, r6
 801212e:	4649      	mov	r1, r9
 8012130:	4640      	mov	r0, r8
 8012132:	47d0      	blx	sl
 8012134:	3001      	adds	r0, #1
 8012136:	d0ab      	beq.n	8012090 <_printf_i+0x164>
 8012138:	6823      	ldr	r3, [r4, #0]
 801213a:	079b      	lsls	r3, r3, #30
 801213c:	d413      	bmi.n	8012166 <_printf_i+0x23a>
 801213e:	68e0      	ldr	r0, [r4, #12]
 8012140:	9b03      	ldr	r3, [sp, #12]
 8012142:	4298      	cmp	r0, r3
 8012144:	bfb8      	it	lt
 8012146:	4618      	movlt	r0, r3
 8012148:	e7a4      	b.n	8012094 <_printf_i+0x168>
 801214a:	2301      	movs	r3, #1
 801214c:	4632      	mov	r2, r6
 801214e:	4649      	mov	r1, r9
 8012150:	4640      	mov	r0, r8
 8012152:	47d0      	blx	sl
 8012154:	3001      	adds	r0, #1
 8012156:	d09b      	beq.n	8012090 <_printf_i+0x164>
 8012158:	3501      	adds	r5, #1
 801215a:	68e3      	ldr	r3, [r4, #12]
 801215c:	9903      	ldr	r1, [sp, #12]
 801215e:	1a5b      	subs	r3, r3, r1
 8012160:	42ab      	cmp	r3, r5
 8012162:	dcf2      	bgt.n	801214a <_printf_i+0x21e>
 8012164:	e7eb      	b.n	801213e <_printf_i+0x212>
 8012166:	2500      	movs	r5, #0
 8012168:	f104 0619 	add.w	r6, r4, #25
 801216c:	e7f5      	b.n	801215a <_printf_i+0x22e>
 801216e:	bf00      	nop
 8012170:	08029e0e 	.word	0x08029e0e
 8012174:	08029e1f 	.word	0x08029e1f

08012178 <_scanf_float>:
 8012178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801217c:	b087      	sub	sp, #28
 801217e:	4617      	mov	r7, r2
 8012180:	9303      	str	r3, [sp, #12]
 8012182:	688b      	ldr	r3, [r1, #8]
 8012184:	1e5a      	subs	r2, r3, #1
 8012186:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801218a:	bf83      	ittte	hi
 801218c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012190:	195b      	addhi	r3, r3, r5
 8012192:	9302      	strhi	r3, [sp, #8]
 8012194:	2300      	movls	r3, #0
 8012196:	bf86      	itte	hi
 8012198:	f240 135d 	movwhi	r3, #349	; 0x15d
 801219c:	608b      	strhi	r3, [r1, #8]
 801219e:	9302      	strls	r3, [sp, #8]
 80121a0:	680b      	ldr	r3, [r1, #0]
 80121a2:	468b      	mov	fp, r1
 80121a4:	2500      	movs	r5, #0
 80121a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80121aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80121ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80121b2:	4680      	mov	r8, r0
 80121b4:	460c      	mov	r4, r1
 80121b6:	465e      	mov	r6, fp
 80121b8:	46aa      	mov	sl, r5
 80121ba:	46a9      	mov	r9, r5
 80121bc:	9501      	str	r5, [sp, #4]
 80121be:	68a2      	ldr	r2, [r4, #8]
 80121c0:	b152      	cbz	r2, 80121d8 <_scanf_float+0x60>
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	2b4e      	cmp	r3, #78	; 0x4e
 80121c8:	d864      	bhi.n	8012294 <_scanf_float+0x11c>
 80121ca:	2b40      	cmp	r3, #64	; 0x40
 80121cc:	d83c      	bhi.n	8012248 <_scanf_float+0xd0>
 80121ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80121d2:	b2c8      	uxtb	r0, r1
 80121d4:	280e      	cmp	r0, #14
 80121d6:	d93a      	bls.n	801224e <_scanf_float+0xd6>
 80121d8:	f1b9 0f00 	cmp.w	r9, #0
 80121dc:	d003      	beq.n	80121e6 <_scanf_float+0x6e>
 80121de:	6823      	ldr	r3, [r4, #0]
 80121e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80121e4:	6023      	str	r3, [r4, #0]
 80121e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121ea:	f1ba 0f01 	cmp.w	sl, #1
 80121ee:	f200 8113 	bhi.w	8012418 <_scanf_float+0x2a0>
 80121f2:	455e      	cmp	r6, fp
 80121f4:	f200 8105 	bhi.w	8012402 <_scanf_float+0x28a>
 80121f8:	2501      	movs	r5, #1
 80121fa:	4628      	mov	r0, r5
 80121fc:	b007      	add	sp, #28
 80121fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012202:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012206:	2a0d      	cmp	r2, #13
 8012208:	d8e6      	bhi.n	80121d8 <_scanf_float+0x60>
 801220a:	a101      	add	r1, pc, #4	; (adr r1, 8012210 <_scanf_float+0x98>)
 801220c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012210:	0801234f 	.word	0x0801234f
 8012214:	080121d9 	.word	0x080121d9
 8012218:	080121d9 	.word	0x080121d9
 801221c:	080121d9 	.word	0x080121d9
 8012220:	080123af 	.word	0x080123af
 8012224:	08012387 	.word	0x08012387
 8012228:	080121d9 	.word	0x080121d9
 801222c:	080121d9 	.word	0x080121d9
 8012230:	0801235d 	.word	0x0801235d
 8012234:	080121d9 	.word	0x080121d9
 8012238:	080121d9 	.word	0x080121d9
 801223c:	080121d9 	.word	0x080121d9
 8012240:	080121d9 	.word	0x080121d9
 8012244:	08012315 	.word	0x08012315
 8012248:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801224c:	e7db      	b.n	8012206 <_scanf_float+0x8e>
 801224e:	290e      	cmp	r1, #14
 8012250:	d8c2      	bhi.n	80121d8 <_scanf_float+0x60>
 8012252:	a001      	add	r0, pc, #4	; (adr r0, 8012258 <_scanf_float+0xe0>)
 8012254:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012258:	08012307 	.word	0x08012307
 801225c:	080121d9 	.word	0x080121d9
 8012260:	08012307 	.word	0x08012307
 8012264:	0801239b 	.word	0x0801239b
 8012268:	080121d9 	.word	0x080121d9
 801226c:	080122b5 	.word	0x080122b5
 8012270:	080122f1 	.word	0x080122f1
 8012274:	080122f1 	.word	0x080122f1
 8012278:	080122f1 	.word	0x080122f1
 801227c:	080122f1 	.word	0x080122f1
 8012280:	080122f1 	.word	0x080122f1
 8012284:	080122f1 	.word	0x080122f1
 8012288:	080122f1 	.word	0x080122f1
 801228c:	080122f1 	.word	0x080122f1
 8012290:	080122f1 	.word	0x080122f1
 8012294:	2b6e      	cmp	r3, #110	; 0x6e
 8012296:	d809      	bhi.n	80122ac <_scanf_float+0x134>
 8012298:	2b60      	cmp	r3, #96	; 0x60
 801229a:	d8b2      	bhi.n	8012202 <_scanf_float+0x8a>
 801229c:	2b54      	cmp	r3, #84	; 0x54
 801229e:	d077      	beq.n	8012390 <_scanf_float+0x218>
 80122a0:	2b59      	cmp	r3, #89	; 0x59
 80122a2:	d199      	bne.n	80121d8 <_scanf_float+0x60>
 80122a4:	2d07      	cmp	r5, #7
 80122a6:	d197      	bne.n	80121d8 <_scanf_float+0x60>
 80122a8:	2508      	movs	r5, #8
 80122aa:	e029      	b.n	8012300 <_scanf_float+0x188>
 80122ac:	2b74      	cmp	r3, #116	; 0x74
 80122ae:	d06f      	beq.n	8012390 <_scanf_float+0x218>
 80122b0:	2b79      	cmp	r3, #121	; 0x79
 80122b2:	e7f6      	b.n	80122a2 <_scanf_float+0x12a>
 80122b4:	6821      	ldr	r1, [r4, #0]
 80122b6:	05c8      	lsls	r0, r1, #23
 80122b8:	d51a      	bpl.n	80122f0 <_scanf_float+0x178>
 80122ba:	9b02      	ldr	r3, [sp, #8]
 80122bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80122c0:	6021      	str	r1, [r4, #0]
 80122c2:	f109 0901 	add.w	r9, r9, #1
 80122c6:	b11b      	cbz	r3, 80122d0 <_scanf_float+0x158>
 80122c8:	3b01      	subs	r3, #1
 80122ca:	3201      	adds	r2, #1
 80122cc:	9302      	str	r3, [sp, #8]
 80122ce:	60a2      	str	r2, [r4, #8]
 80122d0:	68a3      	ldr	r3, [r4, #8]
 80122d2:	3b01      	subs	r3, #1
 80122d4:	60a3      	str	r3, [r4, #8]
 80122d6:	6923      	ldr	r3, [r4, #16]
 80122d8:	3301      	adds	r3, #1
 80122da:	6123      	str	r3, [r4, #16]
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	3b01      	subs	r3, #1
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	607b      	str	r3, [r7, #4]
 80122e4:	f340 8084 	ble.w	80123f0 <_scanf_float+0x278>
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	3301      	adds	r3, #1
 80122ec:	603b      	str	r3, [r7, #0]
 80122ee:	e766      	b.n	80121be <_scanf_float+0x46>
 80122f0:	eb1a 0f05 	cmn.w	sl, r5
 80122f4:	f47f af70 	bne.w	80121d8 <_scanf_float+0x60>
 80122f8:	6822      	ldr	r2, [r4, #0]
 80122fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80122fe:	6022      	str	r2, [r4, #0]
 8012300:	f806 3b01 	strb.w	r3, [r6], #1
 8012304:	e7e4      	b.n	80122d0 <_scanf_float+0x158>
 8012306:	6822      	ldr	r2, [r4, #0]
 8012308:	0610      	lsls	r0, r2, #24
 801230a:	f57f af65 	bpl.w	80121d8 <_scanf_float+0x60>
 801230e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012312:	e7f4      	b.n	80122fe <_scanf_float+0x186>
 8012314:	f1ba 0f00 	cmp.w	sl, #0
 8012318:	d10e      	bne.n	8012338 <_scanf_float+0x1c0>
 801231a:	f1b9 0f00 	cmp.w	r9, #0
 801231e:	d10e      	bne.n	801233e <_scanf_float+0x1c6>
 8012320:	6822      	ldr	r2, [r4, #0]
 8012322:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012326:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801232a:	d108      	bne.n	801233e <_scanf_float+0x1c6>
 801232c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012330:	6022      	str	r2, [r4, #0]
 8012332:	f04f 0a01 	mov.w	sl, #1
 8012336:	e7e3      	b.n	8012300 <_scanf_float+0x188>
 8012338:	f1ba 0f02 	cmp.w	sl, #2
 801233c:	d055      	beq.n	80123ea <_scanf_float+0x272>
 801233e:	2d01      	cmp	r5, #1
 8012340:	d002      	beq.n	8012348 <_scanf_float+0x1d0>
 8012342:	2d04      	cmp	r5, #4
 8012344:	f47f af48 	bne.w	80121d8 <_scanf_float+0x60>
 8012348:	3501      	adds	r5, #1
 801234a:	b2ed      	uxtb	r5, r5
 801234c:	e7d8      	b.n	8012300 <_scanf_float+0x188>
 801234e:	f1ba 0f01 	cmp.w	sl, #1
 8012352:	f47f af41 	bne.w	80121d8 <_scanf_float+0x60>
 8012356:	f04f 0a02 	mov.w	sl, #2
 801235a:	e7d1      	b.n	8012300 <_scanf_float+0x188>
 801235c:	b97d      	cbnz	r5, 801237e <_scanf_float+0x206>
 801235e:	f1b9 0f00 	cmp.w	r9, #0
 8012362:	f47f af3c 	bne.w	80121de <_scanf_float+0x66>
 8012366:	6822      	ldr	r2, [r4, #0]
 8012368:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801236c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012370:	f47f af39 	bne.w	80121e6 <_scanf_float+0x6e>
 8012374:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012378:	6022      	str	r2, [r4, #0]
 801237a:	2501      	movs	r5, #1
 801237c:	e7c0      	b.n	8012300 <_scanf_float+0x188>
 801237e:	2d03      	cmp	r5, #3
 8012380:	d0e2      	beq.n	8012348 <_scanf_float+0x1d0>
 8012382:	2d05      	cmp	r5, #5
 8012384:	e7de      	b.n	8012344 <_scanf_float+0x1cc>
 8012386:	2d02      	cmp	r5, #2
 8012388:	f47f af26 	bne.w	80121d8 <_scanf_float+0x60>
 801238c:	2503      	movs	r5, #3
 801238e:	e7b7      	b.n	8012300 <_scanf_float+0x188>
 8012390:	2d06      	cmp	r5, #6
 8012392:	f47f af21 	bne.w	80121d8 <_scanf_float+0x60>
 8012396:	2507      	movs	r5, #7
 8012398:	e7b2      	b.n	8012300 <_scanf_float+0x188>
 801239a:	6822      	ldr	r2, [r4, #0]
 801239c:	0591      	lsls	r1, r2, #22
 801239e:	f57f af1b 	bpl.w	80121d8 <_scanf_float+0x60>
 80123a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80123a6:	6022      	str	r2, [r4, #0]
 80123a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80123ac:	e7a8      	b.n	8012300 <_scanf_float+0x188>
 80123ae:	6822      	ldr	r2, [r4, #0]
 80123b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80123b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80123b8:	d006      	beq.n	80123c8 <_scanf_float+0x250>
 80123ba:	0550      	lsls	r0, r2, #21
 80123bc:	f57f af0c 	bpl.w	80121d8 <_scanf_float+0x60>
 80123c0:	f1b9 0f00 	cmp.w	r9, #0
 80123c4:	f43f af0f 	beq.w	80121e6 <_scanf_float+0x6e>
 80123c8:	0591      	lsls	r1, r2, #22
 80123ca:	bf58      	it	pl
 80123cc:	9901      	ldrpl	r1, [sp, #4]
 80123ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80123d2:	bf58      	it	pl
 80123d4:	eba9 0101 	subpl.w	r1, r9, r1
 80123d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80123dc:	bf58      	it	pl
 80123de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80123e2:	6022      	str	r2, [r4, #0]
 80123e4:	f04f 0900 	mov.w	r9, #0
 80123e8:	e78a      	b.n	8012300 <_scanf_float+0x188>
 80123ea:	f04f 0a03 	mov.w	sl, #3
 80123ee:	e787      	b.n	8012300 <_scanf_float+0x188>
 80123f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80123f4:	4639      	mov	r1, r7
 80123f6:	4640      	mov	r0, r8
 80123f8:	4798      	blx	r3
 80123fa:	2800      	cmp	r0, #0
 80123fc:	f43f aedf 	beq.w	80121be <_scanf_float+0x46>
 8012400:	e6ea      	b.n	80121d8 <_scanf_float+0x60>
 8012402:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012406:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801240a:	463a      	mov	r2, r7
 801240c:	4640      	mov	r0, r8
 801240e:	4798      	blx	r3
 8012410:	6923      	ldr	r3, [r4, #16]
 8012412:	3b01      	subs	r3, #1
 8012414:	6123      	str	r3, [r4, #16]
 8012416:	e6ec      	b.n	80121f2 <_scanf_float+0x7a>
 8012418:	1e6b      	subs	r3, r5, #1
 801241a:	2b06      	cmp	r3, #6
 801241c:	d825      	bhi.n	801246a <_scanf_float+0x2f2>
 801241e:	2d02      	cmp	r5, #2
 8012420:	d836      	bhi.n	8012490 <_scanf_float+0x318>
 8012422:	455e      	cmp	r6, fp
 8012424:	f67f aee8 	bls.w	80121f8 <_scanf_float+0x80>
 8012428:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801242c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012430:	463a      	mov	r2, r7
 8012432:	4640      	mov	r0, r8
 8012434:	4798      	blx	r3
 8012436:	6923      	ldr	r3, [r4, #16]
 8012438:	3b01      	subs	r3, #1
 801243a:	6123      	str	r3, [r4, #16]
 801243c:	e7f1      	b.n	8012422 <_scanf_float+0x2aa>
 801243e:	9802      	ldr	r0, [sp, #8]
 8012440:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012444:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012448:	9002      	str	r0, [sp, #8]
 801244a:	463a      	mov	r2, r7
 801244c:	4640      	mov	r0, r8
 801244e:	4798      	blx	r3
 8012450:	6923      	ldr	r3, [r4, #16]
 8012452:	3b01      	subs	r3, #1
 8012454:	6123      	str	r3, [r4, #16]
 8012456:	f10a 3aff 	add.w	sl, sl, #4294967295
 801245a:	fa5f fa8a 	uxtb.w	sl, sl
 801245e:	f1ba 0f02 	cmp.w	sl, #2
 8012462:	d1ec      	bne.n	801243e <_scanf_float+0x2c6>
 8012464:	3d03      	subs	r5, #3
 8012466:	b2ed      	uxtb	r5, r5
 8012468:	1b76      	subs	r6, r6, r5
 801246a:	6823      	ldr	r3, [r4, #0]
 801246c:	05da      	lsls	r2, r3, #23
 801246e:	d52f      	bpl.n	80124d0 <_scanf_float+0x358>
 8012470:	055b      	lsls	r3, r3, #21
 8012472:	d510      	bpl.n	8012496 <_scanf_float+0x31e>
 8012474:	455e      	cmp	r6, fp
 8012476:	f67f aebf 	bls.w	80121f8 <_scanf_float+0x80>
 801247a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801247e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012482:	463a      	mov	r2, r7
 8012484:	4640      	mov	r0, r8
 8012486:	4798      	blx	r3
 8012488:	6923      	ldr	r3, [r4, #16]
 801248a:	3b01      	subs	r3, #1
 801248c:	6123      	str	r3, [r4, #16]
 801248e:	e7f1      	b.n	8012474 <_scanf_float+0x2fc>
 8012490:	46aa      	mov	sl, r5
 8012492:	9602      	str	r6, [sp, #8]
 8012494:	e7df      	b.n	8012456 <_scanf_float+0x2de>
 8012496:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801249a:	6923      	ldr	r3, [r4, #16]
 801249c:	2965      	cmp	r1, #101	; 0x65
 801249e:	f103 33ff 	add.w	r3, r3, #4294967295
 80124a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80124a6:	6123      	str	r3, [r4, #16]
 80124a8:	d00c      	beq.n	80124c4 <_scanf_float+0x34c>
 80124aa:	2945      	cmp	r1, #69	; 0x45
 80124ac:	d00a      	beq.n	80124c4 <_scanf_float+0x34c>
 80124ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80124b2:	463a      	mov	r2, r7
 80124b4:	4640      	mov	r0, r8
 80124b6:	4798      	blx	r3
 80124b8:	6923      	ldr	r3, [r4, #16]
 80124ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80124be:	3b01      	subs	r3, #1
 80124c0:	1eb5      	subs	r5, r6, #2
 80124c2:	6123      	str	r3, [r4, #16]
 80124c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80124c8:	463a      	mov	r2, r7
 80124ca:	4640      	mov	r0, r8
 80124cc:	4798      	blx	r3
 80124ce:	462e      	mov	r6, r5
 80124d0:	6825      	ldr	r5, [r4, #0]
 80124d2:	f015 0510 	ands.w	r5, r5, #16
 80124d6:	d158      	bne.n	801258a <_scanf_float+0x412>
 80124d8:	7035      	strb	r5, [r6, #0]
 80124da:	6823      	ldr	r3, [r4, #0]
 80124dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80124e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80124e4:	d11c      	bne.n	8012520 <_scanf_float+0x3a8>
 80124e6:	9b01      	ldr	r3, [sp, #4]
 80124e8:	454b      	cmp	r3, r9
 80124ea:	eba3 0209 	sub.w	r2, r3, r9
 80124ee:	d124      	bne.n	801253a <_scanf_float+0x3c2>
 80124f0:	2200      	movs	r2, #0
 80124f2:	4659      	mov	r1, fp
 80124f4:	4640      	mov	r0, r8
 80124f6:	f000 fe9d 	bl	8013234 <_strtod_r>
 80124fa:	9b03      	ldr	r3, [sp, #12]
 80124fc:	6821      	ldr	r1, [r4, #0]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	f011 0f02 	tst.w	r1, #2
 8012504:	ec57 6b10 	vmov	r6, r7, d0
 8012508:	f103 0204 	add.w	r2, r3, #4
 801250c:	d020      	beq.n	8012550 <_scanf_float+0x3d8>
 801250e:	9903      	ldr	r1, [sp, #12]
 8012510:	600a      	str	r2, [r1, #0]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	e9c3 6700 	strd	r6, r7, [r3]
 8012518:	68e3      	ldr	r3, [r4, #12]
 801251a:	3301      	adds	r3, #1
 801251c:	60e3      	str	r3, [r4, #12]
 801251e:	e66c      	b.n	80121fa <_scanf_float+0x82>
 8012520:	9b04      	ldr	r3, [sp, #16]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d0e4      	beq.n	80124f0 <_scanf_float+0x378>
 8012526:	9905      	ldr	r1, [sp, #20]
 8012528:	230a      	movs	r3, #10
 801252a:	462a      	mov	r2, r5
 801252c:	3101      	adds	r1, #1
 801252e:	4640      	mov	r0, r8
 8012530:	f000 ff72 	bl	8013418 <_strtol_r>
 8012534:	9b04      	ldr	r3, [sp, #16]
 8012536:	9e05      	ldr	r6, [sp, #20]
 8012538:	1ac2      	subs	r2, r0, r3
 801253a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801253e:	429e      	cmp	r6, r3
 8012540:	bf28      	it	cs
 8012542:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012546:	4912      	ldr	r1, [pc, #72]	; (8012590 <_scanf_float+0x418>)
 8012548:	4630      	mov	r0, r6
 801254a:	f000 f82b 	bl	80125a4 <siprintf>
 801254e:	e7cf      	b.n	80124f0 <_scanf_float+0x378>
 8012550:	f011 0f04 	tst.w	r1, #4
 8012554:	9903      	ldr	r1, [sp, #12]
 8012556:	600a      	str	r2, [r1, #0]
 8012558:	d1db      	bne.n	8012512 <_scanf_float+0x39a>
 801255a:	f8d3 8000 	ldr.w	r8, [r3]
 801255e:	ee10 2a10 	vmov	r2, s0
 8012562:	ee10 0a10 	vmov	r0, s0
 8012566:	463b      	mov	r3, r7
 8012568:	4639      	mov	r1, r7
 801256a:	f7ee faf7 	bl	8000b5c <__aeabi_dcmpun>
 801256e:	b128      	cbz	r0, 801257c <_scanf_float+0x404>
 8012570:	4808      	ldr	r0, [pc, #32]	; (8012594 <_scanf_float+0x41c>)
 8012572:	f000 f811 	bl	8012598 <nanf>
 8012576:	ed88 0a00 	vstr	s0, [r8]
 801257a:	e7cd      	b.n	8012518 <_scanf_float+0x3a0>
 801257c:	4630      	mov	r0, r6
 801257e:	4639      	mov	r1, r7
 8012580:	f7ee fb4a 	bl	8000c18 <__aeabi_d2f>
 8012584:	f8c8 0000 	str.w	r0, [r8]
 8012588:	e7c6      	b.n	8012518 <_scanf_float+0x3a0>
 801258a:	2500      	movs	r5, #0
 801258c:	e635      	b.n	80121fa <_scanf_float+0x82>
 801258e:	bf00      	nop
 8012590:	08029e30 	.word	0x08029e30
 8012594:	08029f3b 	.word	0x08029f3b

08012598 <nanf>:
 8012598:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80125a0 <nanf+0x8>
 801259c:	4770      	bx	lr
 801259e:	bf00      	nop
 80125a0:	7fc00000 	.word	0x7fc00000

080125a4 <siprintf>:
 80125a4:	b40e      	push	{r1, r2, r3}
 80125a6:	b500      	push	{lr}
 80125a8:	b09c      	sub	sp, #112	; 0x70
 80125aa:	ab1d      	add	r3, sp, #116	; 0x74
 80125ac:	9002      	str	r0, [sp, #8]
 80125ae:	9006      	str	r0, [sp, #24]
 80125b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80125b4:	4809      	ldr	r0, [pc, #36]	; (80125dc <siprintf+0x38>)
 80125b6:	9107      	str	r1, [sp, #28]
 80125b8:	9104      	str	r1, [sp, #16]
 80125ba:	4909      	ldr	r1, [pc, #36]	; (80125e0 <siprintf+0x3c>)
 80125bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80125c0:	9105      	str	r1, [sp, #20]
 80125c2:	6800      	ldr	r0, [r0, #0]
 80125c4:	9301      	str	r3, [sp, #4]
 80125c6:	a902      	add	r1, sp, #8
 80125c8:	f002 ff48 	bl	801545c <_svfiprintf_r>
 80125cc:	9b02      	ldr	r3, [sp, #8]
 80125ce:	2200      	movs	r2, #0
 80125d0:	701a      	strb	r2, [r3, #0]
 80125d2:	b01c      	add	sp, #112	; 0x70
 80125d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80125d8:	b003      	add	sp, #12
 80125da:	4770      	bx	lr
 80125dc:	20000044 	.word	0x20000044
 80125e0:	ffff0208 	.word	0xffff0208

080125e4 <sulp>:
 80125e4:	b570      	push	{r4, r5, r6, lr}
 80125e6:	4604      	mov	r4, r0
 80125e8:	460d      	mov	r5, r1
 80125ea:	ec45 4b10 	vmov	d0, r4, r5
 80125ee:	4616      	mov	r6, r2
 80125f0:	f002 fcd0 	bl	8014f94 <__ulp>
 80125f4:	ec51 0b10 	vmov	r0, r1, d0
 80125f8:	b17e      	cbz	r6, 801261a <sulp+0x36>
 80125fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80125fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012602:	2b00      	cmp	r3, #0
 8012604:	dd09      	ble.n	801261a <sulp+0x36>
 8012606:	051b      	lsls	r3, r3, #20
 8012608:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801260c:	2400      	movs	r4, #0
 801260e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012612:	4622      	mov	r2, r4
 8012614:	462b      	mov	r3, r5
 8012616:	f7ee f807 	bl	8000628 <__aeabi_dmul>
 801261a:	bd70      	pop	{r4, r5, r6, pc}
 801261c:	0000      	movs	r0, r0
	...

08012620 <_strtod_l>:
 8012620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012624:	b0a3      	sub	sp, #140	; 0x8c
 8012626:	461f      	mov	r7, r3
 8012628:	2300      	movs	r3, #0
 801262a:	931e      	str	r3, [sp, #120]	; 0x78
 801262c:	4ba4      	ldr	r3, [pc, #656]	; (80128c0 <_strtod_l+0x2a0>)
 801262e:	9219      	str	r2, [sp, #100]	; 0x64
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	9307      	str	r3, [sp, #28]
 8012634:	4604      	mov	r4, r0
 8012636:	4618      	mov	r0, r3
 8012638:	4688      	mov	r8, r1
 801263a:	f7ed fddb 	bl	80001f4 <strlen>
 801263e:	f04f 0a00 	mov.w	sl, #0
 8012642:	4605      	mov	r5, r0
 8012644:	f04f 0b00 	mov.w	fp, #0
 8012648:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801264c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801264e:	781a      	ldrb	r2, [r3, #0]
 8012650:	2a2b      	cmp	r2, #43	; 0x2b
 8012652:	d04c      	beq.n	80126ee <_strtod_l+0xce>
 8012654:	d839      	bhi.n	80126ca <_strtod_l+0xaa>
 8012656:	2a0d      	cmp	r2, #13
 8012658:	d832      	bhi.n	80126c0 <_strtod_l+0xa0>
 801265a:	2a08      	cmp	r2, #8
 801265c:	d832      	bhi.n	80126c4 <_strtod_l+0xa4>
 801265e:	2a00      	cmp	r2, #0
 8012660:	d03c      	beq.n	80126dc <_strtod_l+0xbc>
 8012662:	2300      	movs	r3, #0
 8012664:	930e      	str	r3, [sp, #56]	; 0x38
 8012666:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012668:	7833      	ldrb	r3, [r6, #0]
 801266a:	2b30      	cmp	r3, #48	; 0x30
 801266c:	f040 80b4 	bne.w	80127d8 <_strtod_l+0x1b8>
 8012670:	7873      	ldrb	r3, [r6, #1]
 8012672:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012676:	2b58      	cmp	r3, #88	; 0x58
 8012678:	d16c      	bne.n	8012754 <_strtod_l+0x134>
 801267a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801267c:	9301      	str	r3, [sp, #4]
 801267e:	ab1e      	add	r3, sp, #120	; 0x78
 8012680:	9702      	str	r7, [sp, #8]
 8012682:	9300      	str	r3, [sp, #0]
 8012684:	4a8f      	ldr	r2, [pc, #572]	; (80128c4 <_strtod_l+0x2a4>)
 8012686:	ab1f      	add	r3, sp, #124	; 0x7c
 8012688:	a91d      	add	r1, sp, #116	; 0x74
 801268a:	4620      	mov	r0, r4
 801268c:	f001 fde2 	bl	8014254 <__gethex>
 8012690:	f010 0707 	ands.w	r7, r0, #7
 8012694:	4605      	mov	r5, r0
 8012696:	d005      	beq.n	80126a4 <_strtod_l+0x84>
 8012698:	2f06      	cmp	r7, #6
 801269a:	d12a      	bne.n	80126f2 <_strtod_l+0xd2>
 801269c:	3601      	adds	r6, #1
 801269e:	2300      	movs	r3, #0
 80126a0:	961d      	str	r6, [sp, #116]	; 0x74
 80126a2:	930e      	str	r3, [sp, #56]	; 0x38
 80126a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	f040 8596 	bne.w	80131d8 <_strtod_l+0xbb8>
 80126ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80126ae:	b1db      	cbz	r3, 80126e8 <_strtod_l+0xc8>
 80126b0:	4652      	mov	r2, sl
 80126b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80126b6:	ec43 2b10 	vmov	d0, r2, r3
 80126ba:	b023      	add	sp, #140	; 0x8c
 80126bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126c0:	2a20      	cmp	r2, #32
 80126c2:	d1ce      	bne.n	8012662 <_strtod_l+0x42>
 80126c4:	3301      	adds	r3, #1
 80126c6:	931d      	str	r3, [sp, #116]	; 0x74
 80126c8:	e7c0      	b.n	801264c <_strtod_l+0x2c>
 80126ca:	2a2d      	cmp	r2, #45	; 0x2d
 80126cc:	d1c9      	bne.n	8012662 <_strtod_l+0x42>
 80126ce:	2201      	movs	r2, #1
 80126d0:	920e      	str	r2, [sp, #56]	; 0x38
 80126d2:	1c5a      	adds	r2, r3, #1
 80126d4:	921d      	str	r2, [sp, #116]	; 0x74
 80126d6:	785b      	ldrb	r3, [r3, #1]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d1c4      	bne.n	8012666 <_strtod_l+0x46>
 80126dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80126de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f040 8576 	bne.w	80131d4 <_strtod_l+0xbb4>
 80126e8:	4652      	mov	r2, sl
 80126ea:	465b      	mov	r3, fp
 80126ec:	e7e3      	b.n	80126b6 <_strtod_l+0x96>
 80126ee:	2200      	movs	r2, #0
 80126f0:	e7ee      	b.n	80126d0 <_strtod_l+0xb0>
 80126f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80126f4:	b13a      	cbz	r2, 8012706 <_strtod_l+0xe6>
 80126f6:	2135      	movs	r1, #53	; 0x35
 80126f8:	a820      	add	r0, sp, #128	; 0x80
 80126fa:	f002 fd56 	bl	80151aa <__copybits>
 80126fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012700:	4620      	mov	r0, r4
 8012702:	f002 f91b 	bl	801493c <_Bfree>
 8012706:	3f01      	subs	r7, #1
 8012708:	2f05      	cmp	r7, #5
 801270a:	d807      	bhi.n	801271c <_strtod_l+0xfc>
 801270c:	e8df f007 	tbb	[pc, r7]
 8012710:	1d180b0e 	.word	0x1d180b0e
 8012714:	030e      	.short	0x030e
 8012716:	f04f 0b00 	mov.w	fp, #0
 801271a:	46da      	mov	sl, fp
 801271c:	0728      	lsls	r0, r5, #28
 801271e:	d5c1      	bpl.n	80126a4 <_strtod_l+0x84>
 8012720:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012724:	e7be      	b.n	80126a4 <_strtod_l+0x84>
 8012726:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801272a:	e7f7      	b.n	801271c <_strtod_l+0xfc>
 801272c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8012730:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012732:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012736:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801273a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801273e:	e7ed      	b.n	801271c <_strtod_l+0xfc>
 8012740:	f8df b184 	ldr.w	fp, [pc, #388]	; 80128c8 <_strtod_l+0x2a8>
 8012744:	f04f 0a00 	mov.w	sl, #0
 8012748:	e7e8      	b.n	801271c <_strtod_l+0xfc>
 801274a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801274e:	f04f 3aff 	mov.w	sl, #4294967295
 8012752:	e7e3      	b.n	801271c <_strtod_l+0xfc>
 8012754:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012756:	1c5a      	adds	r2, r3, #1
 8012758:	921d      	str	r2, [sp, #116]	; 0x74
 801275a:	785b      	ldrb	r3, [r3, #1]
 801275c:	2b30      	cmp	r3, #48	; 0x30
 801275e:	d0f9      	beq.n	8012754 <_strtod_l+0x134>
 8012760:	2b00      	cmp	r3, #0
 8012762:	d09f      	beq.n	80126a4 <_strtod_l+0x84>
 8012764:	2301      	movs	r3, #1
 8012766:	f04f 0900 	mov.w	r9, #0
 801276a:	9304      	str	r3, [sp, #16]
 801276c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801276e:	930a      	str	r3, [sp, #40]	; 0x28
 8012770:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012774:	464f      	mov	r7, r9
 8012776:	220a      	movs	r2, #10
 8012778:	981d      	ldr	r0, [sp, #116]	; 0x74
 801277a:	7806      	ldrb	r6, [r0, #0]
 801277c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012780:	b2d9      	uxtb	r1, r3
 8012782:	2909      	cmp	r1, #9
 8012784:	d92a      	bls.n	80127dc <_strtod_l+0x1bc>
 8012786:	9907      	ldr	r1, [sp, #28]
 8012788:	462a      	mov	r2, r5
 801278a:	f003 f8d9 	bl	8015940 <strncmp>
 801278e:	b398      	cbz	r0, 80127f8 <_strtod_l+0x1d8>
 8012790:	2000      	movs	r0, #0
 8012792:	4633      	mov	r3, r6
 8012794:	463d      	mov	r5, r7
 8012796:	9007      	str	r0, [sp, #28]
 8012798:	4602      	mov	r2, r0
 801279a:	2b65      	cmp	r3, #101	; 0x65
 801279c:	d001      	beq.n	80127a2 <_strtod_l+0x182>
 801279e:	2b45      	cmp	r3, #69	; 0x45
 80127a0:	d118      	bne.n	80127d4 <_strtod_l+0x1b4>
 80127a2:	b91d      	cbnz	r5, 80127ac <_strtod_l+0x18c>
 80127a4:	9b04      	ldr	r3, [sp, #16]
 80127a6:	4303      	orrs	r3, r0
 80127a8:	d098      	beq.n	80126dc <_strtod_l+0xbc>
 80127aa:	2500      	movs	r5, #0
 80127ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80127b0:	f108 0301 	add.w	r3, r8, #1
 80127b4:	931d      	str	r3, [sp, #116]	; 0x74
 80127b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80127ba:	2b2b      	cmp	r3, #43	; 0x2b
 80127bc:	d075      	beq.n	80128aa <_strtod_l+0x28a>
 80127be:	2b2d      	cmp	r3, #45	; 0x2d
 80127c0:	d07b      	beq.n	80128ba <_strtod_l+0x29a>
 80127c2:	f04f 0c00 	mov.w	ip, #0
 80127c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80127ca:	2909      	cmp	r1, #9
 80127cc:	f240 8082 	bls.w	80128d4 <_strtod_l+0x2b4>
 80127d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80127d4:	2600      	movs	r6, #0
 80127d6:	e09d      	b.n	8012914 <_strtod_l+0x2f4>
 80127d8:	2300      	movs	r3, #0
 80127da:	e7c4      	b.n	8012766 <_strtod_l+0x146>
 80127dc:	2f08      	cmp	r7, #8
 80127de:	bfd8      	it	le
 80127e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80127e2:	f100 0001 	add.w	r0, r0, #1
 80127e6:	bfda      	itte	le
 80127e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80127ec:	9309      	strle	r3, [sp, #36]	; 0x24
 80127ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 80127f2:	3701      	adds	r7, #1
 80127f4:	901d      	str	r0, [sp, #116]	; 0x74
 80127f6:	e7bf      	b.n	8012778 <_strtod_l+0x158>
 80127f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80127fa:	195a      	adds	r2, r3, r5
 80127fc:	921d      	str	r2, [sp, #116]	; 0x74
 80127fe:	5d5b      	ldrb	r3, [r3, r5]
 8012800:	2f00      	cmp	r7, #0
 8012802:	d037      	beq.n	8012874 <_strtod_l+0x254>
 8012804:	9007      	str	r0, [sp, #28]
 8012806:	463d      	mov	r5, r7
 8012808:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801280c:	2a09      	cmp	r2, #9
 801280e:	d912      	bls.n	8012836 <_strtod_l+0x216>
 8012810:	2201      	movs	r2, #1
 8012812:	e7c2      	b.n	801279a <_strtod_l+0x17a>
 8012814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012816:	1c5a      	adds	r2, r3, #1
 8012818:	921d      	str	r2, [sp, #116]	; 0x74
 801281a:	785b      	ldrb	r3, [r3, #1]
 801281c:	3001      	adds	r0, #1
 801281e:	2b30      	cmp	r3, #48	; 0x30
 8012820:	d0f8      	beq.n	8012814 <_strtod_l+0x1f4>
 8012822:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012826:	2a08      	cmp	r2, #8
 8012828:	f200 84db 	bhi.w	80131e2 <_strtod_l+0xbc2>
 801282c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801282e:	9007      	str	r0, [sp, #28]
 8012830:	2000      	movs	r0, #0
 8012832:	920a      	str	r2, [sp, #40]	; 0x28
 8012834:	4605      	mov	r5, r0
 8012836:	3b30      	subs	r3, #48	; 0x30
 8012838:	f100 0201 	add.w	r2, r0, #1
 801283c:	d014      	beq.n	8012868 <_strtod_l+0x248>
 801283e:	9907      	ldr	r1, [sp, #28]
 8012840:	4411      	add	r1, r2
 8012842:	9107      	str	r1, [sp, #28]
 8012844:	462a      	mov	r2, r5
 8012846:	eb00 0e05 	add.w	lr, r0, r5
 801284a:	210a      	movs	r1, #10
 801284c:	4572      	cmp	r2, lr
 801284e:	d113      	bne.n	8012878 <_strtod_l+0x258>
 8012850:	182a      	adds	r2, r5, r0
 8012852:	2a08      	cmp	r2, #8
 8012854:	f105 0501 	add.w	r5, r5, #1
 8012858:	4405      	add	r5, r0
 801285a:	dc1c      	bgt.n	8012896 <_strtod_l+0x276>
 801285c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801285e:	220a      	movs	r2, #10
 8012860:	fb02 3301 	mla	r3, r2, r1, r3
 8012864:	9309      	str	r3, [sp, #36]	; 0x24
 8012866:	2200      	movs	r2, #0
 8012868:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801286a:	1c59      	adds	r1, r3, #1
 801286c:	911d      	str	r1, [sp, #116]	; 0x74
 801286e:	785b      	ldrb	r3, [r3, #1]
 8012870:	4610      	mov	r0, r2
 8012872:	e7c9      	b.n	8012808 <_strtod_l+0x1e8>
 8012874:	4638      	mov	r0, r7
 8012876:	e7d2      	b.n	801281e <_strtod_l+0x1fe>
 8012878:	2a08      	cmp	r2, #8
 801287a:	dc04      	bgt.n	8012886 <_strtod_l+0x266>
 801287c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801287e:	434e      	muls	r6, r1
 8012880:	9609      	str	r6, [sp, #36]	; 0x24
 8012882:	3201      	adds	r2, #1
 8012884:	e7e2      	b.n	801284c <_strtod_l+0x22c>
 8012886:	f102 0c01 	add.w	ip, r2, #1
 801288a:	f1bc 0f10 	cmp.w	ip, #16
 801288e:	bfd8      	it	le
 8012890:	fb01 f909 	mulle.w	r9, r1, r9
 8012894:	e7f5      	b.n	8012882 <_strtod_l+0x262>
 8012896:	2d10      	cmp	r5, #16
 8012898:	bfdc      	itt	le
 801289a:	220a      	movle	r2, #10
 801289c:	fb02 3909 	mlale	r9, r2, r9, r3
 80128a0:	e7e1      	b.n	8012866 <_strtod_l+0x246>
 80128a2:	2300      	movs	r3, #0
 80128a4:	9307      	str	r3, [sp, #28]
 80128a6:	2201      	movs	r2, #1
 80128a8:	e77c      	b.n	80127a4 <_strtod_l+0x184>
 80128aa:	f04f 0c00 	mov.w	ip, #0
 80128ae:	f108 0302 	add.w	r3, r8, #2
 80128b2:	931d      	str	r3, [sp, #116]	; 0x74
 80128b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80128b8:	e785      	b.n	80127c6 <_strtod_l+0x1a6>
 80128ba:	f04f 0c01 	mov.w	ip, #1
 80128be:	e7f6      	b.n	80128ae <_strtod_l+0x28e>
 80128c0:	0802a124 	.word	0x0802a124
 80128c4:	08029e38 	.word	0x08029e38
 80128c8:	7ff00000 	.word	0x7ff00000
 80128cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128ce:	1c59      	adds	r1, r3, #1
 80128d0:	911d      	str	r1, [sp, #116]	; 0x74
 80128d2:	785b      	ldrb	r3, [r3, #1]
 80128d4:	2b30      	cmp	r3, #48	; 0x30
 80128d6:	d0f9      	beq.n	80128cc <_strtod_l+0x2ac>
 80128d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80128dc:	2908      	cmp	r1, #8
 80128de:	f63f af79 	bhi.w	80127d4 <_strtod_l+0x1b4>
 80128e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80128e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128e8:	9308      	str	r3, [sp, #32]
 80128ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128ec:	1c59      	adds	r1, r3, #1
 80128ee:	911d      	str	r1, [sp, #116]	; 0x74
 80128f0:	785b      	ldrb	r3, [r3, #1]
 80128f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80128f6:	2e09      	cmp	r6, #9
 80128f8:	d937      	bls.n	801296a <_strtod_l+0x34a>
 80128fa:	9e08      	ldr	r6, [sp, #32]
 80128fc:	1b89      	subs	r1, r1, r6
 80128fe:	2908      	cmp	r1, #8
 8012900:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8012904:	dc02      	bgt.n	801290c <_strtod_l+0x2ec>
 8012906:	4576      	cmp	r6, lr
 8012908:	bfa8      	it	ge
 801290a:	4676      	movge	r6, lr
 801290c:	f1bc 0f00 	cmp.w	ip, #0
 8012910:	d000      	beq.n	8012914 <_strtod_l+0x2f4>
 8012912:	4276      	negs	r6, r6
 8012914:	2d00      	cmp	r5, #0
 8012916:	d14f      	bne.n	80129b8 <_strtod_l+0x398>
 8012918:	9904      	ldr	r1, [sp, #16]
 801291a:	4301      	orrs	r1, r0
 801291c:	f47f aec2 	bne.w	80126a4 <_strtod_l+0x84>
 8012920:	2a00      	cmp	r2, #0
 8012922:	f47f aedb 	bne.w	80126dc <_strtod_l+0xbc>
 8012926:	2b69      	cmp	r3, #105	; 0x69
 8012928:	d027      	beq.n	801297a <_strtod_l+0x35a>
 801292a:	dc24      	bgt.n	8012976 <_strtod_l+0x356>
 801292c:	2b49      	cmp	r3, #73	; 0x49
 801292e:	d024      	beq.n	801297a <_strtod_l+0x35a>
 8012930:	2b4e      	cmp	r3, #78	; 0x4e
 8012932:	f47f aed3 	bne.w	80126dc <_strtod_l+0xbc>
 8012936:	499e      	ldr	r1, [pc, #632]	; (8012bb0 <_strtod_l+0x590>)
 8012938:	a81d      	add	r0, sp, #116	; 0x74
 801293a:	f001 fee3 	bl	8014704 <__match>
 801293e:	2800      	cmp	r0, #0
 8012940:	f43f aecc 	beq.w	80126dc <_strtod_l+0xbc>
 8012944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012946:	781b      	ldrb	r3, [r3, #0]
 8012948:	2b28      	cmp	r3, #40	; 0x28
 801294a:	d12d      	bne.n	80129a8 <_strtod_l+0x388>
 801294c:	4999      	ldr	r1, [pc, #612]	; (8012bb4 <_strtod_l+0x594>)
 801294e:	aa20      	add	r2, sp, #128	; 0x80
 8012950:	a81d      	add	r0, sp, #116	; 0x74
 8012952:	f001 feeb 	bl	801472c <__hexnan>
 8012956:	2805      	cmp	r0, #5
 8012958:	d126      	bne.n	80129a8 <_strtod_l+0x388>
 801295a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801295c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8012960:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012964:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012968:	e69c      	b.n	80126a4 <_strtod_l+0x84>
 801296a:	210a      	movs	r1, #10
 801296c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012970:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012974:	e7b9      	b.n	80128ea <_strtod_l+0x2ca>
 8012976:	2b6e      	cmp	r3, #110	; 0x6e
 8012978:	e7db      	b.n	8012932 <_strtod_l+0x312>
 801297a:	498f      	ldr	r1, [pc, #572]	; (8012bb8 <_strtod_l+0x598>)
 801297c:	a81d      	add	r0, sp, #116	; 0x74
 801297e:	f001 fec1 	bl	8014704 <__match>
 8012982:	2800      	cmp	r0, #0
 8012984:	f43f aeaa 	beq.w	80126dc <_strtod_l+0xbc>
 8012988:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801298a:	498c      	ldr	r1, [pc, #560]	; (8012bbc <_strtod_l+0x59c>)
 801298c:	3b01      	subs	r3, #1
 801298e:	a81d      	add	r0, sp, #116	; 0x74
 8012990:	931d      	str	r3, [sp, #116]	; 0x74
 8012992:	f001 feb7 	bl	8014704 <__match>
 8012996:	b910      	cbnz	r0, 801299e <_strtod_l+0x37e>
 8012998:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801299a:	3301      	adds	r3, #1
 801299c:	931d      	str	r3, [sp, #116]	; 0x74
 801299e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8012bcc <_strtod_l+0x5ac>
 80129a2:	f04f 0a00 	mov.w	sl, #0
 80129a6:	e67d      	b.n	80126a4 <_strtod_l+0x84>
 80129a8:	4885      	ldr	r0, [pc, #532]	; (8012bc0 <_strtod_l+0x5a0>)
 80129aa:	f002 ffb1 	bl	8015910 <nan>
 80129ae:	ed8d 0b04 	vstr	d0, [sp, #16]
 80129b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80129b6:	e675      	b.n	80126a4 <_strtod_l+0x84>
 80129b8:	9b07      	ldr	r3, [sp, #28]
 80129ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129bc:	1af3      	subs	r3, r6, r3
 80129be:	2f00      	cmp	r7, #0
 80129c0:	bf08      	it	eq
 80129c2:	462f      	moveq	r7, r5
 80129c4:	2d10      	cmp	r5, #16
 80129c6:	9308      	str	r3, [sp, #32]
 80129c8:	46a8      	mov	r8, r5
 80129ca:	bfa8      	it	ge
 80129cc:	f04f 0810 	movge.w	r8, #16
 80129d0:	f7ed fdb0 	bl	8000534 <__aeabi_ui2d>
 80129d4:	2d09      	cmp	r5, #9
 80129d6:	4682      	mov	sl, r0
 80129d8:	468b      	mov	fp, r1
 80129da:	dd13      	ble.n	8012a04 <_strtod_l+0x3e4>
 80129dc:	4b79      	ldr	r3, [pc, #484]	; (8012bc4 <_strtod_l+0x5a4>)
 80129de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80129e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80129e6:	f7ed fe1f 	bl	8000628 <__aeabi_dmul>
 80129ea:	4682      	mov	sl, r0
 80129ec:	4648      	mov	r0, r9
 80129ee:	468b      	mov	fp, r1
 80129f0:	f7ed fda0 	bl	8000534 <__aeabi_ui2d>
 80129f4:	4602      	mov	r2, r0
 80129f6:	460b      	mov	r3, r1
 80129f8:	4650      	mov	r0, sl
 80129fa:	4659      	mov	r1, fp
 80129fc:	f7ed fc5e 	bl	80002bc <__adddf3>
 8012a00:	4682      	mov	sl, r0
 8012a02:	468b      	mov	fp, r1
 8012a04:	2d0f      	cmp	r5, #15
 8012a06:	dc38      	bgt.n	8012a7a <_strtod_l+0x45a>
 8012a08:	9b08      	ldr	r3, [sp, #32]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	f43f ae4a 	beq.w	80126a4 <_strtod_l+0x84>
 8012a10:	dd24      	ble.n	8012a5c <_strtod_l+0x43c>
 8012a12:	2b16      	cmp	r3, #22
 8012a14:	dc0b      	bgt.n	8012a2e <_strtod_l+0x40e>
 8012a16:	4d6b      	ldr	r5, [pc, #428]	; (8012bc4 <_strtod_l+0x5a4>)
 8012a18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8012a1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012a20:	4652      	mov	r2, sl
 8012a22:	465b      	mov	r3, fp
 8012a24:	f7ed fe00 	bl	8000628 <__aeabi_dmul>
 8012a28:	4682      	mov	sl, r0
 8012a2a:	468b      	mov	fp, r1
 8012a2c:	e63a      	b.n	80126a4 <_strtod_l+0x84>
 8012a2e:	9a08      	ldr	r2, [sp, #32]
 8012a30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8012a34:	4293      	cmp	r3, r2
 8012a36:	db20      	blt.n	8012a7a <_strtod_l+0x45a>
 8012a38:	4c62      	ldr	r4, [pc, #392]	; (8012bc4 <_strtod_l+0x5a4>)
 8012a3a:	f1c5 050f 	rsb	r5, r5, #15
 8012a3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012a42:	4652      	mov	r2, sl
 8012a44:	465b      	mov	r3, fp
 8012a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a4a:	f7ed fded 	bl	8000628 <__aeabi_dmul>
 8012a4e:	9b08      	ldr	r3, [sp, #32]
 8012a50:	1b5d      	subs	r5, r3, r5
 8012a52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012a56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012a5a:	e7e3      	b.n	8012a24 <_strtod_l+0x404>
 8012a5c:	9b08      	ldr	r3, [sp, #32]
 8012a5e:	3316      	adds	r3, #22
 8012a60:	db0b      	blt.n	8012a7a <_strtod_l+0x45a>
 8012a62:	9b07      	ldr	r3, [sp, #28]
 8012a64:	4a57      	ldr	r2, [pc, #348]	; (8012bc4 <_strtod_l+0x5a4>)
 8012a66:	1b9e      	subs	r6, r3, r6
 8012a68:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8012a6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012a70:	4650      	mov	r0, sl
 8012a72:	4659      	mov	r1, fp
 8012a74:	f7ed ff02 	bl	800087c <__aeabi_ddiv>
 8012a78:	e7d6      	b.n	8012a28 <_strtod_l+0x408>
 8012a7a:	9b08      	ldr	r3, [sp, #32]
 8012a7c:	eba5 0808 	sub.w	r8, r5, r8
 8012a80:	4498      	add	r8, r3
 8012a82:	f1b8 0f00 	cmp.w	r8, #0
 8012a86:	dd71      	ble.n	8012b6c <_strtod_l+0x54c>
 8012a88:	f018 030f 	ands.w	r3, r8, #15
 8012a8c:	d00a      	beq.n	8012aa4 <_strtod_l+0x484>
 8012a8e:	494d      	ldr	r1, [pc, #308]	; (8012bc4 <_strtod_l+0x5a4>)
 8012a90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012a94:	4652      	mov	r2, sl
 8012a96:	465b      	mov	r3, fp
 8012a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a9c:	f7ed fdc4 	bl	8000628 <__aeabi_dmul>
 8012aa0:	4682      	mov	sl, r0
 8012aa2:	468b      	mov	fp, r1
 8012aa4:	f038 080f 	bics.w	r8, r8, #15
 8012aa8:	d04d      	beq.n	8012b46 <_strtod_l+0x526>
 8012aaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012aae:	dd22      	ble.n	8012af6 <_strtod_l+0x4d6>
 8012ab0:	2500      	movs	r5, #0
 8012ab2:	462e      	mov	r6, r5
 8012ab4:	9509      	str	r5, [sp, #36]	; 0x24
 8012ab6:	9507      	str	r5, [sp, #28]
 8012ab8:	2322      	movs	r3, #34	; 0x22
 8012aba:	f8df b110 	ldr.w	fp, [pc, #272]	; 8012bcc <_strtod_l+0x5ac>
 8012abe:	6023      	str	r3, [r4, #0]
 8012ac0:	f04f 0a00 	mov.w	sl, #0
 8012ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f43f adec 	beq.w	80126a4 <_strtod_l+0x84>
 8012acc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012ace:	4620      	mov	r0, r4
 8012ad0:	f001 ff34 	bl	801493c <_Bfree>
 8012ad4:	9907      	ldr	r1, [sp, #28]
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	f001 ff30 	bl	801493c <_Bfree>
 8012adc:	4631      	mov	r1, r6
 8012ade:	4620      	mov	r0, r4
 8012ae0:	f001 ff2c 	bl	801493c <_Bfree>
 8012ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	f001 ff28 	bl	801493c <_Bfree>
 8012aec:	4629      	mov	r1, r5
 8012aee:	4620      	mov	r0, r4
 8012af0:	f001 ff24 	bl	801493c <_Bfree>
 8012af4:	e5d6      	b.n	80126a4 <_strtod_l+0x84>
 8012af6:	2300      	movs	r3, #0
 8012af8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012afc:	4650      	mov	r0, sl
 8012afe:	4659      	mov	r1, fp
 8012b00:	4699      	mov	r9, r3
 8012b02:	f1b8 0f01 	cmp.w	r8, #1
 8012b06:	dc21      	bgt.n	8012b4c <_strtod_l+0x52c>
 8012b08:	b10b      	cbz	r3, 8012b0e <_strtod_l+0x4ee>
 8012b0a:	4682      	mov	sl, r0
 8012b0c:	468b      	mov	fp, r1
 8012b0e:	4b2e      	ldr	r3, [pc, #184]	; (8012bc8 <_strtod_l+0x5a8>)
 8012b10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012b14:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8012b18:	4652      	mov	r2, sl
 8012b1a:	465b      	mov	r3, fp
 8012b1c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8012b20:	f7ed fd82 	bl	8000628 <__aeabi_dmul>
 8012b24:	4b29      	ldr	r3, [pc, #164]	; (8012bcc <_strtod_l+0x5ac>)
 8012b26:	460a      	mov	r2, r1
 8012b28:	400b      	ands	r3, r1
 8012b2a:	4929      	ldr	r1, [pc, #164]	; (8012bd0 <_strtod_l+0x5b0>)
 8012b2c:	428b      	cmp	r3, r1
 8012b2e:	4682      	mov	sl, r0
 8012b30:	d8be      	bhi.n	8012ab0 <_strtod_l+0x490>
 8012b32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012b36:	428b      	cmp	r3, r1
 8012b38:	bf86      	itte	hi
 8012b3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012bd4 <_strtod_l+0x5b4>
 8012b3e:	f04f 3aff 	movhi.w	sl, #4294967295
 8012b42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012b46:	2300      	movs	r3, #0
 8012b48:	9304      	str	r3, [sp, #16]
 8012b4a:	e081      	b.n	8012c50 <_strtod_l+0x630>
 8012b4c:	f018 0f01 	tst.w	r8, #1
 8012b50:	d007      	beq.n	8012b62 <_strtod_l+0x542>
 8012b52:	4b1d      	ldr	r3, [pc, #116]	; (8012bc8 <_strtod_l+0x5a8>)
 8012b54:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5c:	f7ed fd64 	bl	8000628 <__aeabi_dmul>
 8012b60:	2301      	movs	r3, #1
 8012b62:	f109 0901 	add.w	r9, r9, #1
 8012b66:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012b6a:	e7ca      	b.n	8012b02 <_strtod_l+0x4e2>
 8012b6c:	d0eb      	beq.n	8012b46 <_strtod_l+0x526>
 8012b6e:	f1c8 0800 	rsb	r8, r8, #0
 8012b72:	f018 020f 	ands.w	r2, r8, #15
 8012b76:	d00a      	beq.n	8012b8e <_strtod_l+0x56e>
 8012b78:	4b12      	ldr	r3, [pc, #72]	; (8012bc4 <_strtod_l+0x5a4>)
 8012b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b7e:	4650      	mov	r0, sl
 8012b80:	4659      	mov	r1, fp
 8012b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b86:	f7ed fe79 	bl	800087c <__aeabi_ddiv>
 8012b8a:	4682      	mov	sl, r0
 8012b8c:	468b      	mov	fp, r1
 8012b8e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012b92:	d0d8      	beq.n	8012b46 <_strtod_l+0x526>
 8012b94:	f1b8 0f1f 	cmp.w	r8, #31
 8012b98:	dd1e      	ble.n	8012bd8 <_strtod_l+0x5b8>
 8012b9a:	2500      	movs	r5, #0
 8012b9c:	462e      	mov	r6, r5
 8012b9e:	9509      	str	r5, [sp, #36]	; 0x24
 8012ba0:	9507      	str	r5, [sp, #28]
 8012ba2:	2322      	movs	r3, #34	; 0x22
 8012ba4:	f04f 0a00 	mov.w	sl, #0
 8012ba8:	f04f 0b00 	mov.w	fp, #0
 8012bac:	6023      	str	r3, [r4, #0]
 8012bae:	e789      	b.n	8012ac4 <_strtod_l+0x4a4>
 8012bb0:	08029e09 	.word	0x08029e09
 8012bb4:	08029e4c 	.word	0x08029e4c
 8012bb8:	08029e01 	.word	0x08029e01
 8012bbc:	0802a040 	.word	0x0802a040
 8012bc0:	08029f3b 	.word	0x08029f3b
 8012bc4:	0802a1c0 	.word	0x0802a1c0
 8012bc8:	0802a198 	.word	0x0802a198
 8012bcc:	7ff00000 	.word	0x7ff00000
 8012bd0:	7ca00000 	.word	0x7ca00000
 8012bd4:	7fefffff 	.word	0x7fefffff
 8012bd8:	f018 0310 	ands.w	r3, r8, #16
 8012bdc:	bf18      	it	ne
 8012bde:	236a      	movne	r3, #106	; 0x6a
 8012be0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8012f98 <_strtod_l+0x978>
 8012be4:	9304      	str	r3, [sp, #16]
 8012be6:	4650      	mov	r0, sl
 8012be8:	4659      	mov	r1, fp
 8012bea:	2300      	movs	r3, #0
 8012bec:	f018 0f01 	tst.w	r8, #1
 8012bf0:	d004      	beq.n	8012bfc <_strtod_l+0x5dc>
 8012bf2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012bf6:	f7ed fd17 	bl	8000628 <__aeabi_dmul>
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012c00:	f109 0908 	add.w	r9, r9, #8
 8012c04:	d1f2      	bne.n	8012bec <_strtod_l+0x5cc>
 8012c06:	b10b      	cbz	r3, 8012c0c <_strtod_l+0x5ec>
 8012c08:	4682      	mov	sl, r0
 8012c0a:	468b      	mov	fp, r1
 8012c0c:	9b04      	ldr	r3, [sp, #16]
 8012c0e:	b1bb      	cbz	r3, 8012c40 <_strtod_l+0x620>
 8012c10:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012c14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	4659      	mov	r1, fp
 8012c1c:	dd10      	ble.n	8012c40 <_strtod_l+0x620>
 8012c1e:	2b1f      	cmp	r3, #31
 8012c20:	f340 8128 	ble.w	8012e74 <_strtod_l+0x854>
 8012c24:	2b34      	cmp	r3, #52	; 0x34
 8012c26:	bfde      	ittt	le
 8012c28:	3b20      	suble	r3, #32
 8012c2a:	f04f 32ff 	movle.w	r2, #4294967295
 8012c2e:	fa02 f303 	lslle.w	r3, r2, r3
 8012c32:	f04f 0a00 	mov.w	sl, #0
 8012c36:	bfcc      	ite	gt
 8012c38:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012c3c:	ea03 0b01 	andle.w	fp, r3, r1
 8012c40:	2200      	movs	r2, #0
 8012c42:	2300      	movs	r3, #0
 8012c44:	4650      	mov	r0, sl
 8012c46:	4659      	mov	r1, fp
 8012c48:	f7ed ff56 	bl	8000af8 <__aeabi_dcmpeq>
 8012c4c:	2800      	cmp	r0, #0
 8012c4e:	d1a4      	bne.n	8012b9a <_strtod_l+0x57a>
 8012c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c52:	9300      	str	r3, [sp, #0]
 8012c54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012c56:	462b      	mov	r3, r5
 8012c58:	463a      	mov	r2, r7
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f001 feda 	bl	8014a14 <__s2b>
 8012c60:	9009      	str	r0, [sp, #36]	; 0x24
 8012c62:	2800      	cmp	r0, #0
 8012c64:	f43f af24 	beq.w	8012ab0 <_strtod_l+0x490>
 8012c68:	9b07      	ldr	r3, [sp, #28]
 8012c6a:	1b9e      	subs	r6, r3, r6
 8012c6c:	9b08      	ldr	r3, [sp, #32]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	bfb4      	ite	lt
 8012c72:	4633      	movlt	r3, r6
 8012c74:	2300      	movge	r3, #0
 8012c76:	9310      	str	r3, [sp, #64]	; 0x40
 8012c78:	9b08      	ldr	r3, [sp, #32]
 8012c7a:	2500      	movs	r5, #0
 8012c7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012c80:	9318      	str	r3, [sp, #96]	; 0x60
 8012c82:	462e      	mov	r6, r5
 8012c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c86:	4620      	mov	r0, r4
 8012c88:	6859      	ldr	r1, [r3, #4]
 8012c8a:	f001 fe17 	bl	80148bc <_Balloc>
 8012c8e:	9007      	str	r0, [sp, #28]
 8012c90:	2800      	cmp	r0, #0
 8012c92:	f43f af11 	beq.w	8012ab8 <_strtod_l+0x498>
 8012c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c98:	691a      	ldr	r2, [r3, #16]
 8012c9a:	3202      	adds	r2, #2
 8012c9c:	f103 010c 	add.w	r1, r3, #12
 8012ca0:	0092      	lsls	r2, r2, #2
 8012ca2:	300c      	adds	r0, #12
 8012ca4:	f001 fdfc 	bl	80148a0 <memcpy>
 8012ca8:	ec4b ab10 	vmov	d0, sl, fp
 8012cac:	aa20      	add	r2, sp, #128	; 0x80
 8012cae:	a91f      	add	r1, sp, #124	; 0x7c
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8012cb6:	f002 f9e9 	bl	801508c <__d2b>
 8012cba:	901e      	str	r0, [sp, #120]	; 0x78
 8012cbc:	2800      	cmp	r0, #0
 8012cbe:	f43f aefb 	beq.w	8012ab8 <_strtod_l+0x498>
 8012cc2:	2101      	movs	r1, #1
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	f001 ff3f 	bl	8014b48 <__i2b>
 8012cca:	4606      	mov	r6, r0
 8012ccc:	2800      	cmp	r0, #0
 8012cce:	f43f aef3 	beq.w	8012ab8 <_strtod_l+0x498>
 8012cd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012cd4:	9904      	ldr	r1, [sp, #16]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	bfab      	itete	ge
 8012cda:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8012cdc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8012cde:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8012ce0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8012ce4:	bfac      	ite	ge
 8012ce6:	eb03 0902 	addge.w	r9, r3, r2
 8012cea:	1ad7      	sublt	r7, r2, r3
 8012cec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012cee:	eba3 0801 	sub.w	r8, r3, r1
 8012cf2:	4490      	add	r8, r2
 8012cf4:	4ba3      	ldr	r3, [pc, #652]	; (8012f84 <_strtod_l+0x964>)
 8012cf6:	f108 38ff 	add.w	r8, r8, #4294967295
 8012cfa:	4598      	cmp	r8, r3
 8012cfc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012d00:	f280 80cc 	bge.w	8012e9c <_strtod_l+0x87c>
 8012d04:	eba3 0308 	sub.w	r3, r3, r8
 8012d08:	2b1f      	cmp	r3, #31
 8012d0a:	eba2 0203 	sub.w	r2, r2, r3
 8012d0e:	f04f 0101 	mov.w	r1, #1
 8012d12:	f300 80b6 	bgt.w	8012e82 <_strtod_l+0x862>
 8012d16:	fa01 f303 	lsl.w	r3, r1, r3
 8012d1a:	9311      	str	r3, [sp, #68]	; 0x44
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8012d20:	eb09 0802 	add.w	r8, r9, r2
 8012d24:	9b04      	ldr	r3, [sp, #16]
 8012d26:	45c1      	cmp	r9, r8
 8012d28:	4417      	add	r7, r2
 8012d2a:	441f      	add	r7, r3
 8012d2c:	464b      	mov	r3, r9
 8012d2e:	bfa8      	it	ge
 8012d30:	4643      	movge	r3, r8
 8012d32:	42bb      	cmp	r3, r7
 8012d34:	bfa8      	it	ge
 8012d36:	463b      	movge	r3, r7
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	bfc2      	ittt	gt
 8012d3c:	eba8 0803 	subgt.w	r8, r8, r3
 8012d40:	1aff      	subgt	r7, r7, r3
 8012d42:	eba9 0903 	subgt.w	r9, r9, r3
 8012d46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	dd17      	ble.n	8012d7c <_strtod_l+0x75c>
 8012d4c:	4631      	mov	r1, r6
 8012d4e:	461a      	mov	r2, r3
 8012d50:	4620      	mov	r0, r4
 8012d52:	f001 ffb5 	bl	8014cc0 <__pow5mult>
 8012d56:	4606      	mov	r6, r0
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	f43f aead 	beq.w	8012ab8 <_strtod_l+0x498>
 8012d5e:	4601      	mov	r1, r0
 8012d60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012d62:	4620      	mov	r0, r4
 8012d64:	f001 ff06 	bl	8014b74 <__multiply>
 8012d68:	900f      	str	r0, [sp, #60]	; 0x3c
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	f43f aea4 	beq.w	8012ab8 <_strtod_l+0x498>
 8012d70:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012d72:	4620      	mov	r0, r4
 8012d74:	f001 fde2 	bl	801493c <_Bfree>
 8012d78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d7a:	931e      	str	r3, [sp, #120]	; 0x78
 8012d7c:	f1b8 0f00 	cmp.w	r8, #0
 8012d80:	f300 8091 	bgt.w	8012ea6 <_strtod_l+0x886>
 8012d84:	9b08      	ldr	r3, [sp, #32]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	dd08      	ble.n	8012d9c <_strtod_l+0x77c>
 8012d8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012d8c:	9907      	ldr	r1, [sp, #28]
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f001 ff96 	bl	8014cc0 <__pow5mult>
 8012d94:	9007      	str	r0, [sp, #28]
 8012d96:	2800      	cmp	r0, #0
 8012d98:	f43f ae8e 	beq.w	8012ab8 <_strtod_l+0x498>
 8012d9c:	2f00      	cmp	r7, #0
 8012d9e:	dd08      	ble.n	8012db2 <_strtod_l+0x792>
 8012da0:	9907      	ldr	r1, [sp, #28]
 8012da2:	463a      	mov	r2, r7
 8012da4:	4620      	mov	r0, r4
 8012da6:	f001 ffe5 	bl	8014d74 <__lshift>
 8012daa:	9007      	str	r0, [sp, #28]
 8012dac:	2800      	cmp	r0, #0
 8012dae:	f43f ae83 	beq.w	8012ab8 <_strtod_l+0x498>
 8012db2:	f1b9 0f00 	cmp.w	r9, #0
 8012db6:	dd08      	ble.n	8012dca <_strtod_l+0x7aa>
 8012db8:	4631      	mov	r1, r6
 8012dba:	464a      	mov	r2, r9
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f001 ffd9 	bl	8014d74 <__lshift>
 8012dc2:	4606      	mov	r6, r0
 8012dc4:	2800      	cmp	r0, #0
 8012dc6:	f43f ae77 	beq.w	8012ab8 <_strtod_l+0x498>
 8012dca:	9a07      	ldr	r2, [sp, #28]
 8012dcc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f002 f858 	bl	8014e84 <__mdiff>
 8012dd4:	4605      	mov	r5, r0
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	f43f ae6e 	beq.w	8012ab8 <_strtod_l+0x498>
 8012ddc:	68c3      	ldr	r3, [r0, #12]
 8012dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8012de0:	2300      	movs	r3, #0
 8012de2:	60c3      	str	r3, [r0, #12]
 8012de4:	4631      	mov	r1, r6
 8012de6:	f002 f831 	bl	8014e4c <__mcmp>
 8012dea:	2800      	cmp	r0, #0
 8012dec:	da65      	bge.n	8012eba <_strtod_l+0x89a>
 8012dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012df0:	ea53 030a 	orrs.w	r3, r3, sl
 8012df4:	f040 8087 	bne.w	8012f06 <_strtod_l+0x8e6>
 8012df8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	f040 8082 	bne.w	8012f06 <_strtod_l+0x8e6>
 8012e02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012e06:	0d1b      	lsrs	r3, r3, #20
 8012e08:	051b      	lsls	r3, r3, #20
 8012e0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012e0e:	d97a      	bls.n	8012f06 <_strtod_l+0x8e6>
 8012e10:	696b      	ldr	r3, [r5, #20]
 8012e12:	b913      	cbnz	r3, 8012e1a <_strtod_l+0x7fa>
 8012e14:	692b      	ldr	r3, [r5, #16]
 8012e16:	2b01      	cmp	r3, #1
 8012e18:	dd75      	ble.n	8012f06 <_strtod_l+0x8e6>
 8012e1a:	4629      	mov	r1, r5
 8012e1c:	2201      	movs	r2, #1
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f001 ffa8 	bl	8014d74 <__lshift>
 8012e24:	4631      	mov	r1, r6
 8012e26:	4605      	mov	r5, r0
 8012e28:	f002 f810 	bl	8014e4c <__mcmp>
 8012e2c:	2800      	cmp	r0, #0
 8012e2e:	dd6a      	ble.n	8012f06 <_strtod_l+0x8e6>
 8012e30:	9904      	ldr	r1, [sp, #16]
 8012e32:	4a55      	ldr	r2, [pc, #340]	; (8012f88 <_strtod_l+0x968>)
 8012e34:	465b      	mov	r3, fp
 8012e36:	2900      	cmp	r1, #0
 8012e38:	f000 8085 	beq.w	8012f46 <_strtod_l+0x926>
 8012e3c:	ea02 010b 	and.w	r1, r2, fp
 8012e40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012e44:	dc7f      	bgt.n	8012f46 <_strtod_l+0x926>
 8012e46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012e4a:	f77f aeaa 	ble.w	8012ba2 <_strtod_l+0x582>
 8012e4e:	4a4f      	ldr	r2, [pc, #316]	; (8012f8c <_strtod_l+0x96c>)
 8012e50:	2300      	movs	r3, #0
 8012e52:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8012e56:	4650      	mov	r0, sl
 8012e58:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012e5c:	4659      	mov	r1, fp
 8012e5e:	f7ed fbe3 	bl	8000628 <__aeabi_dmul>
 8012e62:	460b      	mov	r3, r1
 8012e64:	4303      	orrs	r3, r0
 8012e66:	bf08      	it	eq
 8012e68:	2322      	moveq	r3, #34	; 0x22
 8012e6a:	4682      	mov	sl, r0
 8012e6c:	468b      	mov	fp, r1
 8012e6e:	bf08      	it	eq
 8012e70:	6023      	streq	r3, [r4, #0]
 8012e72:	e62b      	b.n	8012acc <_strtod_l+0x4ac>
 8012e74:	f04f 32ff 	mov.w	r2, #4294967295
 8012e78:	fa02 f303 	lsl.w	r3, r2, r3
 8012e7c:	ea03 0a0a 	and.w	sl, r3, sl
 8012e80:	e6de      	b.n	8012c40 <_strtod_l+0x620>
 8012e82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8012e86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012e8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8012e8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8012e92:	fa01 f308 	lsl.w	r3, r1, r8
 8012e96:	930c      	str	r3, [sp, #48]	; 0x30
 8012e98:	9111      	str	r1, [sp, #68]	; 0x44
 8012e9a:	e741      	b.n	8012d20 <_strtod_l+0x700>
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	9311      	str	r3, [sp, #68]	; 0x44
 8012ea4:	e73c      	b.n	8012d20 <_strtod_l+0x700>
 8012ea6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012ea8:	4642      	mov	r2, r8
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f001 ff62 	bl	8014d74 <__lshift>
 8012eb0:	901e      	str	r0, [sp, #120]	; 0x78
 8012eb2:	2800      	cmp	r0, #0
 8012eb4:	f47f af66 	bne.w	8012d84 <_strtod_l+0x764>
 8012eb8:	e5fe      	b.n	8012ab8 <_strtod_l+0x498>
 8012eba:	465f      	mov	r7, fp
 8012ebc:	d16e      	bne.n	8012f9c <_strtod_l+0x97c>
 8012ebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ec0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ec4:	b342      	cbz	r2, 8012f18 <_strtod_l+0x8f8>
 8012ec6:	4a32      	ldr	r2, [pc, #200]	; (8012f90 <_strtod_l+0x970>)
 8012ec8:	4293      	cmp	r3, r2
 8012eca:	d128      	bne.n	8012f1e <_strtod_l+0x8fe>
 8012ecc:	9b04      	ldr	r3, [sp, #16]
 8012ece:	4650      	mov	r0, sl
 8012ed0:	b1eb      	cbz	r3, 8012f0e <_strtod_l+0x8ee>
 8012ed2:	4a2d      	ldr	r2, [pc, #180]	; (8012f88 <_strtod_l+0x968>)
 8012ed4:	403a      	ands	r2, r7
 8012ed6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012eda:	f04f 31ff 	mov.w	r1, #4294967295
 8012ede:	d819      	bhi.n	8012f14 <_strtod_l+0x8f4>
 8012ee0:	0d12      	lsrs	r2, r2, #20
 8012ee2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8012eea:	4298      	cmp	r0, r3
 8012eec:	d117      	bne.n	8012f1e <_strtod_l+0x8fe>
 8012eee:	4b29      	ldr	r3, [pc, #164]	; (8012f94 <_strtod_l+0x974>)
 8012ef0:	429f      	cmp	r7, r3
 8012ef2:	d102      	bne.n	8012efa <_strtod_l+0x8da>
 8012ef4:	3001      	adds	r0, #1
 8012ef6:	f43f addf 	beq.w	8012ab8 <_strtod_l+0x498>
 8012efa:	4b23      	ldr	r3, [pc, #140]	; (8012f88 <_strtod_l+0x968>)
 8012efc:	403b      	ands	r3, r7
 8012efe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012f02:	f04f 0a00 	mov.w	sl, #0
 8012f06:	9b04      	ldr	r3, [sp, #16]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d1a0      	bne.n	8012e4e <_strtod_l+0x82e>
 8012f0c:	e5de      	b.n	8012acc <_strtod_l+0x4ac>
 8012f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8012f12:	e7ea      	b.n	8012eea <_strtod_l+0x8ca>
 8012f14:	460b      	mov	r3, r1
 8012f16:	e7e8      	b.n	8012eea <_strtod_l+0x8ca>
 8012f18:	ea53 030a 	orrs.w	r3, r3, sl
 8012f1c:	d088      	beq.n	8012e30 <_strtod_l+0x810>
 8012f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f20:	b1db      	cbz	r3, 8012f5a <_strtod_l+0x93a>
 8012f22:	423b      	tst	r3, r7
 8012f24:	d0ef      	beq.n	8012f06 <_strtod_l+0x8e6>
 8012f26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f28:	9a04      	ldr	r2, [sp, #16]
 8012f2a:	4650      	mov	r0, sl
 8012f2c:	4659      	mov	r1, fp
 8012f2e:	b1c3      	cbz	r3, 8012f62 <_strtod_l+0x942>
 8012f30:	f7ff fb58 	bl	80125e4 <sulp>
 8012f34:	4602      	mov	r2, r0
 8012f36:	460b      	mov	r3, r1
 8012f38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012f3c:	f7ed f9be 	bl	80002bc <__adddf3>
 8012f40:	4682      	mov	sl, r0
 8012f42:	468b      	mov	fp, r1
 8012f44:	e7df      	b.n	8012f06 <_strtod_l+0x8e6>
 8012f46:	4013      	ands	r3, r2
 8012f48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012f4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012f50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012f54:	f04f 3aff 	mov.w	sl, #4294967295
 8012f58:	e7d5      	b.n	8012f06 <_strtod_l+0x8e6>
 8012f5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012f5c:	ea13 0f0a 	tst.w	r3, sl
 8012f60:	e7e0      	b.n	8012f24 <_strtod_l+0x904>
 8012f62:	f7ff fb3f 	bl	80125e4 <sulp>
 8012f66:	4602      	mov	r2, r0
 8012f68:	460b      	mov	r3, r1
 8012f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012f6e:	f7ed f9a3 	bl	80002b8 <__aeabi_dsub>
 8012f72:	2200      	movs	r2, #0
 8012f74:	2300      	movs	r3, #0
 8012f76:	4682      	mov	sl, r0
 8012f78:	468b      	mov	fp, r1
 8012f7a:	f7ed fdbd 	bl	8000af8 <__aeabi_dcmpeq>
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	d0c1      	beq.n	8012f06 <_strtod_l+0x8e6>
 8012f82:	e60e      	b.n	8012ba2 <_strtod_l+0x582>
 8012f84:	fffffc02 	.word	0xfffffc02
 8012f88:	7ff00000 	.word	0x7ff00000
 8012f8c:	39500000 	.word	0x39500000
 8012f90:	000fffff 	.word	0x000fffff
 8012f94:	7fefffff 	.word	0x7fefffff
 8012f98:	08029e60 	.word	0x08029e60
 8012f9c:	4631      	mov	r1, r6
 8012f9e:	4628      	mov	r0, r5
 8012fa0:	f002 f8d0 	bl	8015144 <__ratio>
 8012fa4:	ec59 8b10 	vmov	r8, r9, d0
 8012fa8:	ee10 0a10 	vmov	r0, s0
 8012fac:	2200      	movs	r2, #0
 8012fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012fb2:	4649      	mov	r1, r9
 8012fb4:	f7ed fdb4 	bl	8000b20 <__aeabi_dcmple>
 8012fb8:	2800      	cmp	r0, #0
 8012fba:	d07c      	beq.n	80130b6 <_strtod_l+0xa96>
 8012fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d04c      	beq.n	801305c <_strtod_l+0xa3c>
 8012fc2:	4b95      	ldr	r3, [pc, #596]	; (8013218 <_strtod_l+0xbf8>)
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012fca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013218 <_strtod_l+0xbf8>
 8012fce:	f04f 0800 	mov.w	r8, #0
 8012fd2:	4b92      	ldr	r3, [pc, #584]	; (801321c <_strtod_l+0xbfc>)
 8012fd4:	403b      	ands	r3, r7
 8012fd6:	9311      	str	r3, [sp, #68]	; 0x44
 8012fd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012fda:	4b91      	ldr	r3, [pc, #580]	; (8013220 <_strtod_l+0xc00>)
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	f040 80b2 	bne.w	8013146 <_strtod_l+0xb26>
 8012fe2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012fea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012fee:	ec4b ab10 	vmov	d0, sl, fp
 8012ff2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8012ff6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012ffa:	f001 ffcb 	bl	8014f94 <__ulp>
 8012ffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013002:	ec53 2b10 	vmov	r2, r3, d0
 8013006:	f7ed fb0f 	bl	8000628 <__aeabi_dmul>
 801300a:	4652      	mov	r2, sl
 801300c:	465b      	mov	r3, fp
 801300e:	f7ed f955 	bl	80002bc <__adddf3>
 8013012:	460b      	mov	r3, r1
 8013014:	4981      	ldr	r1, [pc, #516]	; (801321c <_strtod_l+0xbfc>)
 8013016:	4a83      	ldr	r2, [pc, #524]	; (8013224 <_strtod_l+0xc04>)
 8013018:	4019      	ands	r1, r3
 801301a:	4291      	cmp	r1, r2
 801301c:	4682      	mov	sl, r0
 801301e:	d95e      	bls.n	80130de <_strtod_l+0xabe>
 8013020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013022:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013026:	4293      	cmp	r3, r2
 8013028:	d103      	bne.n	8013032 <_strtod_l+0xa12>
 801302a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801302c:	3301      	adds	r3, #1
 801302e:	f43f ad43 	beq.w	8012ab8 <_strtod_l+0x498>
 8013032:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8013230 <_strtod_l+0xc10>
 8013036:	f04f 3aff 	mov.w	sl, #4294967295
 801303a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801303c:	4620      	mov	r0, r4
 801303e:	f001 fc7d 	bl	801493c <_Bfree>
 8013042:	9907      	ldr	r1, [sp, #28]
 8013044:	4620      	mov	r0, r4
 8013046:	f001 fc79 	bl	801493c <_Bfree>
 801304a:	4631      	mov	r1, r6
 801304c:	4620      	mov	r0, r4
 801304e:	f001 fc75 	bl	801493c <_Bfree>
 8013052:	4629      	mov	r1, r5
 8013054:	4620      	mov	r0, r4
 8013056:	f001 fc71 	bl	801493c <_Bfree>
 801305a:	e613      	b.n	8012c84 <_strtod_l+0x664>
 801305c:	f1ba 0f00 	cmp.w	sl, #0
 8013060:	d11b      	bne.n	801309a <_strtod_l+0xa7a>
 8013062:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013066:	b9f3      	cbnz	r3, 80130a6 <_strtod_l+0xa86>
 8013068:	4b6b      	ldr	r3, [pc, #428]	; (8013218 <_strtod_l+0xbf8>)
 801306a:	2200      	movs	r2, #0
 801306c:	4640      	mov	r0, r8
 801306e:	4649      	mov	r1, r9
 8013070:	f7ed fd4c 	bl	8000b0c <__aeabi_dcmplt>
 8013074:	b9d0      	cbnz	r0, 80130ac <_strtod_l+0xa8c>
 8013076:	4640      	mov	r0, r8
 8013078:	4649      	mov	r1, r9
 801307a:	4b6b      	ldr	r3, [pc, #428]	; (8013228 <_strtod_l+0xc08>)
 801307c:	2200      	movs	r2, #0
 801307e:	f7ed fad3 	bl	8000628 <__aeabi_dmul>
 8013082:	4680      	mov	r8, r0
 8013084:	4689      	mov	r9, r1
 8013086:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801308a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801308e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013090:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8013094:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013098:	e79b      	b.n	8012fd2 <_strtod_l+0x9b2>
 801309a:	f1ba 0f01 	cmp.w	sl, #1
 801309e:	d102      	bne.n	80130a6 <_strtod_l+0xa86>
 80130a0:	2f00      	cmp	r7, #0
 80130a2:	f43f ad7e 	beq.w	8012ba2 <_strtod_l+0x582>
 80130a6:	4b61      	ldr	r3, [pc, #388]	; (801322c <_strtod_l+0xc0c>)
 80130a8:	2200      	movs	r2, #0
 80130aa:	e78c      	b.n	8012fc6 <_strtod_l+0x9a6>
 80130ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013228 <_strtod_l+0xc08>
 80130b0:	f04f 0800 	mov.w	r8, #0
 80130b4:	e7e7      	b.n	8013086 <_strtod_l+0xa66>
 80130b6:	4b5c      	ldr	r3, [pc, #368]	; (8013228 <_strtod_l+0xc08>)
 80130b8:	4640      	mov	r0, r8
 80130ba:	4649      	mov	r1, r9
 80130bc:	2200      	movs	r2, #0
 80130be:	f7ed fab3 	bl	8000628 <__aeabi_dmul>
 80130c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80130c4:	4680      	mov	r8, r0
 80130c6:	4689      	mov	r9, r1
 80130c8:	b933      	cbnz	r3, 80130d8 <_strtod_l+0xab8>
 80130ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80130ce:	9012      	str	r0, [sp, #72]	; 0x48
 80130d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80130d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80130d6:	e7dd      	b.n	8013094 <_strtod_l+0xa74>
 80130d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80130dc:	e7f9      	b.n	80130d2 <_strtod_l+0xab2>
 80130de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80130e2:	9b04      	ldr	r3, [sp, #16]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d1a8      	bne.n	801303a <_strtod_l+0xa1a>
 80130e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80130ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80130ee:	0d1b      	lsrs	r3, r3, #20
 80130f0:	051b      	lsls	r3, r3, #20
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d1a1      	bne.n	801303a <_strtod_l+0xa1a>
 80130f6:	4640      	mov	r0, r8
 80130f8:	4649      	mov	r1, r9
 80130fa:	f7ed fdf5 	bl	8000ce8 <__aeabi_d2lz>
 80130fe:	f7ed fa65 	bl	80005cc <__aeabi_l2d>
 8013102:	4602      	mov	r2, r0
 8013104:	460b      	mov	r3, r1
 8013106:	4640      	mov	r0, r8
 8013108:	4649      	mov	r1, r9
 801310a:	f7ed f8d5 	bl	80002b8 <__aeabi_dsub>
 801310e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013110:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013114:	ea43 030a 	orr.w	r3, r3, sl
 8013118:	4313      	orrs	r3, r2
 801311a:	4680      	mov	r8, r0
 801311c:	4689      	mov	r9, r1
 801311e:	d053      	beq.n	80131c8 <_strtod_l+0xba8>
 8013120:	a335      	add	r3, pc, #212	; (adr r3, 80131f8 <_strtod_l+0xbd8>)
 8013122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013126:	f7ed fcf1 	bl	8000b0c <__aeabi_dcmplt>
 801312a:	2800      	cmp	r0, #0
 801312c:	f47f acce 	bne.w	8012acc <_strtod_l+0x4ac>
 8013130:	a333      	add	r3, pc, #204	; (adr r3, 8013200 <_strtod_l+0xbe0>)
 8013132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013136:	4640      	mov	r0, r8
 8013138:	4649      	mov	r1, r9
 801313a:	f7ed fd05 	bl	8000b48 <__aeabi_dcmpgt>
 801313e:	2800      	cmp	r0, #0
 8013140:	f43f af7b 	beq.w	801303a <_strtod_l+0xa1a>
 8013144:	e4c2      	b.n	8012acc <_strtod_l+0x4ac>
 8013146:	9b04      	ldr	r3, [sp, #16]
 8013148:	b333      	cbz	r3, 8013198 <_strtod_l+0xb78>
 801314a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801314c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013150:	d822      	bhi.n	8013198 <_strtod_l+0xb78>
 8013152:	a32d      	add	r3, pc, #180	; (adr r3, 8013208 <_strtod_l+0xbe8>)
 8013154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013158:	4640      	mov	r0, r8
 801315a:	4649      	mov	r1, r9
 801315c:	f7ed fce0 	bl	8000b20 <__aeabi_dcmple>
 8013160:	b1a0      	cbz	r0, 801318c <_strtod_l+0xb6c>
 8013162:	4649      	mov	r1, r9
 8013164:	4640      	mov	r0, r8
 8013166:	f7ed fd37 	bl	8000bd8 <__aeabi_d2uiz>
 801316a:	2801      	cmp	r0, #1
 801316c:	bf38      	it	cc
 801316e:	2001      	movcc	r0, #1
 8013170:	f7ed f9e0 	bl	8000534 <__aeabi_ui2d>
 8013174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013176:	4680      	mov	r8, r0
 8013178:	4689      	mov	r9, r1
 801317a:	bb13      	cbnz	r3, 80131c2 <_strtod_l+0xba2>
 801317c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013180:	9014      	str	r0, [sp, #80]	; 0x50
 8013182:	9315      	str	r3, [sp, #84]	; 0x54
 8013184:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013188:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801318c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801318e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013190:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013194:	1a9b      	subs	r3, r3, r2
 8013196:	930d      	str	r3, [sp, #52]	; 0x34
 8013198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801319c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80131a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80131a4:	f001 fef6 	bl	8014f94 <__ulp>
 80131a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80131ac:	ec53 2b10 	vmov	r2, r3, d0
 80131b0:	f7ed fa3a 	bl	8000628 <__aeabi_dmul>
 80131b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80131b8:	f7ed f880 	bl	80002bc <__adddf3>
 80131bc:	4682      	mov	sl, r0
 80131be:	468b      	mov	fp, r1
 80131c0:	e78f      	b.n	80130e2 <_strtod_l+0xac2>
 80131c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80131c6:	e7dd      	b.n	8013184 <_strtod_l+0xb64>
 80131c8:	a311      	add	r3, pc, #68	; (adr r3, 8013210 <_strtod_l+0xbf0>)
 80131ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ce:	f7ed fc9d 	bl	8000b0c <__aeabi_dcmplt>
 80131d2:	e7b4      	b.n	801313e <_strtod_l+0xb1e>
 80131d4:	2300      	movs	r3, #0
 80131d6:	930e      	str	r3, [sp, #56]	; 0x38
 80131d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80131da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80131dc:	6013      	str	r3, [r2, #0]
 80131de:	f7ff ba65 	b.w	80126ac <_strtod_l+0x8c>
 80131e2:	2b65      	cmp	r3, #101	; 0x65
 80131e4:	f43f ab5d 	beq.w	80128a2 <_strtod_l+0x282>
 80131e8:	2b45      	cmp	r3, #69	; 0x45
 80131ea:	f43f ab5a 	beq.w	80128a2 <_strtod_l+0x282>
 80131ee:	2201      	movs	r2, #1
 80131f0:	f7ff bb92 	b.w	8012918 <_strtod_l+0x2f8>
 80131f4:	f3af 8000 	nop.w
 80131f8:	94a03595 	.word	0x94a03595
 80131fc:	3fdfffff 	.word	0x3fdfffff
 8013200:	35afe535 	.word	0x35afe535
 8013204:	3fe00000 	.word	0x3fe00000
 8013208:	ffc00000 	.word	0xffc00000
 801320c:	41dfffff 	.word	0x41dfffff
 8013210:	94a03595 	.word	0x94a03595
 8013214:	3fcfffff 	.word	0x3fcfffff
 8013218:	3ff00000 	.word	0x3ff00000
 801321c:	7ff00000 	.word	0x7ff00000
 8013220:	7fe00000 	.word	0x7fe00000
 8013224:	7c9fffff 	.word	0x7c9fffff
 8013228:	3fe00000 	.word	0x3fe00000
 801322c:	bff00000 	.word	0xbff00000
 8013230:	7fefffff 	.word	0x7fefffff

08013234 <_strtod_r>:
 8013234:	4b01      	ldr	r3, [pc, #4]	; (801323c <_strtod_r+0x8>)
 8013236:	f7ff b9f3 	b.w	8012620 <_strtod_l>
 801323a:	bf00      	nop
 801323c:	200000ac 	.word	0x200000ac

08013240 <strtod>:
 8013240:	460a      	mov	r2, r1
 8013242:	4601      	mov	r1, r0
 8013244:	4802      	ldr	r0, [pc, #8]	; (8013250 <strtod+0x10>)
 8013246:	4b03      	ldr	r3, [pc, #12]	; (8013254 <strtod+0x14>)
 8013248:	6800      	ldr	r0, [r0, #0]
 801324a:	f7ff b9e9 	b.w	8012620 <_strtod_l>
 801324e:	bf00      	nop
 8013250:	20000044 	.word	0x20000044
 8013254:	200000ac 	.word	0x200000ac

08013258 <strtok>:
 8013258:	4b16      	ldr	r3, [pc, #88]	; (80132b4 <strtok+0x5c>)
 801325a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801325c:	681e      	ldr	r6, [r3, #0]
 801325e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8013260:	4605      	mov	r5, r0
 8013262:	b9fc      	cbnz	r4, 80132a4 <strtok+0x4c>
 8013264:	2050      	movs	r0, #80	; 0x50
 8013266:	9101      	str	r1, [sp, #4]
 8013268:	f001 fb00 	bl	801486c <malloc>
 801326c:	9901      	ldr	r1, [sp, #4]
 801326e:	65b0      	str	r0, [r6, #88]	; 0x58
 8013270:	4602      	mov	r2, r0
 8013272:	b920      	cbnz	r0, 801327e <strtok+0x26>
 8013274:	4b10      	ldr	r3, [pc, #64]	; (80132b8 <strtok+0x60>)
 8013276:	4811      	ldr	r0, [pc, #68]	; (80132bc <strtok+0x64>)
 8013278:	2157      	movs	r1, #87	; 0x57
 801327a:	f000 f8d9 	bl	8013430 <__assert_func>
 801327e:	e9c0 4400 	strd	r4, r4, [r0]
 8013282:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013286:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801328a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801328e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013292:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8013296:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801329a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801329e:	6184      	str	r4, [r0, #24]
 80132a0:	7704      	strb	r4, [r0, #28]
 80132a2:	6244      	str	r4, [r0, #36]	; 0x24
 80132a4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80132a6:	2301      	movs	r3, #1
 80132a8:	4628      	mov	r0, r5
 80132aa:	b002      	add	sp, #8
 80132ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132b0:	f000 b806 	b.w	80132c0 <__strtok_r>
 80132b4:	20000044 	.word	0x20000044
 80132b8:	08029e88 	.word	0x08029e88
 80132bc:	08029e9f 	.word	0x08029e9f

080132c0 <__strtok_r>:
 80132c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132c2:	b908      	cbnz	r0, 80132c8 <__strtok_r+0x8>
 80132c4:	6810      	ldr	r0, [r2, #0]
 80132c6:	b188      	cbz	r0, 80132ec <__strtok_r+0x2c>
 80132c8:	4604      	mov	r4, r0
 80132ca:	4620      	mov	r0, r4
 80132cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80132d0:	460f      	mov	r7, r1
 80132d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80132d6:	b91e      	cbnz	r6, 80132e0 <__strtok_r+0x20>
 80132d8:	b965      	cbnz	r5, 80132f4 <__strtok_r+0x34>
 80132da:	6015      	str	r5, [r2, #0]
 80132dc:	4628      	mov	r0, r5
 80132de:	e005      	b.n	80132ec <__strtok_r+0x2c>
 80132e0:	42b5      	cmp	r5, r6
 80132e2:	d1f6      	bne.n	80132d2 <__strtok_r+0x12>
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d1f0      	bne.n	80132ca <__strtok_r+0xa>
 80132e8:	6014      	str	r4, [r2, #0]
 80132ea:	7003      	strb	r3, [r0, #0]
 80132ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132ee:	461c      	mov	r4, r3
 80132f0:	e00c      	b.n	801330c <__strtok_r+0x4c>
 80132f2:	b915      	cbnz	r5, 80132fa <__strtok_r+0x3a>
 80132f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80132f8:	460e      	mov	r6, r1
 80132fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80132fe:	42ab      	cmp	r3, r5
 8013300:	d1f7      	bne.n	80132f2 <__strtok_r+0x32>
 8013302:	2b00      	cmp	r3, #0
 8013304:	d0f3      	beq.n	80132ee <__strtok_r+0x2e>
 8013306:	2300      	movs	r3, #0
 8013308:	f804 3c01 	strb.w	r3, [r4, #-1]
 801330c:	6014      	str	r4, [r2, #0]
 801330e:	e7ed      	b.n	80132ec <__strtok_r+0x2c>

08013310 <_strtol_l.isra.0>:
 8013310:	2b01      	cmp	r3, #1
 8013312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013316:	d001      	beq.n	801331c <_strtol_l.isra.0+0xc>
 8013318:	2b24      	cmp	r3, #36	; 0x24
 801331a:	d906      	bls.n	801332a <_strtol_l.isra.0+0x1a>
 801331c:	f7fe fa90 	bl	8011840 <__errno>
 8013320:	2316      	movs	r3, #22
 8013322:	6003      	str	r3, [r0, #0]
 8013324:	2000      	movs	r0, #0
 8013326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801332a:	4f3a      	ldr	r7, [pc, #232]	; (8013414 <_strtol_l.isra.0+0x104>)
 801332c:	468e      	mov	lr, r1
 801332e:	4676      	mov	r6, lr
 8013330:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013334:	5de5      	ldrb	r5, [r4, r7]
 8013336:	f015 0508 	ands.w	r5, r5, #8
 801333a:	d1f8      	bne.n	801332e <_strtol_l.isra.0+0x1e>
 801333c:	2c2d      	cmp	r4, #45	; 0x2d
 801333e:	d134      	bne.n	80133aa <_strtol_l.isra.0+0x9a>
 8013340:	f89e 4000 	ldrb.w	r4, [lr]
 8013344:	f04f 0801 	mov.w	r8, #1
 8013348:	f106 0e02 	add.w	lr, r6, #2
 801334c:	2b00      	cmp	r3, #0
 801334e:	d05c      	beq.n	801340a <_strtol_l.isra.0+0xfa>
 8013350:	2b10      	cmp	r3, #16
 8013352:	d10c      	bne.n	801336e <_strtol_l.isra.0+0x5e>
 8013354:	2c30      	cmp	r4, #48	; 0x30
 8013356:	d10a      	bne.n	801336e <_strtol_l.isra.0+0x5e>
 8013358:	f89e 4000 	ldrb.w	r4, [lr]
 801335c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013360:	2c58      	cmp	r4, #88	; 0x58
 8013362:	d14d      	bne.n	8013400 <_strtol_l.isra.0+0xf0>
 8013364:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013368:	2310      	movs	r3, #16
 801336a:	f10e 0e02 	add.w	lr, lr, #2
 801336e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8013372:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013376:	2600      	movs	r6, #0
 8013378:	fbbc f9f3 	udiv	r9, ip, r3
 801337c:	4635      	mov	r5, r6
 801337e:	fb03 ca19 	mls	sl, r3, r9, ip
 8013382:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013386:	2f09      	cmp	r7, #9
 8013388:	d818      	bhi.n	80133bc <_strtol_l.isra.0+0xac>
 801338a:	463c      	mov	r4, r7
 801338c:	42a3      	cmp	r3, r4
 801338e:	dd24      	ble.n	80133da <_strtol_l.isra.0+0xca>
 8013390:	2e00      	cmp	r6, #0
 8013392:	db1f      	blt.n	80133d4 <_strtol_l.isra.0+0xc4>
 8013394:	45a9      	cmp	r9, r5
 8013396:	d31d      	bcc.n	80133d4 <_strtol_l.isra.0+0xc4>
 8013398:	d101      	bne.n	801339e <_strtol_l.isra.0+0x8e>
 801339a:	45a2      	cmp	sl, r4
 801339c:	db1a      	blt.n	80133d4 <_strtol_l.isra.0+0xc4>
 801339e:	fb05 4503 	mla	r5, r5, r3, r4
 80133a2:	2601      	movs	r6, #1
 80133a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80133a8:	e7eb      	b.n	8013382 <_strtol_l.isra.0+0x72>
 80133aa:	2c2b      	cmp	r4, #43	; 0x2b
 80133ac:	bf08      	it	eq
 80133ae:	f89e 4000 	ldrbeq.w	r4, [lr]
 80133b2:	46a8      	mov	r8, r5
 80133b4:	bf08      	it	eq
 80133b6:	f106 0e02 	addeq.w	lr, r6, #2
 80133ba:	e7c7      	b.n	801334c <_strtol_l.isra.0+0x3c>
 80133bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80133c0:	2f19      	cmp	r7, #25
 80133c2:	d801      	bhi.n	80133c8 <_strtol_l.isra.0+0xb8>
 80133c4:	3c37      	subs	r4, #55	; 0x37
 80133c6:	e7e1      	b.n	801338c <_strtol_l.isra.0+0x7c>
 80133c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80133cc:	2f19      	cmp	r7, #25
 80133ce:	d804      	bhi.n	80133da <_strtol_l.isra.0+0xca>
 80133d0:	3c57      	subs	r4, #87	; 0x57
 80133d2:	e7db      	b.n	801338c <_strtol_l.isra.0+0x7c>
 80133d4:	f04f 36ff 	mov.w	r6, #4294967295
 80133d8:	e7e4      	b.n	80133a4 <_strtol_l.isra.0+0x94>
 80133da:	2e00      	cmp	r6, #0
 80133dc:	da05      	bge.n	80133ea <_strtol_l.isra.0+0xda>
 80133de:	2322      	movs	r3, #34	; 0x22
 80133e0:	6003      	str	r3, [r0, #0]
 80133e2:	4665      	mov	r5, ip
 80133e4:	b942      	cbnz	r2, 80133f8 <_strtol_l.isra.0+0xe8>
 80133e6:	4628      	mov	r0, r5
 80133e8:	e79d      	b.n	8013326 <_strtol_l.isra.0+0x16>
 80133ea:	f1b8 0f00 	cmp.w	r8, #0
 80133ee:	d000      	beq.n	80133f2 <_strtol_l.isra.0+0xe2>
 80133f0:	426d      	negs	r5, r5
 80133f2:	2a00      	cmp	r2, #0
 80133f4:	d0f7      	beq.n	80133e6 <_strtol_l.isra.0+0xd6>
 80133f6:	b10e      	cbz	r6, 80133fc <_strtol_l.isra.0+0xec>
 80133f8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80133fc:	6011      	str	r1, [r2, #0]
 80133fe:	e7f2      	b.n	80133e6 <_strtol_l.isra.0+0xd6>
 8013400:	2430      	movs	r4, #48	; 0x30
 8013402:	2b00      	cmp	r3, #0
 8013404:	d1b3      	bne.n	801336e <_strtol_l.isra.0+0x5e>
 8013406:	2308      	movs	r3, #8
 8013408:	e7b1      	b.n	801336e <_strtol_l.isra.0+0x5e>
 801340a:	2c30      	cmp	r4, #48	; 0x30
 801340c:	d0a4      	beq.n	8013358 <_strtol_l.isra.0+0x48>
 801340e:	230a      	movs	r3, #10
 8013410:	e7ad      	b.n	801336e <_strtol_l.isra.0+0x5e>
 8013412:	bf00      	nop
 8013414:	08029f3d 	.word	0x08029f3d

08013418 <_strtol_r>:
 8013418:	f7ff bf7a 	b.w	8013310 <_strtol_l.isra.0>

0801341c <strtol>:
 801341c:	4613      	mov	r3, r2
 801341e:	460a      	mov	r2, r1
 8013420:	4601      	mov	r1, r0
 8013422:	4802      	ldr	r0, [pc, #8]	; (801342c <strtol+0x10>)
 8013424:	6800      	ldr	r0, [r0, #0]
 8013426:	f7ff bf73 	b.w	8013310 <_strtol_l.isra.0>
 801342a:	bf00      	nop
 801342c:	20000044 	.word	0x20000044

08013430 <__assert_func>:
 8013430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013432:	4614      	mov	r4, r2
 8013434:	461a      	mov	r2, r3
 8013436:	4b09      	ldr	r3, [pc, #36]	; (801345c <__assert_func+0x2c>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4605      	mov	r5, r0
 801343c:	68d8      	ldr	r0, [r3, #12]
 801343e:	b14c      	cbz	r4, 8013454 <__assert_func+0x24>
 8013440:	4b07      	ldr	r3, [pc, #28]	; (8013460 <__assert_func+0x30>)
 8013442:	9100      	str	r1, [sp, #0]
 8013444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013448:	4906      	ldr	r1, [pc, #24]	; (8013464 <__assert_func+0x34>)
 801344a:	462b      	mov	r3, r5
 801344c:	f000 fe88 	bl	8014160 <fiprintf>
 8013450:	f002 fb56 	bl	8015b00 <abort>
 8013454:	4b04      	ldr	r3, [pc, #16]	; (8013468 <__assert_func+0x38>)
 8013456:	461c      	mov	r4, r3
 8013458:	e7f3      	b.n	8013442 <__assert_func+0x12>
 801345a:	bf00      	nop
 801345c:	20000044 	.word	0x20000044
 8013460:	08029f00 	.word	0x08029f00
 8013464:	08029f0d 	.word	0x08029f0d
 8013468:	08029f3b 	.word	0x08029f3b

0801346c <quorem>:
 801346c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013470:	6903      	ldr	r3, [r0, #16]
 8013472:	690c      	ldr	r4, [r1, #16]
 8013474:	42a3      	cmp	r3, r4
 8013476:	4607      	mov	r7, r0
 8013478:	f2c0 8081 	blt.w	801357e <quorem+0x112>
 801347c:	3c01      	subs	r4, #1
 801347e:	f101 0814 	add.w	r8, r1, #20
 8013482:	f100 0514 	add.w	r5, r0, #20
 8013486:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801348a:	9301      	str	r3, [sp, #4]
 801348c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013490:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013494:	3301      	adds	r3, #1
 8013496:	429a      	cmp	r2, r3
 8013498:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801349c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80134a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80134a4:	d331      	bcc.n	801350a <quorem+0x9e>
 80134a6:	f04f 0e00 	mov.w	lr, #0
 80134aa:	4640      	mov	r0, r8
 80134ac:	46ac      	mov	ip, r5
 80134ae:	46f2      	mov	sl, lr
 80134b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80134b4:	b293      	uxth	r3, r2
 80134b6:	fb06 e303 	mla	r3, r6, r3, lr
 80134ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80134be:	b29b      	uxth	r3, r3
 80134c0:	ebaa 0303 	sub.w	r3, sl, r3
 80134c4:	0c12      	lsrs	r2, r2, #16
 80134c6:	f8dc a000 	ldr.w	sl, [ip]
 80134ca:	fb06 e202 	mla	r2, r6, r2, lr
 80134ce:	fa13 f38a 	uxtah	r3, r3, sl
 80134d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80134d6:	fa1f fa82 	uxth.w	sl, r2
 80134da:	f8dc 2000 	ldr.w	r2, [ip]
 80134de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80134e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80134ec:	4581      	cmp	r9, r0
 80134ee:	f84c 3b04 	str.w	r3, [ip], #4
 80134f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80134f6:	d2db      	bcs.n	80134b0 <quorem+0x44>
 80134f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80134fc:	b92b      	cbnz	r3, 801350a <quorem+0x9e>
 80134fe:	9b01      	ldr	r3, [sp, #4]
 8013500:	3b04      	subs	r3, #4
 8013502:	429d      	cmp	r5, r3
 8013504:	461a      	mov	r2, r3
 8013506:	d32e      	bcc.n	8013566 <quorem+0xfa>
 8013508:	613c      	str	r4, [r7, #16]
 801350a:	4638      	mov	r0, r7
 801350c:	f001 fc9e 	bl	8014e4c <__mcmp>
 8013510:	2800      	cmp	r0, #0
 8013512:	db24      	blt.n	801355e <quorem+0xf2>
 8013514:	3601      	adds	r6, #1
 8013516:	4628      	mov	r0, r5
 8013518:	f04f 0c00 	mov.w	ip, #0
 801351c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013520:	f8d0 e000 	ldr.w	lr, [r0]
 8013524:	b293      	uxth	r3, r2
 8013526:	ebac 0303 	sub.w	r3, ip, r3
 801352a:	0c12      	lsrs	r2, r2, #16
 801352c:	fa13 f38e 	uxtah	r3, r3, lr
 8013530:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013538:	b29b      	uxth	r3, r3
 801353a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801353e:	45c1      	cmp	r9, r8
 8013540:	f840 3b04 	str.w	r3, [r0], #4
 8013544:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013548:	d2e8      	bcs.n	801351c <quorem+0xb0>
 801354a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801354e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013552:	b922      	cbnz	r2, 801355e <quorem+0xf2>
 8013554:	3b04      	subs	r3, #4
 8013556:	429d      	cmp	r5, r3
 8013558:	461a      	mov	r2, r3
 801355a:	d30a      	bcc.n	8013572 <quorem+0x106>
 801355c:	613c      	str	r4, [r7, #16]
 801355e:	4630      	mov	r0, r6
 8013560:	b003      	add	sp, #12
 8013562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013566:	6812      	ldr	r2, [r2, #0]
 8013568:	3b04      	subs	r3, #4
 801356a:	2a00      	cmp	r2, #0
 801356c:	d1cc      	bne.n	8013508 <quorem+0x9c>
 801356e:	3c01      	subs	r4, #1
 8013570:	e7c7      	b.n	8013502 <quorem+0x96>
 8013572:	6812      	ldr	r2, [r2, #0]
 8013574:	3b04      	subs	r3, #4
 8013576:	2a00      	cmp	r2, #0
 8013578:	d1f0      	bne.n	801355c <quorem+0xf0>
 801357a:	3c01      	subs	r4, #1
 801357c:	e7eb      	b.n	8013556 <quorem+0xea>
 801357e:	2000      	movs	r0, #0
 8013580:	e7ee      	b.n	8013560 <quorem+0xf4>
 8013582:	0000      	movs	r0, r0
 8013584:	0000      	movs	r0, r0
	...

08013588 <_dtoa_r>:
 8013588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801358c:	ed2d 8b02 	vpush	{d8}
 8013590:	ec57 6b10 	vmov	r6, r7, d0
 8013594:	b095      	sub	sp, #84	; 0x54
 8013596:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013598:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801359c:	9105      	str	r1, [sp, #20]
 801359e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80135a2:	4604      	mov	r4, r0
 80135a4:	9209      	str	r2, [sp, #36]	; 0x24
 80135a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80135a8:	b975      	cbnz	r5, 80135c8 <_dtoa_r+0x40>
 80135aa:	2010      	movs	r0, #16
 80135ac:	f001 f95e 	bl	801486c <malloc>
 80135b0:	4602      	mov	r2, r0
 80135b2:	6260      	str	r0, [r4, #36]	; 0x24
 80135b4:	b920      	cbnz	r0, 80135c0 <_dtoa_r+0x38>
 80135b6:	4bb2      	ldr	r3, [pc, #712]	; (8013880 <_dtoa_r+0x2f8>)
 80135b8:	21ea      	movs	r1, #234	; 0xea
 80135ba:	48b2      	ldr	r0, [pc, #712]	; (8013884 <_dtoa_r+0x2fc>)
 80135bc:	f7ff ff38 	bl	8013430 <__assert_func>
 80135c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80135c4:	6005      	str	r5, [r0, #0]
 80135c6:	60c5      	str	r5, [r0, #12]
 80135c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135ca:	6819      	ldr	r1, [r3, #0]
 80135cc:	b151      	cbz	r1, 80135e4 <_dtoa_r+0x5c>
 80135ce:	685a      	ldr	r2, [r3, #4]
 80135d0:	604a      	str	r2, [r1, #4]
 80135d2:	2301      	movs	r3, #1
 80135d4:	4093      	lsls	r3, r2
 80135d6:	608b      	str	r3, [r1, #8]
 80135d8:	4620      	mov	r0, r4
 80135da:	f001 f9af 	bl	801493c <_Bfree>
 80135de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135e0:	2200      	movs	r2, #0
 80135e2:	601a      	str	r2, [r3, #0]
 80135e4:	1e3b      	subs	r3, r7, #0
 80135e6:	bfb9      	ittee	lt
 80135e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80135ec:	9303      	strlt	r3, [sp, #12]
 80135ee:	2300      	movge	r3, #0
 80135f0:	f8c8 3000 	strge.w	r3, [r8]
 80135f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80135f8:	4ba3      	ldr	r3, [pc, #652]	; (8013888 <_dtoa_r+0x300>)
 80135fa:	bfbc      	itt	lt
 80135fc:	2201      	movlt	r2, #1
 80135fe:	f8c8 2000 	strlt.w	r2, [r8]
 8013602:	ea33 0309 	bics.w	r3, r3, r9
 8013606:	d11b      	bne.n	8013640 <_dtoa_r+0xb8>
 8013608:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801360a:	f242 730f 	movw	r3, #9999	; 0x270f
 801360e:	6013      	str	r3, [r2, #0]
 8013610:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013614:	4333      	orrs	r3, r6
 8013616:	f000 857a 	beq.w	801410e <_dtoa_r+0xb86>
 801361a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801361c:	b963      	cbnz	r3, 8013638 <_dtoa_r+0xb0>
 801361e:	4b9b      	ldr	r3, [pc, #620]	; (801388c <_dtoa_r+0x304>)
 8013620:	e024      	b.n	801366c <_dtoa_r+0xe4>
 8013622:	4b9b      	ldr	r3, [pc, #620]	; (8013890 <_dtoa_r+0x308>)
 8013624:	9300      	str	r3, [sp, #0]
 8013626:	3308      	adds	r3, #8
 8013628:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801362a:	6013      	str	r3, [r2, #0]
 801362c:	9800      	ldr	r0, [sp, #0]
 801362e:	b015      	add	sp, #84	; 0x54
 8013630:	ecbd 8b02 	vpop	{d8}
 8013634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013638:	4b94      	ldr	r3, [pc, #592]	; (801388c <_dtoa_r+0x304>)
 801363a:	9300      	str	r3, [sp, #0]
 801363c:	3303      	adds	r3, #3
 801363e:	e7f3      	b.n	8013628 <_dtoa_r+0xa0>
 8013640:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013644:	2200      	movs	r2, #0
 8013646:	ec51 0b17 	vmov	r0, r1, d7
 801364a:	2300      	movs	r3, #0
 801364c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013650:	f7ed fa52 	bl	8000af8 <__aeabi_dcmpeq>
 8013654:	4680      	mov	r8, r0
 8013656:	b158      	cbz	r0, 8013670 <_dtoa_r+0xe8>
 8013658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801365a:	2301      	movs	r3, #1
 801365c:	6013      	str	r3, [r2, #0]
 801365e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013660:	2b00      	cmp	r3, #0
 8013662:	f000 8551 	beq.w	8014108 <_dtoa_r+0xb80>
 8013666:	488b      	ldr	r0, [pc, #556]	; (8013894 <_dtoa_r+0x30c>)
 8013668:	6018      	str	r0, [r3, #0]
 801366a:	1e43      	subs	r3, r0, #1
 801366c:	9300      	str	r3, [sp, #0]
 801366e:	e7dd      	b.n	801362c <_dtoa_r+0xa4>
 8013670:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013674:	aa12      	add	r2, sp, #72	; 0x48
 8013676:	a913      	add	r1, sp, #76	; 0x4c
 8013678:	4620      	mov	r0, r4
 801367a:	f001 fd07 	bl	801508c <__d2b>
 801367e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013682:	4683      	mov	fp, r0
 8013684:	2d00      	cmp	r5, #0
 8013686:	d07c      	beq.n	8013782 <_dtoa_r+0x1fa>
 8013688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801368a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801368e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013692:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013696:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801369a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801369e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80136a2:	4b7d      	ldr	r3, [pc, #500]	; (8013898 <_dtoa_r+0x310>)
 80136a4:	2200      	movs	r2, #0
 80136a6:	4630      	mov	r0, r6
 80136a8:	4639      	mov	r1, r7
 80136aa:	f7ec fe05 	bl	80002b8 <__aeabi_dsub>
 80136ae:	a36e      	add	r3, pc, #440	; (adr r3, 8013868 <_dtoa_r+0x2e0>)
 80136b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b4:	f7ec ffb8 	bl	8000628 <__aeabi_dmul>
 80136b8:	a36d      	add	r3, pc, #436	; (adr r3, 8013870 <_dtoa_r+0x2e8>)
 80136ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136be:	f7ec fdfd 	bl	80002bc <__adddf3>
 80136c2:	4606      	mov	r6, r0
 80136c4:	4628      	mov	r0, r5
 80136c6:	460f      	mov	r7, r1
 80136c8:	f7ec ff44 	bl	8000554 <__aeabi_i2d>
 80136cc:	a36a      	add	r3, pc, #424	; (adr r3, 8013878 <_dtoa_r+0x2f0>)
 80136ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d2:	f7ec ffa9 	bl	8000628 <__aeabi_dmul>
 80136d6:	4602      	mov	r2, r0
 80136d8:	460b      	mov	r3, r1
 80136da:	4630      	mov	r0, r6
 80136dc:	4639      	mov	r1, r7
 80136de:	f7ec fded 	bl	80002bc <__adddf3>
 80136e2:	4606      	mov	r6, r0
 80136e4:	460f      	mov	r7, r1
 80136e6:	f7ed fa4f 	bl	8000b88 <__aeabi_d2iz>
 80136ea:	2200      	movs	r2, #0
 80136ec:	4682      	mov	sl, r0
 80136ee:	2300      	movs	r3, #0
 80136f0:	4630      	mov	r0, r6
 80136f2:	4639      	mov	r1, r7
 80136f4:	f7ed fa0a 	bl	8000b0c <__aeabi_dcmplt>
 80136f8:	b148      	cbz	r0, 801370e <_dtoa_r+0x186>
 80136fa:	4650      	mov	r0, sl
 80136fc:	f7ec ff2a 	bl	8000554 <__aeabi_i2d>
 8013700:	4632      	mov	r2, r6
 8013702:	463b      	mov	r3, r7
 8013704:	f7ed f9f8 	bl	8000af8 <__aeabi_dcmpeq>
 8013708:	b908      	cbnz	r0, 801370e <_dtoa_r+0x186>
 801370a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801370e:	f1ba 0f16 	cmp.w	sl, #22
 8013712:	d854      	bhi.n	80137be <_dtoa_r+0x236>
 8013714:	4b61      	ldr	r3, [pc, #388]	; (801389c <_dtoa_r+0x314>)
 8013716:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013722:	f7ed f9f3 	bl	8000b0c <__aeabi_dcmplt>
 8013726:	2800      	cmp	r0, #0
 8013728:	d04b      	beq.n	80137c2 <_dtoa_r+0x23a>
 801372a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801372e:	2300      	movs	r3, #0
 8013730:	930e      	str	r3, [sp, #56]	; 0x38
 8013732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013734:	1b5d      	subs	r5, r3, r5
 8013736:	1e6b      	subs	r3, r5, #1
 8013738:	9304      	str	r3, [sp, #16]
 801373a:	bf43      	ittte	mi
 801373c:	2300      	movmi	r3, #0
 801373e:	f1c5 0801 	rsbmi	r8, r5, #1
 8013742:	9304      	strmi	r3, [sp, #16]
 8013744:	f04f 0800 	movpl.w	r8, #0
 8013748:	f1ba 0f00 	cmp.w	sl, #0
 801374c:	db3b      	blt.n	80137c6 <_dtoa_r+0x23e>
 801374e:	9b04      	ldr	r3, [sp, #16]
 8013750:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013754:	4453      	add	r3, sl
 8013756:	9304      	str	r3, [sp, #16]
 8013758:	2300      	movs	r3, #0
 801375a:	9306      	str	r3, [sp, #24]
 801375c:	9b05      	ldr	r3, [sp, #20]
 801375e:	2b09      	cmp	r3, #9
 8013760:	d869      	bhi.n	8013836 <_dtoa_r+0x2ae>
 8013762:	2b05      	cmp	r3, #5
 8013764:	bfc4      	itt	gt
 8013766:	3b04      	subgt	r3, #4
 8013768:	9305      	strgt	r3, [sp, #20]
 801376a:	9b05      	ldr	r3, [sp, #20]
 801376c:	f1a3 0302 	sub.w	r3, r3, #2
 8013770:	bfcc      	ite	gt
 8013772:	2500      	movgt	r5, #0
 8013774:	2501      	movle	r5, #1
 8013776:	2b03      	cmp	r3, #3
 8013778:	d869      	bhi.n	801384e <_dtoa_r+0x2c6>
 801377a:	e8df f003 	tbb	[pc, r3]
 801377e:	4e2c      	.short	0x4e2c
 8013780:	5a4c      	.short	0x5a4c
 8013782:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013786:	441d      	add	r5, r3
 8013788:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801378c:	2b20      	cmp	r3, #32
 801378e:	bfc1      	itttt	gt
 8013790:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013794:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013798:	fa09 f303 	lslgt.w	r3, r9, r3
 801379c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80137a0:	bfda      	itte	le
 80137a2:	f1c3 0320 	rsble	r3, r3, #32
 80137a6:	fa06 f003 	lslle.w	r0, r6, r3
 80137aa:	4318      	orrgt	r0, r3
 80137ac:	f7ec fec2 	bl	8000534 <__aeabi_ui2d>
 80137b0:	2301      	movs	r3, #1
 80137b2:	4606      	mov	r6, r0
 80137b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80137b8:	3d01      	subs	r5, #1
 80137ba:	9310      	str	r3, [sp, #64]	; 0x40
 80137bc:	e771      	b.n	80136a2 <_dtoa_r+0x11a>
 80137be:	2301      	movs	r3, #1
 80137c0:	e7b6      	b.n	8013730 <_dtoa_r+0x1a8>
 80137c2:	900e      	str	r0, [sp, #56]	; 0x38
 80137c4:	e7b5      	b.n	8013732 <_dtoa_r+0x1aa>
 80137c6:	f1ca 0300 	rsb	r3, sl, #0
 80137ca:	9306      	str	r3, [sp, #24]
 80137cc:	2300      	movs	r3, #0
 80137ce:	eba8 080a 	sub.w	r8, r8, sl
 80137d2:	930d      	str	r3, [sp, #52]	; 0x34
 80137d4:	e7c2      	b.n	801375c <_dtoa_r+0x1d4>
 80137d6:	2300      	movs	r3, #0
 80137d8:	9308      	str	r3, [sp, #32]
 80137da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137dc:	2b00      	cmp	r3, #0
 80137de:	dc39      	bgt.n	8013854 <_dtoa_r+0x2cc>
 80137e0:	f04f 0901 	mov.w	r9, #1
 80137e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80137e8:	464b      	mov	r3, r9
 80137ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80137ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80137f0:	2200      	movs	r2, #0
 80137f2:	6042      	str	r2, [r0, #4]
 80137f4:	2204      	movs	r2, #4
 80137f6:	f102 0614 	add.w	r6, r2, #20
 80137fa:	429e      	cmp	r6, r3
 80137fc:	6841      	ldr	r1, [r0, #4]
 80137fe:	d92f      	bls.n	8013860 <_dtoa_r+0x2d8>
 8013800:	4620      	mov	r0, r4
 8013802:	f001 f85b 	bl	80148bc <_Balloc>
 8013806:	9000      	str	r0, [sp, #0]
 8013808:	2800      	cmp	r0, #0
 801380a:	d14b      	bne.n	80138a4 <_dtoa_r+0x31c>
 801380c:	4b24      	ldr	r3, [pc, #144]	; (80138a0 <_dtoa_r+0x318>)
 801380e:	4602      	mov	r2, r0
 8013810:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013814:	e6d1      	b.n	80135ba <_dtoa_r+0x32>
 8013816:	2301      	movs	r3, #1
 8013818:	e7de      	b.n	80137d8 <_dtoa_r+0x250>
 801381a:	2300      	movs	r3, #0
 801381c:	9308      	str	r3, [sp, #32]
 801381e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013820:	eb0a 0903 	add.w	r9, sl, r3
 8013824:	f109 0301 	add.w	r3, r9, #1
 8013828:	2b01      	cmp	r3, #1
 801382a:	9301      	str	r3, [sp, #4]
 801382c:	bfb8      	it	lt
 801382e:	2301      	movlt	r3, #1
 8013830:	e7dd      	b.n	80137ee <_dtoa_r+0x266>
 8013832:	2301      	movs	r3, #1
 8013834:	e7f2      	b.n	801381c <_dtoa_r+0x294>
 8013836:	2501      	movs	r5, #1
 8013838:	2300      	movs	r3, #0
 801383a:	9305      	str	r3, [sp, #20]
 801383c:	9508      	str	r5, [sp, #32]
 801383e:	f04f 39ff 	mov.w	r9, #4294967295
 8013842:	2200      	movs	r2, #0
 8013844:	f8cd 9004 	str.w	r9, [sp, #4]
 8013848:	2312      	movs	r3, #18
 801384a:	9209      	str	r2, [sp, #36]	; 0x24
 801384c:	e7cf      	b.n	80137ee <_dtoa_r+0x266>
 801384e:	2301      	movs	r3, #1
 8013850:	9308      	str	r3, [sp, #32]
 8013852:	e7f4      	b.n	801383e <_dtoa_r+0x2b6>
 8013854:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013858:	f8cd 9004 	str.w	r9, [sp, #4]
 801385c:	464b      	mov	r3, r9
 801385e:	e7c6      	b.n	80137ee <_dtoa_r+0x266>
 8013860:	3101      	adds	r1, #1
 8013862:	6041      	str	r1, [r0, #4]
 8013864:	0052      	lsls	r2, r2, #1
 8013866:	e7c6      	b.n	80137f6 <_dtoa_r+0x26e>
 8013868:	636f4361 	.word	0x636f4361
 801386c:	3fd287a7 	.word	0x3fd287a7
 8013870:	8b60c8b3 	.word	0x8b60c8b3
 8013874:	3fc68a28 	.word	0x3fc68a28
 8013878:	509f79fb 	.word	0x509f79fb
 801387c:	3fd34413 	.word	0x3fd34413
 8013880:	08029e88 	.word	0x08029e88
 8013884:	0802a04a 	.word	0x0802a04a
 8013888:	7ff00000 	.word	0x7ff00000
 801388c:	0802a046 	.word	0x0802a046
 8013890:	0802a03d 	.word	0x0802a03d
 8013894:	08029e0d 	.word	0x08029e0d
 8013898:	3ff80000 	.word	0x3ff80000
 801389c:	0802a1c0 	.word	0x0802a1c0
 80138a0:	0802a0a9 	.word	0x0802a0a9
 80138a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138a6:	9a00      	ldr	r2, [sp, #0]
 80138a8:	601a      	str	r2, [r3, #0]
 80138aa:	9b01      	ldr	r3, [sp, #4]
 80138ac:	2b0e      	cmp	r3, #14
 80138ae:	f200 80ad 	bhi.w	8013a0c <_dtoa_r+0x484>
 80138b2:	2d00      	cmp	r5, #0
 80138b4:	f000 80aa 	beq.w	8013a0c <_dtoa_r+0x484>
 80138b8:	f1ba 0f00 	cmp.w	sl, #0
 80138bc:	dd36      	ble.n	801392c <_dtoa_r+0x3a4>
 80138be:	4ac3      	ldr	r2, [pc, #780]	; (8013bcc <_dtoa_r+0x644>)
 80138c0:	f00a 030f 	and.w	r3, sl, #15
 80138c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80138c8:	ed93 7b00 	vldr	d7, [r3]
 80138cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80138d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80138d4:	eeb0 8a47 	vmov.f32	s16, s14
 80138d8:	eef0 8a67 	vmov.f32	s17, s15
 80138dc:	d016      	beq.n	801390c <_dtoa_r+0x384>
 80138de:	4bbc      	ldr	r3, [pc, #752]	; (8013bd0 <_dtoa_r+0x648>)
 80138e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80138e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80138e8:	f7ec ffc8 	bl	800087c <__aeabi_ddiv>
 80138ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80138f0:	f007 070f 	and.w	r7, r7, #15
 80138f4:	2503      	movs	r5, #3
 80138f6:	4eb6      	ldr	r6, [pc, #728]	; (8013bd0 <_dtoa_r+0x648>)
 80138f8:	b957      	cbnz	r7, 8013910 <_dtoa_r+0x388>
 80138fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80138fe:	ec53 2b18 	vmov	r2, r3, d8
 8013902:	f7ec ffbb 	bl	800087c <__aeabi_ddiv>
 8013906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801390a:	e029      	b.n	8013960 <_dtoa_r+0x3d8>
 801390c:	2502      	movs	r5, #2
 801390e:	e7f2      	b.n	80138f6 <_dtoa_r+0x36e>
 8013910:	07f9      	lsls	r1, r7, #31
 8013912:	d508      	bpl.n	8013926 <_dtoa_r+0x39e>
 8013914:	ec51 0b18 	vmov	r0, r1, d8
 8013918:	e9d6 2300 	ldrd	r2, r3, [r6]
 801391c:	f7ec fe84 	bl	8000628 <__aeabi_dmul>
 8013920:	ec41 0b18 	vmov	d8, r0, r1
 8013924:	3501      	adds	r5, #1
 8013926:	107f      	asrs	r7, r7, #1
 8013928:	3608      	adds	r6, #8
 801392a:	e7e5      	b.n	80138f8 <_dtoa_r+0x370>
 801392c:	f000 80a6 	beq.w	8013a7c <_dtoa_r+0x4f4>
 8013930:	f1ca 0600 	rsb	r6, sl, #0
 8013934:	4ba5      	ldr	r3, [pc, #660]	; (8013bcc <_dtoa_r+0x644>)
 8013936:	4fa6      	ldr	r7, [pc, #664]	; (8013bd0 <_dtoa_r+0x648>)
 8013938:	f006 020f 	and.w	r2, r6, #15
 801393c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013944:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013948:	f7ec fe6e 	bl	8000628 <__aeabi_dmul>
 801394c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013950:	1136      	asrs	r6, r6, #4
 8013952:	2300      	movs	r3, #0
 8013954:	2502      	movs	r5, #2
 8013956:	2e00      	cmp	r6, #0
 8013958:	f040 8085 	bne.w	8013a66 <_dtoa_r+0x4de>
 801395c:	2b00      	cmp	r3, #0
 801395e:	d1d2      	bne.n	8013906 <_dtoa_r+0x37e>
 8013960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013962:	2b00      	cmp	r3, #0
 8013964:	f000 808c 	beq.w	8013a80 <_dtoa_r+0x4f8>
 8013968:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801396c:	4b99      	ldr	r3, [pc, #612]	; (8013bd4 <_dtoa_r+0x64c>)
 801396e:	2200      	movs	r2, #0
 8013970:	4630      	mov	r0, r6
 8013972:	4639      	mov	r1, r7
 8013974:	f7ed f8ca 	bl	8000b0c <__aeabi_dcmplt>
 8013978:	2800      	cmp	r0, #0
 801397a:	f000 8081 	beq.w	8013a80 <_dtoa_r+0x4f8>
 801397e:	9b01      	ldr	r3, [sp, #4]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d07d      	beq.n	8013a80 <_dtoa_r+0x4f8>
 8013984:	f1b9 0f00 	cmp.w	r9, #0
 8013988:	dd3c      	ble.n	8013a04 <_dtoa_r+0x47c>
 801398a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801398e:	9307      	str	r3, [sp, #28]
 8013990:	2200      	movs	r2, #0
 8013992:	4b91      	ldr	r3, [pc, #580]	; (8013bd8 <_dtoa_r+0x650>)
 8013994:	4630      	mov	r0, r6
 8013996:	4639      	mov	r1, r7
 8013998:	f7ec fe46 	bl	8000628 <__aeabi_dmul>
 801399c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139a0:	3501      	adds	r5, #1
 80139a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80139a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80139aa:	4628      	mov	r0, r5
 80139ac:	f7ec fdd2 	bl	8000554 <__aeabi_i2d>
 80139b0:	4632      	mov	r2, r6
 80139b2:	463b      	mov	r3, r7
 80139b4:	f7ec fe38 	bl	8000628 <__aeabi_dmul>
 80139b8:	4b88      	ldr	r3, [pc, #544]	; (8013bdc <_dtoa_r+0x654>)
 80139ba:	2200      	movs	r2, #0
 80139bc:	f7ec fc7e 	bl	80002bc <__adddf3>
 80139c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80139c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139c8:	9303      	str	r3, [sp, #12]
 80139ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d15c      	bne.n	8013a8a <_dtoa_r+0x502>
 80139d0:	4b83      	ldr	r3, [pc, #524]	; (8013be0 <_dtoa_r+0x658>)
 80139d2:	2200      	movs	r2, #0
 80139d4:	4630      	mov	r0, r6
 80139d6:	4639      	mov	r1, r7
 80139d8:	f7ec fc6e 	bl	80002b8 <__aeabi_dsub>
 80139dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139e0:	4606      	mov	r6, r0
 80139e2:	460f      	mov	r7, r1
 80139e4:	f7ed f8b0 	bl	8000b48 <__aeabi_dcmpgt>
 80139e8:	2800      	cmp	r0, #0
 80139ea:	f040 8296 	bne.w	8013f1a <_dtoa_r+0x992>
 80139ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80139f2:	4630      	mov	r0, r6
 80139f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80139f8:	4639      	mov	r1, r7
 80139fa:	f7ed f887 	bl	8000b0c <__aeabi_dcmplt>
 80139fe:	2800      	cmp	r0, #0
 8013a00:	f040 8288 	bne.w	8013f14 <_dtoa_r+0x98c>
 8013a04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013a08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013a0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	f2c0 8158 	blt.w	8013cc4 <_dtoa_r+0x73c>
 8013a14:	f1ba 0f0e 	cmp.w	sl, #14
 8013a18:	f300 8154 	bgt.w	8013cc4 <_dtoa_r+0x73c>
 8013a1c:	4b6b      	ldr	r3, [pc, #428]	; (8013bcc <_dtoa_r+0x644>)
 8013a1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013a22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f280 80e3 	bge.w	8013bf4 <_dtoa_r+0x66c>
 8013a2e:	9b01      	ldr	r3, [sp, #4]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	f300 80df 	bgt.w	8013bf4 <_dtoa_r+0x66c>
 8013a36:	f040 826d 	bne.w	8013f14 <_dtoa_r+0x98c>
 8013a3a:	4b69      	ldr	r3, [pc, #420]	; (8013be0 <_dtoa_r+0x658>)
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	4640      	mov	r0, r8
 8013a40:	4649      	mov	r1, r9
 8013a42:	f7ec fdf1 	bl	8000628 <__aeabi_dmul>
 8013a46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013a4a:	f7ed f873 	bl	8000b34 <__aeabi_dcmpge>
 8013a4e:	9e01      	ldr	r6, [sp, #4]
 8013a50:	4637      	mov	r7, r6
 8013a52:	2800      	cmp	r0, #0
 8013a54:	f040 8243 	bne.w	8013ede <_dtoa_r+0x956>
 8013a58:	9d00      	ldr	r5, [sp, #0]
 8013a5a:	2331      	movs	r3, #49	; 0x31
 8013a5c:	f805 3b01 	strb.w	r3, [r5], #1
 8013a60:	f10a 0a01 	add.w	sl, sl, #1
 8013a64:	e23f      	b.n	8013ee6 <_dtoa_r+0x95e>
 8013a66:	07f2      	lsls	r2, r6, #31
 8013a68:	d505      	bpl.n	8013a76 <_dtoa_r+0x4ee>
 8013a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a6e:	f7ec fddb 	bl	8000628 <__aeabi_dmul>
 8013a72:	3501      	adds	r5, #1
 8013a74:	2301      	movs	r3, #1
 8013a76:	1076      	asrs	r6, r6, #1
 8013a78:	3708      	adds	r7, #8
 8013a7a:	e76c      	b.n	8013956 <_dtoa_r+0x3ce>
 8013a7c:	2502      	movs	r5, #2
 8013a7e:	e76f      	b.n	8013960 <_dtoa_r+0x3d8>
 8013a80:	9b01      	ldr	r3, [sp, #4]
 8013a82:	f8cd a01c 	str.w	sl, [sp, #28]
 8013a86:	930c      	str	r3, [sp, #48]	; 0x30
 8013a88:	e78d      	b.n	80139a6 <_dtoa_r+0x41e>
 8013a8a:	9900      	ldr	r1, [sp, #0]
 8013a8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013a8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a90:	4b4e      	ldr	r3, [pc, #312]	; (8013bcc <_dtoa_r+0x644>)
 8013a92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a96:	4401      	add	r1, r0
 8013a98:	9102      	str	r1, [sp, #8]
 8013a9a:	9908      	ldr	r1, [sp, #32]
 8013a9c:	eeb0 8a47 	vmov.f32	s16, s14
 8013aa0:	eef0 8a67 	vmov.f32	s17, s15
 8013aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013aa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013aac:	2900      	cmp	r1, #0
 8013aae:	d045      	beq.n	8013b3c <_dtoa_r+0x5b4>
 8013ab0:	494c      	ldr	r1, [pc, #304]	; (8013be4 <_dtoa_r+0x65c>)
 8013ab2:	2000      	movs	r0, #0
 8013ab4:	f7ec fee2 	bl	800087c <__aeabi_ddiv>
 8013ab8:	ec53 2b18 	vmov	r2, r3, d8
 8013abc:	f7ec fbfc 	bl	80002b8 <__aeabi_dsub>
 8013ac0:	9d00      	ldr	r5, [sp, #0]
 8013ac2:	ec41 0b18 	vmov	d8, r0, r1
 8013ac6:	4639      	mov	r1, r7
 8013ac8:	4630      	mov	r0, r6
 8013aca:	f7ed f85d 	bl	8000b88 <__aeabi_d2iz>
 8013ace:	900c      	str	r0, [sp, #48]	; 0x30
 8013ad0:	f7ec fd40 	bl	8000554 <__aeabi_i2d>
 8013ad4:	4602      	mov	r2, r0
 8013ad6:	460b      	mov	r3, r1
 8013ad8:	4630      	mov	r0, r6
 8013ada:	4639      	mov	r1, r7
 8013adc:	f7ec fbec 	bl	80002b8 <__aeabi_dsub>
 8013ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ae2:	3330      	adds	r3, #48	; 0x30
 8013ae4:	f805 3b01 	strb.w	r3, [r5], #1
 8013ae8:	ec53 2b18 	vmov	r2, r3, d8
 8013aec:	4606      	mov	r6, r0
 8013aee:	460f      	mov	r7, r1
 8013af0:	f7ed f80c 	bl	8000b0c <__aeabi_dcmplt>
 8013af4:	2800      	cmp	r0, #0
 8013af6:	d165      	bne.n	8013bc4 <_dtoa_r+0x63c>
 8013af8:	4632      	mov	r2, r6
 8013afa:	463b      	mov	r3, r7
 8013afc:	4935      	ldr	r1, [pc, #212]	; (8013bd4 <_dtoa_r+0x64c>)
 8013afe:	2000      	movs	r0, #0
 8013b00:	f7ec fbda 	bl	80002b8 <__aeabi_dsub>
 8013b04:	ec53 2b18 	vmov	r2, r3, d8
 8013b08:	f7ed f800 	bl	8000b0c <__aeabi_dcmplt>
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	f040 80b9 	bne.w	8013c84 <_dtoa_r+0x6fc>
 8013b12:	9b02      	ldr	r3, [sp, #8]
 8013b14:	429d      	cmp	r5, r3
 8013b16:	f43f af75 	beq.w	8013a04 <_dtoa_r+0x47c>
 8013b1a:	4b2f      	ldr	r3, [pc, #188]	; (8013bd8 <_dtoa_r+0x650>)
 8013b1c:	ec51 0b18 	vmov	r0, r1, d8
 8013b20:	2200      	movs	r2, #0
 8013b22:	f7ec fd81 	bl	8000628 <__aeabi_dmul>
 8013b26:	4b2c      	ldr	r3, [pc, #176]	; (8013bd8 <_dtoa_r+0x650>)
 8013b28:	ec41 0b18 	vmov	d8, r0, r1
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	4630      	mov	r0, r6
 8013b30:	4639      	mov	r1, r7
 8013b32:	f7ec fd79 	bl	8000628 <__aeabi_dmul>
 8013b36:	4606      	mov	r6, r0
 8013b38:	460f      	mov	r7, r1
 8013b3a:	e7c4      	b.n	8013ac6 <_dtoa_r+0x53e>
 8013b3c:	ec51 0b17 	vmov	r0, r1, d7
 8013b40:	f7ec fd72 	bl	8000628 <__aeabi_dmul>
 8013b44:	9b02      	ldr	r3, [sp, #8]
 8013b46:	9d00      	ldr	r5, [sp, #0]
 8013b48:	930c      	str	r3, [sp, #48]	; 0x30
 8013b4a:	ec41 0b18 	vmov	d8, r0, r1
 8013b4e:	4639      	mov	r1, r7
 8013b50:	4630      	mov	r0, r6
 8013b52:	f7ed f819 	bl	8000b88 <__aeabi_d2iz>
 8013b56:	9011      	str	r0, [sp, #68]	; 0x44
 8013b58:	f7ec fcfc 	bl	8000554 <__aeabi_i2d>
 8013b5c:	4602      	mov	r2, r0
 8013b5e:	460b      	mov	r3, r1
 8013b60:	4630      	mov	r0, r6
 8013b62:	4639      	mov	r1, r7
 8013b64:	f7ec fba8 	bl	80002b8 <__aeabi_dsub>
 8013b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013b6a:	3330      	adds	r3, #48	; 0x30
 8013b6c:	f805 3b01 	strb.w	r3, [r5], #1
 8013b70:	9b02      	ldr	r3, [sp, #8]
 8013b72:	429d      	cmp	r5, r3
 8013b74:	4606      	mov	r6, r0
 8013b76:	460f      	mov	r7, r1
 8013b78:	f04f 0200 	mov.w	r2, #0
 8013b7c:	d134      	bne.n	8013be8 <_dtoa_r+0x660>
 8013b7e:	4b19      	ldr	r3, [pc, #100]	; (8013be4 <_dtoa_r+0x65c>)
 8013b80:	ec51 0b18 	vmov	r0, r1, d8
 8013b84:	f7ec fb9a 	bl	80002bc <__adddf3>
 8013b88:	4602      	mov	r2, r0
 8013b8a:	460b      	mov	r3, r1
 8013b8c:	4630      	mov	r0, r6
 8013b8e:	4639      	mov	r1, r7
 8013b90:	f7ec ffda 	bl	8000b48 <__aeabi_dcmpgt>
 8013b94:	2800      	cmp	r0, #0
 8013b96:	d175      	bne.n	8013c84 <_dtoa_r+0x6fc>
 8013b98:	ec53 2b18 	vmov	r2, r3, d8
 8013b9c:	4911      	ldr	r1, [pc, #68]	; (8013be4 <_dtoa_r+0x65c>)
 8013b9e:	2000      	movs	r0, #0
 8013ba0:	f7ec fb8a 	bl	80002b8 <__aeabi_dsub>
 8013ba4:	4602      	mov	r2, r0
 8013ba6:	460b      	mov	r3, r1
 8013ba8:	4630      	mov	r0, r6
 8013baa:	4639      	mov	r1, r7
 8013bac:	f7ec ffae 	bl	8000b0c <__aeabi_dcmplt>
 8013bb0:	2800      	cmp	r0, #0
 8013bb2:	f43f af27 	beq.w	8013a04 <_dtoa_r+0x47c>
 8013bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013bb8:	1e6b      	subs	r3, r5, #1
 8013bba:	930c      	str	r3, [sp, #48]	; 0x30
 8013bbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013bc0:	2b30      	cmp	r3, #48	; 0x30
 8013bc2:	d0f8      	beq.n	8013bb6 <_dtoa_r+0x62e>
 8013bc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013bc8:	e04a      	b.n	8013c60 <_dtoa_r+0x6d8>
 8013bca:	bf00      	nop
 8013bcc:	0802a1c0 	.word	0x0802a1c0
 8013bd0:	0802a198 	.word	0x0802a198
 8013bd4:	3ff00000 	.word	0x3ff00000
 8013bd8:	40240000 	.word	0x40240000
 8013bdc:	401c0000 	.word	0x401c0000
 8013be0:	40140000 	.word	0x40140000
 8013be4:	3fe00000 	.word	0x3fe00000
 8013be8:	4baf      	ldr	r3, [pc, #700]	; (8013ea8 <_dtoa_r+0x920>)
 8013bea:	f7ec fd1d 	bl	8000628 <__aeabi_dmul>
 8013bee:	4606      	mov	r6, r0
 8013bf0:	460f      	mov	r7, r1
 8013bf2:	e7ac      	b.n	8013b4e <_dtoa_r+0x5c6>
 8013bf4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013bf8:	9d00      	ldr	r5, [sp, #0]
 8013bfa:	4642      	mov	r2, r8
 8013bfc:	464b      	mov	r3, r9
 8013bfe:	4630      	mov	r0, r6
 8013c00:	4639      	mov	r1, r7
 8013c02:	f7ec fe3b 	bl	800087c <__aeabi_ddiv>
 8013c06:	f7ec ffbf 	bl	8000b88 <__aeabi_d2iz>
 8013c0a:	9002      	str	r0, [sp, #8]
 8013c0c:	f7ec fca2 	bl	8000554 <__aeabi_i2d>
 8013c10:	4642      	mov	r2, r8
 8013c12:	464b      	mov	r3, r9
 8013c14:	f7ec fd08 	bl	8000628 <__aeabi_dmul>
 8013c18:	4602      	mov	r2, r0
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	4639      	mov	r1, r7
 8013c20:	f7ec fb4a 	bl	80002b8 <__aeabi_dsub>
 8013c24:	9e02      	ldr	r6, [sp, #8]
 8013c26:	9f01      	ldr	r7, [sp, #4]
 8013c28:	3630      	adds	r6, #48	; 0x30
 8013c2a:	f805 6b01 	strb.w	r6, [r5], #1
 8013c2e:	9e00      	ldr	r6, [sp, #0]
 8013c30:	1bae      	subs	r6, r5, r6
 8013c32:	42b7      	cmp	r7, r6
 8013c34:	4602      	mov	r2, r0
 8013c36:	460b      	mov	r3, r1
 8013c38:	d137      	bne.n	8013caa <_dtoa_r+0x722>
 8013c3a:	f7ec fb3f 	bl	80002bc <__adddf3>
 8013c3e:	4642      	mov	r2, r8
 8013c40:	464b      	mov	r3, r9
 8013c42:	4606      	mov	r6, r0
 8013c44:	460f      	mov	r7, r1
 8013c46:	f7ec ff7f 	bl	8000b48 <__aeabi_dcmpgt>
 8013c4a:	b9c8      	cbnz	r0, 8013c80 <_dtoa_r+0x6f8>
 8013c4c:	4642      	mov	r2, r8
 8013c4e:	464b      	mov	r3, r9
 8013c50:	4630      	mov	r0, r6
 8013c52:	4639      	mov	r1, r7
 8013c54:	f7ec ff50 	bl	8000af8 <__aeabi_dcmpeq>
 8013c58:	b110      	cbz	r0, 8013c60 <_dtoa_r+0x6d8>
 8013c5a:	9b02      	ldr	r3, [sp, #8]
 8013c5c:	07d9      	lsls	r1, r3, #31
 8013c5e:	d40f      	bmi.n	8013c80 <_dtoa_r+0x6f8>
 8013c60:	4620      	mov	r0, r4
 8013c62:	4659      	mov	r1, fp
 8013c64:	f000 fe6a 	bl	801493c <_Bfree>
 8013c68:	2300      	movs	r3, #0
 8013c6a:	702b      	strb	r3, [r5, #0]
 8013c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c6e:	f10a 0001 	add.w	r0, sl, #1
 8013c72:	6018      	str	r0, [r3, #0]
 8013c74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	f43f acd8 	beq.w	801362c <_dtoa_r+0xa4>
 8013c7c:	601d      	str	r5, [r3, #0]
 8013c7e:	e4d5      	b.n	801362c <_dtoa_r+0xa4>
 8013c80:	f8cd a01c 	str.w	sl, [sp, #28]
 8013c84:	462b      	mov	r3, r5
 8013c86:	461d      	mov	r5, r3
 8013c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c8c:	2a39      	cmp	r2, #57	; 0x39
 8013c8e:	d108      	bne.n	8013ca2 <_dtoa_r+0x71a>
 8013c90:	9a00      	ldr	r2, [sp, #0]
 8013c92:	429a      	cmp	r2, r3
 8013c94:	d1f7      	bne.n	8013c86 <_dtoa_r+0x6fe>
 8013c96:	9a07      	ldr	r2, [sp, #28]
 8013c98:	9900      	ldr	r1, [sp, #0]
 8013c9a:	3201      	adds	r2, #1
 8013c9c:	9207      	str	r2, [sp, #28]
 8013c9e:	2230      	movs	r2, #48	; 0x30
 8013ca0:	700a      	strb	r2, [r1, #0]
 8013ca2:	781a      	ldrb	r2, [r3, #0]
 8013ca4:	3201      	adds	r2, #1
 8013ca6:	701a      	strb	r2, [r3, #0]
 8013ca8:	e78c      	b.n	8013bc4 <_dtoa_r+0x63c>
 8013caa:	4b7f      	ldr	r3, [pc, #508]	; (8013ea8 <_dtoa_r+0x920>)
 8013cac:	2200      	movs	r2, #0
 8013cae:	f7ec fcbb 	bl	8000628 <__aeabi_dmul>
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	4606      	mov	r6, r0
 8013cb8:	460f      	mov	r7, r1
 8013cba:	f7ec ff1d 	bl	8000af8 <__aeabi_dcmpeq>
 8013cbe:	2800      	cmp	r0, #0
 8013cc0:	d09b      	beq.n	8013bfa <_dtoa_r+0x672>
 8013cc2:	e7cd      	b.n	8013c60 <_dtoa_r+0x6d8>
 8013cc4:	9a08      	ldr	r2, [sp, #32]
 8013cc6:	2a00      	cmp	r2, #0
 8013cc8:	f000 80c4 	beq.w	8013e54 <_dtoa_r+0x8cc>
 8013ccc:	9a05      	ldr	r2, [sp, #20]
 8013cce:	2a01      	cmp	r2, #1
 8013cd0:	f300 80a8 	bgt.w	8013e24 <_dtoa_r+0x89c>
 8013cd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013cd6:	2a00      	cmp	r2, #0
 8013cd8:	f000 80a0 	beq.w	8013e1c <_dtoa_r+0x894>
 8013cdc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013ce0:	9e06      	ldr	r6, [sp, #24]
 8013ce2:	4645      	mov	r5, r8
 8013ce4:	9a04      	ldr	r2, [sp, #16]
 8013ce6:	2101      	movs	r1, #1
 8013ce8:	441a      	add	r2, r3
 8013cea:	4620      	mov	r0, r4
 8013cec:	4498      	add	r8, r3
 8013cee:	9204      	str	r2, [sp, #16]
 8013cf0:	f000 ff2a 	bl	8014b48 <__i2b>
 8013cf4:	4607      	mov	r7, r0
 8013cf6:	2d00      	cmp	r5, #0
 8013cf8:	dd0b      	ble.n	8013d12 <_dtoa_r+0x78a>
 8013cfa:	9b04      	ldr	r3, [sp, #16]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	dd08      	ble.n	8013d12 <_dtoa_r+0x78a>
 8013d00:	42ab      	cmp	r3, r5
 8013d02:	9a04      	ldr	r2, [sp, #16]
 8013d04:	bfa8      	it	ge
 8013d06:	462b      	movge	r3, r5
 8013d08:	eba8 0803 	sub.w	r8, r8, r3
 8013d0c:	1aed      	subs	r5, r5, r3
 8013d0e:	1ad3      	subs	r3, r2, r3
 8013d10:	9304      	str	r3, [sp, #16]
 8013d12:	9b06      	ldr	r3, [sp, #24]
 8013d14:	b1fb      	cbz	r3, 8013d56 <_dtoa_r+0x7ce>
 8013d16:	9b08      	ldr	r3, [sp, #32]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	f000 809f 	beq.w	8013e5c <_dtoa_r+0x8d4>
 8013d1e:	2e00      	cmp	r6, #0
 8013d20:	dd11      	ble.n	8013d46 <_dtoa_r+0x7be>
 8013d22:	4639      	mov	r1, r7
 8013d24:	4632      	mov	r2, r6
 8013d26:	4620      	mov	r0, r4
 8013d28:	f000 ffca 	bl	8014cc0 <__pow5mult>
 8013d2c:	465a      	mov	r2, fp
 8013d2e:	4601      	mov	r1, r0
 8013d30:	4607      	mov	r7, r0
 8013d32:	4620      	mov	r0, r4
 8013d34:	f000 ff1e 	bl	8014b74 <__multiply>
 8013d38:	4659      	mov	r1, fp
 8013d3a:	9007      	str	r0, [sp, #28]
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	f000 fdfd 	bl	801493c <_Bfree>
 8013d42:	9b07      	ldr	r3, [sp, #28]
 8013d44:	469b      	mov	fp, r3
 8013d46:	9b06      	ldr	r3, [sp, #24]
 8013d48:	1b9a      	subs	r2, r3, r6
 8013d4a:	d004      	beq.n	8013d56 <_dtoa_r+0x7ce>
 8013d4c:	4659      	mov	r1, fp
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f000 ffb6 	bl	8014cc0 <__pow5mult>
 8013d54:	4683      	mov	fp, r0
 8013d56:	2101      	movs	r1, #1
 8013d58:	4620      	mov	r0, r4
 8013d5a:	f000 fef5 	bl	8014b48 <__i2b>
 8013d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	4606      	mov	r6, r0
 8013d64:	dd7c      	ble.n	8013e60 <_dtoa_r+0x8d8>
 8013d66:	461a      	mov	r2, r3
 8013d68:	4601      	mov	r1, r0
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	f000 ffa8 	bl	8014cc0 <__pow5mult>
 8013d70:	9b05      	ldr	r3, [sp, #20]
 8013d72:	2b01      	cmp	r3, #1
 8013d74:	4606      	mov	r6, r0
 8013d76:	dd76      	ble.n	8013e66 <_dtoa_r+0x8de>
 8013d78:	2300      	movs	r3, #0
 8013d7a:	9306      	str	r3, [sp, #24]
 8013d7c:	6933      	ldr	r3, [r6, #16]
 8013d7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013d82:	6918      	ldr	r0, [r3, #16]
 8013d84:	f000 fe90 	bl	8014aa8 <__hi0bits>
 8013d88:	f1c0 0020 	rsb	r0, r0, #32
 8013d8c:	9b04      	ldr	r3, [sp, #16]
 8013d8e:	4418      	add	r0, r3
 8013d90:	f010 001f 	ands.w	r0, r0, #31
 8013d94:	f000 8086 	beq.w	8013ea4 <_dtoa_r+0x91c>
 8013d98:	f1c0 0320 	rsb	r3, r0, #32
 8013d9c:	2b04      	cmp	r3, #4
 8013d9e:	dd7f      	ble.n	8013ea0 <_dtoa_r+0x918>
 8013da0:	f1c0 001c 	rsb	r0, r0, #28
 8013da4:	9b04      	ldr	r3, [sp, #16]
 8013da6:	4403      	add	r3, r0
 8013da8:	4480      	add	r8, r0
 8013daa:	4405      	add	r5, r0
 8013dac:	9304      	str	r3, [sp, #16]
 8013dae:	f1b8 0f00 	cmp.w	r8, #0
 8013db2:	dd05      	ble.n	8013dc0 <_dtoa_r+0x838>
 8013db4:	4659      	mov	r1, fp
 8013db6:	4642      	mov	r2, r8
 8013db8:	4620      	mov	r0, r4
 8013dba:	f000 ffdb 	bl	8014d74 <__lshift>
 8013dbe:	4683      	mov	fp, r0
 8013dc0:	9b04      	ldr	r3, [sp, #16]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	dd05      	ble.n	8013dd2 <_dtoa_r+0x84a>
 8013dc6:	4631      	mov	r1, r6
 8013dc8:	461a      	mov	r2, r3
 8013dca:	4620      	mov	r0, r4
 8013dcc:	f000 ffd2 	bl	8014d74 <__lshift>
 8013dd0:	4606      	mov	r6, r0
 8013dd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d069      	beq.n	8013eac <_dtoa_r+0x924>
 8013dd8:	4631      	mov	r1, r6
 8013dda:	4658      	mov	r0, fp
 8013ddc:	f001 f836 	bl	8014e4c <__mcmp>
 8013de0:	2800      	cmp	r0, #0
 8013de2:	da63      	bge.n	8013eac <_dtoa_r+0x924>
 8013de4:	2300      	movs	r3, #0
 8013de6:	4659      	mov	r1, fp
 8013de8:	220a      	movs	r2, #10
 8013dea:	4620      	mov	r0, r4
 8013dec:	f000 fdc8 	bl	8014980 <__multadd>
 8013df0:	9b08      	ldr	r3, [sp, #32]
 8013df2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013df6:	4683      	mov	fp, r0
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	f000 818f 	beq.w	801411c <_dtoa_r+0xb94>
 8013dfe:	4639      	mov	r1, r7
 8013e00:	2300      	movs	r3, #0
 8013e02:	220a      	movs	r2, #10
 8013e04:	4620      	mov	r0, r4
 8013e06:	f000 fdbb 	bl	8014980 <__multadd>
 8013e0a:	f1b9 0f00 	cmp.w	r9, #0
 8013e0e:	4607      	mov	r7, r0
 8013e10:	f300 808e 	bgt.w	8013f30 <_dtoa_r+0x9a8>
 8013e14:	9b05      	ldr	r3, [sp, #20]
 8013e16:	2b02      	cmp	r3, #2
 8013e18:	dc50      	bgt.n	8013ebc <_dtoa_r+0x934>
 8013e1a:	e089      	b.n	8013f30 <_dtoa_r+0x9a8>
 8013e1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013e22:	e75d      	b.n	8013ce0 <_dtoa_r+0x758>
 8013e24:	9b01      	ldr	r3, [sp, #4]
 8013e26:	1e5e      	subs	r6, r3, #1
 8013e28:	9b06      	ldr	r3, [sp, #24]
 8013e2a:	42b3      	cmp	r3, r6
 8013e2c:	bfbf      	itttt	lt
 8013e2e:	9b06      	ldrlt	r3, [sp, #24]
 8013e30:	9606      	strlt	r6, [sp, #24]
 8013e32:	1af2      	sublt	r2, r6, r3
 8013e34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8013e36:	bfb6      	itet	lt
 8013e38:	189b      	addlt	r3, r3, r2
 8013e3a:	1b9e      	subge	r6, r3, r6
 8013e3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8013e3e:	9b01      	ldr	r3, [sp, #4]
 8013e40:	bfb8      	it	lt
 8013e42:	2600      	movlt	r6, #0
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	bfb5      	itete	lt
 8013e48:	eba8 0503 	sublt.w	r5, r8, r3
 8013e4c:	9b01      	ldrge	r3, [sp, #4]
 8013e4e:	2300      	movlt	r3, #0
 8013e50:	4645      	movge	r5, r8
 8013e52:	e747      	b.n	8013ce4 <_dtoa_r+0x75c>
 8013e54:	9e06      	ldr	r6, [sp, #24]
 8013e56:	9f08      	ldr	r7, [sp, #32]
 8013e58:	4645      	mov	r5, r8
 8013e5a:	e74c      	b.n	8013cf6 <_dtoa_r+0x76e>
 8013e5c:	9a06      	ldr	r2, [sp, #24]
 8013e5e:	e775      	b.n	8013d4c <_dtoa_r+0x7c4>
 8013e60:	9b05      	ldr	r3, [sp, #20]
 8013e62:	2b01      	cmp	r3, #1
 8013e64:	dc18      	bgt.n	8013e98 <_dtoa_r+0x910>
 8013e66:	9b02      	ldr	r3, [sp, #8]
 8013e68:	b9b3      	cbnz	r3, 8013e98 <_dtoa_r+0x910>
 8013e6a:	9b03      	ldr	r3, [sp, #12]
 8013e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013e70:	b9a3      	cbnz	r3, 8013e9c <_dtoa_r+0x914>
 8013e72:	9b03      	ldr	r3, [sp, #12]
 8013e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013e78:	0d1b      	lsrs	r3, r3, #20
 8013e7a:	051b      	lsls	r3, r3, #20
 8013e7c:	b12b      	cbz	r3, 8013e8a <_dtoa_r+0x902>
 8013e7e:	9b04      	ldr	r3, [sp, #16]
 8013e80:	3301      	adds	r3, #1
 8013e82:	9304      	str	r3, [sp, #16]
 8013e84:	f108 0801 	add.w	r8, r8, #1
 8013e88:	2301      	movs	r3, #1
 8013e8a:	9306      	str	r3, [sp, #24]
 8013e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	f47f af74 	bne.w	8013d7c <_dtoa_r+0x7f4>
 8013e94:	2001      	movs	r0, #1
 8013e96:	e779      	b.n	8013d8c <_dtoa_r+0x804>
 8013e98:	2300      	movs	r3, #0
 8013e9a:	e7f6      	b.n	8013e8a <_dtoa_r+0x902>
 8013e9c:	9b02      	ldr	r3, [sp, #8]
 8013e9e:	e7f4      	b.n	8013e8a <_dtoa_r+0x902>
 8013ea0:	d085      	beq.n	8013dae <_dtoa_r+0x826>
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	301c      	adds	r0, #28
 8013ea6:	e77d      	b.n	8013da4 <_dtoa_r+0x81c>
 8013ea8:	40240000 	.word	0x40240000
 8013eac:	9b01      	ldr	r3, [sp, #4]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	dc38      	bgt.n	8013f24 <_dtoa_r+0x99c>
 8013eb2:	9b05      	ldr	r3, [sp, #20]
 8013eb4:	2b02      	cmp	r3, #2
 8013eb6:	dd35      	ble.n	8013f24 <_dtoa_r+0x99c>
 8013eb8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013ebc:	f1b9 0f00 	cmp.w	r9, #0
 8013ec0:	d10d      	bne.n	8013ede <_dtoa_r+0x956>
 8013ec2:	4631      	mov	r1, r6
 8013ec4:	464b      	mov	r3, r9
 8013ec6:	2205      	movs	r2, #5
 8013ec8:	4620      	mov	r0, r4
 8013eca:	f000 fd59 	bl	8014980 <__multadd>
 8013ece:	4601      	mov	r1, r0
 8013ed0:	4606      	mov	r6, r0
 8013ed2:	4658      	mov	r0, fp
 8013ed4:	f000 ffba 	bl	8014e4c <__mcmp>
 8013ed8:	2800      	cmp	r0, #0
 8013eda:	f73f adbd 	bgt.w	8013a58 <_dtoa_r+0x4d0>
 8013ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ee0:	9d00      	ldr	r5, [sp, #0]
 8013ee2:	ea6f 0a03 	mvn.w	sl, r3
 8013ee6:	f04f 0800 	mov.w	r8, #0
 8013eea:	4631      	mov	r1, r6
 8013eec:	4620      	mov	r0, r4
 8013eee:	f000 fd25 	bl	801493c <_Bfree>
 8013ef2:	2f00      	cmp	r7, #0
 8013ef4:	f43f aeb4 	beq.w	8013c60 <_dtoa_r+0x6d8>
 8013ef8:	f1b8 0f00 	cmp.w	r8, #0
 8013efc:	d005      	beq.n	8013f0a <_dtoa_r+0x982>
 8013efe:	45b8      	cmp	r8, r7
 8013f00:	d003      	beq.n	8013f0a <_dtoa_r+0x982>
 8013f02:	4641      	mov	r1, r8
 8013f04:	4620      	mov	r0, r4
 8013f06:	f000 fd19 	bl	801493c <_Bfree>
 8013f0a:	4639      	mov	r1, r7
 8013f0c:	4620      	mov	r0, r4
 8013f0e:	f000 fd15 	bl	801493c <_Bfree>
 8013f12:	e6a5      	b.n	8013c60 <_dtoa_r+0x6d8>
 8013f14:	2600      	movs	r6, #0
 8013f16:	4637      	mov	r7, r6
 8013f18:	e7e1      	b.n	8013ede <_dtoa_r+0x956>
 8013f1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013f1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013f20:	4637      	mov	r7, r6
 8013f22:	e599      	b.n	8013a58 <_dtoa_r+0x4d0>
 8013f24:	9b08      	ldr	r3, [sp, #32]
 8013f26:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	f000 80fd 	beq.w	801412a <_dtoa_r+0xba2>
 8013f30:	2d00      	cmp	r5, #0
 8013f32:	dd05      	ble.n	8013f40 <_dtoa_r+0x9b8>
 8013f34:	4639      	mov	r1, r7
 8013f36:	462a      	mov	r2, r5
 8013f38:	4620      	mov	r0, r4
 8013f3a:	f000 ff1b 	bl	8014d74 <__lshift>
 8013f3e:	4607      	mov	r7, r0
 8013f40:	9b06      	ldr	r3, [sp, #24]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d05c      	beq.n	8014000 <_dtoa_r+0xa78>
 8013f46:	6879      	ldr	r1, [r7, #4]
 8013f48:	4620      	mov	r0, r4
 8013f4a:	f000 fcb7 	bl	80148bc <_Balloc>
 8013f4e:	4605      	mov	r5, r0
 8013f50:	b928      	cbnz	r0, 8013f5e <_dtoa_r+0x9d6>
 8013f52:	4b80      	ldr	r3, [pc, #512]	; (8014154 <_dtoa_r+0xbcc>)
 8013f54:	4602      	mov	r2, r0
 8013f56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013f5a:	f7ff bb2e 	b.w	80135ba <_dtoa_r+0x32>
 8013f5e:	693a      	ldr	r2, [r7, #16]
 8013f60:	3202      	adds	r2, #2
 8013f62:	0092      	lsls	r2, r2, #2
 8013f64:	f107 010c 	add.w	r1, r7, #12
 8013f68:	300c      	adds	r0, #12
 8013f6a:	f000 fc99 	bl	80148a0 <memcpy>
 8013f6e:	2201      	movs	r2, #1
 8013f70:	4629      	mov	r1, r5
 8013f72:	4620      	mov	r0, r4
 8013f74:	f000 fefe 	bl	8014d74 <__lshift>
 8013f78:	9b00      	ldr	r3, [sp, #0]
 8013f7a:	3301      	adds	r3, #1
 8013f7c:	9301      	str	r3, [sp, #4]
 8013f7e:	9b00      	ldr	r3, [sp, #0]
 8013f80:	444b      	add	r3, r9
 8013f82:	9307      	str	r3, [sp, #28]
 8013f84:	9b02      	ldr	r3, [sp, #8]
 8013f86:	f003 0301 	and.w	r3, r3, #1
 8013f8a:	46b8      	mov	r8, r7
 8013f8c:	9306      	str	r3, [sp, #24]
 8013f8e:	4607      	mov	r7, r0
 8013f90:	9b01      	ldr	r3, [sp, #4]
 8013f92:	4631      	mov	r1, r6
 8013f94:	3b01      	subs	r3, #1
 8013f96:	4658      	mov	r0, fp
 8013f98:	9302      	str	r3, [sp, #8]
 8013f9a:	f7ff fa67 	bl	801346c <quorem>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	3330      	adds	r3, #48	; 0x30
 8013fa2:	9004      	str	r0, [sp, #16]
 8013fa4:	4641      	mov	r1, r8
 8013fa6:	4658      	mov	r0, fp
 8013fa8:	9308      	str	r3, [sp, #32]
 8013faa:	f000 ff4f 	bl	8014e4c <__mcmp>
 8013fae:	463a      	mov	r2, r7
 8013fb0:	4681      	mov	r9, r0
 8013fb2:	4631      	mov	r1, r6
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	f000 ff65 	bl	8014e84 <__mdiff>
 8013fba:	68c2      	ldr	r2, [r0, #12]
 8013fbc:	9b08      	ldr	r3, [sp, #32]
 8013fbe:	4605      	mov	r5, r0
 8013fc0:	bb02      	cbnz	r2, 8014004 <_dtoa_r+0xa7c>
 8013fc2:	4601      	mov	r1, r0
 8013fc4:	4658      	mov	r0, fp
 8013fc6:	f000 ff41 	bl	8014e4c <__mcmp>
 8013fca:	9b08      	ldr	r3, [sp, #32]
 8013fcc:	4602      	mov	r2, r0
 8013fce:	4629      	mov	r1, r5
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8013fd6:	f000 fcb1 	bl	801493c <_Bfree>
 8013fda:	9b05      	ldr	r3, [sp, #20]
 8013fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013fde:	9d01      	ldr	r5, [sp, #4]
 8013fe0:	ea43 0102 	orr.w	r1, r3, r2
 8013fe4:	9b06      	ldr	r3, [sp, #24]
 8013fe6:	430b      	orrs	r3, r1
 8013fe8:	9b08      	ldr	r3, [sp, #32]
 8013fea:	d10d      	bne.n	8014008 <_dtoa_r+0xa80>
 8013fec:	2b39      	cmp	r3, #57	; 0x39
 8013fee:	d029      	beq.n	8014044 <_dtoa_r+0xabc>
 8013ff0:	f1b9 0f00 	cmp.w	r9, #0
 8013ff4:	dd01      	ble.n	8013ffa <_dtoa_r+0xa72>
 8013ff6:	9b04      	ldr	r3, [sp, #16]
 8013ff8:	3331      	adds	r3, #49	; 0x31
 8013ffa:	9a02      	ldr	r2, [sp, #8]
 8013ffc:	7013      	strb	r3, [r2, #0]
 8013ffe:	e774      	b.n	8013eea <_dtoa_r+0x962>
 8014000:	4638      	mov	r0, r7
 8014002:	e7b9      	b.n	8013f78 <_dtoa_r+0x9f0>
 8014004:	2201      	movs	r2, #1
 8014006:	e7e2      	b.n	8013fce <_dtoa_r+0xa46>
 8014008:	f1b9 0f00 	cmp.w	r9, #0
 801400c:	db06      	blt.n	801401c <_dtoa_r+0xa94>
 801400e:	9905      	ldr	r1, [sp, #20]
 8014010:	ea41 0909 	orr.w	r9, r1, r9
 8014014:	9906      	ldr	r1, [sp, #24]
 8014016:	ea59 0101 	orrs.w	r1, r9, r1
 801401a:	d120      	bne.n	801405e <_dtoa_r+0xad6>
 801401c:	2a00      	cmp	r2, #0
 801401e:	ddec      	ble.n	8013ffa <_dtoa_r+0xa72>
 8014020:	4659      	mov	r1, fp
 8014022:	2201      	movs	r2, #1
 8014024:	4620      	mov	r0, r4
 8014026:	9301      	str	r3, [sp, #4]
 8014028:	f000 fea4 	bl	8014d74 <__lshift>
 801402c:	4631      	mov	r1, r6
 801402e:	4683      	mov	fp, r0
 8014030:	f000 ff0c 	bl	8014e4c <__mcmp>
 8014034:	2800      	cmp	r0, #0
 8014036:	9b01      	ldr	r3, [sp, #4]
 8014038:	dc02      	bgt.n	8014040 <_dtoa_r+0xab8>
 801403a:	d1de      	bne.n	8013ffa <_dtoa_r+0xa72>
 801403c:	07da      	lsls	r2, r3, #31
 801403e:	d5dc      	bpl.n	8013ffa <_dtoa_r+0xa72>
 8014040:	2b39      	cmp	r3, #57	; 0x39
 8014042:	d1d8      	bne.n	8013ff6 <_dtoa_r+0xa6e>
 8014044:	9a02      	ldr	r2, [sp, #8]
 8014046:	2339      	movs	r3, #57	; 0x39
 8014048:	7013      	strb	r3, [r2, #0]
 801404a:	462b      	mov	r3, r5
 801404c:	461d      	mov	r5, r3
 801404e:	3b01      	subs	r3, #1
 8014050:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014054:	2a39      	cmp	r2, #57	; 0x39
 8014056:	d050      	beq.n	80140fa <_dtoa_r+0xb72>
 8014058:	3201      	adds	r2, #1
 801405a:	701a      	strb	r2, [r3, #0]
 801405c:	e745      	b.n	8013eea <_dtoa_r+0x962>
 801405e:	2a00      	cmp	r2, #0
 8014060:	dd03      	ble.n	801406a <_dtoa_r+0xae2>
 8014062:	2b39      	cmp	r3, #57	; 0x39
 8014064:	d0ee      	beq.n	8014044 <_dtoa_r+0xabc>
 8014066:	3301      	adds	r3, #1
 8014068:	e7c7      	b.n	8013ffa <_dtoa_r+0xa72>
 801406a:	9a01      	ldr	r2, [sp, #4]
 801406c:	9907      	ldr	r1, [sp, #28]
 801406e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014072:	428a      	cmp	r2, r1
 8014074:	d02a      	beq.n	80140cc <_dtoa_r+0xb44>
 8014076:	4659      	mov	r1, fp
 8014078:	2300      	movs	r3, #0
 801407a:	220a      	movs	r2, #10
 801407c:	4620      	mov	r0, r4
 801407e:	f000 fc7f 	bl	8014980 <__multadd>
 8014082:	45b8      	cmp	r8, r7
 8014084:	4683      	mov	fp, r0
 8014086:	f04f 0300 	mov.w	r3, #0
 801408a:	f04f 020a 	mov.w	r2, #10
 801408e:	4641      	mov	r1, r8
 8014090:	4620      	mov	r0, r4
 8014092:	d107      	bne.n	80140a4 <_dtoa_r+0xb1c>
 8014094:	f000 fc74 	bl	8014980 <__multadd>
 8014098:	4680      	mov	r8, r0
 801409a:	4607      	mov	r7, r0
 801409c:	9b01      	ldr	r3, [sp, #4]
 801409e:	3301      	adds	r3, #1
 80140a0:	9301      	str	r3, [sp, #4]
 80140a2:	e775      	b.n	8013f90 <_dtoa_r+0xa08>
 80140a4:	f000 fc6c 	bl	8014980 <__multadd>
 80140a8:	4639      	mov	r1, r7
 80140aa:	4680      	mov	r8, r0
 80140ac:	2300      	movs	r3, #0
 80140ae:	220a      	movs	r2, #10
 80140b0:	4620      	mov	r0, r4
 80140b2:	f000 fc65 	bl	8014980 <__multadd>
 80140b6:	4607      	mov	r7, r0
 80140b8:	e7f0      	b.n	801409c <_dtoa_r+0xb14>
 80140ba:	f1b9 0f00 	cmp.w	r9, #0
 80140be:	9a00      	ldr	r2, [sp, #0]
 80140c0:	bfcc      	ite	gt
 80140c2:	464d      	movgt	r5, r9
 80140c4:	2501      	movle	r5, #1
 80140c6:	4415      	add	r5, r2
 80140c8:	f04f 0800 	mov.w	r8, #0
 80140cc:	4659      	mov	r1, fp
 80140ce:	2201      	movs	r2, #1
 80140d0:	4620      	mov	r0, r4
 80140d2:	9301      	str	r3, [sp, #4]
 80140d4:	f000 fe4e 	bl	8014d74 <__lshift>
 80140d8:	4631      	mov	r1, r6
 80140da:	4683      	mov	fp, r0
 80140dc:	f000 feb6 	bl	8014e4c <__mcmp>
 80140e0:	2800      	cmp	r0, #0
 80140e2:	dcb2      	bgt.n	801404a <_dtoa_r+0xac2>
 80140e4:	d102      	bne.n	80140ec <_dtoa_r+0xb64>
 80140e6:	9b01      	ldr	r3, [sp, #4]
 80140e8:	07db      	lsls	r3, r3, #31
 80140ea:	d4ae      	bmi.n	801404a <_dtoa_r+0xac2>
 80140ec:	462b      	mov	r3, r5
 80140ee:	461d      	mov	r5, r3
 80140f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80140f4:	2a30      	cmp	r2, #48	; 0x30
 80140f6:	d0fa      	beq.n	80140ee <_dtoa_r+0xb66>
 80140f8:	e6f7      	b.n	8013eea <_dtoa_r+0x962>
 80140fa:	9a00      	ldr	r2, [sp, #0]
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d1a5      	bne.n	801404c <_dtoa_r+0xac4>
 8014100:	f10a 0a01 	add.w	sl, sl, #1
 8014104:	2331      	movs	r3, #49	; 0x31
 8014106:	e779      	b.n	8013ffc <_dtoa_r+0xa74>
 8014108:	4b13      	ldr	r3, [pc, #76]	; (8014158 <_dtoa_r+0xbd0>)
 801410a:	f7ff baaf 	b.w	801366c <_dtoa_r+0xe4>
 801410e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014110:	2b00      	cmp	r3, #0
 8014112:	f47f aa86 	bne.w	8013622 <_dtoa_r+0x9a>
 8014116:	4b11      	ldr	r3, [pc, #68]	; (801415c <_dtoa_r+0xbd4>)
 8014118:	f7ff baa8 	b.w	801366c <_dtoa_r+0xe4>
 801411c:	f1b9 0f00 	cmp.w	r9, #0
 8014120:	dc03      	bgt.n	801412a <_dtoa_r+0xba2>
 8014122:	9b05      	ldr	r3, [sp, #20]
 8014124:	2b02      	cmp	r3, #2
 8014126:	f73f aec9 	bgt.w	8013ebc <_dtoa_r+0x934>
 801412a:	9d00      	ldr	r5, [sp, #0]
 801412c:	4631      	mov	r1, r6
 801412e:	4658      	mov	r0, fp
 8014130:	f7ff f99c 	bl	801346c <quorem>
 8014134:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014138:	f805 3b01 	strb.w	r3, [r5], #1
 801413c:	9a00      	ldr	r2, [sp, #0]
 801413e:	1aaa      	subs	r2, r5, r2
 8014140:	4591      	cmp	r9, r2
 8014142:	ddba      	ble.n	80140ba <_dtoa_r+0xb32>
 8014144:	4659      	mov	r1, fp
 8014146:	2300      	movs	r3, #0
 8014148:	220a      	movs	r2, #10
 801414a:	4620      	mov	r0, r4
 801414c:	f000 fc18 	bl	8014980 <__multadd>
 8014150:	4683      	mov	fp, r0
 8014152:	e7eb      	b.n	801412c <_dtoa_r+0xba4>
 8014154:	0802a0a9 	.word	0x0802a0a9
 8014158:	08029e0c 	.word	0x08029e0c
 801415c:	0802a03d 	.word	0x0802a03d

08014160 <fiprintf>:
 8014160:	b40e      	push	{r1, r2, r3}
 8014162:	b503      	push	{r0, r1, lr}
 8014164:	4601      	mov	r1, r0
 8014166:	ab03      	add	r3, sp, #12
 8014168:	4805      	ldr	r0, [pc, #20]	; (8014180 <fiprintf+0x20>)
 801416a:	f853 2b04 	ldr.w	r2, [r3], #4
 801416e:	6800      	ldr	r0, [r0, #0]
 8014170:	9301      	str	r3, [sp, #4]
 8014172:	f001 fa9d 	bl	80156b0 <_vfiprintf_r>
 8014176:	b002      	add	sp, #8
 8014178:	f85d eb04 	ldr.w	lr, [sp], #4
 801417c:	b003      	add	sp, #12
 801417e:	4770      	bx	lr
 8014180:	20000044 	.word	0x20000044

08014184 <rshift>:
 8014184:	6903      	ldr	r3, [r0, #16]
 8014186:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801418a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801418e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014192:	f100 0414 	add.w	r4, r0, #20
 8014196:	dd45      	ble.n	8014224 <rshift+0xa0>
 8014198:	f011 011f 	ands.w	r1, r1, #31
 801419c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80141a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80141a4:	d10c      	bne.n	80141c0 <rshift+0x3c>
 80141a6:	f100 0710 	add.w	r7, r0, #16
 80141aa:	4629      	mov	r1, r5
 80141ac:	42b1      	cmp	r1, r6
 80141ae:	d334      	bcc.n	801421a <rshift+0x96>
 80141b0:	1a9b      	subs	r3, r3, r2
 80141b2:	009b      	lsls	r3, r3, #2
 80141b4:	1eea      	subs	r2, r5, #3
 80141b6:	4296      	cmp	r6, r2
 80141b8:	bf38      	it	cc
 80141ba:	2300      	movcc	r3, #0
 80141bc:	4423      	add	r3, r4
 80141be:	e015      	b.n	80141ec <rshift+0x68>
 80141c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80141c4:	f1c1 0820 	rsb	r8, r1, #32
 80141c8:	40cf      	lsrs	r7, r1
 80141ca:	f105 0e04 	add.w	lr, r5, #4
 80141ce:	46a1      	mov	r9, r4
 80141d0:	4576      	cmp	r6, lr
 80141d2:	46f4      	mov	ip, lr
 80141d4:	d815      	bhi.n	8014202 <rshift+0x7e>
 80141d6:	1a9b      	subs	r3, r3, r2
 80141d8:	009a      	lsls	r2, r3, #2
 80141da:	3a04      	subs	r2, #4
 80141dc:	3501      	adds	r5, #1
 80141de:	42ae      	cmp	r6, r5
 80141e0:	bf38      	it	cc
 80141e2:	2200      	movcc	r2, #0
 80141e4:	18a3      	adds	r3, r4, r2
 80141e6:	50a7      	str	r7, [r4, r2]
 80141e8:	b107      	cbz	r7, 80141ec <rshift+0x68>
 80141ea:	3304      	adds	r3, #4
 80141ec:	1b1a      	subs	r2, r3, r4
 80141ee:	42a3      	cmp	r3, r4
 80141f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80141f4:	bf08      	it	eq
 80141f6:	2300      	moveq	r3, #0
 80141f8:	6102      	str	r2, [r0, #16]
 80141fa:	bf08      	it	eq
 80141fc:	6143      	streq	r3, [r0, #20]
 80141fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014202:	f8dc c000 	ldr.w	ip, [ip]
 8014206:	fa0c fc08 	lsl.w	ip, ip, r8
 801420a:	ea4c 0707 	orr.w	r7, ip, r7
 801420e:	f849 7b04 	str.w	r7, [r9], #4
 8014212:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014216:	40cf      	lsrs	r7, r1
 8014218:	e7da      	b.n	80141d0 <rshift+0x4c>
 801421a:	f851 cb04 	ldr.w	ip, [r1], #4
 801421e:	f847 cf04 	str.w	ip, [r7, #4]!
 8014222:	e7c3      	b.n	80141ac <rshift+0x28>
 8014224:	4623      	mov	r3, r4
 8014226:	e7e1      	b.n	80141ec <rshift+0x68>

08014228 <__hexdig_fun>:
 8014228:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801422c:	2b09      	cmp	r3, #9
 801422e:	d802      	bhi.n	8014236 <__hexdig_fun+0xe>
 8014230:	3820      	subs	r0, #32
 8014232:	b2c0      	uxtb	r0, r0
 8014234:	4770      	bx	lr
 8014236:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801423a:	2b05      	cmp	r3, #5
 801423c:	d801      	bhi.n	8014242 <__hexdig_fun+0x1a>
 801423e:	3847      	subs	r0, #71	; 0x47
 8014240:	e7f7      	b.n	8014232 <__hexdig_fun+0xa>
 8014242:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014246:	2b05      	cmp	r3, #5
 8014248:	d801      	bhi.n	801424e <__hexdig_fun+0x26>
 801424a:	3827      	subs	r0, #39	; 0x27
 801424c:	e7f1      	b.n	8014232 <__hexdig_fun+0xa>
 801424e:	2000      	movs	r0, #0
 8014250:	4770      	bx	lr
	...

08014254 <__gethex>:
 8014254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014258:	ed2d 8b02 	vpush	{d8}
 801425c:	b089      	sub	sp, #36	; 0x24
 801425e:	ee08 0a10 	vmov	s16, r0
 8014262:	9304      	str	r3, [sp, #16]
 8014264:	4bbc      	ldr	r3, [pc, #752]	; (8014558 <__gethex+0x304>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	9301      	str	r3, [sp, #4]
 801426a:	4618      	mov	r0, r3
 801426c:	468b      	mov	fp, r1
 801426e:	4690      	mov	r8, r2
 8014270:	f7eb ffc0 	bl	80001f4 <strlen>
 8014274:	9b01      	ldr	r3, [sp, #4]
 8014276:	f8db 2000 	ldr.w	r2, [fp]
 801427a:	4403      	add	r3, r0
 801427c:	4682      	mov	sl, r0
 801427e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014282:	9305      	str	r3, [sp, #20]
 8014284:	1c93      	adds	r3, r2, #2
 8014286:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801428a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801428e:	32fe      	adds	r2, #254	; 0xfe
 8014290:	18d1      	adds	r1, r2, r3
 8014292:	461f      	mov	r7, r3
 8014294:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014298:	9100      	str	r1, [sp, #0]
 801429a:	2830      	cmp	r0, #48	; 0x30
 801429c:	d0f8      	beq.n	8014290 <__gethex+0x3c>
 801429e:	f7ff ffc3 	bl	8014228 <__hexdig_fun>
 80142a2:	4604      	mov	r4, r0
 80142a4:	2800      	cmp	r0, #0
 80142a6:	d13a      	bne.n	801431e <__gethex+0xca>
 80142a8:	9901      	ldr	r1, [sp, #4]
 80142aa:	4652      	mov	r2, sl
 80142ac:	4638      	mov	r0, r7
 80142ae:	f001 fb47 	bl	8015940 <strncmp>
 80142b2:	4605      	mov	r5, r0
 80142b4:	2800      	cmp	r0, #0
 80142b6:	d168      	bne.n	801438a <__gethex+0x136>
 80142b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80142bc:	eb07 060a 	add.w	r6, r7, sl
 80142c0:	f7ff ffb2 	bl	8014228 <__hexdig_fun>
 80142c4:	2800      	cmp	r0, #0
 80142c6:	d062      	beq.n	801438e <__gethex+0x13a>
 80142c8:	4633      	mov	r3, r6
 80142ca:	7818      	ldrb	r0, [r3, #0]
 80142cc:	2830      	cmp	r0, #48	; 0x30
 80142ce:	461f      	mov	r7, r3
 80142d0:	f103 0301 	add.w	r3, r3, #1
 80142d4:	d0f9      	beq.n	80142ca <__gethex+0x76>
 80142d6:	f7ff ffa7 	bl	8014228 <__hexdig_fun>
 80142da:	2301      	movs	r3, #1
 80142dc:	fab0 f480 	clz	r4, r0
 80142e0:	0964      	lsrs	r4, r4, #5
 80142e2:	4635      	mov	r5, r6
 80142e4:	9300      	str	r3, [sp, #0]
 80142e6:	463a      	mov	r2, r7
 80142e8:	4616      	mov	r6, r2
 80142ea:	3201      	adds	r2, #1
 80142ec:	7830      	ldrb	r0, [r6, #0]
 80142ee:	f7ff ff9b 	bl	8014228 <__hexdig_fun>
 80142f2:	2800      	cmp	r0, #0
 80142f4:	d1f8      	bne.n	80142e8 <__gethex+0x94>
 80142f6:	9901      	ldr	r1, [sp, #4]
 80142f8:	4652      	mov	r2, sl
 80142fa:	4630      	mov	r0, r6
 80142fc:	f001 fb20 	bl	8015940 <strncmp>
 8014300:	b980      	cbnz	r0, 8014324 <__gethex+0xd0>
 8014302:	b94d      	cbnz	r5, 8014318 <__gethex+0xc4>
 8014304:	eb06 050a 	add.w	r5, r6, sl
 8014308:	462a      	mov	r2, r5
 801430a:	4616      	mov	r6, r2
 801430c:	3201      	adds	r2, #1
 801430e:	7830      	ldrb	r0, [r6, #0]
 8014310:	f7ff ff8a 	bl	8014228 <__hexdig_fun>
 8014314:	2800      	cmp	r0, #0
 8014316:	d1f8      	bne.n	801430a <__gethex+0xb6>
 8014318:	1bad      	subs	r5, r5, r6
 801431a:	00ad      	lsls	r5, r5, #2
 801431c:	e004      	b.n	8014328 <__gethex+0xd4>
 801431e:	2400      	movs	r4, #0
 8014320:	4625      	mov	r5, r4
 8014322:	e7e0      	b.n	80142e6 <__gethex+0x92>
 8014324:	2d00      	cmp	r5, #0
 8014326:	d1f7      	bne.n	8014318 <__gethex+0xc4>
 8014328:	7833      	ldrb	r3, [r6, #0]
 801432a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801432e:	2b50      	cmp	r3, #80	; 0x50
 8014330:	d13b      	bne.n	80143aa <__gethex+0x156>
 8014332:	7873      	ldrb	r3, [r6, #1]
 8014334:	2b2b      	cmp	r3, #43	; 0x2b
 8014336:	d02c      	beq.n	8014392 <__gethex+0x13e>
 8014338:	2b2d      	cmp	r3, #45	; 0x2d
 801433a:	d02e      	beq.n	801439a <__gethex+0x146>
 801433c:	1c71      	adds	r1, r6, #1
 801433e:	f04f 0900 	mov.w	r9, #0
 8014342:	7808      	ldrb	r0, [r1, #0]
 8014344:	f7ff ff70 	bl	8014228 <__hexdig_fun>
 8014348:	1e43      	subs	r3, r0, #1
 801434a:	b2db      	uxtb	r3, r3
 801434c:	2b18      	cmp	r3, #24
 801434e:	d82c      	bhi.n	80143aa <__gethex+0x156>
 8014350:	f1a0 0210 	sub.w	r2, r0, #16
 8014354:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014358:	f7ff ff66 	bl	8014228 <__hexdig_fun>
 801435c:	1e43      	subs	r3, r0, #1
 801435e:	b2db      	uxtb	r3, r3
 8014360:	2b18      	cmp	r3, #24
 8014362:	d91d      	bls.n	80143a0 <__gethex+0x14c>
 8014364:	f1b9 0f00 	cmp.w	r9, #0
 8014368:	d000      	beq.n	801436c <__gethex+0x118>
 801436a:	4252      	negs	r2, r2
 801436c:	4415      	add	r5, r2
 801436e:	f8cb 1000 	str.w	r1, [fp]
 8014372:	b1e4      	cbz	r4, 80143ae <__gethex+0x15a>
 8014374:	9b00      	ldr	r3, [sp, #0]
 8014376:	2b00      	cmp	r3, #0
 8014378:	bf14      	ite	ne
 801437a:	2700      	movne	r7, #0
 801437c:	2706      	moveq	r7, #6
 801437e:	4638      	mov	r0, r7
 8014380:	b009      	add	sp, #36	; 0x24
 8014382:	ecbd 8b02 	vpop	{d8}
 8014386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801438a:	463e      	mov	r6, r7
 801438c:	4625      	mov	r5, r4
 801438e:	2401      	movs	r4, #1
 8014390:	e7ca      	b.n	8014328 <__gethex+0xd4>
 8014392:	f04f 0900 	mov.w	r9, #0
 8014396:	1cb1      	adds	r1, r6, #2
 8014398:	e7d3      	b.n	8014342 <__gethex+0xee>
 801439a:	f04f 0901 	mov.w	r9, #1
 801439e:	e7fa      	b.n	8014396 <__gethex+0x142>
 80143a0:	230a      	movs	r3, #10
 80143a2:	fb03 0202 	mla	r2, r3, r2, r0
 80143a6:	3a10      	subs	r2, #16
 80143a8:	e7d4      	b.n	8014354 <__gethex+0x100>
 80143aa:	4631      	mov	r1, r6
 80143ac:	e7df      	b.n	801436e <__gethex+0x11a>
 80143ae:	1bf3      	subs	r3, r6, r7
 80143b0:	3b01      	subs	r3, #1
 80143b2:	4621      	mov	r1, r4
 80143b4:	2b07      	cmp	r3, #7
 80143b6:	dc0b      	bgt.n	80143d0 <__gethex+0x17c>
 80143b8:	ee18 0a10 	vmov	r0, s16
 80143bc:	f000 fa7e 	bl	80148bc <_Balloc>
 80143c0:	4604      	mov	r4, r0
 80143c2:	b940      	cbnz	r0, 80143d6 <__gethex+0x182>
 80143c4:	4b65      	ldr	r3, [pc, #404]	; (801455c <__gethex+0x308>)
 80143c6:	4602      	mov	r2, r0
 80143c8:	21de      	movs	r1, #222	; 0xde
 80143ca:	4865      	ldr	r0, [pc, #404]	; (8014560 <__gethex+0x30c>)
 80143cc:	f7ff f830 	bl	8013430 <__assert_func>
 80143d0:	3101      	adds	r1, #1
 80143d2:	105b      	asrs	r3, r3, #1
 80143d4:	e7ee      	b.n	80143b4 <__gethex+0x160>
 80143d6:	f100 0914 	add.w	r9, r0, #20
 80143da:	f04f 0b00 	mov.w	fp, #0
 80143de:	f1ca 0301 	rsb	r3, sl, #1
 80143e2:	f8cd 9008 	str.w	r9, [sp, #8]
 80143e6:	f8cd b000 	str.w	fp, [sp]
 80143ea:	9306      	str	r3, [sp, #24]
 80143ec:	42b7      	cmp	r7, r6
 80143ee:	d340      	bcc.n	8014472 <__gethex+0x21e>
 80143f0:	9802      	ldr	r0, [sp, #8]
 80143f2:	9b00      	ldr	r3, [sp, #0]
 80143f4:	f840 3b04 	str.w	r3, [r0], #4
 80143f8:	eba0 0009 	sub.w	r0, r0, r9
 80143fc:	1080      	asrs	r0, r0, #2
 80143fe:	0146      	lsls	r6, r0, #5
 8014400:	6120      	str	r0, [r4, #16]
 8014402:	4618      	mov	r0, r3
 8014404:	f000 fb50 	bl	8014aa8 <__hi0bits>
 8014408:	1a30      	subs	r0, r6, r0
 801440a:	f8d8 6000 	ldr.w	r6, [r8]
 801440e:	42b0      	cmp	r0, r6
 8014410:	dd63      	ble.n	80144da <__gethex+0x286>
 8014412:	1b87      	subs	r7, r0, r6
 8014414:	4639      	mov	r1, r7
 8014416:	4620      	mov	r0, r4
 8014418:	f000 feea 	bl	80151f0 <__any_on>
 801441c:	4682      	mov	sl, r0
 801441e:	b1a8      	cbz	r0, 801444c <__gethex+0x1f8>
 8014420:	1e7b      	subs	r3, r7, #1
 8014422:	1159      	asrs	r1, r3, #5
 8014424:	f003 021f 	and.w	r2, r3, #31
 8014428:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801442c:	f04f 0a01 	mov.w	sl, #1
 8014430:	fa0a f202 	lsl.w	r2, sl, r2
 8014434:	420a      	tst	r2, r1
 8014436:	d009      	beq.n	801444c <__gethex+0x1f8>
 8014438:	4553      	cmp	r3, sl
 801443a:	dd05      	ble.n	8014448 <__gethex+0x1f4>
 801443c:	1eb9      	subs	r1, r7, #2
 801443e:	4620      	mov	r0, r4
 8014440:	f000 fed6 	bl	80151f0 <__any_on>
 8014444:	2800      	cmp	r0, #0
 8014446:	d145      	bne.n	80144d4 <__gethex+0x280>
 8014448:	f04f 0a02 	mov.w	sl, #2
 801444c:	4639      	mov	r1, r7
 801444e:	4620      	mov	r0, r4
 8014450:	f7ff fe98 	bl	8014184 <rshift>
 8014454:	443d      	add	r5, r7
 8014456:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801445a:	42ab      	cmp	r3, r5
 801445c:	da4c      	bge.n	80144f8 <__gethex+0x2a4>
 801445e:	ee18 0a10 	vmov	r0, s16
 8014462:	4621      	mov	r1, r4
 8014464:	f000 fa6a 	bl	801493c <_Bfree>
 8014468:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801446a:	2300      	movs	r3, #0
 801446c:	6013      	str	r3, [r2, #0]
 801446e:	27a3      	movs	r7, #163	; 0xa3
 8014470:	e785      	b.n	801437e <__gethex+0x12a>
 8014472:	1e73      	subs	r3, r6, #1
 8014474:	9a05      	ldr	r2, [sp, #20]
 8014476:	9303      	str	r3, [sp, #12]
 8014478:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801447c:	4293      	cmp	r3, r2
 801447e:	d019      	beq.n	80144b4 <__gethex+0x260>
 8014480:	f1bb 0f20 	cmp.w	fp, #32
 8014484:	d107      	bne.n	8014496 <__gethex+0x242>
 8014486:	9b02      	ldr	r3, [sp, #8]
 8014488:	9a00      	ldr	r2, [sp, #0]
 801448a:	f843 2b04 	str.w	r2, [r3], #4
 801448e:	9302      	str	r3, [sp, #8]
 8014490:	2300      	movs	r3, #0
 8014492:	9300      	str	r3, [sp, #0]
 8014494:	469b      	mov	fp, r3
 8014496:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801449a:	f7ff fec5 	bl	8014228 <__hexdig_fun>
 801449e:	9b00      	ldr	r3, [sp, #0]
 80144a0:	f000 000f 	and.w	r0, r0, #15
 80144a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80144a8:	4303      	orrs	r3, r0
 80144aa:	9300      	str	r3, [sp, #0]
 80144ac:	f10b 0b04 	add.w	fp, fp, #4
 80144b0:	9b03      	ldr	r3, [sp, #12]
 80144b2:	e00d      	b.n	80144d0 <__gethex+0x27c>
 80144b4:	9b03      	ldr	r3, [sp, #12]
 80144b6:	9a06      	ldr	r2, [sp, #24]
 80144b8:	4413      	add	r3, r2
 80144ba:	42bb      	cmp	r3, r7
 80144bc:	d3e0      	bcc.n	8014480 <__gethex+0x22c>
 80144be:	4618      	mov	r0, r3
 80144c0:	9901      	ldr	r1, [sp, #4]
 80144c2:	9307      	str	r3, [sp, #28]
 80144c4:	4652      	mov	r2, sl
 80144c6:	f001 fa3b 	bl	8015940 <strncmp>
 80144ca:	9b07      	ldr	r3, [sp, #28]
 80144cc:	2800      	cmp	r0, #0
 80144ce:	d1d7      	bne.n	8014480 <__gethex+0x22c>
 80144d0:	461e      	mov	r6, r3
 80144d2:	e78b      	b.n	80143ec <__gethex+0x198>
 80144d4:	f04f 0a03 	mov.w	sl, #3
 80144d8:	e7b8      	b.n	801444c <__gethex+0x1f8>
 80144da:	da0a      	bge.n	80144f2 <__gethex+0x29e>
 80144dc:	1a37      	subs	r7, r6, r0
 80144de:	4621      	mov	r1, r4
 80144e0:	ee18 0a10 	vmov	r0, s16
 80144e4:	463a      	mov	r2, r7
 80144e6:	f000 fc45 	bl	8014d74 <__lshift>
 80144ea:	1bed      	subs	r5, r5, r7
 80144ec:	4604      	mov	r4, r0
 80144ee:	f100 0914 	add.w	r9, r0, #20
 80144f2:	f04f 0a00 	mov.w	sl, #0
 80144f6:	e7ae      	b.n	8014456 <__gethex+0x202>
 80144f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80144fc:	42a8      	cmp	r0, r5
 80144fe:	dd72      	ble.n	80145e6 <__gethex+0x392>
 8014500:	1b45      	subs	r5, r0, r5
 8014502:	42ae      	cmp	r6, r5
 8014504:	dc36      	bgt.n	8014574 <__gethex+0x320>
 8014506:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801450a:	2b02      	cmp	r3, #2
 801450c:	d02a      	beq.n	8014564 <__gethex+0x310>
 801450e:	2b03      	cmp	r3, #3
 8014510:	d02c      	beq.n	801456c <__gethex+0x318>
 8014512:	2b01      	cmp	r3, #1
 8014514:	d115      	bne.n	8014542 <__gethex+0x2ee>
 8014516:	42ae      	cmp	r6, r5
 8014518:	d113      	bne.n	8014542 <__gethex+0x2ee>
 801451a:	2e01      	cmp	r6, #1
 801451c:	d10b      	bne.n	8014536 <__gethex+0x2e2>
 801451e:	9a04      	ldr	r2, [sp, #16]
 8014520:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014524:	6013      	str	r3, [r2, #0]
 8014526:	2301      	movs	r3, #1
 8014528:	6123      	str	r3, [r4, #16]
 801452a:	f8c9 3000 	str.w	r3, [r9]
 801452e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014530:	2762      	movs	r7, #98	; 0x62
 8014532:	601c      	str	r4, [r3, #0]
 8014534:	e723      	b.n	801437e <__gethex+0x12a>
 8014536:	1e71      	subs	r1, r6, #1
 8014538:	4620      	mov	r0, r4
 801453a:	f000 fe59 	bl	80151f0 <__any_on>
 801453e:	2800      	cmp	r0, #0
 8014540:	d1ed      	bne.n	801451e <__gethex+0x2ca>
 8014542:	ee18 0a10 	vmov	r0, s16
 8014546:	4621      	mov	r1, r4
 8014548:	f000 f9f8 	bl	801493c <_Bfree>
 801454c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801454e:	2300      	movs	r3, #0
 8014550:	6013      	str	r3, [r2, #0]
 8014552:	2750      	movs	r7, #80	; 0x50
 8014554:	e713      	b.n	801437e <__gethex+0x12a>
 8014556:	bf00      	nop
 8014558:	0802a124 	.word	0x0802a124
 801455c:	0802a0a9 	.word	0x0802a0a9
 8014560:	0802a0ba 	.word	0x0802a0ba
 8014564:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014566:	2b00      	cmp	r3, #0
 8014568:	d1eb      	bne.n	8014542 <__gethex+0x2ee>
 801456a:	e7d8      	b.n	801451e <__gethex+0x2ca>
 801456c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801456e:	2b00      	cmp	r3, #0
 8014570:	d1d5      	bne.n	801451e <__gethex+0x2ca>
 8014572:	e7e6      	b.n	8014542 <__gethex+0x2ee>
 8014574:	1e6f      	subs	r7, r5, #1
 8014576:	f1ba 0f00 	cmp.w	sl, #0
 801457a:	d131      	bne.n	80145e0 <__gethex+0x38c>
 801457c:	b127      	cbz	r7, 8014588 <__gethex+0x334>
 801457e:	4639      	mov	r1, r7
 8014580:	4620      	mov	r0, r4
 8014582:	f000 fe35 	bl	80151f0 <__any_on>
 8014586:	4682      	mov	sl, r0
 8014588:	117b      	asrs	r3, r7, #5
 801458a:	2101      	movs	r1, #1
 801458c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014590:	f007 071f 	and.w	r7, r7, #31
 8014594:	fa01 f707 	lsl.w	r7, r1, r7
 8014598:	421f      	tst	r7, r3
 801459a:	4629      	mov	r1, r5
 801459c:	4620      	mov	r0, r4
 801459e:	bf18      	it	ne
 80145a0:	f04a 0a02 	orrne.w	sl, sl, #2
 80145a4:	1b76      	subs	r6, r6, r5
 80145a6:	f7ff fded 	bl	8014184 <rshift>
 80145aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80145ae:	2702      	movs	r7, #2
 80145b0:	f1ba 0f00 	cmp.w	sl, #0
 80145b4:	d048      	beq.n	8014648 <__gethex+0x3f4>
 80145b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80145ba:	2b02      	cmp	r3, #2
 80145bc:	d015      	beq.n	80145ea <__gethex+0x396>
 80145be:	2b03      	cmp	r3, #3
 80145c0:	d017      	beq.n	80145f2 <__gethex+0x39e>
 80145c2:	2b01      	cmp	r3, #1
 80145c4:	d109      	bne.n	80145da <__gethex+0x386>
 80145c6:	f01a 0f02 	tst.w	sl, #2
 80145ca:	d006      	beq.n	80145da <__gethex+0x386>
 80145cc:	f8d9 0000 	ldr.w	r0, [r9]
 80145d0:	ea4a 0a00 	orr.w	sl, sl, r0
 80145d4:	f01a 0f01 	tst.w	sl, #1
 80145d8:	d10e      	bne.n	80145f8 <__gethex+0x3a4>
 80145da:	f047 0710 	orr.w	r7, r7, #16
 80145de:	e033      	b.n	8014648 <__gethex+0x3f4>
 80145e0:	f04f 0a01 	mov.w	sl, #1
 80145e4:	e7d0      	b.n	8014588 <__gethex+0x334>
 80145e6:	2701      	movs	r7, #1
 80145e8:	e7e2      	b.n	80145b0 <__gethex+0x35c>
 80145ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80145ec:	f1c3 0301 	rsb	r3, r3, #1
 80145f0:	9315      	str	r3, [sp, #84]	; 0x54
 80145f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d0f0      	beq.n	80145da <__gethex+0x386>
 80145f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80145fc:	f104 0314 	add.w	r3, r4, #20
 8014600:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014604:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014608:	f04f 0c00 	mov.w	ip, #0
 801460c:	4618      	mov	r0, r3
 801460e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014612:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014616:	d01c      	beq.n	8014652 <__gethex+0x3fe>
 8014618:	3201      	adds	r2, #1
 801461a:	6002      	str	r2, [r0, #0]
 801461c:	2f02      	cmp	r7, #2
 801461e:	f104 0314 	add.w	r3, r4, #20
 8014622:	d13f      	bne.n	80146a4 <__gethex+0x450>
 8014624:	f8d8 2000 	ldr.w	r2, [r8]
 8014628:	3a01      	subs	r2, #1
 801462a:	42b2      	cmp	r2, r6
 801462c:	d10a      	bne.n	8014644 <__gethex+0x3f0>
 801462e:	1171      	asrs	r1, r6, #5
 8014630:	2201      	movs	r2, #1
 8014632:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014636:	f006 061f 	and.w	r6, r6, #31
 801463a:	fa02 f606 	lsl.w	r6, r2, r6
 801463e:	421e      	tst	r6, r3
 8014640:	bf18      	it	ne
 8014642:	4617      	movne	r7, r2
 8014644:	f047 0720 	orr.w	r7, r7, #32
 8014648:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801464a:	601c      	str	r4, [r3, #0]
 801464c:	9b04      	ldr	r3, [sp, #16]
 801464e:	601d      	str	r5, [r3, #0]
 8014650:	e695      	b.n	801437e <__gethex+0x12a>
 8014652:	4299      	cmp	r1, r3
 8014654:	f843 cc04 	str.w	ip, [r3, #-4]
 8014658:	d8d8      	bhi.n	801460c <__gethex+0x3b8>
 801465a:	68a3      	ldr	r3, [r4, #8]
 801465c:	459b      	cmp	fp, r3
 801465e:	db19      	blt.n	8014694 <__gethex+0x440>
 8014660:	6861      	ldr	r1, [r4, #4]
 8014662:	ee18 0a10 	vmov	r0, s16
 8014666:	3101      	adds	r1, #1
 8014668:	f000 f928 	bl	80148bc <_Balloc>
 801466c:	4681      	mov	r9, r0
 801466e:	b918      	cbnz	r0, 8014678 <__gethex+0x424>
 8014670:	4b1a      	ldr	r3, [pc, #104]	; (80146dc <__gethex+0x488>)
 8014672:	4602      	mov	r2, r0
 8014674:	2184      	movs	r1, #132	; 0x84
 8014676:	e6a8      	b.n	80143ca <__gethex+0x176>
 8014678:	6922      	ldr	r2, [r4, #16]
 801467a:	3202      	adds	r2, #2
 801467c:	f104 010c 	add.w	r1, r4, #12
 8014680:	0092      	lsls	r2, r2, #2
 8014682:	300c      	adds	r0, #12
 8014684:	f000 f90c 	bl	80148a0 <memcpy>
 8014688:	4621      	mov	r1, r4
 801468a:	ee18 0a10 	vmov	r0, s16
 801468e:	f000 f955 	bl	801493c <_Bfree>
 8014692:	464c      	mov	r4, r9
 8014694:	6923      	ldr	r3, [r4, #16]
 8014696:	1c5a      	adds	r2, r3, #1
 8014698:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801469c:	6122      	str	r2, [r4, #16]
 801469e:	2201      	movs	r2, #1
 80146a0:	615a      	str	r2, [r3, #20]
 80146a2:	e7bb      	b.n	801461c <__gethex+0x3c8>
 80146a4:	6922      	ldr	r2, [r4, #16]
 80146a6:	455a      	cmp	r2, fp
 80146a8:	dd0b      	ble.n	80146c2 <__gethex+0x46e>
 80146aa:	2101      	movs	r1, #1
 80146ac:	4620      	mov	r0, r4
 80146ae:	f7ff fd69 	bl	8014184 <rshift>
 80146b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80146b6:	3501      	adds	r5, #1
 80146b8:	42ab      	cmp	r3, r5
 80146ba:	f6ff aed0 	blt.w	801445e <__gethex+0x20a>
 80146be:	2701      	movs	r7, #1
 80146c0:	e7c0      	b.n	8014644 <__gethex+0x3f0>
 80146c2:	f016 061f 	ands.w	r6, r6, #31
 80146c6:	d0fa      	beq.n	80146be <__gethex+0x46a>
 80146c8:	449a      	add	sl, r3
 80146ca:	f1c6 0620 	rsb	r6, r6, #32
 80146ce:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80146d2:	f000 f9e9 	bl	8014aa8 <__hi0bits>
 80146d6:	42b0      	cmp	r0, r6
 80146d8:	dbe7      	blt.n	80146aa <__gethex+0x456>
 80146da:	e7f0      	b.n	80146be <__gethex+0x46a>
 80146dc:	0802a0a9 	.word	0x0802a0a9

080146e0 <L_shift>:
 80146e0:	f1c2 0208 	rsb	r2, r2, #8
 80146e4:	0092      	lsls	r2, r2, #2
 80146e6:	b570      	push	{r4, r5, r6, lr}
 80146e8:	f1c2 0620 	rsb	r6, r2, #32
 80146ec:	6843      	ldr	r3, [r0, #4]
 80146ee:	6804      	ldr	r4, [r0, #0]
 80146f0:	fa03 f506 	lsl.w	r5, r3, r6
 80146f4:	432c      	orrs	r4, r5
 80146f6:	40d3      	lsrs	r3, r2
 80146f8:	6004      	str	r4, [r0, #0]
 80146fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80146fe:	4288      	cmp	r0, r1
 8014700:	d3f4      	bcc.n	80146ec <L_shift+0xc>
 8014702:	bd70      	pop	{r4, r5, r6, pc}

08014704 <__match>:
 8014704:	b530      	push	{r4, r5, lr}
 8014706:	6803      	ldr	r3, [r0, #0]
 8014708:	3301      	adds	r3, #1
 801470a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801470e:	b914      	cbnz	r4, 8014716 <__match+0x12>
 8014710:	6003      	str	r3, [r0, #0]
 8014712:	2001      	movs	r0, #1
 8014714:	bd30      	pop	{r4, r5, pc}
 8014716:	f813 2b01 	ldrb.w	r2, [r3], #1
 801471a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801471e:	2d19      	cmp	r5, #25
 8014720:	bf98      	it	ls
 8014722:	3220      	addls	r2, #32
 8014724:	42a2      	cmp	r2, r4
 8014726:	d0f0      	beq.n	801470a <__match+0x6>
 8014728:	2000      	movs	r0, #0
 801472a:	e7f3      	b.n	8014714 <__match+0x10>

0801472c <__hexnan>:
 801472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014730:	680b      	ldr	r3, [r1, #0]
 8014732:	6801      	ldr	r1, [r0, #0]
 8014734:	115e      	asrs	r6, r3, #5
 8014736:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801473a:	f013 031f 	ands.w	r3, r3, #31
 801473e:	b087      	sub	sp, #28
 8014740:	bf18      	it	ne
 8014742:	3604      	addne	r6, #4
 8014744:	2500      	movs	r5, #0
 8014746:	1f37      	subs	r7, r6, #4
 8014748:	4682      	mov	sl, r0
 801474a:	4690      	mov	r8, r2
 801474c:	9301      	str	r3, [sp, #4]
 801474e:	f846 5c04 	str.w	r5, [r6, #-4]
 8014752:	46b9      	mov	r9, r7
 8014754:	463c      	mov	r4, r7
 8014756:	9502      	str	r5, [sp, #8]
 8014758:	46ab      	mov	fp, r5
 801475a:	784a      	ldrb	r2, [r1, #1]
 801475c:	1c4b      	adds	r3, r1, #1
 801475e:	9303      	str	r3, [sp, #12]
 8014760:	b342      	cbz	r2, 80147b4 <__hexnan+0x88>
 8014762:	4610      	mov	r0, r2
 8014764:	9105      	str	r1, [sp, #20]
 8014766:	9204      	str	r2, [sp, #16]
 8014768:	f7ff fd5e 	bl	8014228 <__hexdig_fun>
 801476c:	2800      	cmp	r0, #0
 801476e:	d14f      	bne.n	8014810 <__hexnan+0xe4>
 8014770:	9a04      	ldr	r2, [sp, #16]
 8014772:	9905      	ldr	r1, [sp, #20]
 8014774:	2a20      	cmp	r2, #32
 8014776:	d818      	bhi.n	80147aa <__hexnan+0x7e>
 8014778:	9b02      	ldr	r3, [sp, #8]
 801477a:	459b      	cmp	fp, r3
 801477c:	dd13      	ble.n	80147a6 <__hexnan+0x7a>
 801477e:	454c      	cmp	r4, r9
 8014780:	d206      	bcs.n	8014790 <__hexnan+0x64>
 8014782:	2d07      	cmp	r5, #7
 8014784:	dc04      	bgt.n	8014790 <__hexnan+0x64>
 8014786:	462a      	mov	r2, r5
 8014788:	4649      	mov	r1, r9
 801478a:	4620      	mov	r0, r4
 801478c:	f7ff ffa8 	bl	80146e0 <L_shift>
 8014790:	4544      	cmp	r4, r8
 8014792:	d950      	bls.n	8014836 <__hexnan+0x10a>
 8014794:	2300      	movs	r3, #0
 8014796:	f1a4 0904 	sub.w	r9, r4, #4
 801479a:	f844 3c04 	str.w	r3, [r4, #-4]
 801479e:	f8cd b008 	str.w	fp, [sp, #8]
 80147a2:	464c      	mov	r4, r9
 80147a4:	461d      	mov	r5, r3
 80147a6:	9903      	ldr	r1, [sp, #12]
 80147a8:	e7d7      	b.n	801475a <__hexnan+0x2e>
 80147aa:	2a29      	cmp	r2, #41	; 0x29
 80147ac:	d156      	bne.n	801485c <__hexnan+0x130>
 80147ae:	3102      	adds	r1, #2
 80147b0:	f8ca 1000 	str.w	r1, [sl]
 80147b4:	f1bb 0f00 	cmp.w	fp, #0
 80147b8:	d050      	beq.n	801485c <__hexnan+0x130>
 80147ba:	454c      	cmp	r4, r9
 80147bc:	d206      	bcs.n	80147cc <__hexnan+0xa0>
 80147be:	2d07      	cmp	r5, #7
 80147c0:	dc04      	bgt.n	80147cc <__hexnan+0xa0>
 80147c2:	462a      	mov	r2, r5
 80147c4:	4649      	mov	r1, r9
 80147c6:	4620      	mov	r0, r4
 80147c8:	f7ff ff8a 	bl	80146e0 <L_shift>
 80147cc:	4544      	cmp	r4, r8
 80147ce:	d934      	bls.n	801483a <__hexnan+0x10e>
 80147d0:	f1a8 0204 	sub.w	r2, r8, #4
 80147d4:	4623      	mov	r3, r4
 80147d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80147da:	f842 1f04 	str.w	r1, [r2, #4]!
 80147de:	429f      	cmp	r7, r3
 80147e0:	d2f9      	bcs.n	80147d6 <__hexnan+0xaa>
 80147e2:	1b3b      	subs	r3, r7, r4
 80147e4:	f023 0303 	bic.w	r3, r3, #3
 80147e8:	3304      	adds	r3, #4
 80147ea:	3401      	adds	r4, #1
 80147ec:	3e03      	subs	r6, #3
 80147ee:	42b4      	cmp	r4, r6
 80147f0:	bf88      	it	hi
 80147f2:	2304      	movhi	r3, #4
 80147f4:	4443      	add	r3, r8
 80147f6:	2200      	movs	r2, #0
 80147f8:	f843 2b04 	str.w	r2, [r3], #4
 80147fc:	429f      	cmp	r7, r3
 80147fe:	d2fb      	bcs.n	80147f8 <__hexnan+0xcc>
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	b91b      	cbnz	r3, 801480c <__hexnan+0xe0>
 8014804:	4547      	cmp	r7, r8
 8014806:	d127      	bne.n	8014858 <__hexnan+0x12c>
 8014808:	2301      	movs	r3, #1
 801480a:	603b      	str	r3, [r7, #0]
 801480c:	2005      	movs	r0, #5
 801480e:	e026      	b.n	801485e <__hexnan+0x132>
 8014810:	3501      	adds	r5, #1
 8014812:	2d08      	cmp	r5, #8
 8014814:	f10b 0b01 	add.w	fp, fp, #1
 8014818:	dd06      	ble.n	8014828 <__hexnan+0xfc>
 801481a:	4544      	cmp	r4, r8
 801481c:	d9c3      	bls.n	80147a6 <__hexnan+0x7a>
 801481e:	2300      	movs	r3, #0
 8014820:	f844 3c04 	str.w	r3, [r4, #-4]
 8014824:	2501      	movs	r5, #1
 8014826:	3c04      	subs	r4, #4
 8014828:	6822      	ldr	r2, [r4, #0]
 801482a:	f000 000f 	and.w	r0, r0, #15
 801482e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014832:	6022      	str	r2, [r4, #0]
 8014834:	e7b7      	b.n	80147a6 <__hexnan+0x7a>
 8014836:	2508      	movs	r5, #8
 8014838:	e7b5      	b.n	80147a6 <__hexnan+0x7a>
 801483a:	9b01      	ldr	r3, [sp, #4]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d0df      	beq.n	8014800 <__hexnan+0xd4>
 8014840:	f04f 32ff 	mov.w	r2, #4294967295
 8014844:	f1c3 0320 	rsb	r3, r3, #32
 8014848:	fa22 f303 	lsr.w	r3, r2, r3
 801484c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014850:	401a      	ands	r2, r3
 8014852:	f846 2c04 	str.w	r2, [r6, #-4]
 8014856:	e7d3      	b.n	8014800 <__hexnan+0xd4>
 8014858:	3f04      	subs	r7, #4
 801485a:	e7d1      	b.n	8014800 <__hexnan+0xd4>
 801485c:	2004      	movs	r0, #4
 801485e:	b007      	add	sp, #28
 8014860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014864 <_localeconv_r>:
 8014864:	4800      	ldr	r0, [pc, #0]	; (8014868 <_localeconv_r+0x4>)
 8014866:	4770      	bx	lr
 8014868:	2000019c 	.word	0x2000019c

0801486c <malloc>:
 801486c:	4b02      	ldr	r3, [pc, #8]	; (8014878 <malloc+0xc>)
 801486e:	4601      	mov	r1, r0
 8014870:	6818      	ldr	r0, [r3, #0]
 8014872:	f000 bd3d 	b.w	80152f0 <_malloc_r>
 8014876:	bf00      	nop
 8014878:	20000044 	.word	0x20000044

0801487c <__ascii_mbtowc>:
 801487c:	b082      	sub	sp, #8
 801487e:	b901      	cbnz	r1, 8014882 <__ascii_mbtowc+0x6>
 8014880:	a901      	add	r1, sp, #4
 8014882:	b142      	cbz	r2, 8014896 <__ascii_mbtowc+0x1a>
 8014884:	b14b      	cbz	r3, 801489a <__ascii_mbtowc+0x1e>
 8014886:	7813      	ldrb	r3, [r2, #0]
 8014888:	600b      	str	r3, [r1, #0]
 801488a:	7812      	ldrb	r2, [r2, #0]
 801488c:	1e10      	subs	r0, r2, #0
 801488e:	bf18      	it	ne
 8014890:	2001      	movne	r0, #1
 8014892:	b002      	add	sp, #8
 8014894:	4770      	bx	lr
 8014896:	4610      	mov	r0, r2
 8014898:	e7fb      	b.n	8014892 <__ascii_mbtowc+0x16>
 801489a:	f06f 0001 	mvn.w	r0, #1
 801489e:	e7f8      	b.n	8014892 <__ascii_mbtowc+0x16>

080148a0 <memcpy>:
 80148a0:	440a      	add	r2, r1
 80148a2:	4291      	cmp	r1, r2
 80148a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80148a8:	d100      	bne.n	80148ac <memcpy+0xc>
 80148aa:	4770      	bx	lr
 80148ac:	b510      	push	{r4, lr}
 80148ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80148b6:	4291      	cmp	r1, r2
 80148b8:	d1f9      	bne.n	80148ae <memcpy+0xe>
 80148ba:	bd10      	pop	{r4, pc}

080148bc <_Balloc>:
 80148bc:	b570      	push	{r4, r5, r6, lr}
 80148be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80148c0:	4604      	mov	r4, r0
 80148c2:	460d      	mov	r5, r1
 80148c4:	b976      	cbnz	r6, 80148e4 <_Balloc+0x28>
 80148c6:	2010      	movs	r0, #16
 80148c8:	f7ff ffd0 	bl	801486c <malloc>
 80148cc:	4602      	mov	r2, r0
 80148ce:	6260      	str	r0, [r4, #36]	; 0x24
 80148d0:	b920      	cbnz	r0, 80148dc <_Balloc+0x20>
 80148d2:	4b18      	ldr	r3, [pc, #96]	; (8014934 <_Balloc+0x78>)
 80148d4:	4818      	ldr	r0, [pc, #96]	; (8014938 <_Balloc+0x7c>)
 80148d6:	2166      	movs	r1, #102	; 0x66
 80148d8:	f7fe fdaa 	bl	8013430 <__assert_func>
 80148dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80148e0:	6006      	str	r6, [r0, #0]
 80148e2:	60c6      	str	r6, [r0, #12]
 80148e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80148e6:	68f3      	ldr	r3, [r6, #12]
 80148e8:	b183      	cbz	r3, 801490c <_Balloc+0x50>
 80148ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148ec:	68db      	ldr	r3, [r3, #12]
 80148ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80148f2:	b9b8      	cbnz	r0, 8014924 <_Balloc+0x68>
 80148f4:	2101      	movs	r1, #1
 80148f6:	fa01 f605 	lsl.w	r6, r1, r5
 80148fa:	1d72      	adds	r2, r6, #5
 80148fc:	0092      	lsls	r2, r2, #2
 80148fe:	4620      	mov	r0, r4
 8014900:	f000 fc97 	bl	8015232 <_calloc_r>
 8014904:	b160      	cbz	r0, 8014920 <_Balloc+0x64>
 8014906:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801490a:	e00e      	b.n	801492a <_Balloc+0x6e>
 801490c:	2221      	movs	r2, #33	; 0x21
 801490e:	2104      	movs	r1, #4
 8014910:	4620      	mov	r0, r4
 8014912:	f000 fc8e 	bl	8015232 <_calloc_r>
 8014916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014918:	60f0      	str	r0, [r6, #12]
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d1e4      	bne.n	80148ea <_Balloc+0x2e>
 8014920:	2000      	movs	r0, #0
 8014922:	bd70      	pop	{r4, r5, r6, pc}
 8014924:	6802      	ldr	r2, [r0, #0]
 8014926:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801492a:	2300      	movs	r3, #0
 801492c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014930:	e7f7      	b.n	8014922 <_Balloc+0x66>
 8014932:	bf00      	nop
 8014934:	08029e88 	.word	0x08029e88
 8014938:	0802a138 	.word	0x0802a138

0801493c <_Bfree>:
 801493c:	b570      	push	{r4, r5, r6, lr}
 801493e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014940:	4605      	mov	r5, r0
 8014942:	460c      	mov	r4, r1
 8014944:	b976      	cbnz	r6, 8014964 <_Bfree+0x28>
 8014946:	2010      	movs	r0, #16
 8014948:	f7ff ff90 	bl	801486c <malloc>
 801494c:	4602      	mov	r2, r0
 801494e:	6268      	str	r0, [r5, #36]	; 0x24
 8014950:	b920      	cbnz	r0, 801495c <_Bfree+0x20>
 8014952:	4b09      	ldr	r3, [pc, #36]	; (8014978 <_Bfree+0x3c>)
 8014954:	4809      	ldr	r0, [pc, #36]	; (801497c <_Bfree+0x40>)
 8014956:	218a      	movs	r1, #138	; 0x8a
 8014958:	f7fe fd6a 	bl	8013430 <__assert_func>
 801495c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014960:	6006      	str	r6, [r0, #0]
 8014962:	60c6      	str	r6, [r0, #12]
 8014964:	b13c      	cbz	r4, 8014976 <_Bfree+0x3a>
 8014966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014968:	6862      	ldr	r2, [r4, #4]
 801496a:	68db      	ldr	r3, [r3, #12]
 801496c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014970:	6021      	str	r1, [r4, #0]
 8014972:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014976:	bd70      	pop	{r4, r5, r6, pc}
 8014978:	08029e88 	.word	0x08029e88
 801497c:	0802a138 	.word	0x0802a138

08014980 <__multadd>:
 8014980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014984:	690e      	ldr	r6, [r1, #16]
 8014986:	4607      	mov	r7, r0
 8014988:	4698      	mov	r8, r3
 801498a:	460c      	mov	r4, r1
 801498c:	f101 0014 	add.w	r0, r1, #20
 8014990:	2300      	movs	r3, #0
 8014992:	6805      	ldr	r5, [r0, #0]
 8014994:	b2a9      	uxth	r1, r5
 8014996:	fb02 8101 	mla	r1, r2, r1, r8
 801499a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801499e:	0c2d      	lsrs	r5, r5, #16
 80149a0:	fb02 c505 	mla	r5, r2, r5, ip
 80149a4:	b289      	uxth	r1, r1
 80149a6:	3301      	adds	r3, #1
 80149a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80149ac:	429e      	cmp	r6, r3
 80149ae:	f840 1b04 	str.w	r1, [r0], #4
 80149b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80149b6:	dcec      	bgt.n	8014992 <__multadd+0x12>
 80149b8:	f1b8 0f00 	cmp.w	r8, #0
 80149bc:	d022      	beq.n	8014a04 <__multadd+0x84>
 80149be:	68a3      	ldr	r3, [r4, #8]
 80149c0:	42b3      	cmp	r3, r6
 80149c2:	dc19      	bgt.n	80149f8 <__multadd+0x78>
 80149c4:	6861      	ldr	r1, [r4, #4]
 80149c6:	4638      	mov	r0, r7
 80149c8:	3101      	adds	r1, #1
 80149ca:	f7ff ff77 	bl	80148bc <_Balloc>
 80149ce:	4605      	mov	r5, r0
 80149d0:	b928      	cbnz	r0, 80149de <__multadd+0x5e>
 80149d2:	4602      	mov	r2, r0
 80149d4:	4b0d      	ldr	r3, [pc, #52]	; (8014a0c <__multadd+0x8c>)
 80149d6:	480e      	ldr	r0, [pc, #56]	; (8014a10 <__multadd+0x90>)
 80149d8:	21b5      	movs	r1, #181	; 0xb5
 80149da:	f7fe fd29 	bl	8013430 <__assert_func>
 80149de:	6922      	ldr	r2, [r4, #16]
 80149e0:	3202      	adds	r2, #2
 80149e2:	f104 010c 	add.w	r1, r4, #12
 80149e6:	0092      	lsls	r2, r2, #2
 80149e8:	300c      	adds	r0, #12
 80149ea:	f7ff ff59 	bl	80148a0 <memcpy>
 80149ee:	4621      	mov	r1, r4
 80149f0:	4638      	mov	r0, r7
 80149f2:	f7ff ffa3 	bl	801493c <_Bfree>
 80149f6:	462c      	mov	r4, r5
 80149f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80149fc:	3601      	adds	r6, #1
 80149fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8014a02:	6126      	str	r6, [r4, #16]
 8014a04:	4620      	mov	r0, r4
 8014a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a0a:	bf00      	nop
 8014a0c:	0802a0a9 	.word	0x0802a0a9
 8014a10:	0802a138 	.word	0x0802a138

08014a14 <__s2b>:
 8014a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a18:	460c      	mov	r4, r1
 8014a1a:	4615      	mov	r5, r2
 8014a1c:	461f      	mov	r7, r3
 8014a1e:	2209      	movs	r2, #9
 8014a20:	3308      	adds	r3, #8
 8014a22:	4606      	mov	r6, r0
 8014a24:	fb93 f3f2 	sdiv	r3, r3, r2
 8014a28:	2100      	movs	r1, #0
 8014a2a:	2201      	movs	r2, #1
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	db09      	blt.n	8014a44 <__s2b+0x30>
 8014a30:	4630      	mov	r0, r6
 8014a32:	f7ff ff43 	bl	80148bc <_Balloc>
 8014a36:	b940      	cbnz	r0, 8014a4a <__s2b+0x36>
 8014a38:	4602      	mov	r2, r0
 8014a3a:	4b19      	ldr	r3, [pc, #100]	; (8014aa0 <__s2b+0x8c>)
 8014a3c:	4819      	ldr	r0, [pc, #100]	; (8014aa4 <__s2b+0x90>)
 8014a3e:	21ce      	movs	r1, #206	; 0xce
 8014a40:	f7fe fcf6 	bl	8013430 <__assert_func>
 8014a44:	0052      	lsls	r2, r2, #1
 8014a46:	3101      	adds	r1, #1
 8014a48:	e7f0      	b.n	8014a2c <__s2b+0x18>
 8014a4a:	9b08      	ldr	r3, [sp, #32]
 8014a4c:	6143      	str	r3, [r0, #20]
 8014a4e:	2d09      	cmp	r5, #9
 8014a50:	f04f 0301 	mov.w	r3, #1
 8014a54:	6103      	str	r3, [r0, #16]
 8014a56:	dd16      	ble.n	8014a86 <__s2b+0x72>
 8014a58:	f104 0909 	add.w	r9, r4, #9
 8014a5c:	46c8      	mov	r8, r9
 8014a5e:	442c      	add	r4, r5
 8014a60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014a64:	4601      	mov	r1, r0
 8014a66:	3b30      	subs	r3, #48	; 0x30
 8014a68:	220a      	movs	r2, #10
 8014a6a:	4630      	mov	r0, r6
 8014a6c:	f7ff ff88 	bl	8014980 <__multadd>
 8014a70:	45a0      	cmp	r8, r4
 8014a72:	d1f5      	bne.n	8014a60 <__s2b+0x4c>
 8014a74:	f1a5 0408 	sub.w	r4, r5, #8
 8014a78:	444c      	add	r4, r9
 8014a7a:	1b2d      	subs	r5, r5, r4
 8014a7c:	1963      	adds	r3, r4, r5
 8014a7e:	42bb      	cmp	r3, r7
 8014a80:	db04      	blt.n	8014a8c <__s2b+0x78>
 8014a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a86:	340a      	adds	r4, #10
 8014a88:	2509      	movs	r5, #9
 8014a8a:	e7f6      	b.n	8014a7a <__s2b+0x66>
 8014a8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014a90:	4601      	mov	r1, r0
 8014a92:	3b30      	subs	r3, #48	; 0x30
 8014a94:	220a      	movs	r2, #10
 8014a96:	4630      	mov	r0, r6
 8014a98:	f7ff ff72 	bl	8014980 <__multadd>
 8014a9c:	e7ee      	b.n	8014a7c <__s2b+0x68>
 8014a9e:	bf00      	nop
 8014aa0:	0802a0a9 	.word	0x0802a0a9
 8014aa4:	0802a138 	.word	0x0802a138

08014aa8 <__hi0bits>:
 8014aa8:	0c03      	lsrs	r3, r0, #16
 8014aaa:	041b      	lsls	r3, r3, #16
 8014aac:	b9d3      	cbnz	r3, 8014ae4 <__hi0bits+0x3c>
 8014aae:	0400      	lsls	r0, r0, #16
 8014ab0:	2310      	movs	r3, #16
 8014ab2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014ab6:	bf04      	itt	eq
 8014ab8:	0200      	lsleq	r0, r0, #8
 8014aba:	3308      	addeq	r3, #8
 8014abc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014ac0:	bf04      	itt	eq
 8014ac2:	0100      	lsleq	r0, r0, #4
 8014ac4:	3304      	addeq	r3, #4
 8014ac6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014aca:	bf04      	itt	eq
 8014acc:	0080      	lsleq	r0, r0, #2
 8014ace:	3302      	addeq	r3, #2
 8014ad0:	2800      	cmp	r0, #0
 8014ad2:	db05      	blt.n	8014ae0 <__hi0bits+0x38>
 8014ad4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014ad8:	f103 0301 	add.w	r3, r3, #1
 8014adc:	bf08      	it	eq
 8014ade:	2320      	moveq	r3, #32
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	4770      	bx	lr
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	e7e4      	b.n	8014ab2 <__hi0bits+0xa>

08014ae8 <__lo0bits>:
 8014ae8:	6803      	ldr	r3, [r0, #0]
 8014aea:	f013 0207 	ands.w	r2, r3, #7
 8014aee:	4601      	mov	r1, r0
 8014af0:	d00b      	beq.n	8014b0a <__lo0bits+0x22>
 8014af2:	07da      	lsls	r2, r3, #31
 8014af4:	d424      	bmi.n	8014b40 <__lo0bits+0x58>
 8014af6:	0798      	lsls	r0, r3, #30
 8014af8:	bf49      	itett	mi
 8014afa:	085b      	lsrmi	r3, r3, #1
 8014afc:	089b      	lsrpl	r3, r3, #2
 8014afe:	2001      	movmi	r0, #1
 8014b00:	600b      	strmi	r3, [r1, #0]
 8014b02:	bf5c      	itt	pl
 8014b04:	600b      	strpl	r3, [r1, #0]
 8014b06:	2002      	movpl	r0, #2
 8014b08:	4770      	bx	lr
 8014b0a:	b298      	uxth	r0, r3
 8014b0c:	b9b0      	cbnz	r0, 8014b3c <__lo0bits+0x54>
 8014b0e:	0c1b      	lsrs	r3, r3, #16
 8014b10:	2010      	movs	r0, #16
 8014b12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014b16:	bf04      	itt	eq
 8014b18:	0a1b      	lsreq	r3, r3, #8
 8014b1a:	3008      	addeq	r0, #8
 8014b1c:	071a      	lsls	r2, r3, #28
 8014b1e:	bf04      	itt	eq
 8014b20:	091b      	lsreq	r3, r3, #4
 8014b22:	3004      	addeq	r0, #4
 8014b24:	079a      	lsls	r2, r3, #30
 8014b26:	bf04      	itt	eq
 8014b28:	089b      	lsreq	r3, r3, #2
 8014b2a:	3002      	addeq	r0, #2
 8014b2c:	07da      	lsls	r2, r3, #31
 8014b2e:	d403      	bmi.n	8014b38 <__lo0bits+0x50>
 8014b30:	085b      	lsrs	r3, r3, #1
 8014b32:	f100 0001 	add.w	r0, r0, #1
 8014b36:	d005      	beq.n	8014b44 <__lo0bits+0x5c>
 8014b38:	600b      	str	r3, [r1, #0]
 8014b3a:	4770      	bx	lr
 8014b3c:	4610      	mov	r0, r2
 8014b3e:	e7e8      	b.n	8014b12 <__lo0bits+0x2a>
 8014b40:	2000      	movs	r0, #0
 8014b42:	4770      	bx	lr
 8014b44:	2020      	movs	r0, #32
 8014b46:	4770      	bx	lr

08014b48 <__i2b>:
 8014b48:	b510      	push	{r4, lr}
 8014b4a:	460c      	mov	r4, r1
 8014b4c:	2101      	movs	r1, #1
 8014b4e:	f7ff feb5 	bl	80148bc <_Balloc>
 8014b52:	4602      	mov	r2, r0
 8014b54:	b928      	cbnz	r0, 8014b62 <__i2b+0x1a>
 8014b56:	4b05      	ldr	r3, [pc, #20]	; (8014b6c <__i2b+0x24>)
 8014b58:	4805      	ldr	r0, [pc, #20]	; (8014b70 <__i2b+0x28>)
 8014b5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014b5e:	f7fe fc67 	bl	8013430 <__assert_func>
 8014b62:	2301      	movs	r3, #1
 8014b64:	6144      	str	r4, [r0, #20]
 8014b66:	6103      	str	r3, [r0, #16]
 8014b68:	bd10      	pop	{r4, pc}
 8014b6a:	bf00      	nop
 8014b6c:	0802a0a9 	.word	0x0802a0a9
 8014b70:	0802a138 	.word	0x0802a138

08014b74 <__multiply>:
 8014b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b78:	4614      	mov	r4, r2
 8014b7a:	690a      	ldr	r2, [r1, #16]
 8014b7c:	6923      	ldr	r3, [r4, #16]
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	bfb8      	it	lt
 8014b82:	460b      	movlt	r3, r1
 8014b84:	460d      	mov	r5, r1
 8014b86:	bfbc      	itt	lt
 8014b88:	4625      	movlt	r5, r4
 8014b8a:	461c      	movlt	r4, r3
 8014b8c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014b90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014b94:	68ab      	ldr	r3, [r5, #8]
 8014b96:	6869      	ldr	r1, [r5, #4]
 8014b98:	eb0a 0709 	add.w	r7, sl, r9
 8014b9c:	42bb      	cmp	r3, r7
 8014b9e:	b085      	sub	sp, #20
 8014ba0:	bfb8      	it	lt
 8014ba2:	3101      	addlt	r1, #1
 8014ba4:	f7ff fe8a 	bl	80148bc <_Balloc>
 8014ba8:	b930      	cbnz	r0, 8014bb8 <__multiply+0x44>
 8014baa:	4602      	mov	r2, r0
 8014bac:	4b42      	ldr	r3, [pc, #264]	; (8014cb8 <__multiply+0x144>)
 8014bae:	4843      	ldr	r0, [pc, #268]	; (8014cbc <__multiply+0x148>)
 8014bb0:	f240 115d 	movw	r1, #349	; 0x15d
 8014bb4:	f7fe fc3c 	bl	8013430 <__assert_func>
 8014bb8:	f100 0614 	add.w	r6, r0, #20
 8014bbc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014bc0:	4633      	mov	r3, r6
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	4543      	cmp	r3, r8
 8014bc6:	d31e      	bcc.n	8014c06 <__multiply+0x92>
 8014bc8:	f105 0c14 	add.w	ip, r5, #20
 8014bcc:	f104 0314 	add.w	r3, r4, #20
 8014bd0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014bd4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014bd8:	9202      	str	r2, [sp, #8]
 8014bda:	ebac 0205 	sub.w	r2, ip, r5
 8014bde:	3a15      	subs	r2, #21
 8014be0:	f022 0203 	bic.w	r2, r2, #3
 8014be4:	3204      	adds	r2, #4
 8014be6:	f105 0115 	add.w	r1, r5, #21
 8014bea:	458c      	cmp	ip, r1
 8014bec:	bf38      	it	cc
 8014bee:	2204      	movcc	r2, #4
 8014bf0:	9201      	str	r2, [sp, #4]
 8014bf2:	9a02      	ldr	r2, [sp, #8]
 8014bf4:	9303      	str	r3, [sp, #12]
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d808      	bhi.n	8014c0c <__multiply+0x98>
 8014bfa:	2f00      	cmp	r7, #0
 8014bfc:	dc55      	bgt.n	8014caa <__multiply+0x136>
 8014bfe:	6107      	str	r7, [r0, #16]
 8014c00:	b005      	add	sp, #20
 8014c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c06:	f843 2b04 	str.w	r2, [r3], #4
 8014c0a:	e7db      	b.n	8014bc4 <__multiply+0x50>
 8014c0c:	f8b3 a000 	ldrh.w	sl, [r3]
 8014c10:	f1ba 0f00 	cmp.w	sl, #0
 8014c14:	d020      	beq.n	8014c58 <__multiply+0xe4>
 8014c16:	f105 0e14 	add.w	lr, r5, #20
 8014c1a:	46b1      	mov	r9, r6
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014c22:	f8d9 b000 	ldr.w	fp, [r9]
 8014c26:	b2a1      	uxth	r1, r4
 8014c28:	fa1f fb8b 	uxth.w	fp, fp
 8014c2c:	fb0a b101 	mla	r1, sl, r1, fp
 8014c30:	4411      	add	r1, r2
 8014c32:	f8d9 2000 	ldr.w	r2, [r9]
 8014c36:	0c24      	lsrs	r4, r4, #16
 8014c38:	0c12      	lsrs	r2, r2, #16
 8014c3a:	fb0a 2404 	mla	r4, sl, r4, r2
 8014c3e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014c42:	b289      	uxth	r1, r1
 8014c44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014c48:	45f4      	cmp	ip, lr
 8014c4a:	f849 1b04 	str.w	r1, [r9], #4
 8014c4e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014c52:	d8e4      	bhi.n	8014c1e <__multiply+0xaa>
 8014c54:	9901      	ldr	r1, [sp, #4]
 8014c56:	5072      	str	r2, [r6, r1]
 8014c58:	9a03      	ldr	r2, [sp, #12]
 8014c5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014c5e:	3304      	adds	r3, #4
 8014c60:	f1b9 0f00 	cmp.w	r9, #0
 8014c64:	d01f      	beq.n	8014ca6 <__multiply+0x132>
 8014c66:	6834      	ldr	r4, [r6, #0]
 8014c68:	f105 0114 	add.w	r1, r5, #20
 8014c6c:	46b6      	mov	lr, r6
 8014c6e:	f04f 0a00 	mov.w	sl, #0
 8014c72:	880a      	ldrh	r2, [r1, #0]
 8014c74:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014c78:	fb09 b202 	mla	r2, r9, r2, fp
 8014c7c:	4492      	add	sl, r2
 8014c7e:	b2a4      	uxth	r4, r4
 8014c80:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014c84:	f84e 4b04 	str.w	r4, [lr], #4
 8014c88:	f851 4b04 	ldr.w	r4, [r1], #4
 8014c8c:	f8be 2000 	ldrh.w	r2, [lr]
 8014c90:	0c24      	lsrs	r4, r4, #16
 8014c92:	fb09 2404 	mla	r4, r9, r4, r2
 8014c96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014c9a:	458c      	cmp	ip, r1
 8014c9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014ca0:	d8e7      	bhi.n	8014c72 <__multiply+0xfe>
 8014ca2:	9a01      	ldr	r2, [sp, #4]
 8014ca4:	50b4      	str	r4, [r6, r2]
 8014ca6:	3604      	adds	r6, #4
 8014ca8:	e7a3      	b.n	8014bf2 <__multiply+0x7e>
 8014caa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d1a5      	bne.n	8014bfe <__multiply+0x8a>
 8014cb2:	3f01      	subs	r7, #1
 8014cb4:	e7a1      	b.n	8014bfa <__multiply+0x86>
 8014cb6:	bf00      	nop
 8014cb8:	0802a0a9 	.word	0x0802a0a9
 8014cbc:	0802a138 	.word	0x0802a138

08014cc0 <__pow5mult>:
 8014cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014cc4:	4615      	mov	r5, r2
 8014cc6:	f012 0203 	ands.w	r2, r2, #3
 8014cca:	4606      	mov	r6, r0
 8014ccc:	460f      	mov	r7, r1
 8014cce:	d007      	beq.n	8014ce0 <__pow5mult+0x20>
 8014cd0:	4c25      	ldr	r4, [pc, #148]	; (8014d68 <__pow5mult+0xa8>)
 8014cd2:	3a01      	subs	r2, #1
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014cda:	f7ff fe51 	bl	8014980 <__multadd>
 8014cde:	4607      	mov	r7, r0
 8014ce0:	10ad      	asrs	r5, r5, #2
 8014ce2:	d03d      	beq.n	8014d60 <__pow5mult+0xa0>
 8014ce4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014ce6:	b97c      	cbnz	r4, 8014d08 <__pow5mult+0x48>
 8014ce8:	2010      	movs	r0, #16
 8014cea:	f7ff fdbf 	bl	801486c <malloc>
 8014cee:	4602      	mov	r2, r0
 8014cf0:	6270      	str	r0, [r6, #36]	; 0x24
 8014cf2:	b928      	cbnz	r0, 8014d00 <__pow5mult+0x40>
 8014cf4:	4b1d      	ldr	r3, [pc, #116]	; (8014d6c <__pow5mult+0xac>)
 8014cf6:	481e      	ldr	r0, [pc, #120]	; (8014d70 <__pow5mult+0xb0>)
 8014cf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014cfc:	f7fe fb98 	bl	8013430 <__assert_func>
 8014d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014d04:	6004      	str	r4, [r0, #0]
 8014d06:	60c4      	str	r4, [r0, #12]
 8014d08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014d10:	b94c      	cbnz	r4, 8014d26 <__pow5mult+0x66>
 8014d12:	f240 2171 	movw	r1, #625	; 0x271
 8014d16:	4630      	mov	r0, r6
 8014d18:	f7ff ff16 	bl	8014b48 <__i2b>
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014d22:	4604      	mov	r4, r0
 8014d24:	6003      	str	r3, [r0, #0]
 8014d26:	f04f 0900 	mov.w	r9, #0
 8014d2a:	07eb      	lsls	r3, r5, #31
 8014d2c:	d50a      	bpl.n	8014d44 <__pow5mult+0x84>
 8014d2e:	4639      	mov	r1, r7
 8014d30:	4622      	mov	r2, r4
 8014d32:	4630      	mov	r0, r6
 8014d34:	f7ff ff1e 	bl	8014b74 <__multiply>
 8014d38:	4639      	mov	r1, r7
 8014d3a:	4680      	mov	r8, r0
 8014d3c:	4630      	mov	r0, r6
 8014d3e:	f7ff fdfd 	bl	801493c <_Bfree>
 8014d42:	4647      	mov	r7, r8
 8014d44:	106d      	asrs	r5, r5, #1
 8014d46:	d00b      	beq.n	8014d60 <__pow5mult+0xa0>
 8014d48:	6820      	ldr	r0, [r4, #0]
 8014d4a:	b938      	cbnz	r0, 8014d5c <__pow5mult+0x9c>
 8014d4c:	4622      	mov	r2, r4
 8014d4e:	4621      	mov	r1, r4
 8014d50:	4630      	mov	r0, r6
 8014d52:	f7ff ff0f 	bl	8014b74 <__multiply>
 8014d56:	6020      	str	r0, [r4, #0]
 8014d58:	f8c0 9000 	str.w	r9, [r0]
 8014d5c:	4604      	mov	r4, r0
 8014d5e:	e7e4      	b.n	8014d2a <__pow5mult+0x6a>
 8014d60:	4638      	mov	r0, r7
 8014d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d66:	bf00      	nop
 8014d68:	0802a288 	.word	0x0802a288
 8014d6c:	08029e88 	.word	0x08029e88
 8014d70:	0802a138 	.word	0x0802a138

08014d74 <__lshift>:
 8014d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d78:	460c      	mov	r4, r1
 8014d7a:	6849      	ldr	r1, [r1, #4]
 8014d7c:	6923      	ldr	r3, [r4, #16]
 8014d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014d82:	68a3      	ldr	r3, [r4, #8]
 8014d84:	4607      	mov	r7, r0
 8014d86:	4691      	mov	r9, r2
 8014d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d8c:	f108 0601 	add.w	r6, r8, #1
 8014d90:	42b3      	cmp	r3, r6
 8014d92:	db0b      	blt.n	8014dac <__lshift+0x38>
 8014d94:	4638      	mov	r0, r7
 8014d96:	f7ff fd91 	bl	80148bc <_Balloc>
 8014d9a:	4605      	mov	r5, r0
 8014d9c:	b948      	cbnz	r0, 8014db2 <__lshift+0x3e>
 8014d9e:	4602      	mov	r2, r0
 8014da0:	4b28      	ldr	r3, [pc, #160]	; (8014e44 <__lshift+0xd0>)
 8014da2:	4829      	ldr	r0, [pc, #164]	; (8014e48 <__lshift+0xd4>)
 8014da4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014da8:	f7fe fb42 	bl	8013430 <__assert_func>
 8014dac:	3101      	adds	r1, #1
 8014dae:	005b      	lsls	r3, r3, #1
 8014db0:	e7ee      	b.n	8014d90 <__lshift+0x1c>
 8014db2:	2300      	movs	r3, #0
 8014db4:	f100 0114 	add.w	r1, r0, #20
 8014db8:	f100 0210 	add.w	r2, r0, #16
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	4553      	cmp	r3, sl
 8014dc0:	db33      	blt.n	8014e2a <__lshift+0xb6>
 8014dc2:	6920      	ldr	r0, [r4, #16]
 8014dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014dc8:	f104 0314 	add.w	r3, r4, #20
 8014dcc:	f019 091f 	ands.w	r9, r9, #31
 8014dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014dd8:	d02b      	beq.n	8014e32 <__lshift+0xbe>
 8014dda:	f1c9 0e20 	rsb	lr, r9, #32
 8014dde:	468a      	mov	sl, r1
 8014de0:	2200      	movs	r2, #0
 8014de2:	6818      	ldr	r0, [r3, #0]
 8014de4:	fa00 f009 	lsl.w	r0, r0, r9
 8014de8:	4302      	orrs	r2, r0
 8014dea:	f84a 2b04 	str.w	r2, [sl], #4
 8014dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8014df2:	459c      	cmp	ip, r3
 8014df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8014df8:	d8f3      	bhi.n	8014de2 <__lshift+0x6e>
 8014dfa:	ebac 0304 	sub.w	r3, ip, r4
 8014dfe:	3b15      	subs	r3, #21
 8014e00:	f023 0303 	bic.w	r3, r3, #3
 8014e04:	3304      	adds	r3, #4
 8014e06:	f104 0015 	add.w	r0, r4, #21
 8014e0a:	4584      	cmp	ip, r0
 8014e0c:	bf38      	it	cc
 8014e0e:	2304      	movcc	r3, #4
 8014e10:	50ca      	str	r2, [r1, r3]
 8014e12:	b10a      	cbz	r2, 8014e18 <__lshift+0xa4>
 8014e14:	f108 0602 	add.w	r6, r8, #2
 8014e18:	3e01      	subs	r6, #1
 8014e1a:	4638      	mov	r0, r7
 8014e1c:	612e      	str	r6, [r5, #16]
 8014e1e:	4621      	mov	r1, r4
 8014e20:	f7ff fd8c 	bl	801493c <_Bfree>
 8014e24:	4628      	mov	r0, r5
 8014e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014e2e:	3301      	adds	r3, #1
 8014e30:	e7c5      	b.n	8014dbe <__lshift+0x4a>
 8014e32:	3904      	subs	r1, #4
 8014e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e38:	f841 2f04 	str.w	r2, [r1, #4]!
 8014e3c:	459c      	cmp	ip, r3
 8014e3e:	d8f9      	bhi.n	8014e34 <__lshift+0xc0>
 8014e40:	e7ea      	b.n	8014e18 <__lshift+0xa4>
 8014e42:	bf00      	nop
 8014e44:	0802a0a9 	.word	0x0802a0a9
 8014e48:	0802a138 	.word	0x0802a138

08014e4c <__mcmp>:
 8014e4c:	b530      	push	{r4, r5, lr}
 8014e4e:	6902      	ldr	r2, [r0, #16]
 8014e50:	690c      	ldr	r4, [r1, #16]
 8014e52:	1b12      	subs	r2, r2, r4
 8014e54:	d10e      	bne.n	8014e74 <__mcmp+0x28>
 8014e56:	f100 0314 	add.w	r3, r0, #20
 8014e5a:	3114      	adds	r1, #20
 8014e5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014e60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014e64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014e68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014e6c:	42a5      	cmp	r5, r4
 8014e6e:	d003      	beq.n	8014e78 <__mcmp+0x2c>
 8014e70:	d305      	bcc.n	8014e7e <__mcmp+0x32>
 8014e72:	2201      	movs	r2, #1
 8014e74:	4610      	mov	r0, r2
 8014e76:	bd30      	pop	{r4, r5, pc}
 8014e78:	4283      	cmp	r3, r0
 8014e7a:	d3f3      	bcc.n	8014e64 <__mcmp+0x18>
 8014e7c:	e7fa      	b.n	8014e74 <__mcmp+0x28>
 8014e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8014e82:	e7f7      	b.n	8014e74 <__mcmp+0x28>

08014e84 <__mdiff>:
 8014e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e88:	460c      	mov	r4, r1
 8014e8a:	4606      	mov	r6, r0
 8014e8c:	4611      	mov	r1, r2
 8014e8e:	4620      	mov	r0, r4
 8014e90:	4617      	mov	r7, r2
 8014e92:	f7ff ffdb 	bl	8014e4c <__mcmp>
 8014e96:	1e05      	subs	r5, r0, #0
 8014e98:	d110      	bne.n	8014ebc <__mdiff+0x38>
 8014e9a:	4629      	mov	r1, r5
 8014e9c:	4630      	mov	r0, r6
 8014e9e:	f7ff fd0d 	bl	80148bc <_Balloc>
 8014ea2:	b930      	cbnz	r0, 8014eb2 <__mdiff+0x2e>
 8014ea4:	4b39      	ldr	r3, [pc, #228]	; (8014f8c <__mdiff+0x108>)
 8014ea6:	4602      	mov	r2, r0
 8014ea8:	f240 2132 	movw	r1, #562	; 0x232
 8014eac:	4838      	ldr	r0, [pc, #224]	; (8014f90 <__mdiff+0x10c>)
 8014eae:	f7fe fabf 	bl	8013430 <__assert_func>
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014eb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ebc:	bfa4      	itt	ge
 8014ebe:	463b      	movge	r3, r7
 8014ec0:	4627      	movge	r7, r4
 8014ec2:	4630      	mov	r0, r6
 8014ec4:	6879      	ldr	r1, [r7, #4]
 8014ec6:	bfa6      	itte	ge
 8014ec8:	461c      	movge	r4, r3
 8014eca:	2500      	movge	r5, #0
 8014ecc:	2501      	movlt	r5, #1
 8014ece:	f7ff fcf5 	bl	80148bc <_Balloc>
 8014ed2:	b920      	cbnz	r0, 8014ede <__mdiff+0x5a>
 8014ed4:	4b2d      	ldr	r3, [pc, #180]	; (8014f8c <__mdiff+0x108>)
 8014ed6:	4602      	mov	r2, r0
 8014ed8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014edc:	e7e6      	b.n	8014eac <__mdiff+0x28>
 8014ede:	693e      	ldr	r6, [r7, #16]
 8014ee0:	60c5      	str	r5, [r0, #12]
 8014ee2:	6925      	ldr	r5, [r4, #16]
 8014ee4:	f107 0114 	add.w	r1, r7, #20
 8014ee8:	f104 0914 	add.w	r9, r4, #20
 8014eec:	f100 0e14 	add.w	lr, r0, #20
 8014ef0:	f107 0210 	add.w	r2, r7, #16
 8014ef4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014ef8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014efc:	46f2      	mov	sl, lr
 8014efe:	2700      	movs	r7, #0
 8014f00:	f859 3b04 	ldr.w	r3, [r9], #4
 8014f04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014f08:	fa1f f883 	uxth.w	r8, r3
 8014f0c:	fa17 f78b 	uxtah	r7, r7, fp
 8014f10:	0c1b      	lsrs	r3, r3, #16
 8014f12:	eba7 0808 	sub.w	r8, r7, r8
 8014f16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014f1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014f1e:	fa1f f888 	uxth.w	r8, r8
 8014f22:	141f      	asrs	r7, r3, #16
 8014f24:	454d      	cmp	r5, r9
 8014f26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014f2a:	f84a 3b04 	str.w	r3, [sl], #4
 8014f2e:	d8e7      	bhi.n	8014f00 <__mdiff+0x7c>
 8014f30:	1b2b      	subs	r3, r5, r4
 8014f32:	3b15      	subs	r3, #21
 8014f34:	f023 0303 	bic.w	r3, r3, #3
 8014f38:	3304      	adds	r3, #4
 8014f3a:	3415      	adds	r4, #21
 8014f3c:	42a5      	cmp	r5, r4
 8014f3e:	bf38      	it	cc
 8014f40:	2304      	movcc	r3, #4
 8014f42:	4419      	add	r1, r3
 8014f44:	4473      	add	r3, lr
 8014f46:	469e      	mov	lr, r3
 8014f48:	460d      	mov	r5, r1
 8014f4a:	4565      	cmp	r5, ip
 8014f4c:	d30e      	bcc.n	8014f6c <__mdiff+0xe8>
 8014f4e:	f10c 0203 	add.w	r2, ip, #3
 8014f52:	1a52      	subs	r2, r2, r1
 8014f54:	f022 0203 	bic.w	r2, r2, #3
 8014f58:	3903      	subs	r1, #3
 8014f5a:	458c      	cmp	ip, r1
 8014f5c:	bf38      	it	cc
 8014f5e:	2200      	movcc	r2, #0
 8014f60:	441a      	add	r2, r3
 8014f62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014f66:	b17b      	cbz	r3, 8014f88 <__mdiff+0x104>
 8014f68:	6106      	str	r6, [r0, #16]
 8014f6a:	e7a5      	b.n	8014eb8 <__mdiff+0x34>
 8014f6c:	f855 8b04 	ldr.w	r8, [r5], #4
 8014f70:	fa17 f488 	uxtah	r4, r7, r8
 8014f74:	1422      	asrs	r2, r4, #16
 8014f76:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014f7a:	b2a4      	uxth	r4, r4
 8014f7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014f80:	f84e 4b04 	str.w	r4, [lr], #4
 8014f84:	1417      	asrs	r7, r2, #16
 8014f86:	e7e0      	b.n	8014f4a <__mdiff+0xc6>
 8014f88:	3e01      	subs	r6, #1
 8014f8a:	e7ea      	b.n	8014f62 <__mdiff+0xde>
 8014f8c:	0802a0a9 	.word	0x0802a0a9
 8014f90:	0802a138 	.word	0x0802a138

08014f94 <__ulp>:
 8014f94:	b082      	sub	sp, #8
 8014f96:	ed8d 0b00 	vstr	d0, [sp]
 8014f9a:	9b01      	ldr	r3, [sp, #4]
 8014f9c:	4912      	ldr	r1, [pc, #72]	; (8014fe8 <__ulp+0x54>)
 8014f9e:	4019      	ands	r1, r3
 8014fa0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8014fa4:	2900      	cmp	r1, #0
 8014fa6:	dd05      	ble.n	8014fb4 <__ulp+0x20>
 8014fa8:	2200      	movs	r2, #0
 8014faa:	460b      	mov	r3, r1
 8014fac:	ec43 2b10 	vmov	d0, r2, r3
 8014fb0:	b002      	add	sp, #8
 8014fb2:	4770      	bx	lr
 8014fb4:	4249      	negs	r1, r1
 8014fb6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8014fba:	ea4f 5021 	mov.w	r0, r1, asr #20
 8014fbe:	f04f 0200 	mov.w	r2, #0
 8014fc2:	f04f 0300 	mov.w	r3, #0
 8014fc6:	da04      	bge.n	8014fd2 <__ulp+0x3e>
 8014fc8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014fcc:	fa41 f300 	asr.w	r3, r1, r0
 8014fd0:	e7ec      	b.n	8014fac <__ulp+0x18>
 8014fd2:	f1a0 0114 	sub.w	r1, r0, #20
 8014fd6:	291e      	cmp	r1, #30
 8014fd8:	bfda      	itte	le
 8014fda:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8014fde:	fa20 f101 	lsrle.w	r1, r0, r1
 8014fe2:	2101      	movgt	r1, #1
 8014fe4:	460a      	mov	r2, r1
 8014fe6:	e7e1      	b.n	8014fac <__ulp+0x18>
 8014fe8:	7ff00000 	.word	0x7ff00000

08014fec <__b2d>:
 8014fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fee:	6905      	ldr	r5, [r0, #16]
 8014ff0:	f100 0714 	add.w	r7, r0, #20
 8014ff4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014ff8:	1f2e      	subs	r6, r5, #4
 8014ffa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014ffe:	4620      	mov	r0, r4
 8015000:	f7ff fd52 	bl	8014aa8 <__hi0bits>
 8015004:	f1c0 0320 	rsb	r3, r0, #32
 8015008:	280a      	cmp	r0, #10
 801500a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015088 <__b2d+0x9c>
 801500e:	600b      	str	r3, [r1, #0]
 8015010:	dc14      	bgt.n	801503c <__b2d+0x50>
 8015012:	f1c0 0e0b 	rsb	lr, r0, #11
 8015016:	fa24 f10e 	lsr.w	r1, r4, lr
 801501a:	42b7      	cmp	r7, r6
 801501c:	ea41 030c 	orr.w	r3, r1, ip
 8015020:	bf34      	ite	cc
 8015022:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015026:	2100      	movcs	r1, #0
 8015028:	3015      	adds	r0, #21
 801502a:	fa04 f000 	lsl.w	r0, r4, r0
 801502e:	fa21 f10e 	lsr.w	r1, r1, lr
 8015032:	ea40 0201 	orr.w	r2, r0, r1
 8015036:	ec43 2b10 	vmov	d0, r2, r3
 801503a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801503c:	42b7      	cmp	r7, r6
 801503e:	bf3a      	itte	cc
 8015040:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015044:	f1a5 0608 	subcc.w	r6, r5, #8
 8015048:	2100      	movcs	r1, #0
 801504a:	380b      	subs	r0, #11
 801504c:	d017      	beq.n	801507e <__b2d+0x92>
 801504e:	f1c0 0c20 	rsb	ip, r0, #32
 8015052:	fa04 f500 	lsl.w	r5, r4, r0
 8015056:	42be      	cmp	r6, r7
 8015058:	fa21 f40c 	lsr.w	r4, r1, ip
 801505c:	ea45 0504 	orr.w	r5, r5, r4
 8015060:	bf8c      	ite	hi
 8015062:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015066:	2400      	movls	r4, #0
 8015068:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801506c:	fa01 f000 	lsl.w	r0, r1, r0
 8015070:	fa24 f40c 	lsr.w	r4, r4, ip
 8015074:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015078:	ea40 0204 	orr.w	r2, r0, r4
 801507c:	e7db      	b.n	8015036 <__b2d+0x4a>
 801507e:	ea44 030c 	orr.w	r3, r4, ip
 8015082:	460a      	mov	r2, r1
 8015084:	e7d7      	b.n	8015036 <__b2d+0x4a>
 8015086:	bf00      	nop
 8015088:	3ff00000 	.word	0x3ff00000

0801508c <__d2b>:
 801508c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015090:	4689      	mov	r9, r1
 8015092:	2101      	movs	r1, #1
 8015094:	ec57 6b10 	vmov	r6, r7, d0
 8015098:	4690      	mov	r8, r2
 801509a:	f7ff fc0f 	bl	80148bc <_Balloc>
 801509e:	4604      	mov	r4, r0
 80150a0:	b930      	cbnz	r0, 80150b0 <__d2b+0x24>
 80150a2:	4602      	mov	r2, r0
 80150a4:	4b25      	ldr	r3, [pc, #148]	; (801513c <__d2b+0xb0>)
 80150a6:	4826      	ldr	r0, [pc, #152]	; (8015140 <__d2b+0xb4>)
 80150a8:	f240 310a 	movw	r1, #778	; 0x30a
 80150ac:	f7fe f9c0 	bl	8013430 <__assert_func>
 80150b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80150b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80150b8:	bb35      	cbnz	r5, 8015108 <__d2b+0x7c>
 80150ba:	2e00      	cmp	r6, #0
 80150bc:	9301      	str	r3, [sp, #4]
 80150be:	d028      	beq.n	8015112 <__d2b+0x86>
 80150c0:	4668      	mov	r0, sp
 80150c2:	9600      	str	r6, [sp, #0]
 80150c4:	f7ff fd10 	bl	8014ae8 <__lo0bits>
 80150c8:	9900      	ldr	r1, [sp, #0]
 80150ca:	b300      	cbz	r0, 801510e <__d2b+0x82>
 80150cc:	9a01      	ldr	r2, [sp, #4]
 80150ce:	f1c0 0320 	rsb	r3, r0, #32
 80150d2:	fa02 f303 	lsl.w	r3, r2, r3
 80150d6:	430b      	orrs	r3, r1
 80150d8:	40c2      	lsrs	r2, r0
 80150da:	6163      	str	r3, [r4, #20]
 80150dc:	9201      	str	r2, [sp, #4]
 80150de:	9b01      	ldr	r3, [sp, #4]
 80150e0:	61a3      	str	r3, [r4, #24]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	bf14      	ite	ne
 80150e6:	2202      	movne	r2, #2
 80150e8:	2201      	moveq	r2, #1
 80150ea:	6122      	str	r2, [r4, #16]
 80150ec:	b1d5      	cbz	r5, 8015124 <__d2b+0x98>
 80150ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80150f2:	4405      	add	r5, r0
 80150f4:	f8c9 5000 	str.w	r5, [r9]
 80150f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80150fc:	f8c8 0000 	str.w	r0, [r8]
 8015100:	4620      	mov	r0, r4
 8015102:	b003      	add	sp, #12
 8015104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801510c:	e7d5      	b.n	80150ba <__d2b+0x2e>
 801510e:	6161      	str	r1, [r4, #20]
 8015110:	e7e5      	b.n	80150de <__d2b+0x52>
 8015112:	a801      	add	r0, sp, #4
 8015114:	f7ff fce8 	bl	8014ae8 <__lo0bits>
 8015118:	9b01      	ldr	r3, [sp, #4]
 801511a:	6163      	str	r3, [r4, #20]
 801511c:	2201      	movs	r2, #1
 801511e:	6122      	str	r2, [r4, #16]
 8015120:	3020      	adds	r0, #32
 8015122:	e7e3      	b.n	80150ec <__d2b+0x60>
 8015124:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015128:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801512c:	f8c9 0000 	str.w	r0, [r9]
 8015130:	6918      	ldr	r0, [r3, #16]
 8015132:	f7ff fcb9 	bl	8014aa8 <__hi0bits>
 8015136:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801513a:	e7df      	b.n	80150fc <__d2b+0x70>
 801513c:	0802a0a9 	.word	0x0802a0a9
 8015140:	0802a138 	.word	0x0802a138

08015144 <__ratio>:
 8015144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015148:	4688      	mov	r8, r1
 801514a:	4669      	mov	r1, sp
 801514c:	4681      	mov	r9, r0
 801514e:	f7ff ff4d 	bl	8014fec <__b2d>
 8015152:	a901      	add	r1, sp, #4
 8015154:	4640      	mov	r0, r8
 8015156:	ec55 4b10 	vmov	r4, r5, d0
 801515a:	f7ff ff47 	bl	8014fec <__b2d>
 801515e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015162:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015166:	eba3 0c02 	sub.w	ip, r3, r2
 801516a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801516e:	1a9b      	subs	r3, r3, r2
 8015170:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015174:	ec51 0b10 	vmov	r0, r1, d0
 8015178:	2b00      	cmp	r3, #0
 801517a:	bfd6      	itet	le
 801517c:	460a      	movle	r2, r1
 801517e:	462a      	movgt	r2, r5
 8015180:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015184:	468b      	mov	fp, r1
 8015186:	462f      	mov	r7, r5
 8015188:	bfd4      	ite	le
 801518a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801518e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015192:	4620      	mov	r0, r4
 8015194:	ee10 2a10 	vmov	r2, s0
 8015198:	465b      	mov	r3, fp
 801519a:	4639      	mov	r1, r7
 801519c:	f7eb fb6e 	bl	800087c <__aeabi_ddiv>
 80151a0:	ec41 0b10 	vmov	d0, r0, r1
 80151a4:	b003      	add	sp, #12
 80151a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080151aa <__copybits>:
 80151aa:	3901      	subs	r1, #1
 80151ac:	b570      	push	{r4, r5, r6, lr}
 80151ae:	1149      	asrs	r1, r1, #5
 80151b0:	6914      	ldr	r4, [r2, #16]
 80151b2:	3101      	adds	r1, #1
 80151b4:	f102 0314 	add.w	r3, r2, #20
 80151b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80151bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80151c0:	1f05      	subs	r5, r0, #4
 80151c2:	42a3      	cmp	r3, r4
 80151c4:	d30c      	bcc.n	80151e0 <__copybits+0x36>
 80151c6:	1aa3      	subs	r3, r4, r2
 80151c8:	3b11      	subs	r3, #17
 80151ca:	f023 0303 	bic.w	r3, r3, #3
 80151ce:	3211      	adds	r2, #17
 80151d0:	42a2      	cmp	r2, r4
 80151d2:	bf88      	it	hi
 80151d4:	2300      	movhi	r3, #0
 80151d6:	4418      	add	r0, r3
 80151d8:	2300      	movs	r3, #0
 80151da:	4288      	cmp	r0, r1
 80151dc:	d305      	bcc.n	80151ea <__copybits+0x40>
 80151de:	bd70      	pop	{r4, r5, r6, pc}
 80151e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80151e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80151e8:	e7eb      	b.n	80151c2 <__copybits+0x18>
 80151ea:	f840 3b04 	str.w	r3, [r0], #4
 80151ee:	e7f4      	b.n	80151da <__copybits+0x30>

080151f0 <__any_on>:
 80151f0:	f100 0214 	add.w	r2, r0, #20
 80151f4:	6900      	ldr	r0, [r0, #16]
 80151f6:	114b      	asrs	r3, r1, #5
 80151f8:	4298      	cmp	r0, r3
 80151fa:	b510      	push	{r4, lr}
 80151fc:	db11      	blt.n	8015222 <__any_on+0x32>
 80151fe:	dd0a      	ble.n	8015216 <__any_on+0x26>
 8015200:	f011 011f 	ands.w	r1, r1, #31
 8015204:	d007      	beq.n	8015216 <__any_on+0x26>
 8015206:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801520a:	fa24 f001 	lsr.w	r0, r4, r1
 801520e:	fa00 f101 	lsl.w	r1, r0, r1
 8015212:	428c      	cmp	r4, r1
 8015214:	d10b      	bne.n	801522e <__any_on+0x3e>
 8015216:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801521a:	4293      	cmp	r3, r2
 801521c:	d803      	bhi.n	8015226 <__any_on+0x36>
 801521e:	2000      	movs	r0, #0
 8015220:	bd10      	pop	{r4, pc}
 8015222:	4603      	mov	r3, r0
 8015224:	e7f7      	b.n	8015216 <__any_on+0x26>
 8015226:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801522a:	2900      	cmp	r1, #0
 801522c:	d0f5      	beq.n	801521a <__any_on+0x2a>
 801522e:	2001      	movs	r0, #1
 8015230:	e7f6      	b.n	8015220 <__any_on+0x30>

08015232 <_calloc_r>:
 8015232:	b513      	push	{r0, r1, r4, lr}
 8015234:	434a      	muls	r2, r1
 8015236:	4611      	mov	r1, r2
 8015238:	9201      	str	r2, [sp, #4]
 801523a:	f000 f859 	bl	80152f0 <_malloc_r>
 801523e:	4604      	mov	r4, r0
 8015240:	b118      	cbz	r0, 801524a <_calloc_r+0x18>
 8015242:	9a01      	ldr	r2, [sp, #4]
 8015244:	2100      	movs	r1, #0
 8015246:	f7fc fb25 	bl	8011894 <memset>
 801524a:	4620      	mov	r0, r4
 801524c:	b002      	add	sp, #8
 801524e:	bd10      	pop	{r4, pc}

08015250 <_free_r>:
 8015250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015252:	2900      	cmp	r1, #0
 8015254:	d048      	beq.n	80152e8 <_free_r+0x98>
 8015256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801525a:	9001      	str	r0, [sp, #4]
 801525c:	2b00      	cmp	r3, #0
 801525e:	f1a1 0404 	sub.w	r4, r1, #4
 8015262:	bfb8      	it	lt
 8015264:	18e4      	addlt	r4, r4, r3
 8015266:	f000 fe8b 	bl	8015f80 <__malloc_lock>
 801526a:	4a20      	ldr	r2, [pc, #128]	; (80152ec <_free_r+0x9c>)
 801526c:	9801      	ldr	r0, [sp, #4]
 801526e:	6813      	ldr	r3, [r2, #0]
 8015270:	4615      	mov	r5, r2
 8015272:	b933      	cbnz	r3, 8015282 <_free_r+0x32>
 8015274:	6063      	str	r3, [r4, #4]
 8015276:	6014      	str	r4, [r2, #0]
 8015278:	b003      	add	sp, #12
 801527a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801527e:	f000 be85 	b.w	8015f8c <__malloc_unlock>
 8015282:	42a3      	cmp	r3, r4
 8015284:	d90b      	bls.n	801529e <_free_r+0x4e>
 8015286:	6821      	ldr	r1, [r4, #0]
 8015288:	1862      	adds	r2, r4, r1
 801528a:	4293      	cmp	r3, r2
 801528c:	bf04      	itt	eq
 801528e:	681a      	ldreq	r2, [r3, #0]
 8015290:	685b      	ldreq	r3, [r3, #4]
 8015292:	6063      	str	r3, [r4, #4]
 8015294:	bf04      	itt	eq
 8015296:	1852      	addeq	r2, r2, r1
 8015298:	6022      	streq	r2, [r4, #0]
 801529a:	602c      	str	r4, [r5, #0]
 801529c:	e7ec      	b.n	8015278 <_free_r+0x28>
 801529e:	461a      	mov	r2, r3
 80152a0:	685b      	ldr	r3, [r3, #4]
 80152a2:	b10b      	cbz	r3, 80152a8 <_free_r+0x58>
 80152a4:	42a3      	cmp	r3, r4
 80152a6:	d9fa      	bls.n	801529e <_free_r+0x4e>
 80152a8:	6811      	ldr	r1, [r2, #0]
 80152aa:	1855      	adds	r5, r2, r1
 80152ac:	42a5      	cmp	r5, r4
 80152ae:	d10b      	bne.n	80152c8 <_free_r+0x78>
 80152b0:	6824      	ldr	r4, [r4, #0]
 80152b2:	4421      	add	r1, r4
 80152b4:	1854      	adds	r4, r2, r1
 80152b6:	42a3      	cmp	r3, r4
 80152b8:	6011      	str	r1, [r2, #0]
 80152ba:	d1dd      	bne.n	8015278 <_free_r+0x28>
 80152bc:	681c      	ldr	r4, [r3, #0]
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	6053      	str	r3, [r2, #4]
 80152c2:	4421      	add	r1, r4
 80152c4:	6011      	str	r1, [r2, #0]
 80152c6:	e7d7      	b.n	8015278 <_free_r+0x28>
 80152c8:	d902      	bls.n	80152d0 <_free_r+0x80>
 80152ca:	230c      	movs	r3, #12
 80152cc:	6003      	str	r3, [r0, #0]
 80152ce:	e7d3      	b.n	8015278 <_free_r+0x28>
 80152d0:	6825      	ldr	r5, [r4, #0]
 80152d2:	1961      	adds	r1, r4, r5
 80152d4:	428b      	cmp	r3, r1
 80152d6:	bf04      	itt	eq
 80152d8:	6819      	ldreq	r1, [r3, #0]
 80152da:	685b      	ldreq	r3, [r3, #4]
 80152dc:	6063      	str	r3, [r4, #4]
 80152de:	bf04      	itt	eq
 80152e0:	1949      	addeq	r1, r1, r5
 80152e2:	6021      	streq	r1, [r4, #0]
 80152e4:	6054      	str	r4, [r2, #4]
 80152e6:	e7c7      	b.n	8015278 <_free_r+0x28>
 80152e8:	b003      	add	sp, #12
 80152ea:	bd30      	pop	{r4, r5, pc}
 80152ec:	200002c0 	.word	0x200002c0

080152f0 <_malloc_r>:
 80152f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152f2:	1ccd      	adds	r5, r1, #3
 80152f4:	f025 0503 	bic.w	r5, r5, #3
 80152f8:	3508      	adds	r5, #8
 80152fa:	2d0c      	cmp	r5, #12
 80152fc:	bf38      	it	cc
 80152fe:	250c      	movcc	r5, #12
 8015300:	2d00      	cmp	r5, #0
 8015302:	4606      	mov	r6, r0
 8015304:	db01      	blt.n	801530a <_malloc_r+0x1a>
 8015306:	42a9      	cmp	r1, r5
 8015308:	d903      	bls.n	8015312 <_malloc_r+0x22>
 801530a:	230c      	movs	r3, #12
 801530c:	6033      	str	r3, [r6, #0]
 801530e:	2000      	movs	r0, #0
 8015310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015312:	f000 fe35 	bl	8015f80 <__malloc_lock>
 8015316:	4921      	ldr	r1, [pc, #132]	; (801539c <_malloc_r+0xac>)
 8015318:	680a      	ldr	r2, [r1, #0]
 801531a:	4614      	mov	r4, r2
 801531c:	b99c      	cbnz	r4, 8015346 <_malloc_r+0x56>
 801531e:	4f20      	ldr	r7, [pc, #128]	; (80153a0 <_malloc_r+0xb0>)
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	b923      	cbnz	r3, 801532e <_malloc_r+0x3e>
 8015324:	4621      	mov	r1, r4
 8015326:	4630      	mov	r0, r6
 8015328:	f000 fafa 	bl	8015920 <_sbrk_r>
 801532c:	6038      	str	r0, [r7, #0]
 801532e:	4629      	mov	r1, r5
 8015330:	4630      	mov	r0, r6
 8015332:	f000 faf5 	bl	8015920 <_sbrk_r>
 8015336:	1c43      	adds	r3, r0, #1
 8015338:	d123      	bne.n	8015382 <_malloc_r+0x92>
 801533a:	230c      	movs	r3, #12
 801533c:	6033      	str	r3, [r6, #0]
 801533e:	4630      	mov	r0, r6
 8015340:	f000 fe24 	bl	8015f8c <__malloc_unlock>
 8015344:	e7e3      	b.n	801530e <_malloc_r+0x1e>
 8015346:	6823      	ldr	r3, [r4, #0]
 8015348:	1b5b      	subs	r3, r3, r5
 801534a:	d417      	bmi.n	801537c <_malloc_r+0x8c>
 801534c:	2b0b      	cmp	r3, #11
 801534e:	d903      	bls.n	8015358 <_malloc_r+0x68>
 8015350:	6023      	str	r3, [r4, #0]
 8015352:	441c      	add	r4, r3
 8015354:	6025      	str	r5, [r4, #0]
 8015356:	e004      	b.n	8015362 <_malloc_r+0x72>
 8015358:	6863      	ldr	r3, [r4, #4]
 801535a:	42a2      	cmp	r2, r4
 801535c:	bf0c      	ite	eq
 801535e:	600b      	streq	r3, [r1, #0]
 8015360:	6053      	strne	r3, [r2, #4]
 8015362:	4630      	mov	r0, r6
 8015364:	f000 fe12 	bl	8015f8c <__malloc_unlock>
 8015368:	f104 000b 	add.w	r0, r4, #11
 801536c:	1d23      	adds	r3, r4, #4
 801536e:	f020 0007 	bic.w	r0, r0, #7
 8015372:	1ac2      	subs	r2, r0, r3
 8015374:	d0cc      	beq.n	8015310 <_malloc_r+0x20>
 8015376:	1a1b      	subs	r3, r3, r0
 8015378:	50a3      	str	r3, [r4, r2]
 801537a:	e7c9      	b.n	8015310 <_malloc_r+0x20>
 801537c:	4622      	mov	r2, r4
 801537e:	6864      	ldr	r4, [r4, #4]
 8015380:	e7cc      	b.n	801531c <_malloc_r+0x2c>
 8015382:	1cc4      	adds	r4, r0, #3
 8015384:	f024 0403 	bic.w	r4, r4, #3
 8015388:	42a0      	cmp	r0, r4
 801538a:	d0e3      	beq.n	8015354 <_malloc_r+0x64>
 801538c:	1a21      	subs	r1, r4, r0
 801538e:	4630      	mov	r0, r6
 8015390:	f000 fac6 	bl	8015920 <_sbrk_r>
 8015394:	3001      	adds	r0, #1
 8015396:	d1dd      	bne.n	8015354 <_malloc_r+0x64>
 8015398:	e7cf      	b.n	801533a <_malloc_r+0x4a>
 801539a:	bf00      	nop
 801539c:	200002c0 	.word	0x200002c0
 80153a0:	200002c4 	.word	0x200002c4

080153a4 <__ssputs_r>:
 80153a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153a8:	688e      	ldr	r6, [r1, #8]
 80153aa:	429e      	cmp	r6, r3
 80153ac:	4682      	mov	sl, r0
 80153ae:	460c      	mov	r4, r1
 80153b0:	4690      	mov	r8, r2
 80153b2:	461f      	mov	r7, r3
 80153b4:	d838      	bhi.n	8015428 <__ssputs_r+0x84>
 80153b6:	898a      	ldrh	r2, [r1, #12]
 80153b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80153bc:	d032      	beq.n	8015424 <__ssputs_r+0x80>
 80153be:	6825      	ldr	r5, [r4, #0]
 80153c0:	6909      	ldr	r1, [r1, #16]
 80153c2:	eba5 0901 	sub.w	r9, r5, r1
 80153c6:	6965      	ldr	r5, [r4, #20]
 80153c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80153cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80153d0:	3301      	adds	r3, #1
 80153d2:	444b      	add	r3, r9
 80153d4:	106d      	asrs	r5, r5, #1
 80153d6:	429d      	cmp	r5, r3
 80153d8:	bf38      	it	cc
 80153da:	461d      	movcc	r5, r3
 80153dc:	0553      	lsls	r3, r2, #21
 80153de:	d531      	bpl.n	8015444 <__ssputs_r+0xa0>
 80153e0:	4629      	mov	r1, r5
 80153e2:	f7ff ff85 	bl	80152f0 <_malloc_r>
 80153e6:	4606      	mov	r6, r0
 80153e8:	b950      	cbnz	r0, 8015400 <__ssputs_r+0x5c>
 80153ea:	230c      	movs	r3, #12
 80153ec:	f8ca 3000 	str.w	r3, [sl]
 80153f0:	89a3      	ldrh	r3, [r4, #12]
 80153f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153f6:	81a3      	strh	r3, [r4, #12]
 80153f8:	f04f 30ff 	mov.w	r0, #4294967295
 80153fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015400:	6921      	ldr	r1, [r4, #16]
 8015402:	464a      	mov	r2, r9
 8015404:	f7ff fa4c 	bl	80148a0 <memcpy>
 8015408:	89a3      	ldrh	r3, [r4, #12]
 801540a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801540e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015412:	81a3      	strh	r3, [r4, #12]
 8015414:	6126      	str	r6, [r4, #16]
 8015416:	6165      	str	r5, [r4, #20]
 8015418:	444e      	add	r6, r9
 801541a:	eba5 0509 	sub.w	r5, r5, r9
 801541e:	6026      	str	r6, [r4, #0]
 8015420:	60a5      	str	r5, [r4, #8]
 8015422:	463e      	mov	r6, r7
 8015424:	42be      	cmp	r6, r7
 8015426:	d900      	bls.n	801542a <__ssputs_r+0x86>
 8015428:	463e      	mov	r6, r7
 801542a:	4632      	mov	r2, r6
 801542c:	6820      	ldr	r0, [r4, #0]
 801542e:	4641      	mov	r1, r8
 8015430:	f000 fd8c 	bl	8015f4c <memmove>
 8015434:	68a3      	ldr	r3, [r4, #8]
 8015436:	6822      	ldr	r2, [r4, #0]
 8015438:	1b9b      	subs	r3, r3, r6
 801543a:	4432      	add	r2, r6
 801543c:	60a3      	str	r3, [r4, #8]
 801543e:	6022      	str	r2, [r4, #0]
 8015440:	2000      	movs	r0, #0
 8015442:	e7db      	b.n	80153fc <__ssputs_r+0x58>
 8015444:	462a      	mov	r2, r5
 8015446:	f000 fda7 	bl	8015f98 <_realloc_r>
 801544a:	4606      	mov	r6, r0
 801544c:	2800      	cmp	r0, #0
 801544e:	d1e1      	bne.n	8015414 <__ssputs_r+0x70>
 8015450:	6921      	ldr	r1, [r4, #16]
 8015452:	4650      	mov	r0, sl
 8015454:	f7ff fefc 	bl	8015250 <_free_r>
 8015458:	e7c7      	b.n	80153ea <__ssputs_r+0x46>
	...

0801545c <_svfiprintf_r>:
 801545c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015460:	4698      	mov	r8, r3
 8015462:	898b      	ldrh	r3, [r1, #12]
 8015464:	061b      	lsls	r3, r3, #24
 8015466:	b09d      	sub	sp, #116	; 0x74
 8015468:	4607      	mov	r7, r0
 801546a:	460d      	mov	r5, r1
 801546c:	4614      	mov	r4, r2
 801546e:	d50e      	bpl.n	801548e <_svfiprintf_r+0x32>
 8015470:	690b      	ldr	r3, [r1, #16]
 8015472:	b963      	cbnz	r3, 801548e <_svfiprintf_r+0x32>
 8015474:	2140      	movs	r1, #64	; 0x40
 8015476:	f7ff ff3b 	bl	80152f0 <_malloc_r>
 801547a:	6028      	str	r0, [r5, #0]
 801547c:	6128      	str	r0, [r5, #16]
 801547e:	b920      	cbnz	r0, 801548a <_svfiprintf_r+0x2e>
 8015480:	230c      	movs	r3, #12
 8015482:	603b      	str	r3, [r7, #0]
 8015484:	f04f 30ff 	mov.w	r0, #4294967295
 8015488:	e0d1      	b.n	801562e <_svfiprintf_r+0x1d2>
 801548a:	2340      	movs	r3, #64	; 0x40
 801548c:	616b      	str	r3, [r5, #20]
 801548e:	2300      	movs	r3, #0
 8015490:	9309      	str	r3, [sp, #36]	; 0x24
 8015492:	2320      	movs	r3, #32
 8015494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015498:	f8cd 800c 	str.w	r8, [sp, #12]
 801549c:	2330      	movs	r3, #48	; 0x30
 801549e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015648 <_svfiprintf_r+0x1ec>
 80154a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80154a6:	f04f 0901 	mov.w	r9, #1
 80154aa:	4623      	mov	r3, r4
 80154ac:	469a      	mov	sl, r3
 80154ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154b2:	b10a      	cbz	r2, 80154b8 <_svfiprintf_r+0x5c>
 80154b4:	2a25      	cmp	r2, #37	; 0x25
 80154b6:	d1f9      	bne.n	80154ac <_svfiprintf_r+0x50>
 80154b8:	ebba 0b04 	subs.w	fp, sl, r4
 80154bc:	d00b      	beq.n	80154d6 <_svfiprintf_r+0x7a>
 80154be:	465b      	mov	r3, fp
 80154c0:	4622      	mov	r2, r4
 80154c2:	4629      	mov	r1, r5
 80154c4:	4638      	mov	r0, r7
 80154c6:	f7ff ff6d 	bl	80153a4 <__ssputs_r>
 80154ca:	3001      	adds	r0, #1
 80154cc:	f000 80aa 	beq.w	8015624 <_svfiprintf_r+0x1c8>
 80154d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154d2:	445a      	add	r2, fp
 80154d4:	9209      	str	r2, [sp, #36]	; 0x24
 80154d6:	f89a 3000 	ldrb.w	r3, [sl]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	f000 80a2 	beq.w	8015624 <_svfiprintf_r+0x1c8>
 80154e0:	2300      	movs	r3, #0
 80154e2:	f04f 32ff 	mov.w	r2, #4294967295
 80154e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80154ea:	f10a 0a01 	add.w	sl, sl, #1
 80154ee:	9304      	str	r3, [sp, #16]
 80154f0:	9307      	str	r3, [sp, #28]
 80154f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80154f6:	931a      	str	r3, [sp, #104]	; 0x68
 80154f8:	4654      	mov	r4, sl
 80154fa:	2205      	movs	r2, #5
 80154fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015500:	4851      	ldr	r0, [pc, #324]	; (8015648 <_svfiprintf_r+0x1ec>)
 8015502:	f7ea fe85 	bl	8000210 <memchr>
 8015506:	9a04      	ldr	r2, [sp, #16]
 8015508:	b9d8      	cbnz	r0, 8015542 <_svfiprintf_r+0xe6>
 801550a:	06d0      	lsls	r0, r2, #27
 801550c:	bf44      	itt	mi
 801550e:	2320      	movmi	r3, #32
 8015510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015514:	0711      	lsls	r1, r2, #28
 8015516:	bf44      	itt	mi
 8015518:	232b      	movmi	r3, #43	; 0x2b
 801551a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801551e:	f89a 3000 	ldrb.w	r3, [sl]
 8015522:	2b2a      	cmp	r3, #42	; 0x2a
 8015524:	d015      	beq.n	8015552 <_svfiprintf_r+0xf6>
 8015526:	9a07      	ldr	r2, [sp, #28]
 8015528:	4654      	mov	r4, sl
 801552a:	2000      	movs	r0, #0
 801552c:	f04f 0c0a 	mov.w	ip, #10
 8015530:	4621      	mov	r1, r4
 8015532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015536:	3b30      	subs	r3, #48	; 0x30
 8015538:	2b09      	cmp	r3, #9
 801553a:	d94e      	bls.n	80155da <_svfiprintf_r+0x17e>
 801553c:	b1b0      	cbz	r0, 801556c <_svfiprintf_r+0x110>
 801553e:	9207      	str	r2, [sp, #28]
 8015540:	e014      	b.n	801556c <_svfiprintf_r+0x110>
 8015542:	eba0 0308 	sub.w	r3, r0, r8
 8015546:	fa09 f303 	lsl.w	r3, r9, r3
 801554a:	4313      	orrs	r3, r2
 801554c:	9304      	str	r3, [sp, #16]
 801554e:	46a2      	mov	sl, r4
 8015550:	e7d2      	b.n	80154f8 <_svfiprintf_r+0x9c>
 8015552:	9b03      	ldr	r3, [sp, #12]
 8015554:	1d19      	adds	r1, r3, #4
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	9103      	str	r1, [sp, #12]
 801555a:	2b00      	cmp	r3, #0
 801555c:	bfbb      	ittet	lt
 801555e:	425b      	neglt	r3, r3
 8015560:	f042 0202 	orrlt.w	r2, r2, #2
 8015564:	9307      	strge	r3, [sp, #28]
 8015566:	9307      	strlt	r3, [sp, #28]
 8015568:	bfb8      	it	lt
 801556a:	9204      	strlt	r2, [sp, #16]
 801556c:	7823      	ldrb	r3, [r4, #0]
 801556e:	2b2e      	cmp	r3, #46	; 0x2e
 8015570:	d10c      	bne.n	801558c <_svfiprintf_r+0x130>
 8015572:	7863      	ldrb	r3, [r4, #1]
 8015574:	2b2a      	cmp	r3, #42	; 0x2a
 8015576:	d135      	bne.n	80155e4 <_svfiprintf_r+0x188>
 8015578:	9b03      	ldr	r3, [sp, #12]
 801557a:	1d1a      	adds	r2, r3, #4
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	9203      	str	r2, [sp, #12]
 8015580:	2b00      	cmp	r3, #0
 8015582:	bfb8      	it	lt
 8015584:	f04f 33ff 	movlt.w	r3, #4294967295
 8015588:	3402      	adds	r4, #2
 801558a:	9305      	str	r3, [sp, #20]
 801558c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015658 <_svfiprintf_r+0x1fc>
 8015590:	7821      	ldrb	r1, [r4, #0]
 8015592:	2203      	movs	r2, #3
 8015594:	4650      	mov	r0, sl
 8015596:	f7ea fe3b 	bl	8000210 <memchr>
 801559a:	b140      	cbz	r0, 80155ae <_svfiprintf_r+0x152>
 801559c:	2340      	movs	r3, #64	; 0x40
 801559e:	eba0 000a 	sub.w	r0, r0, sl
 80155a2:	fa03 f000 	lsl.w	r0, r3, r0
 80155a6:	9b04      	ldr	r3, [sp, #16]
 80155a8:	4303      	orrs	r3, r0
 80155aa:	3401      	adds	r4, #1
 80155ac:	9304      	str	r3, [sp, #16]
 80155ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155b2:	4826      	ldr	r0, [pc, #152]	; (801564c <_svfiprintf_r+0x1f0>)
 80155b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80155b8:	2206      	movs	r2, #6
 80155ba:	f7ea fe29 	bl	8000210 <memchr>
 80155be:	2800      	cmp	r0, #0
 80155c0:	d038      	beq.n	8015634 <_svfiprintf_r+0x1d8>
 80155c2:	4b23      	ldr	r3, [pc, #140]	; (8015650 <_svfiprintf_r+0x1f4>)
 80155c4:	bb1b      	cbnz	r3, 801560e <_svfiprintf_r+0x1b2>
 80155c6:	9b03      	ldr	r3, [sp, #12]
 80155c8:	3307      	adds	r3, #7
 80155ca:	f023 0307 	bic.w	r3, r3, #7
 80155ce:	3308      	adds	r3, #8
 80155d0:	9303      	str	r3, [sp, #12]
 80155d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155d4:	4433      	add	r3, r6
 80155d6:	9309      	str	r3, [sp, #36]	; 0x24
 80155d8:	e767      	b.n	80154aa <_svfiprintf_r+0x4e>
 80155da:	fb0c 3202 	mla	r2, ip, r2, r3
 80155de:	460c      	mov	r4, r1
 80155e0:	2001      	movs	r0, #1
 80155e2:	e7a5      	b.n	8015530 <_svfiprintf_r+0xd4>
 80155e4:	2300      	movs	r3, #0
 80155e6:	3401      	adds	r4, #1
 80155e8:	9305      	str	r3, [sp, #20]
 80155ea:	4619      	mov	r1, r3
 80155ec:	f04f 0c0a 	mov.w	ip, #10
 80155f0:	4620      	mov	r0, r4
 80155f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155f6:	3a30      	subs	r2, #48	; 0x30
 80155f8:	2a09      	cmp	r2, #9
 80155fa:	d903      	bls.n	8015604 <_svfiprintf_r+0x1a8>
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d0c5      	beq.n	801558c <_svfiprintf_r+0x130>
 8015600:	9105      	str	r1, [sp, #20]
 8015602:	e7c3      	b.n	801558c <_svfiprintf_r+0x130>
 8015604:	fb0c 2101 	mla	r1, ip, r1, r2
 8015608:	4604      	mov	r4, r0
 801560a:	2301      	movs	r3, #1
 801560c:	e7f0      	b.n	80155f0 <_svfiprintf_r+0x194>
 801560e:	ab03      	add	r3, sp, #12
 8015610:	9300      	str	r3, [sp, #0]
 8015612:	462a      	mov	r2, r5
 8015614:	4b0f      	ldr	r3, [pc, #60]	; (8015654 <_svfiprintf_r+0x1f8>)
 8015616:	a904      	add	r1, sp, #16
 8015618:	4638      	mov	r0, r7
 801561a:	f7fc f9e3 	bl	80119e4 <_printf_float>
 801561e:	1c42      	adds	r2, r0, #1
 8015620:	4606      	mov	r6, r0
 8015622:	d1d6      	bne.n	80155d2 <_svfiprintf_r+0x176>
 8015624:	89ab      	ldrh	r3, [r5, #12]
 8015626:	065b      	lsls	r3, r3, #25
 8015628:	f53f af2c 	bmi.w	8015484 <_svfiprintf_r+0x28>
 801562c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801562e:	b01d      	add	sp, #116	; 0x74
 8015630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015634:	ab03      	add	r3, sp, #12
 8015636:	9300      	str	r3, [sp, #0]
 8015638:	462a      	mov	r2, r5
 801563a:	4b06      	ldr	r3, [pc, #24]	; (8015654 <_svfiprintf_r+0x1f8>)
 801563c:	a904      	add	r1, sp, #16
 801563e:	4638      	mov	r0, r7
 8015640:	f7fc fc74 	bl	8011f2c <_printf_i>
 8015644:	e7eb      	b.n	801561e <_svfiprintf_r+0x1c2>
 8015646:	bf00      	nop
 8015648:	0802a294 	.word	0x0802a294
 801564c:	0802a29e 	.word	0x0802a29e
 8015650:	080119e5 	.word	0x080119e5
 8015654:	080153a5 	.word	0x080153a5
 8015658:	0802a29a 	.word	0x0802a29a

0801565c <__sfputc_r>:
 801565c:	6893      	ldr	r3, [r2, #8]
 801565e:	3b01      	subs	r3, #1
 8015660:	2b00      	cmp	r3, #0
 8015662:	b410      	push	{r4}
 8015664:	6093      	str	r3, [r2, #8]
 8015666:	da08      	bge.n	801567a <__sfputc_r+0x1e>
 8015668:	6994      	ldr	r4, [r2, #24]
 801566a:	42a3      	cmp	r3, r4
 801566c:	db01      	blt.n	8015672 <__sfputc_r+0x16>
 801566e:	290a      	cmp	r1, #10
 8015670:	d103      	bne.n	801567a <__sfputc_r+0x1e>
 8015672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015676:	f000 b975 	b.w	8015964 <__swbuf_r>
 801567a:	6813      	ldr	r3, [r2, #0]
 801567c:	1c58      	adds	r0, r3, #1
 801567e:	6010      	str	r0, [r2, #0]
 8015680:	7019      	strb	r1, [r3, #0]
 8015682:	4608      	mov	r0, r1
 8015684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015688:	4770      	bx	lr

0801568a <__sfputs_r>:
 801568a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801568c:	4606      	mov	r6, r0
 801568e:	460f      	mov	r7, r1
 8015690:	4614      	mov	r4, r2
 8015692:	18d5      	adds	r5, r2, r3
 8015694:	42ac      	cmp	r4, r5
 8015696:	d101      	bne.n	801569c <__sfputs_r+0x12>
 8015698:	2000      	movs	r0, #0
 801569a:	e007      	b.n	80156ac <__sfputs_r+0x22>
 801569c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156a0:	463a      	mov	r2, r7
 80156a2:	4630      	mov	r0, r6
 80156a4:	f7ff ffda 	bl	801565c <__sfputc_r>
 80156a8:	1c43      	adds	r3, r0, #1
 80156aa:	d1f3      	bne.n	8015694 <__sfputs_r+0xa>
 80156ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080156b0 <_vfiprintf_r>:
 80156b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156b4:	460d      	mov	r5, r1
 80156b6:	b09d      	sub	sp, #116	; 0x74
 80156b8:	4614      	mov	r4, r2
 80156ba:	4698      	mov	r8, r3
 80156bc:	4606      	mov	r6, r0
 80156be:	b118      	cbz	r0, 80156c8 <_vfiprintf_r+0x18>
 80156c0:	6983      	ldr	r3, [r0, #24]
 80156c2:	b90b      	cbnz	r3, 80156c8 <_vfiprintf_r+0x18>
 80156c4:	f000 fb3e 	bl	8015d44 <__sinit>
 80156c8:	4b89      	ldr	r3, [pc, #548]	; (80158f0 <_vfiprintf_r+0x240>)
 80156ca:	429d      	cmp	r5, r3
 80156cc:	d11b      	bne.n	8015706 <_vfiprintf_r+0x56>
 80156ce:	6875      	ldr	r5, [r6, #4]
 80156d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156d2:	07d9      	lsls	r1, r3, #31
 80156d4:	d405      	bmi.n	80156e2 <_vfiprintf_r+0x32>
 80156d6:	89ab      	ldrh	r3, [r5, #12]
 80156d8:	059a      	lsls	r2, r3, #22
 80156da:	d402      	bmi.n	80156e2 <_vfiprintf_r+0x32>
 80156dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156de:	f000 fbcf 	bl	8015e80 <__retarget_lock_acquire_recursive>
 80156e2:	89ab      	ldrh	r3, [r5, #12]
 80156e4:	071b      	lsls	r3, r3, #28
 80156e6:	d501      	bpl.n	80156ec <_vfiprintf_r+0x3c>
 80156e8:	692b      	ldr	r3, [r5, #16]
 80156ea:	b9eb      	cbnz	r3, 8015728 <_vfiprintf_r+0x78>
 80156ec:	4629      	mov	r1, r5
 80156ee:	4630      	mov	r0, r6
 80156f0:	f000 f998 	bl	8015a24 <__swsetup_r>
 80156f4:	b1c0      	cbz	r0, 8015728 <_vfiprintf_r+0x78>
 80156f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156f8:	07dc      	lsls	r4, r3, #31
 80156fa:	d50e      	bpl.n	801571a <_vfiprintf_r+0x6a>
 80156fc:	f04f 30ff 	mov.w	r0, #4294967295
 8015700:	b01d      	add	sp, #116	; 0x74
 8015702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015706:	4b7b      	ldr	r3, [pc, #492]	; (80158f4 <_vfiprintf_r+0x244>)
 8015708:	429d      	cmp	r5, r3
 801570a:	d101      	bne.n	8015710 <_vfiprintf_r+0x60>
 801570c:	68b5      	ldr	r5, [r6, #8]
 801570e:	e7df      	b.n	80156d0 <_vfiprintf_r+0x20>
 8015710:	4b79      	ldr	r3, [pc, #484]	; (80158f8 <_vfiprintf_r+0x248>)
 8015712:	429d      	cmp	r5, r3
 8015714:	bf08      	it	eq
 8015716:	68f5      	ldreq	r5, [r6, #12]
 8015718:	e7da      	b.n	80156d0 <_vfiprintf_r+0x20>
 801571a:	89ab      	ldrh	r3, [r5, #12]
 801571c:	0598      	lsls	r0, r3, #22
 801571e:	d4ed      	bmi.n	80156fc <_vfiprintf_r+0x4c>
 8015720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015722:	f000 fbae 	bl	8015e82 <__retarget_lock_release_recursive>
 8015726:	e7e9      	b.n	80156fc <_vfiprintf_r+0x4c>
 8015728:	2300      	movs	r3, #0
 801572a:	9309      	str	r3, [sp, #36]	; 0x24
 801572c:	2320      	movs	r3, #32
 801572e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015732:	f8cd 800c 	str.w	r8, [sp, #12]
 8015736:	2330      	movs	r3, #48	; 0x30
 8015738:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80158fc <_vfiprintf_r+0x24c>
 801573c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015740:	f04f 0901 	mov.w	r9, #1
 8015744:	4623      	mov	r3, r4
 8015746:	469a      	mov	sl, r3
 8015748:	f813 2b01 	ldrb.w	r2, [r3], #1
 801574c:	b10a      	cbz	r2, 8015752 <_vfiprintf_r+0xa2>
 801574e:	2a25      	cmp	r2, #37	; 0x25
 8015750:	d1f9      	bne.n	8015746 <_vfiprintf_r+0x96>
 8015752:	ebba 0b04 	subs.w	fp, sl, r4
 8015756:	d00b      	beq.n	8015770 <_vfiprintf_r+0xc0>
 8015758:	465b      	mov	r3, fp
 801575a:	4622      	mov	r2, r4
 801575c:	4629      	mov	r1, r5
 801575e:	4630      	mov	r0, r6
 8015760:	f7ff ff93 	bl	801568a <__sfputs_r>
 8015764:	3001      	adds	r0, #1
 8015766:	f000 80aa 	beq.w	80158be <_vfiprintf_r+0x20e>
 801576a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801576c:	445a      	add	r2, fp
 801576e:	9209      	str	r2, [sp, #36]	; 0x24
 8015770:	f89a 3000 	ldrb.w	r3, [sl]
 8015774:	2b00      	cmp	r3, #0
 8015776:	f000 80a2 	beq.w	80158be <_vfiprintf_r+0x20e>
 801577a:	2300      	movs	r3, #0
 801577c:	f04f 32ff 	mov.w	r2, #4294967295
 8015780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015784:	f10a 0a01 	add.w	sl, sl, #1
 8015788:	9304      	str	r3, [sp, #16]
 801578a:	9307      	str	r3, [sp, #28]
 801578c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015790:	931a      	str	r3, [sp, #104]	; 0x68
 8015792:	4654      	mov	r4, sl
 8015794:	2205      	movs	r2, #5
 8015796:	f814 1b01 	ldrb.w	r1, [r4], #1
 801579a:	4858      	ldr	r0, [pc, #352]	; (80158fc <_vfiprintf_r+0x24c>)
 801579c:	f7ea fd38 	bl	8000210 <memchr>
 80157a0:	9a04      	ldr	r2, [sp, #16]
 80157a2:	b9d8      	cbnz	r0, 80157dc <_vfiprintf_r+0x12c>
 80157a4:	06d1      	lsls	r1, r2, #27
 80157a6:	bf44      	itt	mi
 80157a8:	2320      	movmi	r3, #32
 80157aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157ae:	0713      	lsls	r3, r2, #28
 80157b0:	bf44      	itt	mi
 80157b2:	232b      	movmi	r3, #43	; 0x2b
 80157b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157b8:	f89a 3000 	ldrb.w	r3, [sl]
 80157bc:	2b2a      	cmp	r3, #42	; 0x2a
 80157be:	d015      	beq.n	80157ec <_vfiprintf_r+0x13c>
 80157c0:	9a07      	ldr	r2, [sp, #28]
 80157c2:	4654      	mov	r4, sl
 80157c4:	2000      	movs	r0, #0
 80157c6:	f04f 0c0a 	mov.w	ip, #10
 80157ca:	4621      	mov	r1, r4
 80157cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157d0:	3b30      	subs	r3, #48	; 0x30
 80157d2:	2b09      	cmp	r3, #9
 80157d4:	d94e      	bls.n	8015874 <_vfiprintf_r+0x1c4>
 80157d6:	b1b0      	cbz	r0, 8015806 <_vfiprintf_r+0x156>
 80157d8:	9207      	str	r2, [sp, #28]
 80157da:	e014      	b.n	8015806 <_vfiprintf_r+0x156>
 80157dc:	eba0 0308 	sub.w	r3, r0, r8
 80157e0:	fa09 f303 	lsl.w	r3, r9, r3
 80157e4:	4313      	orrs	r3, r2
 80157e6:	9304      	str	r3, [sp, #16]
 80157e8:	46a2      	mov	sl, r4
 80157ea:	e7d2      	b.n	8015792 <_vfiprintf_r+0xe2>
 80157ec:	9b03      	ldr	r3, [sp, #12]
 80157ee:	1d19      	adds	r1, r3, #4
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	9103      	str	r1, [sp, #12]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	bfbb      	ittet	lt
 80157f8:	425b      	neglt	r3, r3
 80157fa:	f042 0202 	orrlt.w	r2, r2, #2
 80157fe:	9307      	strge	r3, [sp, #28]
 8015800:	9307      	strlt	r3, [sp, #28]
 8015802:	bfb8      	it	lt
 8015804:	9204      	strlt	r2, [sp, #16]
 8015806:	7823      	ldrb	r3, [r4, #0]
 8015808:	2b2e      	cmp	r3, #46	; 0x2e
 801580a:	d10c      	bne.n	8015826 <_vfiprintf_r+0x176>
 801580c:	7863      	ldrb	r3, [r4, #1]
 801580e:	2b2a      	cmp	r3, #42	; 0x2a
 8015810:	d135      	bne.n	801587e <_vfiprintf_r+0x1ce>
 8015812:	9b03      	ldr	r3, [sp, #12]
 8015814:	1d1a      	adds	r2, r3, #4
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	9203      	str	r2, [sp, #12]
 801581a:	2b00      	cmp	r3, #0
 801581c:	bfb8      	it	lt
 801581e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015822:	3402      	adds	r4, #2
 8015824:	9305      	str	r3, [sp, #20]
 8015826:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801590c <_vfiprintf_r+0x25c>
 801582a:	7821      	ldrb	r1, [r4, #0]
 801582c:	2203      	movs	r2, #3
 801582e:	4650      	mov	r0, sl
 8015830:	f7ea fcee 	bl	8000210 <memchr>
 8015834:	b140      	cbz	r0, 8015848 <_vfiprintf_r+0x198>
 8015836:	2340      	movs	r3, #64	; 0x40
 8015838:	eba0 000a 	sub.w	r0, r0, sl
 801583c:	fa03 f000 	lsl.w	r0, r3, r0
 8015840:	9b04      	ldr	r3, [sp, #16]
 8015842:	4303      	orrs	r3, r0
 8015844:	3401      	adds	r4, #1
 8015846:	9304      	str	r3, [sp, #16]
 8015848:	f814 1b01 	ldrb.w	r1, [r4], #1
 801584c:	482c      	ldr	r0, [pc, #176]	; (8015900 <_vfiprintf_r+0x250>)
 801584e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015852:	2206      	movs	r2, #6
 8015854:	f7ea fcdc 	bl	8000210 <memchr>
 8015858:	2800      	cmp	r0, #0
 801585a:	d03f      	beq.n	80158dc <_vfiprintf_r+0x22c>
 801585c:	4b29      	ldr	r3, [pc, #164]	; (8015904 <_vfiprintf_r+0x254>)
 801585e:	bb1b      	cbnz	r3, 80158a8 <_vfiprintf_r+0x1f8>
 8015860:	9b03      	ldr	r3, [sp, #12]
 8015862:	3307      	adds	r3, #7
 8015864:	f023 0307 	bic.w	r3, r3, #7
 8015868:	3308      	adds	r3, #8
 801586a:	9303      	str	r3, [sp, #12]
 801586c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801586e:	443b      	add	r3, r7
 8015870:	9309      	str	r3, [sp, #36]	; 0x24
 8015872:	e767      	b.n	8015744 <_vfiprintf_r+0x94>
 8015874:	fb0c 3202 	mla	r2, ip, r2, r3
 8015878:	460c      	mov	r4, r1
 801587a:	2001      	movs	r0, #1
 801587c:	e7a5      	b.n	80157ca <_vfiprintf_r+0x11a>
 801587e:	2300      	movs	r3, #0
 8015880:	3401      	adds	r4, #1
 8015882:	9305      	str	r3, [sp, #20]
 8015884:	4619      	mov	r1, r3
 8015886:	f04f 0c0a 	mov.w	ip, #10
 801588a:	4620      	mov	r0, r4
 801588c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015890:	3a30      	subs	r2, #48	; 0x30
 8015892:	2a09      	cmp	r2, #9
 8015894:	d903      	bls.n	801589e <_vfiprintf_r+0x1ee>
 8015896:	2b00      	cmp	r3, #0
 8015898:	d0c5      	beq.n	8015826 <_vfiprintf_r+0x176>
 801589a:	9105      	str	r1, [sp, #20]
 801589c:	e7c3      	b.n	8015826 <_vfiprintf_r+0x176>
 801589e:	fb0c 2101 	mla	r1, ip, r1, r2
 80158a2:	4604      	mov	r4, r0
 80158a4:	2301      	movs	r3, #1
 80158a6:	e7f0      	b.n	801588a <_vfiprintf_r+0x1da>
 80158a8:	ab03      	add	r3, sp, #12
 80158aa:	9300      	str	r3, [sp, #0]
 80158ac:	462a      	mov	r2, r5
 80158ae:	4b16      	ldr	r3, [pc, #88]	; (8015908 <_vfiprintf_r+0x258>)
 80158b0:	a904      	add	r1, sp, #16
 80158b2:	4630      	mov	r0, r6
 80158b4:	f7fc f896 	bl	80119e4 <_printf_float>
 80158b8:	4607      	mov	r7, r0
 80158ba:	1c78      	adds	r0, r7, #1
 80158bc:	d1d6      	bne.n	801586c <_vfiprintf_r+0x1bc>
 80158be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80158c0:	07d9      	lsls	r1, r3, #31
 80158c2:	d405      	bmi.n	80158d0 <_vfiprintf_r+0x220>
 80158c4:	89ab      	ldrh	r3, [r5, #12]
 80158c6:	059a      	lsls	r2, r3, #22
 80158c8:	d402      	bmi.n	80158d0 <_vfiprintf_r+0x220>
 80158ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80158cc:	f000 fad9 	bl	8015e82 <__retarget_lock_release_recursive>
 80158d0:	89ab      	ldrh	r3, [r5, #12]
 80158d2:	065b      	lsls	r3, r3, #25
 80158d4:	f53f af12 	bmi.w	80156fc <_vfiprintf_r+0x4c>
 80158d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158da:	e711      	b.n	8015700 <_vfiprintf_r+0x50>
 80158dc:	ab03      	add	r3, sp, #12
 80158de:	9300      	str	r3, [sp, #0]
 80158e0:	462a      	mov	r2, r5
 80158e2:	4b09      	ldr	r3, [pc, #36]	; (8015908 <_vfiprintf_r+0x258>)
 80158e4:	a904      	add	r1, sp, #16
 80158e6:	4630      	mov	r0, r6
 80158e8:	f7fc fb20 	bl	8011f2c <_printf_i>
 80158ec:	e7e4      	b.n	80158b8 <_vfiprintf_r+0x208>
 80158ee:	bf00      	nop
 80158f0:	0802a2c8 	.word	0x0802a2c8
 80158f4:	0802a2e8 	.word	0x0802a2e8
 80158f8:	0802a2a8 	.word	0x0802a2a8
 80158fc:	0802a294 	.word	0x0802a294
 8015900:	0802a29e 	.word	0x0802a29e
 8015904:	080119e5 	.word	0x080119e5
 8015908:	0801568b 	.word	0x0801568b
 801590c:	0802a29a 	.word	0x0802a29a

08015910 <nan>:
 8015910:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015918 <nan+0x8>
 8015914:	4770      	bx	lr
 8015916:	bf00      	nop
 8015918:	00000000 	.word	0x00000000
 801591c:	7ff80000 	.word	0x7ff80000

08015920 <_sbrk_r>:
 8015920:	b538      	push	{r3, r4, r5, lr}
 8015922:	4d06      	ldr	r5, [pc, #24]	; (801593c <_sbrk_r+0x1c>)
 8015924:	2300      	movs	r3, #0
 8015926:	4604      	mov	r4, r0
 8015928:	4608      	mov	r0, r1
 801592a:	602b      	str	r3, [r5, #0]
 801592c:	f7f4 fb40 	bl	8009fb0 <_sbrk>
 8015930:	1c43      	adds	r3, r0, #1
 8015932:	d102      	bne.n	801593a <_sbrk_r+0x1a>
 8015934:	682b      	ldr	r3, [r5, #0]
 8015936:	b103      	cbz	r3, 801593a <_sbrk_r+0x1a>
 8015938:	6023      	str	r3, [r4, #0]
 801593a:	bd38      	pop	{r3, r4, r5, pc}
 801593c:	20000c88 	.word	0x20000c88

08015940 <strncmp>:
 8015940:	b510      	push	{r4, lr}
 8015942:	b16a      	cbz	r2, 8015960 <strncmp+0x20>
 8015944:	3901      	subs	r1, #1
 8015946:	1884      	adds	r4, r0, r2
 8015948:	f810 3b01 	ldrb.w	r3, [r0], #1
 801594c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015950:	4293      	cmp	r3, r2
 8015952:	d103      	bne.n	801595c <strncmp+0x1c>
 8015954:	42a0      	cmp	r0, r4
 8015956:	d001      	beq.n	801595c <strncmp+0x1c>
 8015958:	2b00      	cmp	r3, #0
 801595a:	d1f5      	bne.n	8015948 <strncmp+0x8>
 801595c:	1a98      	subs	r0, r3, r2
 801595e:	bd10      	pop	{r4, pc}
 8015960:	4610      	mov	r0, r2
 8015962:	e7fc      	b.n	801595e <strncmp+0x1e>

08015964 <__swbuf_r>:
 8015964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015966:	460e      	mov	r6, r1
 8015968:	4614      	mov	r4, r2
 801596a:	4605      	mov	r5, r0
 801596c:	b118      	cbz	r0, 8015976 <__swbuf_r+0x12>
 801596e:	6983      	ldr	r3, [r0, #24]
 8015970:	b90b      	cbnz	r3, 8015976 <__swbuf_r+0x12>
 8015972:	f000 f9e7 	bl	8015d44 <__sinit>
 8015976:	4b21      	ldr	r3, [pc, #132]	; (80159fc <__swbuf_r+0x98>)
 8015978:	429c      	cmp	r4, r3
 801597a:	d12b      	bne.n	80159d4 <__swbuf_r+0x70>
 801597c:	686c      	ldr	r4, [r5, #4]
 801597e:	69a3      	ldr	r3, [r4, #24]
 8015980:	60a3      	str	r3, [r4, #8]
 8015982:	89a3      	ldrh	r3, [r4, #12]
 8015984:	071a      	lsls	r2, r3, #28
 8015986:	d52f      	bpl.n	80159e8 <__swbuf_r+0x84>
 8015988:	6923      	ldr	r3, [r4, #16]
 801598a:	b36b      	cbz	r3, 80159e8 <__swbuf_r+0x84>
 801598c:	6923      	ldr	r3, [r4, #16]
 801598e:	6820      	ldr	r0, [r4, #0]
 8015990:	1ac0      	subs	r0, r0, r3
 8015992:	6963      	ldr	r3, [r4, #20]
 8015994:	b2f6      	uxtb	r6, r6
 8015996:	4283      	cmp	r3, r0
 8015998:	4637      	mov	r7, r6
 801599a:	dc04      	bgt.n	80159a6 <__swbuf_r+0x42>
 801599c:	4621      	mov	r1, r4
 801599e:	4628      	mov	r0, r5
 80159a0:	f000 f93c 	bl	8015c1c <_fflush_r>
 80159a4:	bb30      	cbnz	r0, 80159f4 <__swbuf_r+0x90>
 80159a6:	68a3      	ldr	r3, [r4, #8]
 80159a8:	3b01      	subs	r3, #1
 80159aa:	60a3      	str	r3, [r4, #8]
 80159ac:	6823      	ldr	r3, [r4, #0]
 80159ae:	1c5a      	adds	r2, r3, #1
 80159b0:	6022      	str	r2, [r4, #0]
 80159b2:	701e      	strb	r6, [r3, #0]
 80159b4:	6963      	ldr	r3, [r4, #20]
 80159b6:	3001      	adds	r0, #1
 80159b8:	4283      	cmp	r3, r0
 80159ba:	d004      	beq.n	80159c6 <__swbuf_r+0x62>
 80159bc:	89a3      	ldrh	r3, [r4, #12]
 80159be:	07db      	lsls	r3, r3, #31
 80159c0:	d506      	bpl.n	80159d0 <__swbuf_r+0x6c>
 80159c2:	2e0a      	cmp	r6, #10
 80159c4:	d104      	bne.n	80159d0 <__swbuf_r+0x6c>
 80159c6:	4621      	mov	r1, r4
 80159c8:	4628      	mov	r0, r5
 80159ca:	f000 f927 	bl	8015c1c <_fflush_r>
 80159ce:	b988      	cbnz	r0, 80159f4 <__swbuf_r+0x90>
 80159d0:	4638      	mov	r0, r7
 80159d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159d4:	4b0a      	ldr	r3, [pc, #40]	; (8015a00 <__swbuf_r+0x9c>)
 80159d6:	429c      	cmp	r4, r3
 80159d8:	d101      	bne.n	80159de <__swbuf_r+0x7a>
 80159da:	68ac      	ldr	r4, [r5, #8]
 80159dc:	e7cf      	b.n	801597e <__swbuf_r+0x1a>
 80159de:	4b09      	ldr	r3, [pc, #36]	; (8015a04 <__swbuf_r+0xa0>)
 80159e0:	429c      	cmp	r4, r3
 80159e2:	bf08      	it	eq
 80159e4:	68ec      	ldreq	r4, [r5, #12]
 80159e6:	e7ca      	b.n	801597e <__swbuf_r+0x1a>
 80159e8:	4621      	mov	r1, r4
 80159ea:	4628      	mov	r0, r5
 80159ec:	f000 f81a 	bl	8015a24 <__swsetup_r>
 80159f0:	2800      	cmp	r0, #0
 80159f2:	d0cb      	beq.n	801598c <__swbuf_r+0x28>
 80159f4:	f04f 37ff 	mov.w	r7, #4294967295
 80159f8:	e7ea      	b.n	80159d0 <__swbuf_r+0x6c>
 80159fa:	bf00      	nop
 80159fc:	0802a2c8 	.word	0x0802a2c8
 8015a00:	0802a2e8 	.word	0x0802a2e8
 8015a04:	0802a2a8 	.word	0x0802a2a8

08015a08 <__ascii_wctomb>:
 8015a08:	b149      	cbz	r1, 8015a1e <__ascii_wctomb+0x16>
 8015a0a:	2aff      	cmp	r2, #255	; 0xff
 8015a0c:	bf85      	ittet	hi
 8015a0e:	238a      	movhi	r3, #138	; 0x8a
 8015a10:	6003      	strhi	r3, [r0, #0]
 8015a12:	700a      	strbls	r2, [r1, #0]
 8015a14:	f04f 30ff 	movhi.w	r0, #4294967295
 8015a18:	bf98      	it	ls
 8015a1a:	2001      	movls	r0, #1
 8015a1c:	4770      	bx	lr
 8015a1e:	4608      	mov	r0, r1
 8015a20:	4770      	bx	lr
	...

08015a24 <__swsetup_r>:
 8015a24:	4b32      	ldr	r3, [pc, #200]	; (8015af0 <__swsetup_r+0xcc>)
 8015a26:	b570      	push	{r4, r5, r6, lr}
 8015a28:	681d      	ldr	r5, [r3, #0]
 8015a2a:	4606      	mov	r6, r0
 8015a2c:	460c      	mov	r4, r1
 8015a2e:	b125      	cbz	r5, 8015a3a <__swsetup_r+0x16>
 8015a30:	69ab      	ldr	r3, [r5, #24]
 8015a32:	b913      	cbnz	r3, 8015a3a <__swsetup_r+0x16>
 8015a34:	4628      	mov	r0, r5
 8015a36:	f000 f985 	bl	8015d44 <__sinit>
 8015a3a:	4b2e      	ldr	r3, [pc, #184]	; (8015af4 <__swsetup_r+0xd0>)
 8015a3c:	429c      	cmp	r4, r3
 8015a3e:	d10f      	bne.n	8015a60 <__swsetup_r+0x3c>
 8015a40:	686c      	ldr	r4, [r5, #4]
 8015a42:	89a3      	ldrh	r3, [r4, #12]
 8015a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a48:	0719      	lsls	r1, r3, #28
 8015a4a:	d42c      	bmi.n	8015aa6 <__swsetup_r+0x82>
 8015a4c:	06dd      	lsls	r5, r3, #27
 8015a4e:	d411      	bmi.n	8015a74 <__swsetup_r+0x50>
 8015a50:	2309      	movs	r3, #9
 8015a52:	6033      	str	r3, [r6, #0]
 8015a54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015a58:	81a3      	strh	r3, [r4, #12]
 8015a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a5e:	e03e      	b.n	8015ade <__swsetup_r+0xba>
 8015a60:	4b25      	ldr	r3, [pc, #148]	; (8015af8 <__swsetup_r+0xd4>)
 8015a62:	429c      	cmp	r4, r3
 8015a64:	d101      	bne.n	8015a6a <__swsetup_r+0x46>
 8015a66:	68ac      	ldr	r4, [r5, #8]
 8015a68:	e7eb      	b.n	8015a42 <__swsetup_r+0x1e>
 8015a6a:	4b24      	ldr	r3, [pc, #144]	; (8015afc <__swsetup_r+0xd8>)
 8015a6c:	429c      	cmp	r4, r3
 8015a6e:	bf08      	it	eq
 8015a70:	68ec      	ldreq	r4, [r5, #12]
 8015a72:	e7e6      	b.n	8015a42 <__swsetup_r+0x1e>
 8015a74:	0758      	lsls	r0, r3, #29
 8015a76:	d512      	bpl.n	8015a9e <__swsetup_r+0x7a>
 8015a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a7a:	b141      	cbz	r1, 8015a8e <__swsetup_r+0x6a>
 8015a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a80:	4299      	cmp	r1, r3
 8015a82:	d002      	beq.n	8015a8a <__swsetup_r+0x66>
 8015a84:	4630      	mov	r0, r6
 8015a86:	f7ff fbe3 	bl	8015250 <_free_r>
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8015a8e:	89a3      	ldrh	r3, [r4, #12]
 8015a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015a94:	81a3      	strh	r3, [r4, #12]
 8015a96:	2300      	movs	r3, #0
 8015a98:	6063      	str	r3, [r4, #4]
 8015a9a:	6923      	ldr	r3, [r4, #16]
 8015a9c:	6023      	str	r3, [r4, #0]
 8015a9e:	89a3      	ldrh	r3, [r4, #12]
 8015aa0:	f043 0308 	orr.w	r3, r3, #8
 8015aa4:	81a3      	strh	r3, [r4, #12]
 8015aa6:	6923      	ldr	r3, [r4, #16]
 8015aa8:	b94b      	cbnz	r3, 8015abe <__swsetup_r+0x9a>
 8015aaa:	89a3      	ldrh	r3, [r4, #12]
 8015aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015ab4:	d003      	beq.n	8015abe <__swsetup_r+0x9a>
 8015ab6:	4621      	mov	r1, r4
 8015ab8:	4630      	mov	r0, r6
 8015aba:	f000 fa07 	bl	8015ecc <__smakebuf_r>
 8015abe:	89a0      	ldrh	r0, [r4, #12]
 8015ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015ac4:	f010 0301 	ands.w	r3, r0, #1
 8015ac8:	d00a      	beq.n	8015ae0 <__swsetup_r+0xbc>
 8015aca:	2300      	movs	r3, #0
 8015acc:	60a3      	str	r3, [r4, #8]
 8015ace:	6963      	ldr	r3, [r4, #20]
 8015ad0:	425b      	negs	r3, r3
 8015ad2:	61a3      	str	r3, [r4, #24]
 8015ad4:	6923      	ldr	r3, [r4, #16]
 8015ad6:	b943      	cbnz	r3, 8015aea <__swsetup_r+0xc6>
 8015ad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015adc:	d1ba      	bne.n	8015a54 <__swsetup_r+0x30>
 8015ade:	bd70      	pop	{r4, r5, r6, pc}
 8015ae0:	0781      	lsls	r1, r0, #30
 8015ae2:	bf58      	it	pl
 8015ae4:	6963      	ldrpl	r3, [r4, #20]
 8015ae6:	60a3      	str	r3, [r4, #8]
 8015ae8:	e7f4      	b.n	8015ad4 <__swsetup_r+0xb0>
 8015aea:	2000      	movs	r0, #0
 8015aec:	e7f7      	b.n	8015ade <__swsetup_r+0xba>
 8015aee:	bf00      	nop
 8015af0:	20000044 	.word	0x20000044
 8015af4:	0802a2c8 	.word	0x0802a2c8
 8015af8:	0802a2e8 	.word	0x0802a2e8
 8015afc:	0802a2a8 	.word	0x0802a2a8

08015b00 <abort>:
 8015b00:	b508      	push	{r3, lr}
 8015b02:	2006      	movs	r0, #6
 8015b04:	f000 fa96 	bl	8016034 <raise>
 8015b08:	2001      	movs	r0, #1
 8015b0a:	f7f4 f9d9 	bl	8009ec0 <_exit>
	...

08015b10 <__sflush_r>:
 8015b10:	898a      	ldrh	r2, [r1, #12]
 8015b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b16:	4605      	mov	r5, r0
 8015b18:	0710      	lsls	r0, r2, #28
 8015b1a:	460c      	mov	r4, r1
 8015b1c:	d458      	bmi.n	8015bd0 <__sflush_r+0xc0>
 8015b1e:	684b      	ldr	r3, [r1, #4]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	dc05      	bgt.n	8015b30 <__sflush_r+0x20>
 8015b24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	dc02      	bgt.n	8015b30 <__sflush_r+0x20>
 8015b2a:	2000      	movs	r0, #0
 8015b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b32:	2e00      	cmp	r6, #0
 8015b34:	d0f9      	beq.n	8015b2a <__sflush_r+0x1a>
 8015b36:	2300      	movs	r3, #0
 8015b38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015b3c:	682f      	ldr	r7, [r5, #0]
 8015b3e:	602b      	str	r3, [r5, #0]
 8015b40:	d032      	beq.n	8015ba8 <__sflush_r+0x98>
 8015b42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015b44:	89a3      	ldrh	r3, [r4, #12]
 8015b46:	075a      	lsls	r2, r3, #29
 8015b48:	d505      	bpl.n	8015b56 <__sflush_r+0x46>
 8015b4a:	6863      	ldr	r3, [r4, #4]
 8015b4c:	1ac0      	subs	r0, r0, r3
 8015b4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015b50:	b10b      	cbz	r3, 8015b56 <__sflush_r+0x46>
 8015b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015b54:	1ac0      	subs	r0, r0, r3
 8015b56:	2300      	movs	r3, #0
 8015b58:	4602      	mov	r2, r0
 8015b5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b5c:	6a21      	ldr	r1, [r4, #32]
 8015b5e:	4628      	mov	r0, r5
 8015b60:	47b0      	blx	r6
 8015b62:	1c43      	adds	r3, r0, #1
 8015b64:	89a3      	ldrh	r3, [r4, #12]
 8015b66:	d106      	bne.n	8015b76 <__sflush_r+0x66>
 8015b68:	6829      	ldr	r1, [r5, #0]
 8015b6a:	291d      	cmp	r1, #29
 8015b6c:	d82c      	bhi.n	8015bc8 <__sflush_r+0xb8>
 8015b6e:	4a2a      	ldr	r2, [pc, #168]	; (8015c18 <__sflush_r+0x108>)
 8015b70:	40ca      	lsrs	r2, r1
 8015b72:	07d6      	lsls	r6, r2, #31
 8015b74:	d528      	bpl.n	8015bc8 <__sflush_r+0xb8>
 8015b76:	2200      	movs	r2, #0
 8015b78:	6062      	str	r2, [r4, #4]
 8015b7a:	04d9      	lsls	r1, r3, #19
 8015b7c:	6922      	ldr	r2, [r4, #16]
 8015b7e:	6022      	str	r2, [r4, #0]
 8015b80:	d504      	bpl.n	8015b8c <__sflush_r+0x7c>
 8015b82:	1c42      	adds	r2, r0, #1
 8015b84:	d101      	bne.n	8015b8a <__sflush_r+0x7a>
 8015b86:	682b      	ldr	r3, [r5, #0]
 8015b88:	b903      	cbnz	r3, 8015b8c <__sflush_r+0x7c>
 8015b8a:	6560      	str	r0, [r4, #84]	; 0x54
 8015b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b8e:	602f      	str	r7, [r5, #0]
 8015b90:	2900      	cmp	r1, #0
 8015b92:	d0ca      	beq.n	8015b2a <__sflush_r+0x1a>
 8015b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b98:	4299      	cmp	r1, r3
 8015b9a:	d002      	beq.n	8015ba2 <__sflush_r+0x92>
 8015b9c:	4628      	mov	r0, r5
 8015b9e:	f7ff fb57 	bl	8015250 <_free_r>
 8015ba2:	2000      	movs	r0, #0
 8015ba4:	6360      	str	r0, [r4, #52]	; 0x34
 8015ba6:	e7c1      	b.n	8015b2c <__sflush_r+0x1c>
 8015ba8:	6a21      	ldr	r1, [r4, #32]
 8015baa:	2301      	movs	r3, #1
 8015bac:	4628      	mov	r0, r5
 8015bae:	47b0      	blx	r6
 8015bb0:	1c41      	adds	r1, r0, #1
 8015bb2:	d1c7      	bne.n	8015b44 <__sflush_r+0x34>
 8015bb4:	682b      	ldr	r3, [r5, #0]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d0c4      	beq.n	8015b44 <__sflush_r+0x34>
 8015bba:	2b1d      	cmp	r3, #29
 8015bbc:	d001      	beq.n	8015bc2 <__sflush_r+0xb2>
 8015bbe:	2b16      	cmp	r3, #22
 8015bc0:	d101      	bne.n	8015bc6 <__sflush_r+0xb6>
 8015bc2:	602f      	str	r7, [r5, #0]
 8015bc4:	e7b1      	b.n	8015b2a <__sflush_r+0x1a>
 8015bc6:	89a3      	ldrh	r3, [r4, #12]
 8015bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bcc:	81a3      	strh	r3, [r4, #12]
 8015bce:	e7ad      	b.n	8015b2c <__sflush_r+0x1c>
 8015bd0:	690f      	ldr	r7, [r1, #16]
 8015bd2:	2f00      	cmp	r7, #0
 8015bd4:	d0a9      	beq.n	8015b2a <__sflush_r+0x1a>
 8015bd6:	0793      	lsls	r3, r2, #30
 8015bd8:	680e      	ldr	r6, [r1, #0]
 8015bda:	bf08      	it	eq
 8015bdc:	694b      	ldreq	r3, [r1, #20]
 8015bde:	600f      	str	r7, [r1, #0]
 8015be0:	bf18      	it	ne
 8015be2:	2300      	movne	r3, #0
 8015be4:	eba6 0807 	sub.w	r8, r6, r7
 8015be8:	608b      	str	r3, [r1, #8]
 8015bea:	f1b8 0f00 	cmp.w	r8, #0
 8015bee:	dd9c      	ble.n	8015b2a <__sflush_r+0x1a>
 8015bf0:	6a21      	ldr	r1, [r4, #32]
 8015bf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015bf4:	4643      	mov	r3, r8
 8015bf6:	463a      	mov	r2, r7
 8015bf8:	4628      	mov	r0, r5
 8015bfa:	47b0      	blx	r6
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	dc06      	bgt.n	8015c0e <__sflush_r+0xfe>
 8015c00:	89a3      	ldrh	r3, [r4, #12]
 8015c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c06:	81a3      	strh	r3, [r4, #12]
 8015c08:	f04f 30ff 	mov.w	r0, #4294967295
 8015c0c:	e78e      	b.n	8015b2c <__sflush_r+0x1c>
 8015c0e:	4407      	add	r7, r0
 8015c10:	eba8 0800 	sub.w	r8, r8, r0
 8015c14:	e7e9      	b.n	8015bea <__sflush_r+0xda>
 8015c16:	bf00      	nop
 8015c18:	20400001 	.word	0x20400001

08015c1c <_fflush_r>:
 8015c1c:	b538      	push	{r3, r4, r5, lr}
 8015c1e:	690b      	ldr	r3, [r1, #16]
 8015c20:	4605      	mov	r5, r0
 8015c22:	460c      	mov	r4, r1
 8015c24:	b913      	cbnz	r3, 8015c2c <_fflush_r+0x10>
 8015c26:	2500      	movs	r5, #0
 8015c28:	4628      	mov	r0, r5
 8015c2a:	bd38      	pop	{r3, r4, r5, pc}
 8015c2c:	b118      	cbz	r0, 8015c36 <_fflush_r+0x1a>
 8015c2e:	6983      	ldr	r3, [r0, #24]
 8015c30:	b90b      	cbnz	r3, 8015c36 <_fflush_r+0x1a>
 8015c32:	f000 f887 	bl	8015d44 <__sinit>
 8015c36:	4b14      	ldr	r3, [pc, #80]	; (8015c88 <_fflush_r+0x6c>)
 8015c38:	429c      	cmp	r4, r3
 8015c3a:	d11b      	bne.n	8015c74 <_fflush_r+0x58>
 8015c3c:	686c      	ldr	r4, [r5, #4]
 8015c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d0ef      	beq.n	8015c26 <_fflush_r+0xa>
 8015c46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015c48:	07d0      	lsls	r0, r2, #31
 8015c4a:	d404      	bmi.n	8015c56 <_fflush_r+0x3a>
 8015c4c:	0599      	lsls	r1, r3, #22
 8015c4e:	d402      	bmi.n	8015c56 <_fflush_r+0x3a>
 8015c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c52:	f000 f915 	bl	8015e80 <__retarget_lock_acquire_recursive>
 8015c56:	4628      	mov	r0, r5
 8015c58:	4621      	mov	r1, r4
 8015c5a:	f7ff ff59 	bl	8015b10 <__sflush_r>
 8015c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015c60:	07da      	lsls	r2, r3, #31
 8015c62:	4605      	mov	r5, r0
 8015c64:	d4e0      	bmi.n	8015c28 <_fflush_r+0xc>
 8015c66:	89a3      	ldrh	r3, [r4, #12]
 8015c68:	059b      	lsls	r3, r3, #22
 8015c6a:	d4dd      	bmi.n	8015c28 <_fflush_r+0xc>
 8015c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c6e:	f000 f908 	bl	8015e82 <__retarget_lock_release_recursive>
 8015c72:	e7d9      	b.n	8015c28 <_fflush_r+0xc>
 8015c74:	4b05      	ldr	r3, [pc, #20]	; (8015c8c <_fflush_r+0x70>)
 8015c76:	429c      	cmp	r4, r3
 8015c78:	d101      	bne.n	8015c7e <_fflush_r+0x62>
 8015c7a:	68ac      	ldr	r4, [r5, #8]
 8015c7c:	e7df      	b.n	8015c3e <_fflush_r+0x22>
 8015c7e:	4b04      	ldr	r3, [pc, #16]	; (8015c90 <_fflush_r+0x74>)
 8015c80:	429c      	cmp	r4, r3
 8015c82:	bf08      	it	eq
 8015c84:	68ec      	ldreq	r4, [r5, #12]
 8015c86:	e7da      	b.n	8015c3e <_fflush_r+0x22>
 8015c88:	0802a2c8 	.word	0x0802a2c8
 8015c8c:	0802a2e8 	.word	0x0802a2e8
 8015c90:	0802a2a8 	.word	0x0802a2a8

08015c94 <std>:
 8015c94:	2300      	movs	r3, #0
 8015c96:	b510      	push	{r4, lr}
 8015c98:	4604      	mov	r4, r0
 8015c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8015c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015ca2:	6083      	str	r3, [r0, #8]
 8015ca4:	8181      	strh	r1, [r0, #12]
 8015ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8015ca8:	81c2      	strh	r2, [r0, #14]
 8015caa:	6183      	str	r3, [r0, #24]
 8015cac:	4619      	mov	r1, r3
 8015cae:	2208      	movs	r2, #8
 8015cb0:	305c      	adds	r0, #92	; 0x5c
 8015cb2:	f7fb fdef 	bl	8011894 <memset>
 8015cb6:	4b05      	ldr	r3, [pc, #20]	; (8015ccc <std+0x38>)
 8015cb8:	6263      	str	r3, [r4, #36]	; 0x24
 8015cba:	4b05      	ldr	r3, [pc, #20]	; (8015cd0 <std+0x3c>)
 8015cbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8015cbe:	4b05      	ldr	r3, [pc, #20]	; (8015cd4 <std+0x40>)
 8015cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015cc2:	4b05      	ldr	r3, [pc, #20]	; (8015cd8 <std+0x44>)
 8015cc4:	6224      	str	r4, [r4, #32]
 8015cc6:	6323      	str	r3, [r4, #48]	; 0x30
 8015cc8:	bd10      	pop	{r4, pc}
 8015cca:	bf00      	nop
 8015ccc:	0801606d 	.word	0x0801606d
 8015cd0:	0801608f 	.word	0x0801608f
 8015cd4:	080160c7 	.word	0x080160c7
 8015cd8:	080160eb 	.word	0x080160eb

08015cdc <_cleanup_r>:
 8015cdc:	4901      	ldr	r1, [pc, #4]	; (8015ce4 <_cleanup_r+0x8>)
 8015cde:	f000 b8af 	b.w	8015e40 <_fwalk_reent>
 8015ce2:	bf00      	nop
 8015ce4:	08015c1d 	.word	0x08015c1d

08015ce8 <__sfmoreglue>:
 8015ce8:	b570      	push	{r4, r5, r6, lr}
 8015cea:	1e4a      	subs	r2, r1, #1
 8015cec:	2568      	movs	r5, #104	; 0x68
 8015cee:	4355      	muls	r5, r2
 8015cf0:	460e      	mov	r6, r1
 8015cf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015cf6:	f7ff fafb 	bl	80152f0 <_malloc_r>
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	b140      	cbz	r0, 8015d10 <__sfmoreglue+0x28>
 8015cfe:	2100      	movs	r1, #0
 8015d00:	e9c0 1600 	strd	r1, r6, [r0]
 8015d04:	300c      	adds	r0, #12
 8015d06:	60a0      	str	r0, [r4, #8]
 8015d08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015d0c:	f7fb fdc2 	bl	8011894 <memset>
 8015d10:	4620      	mov	r0, r4
 8015d12:	bd70      	pop	{r4, r5, r6, pc}

08015d14 <__sfp_lock_acquire>:
 8015d14:	4801      	ldr	r0, [pc, #4]	; (8015d1c <__sfp_lock_acquire+0x8>)
 8015d16:	f000 b8b3 	b.w	8015e80 <__retarget_lock_acquire_recursive>
 8015d1a:	bf00      	nop
 8015d1c:	20000c84 	.word	0x20000c84

08015d20 <__sfp_lock_release>:
 8015d20:	4801      	ldr	r0, [pc, #4]	; (8015d28 <__sfp_lock_release+0x8>)
 8015d22:	f000 b8ae 	b.w	8015e82 <__retarget_lock_release_recursive>
 8015d26:	bf00      	nop
 8015d28:	20000c84 	.word	0x20000c84

08015d2c <__sinit_lock_acquire>:
 8015d2c:	4801      	ldr	r0, [pc, #4]	; (8015d34 <__sinit_lock_acquire+0x8>)
 8015d2e:	f000 b8a7 	b.w	8015e80 <__retarget_lock_acquire_recursive>
 8015d32:	bf00      	nop
 8015d34:	20000c7f 	.word	0x20000c7f

08015d38 <__sinit_lock_release>:
 8015d38:	4801      	ldr	r0, [pc, #4]	; (8015d40 <__sinit_lock_release+0x8>)
 8015d3a:	f000 b8a2 	b.w	8015e82 <__retarget_lock_release_recursive>
 8015d3e:	bf00      	nop
 8015d40:	20000c7f 	.word	0x20000c7f

08015d44 <__sinit>:
 8015d44:	b510      	push	{r4, lr}
 8015d46:	4604      	mov	r4, r0
 8015d48:	f7ff fff0 	bl	8015d2c <__sinit_lock_acquire>
 8015d4c:	69a3      	ldr	r3, [r4, #24]
 8015d4e:	b11b      	cbz	r3, 8015d58 <__sinit+0x14>
 8015d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d54:	f7ff bff0 	b.w	8015d38 <__sinit_lock_release>
 8015d58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015d5c:	6523      	str	r3, [r4, #80]	; 0x50
 8015d5e:	4b13      	ldr	r3, [pc, #76]	; (8015dac <__sinit+0x68>)
 8015d60:	4a13      	ldr	r2, [pc, #76]	; (8015db0 <__sinit+0x6c>)
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	62a2      	str	r2, [r4, #40]	; 0x28
 8015d66:	42a3      	cmp	r3, r4
 8015d68:	bf04      	itt	eq
 8015d6a:	2301      	moveq	r3, #1
 8015d6c:	61a3      	streq	r3, [r4, #24]
 8015d6e:	4620      	mov	r0, r4
 8015d70:	f000 f820 	bl	8015db4 <__sfp>
 8015d74:	6060      	str	r0, [r4, #4]
 8015d76:	4620      	mov	r0, r4
 8015d78:	f000 f81c 	bl	8015db4 <__sfp>
 8015d7c:	60a0      	str	r0, [r4, #8]
 8015d7e:	4620      	mov	r0, r4
 8015d80:	f000 f818 	bl	8015db4 <__sfp>
 8015d84:	2200      	movs	r2, #0
 8015d86:	60e0      	str	r0, [r4, #12]
 8015d88:	2104      	movs	r1, #4
 8015d8a:	6860      	ldr	r0, [r4, #4]
 8015d8c:	f7ff ff82 	bl	8015c94 <std>
 8015d90:	68a0      	ldr	r0, [r4, #8]
 8015d92:	2201      	movs	r2, #1
 8015d94:	2109      	movs	r1, #9
 8015d96:	f7ff ff7d 	bl	8015c94 <std>
 8015d9a:	68e0      	ldr	r0, [r4, #12]
 8015d9c:	2202      	movs	r2, #2
 8015d9e:	2112      	movs	r1, #18
 8015da0:	f7ff ff78 	bl	8015c94 <std>
 8015da4:	2301      	movs	r3, #1
 8015da6:	61a3      	str	r3, [r4, #24]
 8015da8:	e7d2      	b.n	8015d50 <__sinit+0xc>
 8015daa:	bf00      	nop
 8015dac:	08029df8 	.word	0x08029df8
 8015db0:	08015cdd 	.word	0x08015cdd

08015db4 <__sfp>:
 8015db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015db6:	4607      	mov	r7, r0
 8015db8:	f7ff ffac 	bl	8015d14 <__sfp_lock_acquire>
 8015dbc:	4b1e      	ldr	r3, [pc, #120]	; (8015e38 <__sfp+0x84>)
 8015dbe:	681e      	ldr	r6, [r3, #0]
 8015dc0:	69b3      	ldr	r3, [r6, #24]
 8015dc2:	b913      	cbnz	r3, 8015dca <__sfp+0x16>
 8015dc4:	4630      	mov	r0, r6
 8015dc6:	f7ff ffbd 	bl	8015d44 <__sinit>
 8015dca:	3648      	adds	r6, #72	; 0x48
 8015dcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015dd0:	3b01      	subs	r3, #1
 8015dd2:	d503      	bpl.n	8015ddc <__sfp+0x28>
 8015dd4:	6833      	ldr	r3, [r6, #0]
 8015dd6:	b30b      	cbz	r3, 8015e1c <__sfp+0x68>
 8015dd8:	6836      	ldr	r6, [r6, #0]
 8015dda:	e7f7      	b.n	8015dcc <__sfp+0x18>
 8015ddc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015de0:	b9d5      	cbnz	r5, 8015e18 <__sfp+0x64>
 8015de2:	4b16      	ldr	r3, [pc, #88]	; (8015e3c <__sfp+0x88>)
 8015de4:	60e3      	str	r3, [r4, #12]
 8015de6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015dea:	6665      	str	r5, [r4, #100]	; 0x64
 8015dec:	f000 f847 	bl	8015e7e <__retarget_lock_init_recursive>
 8015df0:	f7ff ff96 	bl	8015d20 <__sfp_lock_release>
 8015df4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015df8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015dfc:	6025      	str	r5, [r4, #0]
 8015dfe:	61a5      	str	r5, [r4, #24]
 8015e00:	2208      	movs	r2, #8
 8015e02:	4629      	mov	r1, r5
 8015e04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015e08:	f7fb fd44 	bl	8011894 <memset>
 8015e0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015e10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015e14:	4620      	mov	r0, r4
 8015e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e18:	3468      	adds	r4, #104	; 0x68
 8015e1a:	e7d9      	b.n	8015dd0 <__sfp+0x1c>
 8015e1c:	2104      	movs	r1, #4
 8015e1e:	4638      	mov	r0, r7
 8015e20:	f7ff ff62 	bl	8015ce8 <__sfmoreglue>
 8015e24:	4604      	mov	r4, r0
 8015e26:	6030      	str	r0, [r6, #0]
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	d1d5      	bne.n	8015dd8 <__sfp+0x24>
 8015e2c:	f7ff ff78 	bl	8015d20 <__sfp_lock_release>
 8015e30:	230c      	movs	r3, #12
 8015e32:	603b      	str	r3, [r7, #0]
 8015e34:	e7ee      	b.n	8015e14 <__sfp+0x60>
 8015e36:	bf00      	nop
 8015e38:	08029df8 	.word	0x08029df8
 8015e3c:	ffff0001 	.word	0xffff0001

08015e40 <_fwalk_reent>:
 8015e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e44:	4606      	mov	r6, r0
 8015e46:	4688      	mov	r8, r1
 8015e48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015e4c:	2700      	movs	r7, #0
 8015e4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015e52:	f1b9 0901 	subs.w	r9, r9, #1
 8015e56:	d505      	bpl.n	8015e64 <_fwalk_reent+0x24>
 8015e58:	6824      	ldr	r4, [r4, #0]
 8015e5a:	2c00      	cmp	r4, #0
 8015e5c:	d1f7      	bne.n	8015e4e <_fwalk_reent+0xe>
 8015e5e:	4638      	mov	r0, r7
 8015e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e64:	89ab      	ldrh	r3, [r5, #12]
 8015e66:	2b01      	cmp	r3, #1
 8015e68:	d907      	bls.n	8015e7a <_fwalk_reent+0x3a>
 8015e6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015e6e:	3301      	adds	r3, #1
 8015e70:	d003      	beq.n	8015e7a <_fwalk_reent+0x3a>
 8015e72:	4629      	mov	r1, r5
 8015e74:	4630      	mov	r0, r6
 8015e76:	47c0      	blx	r8
 8015e78:	4307      	orrs	r7, r0
 8015e7a:	3568      	adds	r5, #104	; 0x68
 8015e7c:	e7e9      	b.n	8015e52 <_fwalk_reent+0x12>

08015e7e <__retarget_lock_init_recursive>:
 8015e7e:	4770      	bx	lr

08015e80 <__retarget_lock_acquire_recursive>:
 8015e80:	4770      	bx	lr

08015e82 <__retarget_lock_release_recursive>:
 8015e82:	4770      	bx	lr

08015e84 <__swhatbuf_r>:
 8015e84:	b570      	push	{r4, r5, r6, lr}
 8015e86:	460e      	mov	r6, r1
 8015e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e8c:	2900      	cmp	r1, #0
 8015e8e:	b096      	sub	sp, #88	; 0x58
 8015e90:	4614      	mov	r4, r2
 8015e92:	461d      	mov	r5, r3
 8015e94:	da07      	bge.n	8015ea6 <__swhatbuf_r+0x22>
 8015e96:	2300      	movs	r3, #0
 8015e98:	602b      	str	r3, [r5, #0]
 8015e9a:	89b3      	ldrh	r3, [r6, #12]
 8015e9c:	061a      	lsls	r2, r3, #24
 8015e9e:	d410      	bmi.n	8015ec2 <__swhatbuf_r+0x3e>
 8015ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ea4:	e00e      	b.n	8015ec4 <__swhatbuf_r+0x40>
 8015ea6:	466a      	mov	r2, sp
 8015ea8:	f000 f946 	bl	8016138 <_fstat_r>
 8015eac:	2800      	cmp	r0, #0
 8015eae:	dbf2      	blt.n	8015e96 <__swhatbuf_r+0x12>
 8015eb0:	9a01      	ldr	r2, [sp, #4]
 8015eb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015eb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015eba:	425a      	negs	r2, r3
 8015ebc:	415a      	adcs	r2, r3
 8015ebe:	602a      	str	r2, [r5, #0]
 8015ec0:	e7ee      	b.n	8015ea0 <__swhatbuf_r+0x1c>
 8015ec2:	2340      	movs	r3, #64	; 0x40
 8015ec4:	2000      	movs	r0, #0
 8015ec6:	6023      	str	r3, [r4, #0]
 8015ec8:	b016      	add	sp, #88	; 0x58
 8015eca:	bd70      	pop	{r4, r5, r6, pc}

08015ecc <__smakebuf_r>:
 8015ecc:	898b      	ldrh	r3, [r1, #12]
 8015ece:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ed0:	079d      	lsls	r5, r3, #30
 8015ed2:	4606      	mov	r6, r0
 8015ed4:	460c      	mov	r4, r1
 8015ed6:	d507      	bpl.n	8015ee8 <__smakebuf_r+0x1c>
 8015ed8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015edc:	6023      	str	r3, [r4, #0]
 8015ede:	6123      	str	r3, [r4, #16]
 8015ee0:	2301      	movs	r3, #1
 8015ee2:	6163      	str	r3, [r4, #20]
 8015ee4:	b002      	add	sp, #8
 8015ee6:	bd70      	pop	{r4, r5, r6, pc}
 8015ee8:	ab01      	add	r3, sp, #4
 8015eea:	466a      	mov	r2, sp
 8015eec:	f7ff ffca 	bl	8015e84 <__swhatbuf_r>
 8015ef0:	9900      	ldr	r1, [sp, #0]
 8015ef2:	4605      	mov	r5, r0
 8015ef4:	4630      	mov	r0, r6
 8015ef6:	f7ff f9fb 	bl	80152f0 <_malloc_r>
 8015efa:	b948      	cbnz	r0, 8015f10 <__smakebuf_r+0x44>
 8015efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f00:	059a      	lsls	r2, r3, #22
 8015f02:	d4ef      	bmi.n	8015ee4 <__smakebuf_r+0x18>
 8015f04:	f023 0303 	bic.w	r3, r3, #3
 8015f08:	f043 0302 	orr.w	r3, r3, #2
 8015f0c:	81a3      	strh	r3, [r4, #12]
 8015f0e:	e7e3      	b.n	8015ed8 <__smakebuf_r+0xc>
 8015f10:	4b0d      	ldr	r3, [pc, #52]	; (8015f48 <__smakebuf_r+0x7c>)
 8015f12:	62b3      	str	r3, [r6, #40]	; 0x28
 8015f14:	89a3      	ldrh	r3, [r4, #12]
 8015f16:	6020      	str	r0, [r4, #0]
 8015f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f1c:	81a3      	strh	r3, [r4, #12]
 8015f1e:	9b00      	ldr	r3, [sp, #0]
 8015f20:	6163      	str	r3, [r4, #20]
 8015f22:	9b01      	ldr	r3, [sp, #4]
 8015f24:	6120      	str	r0, [r4, #16]
 8015f26:	b15b      	cbz	r3, 8015f40 <__smakebuf_r+0x74>
 8015f28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f2c:	4630      	mov	r0, r6
 8015f2e:	f000 f915 	bl	801615c <_isatty_r>
 8015f32:	b128      	cbz	r0, 8015f40 <__smakebuf_r+0x74>
 8015f34:	89a3      	ldrh	r3, [r4, #12]
 8015f36:	f023 0303 	bic.w	r3, r3, #3
 8015f3a:	f043 0301 	orr.w	r3, r3, #1
 8015f3e:	81a3      	strh	r3, [r4, #12]
 8015f40:	89a0      	ldrh	r0, [r4, #12]
 8015f42:	4305      	orrs	r5, r0
 8015f44:	81a5      	strh	r5, [r4, #12]
 8015f46:	e7cd      	b.n	8015ee4 <__smakebuf_r+0x18>
 8015f48:	08015cdd 	.word	0x08015cdd

08015f4c <memmove>:
 8015f4c:	4288      	cmp	r0, r1
 8015f4e:	b510      	push	{r4, lr}
 8015f50:	eb01 0402 	add.w	r4, r1, r2
 8015f54:	d902      	bls.n	8015f5c <memmove+0x10>
 8015f56:	4284      	cmp	r4, r0
 8015f58:	4623      	mov	r3, r4
 8015f5a:	d807      	bhi.n	8015f6c <memmove+0x20>
 8015f5c:	1e43      	subs	r3, r0, #1
 8015f5e:	42a1      	cmp	r1, r4
 8015f60:	d008      	beq.n	8015f74 <memmove+0x28>
 8015f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015f6a:	e7f8      	b.n	8015f5e <memmove+0x12>
 8015f6c:	4402      	add	r2, r0
 8015f6e:	4601      	mov	r1, r0
 8015f70:	428a      	cmp	r2, r1
 8015f72:	d100      	bne.n	8015f76 <memmove+0x2a>
 8015f74:	bd10      	pop	{r4, pc}
 8015f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015f7e:	e7f7      	b.n	8015f70 <memmove+0x24>

08015f80 <__malloc_lock>:
 8015f80:	4801      	ldr	r0, [pc, #4]	; (8015f88 <__malloc_lock+0x8>)
 8015f82:	f7ff bf7d 	b.w	8015e80 <__retarget_lock_acquire_recursive>
 8015f86:	bf00      	nop
 8015f88:	20000c80 	.word	0x20000c80

08015f8c <__malloc_unlock>:
 8015f8c:	4801      	ldr	r0, [pc, #4]	; (8015f94 <__malloc_unlock+0x8>)
 8015f8e:	f7ff bf78 	b.w	8015e82 <__retarget_lock_release_recursive>
 8015f92:	bf00      	nop
 8015f94:	20000c80 	.word	0x20000c80

08015f98 <_realloc_r>:
 8015f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f9a:	4607      	mov	r7, r0
 8015f9c:	4614      	mov	r4, r2
 8015f9e:	460e      	mov	r6, r1
 8015fa0:	b921      	cbnz	r1, 8015fac <_realloc_r+0x14>
 8015fa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015fa6:	4611      	mov	r1, r2
 8015fa8:	f7ff b9a2 	b.w	80152f0 <_malloc_r>
 8015fac:	b922      	cbnz	r2, 8015fb8 <_realloc_r+0x20>
 8015fae:	f7ff f94f 	bl	8015250 <_free_r>
 8015fb2:	4625      	mov	r5, r4
 8015fb4:	4628      	mov	r0, r5
 8015fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fb8:	f000 f8f2 	bl	80161a0 <_malloc_usable_size_r>
 8015fbc:	42a0      	cmp	r0, r4
 8015fbe:	d20f      	bcs.n	8015fe0 <_realloc_r+0x48>
 8015fc0:	4621      	mov	r1, r4
 8015fc2:	4638      	mov	r0, r7
 8015fc4:	f7ff f994 	bl	80152f0 <_malloc_r>
 8015fc8:	4605      	mov	r5, r0
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	d0f2      	beq.n	8015fb4 <_realloc_r+0x1c>
 8015fce:	4631      	mov	r1, r6
 8015fd0:	4622      	mov	r2, r4
 8015fd2:	f7fe fc65 	bl	80148a0 <memcpy>
 8015fd6:	4631      	mov	r1, r6
 8015fd8:	4638      	mov	r0, r7
 8015fda:	f7ff f939 	bl	8015250 <_free_r>
 8015fde:	e7e9      	b.n	8015fb4 <_realloc_r+0x1c>
 8015fe0:	4635      	mov	r5, r6
 8015fe2:	e7e7      	b.n	8015fb4 <_realloc_r+0x1c>

08015fe4 <_raise_r>:
 8015fe4:	291f      	cmp	r1, #31
 8015fe6:	b538      	push	{r3, r4, r5, lr}
 8015fe8:	4604      	mov	r4, r0
 8015fea:	460d      	mov	r5, r1
 8015fec:	d904      	bls.n	8015ff8 <_raise_r+0x14>
 8015fee:	2316      	movs	r3, #22
 8015ff0:	6003      	str	r3, [r0, #0]
 8015ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ff6:	bd38      	pop	{r3, r4, r5, pc}
 8015ff8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015ffa:	b112      	cbz	r2, 8016002 <_raise_r+0x1e>
 8015ffc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016000:	b94b      	cbnz	r3, 8016016 <_raise_r+0x32>
 8016002:	4620      	mov	r0, r4
 8016004:	f000 f830 	bl	8016068 <_getpid_r>
 8016008:	462a      	mov	r2, r5
 801600a:	4601      	mov	r1, r0
 801600c:	4620      	mov	r0, r4
 801600e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016012:	f000 b817 	b.w	8016044 <_kill_r>
 8016016:	2b01      	cmp	r3, #1
 8016018:	d00a      	beq.n	8016030 <_raise_r+0x4c>
 801601a:	1c59      	adds	r1, r3, #1
 801601c:	d103      	bne.n	8016026 <_raise_r+0x42>
 801601e:	2316      	movs	r3, #22
 8016020:	6003      	str	r3, [r0, #0]
 8016022:	2001      	movs	r0, #1
 8016024:	e7e7      	b.n	8015ff6 <_raise_r+0x12>
 8016026:	2400      	movs	r4, #0
 8016028:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801602c:	4628      	mov	r0, r5
 801602e:	4798      	blx	r3
 8016030:	2000      	movs	r0, #0
 8016032:	e7e0      	b.n	8015ff6 <_raise_r+0x12>

08016034 <raise>:
 8016034:	4b02      	ldr	r3, [pc, #8]	; (8016040 <raise+0xc>)
 8016036:	4601      	mov	r1, r0
 8016038:	6818      	ldr	r0, [r3, #0]
 801603a:	f7ff bfd3 	b.w	8015fe4 <_raise_r>
 801603e:	bf00      	nop
 8016040:	20000044 	.word	0x20000044

08016044 <_kill_r>:
 8016044:	b538      	push	{r3, r4, r5, lr}
 8016046:	4d07      	ldr	r5, [pc, #28]	; (8016064 <_kill_r+0x20>)
 8016048:	2300      	movs	r3, #0
 801604a:	4604      	mov	r4, r0
 801604c:	4608      	mov	r0, r1
 801604e:	4611      	mov	r1, r2
 8016050:	602b      	str	r3, [r5, #0]
 8016052:	f7f3 ff25 	bl	8009ea0 <_kill>
 8016056:	1c43      	adds	r3, r0, #1
 8016058:	d102      	bne.n	8016060 <_kill_r+0x1c>
 801605a:	682b      	ldr	r3, [r5, #0]
 801605c:	b103      	cbz	r3, 8016060 <_kill_r+0x1c>
 801605e:	6023      	str	r3, [r4, #0]
 8016060:	bd38      	pop	{r3, r4, r5, pc}
 8016062:	bf00      	nop
 8016064:	20000c88 	.word	0x20000c88

08016068 <_getpid_r>:
 8016068:	f7f3 bf12 	b.w	8009e90 <_getpid>

0801606c <__sread>:
 801606c:	b510      	push	{r4, lr}
 801606e:	460c      	mov	r4, r1
 8016070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016074:	f000 f89c 	bl	80161b0 <_read_r>
 8016078:	2800      	cmp	r0, #0
 801607a:	bfab      	itete	ge
 801607c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801607e:	89a3      	ldrhlt	r3, [r4, #12]
 8016080:	181b      	addge	r3, r3, r0
 8016082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016086:	bfac      	ite	ge
 8016088:	6563      	strge	r3, [r4, #84]	; 0x54
 801608a:	81a3      	strhlt	r3, [r4, #12]
 801608c:	bd10      	pop	{r4, pc}

0801608e <__swrite>:
 801608e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016092:	461f      	mov	r7, r3
 8016094:	898b      	ldrh	r3, [r1, #12]
 8016096:	05db      	lsls	r3, r3, #23
 8016098:	4605      	mov	r5, r0
 801609a:	460c      	mov	r4, r1
 801609c:	4616      	mov	r6, r2
 801609e:	d505      	bpl.n	80160ac <__swrite+0x1e>
 80160a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160a4:	2302      	movs	r3, #2
 80160a6:	2200      	movs	r2, #0
 80160a8:	f000 f868 	bl	801617c <_lseek_r>
 80160ac:	89a3      	ldrh	r3, [r4, #12]
 80160ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80160b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80160b6:	81a3      	strh	r3, [r4, #12]
 80160b8:	4632      	mov	r2, r6
 80160ba:	463b      	mov	r3, r7
 80160bc:	4628      	mov	r0, r5
 80160be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160c2:	f000 b817 	b.w	80160f4 <_write_r>

080160c6 <__sseek>:
 80160c6:	b510      	push	{r4, lr}
 80160c8:	460c      	mov	r4, r1
 80160ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160ce:	f000 f855 	bl	801617c <_lseek_r>
 80160d2:	1c43      	adds	r3, r0, #1
 80160d4:	89a3      	ldrh	r3, [r4, #12]
 80160d6:	bf15      	itete	ne
 80160d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80160da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80160de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80160e2:	81a3      	strheq	r3, [r4, #12]
 80160e4:	bf18      	it	ne
 80160e6:	81a3      	strhne	r3, [r4, #12]
 80160e8:	bd10      	pop	{r4, pc}

080160ea <__sclose>:
 80160ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160ee:	f000 b813 	b.w	8016118 <_close_r>
	...

080160f4 <_write_r>:
 80160f4:	b538      	push	{r3, r4, r5, lr}
 80160f6:	4d07      	ldr	r5, [pc, #28]	; (8016114 <_write_r+0x20>)
 80160f8:	4604      	mov	r4, r0
 80160fa:	4608      	mov	r0, r1
 80160fc:	4611      	mov	r1, r2
 80160fe:	2200      	movs	r2, #0
 8016100:	602a      	str	r2, [r5, #0]
 8016102:	461a      	mov	r2, r3
 8016104:	f7f3 ff03 	bl	8009f0e <_write>
 8016108:	1c43      	adds	r3, r0, #1
 801610a:	d102      	bne.n	8016112 <_write_r+0x1e>
 801610c:	682b      	ldr	r3, [r5, #0]
 801610e:	b103      	cbz	r3, 8016112 <_write_r+0x1e>
 8016110:	6023      	str	r3, [r4, #0]
 8016112:	bd38      	pop	{r3, r4, r5, pc}
 8016114:	20000c88 	.word	0x20000c88

08016118 <_close_r>:
 8016118:	b538      	push	{r3, r4, r5, lr}
 801611a:	4d06      	ldr	r5, [pc, #24]	; (8016134 <_close_r+0x1c>)
 801611c:	2300      	movs	r3, #0
 801611e:	4604      	mov	r4, r0
 8016120:	4608      	mov	r0, r1
 8016122:	602b      	str	r3, [r5, #0]
 8016124:	f7f3 ff0f 	bl	8009f46 <_close>
 8016128:	1c43      	adds	r3, r0, #1
 801612a:	d102      	bne.n	8016132 <_close_r+0x1a>
 801612c:	682b      	ldr	r3, [r5, #0]
 801612e:	b103      	cbz	r3, 8016132 <_close_r+0x1a>
 8016130:	6023      	str	r3, [r4, #0]
 8016132:	bd38      	pop	{r3, r4, r5, pc}
 8016134:	20000c88 	.word	0x20000c88

08016138 <_fstat_r>:
 8016138:	b538      	push	{r3, r4, r5, lr}
 801613a:	4d07      	ldr	r5, [pc, #28]	; (8016158 <_fstat_r+0x20>)
 801613c:	2300      	movs	r3, #0
 801613e:	4604      	mov	r4, r0
 8016140:	4608      	mov	r0, r1
 8016142:	4611      	mov	r1, r2
 8016144:	602b      	str	r3, [r5, #0]
 8016146:	f7f3 ff0a 	bl	8009f5e <_fstat>
 801614a:	1c43      	adds	r3, r0, #1
 801614c:	d102      	bne.n	8016154 <_fstat_r+0x1c>
 801614e:	682b      	ldr	r3, [r5, #0]
 8016150:	b103      	cbz	r3, 8016154 <_fstat_r+0x1c>
 8016152:	6023      	str	r3, [r4, #0]
 8016154:	bd38      	pop	{r3, r4, r5, pc}
 8016156:	bf00      	nop
 8016158:	20000c88 	.word	0x20000c88

0801615c <_isatty_r>:
 801615c:	b538      	push	{r3, r4, r5, lr}
 801615e:	4d06      	ldr	r5, [pc, #24]	; (8016178 <_isatty_r+0x1c>)
 8016160:	2300      	movs	r3, #0
 8016162:	4604      	mov	r4, r0
 8016164:	4608      	mov	r0, r1
 8016166:	602b      	str	r3, [r5, #0]
 8016168:	f7f3 ff09 	bl	8009f7e <_isatty>
 801616c:	1c43      	adds	r3, r0, #1
 801616e:	d102      	bne.n	8016176 <_isatty_r+0x1a>
 8016170:	682b      	ldr	r3, [r5, #0]
 8016172:	b103      	cbz	r3, 8016176 <_isatty_r+0x1a>
 8016174:	6023      	str	r3, [r4, #0]
 8016176:	bd38      	pop	{r3, r4, r5, pc}
 8016178:	20000c88 	.word	0x20000c88

0801617c <_lseek_r>:
 801617c:	b538      	push	{r3, r4, r5, lr}
 801617e:	4d07      	ldr	r5, [pc, #28]	; (801619c <_lseek_r+0x20>)
 8016180:	4604      	mov	r4, r0
 8016182:	4608      	mov	r0, r1
 8016184:	4611      	mov	r1, r2
 8016186:	2200      	movs	r2, #0
 8016188:	602a      	str	r2, [r5, #0]
 801618a:	461a      	mov	r2, r3
 801618c:	f7f3 ff02 	bl	8009f94 <_lseek>
 8016190:	1c43      	adds	r3, r0, #1
 8016192:	d102      	bne.n	801619a <_lseek_r+0x1e>
 8016194:	682b      	ldr	r3, [r5, #0]
 8016196:	b103      	cbz	r3, 801619a <_lseek_r+0x1e>
 8016198:	6023      	str	r3, [r4, #0]
 801619a:	bd38      	pop	{r3, r4, r5, pc}
 801619c:	20000c88 	.word	0x20000c88

080161a0 <_malloc_usable_size_r>:
 80161a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161a4:	1f18      	subs	r0, r3, #4
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	bfbc      	itt	lt
 80161aa:	580b      	ldrlt	r3, [r1, r0]
 80161ac:	18c0      	addlt	r0, r0, r3
 80161ae:	4770      	bx	lr

080161b0 <_read_r>:
 80161b0:	b538      	push	{r3, r4, r5, lr}
 80161b2:	4d07      	ldr	r5, [pc, #28]	; (80161d0 <_read_r+0x20>)
 80161b4:	4604      	mov	r4, r0
 80161b6:	4608      	mov	r0, r1
 80161b8:	4611      	mov	r1, r2
 80161ba:	2200      	movs	r2, #0
 80161bc:	602a      	str	r2, [r5, #0]
 80161be:	461a      	mov	r2, r3
 80161c0:	f7f3 fe88 	bl	8009ed4 <_read>
 80161c4:	1c43      	adds	r3, r0, #1
 80161c6:	d102      	bne.n	80161ce <_read_r+0x1e>
 80161c8:	682b      	ldr	r3, [r5, #0]
 80161ca:	b103      	cbz	r3, 80161ce <_read_r+0x1e>
 80161cc:	6023      	str	r3, [r4, #0]
 80161ce:	bd38      	pop	{r3, r4, r5, pc}
 80161d0:	20000c88 	.word	0x20000c88

080161d4 <_init>:
 80161d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161d6:	bf00      	nop
 80161d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161da:	bc08      	pop	{r3}
 80161dc:	469e      	mov	lr, r3
 80161de:	4770      	bx	lr

080161e0 <_fini>:
 80161e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161e2:	bf00      	nop
 80161e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161e6:	bc08      	pop	{r3}
 80161e8:	469e      	mov	lr, r3
 80161ea:	4770      	bx	lr
