
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016dc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014130  08016f60  08016f60  00026f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b090  0802b090  00040218  2**0
                  CONTENTS
  4 .ARM          00000008  0802b090  0802b090  0003b090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b098  0802b098  00040218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b098  0802b098  0003b098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b09c  0802b09c  0003b09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0802b0a0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b74  20000218  0802b2b8  00040218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d8c  0802b2b8  00040d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f87e  00000000  00000000  00040248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000494c  00000000  00000000  0005fac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00064418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a8  00000000  00000000  00065f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3cf  00000000  00000000  00067918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028893  00000000  00000000  00083ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099971  00000000  00000000  000ac57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145eeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000869c  00000000  00000000  00145f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016f48 	.word	0x08016f48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08016f48 	.word	0x08016f48

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <UART_ESP_ParseLine>:

BlynkServerData Blynk1;


void UART_ESP_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

		if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f009 ff8d 	bl	800af56 <UARTDMA_GetLineFromReceiveBuffer>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10f      	bne.n	8001062 <UART_ESP_ParseLine+0x3a>
		{
			// Header
			char* ParsePointer = strtok(BufferReceive, "=");
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4909      	ldr	r1, [pc, #36]	; (800106c <UART_ESP_ParseLine+0x44>)
 8001048:	4618      	mov	r0, r3
 800104a:	f012 ff6d 	bl	8013f28 <strtok>
 800104e:	64f8      	str	r0, [r7, #76]	; 0x4c

			if (strcmp(ParsePointer, "CHRELAY") == 0) // Command to change state of Relays
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <UART_ESP_ParseLine+0x48>)
 8001052:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001054:	f7ff f8c4 	bl	80001e0 <strcmp>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <UART_ESP_ParseLine+0x3a>
			{
				ESP_ParseChangeRelayState();
 800105e:	f000 f809 	bl	8001074 <ESP_ParseChangeRelayState>
			}
		}
}
 8001062:	bf00      	nop
 8001064:	3750      	adds	r7, #80	; 0x50
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	08016f60 	.word	0x08016f60
 8001070:	08016f64 	.word	0x08016f64

08001074 <ESP_ParseChangeRelayState>:

//
// Get info from Blynk Server About change Relays state
// CHRELAY=7,1\n
void ESP_ParseChangeRelayState(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
	uint8_t RelayNr = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
	uint8_t NewState = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	73bb      	strb	r3, [r7, #14]
	char* ParsePointer = strtok(NULL, ",");
 8001082:	4913      	ldr	r1, [pc, #76]	; (80010d0 <ESP_ParseChangeRelayState+0x5c>)
 8001084:	2000      	movs	r0, #0
 8001086:	f012 ff4f 	bl	8013f28 <strtok>
 800108a:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d012      	beq.n	80010ba <ESP_ParseChangeRelayState+0x46>
	{
		RelayNr = atoi(ParsePointer);
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f011 fa3c 	bl	8012512 <atoi>
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
		if(strlen(ParsePointer) > 0)
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d009      	beq.n	80010ba <ESP_ParseChangeRelayState+0x46>
		{
			char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80010a6:	490a      	ldr	r1, [pc, #40]	; (80010d0 <ESP_ParseChangeRelayState+0x5c>)
 80010a8:	2000      	movs	r0, #0
 80010aa:	f012 ff3d 	bl	8013f28 <strtok>
 80010ae:	6078      	str	r0, [r7, #4]
			NewState = atoi(ParsePointer); // If there are no chars, change string to integer
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f011 fa2e 	bl	8012512 <atoi>
 80010b6:	4603      	mov	r3, r0
 80010b8:	73bb      	strb	r3, [r7, #14]
		}
	}
	ESP_ChangeRelayState(RelayNr, NewState);
 80010ba:	7bba      	ldrb	r2, [r7, #14]
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f807 	bl	80010d4 <ESP_ChangeRelayState>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	08016f6c 	.word	0x08016f6c

080010d4 <ESP_ChangeRelayState>:


void ESP_ChangeRelayState(uint8_t RelayNumber, uint8_t NewState)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	460a      	mov	r2, r1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
	// First Relay (Switch)
	if(1 == RelayNumber)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d10a      	bne.n	8001100 <ESP_ChangeRelayState+0x2c>
	{
		if(0 == NewState) firstSwitchTurn(0); //Turn OFF
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <ESP_ChangeRelayState+0x24>
 80010f0:	2000      	movs	r0, #0
 80010f2:	f007 fe39 	bl	8008d68 <firstSwitchTurn>
	else if(8 == RelayNumber)
	{
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
		else fourthLightTurn(1); //Turn ON
	}
}
 80010f6:	e064      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else firstSwitchTurn(1); //Turn ON
 80010f8:	2001      	movs	r0, #1
 80010fa:	f007 fe35 	bl	8008d68 <firstSwitchTurn>
}
 80010fe:	e060      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(2 == RelayNumber)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d10a      	bne.n	800111c <ESP_ChangeRelayState+0x48>
		if(0 == NewState) secondSwitchTurn(0); //Turn OFF
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d103      	bne.n	8001114 <ESP_ChangeRelayState+0x40>
 800110c:	2000      	movs	r0, #0
 800110e:	f007 fead 	bl	8008e6c <secondSwitchTurn>
}
 8001112:	e056      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else secondSwitchTurn(1); //Turn ON
 8001114:	2001      	movs	r0, #1
 8001116:	f007 fea9 	bl	8008e6c <secondSwitchTurn>
}
 800111a:	e052      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(3 == RelayNumber)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d10a      	bne.n	8001138 <ESP_ChangeRelayState+0x64>
		if(0 == NewState) thirdSwitchTurn(0); //Turn OFF
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <ESP_ChangeRelayState+0x5c>
 8001128:	2000      	movs	r0, #0
 800112a:	f007 ff21 	bl	8008f70 <thirdSwitchTurn>
}
 800112e:	e048      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else thirdSwitchTurn(1); //Turn ON
 8001130:	2001      	movs	r0, #1
 8001132:	f007 ff1d 	bl	8008f70 <thirdSwitchTurn>
}
 8001136:	e044      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(4 == RelayNumber)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b04      	cmp	r3, #4
 800113c:	d10a      	bne.n	8001154 <ESP_ChangeRelayState+0x80>
		if(0 == NewState) fourthSwitchTurn(0); //Turn OFF
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d103      	bne.n	800114c <ESP_ChangeRelayState+0x78>
 8001144:	2000      	movs	r0, #0
 8001146:	f007 ff95 	bl	8009074 <fourthSwitchTurn>
}
 800114a:	e03a      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else fourthSwitchTurn(1); //Turn ON
 800114c:	2001      	movs	r0, #1
 800114e:	f007 ff91 	bl	8009074 <fourthSwitchTurn>
}
 8001152:	e036      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(5 == RelayNumber)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b05      	cmp	r3, #5
 8001158:	d10a      	bne.n	8001170 <ESP_ChangeRelayState+0x9c>
		if(0 == NewState) firstLightTurn(0); //Turn OFF
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d103      	bne.n	8001168 <ESP_ChangeRelayState+0x94>
 8001160:	2000      	movs	r0, #0
 8001162:	f008 f809 	bl	8009178 <firstLightTurn>
}
 8001166:	e02c      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else firstLightTurn(1); //Turn ON
 8001168:	2001      	movs	r0, #1
 800116a:	f008 f805 	bl	8009178 <firstLightTurn>
}
 800116e:	e028      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(6 == RelayNumber)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b06      	cmp	r3, #6
 8001174:	d10a      	bne.n	800118c <ESP_ChangeRelayState+0xb8>
		if(0 == NewState) secondLightTurn(0); //Turn OFF
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d103      	bne.n	8001184 <ESP_ChangeRelayState+0xb0>
 800117c:	2000      	movs	r0, #0
 800117e:	f008 f879 	bl	8009274 <secondLightTurn>
}
 8001182:	e01e      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else secondLightTurn(1); //Turn ON
 8001184:	2001      	movs	r0, #1
 8001186:	f008 f875 	bl	8009274 <secondLightTurn>
}
 800118a:	e01a      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(7 == RelayNumber)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b07      	cmp	r3, #7
 8001190:	d10a      	bne.n	80011a8 <ESP_ChangeRelayState+0xd4>
		if(0 == NewState) thirdLightTurn(0); //Turn OFF
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d103      	bne.n	80011a0 <ESP_ChangeRelayState+0xcc>
 8001198:	2000      	movs	r0, #0
 800119a:	f008 f8e9 	bl	8009370 <thirdLightTurn>
}
 800119e:	e010      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else thirdLightTurn(1); //Turn ON
 80011a0:	2001      	movs	r0, #1
 80011a2:	f008 f8e5 	bl	8009370 <thirdLightTurn>
}
 80011a6:	e00c      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
	else if(8 == RelayNumber)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d109      	bne.n	80011c2 <ESP_ChangeRelayState+0xee>
		if(0 == NewState) fourthLightTurn(0); //Turn OFF
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d103      	bne.n	80011bc <ESP_ChangeRelayState+0xe8>
 80011b4:	2000      	movs	r0, #0
 80011b6:	f008 f959 	bl	800946c <fourthLightTurn>
}
 80011ba:	e002      	b.n	80011c2 <ESP_ChangeRelayState+0xee>
		else fourthLightTurn(1); //Turn ON
 80011bc:	2001      	movs	r0, #1
 80011be:	f008 f955 	bl	800946c <fourthLightTurn>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <ESP_SendCurrentTempInside>:

//
// Send info to Blynk Server
//
void ESP_SendCurrentTempInside(float CurrentTemp)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPINS=%f\n", CurrentTemp);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff f9ce 	bl	8000578 <__aeabi_f2d>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4905      	ldr	r1, [pc, #20]	; (80011f8 <ESP_SendCurrentTempInside+0x2c>)
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <ESP_SendCurrentTempInside+0x30>)
 80011e4:	f012 f84c 	bl	8013280 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 80011e8:	4904      	ldr	r1, [pc, #16]	; (80011fc <ESP_SendCurrentTempInside+0x30>)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <ESP_SendCurrentTempInside+0x34>)
 80011ec:	f009 fee4 	bl	800afb8 <UARTDMA_Print>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	08016f70 	.word	0x08016f70
 80011fc:	20000234 	.word	0x20000234
 8001200:	20000654 	.word	0x20000654

08001204 <ESP_SendCurrentTempOutside>:

void ESP_SendCurrentTempOutside(float CurrentTemp)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPOUT=%f\n", CurrentTemp);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff f9b2 	bl	8000578 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4905      	ldr	r1, [pc, #20]	; (8001230 <ESP_SendCurrentTempOutside+0x2c>)
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <ESP_SendCurrentTempOutside+0x30>)
 800121c:	f012 f830 	bl	8013280 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001220:	4904      	ldr	r1, [pc, #16]	; (8001234 <ESP_SendCurrentTempOutside+0x30>)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <ESP_SendCurrentTempOutside+0x34>)
 8001224:	f009 fec8 	bl	800afb8 <UARTDMA_Print>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	08016f7c 	.word	0x08016f7c
 8001234:	20000234 	.word	0x20000234
 8001238:	20000654 	.word	0x20000654

0800123c <ESP_SendCurrentPressure>:

void ESP_SendCurrentPressure(float CurrentPress)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "PRES=%f\n", CurrentPress);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff f996 	bl	8000578 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4905      	ldr	r1, [pc, #20]	; (8001268 <ESP_SendCurrentPressure+0x2c>)
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <ESP_SendCurrentPressure+0x30>)
 8001254:	f012 f814 	bl	8013280 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001258:	4904      	ldr	r1, [pc, #16]	; (800126c <ESP_SendCurrentPressure+0x30>)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <ESP_SendCurrentPressure+0x34>)
 800125c:	f009 feac 	bl	800afb8 <UARTDMA_Print>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	08016f88 	.word	0x08016f88
 800126c:	20000234 	.word	0x20000234
 8001270:	20000654 	.word	0x20000654

08001274 <ESP_SendCurrentWaterLvl>:

void ESP_SendCurrentWaterLvl(uint32_t CurrentWaterLvl)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	sprintf(Message, "WLVL=%ld\n", CurrentWaterLvl);
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4906      	ldr	r1, [pc, #24]	; (8001298 <ESP_SendCurrentWaterLvl+0x24>)
 8001280:	4806      	ldr	r0, [pc, #24]	; (800129c <ESP_SendCurrentWaterLvl+0x28>)
 8001282:	f011 fffd 	bl	8013280 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001286:	4905      	ldr	r1, [pc, #20]	; (800129c <ESP_SendCurrentWaterLvl+0x28>)
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <ESP_SendCurrentWaterLvl+0x2c>)
 800128a:	f009 fe95 	bl	800afb8 <UARTDMA_Print>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	08016f94 	.word	0x08016f94
 800129c:	20000234 	.word	0x20000234
 80012a0:	20000654 	.word	0x20000654

080012a4 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012bc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1acb      	subs	r3, r1, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bfb8      	it	lt
 80012ca:	425b      	neglt	r3, r3
 80012cc:	429a      	cmp	r2, r3
 80012ce:	bfcc      	ite	gt
 80012d0:	2301      	movgt	r3, #1
 80012d2:	2300      	movle	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80012d8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00b      	beq.n	80012f8 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	623b      	str	r3, [r7, #32]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dd0b      	ble.n	8001318 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	61fb      	str	r3, [r7, #28]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	b29a      	uxth	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	b29b      	uxth	r3, r3
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	b29b      	uxth	r3, r3
 8001324:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	bfb8      	it	lt
 8001330:	425b      	neglt	r3, r3
 8001332:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001334:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001338:	0fda      	lsrs	r2, r3, #31
 800133a:	4413      	add	r3, r2
 800133c:	105b      	asrs	r3, r3, #1
 800133e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	da02      	bge.n	800134e <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001348:	2301      	movs	r3, #1
 800134a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800134c:	e02e      	b.n	80013ac <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 800134e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001352:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001354:	e02a      	b.n	80013ac <GFX_WriteLine+0x108>
	        if (steep) {
 8001356:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800135a:	2b00      	cmp	r3, #0
 800135c:	d008      	beq.n	8001370 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	b21b      	sxth	r3, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	b211      	sxth	r1, r2
 8001366:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001368:	4618      	mov	r0, r3
 800136a:	f000 feab 	bl	80020c4 <ILI9341_WritePixel>
 800136e:	e007      	b.n	8001380 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	b21b      	sxth	r3, r3
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	b211      	sxth	r1, r2
 8001378:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fea2 	bl	80020c4 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8001380:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001382:	8abb      	ldrh	r3, [r7, #20]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800138a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800138e:	2b00      	cmp	r3, #0
 8001390:	da09      	bge.n	80013a6 <GFX_WriteLine+0x102>
	            y_start += ystep;
 8001392:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
	            err += dx;
 800139c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800139e:	8afb      	ldrh	r3, [r7, #22]
 80013a0:	4413      	add	r3, r2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	ddd0      	ble.n	8001356 <GFX_WriteLine+0xb2>
	        }
	    }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3730      	adds	r7, #48	; 0x30
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af02      	add	r7, sp, #8
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	1e5a      	subs	r2, r3, #1
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f7ff ff60 	bl	80012a4 <GFX_WriteLine>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	1e5a      	subs	r2, r3, #1
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f7ff ff4a 	bl	80012a4 <GFX_WriteLine>
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af02      	add	r7, sp, #8
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	d113      	bne.n	8001456 <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	dd05      	ble.n	8001442 <GFX_DrawLine+0x2a>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	8c3b      	ldrh	r3, [r7, #32]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f7ff ffb5 	bl	80013be <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001454:	e01f      	b.n	8001496 <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d113      	bne.n	8001486 <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	429a      	cmp	r2, r3
 8001464:	dd05      	ble.n	8001472 <GFX_DrawLine+0x5a>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	8c3b      	ldrh	r3, [r7, #32]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff ffb4 	bl	80013ec <GFX_DrawFastHLine>
}
 8001484:	e007      	b.n	8001496 <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 8001486:	8c3b      	ldrh	r3, [r7, #32]
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff ff07 	bl	80012a4 <GFX_WriteLine>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	4611      	mov	r1, r2
 80014aa:	461a      	mov	r2, r3
 80014ac:	460b      	mov	r3, r1
 80014ae:	80fb      	strh	r3, [r7, #6]
 80014b0:	4613      	mov	r3, r2
 80014b2:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e008      	b.n	80014cc <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 80014ba:	88ba      	ldrh	r2, [r7, #4]
 80014bc:	8c3b      	ldrh	r3, [r7, #32]
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f7ff ff7c 	bl	80013be <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	88fa      	ldrh	r2, [r7, #6]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <GFX_DrawFillRectangle+0x1c>
    }

}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b088      	sub	sp, #32
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	4611      	mov	r1, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	460b      	mov	r3, r1
 80014f2:	80fb      	strh	r3, [r7, #6]
 80014f4:	4613      	mov	r3, r2
 80014f6:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	f1c3 0301 	rsb	r3, r3, #1
 80014fe:	b29b      	uxth	r3, r3
 8001500:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	461a      	mov	r2, r3
 800150a:	03d2      	lsls	r2, r2, #15
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	b29b      	uxth	r3, r3
 8001512:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800151c:	e0b5      	b.n	800168a <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 800151e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0e      	blt.n	8001544 <GFX_DrawCircleHelper+0x62>
            y--;
 8001526:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800152a:	b29b      	uxth	r3, r3
 800152c:	3b01      	subs	r3, #1
 800152e:	b29b      	uxth	r3, r3
 8001530:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001532:	8b7b      	ldrh	r3, [r7, #26]
 8001534:	3302      	adds	r3, #2
 8001536:	b29b      	uxth	r3, r3
 8001538:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800153a:	8bfa      	ldrh	r2, [r7, #30]
 800153c:	8b7b      	ldrh	r3, [r7, #26]
 800153e:	4413      	add	r3, r2
 8001540:	b29b      	uxth	r3, r3
 8001542:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001544:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001548:	b29b      	uxth	r3, r3
 800154a:	3301      	adds	r3, #1
 800154c:	b29b      	uxth	r3, r3
 800154e:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001550:	8bbb      	ldrh	r3, [r7, #28]
 8001552:	3302      	adds	r3, #2
 8001554:	b29b      	uxth	r3, r3
 8001556:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001558:	8bfa      	ldrh	r2, [r7, #30]
 800155a:	8bbb      	ldrh	r3, [r7, #28]
 800155c:	4413      	add	r3, r2
 800155e:	b29b      	uxth	r3, r3
 8001560:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 8001562:	797b      	ldrb	r3, [r7, #5]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01f      	beq.n	80015ac <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	b29a      	uxth	r2, r3
 8001570:	8b3b      	ldrh	r3, [r7, #24]
 8001572:	4413      	add	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	b218      	sxth	r0, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	b29a      	uxth	r2, r3
 800157c:	8afb      	ldrh	r3, [r7, #22]
 800157e:	4413      	add	r3, r2
 8001580:	b29b      	uxth	r3, r3
 8001582:	b21b      	sxth	r3, r3
 8001584:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001586:	4619      	mov	r1, r3
 8001588:	f000 fd9c 	bl	80020c4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	b29a      	uxth	r2, r3
 8001590:	8afb      	ldrh	r3, [r7, #22]
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	b218      	sxth	r0, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	b29a      	uxth	r2, r3
 800159c:	8b3b      	ldrh	r3, [r7, #24]
 800159e:	4413      	add	r3, r2
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015a6:	4619      	mov	r1, r3
 80015a8:	f000 fd8c 	bl	80020c4 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 80015ac:	797b      	ldrb	r3, [r7, #5]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01f      	beq.n	80015f6 <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	8b3b      	ldrh	r3, [r7, #24]
 80015bc:	4413      	add	r3, r2
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b218      	sxth	r0, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	8afb      	ldrh	r3, [r7, #22]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015d0:	4619      	mov	r1, r3
 80015d2:	f000 fd77 	bl	80020c4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	8afb      	ldrh	r3, [r7, #22]
 80015dc:	4413      	add	r3, r2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	b218      	sxth	r0, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	8b3b      	ldrh	r3, [r7, #24]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015f0:	4619      	mov	r1, r3
 80015f2:	f000 fd67 	bl	80020c4 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 80015f6:	797b      	ldrb	r3, [r7, #5]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01f      	beq.n	8001640 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	b29a      	uxth	r2, r3
 8001604:	8afb      	ldrh	r3, [r7, #22]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	b29b      	uxth	r3, r3
 800160a:	b218      	sxth	r0, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	b29a      	uxth	r2, r3
 8001610:	8b3b      	ldrh	r3, [r7, #24]
 8001612:	4413      	add	r3, r2
 8001614:	b29b      	uxth	r3, r3
 8001616:	b21b      	sxth	r3, r3
 8001618:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800161a:	4619      	mov	r1, r3
 800161c:	f000 fd52 	bl	80020c4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	b29a      	uxth	r2, r3
 8001624:	8b3b      	ldrh	r3, [r7, #24]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	b29b      	uxth	r3, r3
 800162a:	b218      	sxth	r0, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	b29a      	uxth	r2, r3
 8001630:	8afb      	ldrh	r3, [r7, #22]
 8001632:	4413      	add	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	b21b      	sxth	r3, r3
 8001638:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800163a:	4619      	mov	r1, r3
 800163c:	f000 fd42 	bl	80020c4 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 8001640:	797b      	ldrb	r3, [r7, #5]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d01f      	beq.n	800168a <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	b29a      	uxth	r2, r3
 800164e:	8afb      	ldrh	r3, [r7, #22]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b29b      	uxth	r3, r3
 8001654:	b218      	sxth	r0, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	b29a      	uxth	r2, r3
 800165a:	8b3b      	ldrh	r3, [r7, #24]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	b29b      	uxth	r3, r3
 8001660:	b21b      	sxth	r3, r3
 8001662:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001664:	4619      	mov	r1, r3
 8001666:	f000 fd2d 	bl	80020c4 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	b29a      	uxth	r2, r3
 800166e:	8b3b      	ldrh	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	b218      	sxth	r0, r3
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	b29a      	uxth	r2, r3
 800167a:	8afb      	ldrh	r3, [r7, #22]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	b29b      	uxth	r3, r3
 8001680:	b21b      	sxth	r3, r3
 8001682:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001684:	4619      	mov	r1, r3
 8001686:	f000 fd1d 	bl	80020c4 <ILI9341_WritePixel>
    while (x<y) {
 800168a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800168e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001692:	429a      	cmp	r2, r3
 8001694:	f6ff af43 	blt.w	800151e <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b088      	sub	sp, #32
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	4611      	mov	r1, r2
 80016ae:	461a      	mov	r2, r3
 80016b0:	460b      	mov	r3, r1
 80016b2:	80fb      	strh	r3, [r7, #6]
 80016b4:	4613      	mov	r3, r2
 80016b6:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	f1c3 0301 	rsb	r3, r3, #1
 80016be:	b29b      	uxth	r3, r3
 80016c0:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	461a      	mov	r2, r3
 80016ca:	03d2      	lsls	r2, r2, #15
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 80016dc:	e073      	b.n	80017c6 <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 80016de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0e      	blt.n	8001704 <GFX_DrawFillCircleHelper+0x62>
            y--;
 80016e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80016f2:	8b7b      	ldrh	r3, [r7, #26]
 80016f4:	3302      	adds	r3, #2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80016fa:	8bfa      	ldrh	r2, [r7, #30]
 80016fc:	8b7b      	ldrh	r3, [r7, #26]
 80016fe:	4413      	add	r3, r2
 8001700:	b29b      	uxth	r3, r3
 8001702:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001704:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001708:	b29b      	uxth	r3, r3
 800170a:	3301      	adds	r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001710:	8bbb      	ldrh	r3, [r7, #28]
 8001712:	3302      	adds	r3, #2
 8001714:	b29b      	uxth	r3, r3
 8001716:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001718:	8bfa      	ldrh	r2, [r7, #30]
 800171a:	8bbb      	ldrh	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	b29b      	uxth	r3, r3
 8001720:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001722:	797b      	ldrb	r3, [r7, #5]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d023      	beq.n	8001774 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800172c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	18d0      	adds	r0, r2, r3
 8001734:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	1ad1      	subs	r1, r2, r3
 800173c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001748:	441a      	add	r2, r3
 800174a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800174c:	f7ff fe37 	bl	80013be <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001750:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	18d0      	adds	r0, r2, r3
 8001758:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	1ad1      	subs	r1, r2, r3
 8001760:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800176c:	441a      	add	r2, r3
 800176e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001770:	f7ff fe25 	bl	80013be <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8001774:	797b      	ldrb	r3, [r7, #5]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d023      	beq.n	80017c6 <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 800177e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	1ad0      	subs	r0, r2, r3
 8001786:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	1ad1      	subs	r1, r2, r3
 800178e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800179a:	441a      	add	r2, r3
 800179c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800179e:	f7ff fe0e 	bl	80013be <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 80017a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	1ad0      	subs	r0, r2, r3
 80017aa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	1ad1      	subs	r1, r2, r3
 80017b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80017be:	441a      	add	r2, r3
 80017c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017c2:	f7ff fdfc 	bl	80013be <GFX_DrawFastVLine>
    while (x<y) {
 80017c6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80017ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	db85      	blt.n	80016de <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	460b      	mov	r3, r1
 80017ec:	80fb      	strh	r3, [r7, #6]
 80017ee:	4613      	mov	r3, r2
 80017f0:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 80017f2:	8b3a      	ldrh	r2, [r7, #24]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	18d0      	adds	r0, r2, r3
 80017f8:	88fa      	ldrh	r2, [r7, #6]
 80017fa:	8b3b      	ldrh	r3, [r7, #24]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	1ad2      	subs	r2, r2, r3
 8001800:	8bbb      	ldrh	r3, [r7, #28]
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	f7ff fdf2 	bl	80013ec <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001808:	8b3a      	ldrh	r2, [r7, #24]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	18d0      	adds	r0, r2, r3
 800180e:	88ba      	ldrh	r2, [r7, #4]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4413      	add	r3, r2
 8001814:	1e59      	subs	r1, r3, #1
 8001816:	88fa      	ldrh	r2, [r7, #6]
 8001818:	8b3b      	ldrh	r3, [r7, #24]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	1ad2      	subs	r2, r2, r3
 800181e:	8bbb      	ldrh	r3, [r7, #28]
 8001820:	f7ff fde4 	bl	80013ec <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001824:	8b3a      	ldrh	r2, [r7, #24]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	18d1      	adds	r1, r2, r3
 800182a:	88ba      	ldrh	r2, [r7, #4]
 800182c:	8b3b      	ldrh	r3, [r7, #24]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	1ad2      	subs	r2, r2, r3
 8001832:	8bbb      	ldrh	r3, [r7, #28]
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff fdc2 	bl	80013be <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800183a:	88fa      	ldrh	r2, [r7, #6]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	1e58      	subs	r0, r3, #1
 8001842:	8b3a      	ldrh	r2, [r7, #24]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	18d1      	adds	r1, r2, r3
 8001848:	88ba      	ldrh	r2, [r7, #4]
 800184a:	8b3b      	ldrh	r3, [r7, #24]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	1ad2      	subs	r2, r2, r3
 8001850:	8bbb      	ldrh	r3, [r7, #28]
 8001852:	f7ff fdb4 	bl	80013be <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 8001856:	8b3a      	ldrh	r2, [r7, #24]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	18d0      	adds	r0, r2, r3
 800185c:	8b3a      	ldrh	r2, [r7, #24]
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	18d1      	adds	r1, r2, r3
 8001862:	8b3a      	ldrh	r2, [r7, #24]
 8001864:	8bbb      	ldrh	r3, [r7, #28]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2301      	movs	r3, #1
 800186a:	f7ff fe3a 	bl	80014e2 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 800186e:	88fa      	ldrh	r2, [r7, #6]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	441a      	add	r2, r3
 8001874:	8b3b      	ldrh	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	1e58      	subs	r0, r3, #1
 800187a:	8b3a      	ldrh	r2, [r7, #24]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	18d1      	adds	r1, r2, r3
 8001880:	8b3a      	ldrh	r2, [r7, #24]
 8001882:	8bbb      	ldrh	r3, [r7, #28]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2302      	movs	r3, #2
 8001888:	f7ff fe2b 	bl	80014e2 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 800188c:	88fa      	ldrh	r2, [r7, #6]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	441a      	add	r2, r3
 8001892:	8b3b      	ldrh	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	1e58      	subs	r0, r3, #1
 8001898:	88ba      	ldrh	r2, [r7, #4]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	441a      	add	r2, r3
 800189e:	8b3b      	ldrh	r3, [r7, #24]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	1e59      	subs	r1, r3, #1
 80018a4:	8b3a      	ldrh	r2, [r7, #24]
 80018a6:	8bbb      	ldrh	r3, [r7, #28]
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2304      	movs	r3, #4
 80018ac:	f7ff fe19 	bl	80014e2 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80018b0:	8b3a      	ldrh	r2, [r7, #24]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	18d0      	adds	r0, r2, r3
 80018b6:	88ba      	ldrh	r2, [r7, #4]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	441a      	add	r2, r3
 80018bc:	8b3b      	ldrh	r3, [r7, #24]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	1e59      	subs	r1, r3, #1
 80018c2:	8b3a      	ldrh	r2, [r7, #24]
 80018c4:	8bbb      	ldrh	r3, [r7, #28]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2308      	movs	r3, #8
 80018ca:	f7ff fe0a 	bl	80014e2 <GFX_DrawCircleHelper>
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 80018d6:	b590      	push	{r4, r7, lr}
 80018d8:	b087      	sub	sp, #28
 80018da:	af02      	add	r7, sp, #8
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	4611      	mov	r1, r2
 80018e2:	461a      	mov	r2, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	80fb      	strh	r3, [r7, #6]
 80018e8:	4613      	mov	r3, r2
 80018ea:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 80018ec:	8c3a      	ldrh	r2, [r7, #32]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	18d0      	adds	r0, r2, r3
 80018f2:	8c3b      	ldrh	r3, [r7, #32]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	88fa      	ldrh	r2, [r7, #6]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	88b9      	ldrh	r1, [r7, #4]
 8001900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	460b      	mov	r3, r1
 8001906:	68b9      	ldr	r1, [r7, #8]
 8001908:	f7ff fdc9 	bl	800149e <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800190c:	88fa      	ldrh	r2, [r7, #6]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	441a      	add	r2, r3
 8001912:	8c3b      	ldrh	r3, [r7, #32]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	1e58      	subs	r0, r3, #1
 8001918:	8c3a      	ldrh	r2, [r7, #32]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	18d1      	adds	r1, r2, r3
 800191e:	8c3b      	ldrh	r3, [r7, #32]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	b29b      	uxth	r3, r3
 8001924:	88ba      	ldrh	r2, [r7, #4]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29b      	uxth	r3, r3
 800192e:	b21b      	sxth	r3, r3
 8001930:	8c3c      	ldrh	r4, [r7, #32]
 8001932:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001934:	9201      	str	r2, [sp, #4]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	4622      	mov	r2, r4
 800193c:	f7ff feb1 	bl	80016a2 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001940:	8c3a      	ldrh	r2, [r7, #32]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	18d0      	adds	r0, r2, r3
 8001946:	8c3a      	ldrh	r2, [r7, #32]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	18d1      	adds	r1, r2, r3
 800194c:	8c3b      	ldrh	r3, [r7, #32]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	b29b      	uxth	r3, r3
 8001952:	88ba      	ldrh	r2, [r7, #4]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29b      	uxth	r3, r3
 800195c:	b21b      	sxth	r3, r3
 800195e:	8c3c      	ldrh	r4, [r7, #32]
 8001960:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001962:	9201      	str	r2, [sp, #4]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2302      	movs	r3, #2
 8001968:	4622      	mov	r2, r4
 800196a:	f7ff fe9a 	bl	80016a2 <GFX_DrawFillCircleHelper>
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bd90      	pop	{r4, r7, pc}
	...

08001978 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <EF_SetFont+0x1c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000278 	.word	0x20000278

08001998 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <EF_GetFontHeight+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	781b      	ldrb	r3, [r3, #0]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	20000278 	.word	0x20000278

080019b0 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <EF_GetFontStartChar+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	785b      	ldrb	r3, [r3, #1]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	20000278 	.word	0x20000278

080019c8 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <EF_GetFontEndChar+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	789b      	ldrb	r3, [r3, #2]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	20000278 	.word	0x20000278

080019e0 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <EF_GetFontSpaceWidth+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	78db      	ldrb	r3, [r3, #3]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	20000278 	.word	0x20000278

080019f8 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	460a      	mov	r2, r1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2bc5      	cmp	r3, #197	; 0xc5
 8001a0c:	d052      	beq.n	8001ab4 <EF_DecodePolish+0xbc>
 8001a0e:	2bc5      	cmp	r3, #197	; 0xc5
 8001a10:	f300 80e7 	bgt.w	8001be2 <EF_DecodePolish+0x1ea>
 8001a14:	2bc3      	cmp	r3, #195	; 0xc3
 8001a16:	d002      	beq.n	8001a1e <EF_DecodePolish+0x26>
 8001a18:	2bc4      	cmp	r3, #196	; 0xc4
 8001a1a:	d00a      	beq.n	8001a32 <EF_DecodePolish+0x3a>
 8001a1c:	e0e1      	b.n	8001be2 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001a1e:	79bb      	ldrb	r3, [r7, #6]
 8001a20:	2b93      	cmp	r3, #147	; 0x93
 8001a22:	d002      	beq.n	8001a2a <EF_DecodePolish+0x32>
 8001a24:	2bb3      	cmp	r3, #179	; 0xb3
 8001a26:	d002      	beq.n	8001a2e <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001a28:	e0db      	b.n	8001be2 <EF_DecodePolish+0x1ea>
			return 0x84;
 8001a2a:	2384      	movs	r3, #132	; 0x84
 8001a2c:	e0da      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			return 0x8D;
 8001a2e:	238d      	movs	r3, #141	; 0x8d
 8001a30:	e0d8      	b.n	8001be4 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8001a32:	79bb      	ldrb	r3, [r7, #6]
 8001a34:	3b84      	subs	r3, #132	; 0x84
 8001a36:	2b15      	cmp	r3, #21
 8001a38:	f200 80d0 	bhi.w	8001bdc <EF_DecodePolish+0x1e4>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <EF_DecodePolish+0x4c>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a9d 	.word	0x08001a9d
 8001a48:	08001aa9 	.word	0x08001aa9
 8001a4c:	08001aa5 	.word	0x08001aa5
 8001a50:	08001ab1 	.word	0x08001ab1
 8001a54:	08001bdd 	.word	0x08001bdd
 8001a58:	08001bdd 	.word	0x08001bdd
 8001a5c:	08001bdd 	.word	0x08001bdd
 8001a60:	08001bdd 	.word	0x08001bdd
 8001a64:	08001bdd 	.word	0x08001bdd
 8001a68:	08001bdd 	.word	0x08001bdd
 8001a6c:	08001bdd 	.word	0x08001bdd
 8001a70:	08001bdd 	.word	0x08001bdd
 8001a74:	08001bdd 	.word	0x08001bdd
 8001a78:	08001bdd 	.word	0x08001bdd
 8001a7c:	08001bdd 	.word	0x08001bdd
 8001a80:	08001bdd 	.word	0x08001bdd
 8001a84:	08001bdd 	.word	0x08001bdd
 8001a88:	08001bdd 	.word	0x08001bdd
 8001a8c:	08001bdd 	.word	0x08001bdd
 8001a90:	08001bdd 	.word	0x08001bdd
 8001a94:	08001aa1 	.word	0x08001aa1
 8001a98:	08001aad 	.word	0x08001aad
		{
		case 0x84: // Ą
			return 0x7F;
 8001a9c:	237f      	movs	r3, #127	; 0x7f
 8001a9e:	e0a1      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001aa0:	2381      	movs	r3, #129	; 0x81
 8001aa2:	e09f      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	e09d      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001aa8:	2388      	movs	r3, #136	; 0x88
 8001aaa:	e09b      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001aac:	238a      	movs	r3, #138	; 0x8a
 8001aae:	e099      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001ab0:	2389      	movs	r3, #137	; 0x89
 8001ab2:	e097      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	3b81      	subs	r3, #129	; 0x81
 8001ab8:	2b3b      	cmp	r3, #59	; 0x3b
 8001aba:	f200 8091 	bhi.w	8001be0 <EF_DecodePolish+0x1e8>
 8001abe:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <EF_DecodePolish+0xcc>)
 8001ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac4:	08001bb5 	.word	0x08001bb5
 8001ac8:	08001bc9 	.word	0x08001bc9
 8001acc:	08001bb9 	.word	0x08001bb9
 8001ad0:	08001bcd 	.word	0x08001bcd
 8001ad4:	08001be1 	.word	0x08001be1
 8001ad8:	08001be1 	.word	0x08001be1
 8001adc:	08001be1 	.word	0x08001be1
 8001ae0:	08001be1 	.word	0x08001be1
 8001ae4:	08001be1 	.word	0x08001be1
 8001ae8:	08001be1 	.word	0x08001be1
 8001aec:	08001be1 	.word	0x08001be1
 8001af0:	08001be1 	.word	0x08001be1
 8001af4:	08001be1 	.word	0x08001be1
 8001af8:	08001be1 	.word	0x08001be1
 8001afc:	08001be1 	.word	0x08001be1
 8001b00:	08001be1 	.word	0x08001be1
 8001b04:	08001be1 	.word	0x08001be1
 8001b08:	08001be1 	.word	0x08001be1
 8001b0c:	08001be1 	.word	0x08001be1
 8001b10:	08001be1 	.word	0x08001be1
 8001b14:	08001be1 	.word	0x08001be1
 8001b18:	08001be1 	.word	0x08001be1
 8001b1c:	08001be1 	.word	0x08001be1
 8001b20:	08001be1 	.word	0x08001be1
 8001b24:	08001be1 	.word	0x08001be1
 8001b28:	08001bbd 	.word	0x08001bbd
 8001b2c:	08001bd1 	.word	0x08001bd1
 8001b30:	08001be1 	.word	0x08001be1
 8001b34:	08001be1 	.word	0x08001be1
 8001b38:	08001be1 	.word	0x08001be1
 8001b3c:	08001be1 	.word	0x08001be1
 8001b40:	08001be1 	.word	0x08001be1
 8001b44:	08001be1 	.word	0x08001be1
 8001b48:	08001be1 	.word	0x08001be1
 8001b4c:	08001be1 	.word	0x08001be1
 8001b50:	08001be1 	.word	0x08001be1
 8001b54:	08001be1 	.word	0x08001be1
 8001b58:	08001be1 	.word	0x08001be1
 8001b5c:	08001be1 	.word	0x08001be1
 8001b60:	08001be1 	.word	0x08001be1
 8001b64:	08001be1 	.word	0x08001be1
 8001b68:	08001be1 	.word	0x08001be1
 8001b6c:	08001be1 	.word	0x08001be1
 8001b70:	08001be1 	.word	0x08001be1
 8001b74:	08001be1 	.word	0x08001be1
 8001b78:	08001be1 	.word	0x08001be1
 8001b7c:	08001be1 	.word	0x08001be1
 8001b80:	08001be1 	.word	0x08001be1
 8001b84:	08001be1 	.word	0x08001be1
 8001b88:	08001be1 	.word	0x08001be1
 8001b8c:	08001be1 	.word	0x08001be1
 8001b90:	08001be1 	.word	0x08001be1
 8001b94:	08001be1 	.word	0x08001be1
 8001b98:	08001be1 	.word	0x08001be1
 8001b9c:	08001be1 	.word	0x08001be1
 8001ba0:	08001be1 	.word	0x08001be1
 8001ba4:	08001bc1 	.word	0x08001bc1
 8001ba8:	08001bd5 	.word	0x08001bd5
 8001bac:	08001bc5 	.word	0x08001bc5
 8001bb0:	08001bd9 	.word	0x08001bd9
		{
		case 0x81: // Ł
			return 0x82;
 8001bb4:	2382      	movs	r3, #130	; 0x82
 8001bb6:	e015      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001bb8:	2383      	movs	r3, #131	; 0x83
 8001bba:	e013      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001bbc:	2385      	movs	r3, #133	; 0x85
 8001bbe:	e011      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001bc0:	2386      	movs	r3, #134	; 0x86
 8001bc2:	e00f      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8001bc4:	2387      	movs	r3, #135	; 0x87
 8001bc6:	e00d      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001bc8:	238b      	movs	r3, #139	; 0x8b
 8001bca:	e00b      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001bcc:	238c      	movs	r3, #140	; 0x8c
 8001bce:	e009      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001bd0:	238e      	movs	r3, #142	; 0x8e
 8001bd2:	e007      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8001bd4:	238f      	movs	r3, #143	; 0x8f
 8001bd6:	e005      	b.n	8001be4 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001bd8:	2390      	movs	r3, #144	; 0x90
 8001bda:	e003      	b.n	8001be4 <EF_DecodePolish+0x1ec>
		break;
 8001bdc:	bf00      	nop
 8001bde:	e000      	b.n	8001be2 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001be0:	bf00      	nop
	}

	return 0;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4623      	mov	r3, r4
 8001c00:	71fb      	strb	r3, [r7, #7]
 8001c02:	4603      	mov	r3, r0
 8001c04:	80bb      	strh	r3, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	807b      	strh	r3, [r7, #2]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001c0e:	f7ff fecf 	bl	80019b0 <EF_GetFontStartChar>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d120      	bne.n	8001c64 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001c22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d114      	bne.n	8001c54 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8001c2a:	88bc      	ldrh	r4, [r7, #4]
 8001c2c:	887d      	ldrh	r5, [r7, #2]
 8001c2e:	f7ff fed7 	bl	80019e0 <EF_GetFontSpaceWidth>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	0052      	lsls	r2, r2, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <EF_PutChar+0x1b8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b299      	uxth	r1, r3
 8001c46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7ff fc25 	bl	800149e <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8001c54:	f7ff fec4 	bl	80019e0 <EF_GetFontSpaceWidth>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	0052      	lsls	r2, r2, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	e09c      	b.n	8001d9e <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8001c64:	f7ff fea4 	bl	80019b0 <EF_GetFontStartChar>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d201      	bcs.n	8001c76 <EF_PutChar+0x86>
	{
		return 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e093      	b.n	8001d9e <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8001c76:	f7ff fea7 	bl	80019c8 <EF_GetFontEndChar>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	7c7b      	ldrb	r3, [r7, #17]
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d901      	bls.n	8001c88 <EF_PutChar+0x98>
	{
		return 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e08a      	b.n	8001d9e <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001c88:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <EF_PutChar+0x1b8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	7c7b      	ldrb	r3, [r7, #17]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001c96:	4b44      	ldr	r3, [pc, #272]	; (8001da8 <EF_PutChar+0x1b8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a42      	ldr	r2, [pc, #264]	; (8001da8 <EF_PutChar+0x1b8>)
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	6851      	ldr	r1, [r2, #4]
 8001ca2:	7c7a      	ldrb	r2, [r7, #17]
 8001ca4:	0092      	lsls	r2, r2, #2
 8001ca6:	440a      	add	r2, r1
 8001ca8:	8852      	ldrh	r2, [r2, #2]
 8001caa:	4413      	add	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	83fb      	strh	r3, [r7, #30]
 8001cb2:	e066      	b.n	8001d82 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	777b      	strb	r3, [r7, #29]
 8001cbe:	e053      	b.n	8001d68 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001cc6:	7efb      	ldrb	r3, [r7, #27]
 8001cc8:	2b07      	cmp	r3, #7
 8001cca:	d905      	bls.n	8001cd8 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001ccc:	2308      	movs	r3, #8
 8001cce:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001cd0:	7efb      	ldrb	r3, [r7, #27]
 8001cd2:	3b08      	subs	r3, #8
 8001cd4:	76fb      	strb	r3, [r7, #27]
 8001cd6:	e001      	b.n	8001cdc <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001cd8:	7efb      	ldrb	r3, [r7, #27]
 8001cda:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	74bb      	strb	r3, [r7, #18]
 8001ce0:	e038      	b.n	8001d54 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001ce2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da15      	bge.n	8001d16 <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001cea:	7f7b      	ldrb	r3, [r7, #29]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	88bb      	ldrh	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	7cbb      	ldrb	r3, [r7, #18]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b218      	sxth	r0, r3
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	8bfb      	ldrh	r3, [r7, #30]
 8001d06:	4413      	add	r3, r2
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	883a      	ldrh	r2, [r7, #0]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f000 f9d8 	bl	80020c4 <ILI9341_WritePixel>
 8001d14:	e018      	b.n	8001d48 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001d16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d114      	bne.n	8001d48 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001d1e:	7f7b      	ldrb	r3, [r7, #29]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	88bb      	ldrh	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	7cbb      	ldrb	r3, [r7, #18]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	b218      	sxth	r0, r3
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	8bfb      	ldrh	r3, [r7, #30]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d42:	4619      	mov	r1, r3
 8001d44:	f000 f9be 	bl	80020c4 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001d48:	7cbb      	ldrb	r3, [r7, #18]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	74bb      	strb	r3, [r7, #18]
 8001d4e:	7cfb      	ldrb	r3, [r7, #19]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	74fb      	strb	r3, [r7, #19]
 8001d54:	7cba      	ldrb	r2, [r7, #18]
 8001d56:	7f3b      	ldrb	r3, [r7, #28]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3c2      	bcc.n	8001ce2 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001d62:	7f7b      	ldrb	r3, [r7, #29]
 8001d64:	3301      	adds	r3, #1
 8001d66:	777b      	strb	r3, [r7, #29]
 8001d68:	7f7a      	ldrb	r2, [r7, #29]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da00      	bge.n	8001d76 <EF_PutChar+0x186>
 8001d74:	3307      	adds	r3, #7
 8001d76:	10db      	asrs	r3, r3, #3
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dda1      	ble.n	8001cc0 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001d7c:	8bfb      	ldrh	r3, [r7, #30]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	83fb      	strh	r3, [r7, #30]
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <EF_PutChar+0x1b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	8bfa      	ldrh	r2, [r7, #30]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d391      	bcc.n	8001cb4 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <EF_PutChar+0x1b8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	7c7b      	ldrb	r3, [r7, #17]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bdb0      	pop	{r4, r5, r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000278 	.word	0x20000278

08001dac <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	817b      	strh	r3, [r7, #10]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	813b      	strh	r3, [r7, #8]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7fe fa14 	bl	80001f4 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	75fb      	strb	r3, [r7, #23]
 8001dd8:	e05a      	b.n	8001e90 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2bc5      	cmp	r3, #197	; 0xc5
 8001de4:	d817      	bhi.n	8001e16 <EF_PutString+0x6a>
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2bc2      	cmp	r3, #194	; 0xc2
 8001df0:	d911      	bls.n	8001e16 <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	7818      	ldrb	r0, [r3, #0]
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4413      	add	r3, r2
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7ff fdf7 	bl	80019f8 <EF_DecodePolish>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	3301      	adds	r3, #1
 8001e12:	75fb      	strb	r3, [r7, #23]
 8001e14:	e004      	b.n	8001e20 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001e20:	897a      	ldrh	r2, [r7, #10]
 8001e22:	8abb      	ldrh	r3, [r7, #20]
 8001e24:	4413      	add	r3, r2
 8001e26:	b299      	uxth	r1, r3
 8001e28:	88fc      	ldrh	r4, [r7, #6]
 8001e2a:	893a      	ldrh	r2, [r7, #8]
 8001e2c:	7cf8      	ldrb	r0, [r7, #19]
 8001e2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4623      	mov	r3, r4
 8001e3a:	f7ff fed9 	bl	8001bf0 <EF_PutChar>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001e42:	7c7b      	ldrb	r3, [r7, #17]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	8abb      	ldrh	r3, [r7, #20]
 8001e48:	4413      	add	r3, r2
 8001e4a:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001e4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d113      	bne.n	8001e7c <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001e54:	897a      	ldrh	r2, [r7, #10]
 8001e56:	8abb      	ldrh	r3, [r7, #20]
 8001e58:	18d4      	adds	r4, r2, r3
 8001e5a:	893d      	ldrh	r5, [r7, #8]
 8001e5c:	f7ff fdc0 	bl	80019e0 <EF_GetFontSpaceWidth>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29e      	uxth	r6, r3
 8001e64:	f7ff fd98 	bl	8001998 <EF_GetFontHeight>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	4632      	mov	r2, r6
 8001e74:	4629      	mov	r1, r5
 8001e76:	4620      	mov	r0, r4
 8001e78:	f7ff fb11 	bl	800149e <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001e7c:	f7ff fdb0 	bl	80019e0 <EF_GetFontSpaceWidth>
 8001e80:	4603      	mov	r3, r0
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	8abb      	ldrh	r3, [r7, #20]
 8001e86:	4413      	add	r3, r2
 8001e88:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	75fb      	strb	r3, [r7, #23]
 8001e90:	7dfa      	ldrb	r2, [r7, #23]
 8001e92:	7cbb      	ldrb	r3, [r7, #18]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d3a0      	bcc.n	8001dda <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001e98:	8abb      	ldrh	r3, [r7, #20]
 8001e9a:	b2dc      	uxtb	r4, r3
 8001e9c:	f7ff fda0 	bl	80019e0 <EF_GetFontSpaceWidth>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	1ae3      	subs	r3, r4, r3
 8001ea4:	b2db      	uxtb	r3, r3
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eae <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f009 fba2 	bl	800b600 <HAL_Delay>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001ece:	e014      	b.n	8001efa <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <ILI9341_SendToTFT+0x5c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d10c      	bne.n	8001efa <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <ILI9341_SendToTFT+0x5c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	330c      	adds	r3, #12
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	7812      	ldrb	r2, [r2, #0]
 8001eec:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e7      	bne.n	8001ed0 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f00:	bf00      	nop
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <ILI9341_SendToTFT+0x5c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	2b80      	cmp	r3, #128	; 0x80
 8001f10:	d0f7      	beq.n	8001f02 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	2000027c 	.word	0x2000027c

08001f24 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f34:	480b      	ldr	r0, [pc, #44]	; (8001f64 <ILI9341_SendComand+0x40>)
 8001f36:	f00a fad3 	bl	800c4e0 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f40:	4808      	ldr	r0, [pc, #32]	; (8001f64 <ILI9341_SendComand+0x40>)
 8001f42:	f00a facd 	bl	800c4e0 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	2101      	movs	r1, #1
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ffba 	bl	8001ec4 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f50:	2201      	movs	r2, #1
 8001f52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <ILI9341_SendComand+0x40>)
 8001f58:	f00a fac2 	bl	800c4e0 <HAL_GPIO_WritePin>
#endif
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40020400 	.word	0x40020400

08001f68 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f7c:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <ILI9341_SendCommandAndData+0x5c>)
 8001f7e:	f00a faaf 	bl	800c4e0 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f88:	480e      	ldr	r0, [pc, #56]	; (8001fc4 <ILI9341_SendCommandAndData+0x5c>)
 8001f8a:	f00a faa9 	bl	800c4e0 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001f8e:	f107 030f 	add.w	r3, r7, #15
 8001f92:	2101      	movs	r1, #1
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff95 	bl	8001ec4 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fa0:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <ILI9341_SendCommandAndData+0x5c>)
 8001fa2:	f00a fa9d 	bl	800c4e0 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	68b8      	ldr	r0, [r7, #8]
 8001faa:	f7ff ff8b 	bl	8001ec4 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <ILI9341_SendCommandAndData+0x5c>)
 8001fb6:	f00a fa93 	bl	800c4e0 <HAL_GPIO_WritePin>
#endif

}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40020400 	.word	0x40020400

08001fc8 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d820      	bhi.n	800201a <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d816      	bhi.n	800200c <ILI9341_SetRotation+0x44>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <ILI9341_SetRotation+0x1c>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08001ffb 	.word	0x08001ffb
 8001fec:	08002001 	.word	0x08002001
 8001ff0:	08002007 	.word	0x08002007
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001ff4:	2348      	movs	r3, #72	; 0x48
 8001ff6:	71fb      	strb	r3, [r7, #7]
		break;
 8001ff8:	e008      	b.n	800200c <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001ffa:	2328      	movs	r3, #40	; 0x28
 8001ffc:	71fb      	strb	r3, [r7, #7]
		break;
 8001ffe:	e005      	b.n	800200c <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8002000:	2388      	movs	r3, #136	; 0x88
 8002002:	71fb      	strb	r3, [r7, #7]
		break;
 8002004:	e002      	b.n	800200c <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8002006:	23e8      	movs	r3, #232	; 0xe8
 8002008:	71fb      	strb	r3, [r7, #7]
		break;
 800200a:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 800200c:	1dfb      	adds	r3, r7, #7
 800200e:	2201      	movs	r2, #1
 8002010:	4619      	mov	r1, r3
 8002012:	2036      	movs	r0, #54	; 0x36
 8002014:	f7ff ffa8 	bl	8001f68 <ILI9341_SendCommandAndData>
 8002018:	e000      	b.n	800201c <ILI9341_SetRotation+0x54>
		return;
 800201a:	bf00      	nop
}
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop

08002024 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	4604      	mov	r4, r0
 800202c:	4608      	mov	r0, r1
 800202e:	4611      	mov	r1, r2
 8002030:	461a      	mov	r2, r3
 8002032:	4623      	mov	r3, r4
 8002034:	80fb      	strh	r3, [r7, #6]
 8002036:	4603      	mov	r3, r0
 8002038:	80bb      	strh	r3, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	807b      	strh	r3, [r7, #2]
 800203e:	4613      	mov	r3, r2
 8002040:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8002042:	88fa      	ldrh	r2, [r7, #6]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	4413      	add	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	81fb      	strh	r3, [r7, #14]
 800204e:	88ba      	ldrh	r2, [r7, #4]
 8002050:	883b      	ldrh	r3, [r7, #0]
 8002052:	4413      	add	r3, r2
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	b29b      	uxth	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 800206a:	89fb      	ldrh	r3, [r7, #14]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b29b      	uxth	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	2204      	movs	r2, #4
 8002080:	4619      	mov	r1, r3
 8002082:	202a      	movs	r0, #42	; 0x2a
 8002084:	f7ff ff70 	bl	8001f68 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8002088:	88bb      	ldrh	r3, [r7, #4]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	b29b      	uxth	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8002092:	88bb      	ldrh	r3, [r7, #4]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8002098:	89bb      	ldrh	r3, [r7, #12]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	b29b      	uxth	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 80020a2:	89bb      	ldrh	r3, [r7, #12]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	2204      	movs	r2, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	202b      	movs	r0, #43	; 0x2b
 80020b2:	f7ff ff59 	bl	8001f68 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 80020b6:	202c      	movs	r0, #44	; 0x2c
 80020b8:	f7ff ff34 	bl	8001f24 <ILI9341_SendComand>

}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd90      	pop	{r4, r7, pc}

080020c4 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
 80020ce:	460b      	mov	r3, r1
 80020d0:	80bb      	strh	r3, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 80020d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db21      	blt.n	8002122 <ILI9341_WritePixel+0x5e>
 80020de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020e6:	da1c      	bge.n	8002122 <ILI9341_WritePixel+0x5e>
 80020e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db18      	blt.n	8002122 <ILI9341_WritePixel+0x5e>
 80020f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020f4:	2bef      	cmp	r3, #239	; 0xef
 80020f6:	dc14      	bgt.n	8002122 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 80020f8:	88f8      	ldrh	r0, [r7, #6]
 80020fa:	88b9      	ldrh	r1, [r7, #4]
 80020fc:	2301      	movs	r3, #1
 80020fe:	2201      	movs	r2, #1
 8002100:	f7ff ff90 	bl	8002024 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	b29b      	uxth	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	2202      	movs	r2, #2
 800211a:	4619      	mov	r1, r3
 800211c:	202c      	movs	r0, #44	; 0x2c
 800211e:	f7ff ff23 	bl	8001f68 <ILI9341_SendCommandAndData>
	}

}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	60ba      	str	r2, [r7, #8]
 8002132:	461a      	mov	r2, r3
 8002134:	4603      	mov	r3, r0
 8002136:	81fb      	strh	r3, [r7, #14]
 8002138:	460b      	mov	r3, r1
 800213a:	81bb      	strh	r3, [r7, #12]
 800213c:	4613      	mov	r3, r2
 800213e:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8002140:	89fa      	ldrh	r2, [r7, #14]
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	4413      	add	r3, r2
 8002146:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800214a:	dc14      	bgt.n	8002176 <ILI9341_DrawImage+0x4c>
 800214c:	89ba      	ldrh	r2, [r7, #12]
 800214e:	8b3b      	ldrh	r3, [r7, #24]
 8002150:	4413      	add	r3, r2
 8002152:	2bf0      	cmp	r3, #240	; 0xf0
 8002154:	dc0f      	bgt.n	8002176 <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8002156:	8b3b      	ldrh	r3, [r7, #24]
 8002158:	88fa      	ldrh	r2, [r7, #6]
 800215a:	89b9      	ldrh	r1, [r7, #12]
 800215c:	89f8      	ldrh	r0, [r7, #14]
 800215e:	f7ff ff61 	bl	8002024 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	8b3a      	ldrh	r2, [r7, #24]
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	461a      	mov	r2, r3
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	202c      	movs	r0, #44	; 0x2c
 8002172:	f7ff fef9 	bl	8001f68 <ILI9341_SendCommandAndData>
	}
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 800218a:	23f0      	movs	r3, #240	; 0xf0
 800218c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002190:	2100      	movs	r1, #0
 8002192:	2000      	movs	r0, #0
 8002194:	f7ff ff46 	bl	8002024 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8002198:	202c      	movs	r0, #44	; 0x2c
 800219a:	f7ff fec3 	bl	8001f24 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 800219e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80021a2:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 80021a4:	2200      	movs	r2, #0
 80021a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021aa:	4822      	ldr	r0, [pc, #136]	; (8002234 <ILI9341_ClearDisplay+0xb4>)
 80021ac:	f00a f998 	bl	800c4e0 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 80021b0:	2201      	movs	r2, #1
 80021b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021b6:	481f      	ldr	r0, [pc, #124]	; (8002234 <ILI9341_ClearDisplay+0xb4>)
 80021b8:	f00a f992 	bl	800c4e0 <HAL_GPIO_WritePin>

    while (Length > 0U)
 80021bc:	e023      	b.n	8002206 <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <ILI9341_ClearDisplay+0xb8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d11b      	bne.n	8002206 <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <ILI9341_ClearDisplay+0xb8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	330c      	adds	r3, #12
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 80021e0:	bf00      	nop
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <ILI9341_ClearDisplay+0xb8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d1f7      	bne.n	80021e2 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <ILI9341_ClearDisplay+0xb8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	330c      	adds	r3, #12
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3b01      	subs	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1d8      	bne.n	80021be <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 800220c:	bf00      	nop
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <ILI9341_ClearDisplay+0xb8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221a:	2b80      	cmp	r3, #128	; 0x80
 800221c:	d0f7      	beq.n	800220e <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 800221e:	2201      	movs	r2, #1
 8002220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002224:	4803      	ldr	r0, [pc, #12]	; (8002234 <ILI9341_ClearDisplay+0xb4>)
 8002226:	f00a f95b 	bl	800c4e0 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40020400 	.word	0x40020400
 8002238:	2000027c 	.word	0x2000027c

0800223c <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8002244:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <ILI9341_Init+0x9c>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <ILI9341_Init+0xa0>)
 800224c:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800225c:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002264:	481e      	ldr	r0, [pc, #120]	; (80022e0 <ILI9341_Init+0xa4>)
 8002266:	f00a f93b 	bl	800c4e0 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800226a:	200a      	movs	r0, #10
 800226c:	f7ff fe1f 	bl	8001eae <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8002270:	2201      	movs	r2, #1
 8002272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002276:	481a      	ldr	r0, [pc, #104]	; (80022e0 <ILI9341_Init+0xa4>)
 8002278:	f00a f932 	bl	800c4e0 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800227c:	200a      	movs	r0, #10
 800227e:	f7ff fe16 	bl	8001eae <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8002282:	e019      	b.n	80022b8 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	60fa      	str	r2, [r7, #12]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 800228e:	7abb      	ldrb	r3, [r7, #10]
 8002290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002294:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 8002296:	7a7a      	ldrb	r2, [r7, #9]
 8002298:	7afb      	ldrb	r3, [r7, #11]
 800229a:	68f9      	ldr	r1, [r7, #12]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fe63 	bl	8001f68 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 80022a2:	7a7b      	ldrb	r3, [r7, #9]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 80022aa:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da02      	bge.n	80022b8 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 80022b2:	2096      	movs	r0, #150	; 0x96
 80022b4:	f7ff fdfb 	bl	8001eae <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	60fa      	str	r2, [r7, #12]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	72fb      	strb	r3, [r7, #11]
 80022c2:	7afb      	ldrb	r3, [r7, #11]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1dd      	bne.n	8002284 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f7ff fe7d 	bl	8001fc8 <ILI9341_SetRotation>
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000027c 	.word	0x2000027c
 80022dc:	08017a44 	.word	0x08017a44
 80022e0:	40020400 	.word	0x40020400

080022e4 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 80022ea:	2200      	movs	r2, #0
 80022ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f0:	480a      	ldr	r0, [pc, #40]	; (800231c <XPT2046_GetRawData+0x38>)
 80022f2:	f00a f8f5 	bl	800c4e0 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <XPT2046_GetRawData+0x3c>)
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2305      	movs	r3, #5
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <XPT2046_GetRawData+0x40>)
 8002304:	4908      	ldr	r1, [pc, #32]	; (8002328 <XPT2046_GetRawData+0x44>)
 8002306:	f00d ff1c 	bl	8010142 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 800230a:	2201      	movs	r2, #1
 800230c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <XPT2046_GetRawData+0x38>)
 8002312:	f00a f8e5 	bl	800c4e0 <HAL_GPIO_WritePin>
#endif
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40020400 	.word	0x40020400
 8002320:	20000280 	.word	0x20000280
 8002324:	20000290 	.word	0x20000290
 8002328:	20000288 	.word	0x20000288

0800232c <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <XPT2046_ReadRawData+0x48>)
 8002338:	785b      	ldrb	r3, [r3, #1]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b21a      	sxth	r2, r3
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <XPT2046_ReadRawData+0x48>)
 8002340:	789b      	ldrb	r3, [r3, #2]
 8002342:	b21b      	sxth	r3, r3
 8002344:	4313      	orrs	r3, r2
 8002346:	b21b      	sxth	r3, r3
 8002348:	b29a      	uxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <XPT2046_ReadRawData+0x48>)
 8002350:	78db      	ldrb	r3, [r3, #3]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	b21a      	sxth	r2, r3
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <XPT2046_ReadRawData+0x48>)
 8002358:	791b      	ldrb	r3, [r3, #4]
 800235a:	b21b      	sxth	r3, r3
 800235c:	4313      	orrs	r3, r2
 800235e:	b21b      	sxth	r3, r3
 8002360:	b29a      	uxth	r2, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	801a      	strh	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000290 	.word	0x20000290

08002378 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002378:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 8002384:	f107 020c 	add.w	r2, r7, #12
 8002388:	f107 030e 	add.w	r3, r7, #14
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ffcc 	bl	800232c <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 8002394:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <XPT2046_ReadTouchPoint+0x118>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d16e      	bne.n	800247a <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 800239c:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <XPT2046_ReadTouchPoint+0x11c>)
 800239e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80023a2:	89fb      	ldrh	r3, [r7, #14]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8d5 	bl	8000554 <__aeabi_i2d>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4620      	mov	r0, r4
 80023b0:	4629      	mov	r1, r5
 80023b2:	f7fe f939 	bl	8000628 <__aeabi_dmul>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4690      	mov	r8, r2
 80023bc:	4699      	mov	r9, r3
 80023be:	4b35      	ldr	r3, [pc, #212]	; (8002494 <XPT2046_ReadTouchPoint+0x11c>)
 80023c0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80023c4:	89bb      	ldrh	r3, [r7, #12]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f8c4 	bl	8000554 <__aeabi_i2d>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4620      	mov	r0, r4
 80023d2:	4629      	mov	r1, r5
 80023d4:	f7fe f928 	bl	8000628 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4640      	mov	r0, r8
 80023de:	4649      	mov	r1, r9
 80023e0:	f7fd ff6c 	bl	80002bc <__adddf3>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <XPT2046_ReadTouchPoint+0x11c>)
 80023ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023f2:	f7fd ff63 	bl	80002bc <__adddf3>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7fe fbeb 	bl	8000bd8 <__aeabi_d2uiz>
 8002402:	4603      	mov	r3, r0
 8002404:	b29a      	uxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <XPT2046_ReadTouchPoint+0x11c>)
 800240c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002410:	89fb      	ldrh	r3, [r7, #14]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f89e 	bl	8000554 <__aeabi_i2d>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4620      	mov	r0, r4
 800241e:	4629      	mov	r1, r5
 8002420:	f7fe f902 	bl	8000628 <__aeabi_dmul>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4690      	mov	r8, r2
 800242a:	4699      	mov	r9, r3
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <XPT2046_ReadTouchPoint+0x11c>)
 800242e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002432:	89bb      	ldrh	r3, [r7, #12]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f88d 	bl	8000554 <__aeabi_i2d>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4620      	mov	r0, r4
 8002440:	4629      	mov	r1, r5
 8002442:	f7fe f8f1 	bl	8000628 <__aeabi_dmul>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4640      	mov	r0, r8
 800244c:	4649      	mov	r1, r9
 800244e:	f7fd ff35 	bl	80002bc <__adddf3>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <XPT2046_ReadTouchPoint+0x11c>)
 800245c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002460:	f7fd ff2c 	bl	80002bc <__adddf3>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	f7fe fbb4 	bl	8000bd8 <__aeabi_d2uiz>
 8002470:	4603      	mov	r3, r0
 8002472:	b29a      	uxth	r2, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 8002478:	e005      	b.n	8002486 <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 800247a:	89fa      	ldrh	r2, [r7, #14]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 8002480:	89ba      	ldrh	r2, [r7, #12]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	801a      	strh	r2, [r3, #0]
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002490:	200002c9 	.word	0x200002c9
 8002494:	20000000 	.word	0x20000000

08002498 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e013      	b.n	80024d8 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	4a16      	ldr	r2, [pc, #88]	; (800250c <XPT2046_GetTouchPoint+0x74>)
 80024b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024b8:	461a      	mov	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	4413      	add	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <XPT2046_GetTouchPoint+0x74>)
 80024c4:	330a      	adds	r3, #10
 80024c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ca:	461a      	mov	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b09      	cmp	r3, #9
 80024dc:	d9e8      	bls.n	80024b0 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <XPT2046_GetTouchPoint+0x78>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	08db      	lsrs	r3, r3, #3
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <XPT2046_GetTouchPoint+0x78>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	08db      	lsrs	r3, r3, #3
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	801a      	strh	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000298 	.word	0x20000298
 8002510:	cccccccd 	.word	0xcccccccd

08002514 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <XPT2046_IsTouched+0x20>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d101      	bne.n	8002526 <XPT2046_IsTouched+0x12>
		return 1;
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <XPT2046_IsTouched+0x14>

	return 0;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	200002c8 	.word	0x200002c8

08002538 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
	  switch(TouchState)
 800253c:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <XPT2046_Task+0x16c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b03      	cmp	r3, #3
 8002544:	f200 80ab 	bhi.w	800269e <XPT2046_Task+0x166>
 8002548:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <XPT2046_Task+0x18>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	08002695 	.word	0x08002695
 8002554:	08002561 	.word	0x08002561
 8002558:	080025d7 	.word	0x080025d7
 800255c:	08002653 	.word	0x08002653
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8002560:	f009 f842 	bl	800b5e8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <XPT2046_Task+0x170>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b05      	cmp	r3, #5
 800256e:	f240 8093 	bls.w	8002698 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8002572:	f7ff feb7 	bl	80022e4 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <XPT2046_Task+0x174>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4a4c      	ldr	r2, [pc, #304]	; (80026b0 <XPT2046_Task+0x178>)
 800257e:	441a      	add	r2, r3
 8002580:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <XPT2046_Task+0x174>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	330a      	adds	r3, #10
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4949      	ldr	r1, [pc, #292]	; (80026b0 <XPT2046_Task+0x178>)
 800258a:	440b      	add	r3, r1
 800258c:	4619      	mov	r1, r3
 800258e:	4610      	mov	r0, r2
 8002590:	f7ff fef2 	bl	8002378 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002594:	4b45      	ldr	r3, [pc, #276]	; (80026ac <XPT2046_Task+0x174>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b43      	ldr	r3, [pc, #268]	; (80026ac <XPT2046_Task+0x174>)
 800259e:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 80025a0:	4b42      	ldr	r3, [pc, #264]	; (80026ac <XPT2046_Task+0x174>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b0a      	cmp	r3, #10
 80025a6:	d105      	bne.n	80025b4 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 80025a8:	4b40      	ldr	r3, [pc, #256]	; (80026ac <XPT2046_Task+0x174>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 80025ae:	4b3d      	ldr	r3, [pc, #244]	; (80026a4 <XPT2046_Task+0x16c>)
 80025b0:	2202      	movs	r2, #2
 80025b2:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80025b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025b8:	483e      	ldr	r0, [pc, #248]	; (80026b4 <XPT2046_Task+0x17c>)
 80025ba:	f009 ff79 	bl	800c4b0 <HAL_GPIO_ReadPin>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80025c4:	4b37      	ldr	r3, [pc, #220]	; (80026a4 <XPT2046_Task+0x16c>)
 80025c6:	2203      	movs	r2, #3
 80025c8:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80025ca:	f009 f80d 	bl	800b5e8 <HAL_GetTick>
 80025ce:	4603      	mov	r3, r0
 80025d0:	4a35      	ldr	r2, [pc, #212]	; (80026a8 <XPT2046_Task+0x170>)
 80025d2:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80025d4:	e060      	b.n	8002698 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80025d6:	f009 f807 	bl	800b5e8 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <XPT2046_Task+0x170>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d95a      	bls.n	800269c <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80025e6:	f7ff fe7d 	bl	80022e4 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80025ea:	4b30      	ldr	r3, [pc, #192]	; (80026ac <XPT2046_Task+0x174>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4a2f      	ldr	r2, [pc, #188]	; (80026b0 <XPT2046_Task+0x178>)
 80025f2:	441a      	add	r2, r3
 80025f4:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <XPT2046_Task+0x174>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	330a      	adds	r3, #10
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	492c      	ldr	r1, [pc, #176]	; (80026b0 <XPT2046_Task+0x178>)
 80025fe:	440b      	add	r3, r1
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f7ff feb8 	bl	8002378 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <XPT2046_Task+0x174>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b26      	ldr	r3, [pc, #152]	; (80026ac <XPT2046_Task+0x174>)
 8002612:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8002614:	4b25      	ldr	r3, [pc, #148]	; (80026ac <XPT2046_Task+0x174>)
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <XPT2046_Task+0x180>)
 800261a:	fba3 1302 	umull	r1, r3, r3, r2
 800261e:	08d9      	lsrs	r1, r3, #3
 8002620:	460b      	mov	r3, r1
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	b2da      	uxtb	r2, r3
 800262c:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <XPT2046_Task+0x174>)
 800262e:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002634:	481f      	ldr	r0, [pc, #124]	; (80026b4 <XPT2046_Task+0x17c>)
 8002636:	f009 ff3b 	bl	800c4b0 <HAL_GPIO_ReadPin>
 800263a:	4603      	mov	r3, r0
 800263c:	2b01      	cmp	r3, #1
 800263e:	d102      	bne.n	8002646 <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002640:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <XPT2046_Task+0x16c>)
 8002642:	2203      	movs	r2, #3
 8002644:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002646:	f008 ffcf 	bl	800b5e8 <HAL_GetTick>
 800264a:	4603      	mov	r3, r0
 800264c:	4a16      	ldr	r2, [pc, #88]	; (80026a8 <XPT2046_Task+0x170>)
 800264e:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8002650:	e024      	b.n	800269c <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <XPT2046_Task+0x16c>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <XPT2046_Task+0x174>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 800265e:	e009      	b.n	8002674 <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <XPT2046_Task+0x184>)
 8002662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002666:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 8002668:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <XPT2046_Task+0x188>)
 800266a:	f993 3000 	ldrsb.w	r3, [r3]
 800266e:	4618      	mov	r0, r3
 8002670:	f009 f97c 	bl	800b96c <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <XPT2046_Task+0x188>)
 8002676:	f993 3000 	ldrsb.w	r3, [r3]
 800267a:	4618      	mov	r0, r3
 800267c:	f009 f967 	bl	800b94e <HAL_NVIC_GetPendingIRQ>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1ec      	bne.n	8002660 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <XPT2046_Task+0x188>)
 8002688:	f993 3000 	ldrsb.w	r3, [r3]
 800268c:	4618      	mov	r0, r3
 800268e:	f009 f936 	bl	800b8fe <HAL_NVIC_EnableIRQ>
		  break;
 8002692:	e004      	b.n	800269e <XPT2046_Task+0x166>
		  break;
 8002694:	bf00      	nop
 8002696:	e002      	b.n	800269e <XPT2046_Task+0x166>
		  break;
 8002698:	bf00      	nop
 800269a:	e000      	b.n	800269e <XPT2046_Task+0x166>
		  break;
 800269c:	bf00      	nop

	  }
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200002c8 	.word	0x200002c8
 80026a8:	200002c4 	.word	0x200002c4
 80026ac:	200002c0 	.word	0x200002c0
 80026b0:	20000298 	.word	0x20000298
 80026b4:	40020000 	.word	0x40020000
 80026b8:	cccccccd 	.word	0xcccccccd
 80026bc:	40013c00 	.word	0x40013c00
 80026c0:	20000284 	.word	0x20000284

080026c4 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80026c8:	2017      	movs	r0, #23
 80026ca:	f009 f926 	bl	800b91a <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 80026ce:	4b02      	ldr	r3, [pc, #8]	; (80026d8 <XPT2046_IRQ+0x14>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200002c8 	.word	0x200002c8

080026dc <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 80026e8:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <XPT2046_Init+0x84>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 80026ee:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <XPT2046_Init+0x88>)
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <XPT2046_Init+0x8c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80026fa:	2201      	movs	r2, #1
 80026fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002700:	481a      	ldr	r0, [pc, #104]	; (800276c <XPT2046_Init+0x90>)
 8002702:	f009 feed 	bl	800c4e0 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 8002706:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <XPT2046_Init+0x94>)
 8002708:	2290      	movs	r2, #144	; 0x90
 800270a:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <XPT2046_Init+0x98>)
 800270e:	22d0      	movs	r2, #208	; 0xd0
 8002710:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <XPT2046_Init+0x9c>)
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002718:	f7ff fde4 	bl	80022e4 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 800271c:	2001      	movs	r0, #1
 800271e:	f008 ff6f 	bl	800b600 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8002722:	4b13      	ldr	r3, [pc, #76]	; (8002770 <XPT2046_Init+0x94>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	08db      	lsrs	r3, r3, #3
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <XPT2046_Init+0x9c>)
 800272c:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <XPT2046_Init+0x94>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	015b      	lsls	r3, r3, #5
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <XPT2046_Init+0x9c>)
 8002738:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <XPT2046_Init+0x98>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	08db      	lsrs	r3, r3, #3
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <XPT2046_Init+0x9c>)
 8002744:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <XPT2046_Init+0x98>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	015b      	lsls	r3, r3, #5
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <XPT2046_Init+0x9c>)
 8002750:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <XPT2046_Init+0x9c>)
 8002754:	2200      	movs	r2, #0
 8002756:	711a      	strb	r2, [r3, #4]
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000280 	.word	0x20000280
 8002764:	20000284 	.word	0x20000284
 8002768:	200002c8 	.word	0x200002c8
 800276c:	40020400 	.word	0x40020400
 8002770:	20000285 	.word	0x20000285
 8002774:	20000286 	.word	0x20000286
 8002778:	20000288 	.word	0x20000288

0800277c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	4b27      	ldr	r3, [pc, #156]	; (8002824 <MX_DMA_Init+0xa8>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a26      	ldr	r2, [pc, #152]	; (8002824 <MX_DMA_Init+0xa8>)
 800278c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <MX_DMA_Init+0xa8>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <MX_DMA_Init+0xa8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <MX_DMA_Init+0xa8>)
 80027a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <MX_DMA_Init+0xa8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	200b      	movs	r0, #11
 80027c0:	f009 f881 	bl	800b8c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027c4:	200b      	movs	r0, #11
 80027c6:	f009 f89a 	bl	800b8fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2100      	movs	r1, #0
 80027ce:	200c      	movs	r0, #12
 80027d0:	f009 f879 	bl	800b8c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027d4:	200c      	movs	r0, #12
 80027d6:	f009 f892 	bl	800b8fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	2010      	movs	r0, #16
 80027e0:	f009 f871 	bl	800b8c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027e4:	2010      	movs	r0, #16
 80027e6:	f009 f88a 	bl	800b8fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	2011      	movs	r0, #17
 80027f0:	f009 f869 	bl	800b8c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80027f4:	2011      	movs	r0, #17
 80027f6:	f009 f882 	bl	800b8fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	203a      	movs	r0, #58	; 0x3a
 8002800:	f009 f861 	bl	800b8c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002804:	203a      	movs	r0, #58	; 0x3a
 8002806:	f009 f87a 	bl	800b8fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2046      	movs	r0, #70	; 0x46
 8002810:	f009 f859 	bl	800b8c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002814:	2046      	movs	r0, #70	; 0x46
 8002816:	f009 f872 	bl	800b8fe <HAL_NVIC_EnableIRQ>

}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002830:	4a09      	ldr	r2, [pc, #36]	; (8002858 <DS3231_Init+0x30>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002836:	2000      	movs	r0, #0
 8002838:	f000 f8ea 	bl	8002a10 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 800283c:	2000      	movs	r0, #0
 800283e:	f000 f8ae 	bl	800299e <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002842:	f000 f907 	bl	8002a54 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002846:	f000 f8cd 	bl	80029e4 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800284a:	2001      	movs	r0, #1
 800284c:	f000 f846 	bl	80028dc <DS3231_SetInterruptMode>
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	200002cc 	.word	0x200002cc

0800285c <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af02      	add	r7, sp, #8
 8002862:	4603      	mov	r3, r0
 8002864:	460a      	mov	r2, r1
 8002866:	71fb      	strb	r3, [r7, #7]
 8002868:	4613      	mov	r3, r2
 800286a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	733b      	strb	r3, [r7, #12]
 8002870:	79bb      	ldrb	r3, [r7, #6]
 8002872:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <DS3231_SetRegByte+0x38>)
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	f107 020c 	add.w	r2, r7, #12
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2302      	movs	r3, #2
 8002884:	21d0      	movs	r1, #208	; 0xd0
 8002886:	f009 ffbb 	bl	800c800 <HAL_I2C_Master_Transmit>
}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200002cc 	.word	0x200002cc

08002898 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af02      	add	r7, sp, #8
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <DS3231_GetRegByte+0x40>)
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	1dfa      	adds	r2, r7, #7
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2301      	movs	r3, #1
 80028b0:	21d0      	movs	r1, #208	; 0xd0
 80028b2:	f009 ffa5 	bl	800c800 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <DS3231_GetRegByte+0x40>)
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	f107 020f 	add.w	r2, r7, #15
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2301      	movs	r3, #1
 80028c6:	21d0      	movs	r1, #208	; 0xd0
 80028c8:	f00a f898 	bl	800c9fc <HAL_I2C_Master_Receive>
	return val;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200002cc 	.word	0x200002cc

080028dc <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80028e6:	200e      	movs	r0, #14
 80028e8:	f7ff ffd6 	bl	8002898 <DS3231_GetRegByte>
 80028ec:	4603      	mov	r3, r0
 80028ee:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80028f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f4:	f023 0304 	bic.w	r3, r3, #4
 80028f8:	b25a      	sxtb	r2, r3
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	b25b      	sxtb	r3, r3
 8002906:	4313      	orrs	r3, r2
 8002908:	b25b      	sxtb	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4619      	mov	r1, r3
 800290e:	200e      	movs	r0, #14
 8002910:	f7ff ffa4 	bl	800285c <DS3231_SetRegByte>
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <DS3231_SetRateSelect>:

/**
 * @brief Set frequency of the square wave output
 * @param rate Frequency to set, DS3231_1HZ, DS3231_1024HZ, DS3231_4096HZ or DS3231_8192HZ.
 */
void DS3231_SetRateSelect(DS3231_Rate rate){
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002926:	200e      	movs	r0, #14
 8002928:	f7ff ffb6 	bl	8002898 <DS3231_GetRegByte>
 800292c:	4603      	mov	r3, r0
 800292e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xe7) | ((rate & 0x03) << DS3231_RS1));
 8002930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002934:	f023 0318 	bic.w	r3, r3, #24
 8002938:	b25a      	sxtb	r2, r3
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	b25b      	sxtb	r3, r3
 8002940:	f003 0318 	and.w	r3, r3, #24
 8002944:	b25b      	sxtb	r3, r3
 8002946:	4313      	orrs	r3, r2
 8002948:	b25b      	sxtb	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	4619      	mov	r1, r3
 800294e:	200e      	movs	r0, #14
 8002950:	f7ff ff84 	bl	800285c <DS3231_SetRegByte>
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002966:	200e      	movs	r0, #14
 8002968:	f7ff ff96 	bl	8002898 <DS3231_GetRegByte>
 800296c:	4603      	mov	r3, r0
 800296e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8002970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002978:	b25b      	sxtb	r3, r3
 800297a:	79fa      	ldrb	r2, [r7, #7]
 800297c:	2a00      	cmp	r2, #0
 800297e:	d102      	bne.n	8002986 <DS3231_EnableOscillator+0x2a>
 8002980:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002984:	e000      	b.n	8002988 <DS3231_EnableOscillator+0x2c>
 8002986:	2200      	movs	r2, #0
 8002988:	4313      	orrs	r3, r2
 800298a:	b25b      	sxtb	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	4619      	mov	r1, r3
 8002990:	200e      	movs	r0, #14
 8002992:	f7ff ff63 	bl	800285c <DS3231_SetRegByte>
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80029a8:	200e      	movs	r0, #14
 80029aa:	f7ff ff75 	bl	8002898 <DS3231_GetRegByte>
 80029ae:	4603      	mov	r3, r0
 80029b0:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80029b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b6:	f023 0302 	bic.w	r3, r3, #2
 80029ba:	b25a      	sxtb	r2, r3
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	4313      	orrs	r3, r2
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	4619      	mov	r1, r3
 80029d0:	200e      	movs	r0, #14
 80029d2:	f7ff ff43 	bl	800285c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7ff ff80 	bl	80028dc <DS3231_SetInterruptMode>
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80029ea:	200f      	movs	r0, #15
 80029ec:	f7ff ff54 	bl	8002898 <DS3231_GetRegByte>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f023 0302 	bic.w	r3, r3, #2
 80029f6:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	f023 0302 	bic.w	r3, r3, #2
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	4619      	mov	r1, r3
 8002a02:	200f      	movs	r0, #15
 8002a04:	f7ff ff2a 	bl	800285c <DS3231_SetRegByte>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002a1a:	200e      	movs	r0, #14
 8002a1c:	f7ff ff3c 	bl	8002898 <DS3231_GetRegByte>
 8002a20:	4603      	mov	r3, r0
 8002a22:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	b25a      	sxtb	r2, r3
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	b25b      	sxtb	r3, r3
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	b25b      	sxtb	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	200e      	movs	r0, #14
 8002a42:	f7ff ff0b 	bl	800285c <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002a46:	2001      	movs	r0, #1
 8002a48:	f7ff ff48 	bl	80028dc <DS3231_SetInterruptMode>
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002a5a:	200f      	movs	r0, #15
 8002a5c:	f7ff ff1c 	bl	8002898 <DS3231_GetRegByte>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f023 0301 	bic.w	r3, r3, #1
 8002a66:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4619      	mov	r1, r3
 8002a72:	200f      	movs	r0, #15
 8002a74:	f7ff fef2 	bl	800285c <DS3231_SetRegByte>
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002a84:	2003      	movs	r0, #3
 8002a86:	f7ff ff07 	bl	8002898 <DS3231_GetRegByte>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f866 	bl	8002b5e <DS3231_DecodeBCD>
 8002a92:	4603      	mov	r3, r0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f7ff fefb 	bl	8002898 <DS3231_GetRegByte>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 f85a 	bl	8002b5e <DS3231_DecodeBCD>
 8002aaa:	4603      	mov	r3, r0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f7ff feef 	bl	8002898 <DS3231_GetRegByte>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 f84e 	bl	8002b5e <DS3231_DecodeBCD>
 8002ac2:	4603      	mov	r3, r0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f85b 	bl	8002b90 <DS3231_EncodeBCD>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4619      	mov	r1, r3
 8002ade:	2003      	movs	r0, #3
 8002ae0:	f7ff febc 	bl	800285c <DS3231_SetRegByte>
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f846 	bl	8002b90 <DS3231_EncodeBCD>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4619      	mov	r1, r3
 8002b08:	2002      	movs	r0, #2
 8002b0a:	f7ff fea7 	bl	800285c <DS3231_SetRegByte>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f834 	bl	8002b90 <DS3231_EncodeBCD>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f7ff fe95 	bl	800285c <DS3231_SetRegByte>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 f822 	bl	8002b90 <DS3231_EncodeBCD>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4619      	mov	r1, r3
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7ff fe83 	bl	800285c <DS3231_SetRegByte>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	0092      	lsls	r2, r2, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	b2db      	uxtb	r3, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002b9a:	79fa      	ldrb	r2, [r7, #7]
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <DS3231_EncodeBCD+0x40>)
 8002b9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba2:	08d9      	lsrs	r1, r3, #3
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	4907      	ldr	r1, [pc, #28]	; (8002bd0 <DS3231_EncodeBCD+0x40>)
 8002bb4:	fba1 1303 	umull	r1, r3, r1, r3
 8002bb8:	08db      	lsrs	r3, r3, #3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	b2db      	uxtb	r3, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	cccccccd 	.word	0xcccccccd

08002bd4 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 8002bd8:	bf00      	nop
 8002bda:	f008 fd05 	bl	800b5e8 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <eeprom_wait+0x1c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d9f7      	bls.n	8002bda <eeprom_wait+0x6>
    {
    }
}
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200002d0 	.word	0x200002d0

08002bf4 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af04      	add	r7, sp, #16
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8002c00:	f7ff ffe8 	bl	8002bd4 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c10:	9102      	str	r1, [sp, #8]
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2301      	movs	r3, #1
 8002c1a:	21a0      	movs	r1, #160	; 0xa0
 8002c1c:	4803      	ldr	r0, [pc, #12]	; (8002c2c <eeprom_read+0x38>)
 8002c1e:	f00a fa0d 	bl	800d03c <HAL_I2C_Mem_Read>
 8002c22:	4603      	mov	r3, r0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000374 	.word	0x20000374

08002c30 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af04      	add	r7, sp, #16
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002c3c:	f7ff ffca 	bl	8002bd4 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	9102      	str	r1, [sp, #8]
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	2301      	movs	r3, #1
 8002c56:	21a0      	movs	r1, #160	; 0xa0
 8002c58:	4807      	ldr	r0, [pc, #28]	; (8002c78 <eeprom_write+0x48>)
 8002c5a:	f00a f8f5 	bl	800ce48 <HAL_I2C_Mem_Write>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002c62:	f008 fcc1 	bl	800b5e8 <HAL_GetTick>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <eeprom_write+0x4c>)
 8002c6a:	6013      	str	r3, [r2, #0]

    return rc;
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000374 	.word	0x20000374
 8002c7c:	200002d0 	.word	0x200002d0

08002c80 <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	460a      	mov	r2, r1
 8002c8a:	71fb      	strb	r3, [r7, #7]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002c90:	79bb      	ldrb	r3, [r7, #6]
 8002c92:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d107      	bne.n	8002caa <EEPROM_RelayStateUpdate+0x2a>
 8002c9a:	f107 030f 	add.w	r3, r7, #15
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	202e      	movs	r0, #46	; 0x2e
 8002ca4:	f7ff ffc4 	bl	8002c30 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002ca8:	e01f      	b.n	8002cea <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d107      	bne.n	8002cc0 <EEPROM_RelayStateUpdate+0x40>
 8002cb0:	f107 030f 	add.w	r3, r7, #15
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	202f      	movs	r0, #47	; 0x2f
 8002cba:	f7ff ffb9 	bl	8002c30 <eeprom_write>
}
 8002cbe:	e014      	b.n	8002cea <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d107      	bne.n	8002cd6 <EEPROM_RelayStateUpdate+0x56>
 8002cc6:	f107 030f 	add.w	r3, r7, #15
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4619      	mov	r1, r3
 8002cce:	2030      	movs	r0, #48	; 0x30
 8002cd0:	f7ff ffae 	bl	8002c30 <eeprom_write>
}
 8002cd4:	e009      	b.n	8002cea <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d106      	bne.n	8002cea <EEPROM_RelayStateUpdate+0x6a>
 8002cdc:	f107 030f 	add.w	r3, r7, #15
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	2031      	movs	r0, #49	; 0x31
 8002ce6:	f7ff ffa3 	bl	8002c30 <eeprom_write>
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	460a      	mov	r2, r1
 8002cfc:	71fb      	strb	r3, [r7, #7]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002d02:	79bb      	ldrb	r3, [r7, #6]
 8002d04:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d107      	bne.n	8002d1c <EEPROM_LightStateUpdate+0x2a>
 8002d0c:	f107 030f 	add.w	r3, r7, #15
 8002d10:	2201      	movs	r2, #1
 8002d12:	4619      	mov	r1, r3
 8002d14:	2033      	movs	r0, #51	; 0x33
 8002d16:	f7ff ff8b 	bl	8002c30 <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002d1a:	e01f      	b.n	8002d5c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d107      	bne.n	8002d32 <EEPROM_LightStateUpdate+0x40>
 8002d22:	f107 030f 	add.w	r3, r7, #15
 8002d26:	2201      	movs	r2, #1
 8002d28:	4619      	mov	r1, r3
 8002d2a:	2034      	movs	r0, #52	; 0x34
 8002d2c:	f7ff ff80 	bl	8002c30 <eeprom_write>
}
 8002d30:	e014      	b.n	8002d5c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d107      	bne.n	8002d48 <EEPROM_LightStateUpdate+0x56>
 8002d38:	f107 030f 	add.w	r3, r7, #15
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4619      	mov	r1, r3
 8002d40:	2035      	movs	r0, #53	; 0x35
 8002d42:	f7ff ff75 	bl	8002c30 <eeprom_write>
}
 8002d46:	e009      	b.n	8002d5c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d106      	bne.n	8002d5c <EEPROM_LightStateUpdate+0x6a>
 8002d4e:	f107 030f 	add.w	r3, r7, #15
 8002d52:	2201      	movs	r2, #1
 8002d54:	4619      	mov	r1, r3
 8002d56:	2036      	movs	r0, #54	; 0x36
 8002d58:	f7ff ff6a 	bl	8002c30 <eeprom_write>
}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d107      	bne.n	8002d88 <EEPROM_RelayStateRead+0x24>
 8002d78:	f107 030f 	add.w	r3, r7, #15
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4619      	mov	r1, r3
 8002d80:	202e      	movs	r0, #46	; 0x2e
 8002d82:	f7ff ff37 	bl	8002bf4 <eeprom_read>
 8002d86:	e01f      	b.n	8002dc8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d107      	bne.n	8002d9e <EEPROM_RelayStateRead+0x3a>
 8002d8e:	f107 030f 	add.w	r3, r7, #15
 8002d92:	2201      	movs	r2, #1
 8002d94:	4619      	mov	r1, r3
 8002d96:	202f      	movs	r0, #47	; 0x2f
 8002d98:	f7ff ff2c 	bl	8002bf4 <eeprom_read>
 8002d9c:	e014      	b.n	8002dc8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d107      	bne.n	8002db4 <EEPROM_RelayStateRead+0x50>
 8002da4:	f107 030f 	add.w	r3, r7, #15
 8002da8:	2201      	movs	r2, #1
 8002daa:	4619      	mov	r1, r3
 8002dac:	2030      	movs	r0, #48	; 0x30
 8002dae:	f7ff ff21 	bl	8002bf4 <eeprom_read>
 8002db2:	e009      	b.n	8002dc8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d106      	bne.n	8002dc8 <EEPROM_RelayStateRead+0x64>
 8002dba:	f107 030f 	add.w	r3, r7, #15
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	2031      	movs	r0, #49	; 0x31
 8002dc4:	f7ff ff16 	bl	8002bf4 <eeprom_read>

	return RelayStan;
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d107      	bne.n	8002df6 <EEPROM_LightStateRead+0x24>
 8002de6:	f107 030f 	add.w	r3, r7, #15
 8002dea:	2201      	movs	r2, #1
 8002dec:	4619      	mov	r1, r3
 8002dee:	2033      	movs	r0, #51	; 0x33
 8002df0:	f7ff ff00 	bl	8002bf4 <eeprom_read>
 8002df4:	e01f      	b.n	8002e36 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d107      	bne.n	8002e0c <EEPROM_LightStateRead+0x3a>
 8002dfc:	f107 030f 	add.w	r3, r7, #15
 8002e00:	2201      	movs	r2, #1
 8002e02:	4619      	mov	r1, r3
 8002e04:	2034      	movs	r0, #52	; 0x34
 8002e06:	f7ff fef5 	bl	8002bf4 <eeprom_read>
 8002e0a:	e014      	b.n	8002e36 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d107      	bne.n	8002e22 <EEPROM_LightStateRead+0x50>
 8002e12:	f107 030f 	add.w	r3, r7, #15
 8002e16:	2201      	movs	r2, #1
 8002e18:	4619      	mov	r1, r3
 8002e1a:	2035      	movs	r0, #53	; 0x35
 8002e1c:	f7ff feea 	bl	8002bf4 <eeprom_read>
 8002e20:	e009      	b.n	8002e36 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d106      	bne.n	8002e36 <EEPROM_LightStateRead+0x64>
 8002e28:	f107 030f 	add.w	r3, r7, #15
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4619      	mov	r1, r3
 8002e30:	2036      	movs	r0, #54	; 0x36
 8002e32:	f7ff fedf 	bl	8002bf4 <eeprom_read>

	return AktualnyStan;
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002e44:	2001      	movs	r0, #1
 8002e46:	f7ff ff8d 	bl	8002d64 <EEPROM_RelayStateRead>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <EEPROM_RelayStateRestore+0x18>
 8002e50:	2005      	movs	r0, #5
 8002e52:	f007 f989 	bl	800a168 <SendComand>
 8002e56:	e002      	b.n	8002e5e <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002e58:	2006      	movs	r0, #6
 8002e5a:	f007 f985 	bl	800a168 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002e5e:	2002      	movs	r0, #2
 8002e60:	f7ff ff80 	bl	8002d64 <EEPROM_RelayStateRead>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <EEPROM_RelayStateRestore+0x32>
 8002e6a:	2007      	movs	r0, #7
 8002e6c:	f007 f97c 	bl	800a168 <SendComand>
 8002e70:	e002      	b.n	8002e78 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002e72:	2008      	movs	r0, #8
 8002e74:	f007 f978 	bl	800a168 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002e78:	2003      	movs	r0, #3
 8002e7a:	f7ff ff73 	bl	8002d64 <EEPROM_RelayStateRead>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <EEPROM_RelayStateRestore+0x4c>
 8002e84:	2009      	movs	r0, #9
 8002e86:	f007 f96f 	bl	800a168 <SendComand>
 8002e8a:	e002      	b.n	8002e92 <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002e8c:	200a      	movs	r0, #10
 8002e8e:	f007 f96b 	bl	800a168 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002e92:	2004      	movs	r0, #4
 8002e94:	f7ff ff66 	bl	8002d64 <EEPROM_RelayStateRead>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <EEPROM_RelayStateRestore+0x66>
 8002e9e:	200b      	movs	r0, #11
 8002ea0:	f007 f962 	bl	800a168 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002ea4:	e002      	b.n	8002eac <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002ea6:	200c      	movs	r0, #12
 8002ea8:	f007 f95e 	bl	800a168 <SendComand>
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	f7ff ff8c 	bl	8002dd2 <EEPROM_LightStateRead>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <EEPROM_LightStateRestore+0x18>
 8002ec0:	200d      	movs	r0, #13
 8002ec2:	f007 f951 	bl	800a168 <SendComand>
 8002ec6:	e002      	b.n	8002ece <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002ec8:	200e      	movs	r0, #14
 8002eca:	f007 f94d 	bl	800a168 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002ece:	2002      	movs	r0, #2
 8002ed0:	f7ff ff7f 	bl	8002dd2 <EEPROM_LightStateRead>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <EEPROM_LightStateRestore+0x32>
 8002eda:	200f      	movs	r0, #15
 8002edc:	f007 f944 	bl	800a168 <SendComand>
 8002ee0:	e002      	b.n	8002ee8 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002ee2:	2010      	movs	r0, #16
 8002ee4:	f007 f940 	bl	800a168 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002ee8:	2003      	movs	r0, #3
 8002eea:	f7ff ff72 	bl	8002dd2 <EEPROM_LightStateRead>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <EEPROM_LightStateRestore+0x4c>
 8002ef4:	2011      	movs	r0, #17
 8002ef6:	f007 f937 	bl	800a168 <SendComand>
 8002efa:	e002      	b.n	8002f02 <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002efc:	2012      	movs	r0, #18
 8002efe:	f007 f933 	bl	800a168 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002f02:	2004      	movs	r0, #4
 8002f04:	f7ff ff65 	bl	8002dd2 <EEPROM_LightStateRead>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <EEPROM_LightStateRestore+0x66>
 8002f0e:	2013      	movs	r0, #19
 8002f10:	f007 f92a 	bl	800a168 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002f14:	e002      	b.n	8002f1c <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002f16:	2014      	movs	r0, #20
 8002f18:	f007 f926 	bl	800a168 <SendComand>
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f36:	f107 030a 	add.w	r3, r7, #10
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	2005      	movs	r0, #5
 8002f40:	f7ff fe58 	bl	8002bf4 <eeprom_read>
 8002f44:	e009      	b.n	8002f5a <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d106      	bne.n	8002f5a <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002f4c:	f107 030a 	add.w	r3, r7, #10
 8002f50:	2201      	movs	r2, #1
 8002f52:	4619      	mov	r1, r3
 8002f54:	200c      	movs	r0, #12
 8002f56:	f7ff fe4d 	bl	8002bf4 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	72fb      	strb	r3, [r7, #11]
 8002f62:	e016      	b.n	8002f92 <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002f64:	7abb      	ldrb	r3, [r7, #10]
 8002f66:	461a      	mov	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002f70:	7afb      	ldrb	r3, [r7, #11]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e004      	b.n	8002f86 <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	4413      	add	r3, r2
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002f8c:	7afb      	ldrb	r3, [r7, #11]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	72fb      	strb	r3, [r7, #11]
 8002f92:	7afb      	ldrb	r3, [r7, #11]
 8002f94:	2b06      	cmp	r3, #6
 8002f96:	d9e5      	bls.n	8002f64 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	6039      	str	r1, [r7, #0]
 8002fac:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	72fb      	strb	r3, [r7, #11]
 8002fba:	e011      	b.n	8002fe0 <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002fbc:	7afb      	ldrb	r3, [r7, #11]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	7abb      	ldrb	r3, [r7, #10]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002fda:	7afb      	ldrb	r3, [r7, #11]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	72fb      	strb	r3, [r7, #11]
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d9ea      	bls.n	8002fbc <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d107      	bne.n	8002ffc <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002fec:	f107 030a 	add.w	r3, r7, #10
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	2005      	movs	r0, #5
 8002ff6:	f7ff fe1b 	bl	8002c30 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002ffa:	e009      	b.n	8003010 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d106      	bne.n	8003010 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8003002:	f107 030a 	add.w	r3, r7, #10
 8003006:	2201      	movs	r2, #1
 8003008:	4619      	mov	r1, r3
 800300a:	200c      	movs	r0, #12
 800300c:	f7ff fe10 	bl	8002c30 <eeprom_write>
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d10e      	bne.n	8003050 <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8003032:	f107 0309 	add.w	r3, r7, #9
 8003036:	2201      	movs	r2, #1
 8003038:	4619      	mov	r1, r3
 800303a:	2006      	movs	r0, #6
 800303c:	f7ff fdda 	bl	8002bf4 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8003040:	f107 0308 	add.w	r3, r7, #8
 8003044:	2201      	movs	r2, #1
 8003046:	4619      	mov	r1, r3
 8003048:	2007      	movs	r0, #7
 800304a:	f7ff fdd3 	bl	8002bf4 <eeprom_read>
 800304e:	e010      	b.n	8003072 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d10d      	bne.n	8003072 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 8003056:	f107 0309 	add.w	r3, r7, #9
 800305a:	2201      	movs	r2, #1
 800305c:	4619      	mov	r1, r3
 800305e:	200d      	movs	r0, #13
 8003060:	f7ff fdc8 	bl	8002bf4 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	2201      	movs	r2, #1
 800306a:	4619      	mov	r1, r3
 800306c:	200e      	movs	r0, #14
 800306e:	f7ff fdc1 	bl	8002bf4 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8003072:	2301      	movs	r3, #1
 8003074:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8003076:	2300      	movs	r3, #0
 8003078:	72fb      	strb	r3, [r7, #11]
 800307a:	e016      	b.n	80030aa <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 800307c:	7a7b      	ldrb	r3, [r7, #9]
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 8003088:	7afb      	ldrb	r3, [r7, #11]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4413      	add	r3, r2
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e004      	b.n	800309e <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	4413      	add	r3, r2
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 80030a4:	7afb      	ldrb	r3, [r7, #11]
 80030a6:	3301      	adds	r3, #1
 80030a8:	72fb      	strb	r3, [r7, #11]
 80030aa:	7afb      	ldrb	r3, [r7, #11]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d9e5      	bls.n	800307c <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 80030b0:	2301      	movs	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 80030b4:	2304      	movs	r3, #4
 80030b6:	72bb      	strb	r3, [r7, #10]
 80030b8:	e016      	b.n	80030e8 <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 80030ba:	7a3b      	ldrb	r3, [r7, #8]
 80030bc:	461a      	mov	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 80030c6:	7abb      	ldrb	r3, [r7, #10]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e004      	b.n	80030dc <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 80030d2:	7abb      	ldrb	r3, [r7, #10]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	4413      	add	r3, r2
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 80030e2:	7abb      	ldrb	r3, [r7, #10]
 80030e4:	3301      	adds	r3, #1
 80030e6:	72bb      	strb	r3, [r7, #10]
 80030e8:	7abb      	ldrb	r3, [r7, #10]
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d9e5      	bls.n	80030ba <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 800310c:	2301      	movs	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8003110:	2300      	movs	r3, #0
 8003112:	72fb      	strb	r3, [r7, #11]
 8003114:	e011      	b.n	800313a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 8003116:	7afb      	ldrb	r3, [r7, #11]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	7a7b      	ldrb	r3, [r7, #9]
 8003128:	4313      	orrs	r3, r2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8003134:	7afb      	ldrb	r3, [r7, #11]
 8003136:	3301      	adds	r3, #1
 8003138:	72fb      	strb	r3, [r7, #11]
 800313a:	7afb      	ldrb	r3, [r7, #11]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d9ea      	bls.n	8003116 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8003140:	2301      	movs	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8003144:	2304      	movs	r3, #4
 8003146:	72bb      	strb	r3, [r7, #10]
 8003148:	e011      	b.n	800316e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 800314a:	7abb      	ldrb	r3, [r7, #10]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	4413      	add	r3, r2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	7a3b      	ldrb	r3, [r7, #8]
 800315c:	4313      	orrs	r3, r2
 800315e:	b2db      	uxtb	r3, r3
 8003160:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8003168:	7abb      	ldrb	r3, [r7, #10]
 800316a:	3301      	adds	r3, #1
 800316c:	72bb      	strb	r3, [r7, #10]
 800316e:	7abb      	ldrb	r3, [r7, #10]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d9ea      	bls.n	800314a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10e      	bne.n	8003198 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 800317a:	f107 0309 	add.w	r3, r7, #9
 800317e:	2201      	movs	r2, #1
 8003180:	4619      	mov	r1, r3
 8003182:	2006      	movs	r0, #6
 8003184:	f7ff fd54 	bl	8002c30 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 8003188:	f107 0308 	add.w	r3, r7, #8
 800318c:	2201      	movs	r2, #1
 800318e:	4619      	mov	r1, r3
 8003190:	2007      	movs	r0, #7
 8003192:	f7ff fd4d 	bl	8002c30 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 8003196:	e010      	b.n	80031ba <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d10d      	bne.n	80031ba <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 800319e:	f107 0309 	add.w	r3, r7, #9
 80031a2:	2201      	movs	r2, #1
 80031a4:	4619      	mov	r1, r3
 80031a6:	200d      	movs	r0, #13
 80031a8:	f7ff fd42 	bl	8002c30 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 80031ac:	f107 0308 	add.w	r3, r7, #8
 80031b0:	2201      	movs	r2, #1
 80031b2:	4619      	mov	r1, r3
 80031b4:	200e      	movs	r0, #14
 80031b6:	f7ff fd3b 	bl	8002c30 <eeprom_write>
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	6039      	str	r1, [r7, #0]
 80031cc:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d107      	bne.n	80031e8 <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 80031d8:	f107 030f 	add.w	r3, r7, #15
 80031dc:	2201      	movs	r2, #1
 80031de:	4619      	mov	r1, r3
 80031e0:	2008      	movs	r0, #8
 80031e2:	f7ff fd07 	bl	8002bf4 <eeprom_read>
 80031e6:	e009      	b.n	80031fc <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d106      	bne.n	80031fc <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 80031ee:	f107 030f 	add.w	r3, r7, #15
 80031f2:	2201      	movs	r2, #1
 80031f4:	4619      	mov	r1, r3
 80031f6:	200f      	movs	r0, #15
 80031f8:	f7ff fcfc 	bl	8002bf4 <eeprom_read>
	}

	*hourOn = TempHour;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	701a      	strb	r2, [r3, #0]
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	6039      	str	r1, [r7, #0]
 8003214:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d107      	bne.n	8003230 <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003220:	f107 030f 	add.w	r3, r7, #15
 8003224:	2201      	movs	r2, #1
 8003226:	4619      	mov	r1, r3
 8003228:	2009      	movs	r0, #9
 800322a:	f7ff fce3 	bl	8002bf4 <eeprom_read>
 800322e:	e009      	b.n	8003244 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d106      	bne.n	8003244 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003236:	f107 030f 	add.w	r3, r7, #15
 800323a:	2201      	movs	r2, #1
 800323c:	4619      	mov	r1, r3
 800323e:	2010      	movs	r0, #16
 8003240:	f7ff fcd8 	bl	8002bf4 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	701a      	strb	r2, [r3, #0]
}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	4603      	mov	r3, r0
 800325a:	6039      	str	r1, [r7, #0]
 800325c:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d107      	bne.n	8003278 <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 8003268:	f107 030f 	add.w	r3, r7, #15
 800326c:	2201      	movs	r2, #1
 800326e:	4619      	mov	r1, r3
 8003270:	200a      	movs	r0, #10
 8003272:	f7ff fcbf 	bl	8002bf4 <eeprom_read>
 8003276:	e009      	b.n	800328c <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d106      	bne.n	800328c <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 800327e:	f107 030f 	add.w	r3, r7, #15
 8003282:	2201      	movs	r2, #1
 8003284:	4619      	mov	r1, r3
 8003286:	2011      	movs	r0, #17
 8003288:	f7ff fcb4 	bl	8002bf4 <eeprom_read>
	}

	*hourOff = TempHour;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	701a      	strb	r2, [r3, #0]

}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	4603      	mov	r3, r0
 80032a2:	6039      	str	r1, [r7, #0]
 80032a4:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d107      	bne.n	80032c0 <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80032b0:	f107 030f 	add.w	r3, r7, #15
 80032b4:	2201      	movs	r2, #1
 80032b6:	4619      	mov	r1, r3
 80032b8:	200b      	movs	r0, #11
 80032ba:	f7ff fc9b 	bl	8002bf4 <eeprom_read>
 80032be:	e009      	b.n	80032d4 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d106      	bne.n	80032d4 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80032c6:	f107 030f 	add.w	r3, r7, #15
 80032ca:	2201      	movs	r2, #1
 80032cc:	4619      	mov	r1, r3
 80032ce:	2012      	movs	r0, #18
 80032d0:	f7ff fc90 	bl	8002bf4 <eeprom_read>
	}
	*minuteOff = TempMinute;
 80032d4:	7bfa      	ldrb	r2, [r7, #15]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	701a      	strb	r2, [r3, #0]
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	460a      	mov	r2, r1
 80032ec:	71fb      	strb	r3, [r7, #7]
 80032ee:	4613      	mov	r3, r2
 80032f0:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 80032f2:	79bb      	ldrb	r3, [r7, #6]
 80032f4:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d107      	bne.n	800330c <EEPROM_ScheduleHourOnUpdate+0x2a>
 80032fc:	f107 030f 	add.w	r3, r7, #15
 8003300:	2201      	movs	r2, #1
 8003302:	4619      	mov	r1, r3
 8003304:	2008      	movs	r0, #8
 8003306:	f7ff fc93 	bl	8002c30 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 800330a:	e009      	b.n	8003320 <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d106      	bne.n	8003320 <EEPROM_ScheduleHourOnUpdate+0x3e>
 8003312:	f107 030f 	add.w	r3, r7, #15
 8003316:	2201      	movs	r2, #1
 8003318:	4619      	mov	r1, r3
 800331a:	200f      	movs	r0, #15
 800331c:	f7ff fc88 	bl	8002c30 <eeprom_write>
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	460a      	mov	r2, r1
 8003332:	71fb      	strb	r3, [r7, #7]
 8003334:	4613      	mov	r3, r2
 8003336:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 8003338:	79bb      	ldrb	r3, [r7, #6]
 800333a:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d107      	bne.n	8003352 <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 8003342:	f107 030f 	add.w	r3, r7, #15
 8003346:	2201      	movs	r2, #1
 8003348:	4619      	mov	r1, r3
 800334a:	2009      	movs	r0, #9
 800334c:	f7ff fc70 	bl	8002c30 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 8003350:	e009      	b.n	8003366 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d106      	bne.n	8003366 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 8003358:	f107 030f 	add.w	r3, r7, #15
 800335c:	2201      	movs	r2, #1
 800335e:	4619      	mov	r1, r3
 8003360:	2010      	movs	r0, #16
 8003362:	f7ff fc65 	bl	8002c30 <eeprom_write>
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	4603      	mov	r3, r0
 8003376:	460a      	mov	r2, r1
 8003378:	71fb      	strb	r3, [r7, #7]
 800337a:	4613      	mov	r3, r2
 800337c:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 800337e:	79bb      	ldrb	r3, [r7, #6]
 8003380:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d107      	bne.n	8003398 <EEPROM_ScheduleHourOffUpdate+0x2a>
 8003388:	f107 030f 	add.w	r3, r7, #15
 800338c:	2201      	movs	r2, #1
 800338e:	4619      	mov	r1, r3
 8003390:	200a      	movs	r0, #10
 8003392:	f7ff fc4d 	bl	8002c30 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 8003396:	e009      	b.n	80033ac <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d106      	bne.n	80033ac <EEPROM_ScheduleHourOffUpdate+0x3e>
 800339e:	f107 030f 	add.w	r3, r7, #15
 80033a2:	2201      	movs	r2, #1
 80033a4:	4619      	mov	r1, r3
 80033a6:	2011      	movs	r0, #17
 80033a8:	f7ff fc42 	bl	8002c30 <eeprom_write>
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	460a      	mov	r2, r1
 80033be:	71fb      	strb	r3, [r7, #7]
 80033c0:	4613      	mov	r3, r2
 80033c2:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80033c4:	79bb      	ldrb	r3, [r7, #6]
 80033c6:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d107      	bne.n	80033de <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80033ce:	f107 030f 	add.w	r3, r7, #15
 80033d2:	2201      	movs	r2, #1
 80033d4:	4619      	mov	r1, r3
 80033d6:	200b      	movs	r0, #11
 80033d8:	f7ff fc2a 	bl	8002c30 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 80033dc:	e009      	b.n	80033f2 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d106      	bne.n	80033f2 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 80033e4:	f107 030f 	add.w	r3, r7, #15
 80033e8:	2201      	movs	r2, #1
 80033ea:	4619      	mov	r1, r3
 80033ec:	2012      	movs	r0, #18
 80033ee:	f7ff fc1f 	bl	8002c30 <eeprom_write>
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <EEPROM_ActivitiesTimeRead>:

//
// ACTIVITIES DURATION TIME READ
uint32_t EEPROM_ActivitiesTimeRead(uint8_t NrOfActivities)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
	uint8_t ActivitiesNumber = NrOfActivities;
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	73fb      	strb	r3, [r7, #15]
	uint32_t ActivitiesDurationX10Seconds = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
	if(1 == ActivitiesNumber) // if feeding
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d106      	bne.n	8003420 <EEPROM_ActivitiesTimeRead+0x26>
	{
		eeprom_read(EEPROM_ADR_ACTIVITIES_IN_10S, &ActivitiesDurationX10Seconds, sizeof(ActivitiesDurationX10Seconds));
 8003412:	f107 0308 	add.w	r3, r7, #8
 8003416:	2204      	movs	r2, #4
 8003418:	4619      	mov	r1, r3
 800341a:	2038      	movs	r0, #56	; 0x38
 800341c:	f7ff fbea 	bl	8002bf4 <eeprom_read>
	}
	return ActivitiesDurationX10Seconds * 10;
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <EEPROM_ActivitiesTimeUpdate>:


//
// ACTIVITIES DURATION TIME UPDATE
void EEPROM_ActivitiesTimeUpdate(uint8_t NrOfActivities, uint32_t TimeInSeconds)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
	uint8_t ActivitiesNumber = NrOfActivities;
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	73fb      	strb	r3, [r7, #15]
	uint32_t Time = (TimeInSeconds/10);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4a09      	ldr	r2, [pc, #36]	; (800346c <EEPROM_ActivitiesTimeUpdate+0x38>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	08db      	lsrs	r3, r3, #3
 800344e:	60bb      	str	r3, [r7, #8]

	if( 1 == ActivitiesNumber) // if feeding
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d106      	bne.n	8003464 <EEPROM_ActivitiesTimeUpdate+0x30>
	{
		eeprom_write(EEPROM_ADR_ACTIVITIES_IN_10S, &Time, sizeof(Time));
 8003456:	f107 0308 	add.w	r3, r7, #8
 800345a:	2204      	movs	r2, #4
 800345c:	4619      	mov	r1, r3
 800345e:	2038      	movs	r0, #56	; 0x38
 8003460:	f7ff fbe6 	bl	8002c30 <eeprom_write>
	}

}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	cccccccd 	.word	0xcccccccd

08003470 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003476:	f24c 6018 	movw	r0, #50712	; 0xc618
 800347a:	f7fe fe81 	bl	8002180 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 800347e:	238c      	movs	r3, #140	; 0x8c
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	23f0      	movs	r3, #240	; 0xf0
 8003484:	4aae      	ldr	r2, [pc, #696]	; (8003740 <system_init+0x2d0>)
 8003486:	2132      	movs	r1, #50	; 0x32
 8003488:	201e      	movs	r0, #30
 800348a:	f7fe fe4e 	bl	800212a <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 800348e:	48ad      	ldr	r0, [pc, #692]	; (8003744 <system_init+0x2d4>)
 8003490:	f7fe fa72 	bl	8001978 <EF_SetFont>
	  sprintf((char*)MsgFunctions, "Inicjalizacja...");
 8003494:	49ac      	ldr	r1, [pc, #688]	; (8003748 <system_init+0x2d8>)
 8003496:	48ad      	ldr	r0, [pc, #692]	; (800374c <system_init+0x2dc>)
 8003498:	f00f fef2 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800349c:	f24c 6318 	movw	r3, #50712	; 0xc618
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	2300      	movs	r3, #0
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2300      	movs	r3, #0
 80034a8:	220a      	movs	r2, #10
 80034aa:	213c      	movs	r1, #60	; 0x3c
 80034ac:	48a7      	ldr	r0, [pc, #668]	; (800374c <system_init+0x2dc>)
 80034ae:	f7fe fc7d 	bl	8001dac <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 80034b2:	f008 f899 	bl	800b5e8 <HAL_GetTick>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4aa5      	ldr	r2, [pc, #660]	; (8003750 <system_init+0x2e0>)
 80034ba:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 80034bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	2305      	movs	r3, #5
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	2314      	movs	r3, #20
 80034c8:	2214      	movs	r2, #20
 80034ca:	21be      	movs	r1, #190	; 0xbe
 80034cc:	203c      	movs	r0, #60	; 0x3c
 80034ce:	f7fe f985 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 80034d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	2305      	movs	r3, #5
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2314      	movs	r3, #20
 80034de:	2214      	movs	r2, #20
 80034e0:	21be      	movs	r1, #190	; 0xbe
 80034e2:	205a      	movs	r0, #90	; 0x5a
 80034e4:	f7fe f97a 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 80034e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	2305      	movs	r3, #5
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2314      	movs	r3, #20
 80034f4:	2214      	movs	r2, #20
 80034f6:	21be      	movs	r1, #190	; 0xbe
 80034f8:	2078      	movs	r0, #120	; 0x78
 80034fa:	f7fe f96f 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 80034fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	2305      	movs	r3, #5
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2314      	movs	r3, #20
 800350a:	2214      	movs	r2, #20
 800350c:	21be      	movs	r1, #190	; 0xbe
 800350e:	2096      	movs	r0, #150	; 0x96
 8003510:	f7fe f964 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 8003514:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	2305      	movs	r3, #5
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2314      	movs	r3, #20
 8003520:	2214      	movs	r2, #20
 8003522:	21be      	movs	r1, #190	; 0xbe
 8003524:	20b4      	movs	r0, #180	; 0xb4
 8003526:	f7fe f959 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 800352a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	2305      	movs	r3, #5
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2314      	movs	r3, #20
 8003536:	2214      	movs	r2, #20
 8003538:	21be      	movs	r1, #190	; 0xbe
 800353a:	20d2      	movs	r0, #210	; 0xd2
 800353c:	f7fe f94e 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 8003540:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	2305      	movs	r3, #5
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2314      	movs	r3, #20
 800354c:	2214      	movs	r2, #20
 800354e:	21be      	movs	r1, #190	; 0xbe
 8003550:	20f0      	movs	r0, #240	; 0xf0
 8003552:	f7fe f943 	bl	80017dc <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 8003556:	f008 f847 	bl	800b5e8 <HAL_GetTick>
 800355a:	4603      	mov	r3, r0
 800355c:	4a7c      	ldr	r2, [pc, #496]	; (8003750 <system_init+0x2e0>)
 800355e:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 8003560:	487c      	ldr	r0, [pc, #496]	; (8003754 <system_init+0x2e4>)
 8003562:	f7fe fa09 	bl	8001978 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003566:	20c8      	movs	r0, #200	; 0xc8
 8003568:	f002 fadc 	bl	8005b24 <initWait>
	  	  LastTime = HAL_GetTick();
 800356c:	f008 f83c 	bl	800b5e8 <HAL_GetTick>
 8003570:	4603      	mov	r3, r0
 8003572:	4a77      	ldr	r2, [pc, #476]	; (8003750 <system_init+0x2e0>)
 8003574:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 8003576:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	2305      	movs	r3, #5
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2314      	movs	r3, #20
 8003582:	2214      	movs	r2, #20
 8003584:	21be      	movs	r1, #190	; 0xbe
 8003586:	203c      	movs	r0, #60	; 0x3c
 8003588:	f7fe f9a5 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 800358c:	2201      	movs	r2, #1
 800358e:	4972      	ldr	r1, [pc, #456]	; (8003758 <system_init+0x2e8>)
 8003590:	2001      	movs	r0, #1
 8003592:	f7ff fb2f 	bl	8002bf4 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 8003596:	2025      	movs	r0, #37	; 0x25
 8003598:	f006 fde6 	bl	800a168 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800359c:	486f      	ldr	r0, [pc, #444]	; (800375c <system_init+0x2ec>)
 800359e:	f007 fd43 	bl	800b028 <UARTDMA_TransmitEvent>

		  sprintf((char*)MsgFunctions, "Akt. inf. o ledach...    ");
 80035a2:	496f      	ldr	r1, [pc, #444]	; (8003760 <system_init+0x2f0>)
 80035a4:	4869      	ldr	r0, [pc, #420]	; (800374c <system_init+0x2dc>)
 80035a6:	f00f fe6b 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035aa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	2301      	movs	r3, #1
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2300      	movs	r3, #0
 80035b6:	22dc      	movs	r2, #220	; 0xdc
 80035b8:	2114      	movs	r1, #20
 80035ba:	4864      	ldr	r0, [pc, #400]	; (800374c <system_init+0x2dc>)
 80035bc:	f7fe fbf6 	bl	8001dac <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80035c0:	20c8      	movs	r0, #200	; 0xc8
 80035c2:	f002 faaf 	bl	8005b24 <initWait>
	  	  	  LastTime = HAL_GetTick();
 80035c6:	f008 f80f 	bl	800b5e8 <HAL_GetTick>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4a60      	ldr	r2, [pc, #384]	; (8003750 <system_init+0x2e0>)
 80035ce:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 80035d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	2305      	movs	r3, #5
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	2314      	movs	r3, #20
 80035dc:	2214      	movs	r2, #20
 80035de:	21be      	movs	r1, #190	; 0xbe
 80035e0:	205a      	movs	r0, #90	; 0x5a
 80035e2:	f7fe f978 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 80035e6:	201b      	movs	r0, #27
 80035e8:	f006 fdbe 	bl	800a168 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 80035ec:	f7ff fc28 	bl	8002e40 <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80035f0:	485a      	ldr	r0, [pc, #360]	; (800375c <system_init+0x2ec>)
 80035f2:	f007 fd19 	bl	800b028 <UARTDMA_TransmitEvent>

		  sprintf((char*)MsgFunctions, "Akt. inf. o przekaźnikach...  ");
 80035f6:	495b      	ldr	r1, [pc, #364]	; (8003764 <system_init+0x2f4>)
 80035f8:	4854      	ldr	r0, [pc, #336]	; (800374c <system_init+0x2dc>)
 80035fa:	f00f fe41 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035fe:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	2301      	movs	r3, #1
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2300      	movs	r3, #0
 800360a:	22dc      	movs	r2, #220	; 0xdc
 800360c:	2114      	movs	r1, #20
 800360e:	484f      	ldr	r0, [pc, #316]	; (800374c <system_init+0x2dc>)
 8003610:	f7fe fbcc 	bl	8001dac <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003614:	20c8      	movs	r0, #200	; 0xc8
 8003616:	f002 fa85 	bl	8005b24 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 800361a:	f007 ffe5 	bl	800b5e8 <HAL_GetTick>
 800361e:	4603      	mov	r3, r0
 8003620:	4a4b      	ldr	r2, [pc, #300]	; (8003750 <system_init+0x2e0>)
 8003622:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 8003624:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	2305      	movs	r3, #5
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2314      	movs	r3, #20
 8003630:	2214      	movs	r2, #20
 8003632:	21be      	movs	r1, #190	; 0xbe
 8003634:	2078      	movs	r0, #120	; 0x78
 8003636:	f7fe f94e 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 800363a:	2004      	movs	r0, #4
 800363c:	f006 fd94 	bl	800a168 <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 8003640:	2001      	movs	r0, #1
 8003642:	f004 ff8b 	bl	800855c <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003646:	20c8      	movs	r0, #200	; 0xc8
 8003648:	f002 fa6c 	bl	8005b24 <initWait>
			  LastTime = HAL_GetTick();
 800364c:	f007 ffcc 	bl	800b5e8 <HAL_GetTick>
 8003650:	4603      	mov	r3, r0
 8003652:	4a3f      	ldr	r2, [pc, #252]	; (8003750 <system_init+0x2e0>)
 8003654:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 8003656:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	2305      	movs	r3, #5
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2314      	movs	r3, #20
 8003662:	2214      	movs	r2, #20
 8003664:	21be      	movs	r1, #190	; 0xbe
 8003666:	2096      	movs	r0, #150	; 0x96
 8003668:	f7fe f935 	bl	80018d6 <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 800366c:	f7ff fc20 	bl	8002eb0 <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003670:	483a      	ldr	r0, [pc, #232]	; (800375c <system_init+0x2ec>)
 8003672:	f007 fcd9 	bl	800b028 <UARTDMA_TransmitEvent>

		  sprintf((char*)MsgFunctions, "Akt. inf. o światlach...    ");
 8003676:	493c      	ldr	r1, [pc, #240]	; (8003768 <system_init+0x2f8>)
 8003678:	4834      	ldr	r0, [pc, #208]	; (800374c <system_init+0x2dc>)
 800367a:	f00f fe01 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800367e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	2301      	movs	r3, #1
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2300      	movs	r3, #0
 800368a:	22dc      	movs	r2, #220	; 0xdc
 800368c:	2114      	movs	r1, #20
 800368e:	482f      	ldr	r0, [pc, #188]	; (800374c <system_init+0x2dc>)
 8003690:	f7fe fb8c 	bl	8001dac <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003694:	20c8      	movs	r0, #200	; 0xc8
 8003696:	f002 fa45 	bl	8005b24 <initWait>
			  LastTime = HAL_GetTick();
 800369a:	f007 ffa5 	bl	800b5e8 <HAL_GetTick>
 800369e:	4603      	mov	r3, r0
 80036a0:	4a2b      	ldr	r2, [pc, #172]	; (8003750 <system_init+0x2e0>)
 80036a2:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 80036a4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	2305      	movs	r3, #5
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	2314      	movs	r3, #20
 80036b0:	2214      	movs	r2, #20
 80036b2:	21be      	movs	r1, #190	; 0xbe
 80036b4:	20b4      	movs	r0, #180	; 0xb4
 80036b6:	f7fe f90e 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 80036ba:	2003      	movs	r0, #3
 80036bc:	f006 fd54 	bl	800a168 <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 80036c0:	2002      	movs	r0, #2
 80036c2:	f004 ff4b 	bl	800855c <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80036c6:	20c8      	movs	r0, #200	; 0xc8
 80036c8:	f002 fa2c 	bl	8005b24 <initWait>
			  LastTime = HAL_GetTick();
 80036cc:	f007 ff8c 	bl	800b5e8 <HAL_GetTick>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <system_init+0x2e0>)
 80036d4:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 80036d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	2305      	movs	r3, #5
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2314      	movs	r3, #20
 80036e2:	2214      	movs	r2, #20
 80036e4:	21be      	movs	r1, #190	; 0xbe
 80036e6:	20d2      	movs	r0, #210	; 0xd2
 80036e8:	f7fe f8f5 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80036ec:	2015      	movs	r0, #21
 80036ee:	f006 fd3b 	bl	800a168 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80036f2:	20c8      	movs	r0, #200	; 0xc8
 80036f4:	f002 fa16 	bl	8005b24 <initWait>
			  LastTime = HAL_GetTick();
 80036f8:	f007 ff76 	bl	800b5e8 <HAL_GetTick>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4a14      	ldr	r2, [pc, #80]	; (8003750 <system_init+0x2e0>)
 8003700:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 8003702:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	2305      	movs	r3, #5
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	2314      	movs	r3, #20
 800370e:	2214      	movs	r2, #20
 8003710:	21be      	movs	r1, #190	; 0xbe
 8003712:	20f0      	movs	r0, #240	; 0xf0
 8003714:	f7fe f8df 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003718:	2016      	movs	r0, #22
 800371a:	f006 fd25 	bl	800a168 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800371e:	480f      	ldr	r0, [pc, #60]	; (800375c <system_init+0x2ec>)
 8003720:	f007 fc82 	bl	800b028 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 8003724:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003728:	f002 f9fc 	bl	8005b24 <initWait>
			  LastTime = HAL_GetTick();
 800372c:	f007 ff5c 	bl	800b5e8 <HAL_GetTick>
 8003730:	4603      	mov	r3, r0
 8003732:	4a07      	ldr	r2, [pc, #28]	; (8003750 <system_init+0x2e0>)
 8003734:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8003736:	2301      	movs	r3, #1
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	08017ab4 	.word	0x08017ab4
 8003744:	0802ab7c 	.word	0x0802ab7c
 8003748:	08016fa0 	.word	0x08016fa0
 800374c:	200002d8 	.word	0x200002d8
 8003750:	2000031c 	.word	0x2000031c
 8003754:	08028c04 	.word	0x08028c04
 8003758:	20000034 	.word	0x20000034
 800375c:	20000488 	.word	0x20000488
 8003760:	08016fb4 	.word	0x08016fb4
 8003764:	08016fd0 	.word	0x08016fd0
 8003768:	08016ff0 	.word	0x08016ff0

0800376c <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08a      	sub	sp, #40	; 0x28
 8003770:	af02      	add	r7, sp, #8
 8003772:	ed87 0a05 	vstr	s0, [r7, #20]
 8003776:	edc7 0a04 	vstr	s1, [r7, #16]
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	460b      	mov	r3, r1
 800377e:	ed87 1a01 	vstr	s2, [r7, #4]
 8003782:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003784:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003788:	f7fe fcfa 	bl	8002180 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 800378c:	2003      	movs	r0, #3
 800378e:	f006 fceb 	bl	800a168 <SendComand>
	  SendComand(UCMD_PRES_1);
 8003792:	2004      	movs	r0, #4
 8003794:	f006 fce8 	bl	800a168 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8003798:	201b      	movs	r0, #27
 800379a:	f006 fce5 	bl	800a168 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 800379e:	f7ff f97b 	bl	8002a98 <DS3231_GetHour>
 80037a2:	4603      	mov	r3, r0
 80037a4:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 80037a6:	f7ff f983 	bl	8002ab0 <DS3231_GetMinute>
 80037aa:	4603      	mov	r3, r0
 80037ac:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 80037ae:	4881      	ldr	r0, [pc, #516]	; (80039b4 <showCurrentParameters+0x248>)
 80037b0:	f7fe f8e2 	bl	8001978 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)MsgFunctions, "-=PARAMETRY=-");
 80037b4:	4980      	ldr	r1, [pc, #512]	; (80039b8 <showCurrentParameters+0x24c>)
 80037b6:	4881      	ldr	r0, [pc, #516]	; (80039bc <showCurrentParameters+0x250>)
 80037b8:	f00f fd62 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037bc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	2300      	movs	r3, #0
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80037ca:	220a      	movs	r2, #10
 80037cc:	212f      	movs	r1, #47	; 0x2f
 80037ce:	487b      	ldr	r0, [pc, #492]	; (80039bc <showCurrentParameters+0x250>)
 80037d0:	f7fe faec 	bl	8001dac <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80037d4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2329      	movs	r3, #41	; 0x29
 80037dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037e0:	2129      	movs	r1, #41	; 0x29
 80037e2:	2000      	movs	r0, #0
 80037e4:	f7fd fe18 	bl	8001418 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80037e8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	232b      	movs	r3, #43	; 0x2b
 80037f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037f4:	212b      	movs	r1, #43	; 0x2b
 80037f6:	2000      	movs	r0, #0
 80037f8:	f7fd fe0e 	bl	8001418 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)MsgFunctions, "Czas: 0%d : 0%d", CHour, CMinute);
 80037fc:	7ffb      	ldrb	r3, [r7, #31]
 80037fe:	2b09      	cmp	r3, #9
 8003800:	d809      	bhi.n	8003816 <showCurrentParameters+0xaa>
 8003802:	7fbb      	ldrb	r3, [r7, #30]
 8003804:	2b09      	cmp	r3, #9
 8003806:	d806      	bhi.n	8003816 <showCurrentParameters+0xaa>
 8003808:	7ffa      	ldrb	r2, [r7, #31]
 800380a:	7fbb      	ldrb	r3, [r7, #30]
 800380c:	496c      	ldr	r1, [pc, #432]	; (80039c0 <showCurrentParameters+0x254>)
 800380e:	486b      	ldr	r0, [pc, #428]	; (80039bc <showCurrentParameters+0x250>)
 8003810:	f00f fd36 	bl	8013280 <siprintf>
 8003814:	e019      	b.n	800384a <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)MsgFunctions, "Czas: 0%d : %d", CHour, CMinute);
 8003816:	7ffb      	ldrb	r3, [r7, #31]
 8003818:	2b09      	cmp	r3, #9
 800381a:	d806      	bhi.n	800382a <showCurrentParameters+0xbe>
 800381c:	7ffa      	ldrb	r2, [r7, #31]
 800381e:	7fbb      	ldrb	r3, [r7, #30]
 8003820:	4968      	ldr	r1, [pc, #416]	; (80039c4 <showCurrentParameters+0x258>)
 8003822:	4866      	ldr	r0, [pc, #408]	; (80039bc <showCurrentParameters+0x250>)
 8003824:	f00f fd2c 	bl	8013280 <siprintf>
 8003828:	e00f      	b.n	800384a <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)MsgFunctions, "Czas: %d : 0%d", CHour, CMinute);
 800382a:	7fbb      	ldrb	r3, [r7, #30]
 800382c:	2b09      	cmp	r3, #9
 800382e:	d806      	bhi.n	800383e <showCurrentParameters+0xd2>
 8003830:	7ffa      	ldrb	r2, [r7, #31]
 8003832:	7fbb      	ldrb	r3, [r7, #30]
 8003834:	4964      	ldr	r1, [pc, #400]	; (80039c8 <showCurrentParameters+0x25c>)
 8003836:	4861      	ldr	r0, [pc, #388]	; (80039bc <showCurrentParameters+0x250>)
 8003838:	f00f fd22 	bl	8013280 <siprintf>
 800383c:	e005      	b.n	800384a <showCurrentParameters+0xde>
	  else sprintf((char*)MsgFunctions, "Czas: %d : %d", CHour, CMinute);
 800383e:	7ffa      	ldrb	r2, [r7, #31]
 8003840:	7fbb      	ldrb	r3, [r7, #30]
 8003842:	4962      	ldr	r1, [pc, #392]	; (80039cc <showCurrentParameters+0x260>)
 8003844:	485d      	ldr	r0, [pc, #372]	; (80039bc <showCurrentParameters+0x250>)
 8003846:	f00f fd1b 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800384a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	2300      	movs	r3, #0
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	2300      	movs	r3, #0
 8003856:	2232      	movs	r2, #50	; 0x32
 8003858:	2114      	movs	r1, #20
 800385a:	4858      	ldr	r0, [pc, #352]	; (80039bc <showCurrentParameters+0x250>)
 800385c:	f7fe faa6 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "Temp. zewn: %.2f`C", CTemp);
 8003860:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <showCurrentParameters+0x264>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fe87 	bl	8000578 <__aeabi_f2d>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4959      	ldr	r1, [pc, #356]	; (80039d4 <showCurrentParameters+0x268>)
 8003870:	4852      	ldr	r0, [pc, #328]	; (80039bc <showCurrentParameters+0x250>)
 8003872:	f00f fd05 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003876:	f24c 6318 	movw	r3, #50712	; 0xc618
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	2301      	movs	r3, #1
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	2300      	movs	r3, #0
 8003882:	2250      	movs	r2, #80	; 0x50
 8003884:	2114      	movs	r1, #20
 8003886:	484d      	ldr	r0, [pc, #308]	; (80039bc <showCurrentParameters+0x250>)
 8003888:	f7fe fa90 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "Temp. wewn: %.2f`C", CTempWew);
 800388c:	4b52      	ldr	r3, [pc, #328]	; (80039d8 <showCurrentParameters+0x26c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fc fe71 	bl	8000578 <__aeabi_f2d>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4950      	ldr	r1, [pc, #320]	; (80039dc <showCurrentParameters+0x270>)
 800389c:	4847      	ldr	r0, [pc, #284]	; (80039bc <showCurrentParameters+0x250>)
 800389e:	f00f fcef 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038a2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	2300      	movs	r3, #0
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2300      	movs	r3, #0
 80038ae:	226e      	movs	r2, #110	; 0x6e
 80038b0:	2114      	movs	r1, #20
 80038b2:	4842      	ldr	r0, [pc, #264]	; (80039bc <showCurrentParameters+0x250>)
 80038b4:	f7fe fa7a 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "Poz. wody: -%ldmm", CDist2water);
 80038b8:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <showCurrentParameters+0x274>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	4949      	ldr	r1, [pc, #292]	; (80039e4 <showCurrentParameters+0x278>)
 80038c0:	483e      	ldr	r0, [pc, #248]	; (80039bc <showCurrentParameters+0x250>)
 80038c2:	f00f fcdd 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038c6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	2300      	movs	r3, #0
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2300      	movs	r3, #0
 80038d2:	228c      	movs	r2, #140	; 0x8c
 80038d4:	2114      	movs	r1, #20
 80038d6:	4839      	ldr	r0, [pc, #228]	; (80039bc <showCurrentParameters+0x250>)
 80038d8:	f7fe fa68 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "Ciśnienie: %.1fhPa ", CPres);
 80038dc:	4b42      	ldr	r3, [pc, #264]	; (80039e8 <showCurrentParameters+0x27c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fe49 	bl	8000578 <__aeabi_f2d>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4940      	ldr	r1, [pc, #256]	; (80039ec <showCurrentParameters+0x280>)
 80038ec:	4833      	ldr	r0, [pc, #204]	; (80039bc <showCurrentParameters+0x250>)
 80038ee:	f00f fcc7 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038f2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	2300      	movs	r3, #0
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2300      	movs	r3, #0
 80038fe:	22aa      	movs	r2, #170	; 0xaa
 8003900:	2114      	movs	r1, #20
 8003902:	482e      	ldr	r0, [pc, #184]	; (80039bc <showCurrentParameters+0x250>)
 8003904:	f7fe fa52 	bl	8001dac <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003908:	4839      	ldr	r0, [pc, #228]	; (80039f0 <showCurrentParameters+0x284>)
 800390a:	f7fe f835 	bl	8001978 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800390e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	2305      	movs	r3, #5
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	2314      	movs	r3, #20
 800391a:	225f      	movs	r2, #95	; 0x5f
 800391c:	21d8      	movs	r1, #216	; 0xd8
 800391e:	20dc      	movs	r0, #220	; 0xdc
 8003920:	f7fd ffd9 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "CONTROL=>");
 8003924:	4933      	ldr	r1, [pc, #204]	; (80039f4 <showCurrentParameters+0x288>)
 8003926:	4825      	ldr	r0, [pc, #148]	; (80039bc <showCurrentParameters+0x250>)
 8003928:	f00f fcaa 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800392c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	2300      	movs	r3, #0
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	2300      	movs	r3, #0
 8003938:	22da      	movs	r2, #218	; 0xda
 800393a:	21df      	movs	r1, #223	; 0xdf
 800393c:	481f      	ldr	r0, [pc, #124]	; (80039bc <showCurrentParameters+0x250>)
 800393e:	f7fe fa35 	bl	8001dac <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003942:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	2305      	movs	r3, #5
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2314      	movs	r3, #20
 800394e:	2264      	movs	r2, #100	; 0x64
 8003950:	21d8      	movs	r1, #216	; 0xd8
 8003952:	200a      	movs	r0, #10
 8003954:	f7fd ffbf 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "<=LIGHTS");
 8003958:	4927      	ldr	r1, [pc, #156]	; (80039f8 <showCurrentParameters+0x28c>)
 800395a:	4818      	ldr	r0, [pc, #96]	; (80039bc <showCurrentParameters+0x250>)
 800395c:	f00f fc90 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003960:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	2300      	movs	r3, #0
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2300      	movs	r3, #0
 800396c:	22da      	movs	r2, #218	; 0xda
 800396e:	2114      	movs	r1, #20
 8003970:	4812      	ldr	r0, [pc, #72]	; (80039bc <showCurrentParameters+0x250>)
 8003972:	f7fe fa1b 	bl	8001dac <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003976:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	2305      	movs	r3, #5
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2314      	movs	r3, #20
 8003982:	225a      	movs	r2, #90	; 0x5a
 8003984:	21d8      	movs	r1, #216	; 0xd8
 8003986:	2078      	movs	r0, #120	; 0x78
 8003988:	f7fd ffa5 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, ">CLOCK<");
 800398c:	491b      	ldr	r1, [pc, #108]	; (80039fc <showCurrentParameters+0x290>)
 800398e:	480b      	ldr	r0, [pc, #44]	; (80039bc <showCurrentParameters+0x250>)
 8003990:	f00f fc76 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003994:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	2300      	movs	r3, #0
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	2300      	movs	r3, #0
 80039a0:	22da      	movs	r2, #218	; 0xda
 80039a2:	2184      	movs	r1, #132	; 0x84
 80039a4:	4805      	ldr	r0, [pc, #20]	; (80039bc <showCurrentParameters+0x250>)
 80039a6:	f7fe fa01 	bl	8001dac <EF_PutString>
}
 80039aa:	bf00      	nop
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	0802ab7c 	.word	0x0802ab7c
 80039b8:	08017010 	.word	0x08017010
 80039bc:	200002d8 	.word	0x200002d8
 80039c0:	08017020 	.word	0x08017020
 80039c4:	08017030 	.word	0x08017030
 80039c8:	08017040 	.word	0x08017040
 80039cc:	08017050 	.word	0x08017050
 80039d0:	20000930 	.word	0x20000930
 80039d4:	08017060 	.word	0x08017060
 80039d8:	2000093c 	.word	0x2000093c
 80039dc:	08017074 	.word	0x08017074
 80039e0:	20000940 	.word	0x20000940
 80039e4:	08017088 	.word	0x08017088
 80039e8:	20000938 	.word	0x20000938
 80039ec:	0801709c 	.word	0x0801709c
 80039f0:	08028c04 	.word	0x08028c04
 80039f4:	080170b4 	.word	0x080170b4
 80039f8:	080170c0 	.word	0x080170c0
 80039fc:	080170cc 	.word	0x080170cc

08003a00 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003a06:	2015      	movs	r0, #21
 8003a08:	f006 fbae 	bl	800a168 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003a0c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003a10:	f7fe fbb6 	bl	8002180 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003a14:	485c      	ldr	r0, [pc, #368]	; (8003b88 <showControlPanel+0x188>)
 8003a16:	f7fd ffaf 	bl	8001978 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)MsgFunctions, "-=PRZEŁĄCZNIKI=-");
 8003a1a:	495c      	ldr	r1, [pc, #368]	; (8003b8c <showControlPanel+0x18c>)
 8003a1c:	485c      	ldr	r0, [pc, #368]	; (8003b90 <showControlPanel+0x190>)
 8003a1e:	f00f fc2f 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a22:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	231f      	movs	r3, #31
 8003a2e:	220a      	movs	r2, #10
 8003a30:	2123      	movs	r1, #35	; 0x23
 8003a32:	4857      	ldr	r0, [pc, #348]	; (8003b90 <showControlPanel+0x190>)
 8003a34:	f7fe f9ba 	bl	8001dac <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003a38:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2329      	movs	r3, #41	; 0x29
 8003a40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a44:	2129      	movs	r1, #41	; 0x29
 8003a46:	2000      	movs	r0, #0
 8003a48:	f7fd fce6 	bl	8001418 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003a4c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	232b      	movs	r3, #43	; 0x2b
 8003a54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a58:	212b      	movs	r1, #43	; 0x2b
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7fd fcdc 	bl	8001418 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)MsgFunctions, "PRZEŁĄCZNIK 1:");
 8003a60:	494c      	ldr	r1, [pc, #304]	; (8003b94 <showControlPanel+0x194>)
 8003a62:	484b      	ldr	r0, [pc, #300]	; (8003b90 <showControlPanel+0x190>)
 8003a64:	f00f fc0c 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a68:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2300      	movs	r3, #0
 8003a74:	223c      	movs	r2, #60	; 0x3c
 8003a76:	2114      	movs	r1, #20
 8003a78:	4845      	ldr	r0, [pc, #276]	; (8003b90 <showControlPanel+0x190>)
 8003a7a:	f7fe f997 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "PRZEŁĄCZNIK 2:");
 8003a7e:	4946      	ldr	r1, [pc, #280]	; (8003b98 <showControlPanel+0x198>)
 8003a80:	4843      	ldr	r0, [pc, #268]	; (8003b90 <showControlPanel+0x190>)
 8003a82:	f00f fbfd 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003a86:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	225a      	movs	r2, #90	; 0x5a
 8003a94:	2114      	movs	r1, #20
 8003a96:	483e      	ldr	r0, [pc, #248]	; (8003b90 <showControlPanel+0x190>)
 8003a98:	f7fe f988 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "PRZEŁĄCZNIK 3:");
 8003a9c:	493f      	ldr	r1, [pc, #252]	; (8003b9c <showControlPanel+0x19c>)
 8003a9e:	483c      	ldr	r0, [pc, #240]	; (8003b90 <showControlPanel+0x190>)
 8003aa0:	f00f fbee 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003aa4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2278      	movs	r2, #120	; 0x78
 8003ab2:	2114      	movs	r1, #20
 8003ab4:	4836      	ldr	r0, [pc, #216]	; (8003b90 <showControlPanel+0x190>)
 8003ab6:	f7fe f979 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "PRZEŁĄCZNIK 4:");
 8003aba:	4939      	ldr	r1, [pc, #228]	; (8003ba0 <showControlPanel+0x1a0>)
 8003abc:	4834      	ldr	r0, [pc, #208]	; (8003b90 <showControlPanel+0x190>)
 8003abe:	f00f fbdf 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003ac2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2300      	movs	r3, #0
 8003ace:	2296      	movs	r2, #150	; 0x96
 8003ad0:	2114      	movs	r1, #20
 8003ad2:	482f      	ldr	r0, [pc, #188]	; (8003b90 <showControlPanel+0x190>)
 8003ad4:	f7fe f96a 	bl	8001dac <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003ad8:	4832      	ldr	r0, [pc, #200]	; (8003ba4 <showControlPanel+0x1a4>)
 8003ada:	f7fd ff4d 	bl	8001978 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003ade:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	2305      	movs	r3, #5
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	2314      	movs	r3, #20
 8003aea:	225f      	movs	r2, #95	; 0x5f
 8003aec:	21d8      	movs	r1, #216	; 0xd8
 8003aee:	20dc      	movs	r0, #220	; 0xdc
 8003af0:	f7fd fef1 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "LIGHTS=>");
 8003af4:	492c      	ldr	r1, [pc, #176]	; (8003ba8 <showControlPanel+0x1a8>)
 8003af6:	4826      	ldr	r0, [pc, #152]	; (8003b90 <showControlPanel+0x190>)
 8003af8:	f00f fbc2 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003afc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	2300      	movs	r3, #0
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2300      	movs	r3, #0
 8003b08:	22da      	movs	r2, #218	; 0xda
 8003b0a:	21df      	movs	r1, #223	; 0xdf
 8003b0c:	4820      	ldr	r0, [pc, #128]	; (8003b90 <showControlPanel+0x190>)
 8003b0e:	f7fe f94d 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003b12:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	2305      	movs	r3, #5
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	2314      	movs	r3, #20
 8003b1e:	2264      	movs	r2, #100	; 0x64
 8003b20:	21d8      	movs	r1, #216	; 0xd8
 8003b22:	200a      	movs	r0, #10
 8003b24:	f7fd fed7 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "<=PARAM");
 8003b28:	4920      	ldr	r1, [pc, #128]	; (8003bac <showControlPanel+0x1ac>)
 8003b2a:	4819      	ldr	r0, [pc, #100]	; (8003b90 <showControlPanel+0x190>)
 8003b2c:	f00f fba8 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003b30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	2300      	movs	r3, #0
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	22da      	movs	r2, #218	; 0xda
 8003b3e:	2114      	movs	r1, #20
 8003b40:	4813      	ldr	r0, [pc, #76]	; (8003b90 <showControlPanel+0x190>)
 8003b42:	f7fe f933 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003b46:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	2305      	movs	r3, #5
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2314      	movs	r3, #20
 8003b52:	225a      	movs	r2, #90	; 0x5a
 8003b54:	21d8      	movs	r1, #216	; 0xd8
 8003b56:	2078      	movs	r0, #120	; 0x78
 8003b58:	f7fd febd 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "ACTIVITIES");
 8003b5c:	4914      	ldr	r1, [pc, #80]	; (8003bb0 <showControlPanel+0x1b0>)
 8003b5e:	480c      	ldr	r0, [pc, #48]	; (8003b90 <showControlPanel+0x190>)
 8003b60:	f00f fb8e 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003b64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	22da      	movs	r2, #218	; 0xda
 8003b72:	217e      	movs	r1, #126	; 0x7e
 8003b74:	4806      	ldr	r0, [pc, #24]	; (8003b90 <showControlPanel+0x190>)
 8003b76:	f7fe f919 	bl	8001dac <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003b7a:	4803      	ldr	r0, [pc, #12]	; (8003b88 <showControlPanel+0x188>)
 8003b7c:	f7fd fefc 	bl	8001978 <EF_SetFont>


}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	0802ab7c 	.word	0x0802ab7c
 8003b8c:	080170d4 	.word	0x080170d4
 8003b90:	200002d8 	.word	0x200002d8
 8003b94:	080170e8 	.word	0x080170e8
 8003b98:	080170fc 	.word	0x080170fc
 8003b9c:	08017110 	.word	0x08017110
 8003ba0:	08017124 	.word	0x08017124
 8003ba4:	08028c04 	.word	0x08028c04
 8003ba8:	08017138 	.word	0x08017138
 8003bac:	08017144 	.word	0x08017144
 8003bb0:	0801714c 	.word	0x0801714c

08003bb4 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003bba:	2016      	movs	r0, #22
 8003bbc:	f006 fad4 	bl	800a168 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003bc0:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003bc4:	f7fe fadc 	bl	8002180 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003bc8:	485b      	ldr	r0, [pc, #364]	; (8003d38 <showLightsControlPanel+0x184>)
 8003bca:	f7fd fed5 	bl	8001978 <EF_SetFont>

	  // Display Header
	  sprintf((char*)MsgFunctions, "-=ŚWIATŁA=-");
 8003bce:	495b      	ldr	r1, [pc, #364]	; (8003d3c <showLightsControlPanel+0x188>)
 8003bd0:	485b      	ldr	r0, [pc, #364]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003bd2:	f00f fb55 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003bd6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003be4:	220a      	movs	r2, #10
 8003be6:	2146      	movs	r1, #70	; 0x46
 8003be8:	4855      	ldr	r0, [pc, #340]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003bea:	f7fe f8df 	bl	8001dac <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003bee:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2329      	movs	r3, #41	; 0x29
 8003bf6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003bfa:	2129      	movs	r1, #41	; 0x29
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	f7fd fc0b 	bl	8001418 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003c02:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	232b      	movs	r3, #43	; 0x2b
 8003c0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c0e:	212b      	movs	r1, #43	; 0x2b
 8003c10:	2000      	movs	r0, #0
 8003c12:	f7fd fc01 	bl	8001418 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)MsgFunctions, "ŚWIATŁO 1:");
 8003c16:	494b      	ldr	r1, [pc, #300]	; (8003d44 <showLightsControlPanel+0x190>)
 8003c18:	4849      	ldr	r0, [pc, #292]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003c1a:	f00f fb31 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003c1e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	2300      	movs	r3, #0
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	223c      	movs	r2, #60	; 0x3c
 8003c2c:	2114      	movs	r1, #20
 8003c2e:	4844      	ldr	r0, [pc, #272]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003c30:	f7fe f8bc 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "ŚWIATŁO 2:");
 8003c34:	4944      	ldr	r1, [pc, #272]	; (8003d48 <showLightsControlPanel+0x194>)
 8003c36:	4842      	ldr	r0, [pc, #264]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003c38:	f00f fb22 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003c3c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	2301      	movs	r3, #1
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	2300      	movs	r3, #0
 8003c48:	225a      	movs	r2, #90	; 0x5a
 8003c4a:	2114      	movs	r1, #20
 8003c4c:	483c      	ldr	r0, [pc, #240]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003c4e:	f7fe f8ad 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "ŚWIATŁO 3:");
 8003c52:	493e      	ldr	r1, [pc, #248]	; (8003d4c <showLightsControlPanel+0x198>)
 8003c54:	483a      	ldr	r0, [pc, #232]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003c56:	f00f fb13 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003c5a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	2300      	movs	r3, #0
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2300      	movs	r3, #0
 8003c66:	2278      	movs	r2, #120	; 0x78
 8003c68:	2114      	movs	r1, #20
 8003c6a:	4835      	ldr	r0, [pc, #212]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003c6c:	f7fe f89e 	bl	8001dac <EF_PutString>

	  sprintf((char*)MsgFunctions, "ŚWIATŁO 4:");
 8003c70:	4937      	ldr	r1, [pc, #220]	; (8003d50 <showLightsControlPanel+0x19c>)
 8003c72:	4833      	ldr	r0, [pc, #204]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003c74:	f00f fb04 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003c78:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003c7c:	9301      	str	r3, [sp, #4]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	2300      	movs	r3, #0
 8003c84:	2296      	movs	r2, #150	; 0x96
 8003c86:	2114      	movs	r1, #20
 8003c88:	482d      	ldr	r0, [pc, #180]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003c8a:	f7fe f88f 	bl	8001dac <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003c8e:	4831      	ldr	r0, [pc, #196]	; (8003d54 <showLightsControlPanel+0x1a0>)
 8003c90:	f7fd fe72 	bl	8001978 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c94:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	2305      	movs	r3, #5
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	2314      	movs	r3, #20
 8003ca0:	225f      	movs	r2, #95	; 0x5f
 8003ca2:	21d8      	movs	r1, #216	; 0xd8
 8003ca4:	20dc      	movs	r0, #220	; 0xdc
 8003ca6:	f7fd fe16 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "PARAM=>");
 8003caa:	492b      	ldr	r1, [pc, #172]	; (8003d58 <showLightsControlPanel+0x1a4>)
 8003cac:	4824      	ldr	r0, [pc, #144]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003cae:	f00f fae7 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003cb2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	22da      	movs	r2, #218	; 0xda
 8003cc0:	21e6      	movs	r1, #230	; 0xe6
 8003cc2:	481f      	ldr	r0, [pc, #124]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003cc4:	f7fe f872 	bl	8001dac <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003cc8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	2305      	movs	r3, #5
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	2314      	movs	r3, #20
 8003cd4:	225a      	movs	r2, #90	; 0x5a
 8003cd6:	21d8      	movs	r1, #216	; 0xd8
 8003cd8:	2078      	movs	r0, #120	; 0x78
 8003cda:	f7fd fdfc 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, ">WS2812b<");
 8003cde:	491f      	ldr	r1, [pc, #124]	; (8003d5c <showLightsControlPanel+0x1a8>)
 8003ce0:	4817      	ldr	r0, [pc, #92]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003ce2:	f00f facd 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ce6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	2300      	movs	r3, #0
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	22da      	movs	r2, #218	; 0xda
 8003cf4:	217e      	movs	r1, #126	; 0x7e
 8003cf6:	4812      	ldr	r0, [pc, #72]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003cf8:	f7fe f858 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003cfc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	2305      	movs	r3, #5
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	2314      	movs	r3, #20
 8003d08:	2264      	movs	r2, #100	; 0x64
 8003d0a:	21d8      	movs	r1, #216	; 0xd8
 8003d0c:	200a      	movs	r0, #10
 8003d0e:	f7fd fde2 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "<=CONTROL");
 8003d12:	4913      	ldr	r1, [pc, #76]	; (8003d60 <showLightsControlPanel+0x1ac>)
 8003d14:	480a      	ldr	r0, [pc, #40]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003d16:	f00f fab3 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d1a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	2300      	movs	r3, #0
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2300      	movs	r3, #0
 8003d26:	22da      	movs	r2, #218	; 0xda
 8003d28:	210d      	movs	r1, #13
 8003d2a:	4805      	ldr	r0, [pc, #20]	; (8003d40 <showLightsControlPanel+0x18c>)
 8003d2c:	f7fe f83e 	bl	8001dac <EF_PutString>


}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	0802ab7c 	.word	0x0802ab7c
 8003d3c:	08017158 	.word	0x08017158
 8003d40:	200002d8 	.word	0x200002d8
 8003d44:	08017168 	.word	0x08017168
 8003d48:	08017178 	.word	0x08017178
 8003d4c:	08017188 	.word	0x08017188
 8003d50:	08017198 	.word	0x08017198
 8003d54:	08028c04 	.word	0x08028c04
 8003d58:	080171a8 	.word	0x080171a8
 8003d5c:	080171b0 	.word	0x080171b0
 8003d60:	080171bc 	.word	0x080171bc

08003d64 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af02      	add	r7, sp, #8


	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003d6a:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003d6e:	f7fe fa07 	bl	8002180 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003d72:	48a2      	ldr	r0, [pc, #648]	; (8003ffc <showClockSetPanel+0x298>)
 8003d74:	f7fd fe00 	bl	8001978 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003d78:	f7fe fe8e 	bl	8002a98 <DS3231_GetHour>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003d80:	f7fe fe96 	bl	8002ab0 <DS3231_GetMinute>
 8003d84:	4603      	mov	r3, r0
 8003d86:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003d88:	f7fe fe7a 	bl	8002a80 <DS3231_GetDayOfWeek>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)MsgFunctions, "-=SET CLOCK=-");
 8003d90:	499b      	ldr	r1, [pc, #620]	; (8004000 <showClockSetPanel+0x29c>)
 8003d92:	489c      	ldr	r0, [pc, #624]	; (8004004 <showClockSetPanel+0x2a0>)
 8003d94:	f00f fa74 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003d98:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003da6:	220a      	movs	r2, #10
 8003da8:	212f      	movs	r1, #47	; 0x2f
 8003daa:	4896      	ldr	r0, [pc, #600]	; (8004004 <showClockSetPanel+0x2a0>)
 8003dac:	f7fd fffe 	bl	8001dac <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003db0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2329      	movs	r3, #41	; 0x29
 8003db8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003dbc:	2129      	movs	r1, #41	; 0x29
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f7fd fb2a 	bl	8001418 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003dc4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	232b      	movs	r3, #43	; 0x2b
 8003dcc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003dd0:	212b      	movs	r1, #43	; 0x2b
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	f7fd fb20 	bl	8001418 <GFX_DrawLine>

	sprintf((char*)MsgFunctions, "GODZINA: %d", CHour);
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	498a      	ldr	r1, [pc, #552]	; (8004008 <showClockSetPanel+0x2a4>)
 8003dde:	4889      	ldr	r0, [pc, #548]	; (8004004 <showClockSetPanel+0x2a0>)
 8003de0:	f00f fa4e 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003de4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	2300      	movs	r3, #0
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	2300      	movs	r3, #0
 8003df0:	2246      	movs	r2, #70	; 0x46
 8003df2:	2114      	movs	r1, #20
 8003df4:	4883      	ldr	r0, [pc, #524]	; (8004004 <showClockSetPanel+0x2a0>)
 8003df6:	f7fd ffd9 	bl	8001dac <EF_PutString>

	sprintf((char*)MsgFunctions, "MINUTA:   %d", CMinute);
 8003dfa:	79bb      	ldrb	r3, [r7, #6]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4983      	ldr	r1, [pc, #524]	; (800400c <showClockSetPanel+0x2a8>)
 8003e00:	4880      	ldr	r0, [pc, #512]	; (8004004 <showClockSetPanel+0x2a0>)
 8003e02:	f00f fa3d 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003e06:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2300      	movs	r3, #0
 8003e12:	226e      	movs	r2, #110	; 0x6e
 8003e14:	2114      	movs	r1, #20
 8003e16:	487b      	ldr	r0, [pc, #492]	; (8004004 <showClockSetPanel+0x2a0>)
 8003e18:	f7fd ffc8 	bl	8001dac <EF_PutString>

	sprintf((char*)MsgFunctions, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003e1c:	797b      	ldrb	r3, [r7, #5]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	497b      	ldr	r1, [pc, #492]	; (8004010 <showClockSetPanel+0x2ac>)
 8003e22:	4878      	ldr	r0, [pc, #480]	; (8004004 <showClockSetPanel+0x2a0>)
 8003e24:	f00f fa2c 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003e28:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	2301      	movs	r3, #1
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2300      	movs	r3, #0
 8003e34:	2296      	movs	r2, #150	; 0x96
 8003e36:	2114      	movs	r1, #20
 8003e38:	4872      	ldr	r0, [pc, #456]	; (8004004 <showClockSetPanel+0x2a0>)
 8003e3a:	f7fd ffb7 	bl	8001dac <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003e3e:	4875      	ldr	r0, [pc, #468]	; (8004014 <showClockSetPanel+0x2b0>)
 8003e40:	f7fd fd9a 	bl	8001978 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e44:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	2305      	movs	r3, #5
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2315      	movs	r3, #21
 8003e50:	221e      	movs	r2, #30
 8003e52:	214b      	movs	r1, #75	; 0x4b
 8003e54:	20f0      	movs	r0, #240	; 0xf0
 8003e56:	f7fd fd3e 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+1");
 8003e5a:	496f      	ldr	r1, [pc, #444]	; (8004018 <showClockSetPanel+0x2b4>)
 8003e5c:	4869      	ldr	r0, [pc, #420]	; (8004004 <showClockSetPanel+0x2a0>)
 8003e5e:	f00f fa0f 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e62:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e66:	9301      	str	r3, [sp, #4]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	224d      	movs	r2, #77	; 0x4d
 8003e70:	21f3      	movs	r1, #243	; 0xf3
 8003e72:	4864      	ldr	r0, [pc, #400]	; (8004004 <showClockSetPanel+0x2a0>)
 8003e74:	f7fd ff9a 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003e78:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	2305      	movs	r3, #5
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2315      	movs	r3, #21
 8003e84:	221e      	movs	r2, #30
 8003e86:	214b      	movs	r1, #75	; 0x4b
 8003e88:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003e8c:	f7fd fd23 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+6");
 8003e90:	4962      	ldr	r1, [pc, #392]	; (800401c <showClockSetPanel+0x2b8>)
 8003e92:	485c      	ldr	r0, [pc, #368]	; (8004004 <showClockSetPanel+0x2a0>)
 8003e94:	f00f f9f4 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003e98:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	224d      	movs	r2, #77	; 0x4d
 8003ea6:	f240 111d 	movw	r1, #285	; 0x11d
 8003eaa:	4856      	ldr	r0, [pc, #344]	; (8004004 <showClockSetPanel+0x2a0>)
 8003eac:	f7fd ff7e 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003eb0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	2305      	movs	r3, #5
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	2315      	movs	r3, #21
 8003ebc:	221e      	movs	r2, #30
 8003ebe:	2173      	movs	r1, #115	; 0x73
 8003ec0:	20f0      	movs	r0, #240	; 0xf0
 8003ec2:	f7fd fd08 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+1");
 8003ec6:	4954      	ldr	r1, [pc, #336]	; (8004018 <showClockSetPanel+0x2b4>)
 8003ec8:	484e      	ldr	r0, [pc, #312]	; (8004004 <showClockSetPanel+0x2a0>)
 8003eca:	f00f f9d9 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ece:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	2275      	movs	r2, #117	; 0x75
 8003edc:	21f5      	movs	r1, #245	; 0xf5
 8003ede:	4849      	ldr	r0, [pc, #292]	; (8004004 <showClockSetPanel+0x2a0>)
 8003ee0:	f7fd ff64 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ee4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	2305      	movs	r3, #5
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	2315      	movs	r3, #21
 8003ef0:	221e      	movs	r2, #30
 8003ef2:	2173      	movs	r1, #115	; 0x73
 8003ef4:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003ef8:	f7fd fced 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+10");
 8003efc:	4948      	ldr	r1, [pc, #288]	; (8004020 <showClockSetPanel+0x2bc>)
 8003efe:	4841      	ldr	r0, [pc, #260]	; (8004004 <showClockSetPanel+0x2a0>)
 8003f00:	f00f f9be 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003f04:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2275      	movs	r2, #117	; 0x75
 8003f12:	f240 111b 	movw	r1, #283	; 0x11b
 8003f16:	483b      	ldr	r0, [pc, #236]	; (8004004 <showClockSetPanel+0x2a0>)
 8003f18:	f7fd ff48 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003f1c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	2305      	movs	r3, #5
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2315      	movs	r3, #21
 8003f28:	221e      	movs	r2, #30
 8003f2a:	219b      	movs	r1, #155	; 0x9b
 8003f2c:	20f0      	movs	r0, #240	; 0xf0
 8003f2e:	f7fd fcd2 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+1D");
 8003f32:	493c      	ldr	r1, [pc, #240]	; (8004024 <showClockSetPanel+0x2c0>)
 8003f34:	4833      	ldr	r0, [pc, #204]	; (8004004 <showClockSetPanel+0x2a0>)
 8003f36:	f00f f9a3 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003f3a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2300      	movs	r3, #0
 8003f46:	229d      	movs	r2, #157	; 0x9d
 8003f48:	21f3      	movs	r1, #243	; 0xf3
 8003f4a:	482e      	ldr	r0, [pc, #184]	; (8004004 <showClockSetPanel+0x2a0>)
 8003f4c:	f7fd ff2e 	bl	8001dac <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003f50:	4830      	ldr	r0, [pc, #192]	; (8004014 <showClockSetPanel+0x2b0>)
 8003f52:	f7fd fd11 	bl	8001978 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003f56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	2305      	movs	r3, #5
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2314      	movs	r3, #20
 8003f62:	225f      	movs	r2, #95	; 0x5f
 8003f64:	21d8      	movs	r1, #216	; 0xd8
 8003f66:	20dc      	movs	r0, #220	; 0xdc
 8003f68:	f7fd fcb5 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "CONFIRM");
 8003f6c:	492e      	ldr	r1, [pc, #184]	; (8004028 <showClockSetPanel+0x2c4>)
 8003f6e:	4825      	ldr	r0, [pc, #148]	; (8004004 <showClockSetPanel+0x2a0>)
 8003f70:	f00f f986 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003f74:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	22da      	movs	r2, #218	; 0xda
 8003f82:	21e6      	movs	r1, #230	; 0xe6
 8003f84:	481f      	ldr	r0, [pc, #124]	; (8004004 <showClockSetPanel+0x2a0>)
 8003f86:	f7fd ff11 	bl	8001dac <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003f8a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	2305      	movs	r3, #5
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	2316      	movs	r3, #22
 8003f96:	22aa      	movs	r2, #170	; 0xaa
 8003f98:	21be      	movs	r1, #190	; 0xbe
 8003f9a:	2050      	movs	r0, #80	; 0x50
 8003f9c:	f7fd fc9b 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "HARMONOGRAMY");
 8003fa0:	4922      	ldr	r1, [pc, #136]	; (800402c <showClockSetPanel+0x2c8>)
 8003fa2:	4818      	ldr	r0, [pc, #96]	; (8004004 <showClockSetPanel+0x2a0>)
 8003fa4:	f00f f96c 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003fa8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fac:	9301      	str	r3, [sp, #4]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	22c1      	movs	r2, #193	; 0xc1
 8003fb6:	2164      	movs	r1, #100	; 0x64
 8003fb8:	4812      	ldr	r0, [pc, #72]	; (8004004 <showClockSetPanel+0x2a0>)
 8003fba:	f7fd fef7 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003fbe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	2305      	movs	r3, #5
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	2314      	movs	r3, #20
 8003fca:	2264      	movs	r2, #100	; 0x64
 8003fcc:	21d8      	movs	r1, #216	; 0xd8
 8003fce:	200a      	movs	r0, #10
 8003fd0:	f7fd fc81 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "<=BACK");
 8003fd4:	4916      	ldr	r1, [pc, #88]	; (8004030 <showClockSetPanel+0x2cc>)
 8003fd6:	480b      	ldr	r0, [pc, #44]	; (8004004 <showClockSetPanel+0x2a0>)
 8003fd8:	f00f f952 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003fdc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	22da      	movs	r2, #218	; 0xda
 8003fea:	210d      	movs	r1, #13
 8003fec:	4805      	ldr	r0, [pc, #20]	; (8004004 <showClockSetPanel+0x2a0>)
 8003fee:	f7fd fedd 	bl	8001dac <EF_PutString>
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	0802ab7c 	.word	0x0802ab7c
 8004000:	080171c8 	.word	0x080171c8
 8004004:	200002d8 	.word	0x200002d8
 8004008:	080171d8 	.word	0x080171d8
 800400c:	080171e4 	.word	0x080171e4
 8004010:	080171f4 	.word	0x080171f4
 8004014:	08028c04 	.word	0x08028c04
 8004018:	08017204 	.word	0x08017204
 800401c:	08017208 	.word	0x08017208
 8004020:	0801720c 	.word	0x0801720c
 8004024:	08017210 	.word	0x08017210
 8004028:	08017214 	.word	0x08017214
 800402c:	0801721c 	.word	0x0801721c
 8004030:	0801722c 	.word	0x0801722c

08004034 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800403a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800403e:	f7fe f89f 	bl	8002180 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8004042:	4896      	ldr	r0, [pc, #600]	; (800429c <showPreparedActivitiesPanel+0x268>)
 8004044:	f7fd fc98 	bl	8001978 <EF_SetFont>

	// Display Header
	sprintf((char*)MsgFunctions, "-=ACTIVITIES=-");
 8004048:	4995      	ldr	r1, [pc, #596]	; (80042a0 <showPreparedActivitiesPanel+0x26c>)
 800404a:	4896      	ldr	r0, [pc, #600]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 800404c:	f00f f918 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004050:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	2300      	movs	r3, #0
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	231f      	movs	r3, #31
 800405c:	220a      	movs	r2, #10
 800405e:	212f      	movs	r1, #47	; 0x2f
 8004060:	4890      	ldr	r0, [pc, #576]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 8004062:	f7fd fea3 	bl	8001dac <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004066:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2329      	movs	r3, #41	; 0x29
 800406e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004072:	2129      	movs	r1, #41	; 0x29
 8004074:	2000      	movs	r0, #0
 8004076:	f7fd f9cf 	bl	8001418 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800407a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	232b      	movs	r3, #43	; 0x2b
 8004082:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004086:	212b      	movs	r1, #43	; 0x2b
 8004088:	2000      	movs	r0, #0
 800408a:	f7fd f9c5 	bl	8001418 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 800408e:	4886      	ldr	r0, [pc, #536]	; (80042a8 <showPreparedActivitiesPanel+0x274>)
 8004090:	f7fd fc72 	bl	8001978 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004094:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	2305      	movs	r3, #5
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	2314      	movs	r3, #20
 80040a0:	2264      	movs	r2, #100	; 0x64
 80040a2:	21d8      	movs	r1, #216	; 0xd8
 80040a4:	200a      	movs	r0, #10
 80040a6:	f7fd fc16 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "<=BACK");
 80040aa:	4980      	ldr	r1, [pc, #512]	; (80042ac <showPreparedActivitiesPanel+0x278>)
 80040ac:	487d      	ldr	r0, [pc, #500]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 80040ae:	f00f f8e7 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80040b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	2300      	movs	r3, #0
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2300      	movs	r3, #0
 80040be:	22da      	movs	r2, #218	; 0xda
 80040c0:	210d      	movs	r1, #13
 80040c2:	4878      	ldr	r0, [pc, #480]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 80040c4:	f7fd fe72 	bl	8001dac <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80040c8:	4877      	ldr	r0, [pc, #476]	; (80042a8 <showPreparedActivitiesPanel+0x274>)
 80040ca:	f7fd fc55 	bl	8001978 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80040ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	2305      	movs	r3, #5
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	2314      	movs	r3, #20
 80040da:	225f      	movs	r2, #95	; 0x5f
 80040dc:	21d8      	movs	r1, #216	; 0xd8
 80040de:	20dc      	movs	r0, #220	; 0xdc
 80040e0:	f7fd fbf9 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "CONFIRM");
 80040e4:	4972      	ldr	r1, [pc, #456]	; (80042b0 <showPreparedActivitiesPanel+0x27c>)
 80040e6:	486f      	ldr	r0, [pc, #444]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 80040e8:	f00f f8ca 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80040ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	2300      	movs	r3, #0
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2300      	movs	r3, #0
 80040f8:	22da      	movs	r2, #218	; 0xda
 80040fa:	21e6      	movs	r1, #230	; 0xe6
 80040fc:	4869      	ldr	r0, [pc, #420]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 80040fe:	f7fd fe55 	bl	8001dac <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8004102:	4b6c      	ldr	r3, [pc, #432]	; (80042b4 <showPreparedActivitiesPanel+0x280>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d029      	beq.n	800415e <showPreparedActivitiesPanel+0x12a>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800410a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	230a      	movs	r3, #10
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2328      	movs	r3, #40	; 0x28
 8004116:	2278      	movs	r2, #120	; 0x78
 8004118:	213c      	movs	r1, #60	; 0x3c
 800411a:	2064      	movs	r0, #100	; 0x64
 800411c:	f7fd fbdb 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)MsgFunctions, "KARMIENIE");
 8004120:	4965      	ldr	r1, [pc, #404]	; (80042b8 <showPreparedActivitiesPanel+0x284>)
 8004122:	4860      	ldr	r0, [pc, #384]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 8004124:	f00f f8ac 	bl	8013280 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004128:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	2300      	movs	r3, #0
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	2300      	movs	r3, #0
 8004134:	223e      	movs	r2, #62	; 0x3e
 8004136:	2177      	movs	r1, #119	; 0x77
 8004138:	485a      	ldr	r0, [pc, #360]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 800413a:	f7fd fe37 	bl	8001dac <EF_PutString>
		sprintf((char*)MsgFunctions, "ON");
 800413e:	495f      	ldr	r1, [pc, #380]	; (80042bc <showPreparedActivitiesPanel+0x288>)
 8004140:	4858      	ldr	r0, [pc, #352]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 8004142:	f00f f89d 	bl	8013280 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8004146:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	2300      	movs	r3, #0
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	2300      	movs	r3, #0
 8004152:	2250      	movs	r2, #80	; 0x50
 8004154:	2193      	movs	r1, #147	; 0x93
 8004156:	4853      	ldr	r0, [pc, #332]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 8004158:	f7fd fe28 	bl	8001dac <EF_PutString>
 800415c:	e028      	b.n	80041b0 <showPreparedActivitiesPanel+0x17c>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800415e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	230a      	movs	r3, #10
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2328      	movs	r3, #40	; 0x28
 800416a:	2278      	movs	r2, #120	; 0x78
 800416c:	213c      	movs	r1, #60	; 0x3c
 800416e:	2064      	movs	r0, #100	; 0x64
 8004170:	f7fd fbb1 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)MsgFunctions, "KARMIENIE");
 8004174:	4950      	ldr	r1, [pc, #320]	; (80042b8 <showPreparedActivitiesPanel+0x284>)
 8004176:	484b      	ldr	r0, [pc, #300]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 8004178:	f00f f882 	bl	8013280 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800417c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	2300      	movs	r3, #0
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	2300      	movs	r3, #0
 8004188:	223e      	movs	r2, #62	; 0x3e
 800418a:	2177      	movs	r1, #119	; 0x77
 800418c:	4845      	ldr	r0, [pc, #276]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 800418e:	f7fd fe0d 	bl	8001dac <EF_PutString>
		sprintf((char*)MsgFunctions, "OFF");
 8004192:	494b      	ldr	r1, [pc, #300]	; (80042c0 <showPreparedActivitiesPanel+0x28c>)
 8004194:	4843      	ldr	r0, [pc, #268]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 8004196:	f00f f873 	bl	8013280 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800419a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	2300      	movs	r3, #0
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	2300      	movs	r3, #0
 80041a6:	2250      	movs	r2, #80	; 0x50
 80041a8:	2193      	movs	r1, #147	; 0x93
 80041aa:	483e      	ldr	r0, [pc, #248]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 80041ac:	f7fd fdfe 	bl	8001dac <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 80041b0:	4b40      	ldr	r3, [pc, #256]	; (80042b4 <showPreparedActivitiesPanel+0x280>)
 80041b2:	785b      	ldrb	r3, [r3, #1]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d029      	beq.n	800420c <showPreparedActivitiesPanel+0x1d8>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80041b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041bc:	9301      	str	r3, [sp, #4]
 80041be:	230a      	movs	r3, #10
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	2328      	movs	r3, #40	; 0x28
 80041c4:	2278      	movs	r2, #120	; 0x78
 80041c6:	2178      	movs	r1, #120	; 0x78
 80041c8:	2064      	movs	r0, #100	; 0x64
 80041ca:	f7fd fb84 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)MsgFunctions, "CZYSZCZENIE");
 80041ce:	493d      	ldr	r1, [pc, #244]	; (80042c4 <showPreparedActivitiesPanel+0x290>)
 80041d0:	4834      	ldr	r0, [pc, #208]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 80041d2:	f00f f855 	bl	8013280 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80041d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	2300      	movs	r3, #0
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2300      	movs	r3, #0
 80041e2:	227a      	movs	r2, #122	; 0x7a
 80041e4:	2169      	movs	r1, #105	; 0x69
 80041e6:	482f      	ldr	r0, [pc, #188]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 80041e8:	f7fd fde0 	bl	8001dac <EF_PutString>
		sprintf((char*)MsgFunctions, "ON");
 80041ec:	4933      	ldr	r1, [pc, #204]	; (80042bc <showPreparedActivitiesPanel+0x288>)
 80041ee:	482d      	ldr	r0, [pc, #180]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 80041f0:	f00f f846 	bl	8013280 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80041f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	2300      	movs	r3, #0
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	2300      	movs	r3, #0
 8004200:	228c      	movs	r2, #140	; 0x8c
 8004202:	2193      	movs	r1, #147	; 0x93
 8004204:	4827      	ldr	r0, [pc, #156]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 8004206:	f7fd fdd1 	bl	8001dac <EF_PutString>
 800420a:	e028      	b.n	800425e <showPreparedActivitiesPanel+0x22a>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800420c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	230a      	movs	r3, #10
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	2328      	movs	r3, #40	; 0x28
 8004218:	2278      	movs	r2, #120	; 0x78
 800421a:	2178      	movs	r1, #120	; 0x78
 800421c:	2064      	movs	r0, #100	; 0x64
 800421e:	f7fd fb5a 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)MsgFunctions, "CZYSZCZENIE");
 8004222:	4928      	ldr	r1, [pc, #160]	; (80042c4 <showPreparedActivitiesPanel+0x290>)
 8004224:	481f      	ldr	r0, [pc, #124]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 8004226:	f00f f82b 	bl	8013280 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800422a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	2300      	movs	r3, #0
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	2300      	movs	r3, #0
 8004236:	227a      	movs	r2, #122	; 0x7a
 8004238:	2169      	movs	r1, #105	; 0x69
 800423a:	481a      	ldr	r0, [pc, #104]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 800423c:	f7fd fdb6 	bl	8001dac <EF_PutString>
		sprintf((char*)MsgFunctions, "OFF");
 8004240:	491f      	ldr	r1, [pc, #124]	; (80042c0 <showPreparedActivitiesPanel+0x28c>)
 8004242:	4818      	ldr	r0, [pc, #96]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 8004244:	f00f f81c 	bl	8013280 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004248:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	2300      	movs	r3, #0
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	2300      	movs	r3, #0
 8004254:	228c      	movs	r2, #140	; 0x8c
 8004256:	2193      	movs	r1, #147	; 0x93
 8004258:	4812      	ldr	r0, [pc, #72]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 800425a:	f7fd fda7 	bl	8001dac <EF_PutString>
	}


	EF_SetFont(&arialBlack_20ptFontInfo);
 800425e:	480f      	ldr	r0, [pc, #60]	; (800429c <showPreparedActivitiesPanel+0x268>)
 8004260:	f7fd fb8a 	bl	8001978 <EF_SetFont>
	activitiesDurationTimeInSeconds = EEPROM_ActivitiesTimeRead(1);
 8004264:	2001      	movs	r0, #1
 8004266:	f7ff f8c8 	bl	80033fa <EEPROM_ActivitiesTimeRead>
 800426a:	4603      	mov	r3, r0
 800426c:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <showPreparedActivitiesPanel+0x294>)
 800426e:	6013      	str	r3, [r2, #0]
	sprintf((char*)MsgFunctions, "Czas karmienia: %ld s", activitiesDurationTimeInSeconds);
 8004270:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <showPreparedActivitiesPanel+0x294>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	4915      	ldr	r1, [pc, #84]	; (80042cc <showPreparedActivitiesPanel+0x298>)
 8004278:	480a      	ldr	r0, [pc, #40]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 800427a:	f00f f801 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, ACTIVITIES_TIME_DURATION_X, ACTIVITIES_TIME_DURATION_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800427e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	2300      	movs	r3, #0
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	2300      	movs	r3, #0
 800428a:	22b4      	movs	r2, #180	; 0xb4
 800428c:	210a      	movs	r1, #10
 800428e:	4805      	ldr	r0, [pc, #20]	; (80042a4 <showPreparedActivitiesPanel+0x270>)
 8004290:	f7fd fd8c 	bl	8001dac <EF_PutString>
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	0802ab7c 	.word	0x0802ab7c
 80042a0:	08017234 	.word	0x08017234
 80042a4:	200002d8 	.word	0x200002d8
 80042a8:	08028c04 	.word	0x08028c04
 80042ac:	0801722c 	.word	0x0801722c
 80042b0:	08017214 	.word	0x08017214
 80042b4:	200002d4 	.word	0x200002d4
 80042b8:	08017244 	.word	0x08017244
 80042bc:	08017250 	.word	0x08017250
 80042c0:	08017254 	.word	0x08017254
 80042c4:	08017258 	.word	0x08017258
 80042c8:	20000898 	.word	0x20000898
 80042cc:	08017264 	.word	0x08017264

080042d0 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80042d6:	f24c 6018 	movw	r0, #50712	; 0xc618
 80042da:	f7fd ff51 	bl	8002180 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80042de:	48c7      	ldr	r0, [pc, #796]	; (80045fc <showWSLedPanel+0x32c>)
 80042e0:	f7fd fb4a 	bl	8001978 <EF_SetFont>


	// Display Header
	sprintf((char*)MsgFunctions, "-=WS2812b=-");
 80042e4:	49c6      	ldr	r1, [pc, #792]	; (8004600 <showWSLedPanel+0x330>)
 80042e6:	48c7      	ldr	r0, [pc, #796]	; (8004604 <showWSLedPanel+0x334>)
 80042e8:	f00e ffca 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80042ec:	f24c 6318 	movw	r3, #50712	; 0xc618
 80042f0:	9301      	str	r3, [sp, #4]
 80042f2:	2300      	movs	r3, #0
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	231f      	movs	r3, #31
 80042f8:	220a      	movs	r2, #10
 80042fa:	2146      	movs	r1, #70	; 0x46
 80042fc:	48c1      	ldr	r0, [pc, #772]	; (8004604 <showWSLedPanel+0x334>)
 80042fe:	f7fd fd55 	bl	8001dac <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004302:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	2329      	movs	r3, #41	; 0x29
 800430a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800430e:	2129      	movs	r1, #41	; 0x29
 8004310:	2000      	movs	r0, #0
 8004312:	f7fd f881 	bl	8001418 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004316:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	232b      	movs	r3, #43	; 0x2b
 800431e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004322:	212b      	movs	r1, #43	; 0x2b
 8004324:	2000      	movs	r0, #0
 8004326:	f7fd f877 	bl	8001418 <GFX_DrawLine>

	// Display String
	sprintf((char*)MsgFunctions, "ILOŚĆ LED: %d", NrOfLeds);
 800432a:	4bb7      	ldr	r3, [pc, #732]	; (8004608 <showWSLedPanel+0x338>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	49b6      	ldr	r1, [pc, #728]	; (800460c <showWSLedPanel+0x33c>)
 8004332:	48b4      	ldr	r0, [pc, #720]	; (8004604 <showWSLedPanel+0x334>)
 8004334:	f00e ffa4 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004338:	f24c 6318 	movw	r3, #50712	; 0xc618
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	2300      	movs	r3, #0
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	2300      	movs	r3, #0
 8004344:	223c      	movs	r2, #60	; 0x3c
 8004346:	2114      	movs	r1, #20
 8004348:	48ae      	ldr	r0, [pc, #696]	; (8004604 <showWSLedPanel+0x334>)
 800434a:	f7fd fd2f 	bl	8001dac <EF_PutString>

	sprintf((char*)MsgFunctions, "WHITE:");
 800434e:	49b0      	ldr	r1, [pc, #704]	; (8004610 <showWSLedPanel+0x340>)
 8004350:	48ac      	ldr	r0, [pc, #688]	; (8004604 <showWSLedPanel+0x334>)
 8004352:	f00e ff95 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004356:	f24c 6318 	movw	r3, #50712	; 0xc618
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	2300      	movs	r3, #0
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	2300      	movs	r3, #0
 8004362:	225a      	movs	r2, #90	; 0x5a
 8004364:	2114      	movs	r1, #20
 8004366:	48a7      	ldr	r0, [pc, #668]	; (8004604 <showWSLedPanel+0x334>)
 8004368:	f7fd fd20 	bl	8001dac <EF_PutString>

	sprintf((char*)MsgFunctions, "BLUE:");
 800436c:	49a9      	ldr	r1, [pc, #676]	; (8004614 <showWSLedPanel+0x344>)
 800436e:	48a5      	ldr	r0, [pc, #660]	; (8004604 <showWSLedPanel+0x334>)
 8004370:	f00e ff86 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004374:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004378:	9301      	str	r3, [sp, #4]
 800437a:	2300      	movs	r3, #0
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	2300      	movs	r3, #0
 8004380:	2278      	movs	r2, #120	; 0x78
 8004382:	2114      	movs	r1, #20
 8004384:	489f      	ldr	r0, [pc, #636]	; (8004604 <showWSLedPanel+0x334>)
 8004386:	f7fd fd11 	bl	8001dac <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 800438a:	48a3      	ldr	r0, [pc, #652]	; (8004618 <showWSLedPanel+0x348>)
 800438c:	f7fd faf4 	bl	8001978 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8004390:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	2305      	movs	r3, #5
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	2315      	movs	r3, #21
 800439c:	221e      	movs	r2, #30
 800439e:	2141      	movs	r1, #65	; 0x41
 80043a0:	20d9      	movs	r0, #217	; 0xd9
 80043a2:	f7fd fa98 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+1");
 80043a6:	499d      	ldr	r1, [pc, #628]	; (800461c <showWSLedPanel+0x34c>)
 80043a8:	4896      	ldr	r0, [pc, #600]	; (8004604 <showWSLedPanel+0x334>)
 80043aa:	f00e ff69 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80043ae:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	2300      	movs	r3, #0
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2300      	movs	r3, #0
 80043ba:	2243      	movs	r2, #67	; 0x43
 80043bc:	21df      	movs	r1, #223	; 0xdf
 80043be:	4891      	ldr	r0, [pc, #580]	; (8004604 <showWSLedPanel+0x334>)
 80043c0:	f7fd fcf4 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80043c4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	2305      	movs	r3, #5
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	2315      	movs	r3, #21
 80043d0:	221e      	movs	r2, #30
 80043d2:	2141      	movs	r1, #65	; 0x41
 80043d4:	20fc      	movs	r0, #252	; 0xfc
 80043d6:	f7fd fa7e 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "+10");
 80043da:	4991      	ldr	r1, [pc, #580]	; (8004620 <showWSLedPanel+0x350>)
 80043dc:	4889      	ldr	r0, [pc, #548]	; (8004604 <showWSLedPanel+0x334>)
 80043de:	f00e ff4f 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80043e2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	2300      	movs	r3, #0
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	2300      	movs	r3, #0
 80043ee:	2243      	movs	r2, #67	; 0x43
 80043f0:	f240 1101 	movw	r1, #257	; 0x101
 80043f4:	4883      	ldr	r0, [pc, #524]	; (8004604 <showWSLedPanel+0x334>)
 80043f6:	f7fd fcd9 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80043fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	2305      	movs	r3, #5
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	2315      	movs	r3, #21
 8004406:	221e      	movs	r2, #30
 8004408:	2141      	movs	r1, #65	; 0x41
 800440a:	f240 101f 	movw	r0, #287	; 0x11f
 800440e:	f7fd fa62 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "OK");
 8004412:	4984      	ldr	r1, [pc, #528]	; (8004624 <showWSLedPanel+0x354>)
 8004414:	487b      	ldr	r0, [pc, #492]	; (8004604 <showWSLedPanel+0x334>)
 8004416:	f00e ff33 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800441a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	2300      	movs	r3, #0
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	2300      	movs	r3, #0
 8004426:	2243      	movs	r2, #67	; 0x43
 8004428:	f44f 7192 	mov.w	r1, #292	; 0x124
 800442c:	4875      	ldr	r0, [pc, #468]	; (8004604 <showWSLedPanel+0x334>)
 800442e:	f7fd fcbd 	bl	8001dac <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	2305      	movs	r3, #5
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2315      	movs	r3, #21
 800443e:	2228      	movs	r2, #40	; 0x28
 8004440:	215f      	movs	r1, #95	; 0x5f
 8004442:	2096      	movs	r0, #150	; 0x96
 8004444:	f7fd fa47 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "MAX");
 8004448:	4977      	ldr	r1, [pc, #476]	; (8004628 <showWSLedPanel+0x358>)
 800444a:	486e      	ldr	r0, [pc, #440]	; (8004604 <showWSLedPanel+0x334>)
 800444c:	f00e ff18 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	2300      	movs	r3, #0
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	2300      	movs	r3, #0
 800445c:	2261      	movs	r2, #97	; 0x61
 800445e:	219b      	movs	r1, #155	; 0x9b
 8004460:	4868      	ldr	r0, [pc, #416]	; (8004604 <showWSLedPanel+0x334>)
 8004462:	f7fd fca3 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	2305      	movs	r3, #5
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2315      	movs	r3, #21
 8004472:	2228      	movs	r2, #40	; 0x28
 8004474:	215f      	movs	r1, #95	; 0x5f
 8004476:	20ca      	movs	r0, #202	; 0xca
 8004478:	f7fd fa2d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "MID");
 800447c:	496b      	ldr	r1, [pc, #428]	; (800462c <showWSLedPanel+0x35c>)
 800447e:	4861      	ldr	r0, [pc, #388]	; (8004604 <showWSLedPanel+0x334>)
 8004480:	f00e fefe 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	2300      	movs	r3, #0
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2300      	movs	r3, #0
 8004490:	2261      	movs	r2, #97	; 0x61
 8004492:	21d2      	movs	r1, #210	; 0xd2
 8004494:	485b      	ldr	r0, [pc, #364]	; (8004604 <showWSLedPanel+0x334>)
 8004496:	f7fd fc89 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800449a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	2305      	movs	r3, #5
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	2315      	movs	r3, #21
 80044a6:	2228      	movs	r2, #40	; 0x28
 80044a8:	215f      	movs	r1, #95	; 0x5f
 80044aa:	20fe      	movs	r0, #254	; 0xfe
 80044ac:	f7fd fa13 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "MIN");
 80044b0:	495f      	ldr	r1, [pc, #380]	; (8004630 <showWSLedPanel+0x360>)
 80044b2:	4854      	ldr	r0, [pc, #336]	; (8004604 <showWSLedPanel+0x334>)
 80044b4:	f00e fee4 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80044b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	2300      	movs	r3, #0
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	2300      	movs	r3, #0
 80044c4:	2261      	movs	r2, #97	; 0x61
 80044c6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80044ca:	484e      	ldr	r0, [pc, #312]	; (8004604 <showWSLedPanel+0x334>)
 80044cc:	f7fd fc6e 	bl	8001dac <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80044d0:	231f      	movs	r3, #31
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	2305      	movs	r3, #5
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	2315      	movs	r3, #21
 80044da:	2228      	movs	r2, #40	; 0x28
 80044dc:	217d      	movs	r1, #125	; 0x7d
 80044de:	2096      	movs	r0, #150	; 0x96
 80044e0:	f7fd f9f9 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "MAX");
 80044e4:	4950      	ldr	r1, [pc, #320]	; (8004628 <showWSLedPanel+0x358>)
 80044e6:	4847      	ldr	r0, [pc, #284]	; (8004604 <showWSLedPanel+0x334>)
 80044e8:	f00e feca 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80044ec:	231f      	movs	r3, #31
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	2300      	movs	r3, #0
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2300      	movs	r3, #0
 80044f6:	227f      	movs	r2, #127	; 0x7f
 80044f8:	219b      	movs	r1, #155	; 0x9b
 80044fa:	4842      	ldr	r0, [pc, #264]	; (8004604 <showWSLedPanel+0x334>)
 80044fc:	f7fd fc56 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004500:	231f      	movs	r3, #31
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	2305      	movs	r3, #5
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	2315      	movs	r3, #21
 800450a:	2228      	movs	r2, #40	; 0x28
 800450c:	217d      	movs	r1, #125	; 0x7d
 800450e:	20ca      	movs	r0, #202	; 0xca
 8004510:	f7fd f9e1 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "MID");
 8004514:	4945      	ldr	r1, [pc, #276]	; (800462c <showWSLedPanel+0x35c>)
 8004516:	483b      	ldr	r0, [pc, #236]	; (8004604 <showWSLedPanel+0x334>)
 8004518:	f00e feb2 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800451c:	231f      	movs	r3, #31
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	2300      	movs	r3, #0
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	2300      	movs	r3, #0
 8004526:	227f      	movs	r2, #127	; 0x7f
 8004528:	21d2      	movs	r1, #210	; 0xd2
 800452a:	4836      	ldr	r0, [pc, #216]	; (8004604 <showWSLedPanel+0x334>)
 800452c:	f7fd fc3e 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004530:	231f      	movs	r3, #31
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	2305      	movs	r3, #5
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	2315      	movs	r3, #21
 800453a:	2228      	movs	r2, #40	; 0x28
 800453c:	217d      	movs	r1, #125	; 0x7d
 800453e:	20fe      	movs	r0, #254	; 0xfe
 8004540:	f7fd f9c9 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "MIN");
 8004544:	493a      	ldr	r1, [pc, #232]	; (8004630 <showWSLedPanel+0x360>)
 8004546:	482f      	ldr	r0, [pc, #188]	; (8004604 <showWSLedPanel+0x334>)
 8004548:	f00e fe9a 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800454c:	231f      	movs	r3, #31
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	2300      	movs	r3, #0
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	227f      	movs	r2, #127	; 0x7f
 8004558:	f44f 7183 	mov.w	r1, #262	; 0x106
 800455c:	4829      	ldr	r0, [pc, #164]	; (8004604 <showWSLedPanel+0x334>)
 800455e:	f7fd fc25 	bl	8001dac <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8004562:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	2305      	movs	r3, #5
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	2315      	movs	r3, #21
 800456e:	2250      	movs	r2, #80	; 0x50
 8004570:	219c      	movs	r1, #156	; 0x9c
 8004572:	2014      	movs	r0, #20
 8004574:	f7fd f9af 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "DAILY");
 8004578:	492e      	ldr	r1, [pc, #184]	; (8004634 <showWSLedPanel+0x364>)
 800457a:	4822      	ldr	r0, [pc, #136]	; (8004604 <showWSLedPanel+0x334>)
 800457c:	f00e fe80 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8004580:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	2300      	movs	r3, #0
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	2300      	movs	r3, #0
 800458c:	229e      	movs	r2, #158	; 0x9e
 800458e:	211c      	movs	r1, #28
 8004590:	481c      	ldr	r0, [pc, #112]	; (8004604 <showWSLedPanel+0x334>)
 8004592:	f7fd fc0b 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004596:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800459a:	9301      	str	r3, [sp, #4]
 800459c:	2305      	movs	r3, #5
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	2315      	movs	r3, #21
 80045a2:	2250      	movs	r2, #80	; 0x50
 80045a4:	219c      	movs	r1, #156	; 0x9c
 80045a6:	2078      	movs	r0, #120	; 0x78
 80045a8:	f7fd f995 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "OFF");
 80045ac:	4922      	ldr	r1, [pc, #136]	; (8004638 <showWSLedPanel+0x368>)
 80045ae:	4815      	ldr	r0, [pc, #84]	; (8004604 <showWSLedPanel+0x334>)
 80045b0:	f00e fe66 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80045b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	2300      	movs	r3, #0
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	2300      	movs	r3, #0
 80045c0:	229e      	movs	r2, #158	; 0x9e
 80045c2:	2187      	movs	r1, #135	; 0x87
 80045c4:	480f      	ldr	r0, [pc, #60]	; (8004604 <showWSLedPanel+0x334>)
 80045c6:	f7fd fbf1 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80045ca:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	2305      	movs	r3, #5
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2315      	movs	r3, #21
 80045d6:	2250      	movs	r2, #80	; 0x50
 80045d8:	219c      	movs	r1, #156	; 0x9c
 80045da:	20dc      	movs	r0, #220	; 0xdc
 80045dc:	f7fd f97b 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "NIGHT");
 80045e0:	4916      	ldr	r1, [pc, #88]	; (800463c <showWSLedPanel+0x36c>)
 80045e2:	4808      	ldr	r0, [pc, #32]	; (8004604 <showWSLedPanel+0x334>)
 80045e4:	f00e fe4c 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80045e8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	2300      	movs	r3, #0
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	2300      	movs	r3, #0
 80045f4:	229e      	movs	r2, #158	; 0x9e
 80045f6:	21e9      	movs	r1, #233	; 0xe9
 80045f8:	e022      	b.n	8004640 <showWSLedPanel+0x370>
 80045fa:	bf00      	nop
 80045fc:	0802ab7c 	.word	0x0802ab7c
 8004600:	0801727c 	.word	0x0801727c
 8004604:	200002d8 	.word	0x200002d8
 8004608:	20000034 	.word	0x20000034
 800460c:	08017288 	.word	0x08017288
 8004610:	08017298 	.word	0x08017298
 8004614:	080172a0 	.word	0x080172a0
 8004618:	08028c04 	.word	0x08028c04
 800461c:	08017204 	.word	0x08017204
 8004620:	0801720c 	.word	0x0801720c
 8004624:	080172a8 	.word	0x080172a8
 8004628:	080172ac 	.word	0x080172ac
 800462c:	080172b0 	.word	0x080172b0
 8004630:	080172b4 	.word	0x080172b4
 8004634:	080172b8 	.word	0x080172b8
 8004638:	08017254 	.word	0x08017254
 800463c:	080172c0 	.word	0x080172c0
 8004640:	482b      	ldr	r0, [pc, #172]	; (80046f0 <showWSLedPanel+0x420>)
 8004642:	f7fd fbb3 	bl	8001dac <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004646:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	2305      	movs	r3, #5
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2315      	movs	r3, #21
 8004652:	2250      	movs	r2, #80	; 0x50
 8004654:	21bb      	movs	r1, #187	; 0xbb
 8004656:	2046      	movs	r0, #70	; 0x46
 8004658:	f7fd f93d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "SUNRISE");
 800465c:	4925      	ldr	r1, [pc, #148]	; (80046f4 <showWSLedPanel+0x424>)
 800465e:	4824      	ldr	r0, [pc, #144]	; (80046f0 <showWSLedPanel+0x420>)
 8004660:	f00e fe0e 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004664:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	2300      	movs	r3, #0
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	2300      	movs	r3, #0
 8004670:	22bd      	movs	r2, #189	; 0xbd
 8004672:	214e      	movs	r1, #78	; 0x4e
 8004674:	481e      	ldr	r0, [pc, #120]	; (80046f0 <showWSLedPanel+0x420>)
 8004676:	f7fd fb99 	bl	8001dac <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800467a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	2305      	movs	r3, #5
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	2315      	movs	r3, #21
 8004686:	2250      	movs	r2, #80	; 0x50
 8004688:	21bb      	movs	r1, #187	; 0xbb
 800468a:	20aa      	movs	r0, #170	; 0xaa
 800468c:	f7fd f923 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "SUNSET");
 8004690:	4919      	ldr	r1, [pc, #100]	; (80046f8 <showWSLedPanel+0x428>)
 8004692:	4817      	ldr	r0, [pc, #92]	; (80046f0 <showWSLedPanel+0x420>)
 8004694:	f00e fdf4 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004698:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	2300      	movs	r3, #0
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	2300      	movs	r3, #0
 80046a4:	22bd      	movs	r2, #189	; 0xbd
 80046a6:	21b5      	movs	r1, #181	; 0xb5
 80046a8:	4811      	ldr	r0, [pc, #68]	; (80046f0 <showWSLedPanel+0x420>)
 80046aa:	f7fd fb7f 	bl	8001dac <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80046ae:	4813      	ldr	r0, [pc, #76]	; (80046fc <showWSLedPanel+0x42c>)
 80046b0:	f7fd f962 	bl	8001978 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80046b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	2305      	movs	r3, #5
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	2314      	movs	r3, #20
 80046c0:	2264      	movs	r2, #100	; 0x64
 80046c2:	21d8      	movs	r1, #216	; 0xd8
 80046c4:	200a      	movs	r0, #10
 80046c6:	f7fd f906 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	sprintf((char*)MsgFunctions, "<=BACK");
 80046ca:	490d      	ldr	r1, [pc, #52]	; (8004700 <showWSLedPanel+0x430>)
 80046cc:	4808      	ldr	r0, [pc, #32]	; (80046f0 <showWSLedPanel+0x420>)
 80046ce:	f00e fdd7 	bl	8013280 <siprintf>
	EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80046d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80046d6:	9301      	str	r3, [sp, #4]
 80046d8:	2300      	movs	r3, #0
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	2300      	movs	r3, #0
 80046de:	22da      	movs	r2, #218	; 0xda
 80046e0:	210d      	movs	r1, #13
 80046e2:	4803      	ldr	r0, [pc, #12]	; (80046f0 <showWSLedPanel+0x420>)
 80046e4:	f7fd fb62 	bl	8001dac <EF_PutString>


}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200002d8 	.word	0x200002d8
 80046f4:	080172c8 	.word	0x080172c8
 80046f8:	080172d0 	.word	0x080172d0
 80046fc:	08028c04 	.word	0x08028c04
 8004700:	0801722c 	.word	0x0801722c

08004704 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b090      	sub	sp, #64	; 0x40
 8004708:	af02      	add	r7, sp, #8
 800470a:	4603      	mov	r3, r0
 800470c:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 800473e:	2300      	movs	r3, #0
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28
 8004742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004746:	2100      	movs	r1, #0
 8004748:	460a      	mov	r2, r1
 800474a:	801a      	strh	r2, [r3, #0]
 800474c:	460a      	mov	r2, r1
 800474e:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004750:	2300      	movs	r3, #0
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	f107 0320 	add.w	r3, r7, #32
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	f107 0318 	add.w	r3, r7, #24
 8004766:	2100      	movs	r1, #0
 8004768:	460a      	mov	r2, r1
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	460a      	mov	r2, r1
 800476e:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 8004770:	2300      	movs	r3, #0
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	f107 030c 	add.w	r3, r7, #12
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800477e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	2305      	movs	r3, #5
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	2314      	movs	r3, #20
 800478a:	2214      	movs	r2, #20
 800478c:	2132      	movs	r1, #50	; 0x32
 800478e:	203c      	movs	r0, #60	; 0x3c
 8004790:	f7fd f824 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004794:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	2305      	movs	r3, #5
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	2314      	movs	r3, #20
 80047a0:	2214      	movs	r2, #20
 80047a2:	2132      	movs	r1, #50	; 0x32
 80047a4:	205a      	movs	r0, #90	; 0x5a
 80047a6:	f7fd f819 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	2305      	movs	r3, #5
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2314      	movs	r3, #20
 80047b6:	2214      	movs	r2, #20
 80047b8:	2132      	movs	r1, #50	; 0x32
 80047ba:	2078      	movs	r0, #120	; 0x78
 80047bc:	f7fd f80e 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	2305      	movs	r3, #5
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	2314      	movs	r3, #20
 80047cc:	2214      	movs	r2, #20
 80047ce:	2132      	movs	r1, #50	; 0x32
 80047d0:	2096      	movs	r0, #150	; 0x96
 80047d2:	f7fd f803 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047da:	9301      	str	r3, [sp, #4]
 80047dc:	2305      	movs	r3, #5
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	2314      	movs	r3, #20
 80047e2:	2214      	movs	r2, #20
 80047e4:	2132      	movs	r1, #50	; 0x32
 80047e6:	20b4      	movs	r0, #180	; 0xb4
 80047e8:	f7fc fff8 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80047ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	2305      	movs	r3, #5
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	2314      	movs	r3, #20
 80047f8:	2214      	movs	r2, #20
 80047fa:	2132      	movs	r1, #50	; 0x32
 80047fc:	20d2      	movs	r0, #210	; 0xd2
 80047fe:	f7fc ffed 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004802:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	2305      	movs	r3, #5
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	2314      	movs	r3, #20
 800480e:	2214      	movs	r2, #20
 8004810:	2132      	movs	r1, #50	; 0x32
 8004812:	20f0      	movs	r0, #240	; 0xf0
 8004814:	f7fc ffe2 	bl	80017dc <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fef8 	bl	8005610 <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 ff61 	bl	80056ea <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 8004828:	48c5      	ldr	r0, [pc, #788]	; (8004b40 <drawschedulePanel+0x43c>)
 800482a:	f7fd f8a5 	bl	8001978 <EF_SetFont>
	  sprintf((char*)MsgFunctions, "PN WT ŚR CZ PT SB ND");
 800482e:	49c5      	ldr	r1, [pc, #788]	; (8004b44 <drawschedulePanel+0x440>)
 8004830:	48c5      	ldr	r0, [pc, #788]	; (8004b48 <drawschedulePanel+0x444>)
 8004832:	f00e fd25 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004836:	f24c 6318 	movw	r3, #50712	; 0xc618
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	2301      	movs	r3, #1
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2300      	movs	r3, #0
 8004842:	224b      	movs	r2, #75	; 0x4b
 8004844:	213c      	movs	r1, #60	; 0x3c
 8004846:	48c0      	ldr	r0, [pc, #768]	; (8004b48 <drawschedulePanel+0x444>)
 8004848:	f7fd fab0 	bl	8001dac <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800484c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	2305      	movs	r3, #5
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	2314      	movs	r3, #20
 8004858:	2214      	movs	r2, #20
 800485a:	21aa      	movs	r1, #170	; 0xaa
 800485c:	2015      	movs	r0, #21
 800485e:	f7fc ffbd 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004862:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	2305      	movs	r3, #5
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2314      	movs	r3, #20
 800486e:	2214      	movs	r2, #20
 8004870:	21aa      	movs	r1, #170	; 0xaa
 8004872:	2035      	movs	r0, #53	; 0x35
 8004874:	f7fc ffb2 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004878:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	2305      	movs	r3, #5
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	2314      	movs	r3, #20
 8004884:	2214      	movs	r2, #20
 8004886:	21aa      	movs	r1, #170	; 0xaa
 8004888:	2055      	movs	r0, #85	; 0x55
 800488a:	f7fc ffa7 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800488e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	2305      	movs	r3, #5
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	2314      	movs	r3, #20
 800489a:	2214      	movs	r2, #20
 800489c:	21aa      	movs	r1, #170	; 0xaa
 800489e:	2075      	movs	r0, #117	; 0x75
 80048a0:	f7fc ff9c 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	2305      	movs	r3, #5
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	2314      	movs	r3, #20
 80048b0:	2214      	movs	r2, #20
 80048b2:	21aa      	movs	r1, #170	; 0xaa
 80048b4:	2095      	movs	r0, #149	; 0x95
 80048b6:	f7fc ff91 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	2305      	movs	r3, #5
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	2314      	movs	r3, #20
 80048c6:	2214      	movs	r2, #20
 80048c8:	21aa      	movs	r1, #170	; 0xaa
 80048ca:	20b5      	movs	r0, #181	; 0xb5
 80048cc:	f7fc ff86 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	2305      	movs	r3, #5
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	2314      	movs	r3, #20
 80048dc:	2214      	movs	r2, #20
 80048de:	21aa      	movs	r1, #170	; 0xaa
 80048e0:	20d5      	movs	r0, #213	; 0xd5
 80048e2:	f7fc ff7b 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	2305      	movs	r3, #5
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	2314      	movs	r3, #20
 80048f2:	2214      	movs	r2, #20
 80048f4:	21aa      	movs	r1, #170	; 0xaa
 80048f6:	20f5      	movs	r0, #245	; 0xf5
 80048f8:	f7fc ff70 	bl	80017dc <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80048fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	2305      	movs	r3, #5
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	2314      	movs	r3, #20
 8004908:	2214      	movs	r2, #20
 800490a:	21aa      	movs	r1, #170	; 0xaa
 800490c:	f240 1015 	movw	r0, #277	; 0x115
 8004910:	f7fc ff64 	bl	80017dc <GFX_DrawRoundRectangle>

	  sprintf((char*)MsgFunctions, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004914:	498d      	ldr	r1, [pc, #564]	; (8004b4c <drawschedulePanel+0x448>)
 8004916:	488c      	ldr	r0, [pc, #560]	; (8004b48 <drawschedulePanel+0x444>)
 8004918:	f00e fcb2 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800491c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	2301      	movs	r3, #1
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2300      	movs	r3, #0
 8004928:	22c3      	movs	r2, #195	; 0xc3
 800492a:	2115      	movs	r1, #21
 800492c:	4886      	ldr	r0, [pc, #536]	; (8004b48 <drawschedulePanel+0x444>)
 800492e:	f7fd fa3d 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004932:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	2305      	movs	r3, #5
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2314      	movs	r3, #20
 800493e:	2222      	movs	r2, #34	; 0x22
 8004940:	2165      	movs	r1, #101	; 0x65
 8004942:	20bb      	movs	r0, #187	; 0xbb
 8004944:	f7fc ffc7 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "+1H");
 8004948:	4981      	ldr	r1, [pc, #516]	; (8004b50 <drawschedulePanel+0x44c>)
 800494a:	487f      	ldr	r0, [pc, #508]	; (8004b48 <drawschedulePanel+0x444>)
 800494c:	f00e fc98 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004950:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	2300      	movs	r3, #0
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	2300      	movs	r3, #0
 800495c:	2268      	movs	r2, #104	; 0x68
 800495e:	21c1      	movs	r1, #193	; 0xc1
 8004960:	4879      	ldr	r0, [pc, #484]	; (8004b48 <drawschedulePanel+0x444>)
 8004962:	f7fd fa23 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004966:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	2305      	movs	r3, #5
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2314      	movs	r3, #20
 8004972:	2222      	movs	r2, #34	; 0x22
 8004974:	2165      	movs	r1, #101	; 0x65
 8004976:	20e9      	movs	r0, #233	; 0xe9
 8004978:	f7fc ffad 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "+1M");
 800497c:	4975      	ldr	r1, [pc, #468]	; (8004b54 <drawschedulePanel+0x450>)
 800497e:	4872      	ldr	r0, [pc, #456]	; (8004b48 <drawschedulePanel+0x444>)
 8004980:	f00e fc7e 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004984:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	2300      	movs	r3, #0
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	2300      	movs	r3, #0
 8004990:	2268      	movs	r2, #104	; 0x68
 8004992:	21ec      	movs	r1, #236	; 0xec
 8004994:	486c      	ldr	r0, [pc, #432]	; (8004b48 <drawschedulePanel+0x444>)
 8004996:	f7fd fa09 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800499a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	2305      	movs	r3, #5
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2314      	movs	r3, #20
 80049a6:	2222      	movs	r2, #34	; 0x22
 80049a8:	2165      	movs	r1, #101	; 0x65
 80049aa:	f240 1017 	movw	r0, #279	; 0x117
 80049ae:	f7fc ff92 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "+10M");
 80049b2:	4969      	ldr	r1, [pc, #420]	; (8004b58 <drawschedulePanel+0x454>)
 80049b4:	4864      	ldr	r0, [pc, #400]	; (8004b48 <drawschedulePanel+0x444>)
 80049b6:	f00e fc63 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	2300      	movs	r3, #0
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2300      	movs	r3, #0
 80049c6:	2268      	movs	r2, #104	; 0x68
 80049c8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80049cc:	485e      	ldr	r0, [pc, #376]	; (8004b48 <drawschedulePanel+0x444>)
 80049ce:	f7fd f9ed 	bl	8001dac <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049d2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	2305      	movs	r3, #5
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	2314      	movs	r3, #20
 80049de:	2222      	movs	r2, #34	; 0x22
 80049e0:	2188      	movs	r1, #136	; 0x88
 80049e2:	20bb      	movs	r0, #187	; 0xbb
 80049e4:	f7fc ff77 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "+1H");
 80049e8:	4959      	ldr	r1, [pc, #356]	; (8004b50 <drawschedulePanel+0x44c>)
 80049ea:	4857      	ldr	r0, [pc, #348]	; (8004b48 <drawschedulePanel+0x444>)
 80049ec:	f00e fc48 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80049f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80049f4:	9301      	str	r3, [sp, #4]
 80049f6:	2300      	movs	r3, #0
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	2300      	movs	r3, #0
 80049fc:	228b      	movs	r2, #139	; 0x8b
 80049fe:	21c1      	movs	r1, #193	; 0xc1
 8004a00:	4851      	ldr	r0, [pc, #324]	; (8004b48 <drawschedulePanel+0x444>)
 8004a02:	f7fd f9d3 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a06:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	2305      	movs	r3, #5
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	2314      	movs	r3, #20
 8004a12:	2222      	movs	r2, #34	; 0x22
 8004a14:	2188      	movs	r1, #136	; 0x88
 8004a16:	20e9      	movs	r0, #233	; 0xe9
 8004a18:	f7fc ff5d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "+1M");
 8004a1c:	494d      	ldr	r1, [pc, #308]	; (8004b54 <drawschedulePanel+0x450>)
 8004a1e:	484a      	ldr	r0, [pc, #296]	; (8004b48 <drawschedulePanel+0x444>)
 8004a20:	f00e fc2e 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a24:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	228b      	movs	r2, #139	; 0x8b
 8004a32:	21ec      	movs	r1, #236	; 0xec
 8004a34:	4844      	ldr	r0, [pc, #272]	; (8004b48 <drawschedulePanel+0x444>)
 8004a36:	f7fd f9b9 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a3a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	2305      	movs	r3, #5
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	2314      	movs	r3, #20
 8004a46:	2222      	movs	r2, #34	; 0x22
 8004a48:	2188      	movs	r1, #136	; 0x88
 8004a4a:	f240 1017 	movw	r0, #279	; 0x117
 8004a4e:	f7fc ff42 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "+10M");
 8004a52:	4941      	ldr	r1, [pc, #260]	; (8004b58 <drawschedulePanel+0x454>)
 8004a54:	483c      	ldr	r0, [pc, #240]	; (8004b48 <drawschedulePanel+0x444>)
 8004a56:	f00e fc13 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004a5a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	2300      	movs	r3, #0
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	2300      	movs	r3, #0
 8004a66:	228b      	movs	r2, #139	; 0x8b
 8004a68:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004a6c:	4836      	ldr	r0, [pc, #216]	; (8004b48 <drawschedulePanel+0x444>)
 8004a6e:	f7fd f99d 	bl	8001dac <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004a72:	483a      	ldr	r0, [pc, #232]	; (8004b5c <drawschedulePanel+0x458>)
 8004a74:	f7fc ff80 	bl	8001978 <EF_SetFont>
	  if(NrOfschedule == 1)
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	f040 80d9 	bne.w	8004c32 <drawschedulePanel+0x52e>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 8004a80:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004a84:	4619      	mov	r1, r3
 8004a86:	2001      	movs	r0, #1
 8004a88:	f7fe fb9b 	bl	80031c2 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 8004a8c:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8004a90:	4619      	mov	r1, r3
 8004a92:	2001      	movs	r0, #1
 8004a94:	f7fe fbb9 	bl	800320a <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 8004a98:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	f7fe fbd7 	bl	8003252 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 8004aa4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	2001      	movs	r0, #1
 8004aac:	f7fe fbf5 	bl	800329a <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8004ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f7fe fa32 	bl	8002f20 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8004abc:	f107 031c 	add.w	r3, r7, #28
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	2001      	movs	r0, #1
 8004ac4:	f7fe faa8 	bl	8003018 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 8004ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004acc:	2b17      	cmp	r3, #23
 8004ace:	d902      	bls.n	8004ad6 <drawschedulePanel+0x3d2>
 8004ad0:	2317      	movs	r3, #23
 8004ad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 8004ad6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004ada:	2b3b      	cmp	r3, #59	; 0x3b
 8004adc:	d902      	bls.n	8004ae4 <drawschedulePanel+0x3e0>
 8004ade:	233b      	movs	r3, #59	; 0x3b
 8004ae0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 8004ae4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ae8:	2b17      	cmp	r3, #23
 8004aea:	d902      	bls.n	8004af2 <drawschedulePanel+0x3ee>
 8004aec:	2317      	movs	r3, #23
 8004aee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 8004af2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004af6:	2b3b      	cmp	r3, #59	; 0x3b
 8004af8:	d902      	bls.n	8004b00 <drawschedulePanel+0x3fc>
 8004afa:	233b      	movs	r3, #59	; 0x3b
 8004afc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)MsgFunctions, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b04:	2b09      	cmp	r3, #9
 8004b06:	d80d      	bhi.n	8004b24 <drawschedulePanel+0x420>
 8004b08:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b0c:	2b09      	cmp	r3, #9
 8004b0e:	d809      	bhi.n	8004b24 <drawschedulePanel+0x420>
 8004b10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b14:	461a      	mov	r2, r3
 8004b16:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b1a:	4911      	ldr	r1, [pc, #68]	; (8004b60 <drawschedulePanel+0x45c>)
 8004b1c:	480a      	ldr	r0, [pc, #40]	; (8004b48 <drawschedulePanel+0x444>)
 8004b1e:	f00e fbaf 	bl	8013280 <siprintf>
 8004b22:	e038      	b.n	8004b96 <drawschedulePanel+0x492>
		  else if(hourOnschedule1 < 10) sprintf((char*)MsgFunctions, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004b24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b28:	2b09      	cmp	r3, #9
 8004b2a:	d81d      	bhi.n	8004b68 <drawschedulePanel+0x464>
 8004b2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b30:	461a      	mov	r2, r3
 8004b32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b36:	490b      	ldr	r1, [pc, #44]	; (8004b64 <drawschedulePanel+0x460>)
 8004b38:	4803      	ldr	r0, [pc, #12]	; (8004b48 <drawschedulePanel+0x444>)
 8004b3a:	f00e fba1 	bl	8013280 <siprintf>
 8004b3e:	e02a      	b.n	8004b96 <drawschedulePanel+0x492>
 8004b40:	08028c04 	.word	0x08028c04
 8004b44:	080172d8 	.word	0x080172d8
 8004b48:	200002d8 	.word	0x200002d8
 8004b4c:	080172f0 	.word	0x080172f0
 8004b50:	08017314 	.word	0x08017314
 8004b54:	08017318 	.word	0x08017318
 8004b58:	0801731c 	.word	0x0801731c
 8004b5c:	0802ab7c 	.word	0x0802ab7c
 8004b60:	08017324 	.word	0x08017324
 8004b64:	08017334 	.word	0x08017334
		  else if (minuteOnschedule1 < 10) sprintf((char*)MsgFunctions, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004b68:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b6c:	2b09      	cmp	r3, #9
 8004b6e:	d809      	bhi.n	8004b84 <drawschedulePanel+0x480>
 8004b70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b74:	461a      	mov	r2, r3
 8004b76:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b7a:	4994      	ldr	r1, [pc, #592]	; (8004dcc <drawschedulePanel+0x6c8>)
 8004b7c:	4894      	ldr	r0, [pc, #592]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004b7e:	f00e fb7f 	bl	8013280 <siprintf>
 8004b82:	e008      	b.n	8004b96 <drawschedulePanel+0x492>
		  else sprintf((char*)MsgFunctions, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004b84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004b8e:	4991      	ldr	r1, [pc, #580]	; (8004dd4 <drawschedulePanel+0x6d0>)
 8004b90:	488f      	ldr	r0, [pc, #572]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004b92:	f00e fb75 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004b96:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	2264      	movs	r2, #100	; 0x64
 8004ba4:	210a      	movs	r1, #10
 8004ba6:	488a      	ldr	r0, [pc, #552]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004ba8:	f7fd f900 	bl	8001dac <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)MsgFunctions, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004bac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bb0:	2b09      	cmp	r3, #9
 8004bb2:	d80d      	bhi.n	8004bd0 <drawschedulePanel+0x4cc>
 8004bb4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bb8:	2b09      	cmp	r3, #9
 8004bba:	d809      	bhi.n	8004bd0 <drawschedulePanel+0x4cc>
 8004bbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bc6:	4984      	ldr	r1, [pc, #528]	; (8004dd8 <drawschedulePanel+0x6d4>)
 8004bc8:	4881      	ldr	r0, [pc, #516]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004bca:	f00e fb59 	bl	8013280 <siprintf>
 8004bce:	e024      	b.n	8004c1a <drawschedulePanel+0x516>
		  else if(hourOffschedule1 < 10) sprintf((char*)MsgFunctions, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 8004bd0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bd4:	2b09      	cmp	r3, #9
 8004bd6:	d809      	bhi.n	8004bec <drawschedulePanel+0x4e8>
 8004bd8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004be2:	497e      	ldr	r1, [pc, #504]	; (8004ddc <drawschedulePanel+0x6d8>)
 8004be4:	487a      	ldr	r0, [pc, #488]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004be6:	f00e fb4b 	bl	8013280 <siprintf>
 8004bea:	e016      	b.n	8004c1a <drawschedulePanel+0x516>
		  else if (minuteOffschedule1 < 10) sprintf((char*)MsgFunctions, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004bec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bf0:	2b09      	cmp	r3, #9
 8004bf2:	d809      	bhi.n	8004c08 <drawschedulePanel+0x504>
 8004bf4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004bfe:	4978      	ldr	r1, [pc, #480]	; (8004de0 <drawschedulePanel+0x6dc>)
 8004c00:	4873      	ldr	r0, [pc, #460]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004c02:	f00e fb3d 	bl	8013280 <siprintf>
 8004c06:	e008      	b.n	8004c1a <drawschedulePanel+0x516>
		  else sprintf((char*)MsgFunctions, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 8004c08:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004c12:	4974      	ldr	r1, [pc, #464]	; (8004de4 <drawschedulePanel+0x6e0>)
 8004c14:	486e      	ldr	r0, [pc, #440]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004c16:	f00e fb33 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004c1a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	2301      	movs	r3, #1
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	2300      	movs	r3, #0
 8004c26:	2287      	movs	r2, #135	; 0x87
 8004c28:	210a      	movs	r1, #10
 8004c2a:	4869      	ldr	r0, [pc, #420]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004c2c:	f7fd f8be 	bl	8001dac <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)MsgFunctions, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)MsgFunctions, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)MsgFunctions, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(MsgFunctions, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004c30:	e0c7      	b.n	8004dc2 <drawschedulePanel+0x6be>
	  else if(NrOfschedule == 2)
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	f040 80c4 	bne.w	8004dc2 <drawschedulePanel+0x6be>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 8004c3a:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004c3e:	4619      	mov	r1, r3
 8004c40:	2002      	movs	r0, #2
 8004c42:	f7fe fabe 	bl	80031c2 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 8004c46:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	2002      	movs	r0, #2
 8004c4e:	f7fe fadc 	bl	800320a <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004c52:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8004c56:	4619      	mov	r1, r3
 8004c58:	2002      	movs	r0, #2
 8004c5a:	f7fe fafa 	bl	8003252 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 8004c5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c62:	4619      	mov	r1, r3
 8004c64:	2002      	movs	r0, #2
 8004c66:	f7fe fb18 	bl	800329a <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 8004c6a:	f107 0314 	add.w	r3, r7, #20
 8004c6e:	4619      	mov	r1, r3
 8004c70:	2002      	movs	r0, #2
 8004c72:	f7fe f955 	bl	8002f20 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 8004c76:	f107 0308 	add.w	r3, r7, #8
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	2002      	movs	r0, #2
 8004c7e:	f7fe f9cb 	bl	8003018 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 8004c82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c86:	2b17      	cmp	r3, #23
 8004c88:	d902      	bls.n	8004c90 <drawschedulePanel+0x58c>
 8004c8a:	2317      	movs	r3, #23
 8004c8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 8004c90:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004c94:	2b3b      	cmp	r3, #59	; 0x3b
 8004c96:	d902      	bls.n	8004c9e <drawschedulePanel+0x59a>
 8004c98:	233b      	movs	r3, #59	; 0x3b
 8004c9a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 8004c9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004ca2:	2b17      	cmp	r3, #23
 8004ca4:	d902      	bls.n	8004cac <drawschedulePanel+0x5a8>
 8004ca6:	2317      	movs	r3, #23
 8004ca8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 8004cac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004cb0:	2b3b      	cmp	r3, #59	; 0x3b
 8004cb2:	d902      	bls.n	8004cba <drawschedulePanel+0x5b6>
 8004cb4:	233b      	movs	r3, #59	; 0x3b
 8004cb6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)MsgFunctions, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 8004cba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cbe:	2b09      	cmp	r3, #9
 8004cc0:	d80d      	bhi.n	8004cde <drawschedulePanel+0x5da>
 8004cc2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cc6:	2b09      	cmp	r3, #9
 8004cc8:	d809      	bhi.n	8004cde <drawschedulePanel+0x5da>
 8004cca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cd4:	4944      	ldr	r1, [pc, #272]	; (8004de8 <drawschedulePanel+0x6e4>)
 8004cd6:	483e      	ldr	r0, [pc, #248]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004cd8:	f00e fad2 	bl	8013280 <siprintf>
 8004cdc:	e024      	b.n	8004d28 <drawschedulePanel+0x624>
		  else if(hourOnschedule2 < 10) sprintf((char*)MsgFunctions, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 8004cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ce2:	2b09      	cmp	r3, #9
 8004ce4:	d809      	bhi.n	8004cfa <drawschedulePanel+0x5f6>
 8004ce6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cea:	461a      	mov	r2, r3
 8004cec:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cf0:	493e      	ldr	r1, [pc, #248]	; (8004dec <drawschedulePanel+0x6e8>)
 8004cf2:	4837      	ldr	r0, [pc, #220]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004cf4:	f00e fac4 	bl	8013280 <siprintf>
 8004cf8:	e016      	b.n	8004d28 <drawschedulePanel+0x624>
		  else if (minuteOnschedule2 < 10) sprintf((char*)MsgFunctions, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 8004cfa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004cfe:	2b09      	cmp	r3, #9
 8004d00:	d809      	bhi.n	8004d16 <drawschedulePanel+0x612>
 8004d02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d06:	461a      	mov	r2, r3
 8004d08:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d0c:	4938      	ldr	r1, [pc, #224]	; (8004df0 <drawschedulePanel+0x6ec>)
 8004d0e:	4830      	ldr	r0, [pc, #192]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004d10:	f00e fab6 	bl	8013280 <siprintf>
 8004d14:	e008      	b.n	8004d28 <drawschedulePanel+0x624>
		  else sprintf((char*)MsgFunctions, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004d16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004d20:	4934      	ldr	r1, [pc, #208]	; (8004df4 <drawschedulePanel+0x6f0>)
 8004d22:	482b      	ldr	r0, [pc, #172]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004d24:	f00e faac 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004d28:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	2301      	movs	r3, #1
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	2300      	movs	r3, #0
 8004d34:	2264      	movs	r2, #100	; 0x64
 8004d36:	210a      	movs	r1, #10
 8004d38:	4825      	ldr	r0, [pc, #148]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004d3a:	f7fd f837 	bl	8001dac <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)MsgFunctions, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 8004d3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d42:	2b09      	cmp	r3, #9
 8004d44:	d80d      	bhi.n	8004d62 <drawschedulePanel+0x65e>
 8004d46:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d4a:	2b09      	cmp	r3, #9
 8004d4c:	d809      	bhi.n	8004d62 <drawschedulePanel+0x65e>
 8004d4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d52:	461a      	mov	r2, r3
 8004d54:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d58:	4927      	ldr	r1, [pc, #156]	; (8004df8 <drawschedulePanel+0x6f4>)
 8004d5a:	481d      	ldr	r0, [pc, #116]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004d5c:	f00e fa90 	bl	8013280 <siprintf>
 8004d60:	e024      	b.n	8004dac <drawschedulePanel+0x6a8>
		  else if(hourOffschedule2 < 10) sprintf((char*)MsgFunctions, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004d62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d66:	2b09      	cmp	r3, #9
 8004d68:	d809      	bhi.n	8004d7e <drawschedulePanel+0x67a>
 8004d6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d74:	4921      	ldr	r1, [pc, #132]	; (8004dfc <drawschedulePanel+0x6f8>)
 8004d76:	4816      	ldr	r0, [pc, #88]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004d78:	f00e fa82 	bl	8013280 <siprintf>
 8004d7c:	e016      	b.n	8004dac <drawschedulePanel+0x6a8>
		  else if (minuteOffschedule2 < 10) sprintf((char*)MsgFunctions, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 8004d7e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d82:	2b09      	cmp	r3, #9
 8004d84:	d809      	bhi.n	8004d9a <drawschedulePanel+0x696>
 8004d86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d90:	491b      	ldr	r1, [pc, #108]	; (8004e00 <drawschedulePanel+0x6fc>)
 8004d92:	480f      	ldr	r0, [pc, #60]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004d94:	f00e fa74 	bl	8013280 <siprintf>
 8004d98:	e008      	b.n	8004dac <drawschedulePanel+0x6a8>
		  else sprintf((char*)MsgFunctions, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 8004d9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004da4:	4917      	ldr	r1, [pc, #92]	; (8004e04 <drawschedulePanel+0x700>)
 8004da6:	480a      	ldr	r0, [pc, #40]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004da8:	f00e fa6a 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004dac:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	2301      	movs	r3, #1
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	2300      	movs	r3, #0
 8004db8:	2287      	movs	r2, #135	; 0x87
 8004dba:	210c      	movs	r1, #12
 8004dbc:	4804      	ldr	r0, [pc, #16]	; (8004dd0 <drawschedulePanel+0x6cc>)
 8004dbe:	f7fc fff5 	bl	8001dac <EF_PutString>
}
 8004dc2:	bf00      	nop
 8004dc4:	3738      	adds	r7, #56	; 0x38
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	08017344 	.word	0x08017344
 8004dd0:	200002d8 	.word	0x200002d8
 8004dd4:	08017354 	.word	0x08017354
 8004dd8:	08017364 	.word	0x08017364
 8004ddc:	08017374 	.word	0x08017374
 8004de0:	08017384 	.word	0x08017384
 8004de4:	08017394 	.word	0x08017394
 8004de8:	080173a4 	.word	0x080173a4
 8004dec:	080173b4 	.word	0x080173b4
 8004df0:	080173c4 	.word	0x080173c4
 8004df4:	080173d4 	.word	0x080173d4
 8004df8:	080173e4 	.word	0x080173e4
 8004dfc:	080173f4 	.word	0x080173f4
 8004e00:	08017404 	.word	0x08017404
 8004e04:	08017414 	.word	0x08017414

08004e08 <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004e0e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004e12:	f7fd f9b5 	bl	8002180 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004e16:	483f      	ldr	r0, [pc, #252]	; (8004f14 <showSchedule1Panel+0x10c>)
 8004e18:	f7fc fdae 	bl	8001978 <EF_SetFont>

	  // Display Header
	  sprintf((char*)MsgFunctions, "HARMONOGRAM 1");
 8004e1c:	493e      	ldr	r1, [pc, #248]	; (8004f18 <showSchedule1Panel+0x110>)
 8004e1e:	483f      	ldr	r0, [pc, #252]	; (8004f1c <showSchedule1Panel+0x114>)
 8004e20:	f00e fa2e 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004e24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e32:	220a      	movs	r2, #10
 8004e34:	212a      	movs	r1, #42	; 0x2a
 8004e36:	4839      	ldr	r0, [pc, #228]	; (8004f1c <showSchedule1Panel+0x114>)
 8004e38:	f7fc ffb8 	bl	8001dac <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004e3c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	2329      	movs	r3, #41	; 0x29
 8004e44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e48:	2129      	movs	r1, #41	; 0x29
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f7fc fae4 	bl	8001418 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004e50:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	232b      	movs	r3, #43	; 0x2b
 8004e58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e5c:	212b      	movs	r1, #43	; 0x2b
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f7fc fada 	bl	8001418 <GFX_DrawLine>

	  drawschedulePanel(1);
 8004e64:	2001      	movs	r0, #1
 8004e66:	f7ff fc4d 	bl	8004704 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004e6a:	482d      	ldr	r0, [pc, #180]	; (8004f20 <showSchedule1Panel+0x118>)
 8004e6c:	f7fc fd84 	bl	8001978 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004e70:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	2305      	movs	r3, #5
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	2314      	movs	r3, #20
 8004e7c:	225f      	movs	r2, #95	; 0x5f
 8004e7e:	21d8      	movs	r1, #216	; 0xd8
 8004e80:	20dc      	movs	r0, #220	; 0xdc
 8004e82:	f7fc fd28 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "HARM. 2=>");
 8004e86:	4927      	ldr	r1, [pc, #156]	; (8004f24 <showSchedule1Panel+0x11c>)
 8004e88:	4824      	ldr	r0, [pc, #144]	; (8004f1c <showSchedule1Panel+0x114>)
 8004e8a:	f00e f9f9 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004e8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	2300      	movs	r3, #0
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	22da      	movs	r2, #218	; 0xda
 8004e9c:	21e6      	movs	r1, #230	; 0xe6
 8004e9e:	481f      	ldr	r0, [pc, #124]	; (8004f1c <showSchedule1Panel+0x114>)
 8004ea0:	f7fc ff84 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004ea4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	2305      	movs	r3, #5
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2314      	movs	r3, #20
 8004eb0:	225a      	movs	r2, #90	; 0x5a
 8004eb2:	21d8      	movs	r1, #216	; 0xd8
 8004eb4:	2078      	movs	r0, #120	; 0x78
 8004eb6:	f7fc fd0e 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, " >POTW<");
 8004eba:	491b      	ldr	r1, [pc, #108]	; (8004f28 <showSchedule1Panel+0x120>)
 8004ebc:	4817      	ldr	r0, [pc, #92]	; (8004f1c <showSchedule1Panel+0x114>)
 8004ebe:	f00e f9df 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004ec2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	22da      	movs	r2, #218	; 0xda
 8004ed0:	217e      	movs	r1, #126	; 0x7e
 8004ed2:	4812      	ldr	r0, [pc, #72]	; (8004f1c <showSchedule1Panel+0x114>)
 8004ed4:	f7fc ff6a 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ed8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	2305      	movs	r3, #5
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	2314      	movs	r3, #20
 8004ee4:	2264      	movs	r2, #100	; 0x64
 8004ee6:	21d8      	movs	r1, #216	; 0xd8
 8004ee8:	200a      	movs	r0, #10
 8004eea:	f7fc fcf4 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "<= CLOCK");
 8004eee:	490f      	ldr	r1, [pc, #60]	; (8004f2c <showSchedule1Panel+0x124>)
 8004ef0:	480a      	ldr	r0, [pc, #40]	; (8004f1c <showSchedule1Panel+0x114>)
 8004ef2:	f00e f9c5 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004ef6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	2300      	movs	r3, #0
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	2300      	movs	r3, #0
 8004f02:	22da      	movs	r2, #218	; 0xda
 8004f04:	210d      	movs	r1, #13
 8004f06:	4805      	ldr	r0, [pc, #20]	; (8004f1c <showSchedule1Panel+0x114>)
 8004f08:	f7fc ff50 	bl	8001dac <EF_PutString>
}
 8004f0c:	bf00      	nop
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	0802ab7c 	.word	0x0802ab7c
 8004f18:	08017424 	.word	0x08017424
 8004f1c:	200002d8 	.word	0x200002d8
 8004f20:	08028c04 	.word	0x08028c04
 8004f24:	08017434 	.word	0x08017434
 8004f28:	08017440 	.word	0x08017440
 8004f2c:	08017448 	.word	0x08017448

08004f30 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004f36:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004f3a:	f7fd f921 	bl	8002180 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004f3e:	4832      	ldr	r0, [pc, #200]	; (8005008 <showSchedule2Panel+0xd8>)
 8004f40:	f7fc fd1a 	bl	8001978 <EF_SetFont>
	  // Display Header
	  sprintf((char*)MsgFunctions, "HARMONOGRAM 2");
 8004f44:	4931      	ldr	r1, [pc, #196]	; (800500c <showSchedule2Panel+0xdc>)
 8004f46:	4832      	ldr	r0, [pc, #200]	; (8005010 <showSchedule2Panel+0xe0>)
 8004f48:	f00e f99a 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004f4c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	2300      	movs	r3, #0
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f5a:	220a      	movs	r2, #10
 8004f5c:	212a      	movs	r1, #42	; 0x2a
 8004f5e:	482c      	ldr	r0, [pc, #176]	; (8005010 <showSchedule2Panel+0xe0>)
 8004f60:	f7fc ff24 	bl	8001dac <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004f64:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	2329      	movs	r3, #41	; 0x29
 8004f6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f70:	2129      	movs	r1, #41	; 0x29
 8004f72:	2000      	movs	r0, #0
 8004f74:	f7fc fa50 	bl	8001418 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004f78:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	232b      	movs	r3, #43	; 0x2b
 8004f80:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f84:	212b      	movs	r1, #43	; 0x2b
 8004f86:	2000      	movs	r0, #0
 8004f88:	f7fc fa46 	bl	8001418 <GFX_DrawLine>

	  drawschedulePanel(2);
 8004f8c:	2002      	movs	r0, #2
 8004f8e:	f7ff fbb9 	bl	8004704 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004f92:	4820      	ldr	r0, [pc, #128]	; (8005014 <showSchedule2Panel+0xe4>)
 8004f94:	f7fc fcf0 	bl	8001978 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004f98:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	2305      	movs	r3, #5
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	2314      	movs	r3, #20
 8004fa4:	225a      	movs	r2, #90	; 0x5a
 8004fa6:	21d8      	movs	r1, #216	; 0xd8
 8004fa8:	2078      	movs	r0, #120	; 0x78
 8004faa:	f7fc fc94 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, " >POTW<");
 8004fae:	491a      	ldr	r1, [pc, #104]	; (8005018 <showSchedule2Panel+0xe8>)
 8004fb0:	4817      	ldr	r0, [pc, #92]	; (8005010 <showSchedule2Panel+0xe0>)
 8004fb2:	f00e f965 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004fb6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	22da      	movs	r2, #218	; 0xda
 8004fc4:	217e      	movs	r1, #126	; 0x7e
 8004fc6:	4812      	ldr	r0, [pc, #72]	; (8005010 <showSchedule2Panel+0xe0>)
 8004fc8:	f7fc fef0 	bl	8001dac <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004fcc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fd0:	9301      	str	r3, [sp, #4]
 8004fd2:	2305      	movs	r3, #5
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	2314      	movs	r3, #20
 8004fd8:	2264      	movs	r2, #100	; 0x64
 8004fda:	21d8      	movs	r1, #216	; 0xd8
 8004fdc:	200a      	movs	r0, #10
 8004fde:	f7fc fc7a 	bl	80018d6 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)MsgFunctions, "<= CLOCK");
 8004fe2:	490e      	ldr	r1, [pc, #56]	; (800501c <showSchedule2Panel+0xec>)
 8004fe4:	480a      	ldr	r0, [pc, #40]	; (8005010 <showSchedule2Panel+0xe0>)
 8004fe6:	f00e f94b 	bl	8013280 <siprintf>
	  EF_PutString(MsgFunctions, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004fea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	22da      	movs	r2, #218	; 0xda
 8004ff8:	210d      	movs	r1, #13
 8004ffa:	4805      	ldr	r0, [pc, #20]	; (8005010 <showSchedule2Panel+0xe0>)
 8004ffc:	f7fc fed6 	bl	8001dac <EF_PutString>
}
 8005000:	bf00      	nop
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	0802ab7c 	.word	0x0802ab7c
 800500c:	08017454 	.word	0x08017454
 8005010:	200002d8 	.word	0x200002d8
 8005014:	08028c04 	.word	0x08028c04
 8005018:	08017440 	.word	0x08017440
 800501c:	08017448 	.word	0x08017448

08005020 <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8005026:	f7fd fd37 	bl	8002a98 <DS3231_GetHour>
 800502a:	4603      	mov	r3, r0
 800502c:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 800502e:	f7fd fd3f 	bl	8002ab0 <DS3231_GetMinute>
 8005032:	4603      	mov	r3, r0
 8005034:	71bb      	strb	r3, [r7, #6]

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8005036:	482f      	ldr	r0, [pc, #188]	; (80050f4 <ChangeHourOnScreen+0xd4>)
 8005038:	f7fc fc9e 	bl	8001978 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 800503c:	4b2e      	ldr	r3, [pc, #184]	; (80050f8 <ChangeHourOnScreen+0xd8>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	79fa      	ldrb	r2, [r7, #7]
 8005042:	429a      	cmp	r2, r3
 8005044:	d021      	beq.n	800508a <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8005046:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <ChangeHourOnScreen+0xdc>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d11a      	bne.n	8005084 <ChangeHourOnScreen+0x64>
		  {
			  if(CHour < 10)
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	2b09      	cmp	r3, #9
 8005052:	d806      	bhi.n	8005062 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)MsgFunctions, " 0%d", CHour);
 8005054:	79fb      	ldrb	r3, [r7, #7]
 8005056:	461a      	mov	r2, r3
 8005058:	4929      	ldr	r1, [pc, #164]	; (8005100 <ChangeHourOnScreen+0xe0>)
 800505a:	482a      	ldr	r0, [pc, #168]	; (8005104 <ChangeHourOnScreen+0xe4>)
 800505c:	f00e f910 	bl	8013280 <siprintf>
 8005060:	e005      	b.n	800506e <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)MsgFunctions, " %d", CHour);
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	461a      	mov	r2, r3
 8005066:	4928      	ldr	r1, [pc, #160]	; (8005108 <ChangeHourOnScreen+0xe8>)
 8005068:	4826      	ldr	r0, [pc, #152]	; (8005104 <ChangeHourOnScreen+0xe4>)
 800506a:	f00e f909 	bl	8013280 <siprintf>
			  }
			  EF_PutString(MsgFunctions, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800506e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	2301      	movs	r3, #1
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	2300      	movs	r3, #0
 800507a:	2232      	movs	r2, #50	; 0x32
 800507c:	2161      	movs	r1, #97	; 0x61
 800507e:	4821      	ldr	r0, [pc, #132]	; (8005104 <ChangeHourOnScreen+0xe4>)
 8005080:	f7fc fe94 	bl	8001dac <EF_PutString>
		  }
		  OldHours = CHour;
 8005084:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <ChangeHourOnScreen+0xd8>)
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	7013      	strb	r3, [r2, #0]
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 800508a:	4b20      	ldr	r3, [pc, #128]	; (800510c <ChangeHourOnScreen+0xec>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	79ba      	ldrb	r2, [r7, #6]
 8005090:	429a      	cmp	r2, r3
 8005092:	d02b      	beq.n	80050ec <ChangeHourOnScreen+0xcc>
	  {
		  uint8_t  CDayOfWeek = DS3231_GetDayOfWeek();
 8005094:	f7fd fcf4 	bl	8002a80 <DS3231_GetDayOfWeek>
 8005098:	4603      	mov	r3, r0
 800509a:	717b      	strb	r3, [r7, #5]
		makeScheduleActivity(CHour, CMinute, CDayOfWeek); // Check if changed hour and minute are set in schedules
 800509c:	797a      	ldrb	r2, [r7, #5]
 800509e:	79b9      	ldrb	r1, [r7, #6]
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fba4 	bl	80057f0 <makeScheduleActivity>

		  if(State == MENUTFT_PARAMETERS)
 80050a8:	4b14      	ldr	r3, [pc, #80]	; (80050fc <ChangeHourOnScreen+0xdc>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d11a      	bne.n	80050e6 <ChangeHourOnScreen+0xc6>
		  {
			  if(CMinute < 10)
 80050b0:	79bb      	ldrb	r3, [r7, #6]
 80050b2:	2b09      	cmp	r3, #9
 80050b4:	d806      	bhi.n	80050c4 <ChangeHourOnScreen+0xa4>
			  {
				  sprintf((char*)MsgFunctions, " 0%d  ", CMinute);
 80050b6:	79bb      	ldrb	r3, [r7, #6]
 80050b8:	461a      	mov	r2, r3
 80050ba:	4915      	ldr	r1, [pc, #84]	; (8005110 <ChangeHourOnScreen+0xf0>)
 80050bc:	4811      	ldr	r0, [pc, #68]	; (8005104 <ChangeHourOnScreen+0xe4>)
 80050be:	f00e f8df 	bl	8013280 <siprintf>
 80050c2:	e005      	b.n	80050d0 <ChangeHourOnScreen+0xb0>
			  }
			  else
			  {
				  sprintf((char*)MsgFunctions, " %d  ", CMinute);
 80050c4:	79bb      	ldrb	r3, [r7, #6]
 80050c6:	461a      	mov	r2, r3
 80050c8:	4912      	ldr	r1, [pc, #72]	; (8005114 <ChangeHourOnScreen+0xf4>)
 80050ca:	480e      	ldr	r0, [pc, #56]	; (8005104 <ChangeHourOnScreen+0xe4>)
 80050cc:	f00e f8d8 	bl	8013280 <siprintf>
			  }

			  EF_PutString(MsgFunctions, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80050d0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	2301      	movs	r3, #1
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2300      	movs	r3, #0
 80050dc:	2232      	movs	r2, #50	; 0x32
 80050de:	2196      	movs	r1, #150	; 0x96
 80050e0:	4808      	ldr	r0, [pc, #32]	; (8005104 <ChangeHourOnScreen+0xe4>)
 80050e2:	f7fc fe63 	bl	8001dac <EF_PutString>
		  }
		  OldMinutes = CMinute;
 80050e6:	4a09      	ldr	r2, [pc, #36]	; (800510c <ChangeHourOnScreen+0xec>)
 80050e8:	79bb      	ldrb	r3, [r7, #6]
 80050ea:	7013      	strb	r3, [r2, #0]
	  }

}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	0802ab7c 	.word	0x0802ab7c
 80050f8:	20000318 	.word	0x20000318
 80050fc:	200008e8 	.word	0x200008e8
 8005100:	08017464 	.word	0x08017464
 8005104:	200002d8 	.word	0x200002d8
 8005108:	0801746c 	.word	0x0801746c
 800510c:	20000319 	.word	0x20000319
 8005110:	08017470 	.word	0x08017470
 8005114:	08017478 	.word	0x08017478

08005118 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 800512c:	f7fd fe88 	bl	8002e40 <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8005130:	f7fd febe 	bl	8002eb0 <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8005134:	e005      	b.n	8005142 <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8005136:	2018      	movs	r0, #24
 8005138:	f005 f816 	bl	800a168 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 800513c:	2019      	movs	r0, #25
 800513e:	f005 f813 	bl	800a168 <SendComand>
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af02      	add	r7, sp, #8
 8005152:	4603      	mov	r3, r0
 8005154:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8005156:	79fb      	ldrb	r3, [r7, #7]
 8005158:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d13e      	bne.n	80051de <predefinedActivityKarmienie+0x92>
	{
		EEPROM_RelayStateRestore();
 8005160:	f7fd fe6e 	bl	8002e40 <EEPROM_RelayStateRestore>
		ActivityButtonState[0] = 0;
 8005164:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <predefinedActivityKarmienie+0xac>)
 8005166:	2200      	movs	r2, #0
 8005168:	701a      	strb	r2, [r3, #0]

		EF_SetFont(&arial_11ptFontInfo);
 800516a:	4824      	ldr	r0, [pc, #144]	; (80051fc <predefinedActivityKarmienie+0xb0>)
 800516c:	f7fc fc04 	bl	8001978 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005170:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	230a      	movs	r3, #10
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	2328      	movs	r3, #40	; 0x28
 800517c:	2278      	movs	r2, #120	; 0x78
 800517e:	213c      	movs	r1, #60	; 0x3c
 8005180:	2064      	movs	r0, #100	; 0x64
 8005182:	f7fc fba8 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		sprintf((char*)MsgFunctions, "KARMIENIE");
 8005186:	491e      	ldr	r1, [pc, #120]	; (8005200 <predefinedActivityKarmienie+0xb4>)
 8005188:	481e      	ldr	r0, [pc, #120]	; (8005204 <predefinedActivityKarmienie+0xb8>)
 800518a:	f00e f879 	bl	8013280 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800518e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	2300      	movs	r3, #0
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	2300      	movs	r3, #0
 800519a:	223e      	movs	r2, #62	; 0x3e
 800519c:	2177      	movs	r1, #119	; 0x77
 800519e:	4819      	ldr	r0, [pc, #100]	; (8005204 <predefinedActivityKarmienie+0xb8>)
 80051a0:	f7fc fe04 	bl	8001dac <EF_PutString>
		sprintf((char*)MsgFunctions, "OFF");
 80051a4:	4918      	ldr	r1, [pc, #96]	; (8005208 <predefinedActivityKarmienie+0xbc>)
 80051a6:	4817      	ldr	r0, [pc, #92]	; (8005204 <predefinedActivityKarmienie+0xb8>)
 80051a8:	f00e f86a 	bl	8013280 <siprintf>
		EF_PutString(MsgFunctions, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	2300      	movs	r3, #0
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	2300      	movs	r3, #0
 80051b8:	2250      	movs	r2, #80	; 0x50
 80051ba:	2193      	movs	r1, #147	; 0x93
 80051bc:	4811      	ldr	r0, [pc, #68]	; (8005204 <predefinedActivityKarmienie+0xb8>)
 80051be:	f7fc fdf5 	bl	8001dac <EF_PutString>

		if(State == MENUTFT_LIGHTS)
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	2b05      	cmp	r3, #5
 80051c6:	d103      	bne.n	80051d0 <predefinedActivityKarmienie+0x84>
		{
			SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80051c8:	2016      	movs	r0, #22
 80051ca:	f004 ffcd 	bl	800a168 <SendComand>
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
		ActivityButtonState[0] = 1;
	}

}
 80051ce:	e00f      	b.n	80051f0 <predefinedActivityKarmienie+0xa4>
		else if(State == MENUTFT_SWITCH)
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d10c      	bne.n	80051f0 <predefinedActivityKarmienie+0xa4>
			SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current lights state
 80051d6:	2015      	movs	r0, #21
 80051d8:	f004 ffc6 	bl	800a168 <SendComand>
}
 80051dc:	e008      	b.n	80051f0 <predefinedActivityKarmienie+0xa4>
		SendComand(UCMD_RELAY_ALL_OFF);
 80051de:	2018      	movs	r0, #24
 80051e0:	f004 ffc2 	bl	800a168 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 80051e4:	4809      	ldr	r0, [pc, #36]	; (800520c <predefinedActivityKarmienie+0xc0>)
 80051e6:	f00b fb87 	bl	80108f8 <HAL_TIM_Base_Start_IT>
		ActivityButtonState[0] = 1;
 80051ea:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <predefinedActivityKarmienie+0xac>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	701a      	strb	r2, [r3, #0]
}
 80051f0:	bf00      	nop
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	200002d4 	.word	0x200002d4
 80051fc:	08028c04 	.word	0x08028c04
 8005200:	08017244 	.word	0x08017244
 8005204:	200002d8 	.word	0x200002d8
 8005208:	08017254 	.word	0x08017254
 800520c:	20000ae0 	.word	0x20000ae0

08005210 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8005216:	487d      	ldr	r0, [pc, #500]	; (800540c <drawCurrentStateOfSwitches+0x1fc>)
 8005218:	f7fc fbae 	bl	8001978 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 800521c:	4b7c      	ldr	r3, [pc, #496]	; (8005410 <drawCurrentStateOfSwitches+0x200>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01c      	beq.n	800525e <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005224:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	2305      	movs	r3, #5
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	2315      	movs	r3, #21
 8005230:	2221      	movs	r2, #33	; 0x21
 8005232:	2141      	movs	r1, #65	; 0x41
 8005234:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005238:	f7fc fb4d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 800523c:	4975      	ldr	r1, [pc, #468]	; (8005414 <drawCurrentStateOfSwitches+0x204>)
 800523e:	4876      	ldr	r0, [pc, #472]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 8005240:	f00e f81e 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005244:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	2300      	movs	r3, #0
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	2300      	movs	r3, #0
 8005250:	2243      	movs	r2, #67	; 0x43
 8005252:	f240 1111 	movw	r1, #273	; 0x111
 8005256:	4870      	ldr	r0, [pc, #448]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 8005258:	f7fc fda8 	bl	8001dac <EF_PutString>
 800525c:	e01b      	b.n	8005296 <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800525e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	2305      	movs	r3, #5
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	2315      	movs	r3, #21
 800526a:	2221      	movs	r2, #33	; 0x21
 800526c:	2141      	movs	r1, #65	; 0x41
 800526e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005272:	f7fc fb30 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 8005276:	4969      	ldr	r1, [pc, #420]	; (800541c <drawCurrentStateOfSwitches+0x20c>)
 8005278:	4867      	ldr	r0, [pc, #412]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 800527a:	f00e f801 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800527e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	2300      	movs	r3, #0
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	2300      	movs	r3, #0
 800528a:	2243      	movs	r2, #67	; 0x43
 800528c:	f240 1111 	movw	r1, #273	; 0x111
 8005290:	4861      	ldr	r0, [pc, #388]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 8005292:	f7fc fd8b 	bl	8001dac <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8005296:	4b5e      	ldr	r3, [pc, #376]	; (8005410 <drawCurrentStateOfSwitches+0x200>)
 8005298:	785b      	ldrb	r3, [r3, #1]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01c      	beq.n	80052d8 <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800529e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	2305      	movs	r3, #5
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2315      	movs	r3, #21
 80052aa:	2221      	movs	r2, #33	; 0x21
 80052ac:	215f      	movs	r1, #95	; 0x5f
 80052ae:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80052b2:	f7fc fb10 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 80052b6:	4957      	ldr	r1, [pc, #348]	; (8005414 <drawCurrentStateOfSwitches+0x204>)
 80052b8:	4857      	ldr	r0, [pc, #348]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 80052ba:	f00d ffe1 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80052be:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	2300      	movs	r3, #0
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	2300      	movs	r3, #0
 80052ca:	2261      	movs	r2, #97	; 0x61
 80052cc:	f240 1111 	movw	r1, #273	; 0x111
 80052d0:	4851      	ldr	r0, [pc, #324]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 80052d2:	f7fc fd6b 	bl	8001dac <EF_PutString>
 80052d6:	e01b      	b.n	8005310 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80052d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	2305      	movs	r3, #5
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	2315      	movs	r3, #21
 80052e4:	2221      	movs	r2, #33	; 0x21
 80052e6:	215f      	movs	r1, #95	; 0x5f
 80052e8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80052ec:	f7fc faf3 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 80052f0:	494a      	ldr	r1, [pc, #296]	; (800541c <drawCurrentStateOfSwitches+0x20c>)
 80052f2:	4849      	ldr	r0, [pc, #292]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 80052f4:	f00d ffc4 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80052f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	2300      	movs	r3, #0
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	2300      	movs	r3, #0
 8005304:	2261      	movs	r2, #97	; 0x61
 8005306:	f240 1111 	movw	r1, #273	; 0x111
 800530a:	4843      	ldr	r0, [pc, #268]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 800530c:	f7fc fd4e 	bl	8001dac <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8005310:	4b3f      	ldr	r3, [pc, #252]	; (8005410 <drawCurrentStateOfSwitches+0x200>)
 8005312:	789b      	ldrb	r3, [r3, #2]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01c      	beq.n	8005352 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005318:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	2305      	movs	r3, #5
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	2315      	movs	r3, #21
 8005324:	2221      	movs	r2, #33	; 0x21
 8005326:	217d      	movs	r1, #125	; 0x7d
 8005328:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800532c:	f7fc fad3 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 8005330:	4938      	ldr	r1, [pc, #224]	; (8005414 <drawCurrentStateOfSwitches+0x204>)
 8005332:	4839      	ldr	r0, [pc, #228]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 8005334:	f00d ffa4 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005338:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800533c:	9301      	str	r3, [sp, #4]
 800533e:	2300      	movs	r3, #0
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	2300      	movs	r3, #0
 8005344:	227f      	movs	r2, #127	; 0x7f
 8005346:	f240 1111 	movw	r1, #273	; 0x111
 800534a:	4833      	ldr	r0, [pc, #204]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 800534c:	f7fc fd2e 	bl	8001dac <EF_PutString>
 8005350:	e01b      	b.n	800538a <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005352:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	2305      	movs	r3, #5
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	2315      	movs	r3, #21
 800535e:	2221      	movs	r2, #33	; 0x21
 8005360:	217d      	movs	r1, #125	; 0x7d
 8005362:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005366:	f7fc fab6 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 800536a:	492c      	ldr	r1, [pc, #176]	; (800541c <drawCurrentStateOfSwitches+0x20c>)
 800536c:	482a      	ldr	r0, [pc, #168]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 800536e:	f00d ff87 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005372:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	2300      	movs	r3, #0
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	2300      	movs	r3, #0
 800537e:	227f      	movs	r2, #127	; 0x7f
 8005380:	f240 1111 	movw	r1, #273	; 0x111
 8005384:	4824      	ldr	r0, [pc, #144]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 8005386:	f7fc fd11 	bl	8001dac <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 800538a:	4b21      	ldr	r3, [pc, #132]	; (8005410 <drawCurrentStateOfSwitches+0x200>)
 800538c:	78db      	ldrb	r3, [r3, #3]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01c      	beq.n	80053cc <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005392:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	2305      	movs	r3, #5
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	2315      	movs	r3, #21
 800539e:	2221      	movs	r2, #33	; 0x21
 80053a0:	219b      	movs	r1, #155	; 0x9b
 80053a2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80053a6:	f7fc fa96 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 80053aa:	491a      	ldr	r1, [pc, #104]	; (8005414 <drawCurrentStateOfSwitches+0x204>)
 80053ac:	481a      	ldr	r0, [pc, #104]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 80053ae:	f00d ff67 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80053b2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	2300      	movs	r3, #0
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	2300      	movs	r3, #0
 80053be:	229d      	movs	r2, #157	; 0x9d
 80053c0:	f240 1111 	movw	r1, #273	; 0x111
 80053c4:	4814      	ldr	r0, [pc, #80]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 80053c6:	f7fc fcf1 	bl	8001dac <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)MsgFunctions, "OFF");
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80053ca:	e01b      	b.n	8005404 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80053cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	2305      	movs	r3, #5
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	2315      	movs	r3, #21
 80053d8:	2221      	movs	r2, #33	; 0x21
 80053da:	219b      	movs	r1, #155	; 0x9b
 80053dc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80053e0:	f7fc fa79 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 80053e4:	490d      	ldr	r1, [pc, #52]	; (800541c <drawCurrentStateOfSwitches+0x20c>)
 80053e6:	480c      	ldr	r0, [pc, #48]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 80053e8:	f00d ff4a 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80053ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	2300      	movs	r3, #0
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	2300      	movs	r3, #0
 80053f8:	229d      	movs	r2, #157	; 0x9d
 80053fa:	f240 1111 	movw	r1, #273	; 0x111
 80053fe:	4806      	ldr	r0, [pc, #24]	; (8005418 <drawCurrentStateOfSwitches+0x208>)
 8005400:	f7fc fcd4 	bl	8001dac <EF_PutString>
}
 8005404:	bf00      	nop
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	08028c04 	.word	0x08028c04
 8005410:	20000944 	.word	0x20000944
 8005414:	08017250 	.word	0x08017250
 8005418:	200002d8 	.word	0x200002d8
 800541c:	08017254 	.word	0x08017254

08005420 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8005426:	4875      	ldr	r0, [pc, #468]	; (80055fc <drawCurrentStateOfLights+0x1dc>)
 8005428:	f7fc faa6 	bl	8001978 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 800542c:	4b74      	ldr	r3, [pc, #464]	; (8005600 <drawCurrentStateOfLights+0x1e0>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01a      	beq.n	800546a <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005434:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005438:	9301      	str	r3, [sp, #4]
 800543a:	2305      	movs	r3, #5
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	2315      	movs	r3, #21
 8005440:	2221      	movs	r2, #33	; 0x21
 8005442:	2141      	movs	r1, #65	; 0x41
 8005444:	20c8      	movs	r0, #200	; 0xc8
 8005446:	f7fc fa46 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 800544a:	496e      	ldr	r1, [pc, #440]	; (8005604 <drawCurrentStateOfLights+0x1e4>)
 800544c:	486e      	ldr	r0, [pc, #440]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 800544e:	f00d ff17 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005452:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	2300      	movs	r3, #0
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	2300      	movs	r3, #0
 800545e:	2243      	movs	r2, #67	; 0x43
 8005460:	21cb      	movs	r1, #203	; 0xcb
 8005462:	4869      	ldr	r0, [pc, #420]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 8005464:	f7fc fca2 	bl	8001dac <EF_PutString>
 8005468:	e019      	b.n	800549e <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800546a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	2305      	movs	r3, #5
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2315      	movs	r3, #21
 8005476:	2221      	movs	r2, #33	; 0x21
 8005478:	2141      	movs	r1, #65	; 0x41
 800547a:	20c8      	movs	r0, #200	; 0xc8
 800547c:	f7fc fa2b 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 8005480:	4962      	ldr	r1, [pc, #392]	; (800560c <drawCurrentStateOfLights+0x1ec>)
 8005482:	4861      	ldr	r0, [pc, #388]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 8005484:	f00d fefc 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005488:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	2300      	movs	r3, #0
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	2300      	movs	r3, #0
 8005494:	2243      	movs	r2, #67	; 0x43
 8005496:	21cb      	movs	r1, #203	; 0xcb
 8005498:	485b      	ldr	r0, [pc, #364]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 800549a:	f7fc fc87 	bl	8001dac <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 800549e:	4b58      	ldr	r3, [pc, #352]	; (8005600 <drawCurrentStateOfLights+0x1e0>)
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01a      	beq.n	80054dc <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80054a6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	2305      	movs	r3, #5
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	2315      	movs	r3, #21
 80054b2:	2221      	movs	r2, #33	; 0x21
 80054b4:	215f      	movs	r1, #95	; 0x5f
 80054b6:	20c8      	movs	r0, #200	; 0xc8
 80054b8:	f7fc fa0d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 80054bc:	4951      	ldr	r1, [pc, #324]	; (8005604 <drawCurrentStateOfLights+0x1e4>)
 80054be:	4852      	ldr	r0, [pc, #328]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 80054c0:	f00d fede 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80054c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054c8:	9301      	str	r3, [sp, #4]
 80054ca:	2300      	movs	r3, #0
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	2300      	movs	r3, #0
 80054d0:	2261      	movs	r2, #97	; 0x61
 80054d2:	21cb      	movs	r1, #203	; 0xcb
 80054d4:	484c      	ldr	r0, [pc, #304]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 80054d6:	f7fc fc69 	bl	8001dac <EF_PutString>
 80054da:	e019      	b.n	8005510 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80054dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	2305      	movs	r3, #5
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	2315      	movs	r3, #21
 80054e8:	2221      	movs	r2, #33	; 0x21
 80054ea:	215f      	movs	r1, #95	; 0x5f
 80054ec:	20c8      	movs	r0, #200	; 0xc8
 80054ee:	f7fc f9f2 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 80054f2:	4946      	ldr	r1, [pc, #280]	; (800560c <drawCurrentStateOfLights+0x1ec>)
 80054f4:	4844      	ldr	r0, [pc, #272]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 80054f6:	f00d fec3 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80054fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	2300      	movs	r3, #0
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	2300      	movs	r3, #0
 8005506:	2261      	movs	r2, #97	; 0x61
 8005508:	21cb      	movs	r1, #203	; 0xcb
 800550a:	483f      	ldr	r0, [pc, #252]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 800550c:	f7fc fc4e 	bl	8001dac <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 8005510:	4b3b      	ldr	r3, [pc, #236]	; (8005600 <drawCurrentStateOfLights+0x1e0>)
 8005512:	789b      	ldrb	r3, [r3, #2]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01a      	beq.n	800554e <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005518:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	2305      	movs	r3, #5
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	2315      	movs	r3, #21
 8005524:	2221      	movs	r2, #33	; 0x21
 8005526:	217d      	movs	r1, #125	; 0x7d
 8005528:	20c8      	movs	r0, #200	; 0xc8
 800552a:	f7fc f9d4 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 800552e:	4935      	ldr	r1, [pc, #212]	; (8005604 <drawCurrentStateOfLights+0x1e4>)
 8005530:	4835      	ldr	r0, [pc, #212]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 8005532:	f00d fea5 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005536:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800553a:	9301      	str	r3, [sp, #4]
 800553c:	2300      	movs	r3, #0
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	2300      	movs	r3, #0
 8005542:	227f      	movs	r2, #127	; 0x7f
 8005544:	21cb      	movs	r1, #203	; 0xcb
 8005546:	4830      	ldr	r0, [pc, #192]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 8005548:	f7fc fc30 	bl	8001dac <EF_PutString>
 800554c:	e019      	b.n	8005582 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800554e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	2305      	movs	r3, #5
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	2315      	movs	r3, #21
 800555a:	2221      	movs	r2, #33	; 0x21
 800555c:	217d      	movs	r1, #125	; 0x7d
 800555e:	20c8      	movs	r0, #200	; 0xc8
 8005560:	f7fc f9b9 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 8005564:	4929      	ldr	r1, [pc, #164]	; (800560c <drawCurrentStateOfLights+0x1ec>)
 8005566:	4828      	ldr	r0, [pc, #160]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 8005568:	f00d fe8a 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800556c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	2300      	movs	r3, #0
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	2300      	movs	r3, #0
 8005578:	227f      	movs	r2, #127	; 0x7f
 800557a:	21cb      	movs	r1, #203	; 0xcb
 800557c:	4822      	ldr	r0, [pc, #136]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 800557e:	f7fc fc15 	bl	8001dac <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8005582:	4b1f      	ldr	r3, [pc, #124]	; (8005600 <drawCurrentStateOfLights+0x1e0>)
 8005584:	78db      	ldrb	r3, [r3, #3]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01a      	beq.n	80055c0 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800558a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	2305      	movs	r3, #5
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	2315      	movs	r3, #21
 8005596:	2221      	movs	r2, #33	; 0x21
 8005598:	219b      	movs	r1, #155	; 0x9b
 800559a:	20c8      	movs	r0, #200	; 0xc8
 800559c:	f7fc f99b 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "ON");
 80055a0:	4918      	ldr	r1, [pc, #96]	; (8005604 <drawCurrentStateOfLights+0x1e4>)
 80055a2:	4819      	ldr	r0, [pc, #100]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 80055a4:	f00d fe6c 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80055a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	2300      	movs	r3, #0
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	2300      	movs	r3, #0
 80055b4:	229d      	movs	r2, #157	; 0x9d
 80055b6:	21cb      	movs	r1, #203	; 0xcb
 80055b8:	4813      	ldr	r0, [pc, #76]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 80055ba:	f7fc fbf7 	bl	8001dac <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)MsgFunctions, "OFF");
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80055be:	e019      	b.n	80055f4 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80055c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	2305      	movs	r3, #5
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	2315      	movs	r3, #21
 80055cc:	2221      	movs	r2, #33	; 0x21
 80055ce:	219b      	movs	r1, #155	; 0x9b
 80055d0:	20c8      	movs	r0, #200	; 0xc8
 80055d2:	f7fc f980 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)MsgFunctions, "OFF");
 80055d6:	490d      	ldr	r1, [pc, #52]	; (800560c <drawCurrentStateOfLights+0x1ec>)
 80055d8:	480b      	ldr	r0, [pc, #44]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 80055da:	f00d fe51 	bl	8013280 <siprintf>
		  EF_PutString(MsgFunctions, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80055de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	2300      	movs	r3, #0
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	2300      	movs	r3, #0
 80055ea:	229d      	movs	r2, #157	; 0x9d
 80055ec:	21cb      	movs	r1, #203	; 0xcb
 80055ee:	4806      	ldr	r0, [pc, #24]	; (8005608 <drawCurrentStateOfLights+0x1e8>)
 80055f0:	f7fc fbdc 	bl	8001dac <EF_PutString>
}
 80055f4:	bf00      	nop
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	08028c04 	.word	0x08028c04
 8005600:	20000948 	.word	0x20000948
 8005604:	08017250 	.word	0x08017250
 8005608:	200002d8 	.word	0x200002d8
 800560c:	08017254 	.word	0x08017254

08005610 <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	f107 030c 	add.w	r3, r7, #12
 8005622:	2100      	movs	r1, #0
 8005624:	460a      	mov	r2, r1
 8005626:	801a      	strh	r2, [r3, #0]
 8005628:	460a      	mov	r2, r1
 800562a:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 800562c:	f107 0208 	add.w	r2, r7, #8
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	4611      	mov	r1, r2
 8005634:	4618      	mov	r0, r3
 8005636:	f7fd fc73 	bl	8002f20 <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 800563a:	7a3b      	ldrb	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <restoreTFTScheduleDayOfWeek+0x3a>
 8005640:	2101      	movs	r1, #1
 8005642:	2001      	movs	r0, #1
 8005644:	f001 fcec 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8005648:	e003      	b.n	8005652 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 800564a:	2100      	movs	r1, #0
 800564c:	2001      	movs	r0, #1
 800564e:	f001 fce7 	bl	8007020 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 8005652:	7a7b      	ldrb	r3, [r7, #9]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d004      	beq.n	8005662 <restoreTFTScheduleDayOfWeek+0x52>
 8005658:	2101      	movs	r1, #1
 800565a:	2002      	movs	r0, #2
 800565c:	f001 fce0 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8005660:	e003      	b.n	800566a <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 8005662:	2100      	movs	r1, #0
 8005664:	2002      	movs	r0, #2
 8005666:	f001 fcdb 	bl	8007020 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 800566a:	7abb      	ldrb	r3, [r7, #10]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <restoreTFTScheduleDayOfWeek+0x6a>
 8005670:	2101      	movs	r1, #1
 8005672:	2003      	movs	r0, #3
 8005674:	f001 fcd4 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8005678:	e003      	b.n	8005682 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 800567a:	2100      	movs	r1, #0
 800567c:	2003      	movs	r0, #3
 800567e:	f001 fccf 	bl	8007020 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 8005682:	7afb      	ldrb	r3, [r7, #11]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <restoreTFTScheduleDayOfWeek+0x82>
 8005688:	2101      	movs	r1, #1
 800568a:	2004      	movs	r0, #4
 800568c:	f001 fcc8 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8005690:	e003      	b.n	800569a <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 8005692:	2100      	movs	r1, #0
 8005694:	2004      	movs	r0, #4
 8005696:	f001 fcc3 	bl	8007020 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 800569a:	7b3b      	ldrb	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <restoreTFTScheduleDayOfWeek+0x9a>
 80056a0:	2101      	movs	r1, #1
 80056a2:	2005      	movs	r0, #5
 80056a4:	f001 fcbc 	bl	8007020 <changeTFTScheduleDayOfWeek>
 80056a8:	e003      	b.n	80056b2 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 80056aa:	2100      	movs	r1, #0
 80056ac:	2005      	movs	r0, #5
 80056ae:	f001 fcb7 	bl	8007020 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 80056b2:	7b7b      	ldrb	r3, [r7, #13]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d004      	beq.n	80056c2 <restoreTFTScheduleDayOfWeek+0xb2>
 80056b8:	2101      	movs	r1, #1
 80056ba:	2006      	movs	r0, #6
 80056bc:	f001 fcb0 	bl	8007020 <changeTFTScheduleDayOfWeek>
 80056c0:	e003      	b.n	80056ca <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 80056c2:	2100      	movs	r1, #0
 80056c4:	2006      	movs	r0, #6
 80056c6:	f001 fcab 	bl	8007020 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 80056ca:	7bbb      	ldrb	r3, [r7, #14]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d004      	beq.n	80056da <restoreTFTScheduleDayOfWeek+0xca>
 80056d0:	2101      	movs	r1, #1
 80056d2:	2007      	movs	r0, #7
 80056d4:	f001 fca4 	bl	8007020 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 80056d8:	e003      	b.n	80056e2 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 80056da:	2100      	movs	r1, #0
 80056dc:	2007      	movs	r0, #7
 80056de:	f001 fc9f 	bl	8007020 <changeTFTScheduleDayOfWeek>
}
 80056e2:	bf00      	nop
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b086      	sub	sp, #24
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	4603      	mov	r3, r0
 80056f2:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	f107 0310 	add.w	r3, r7, #16
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 8005702:	f107 020c 	add.w	r2, r7, #12
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	4611      	mov	r1, r2
 800570a:	4618      	mov	r0, r3
 800570c:	f7fd fc84 	bl	8003018 <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 8005710:	7b3b      	ldrb	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <restoreTFTScheduleRelayLights+0x36>
 8005716:	2101      	movs	r1, #1
 8005718:	2001      	movs	r0, #1
 800571a:	f001 fd5e 	bl	80071da <changeTFTScheduleRelayLights>
 800571e:	e003      	b.n	8005728 <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 8005720:	2100      	movs	r1, #0
 8005722:	2001      	movs	r0, #1
 8005724:	f001 fd59 	bl	80071da <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 8005728:	7b7b      	ldrb	r3, [r7, #13]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <restoreTFTScheduleRelayLights+0x4e>
 800572e:	2101      	movs	r1, #1
 8005730:	2002      	movs	r0, #2
 8005732:	f001 fd52 	bl	80071da <changeTFTScheduleRelayLights>
 8005736:	e003      	b.n	8005740 <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 8005738:	2100      	movs	r1, #0
 800573a:	2002      	movs	r0, #2
 800573c:	f001 fd4d 	bl	80071da <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 8005740:	7bbb      	ldrb	r3, [r7, #14]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <restoreTFTScheduleRelayLights+0x66>
 8005746:	2101      	movs	r1, #1
 8005748:	2003      	movs	r0, #3
 800574a:	f001 fd46 	bl	80071da <changeTFTScheduleRelayLights>
 800574e:	e003      	b.n	8005758 <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 8005750:	2100      	movs	r1, #0
 8005752:	2003      	movs	r0, #3
 8005754:	f001 fd41 	bl	80071da <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d004      	beq.n	8005768 <restoreTFTScheduleRelayLights+0x7e>
 800575e:	2101      	movs	r1, #1
 8005760:	2004      	movs	r0, #4
 8005762:	f001 fd3a 	bl	80071da <changeTFTScheduleRelayLights>
 8005766:	e003      	b.n	8005770 <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 8005768:	2100      	movs	r1, #0
 800576a:	2004      	movs	r0, #4
 800576c:	f001 fd35 	bl	80071da <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 8005770:	7c3b      	ldrb	r3, [r7, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <restoreTFTScheduleRelayLights+0x96>
 8005776:	2101      	movs	r1, #1
 8005778:	2005      	movs	r0, #5
 800577a:	f001 fd2e 	bl	80071da <changeTFTScheduleRelayLights>
 800577e:	e003      	b.n	8005788 <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 8005780:	2100      	movs	r1, #0
 8005782:	2005      	movs	r0, #5
 8005784:	f001 fd29 	bl	80071da <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 8005788:	7c7b      	ldrb	r3, [r7, #17]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d004      	beq.n	8005798 <restoreTFTScheduleRelayLights+0xae>
 800578e:	2101      	movs	r1, #1
 8005790:	2006      	movs	r0, #6
 8005792:	f001 fd22 	bl	80071da <changeTFTScheduleRelayLights>
 8005796:	e003      	b.n	80057a0 <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 8005798:	2100      	movs	r1, #0
 800579a:	2006      	movs	r0, #6
 800579c:	f001 fd1d 	bl	80071da <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 80057a0:	7cbb      	ldrb	r3, [r7, #18]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d004      	beq.n	80057b0 <restoreTFTScheduleRelayLights+0xc6>
 80057a6:	2101      	movs	r1, #1
 80057a8:	2007      	movs	r0, #7
 80057aa:	f001 fd16 	bl	80071da <changeTFTScheduleRelayLights>
 80057ae:	e003      	b.n	80057b8 <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 80057b0:	2100      	movs	r1, #0
 80057b2:	2007      	movs	r0, #7
 80057b4:	f001 fd11 	bl	80071da <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 80057b8:	7cfb      	ldrb	r3, [r7, #19]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d004      	beq.n	80057c8 <restoreTFTScheduleRelayLights+0xde>
 80057be:	2101      	movs	r1, #1
 80057c0:	2008      	movs	r0, #8
 80057c2:	f001 fd0a 	bl	80071da <changeTFTScheduleRelayLights>
 80057c6:	e003      	b.n	80057d0 <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 80057c8:	2100      	movs	r1, #0
 80057ca:	2008      	movs	r0, #8
 80057cc:	f001 fd05 	bl	80071da <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 80057d0:	7d3b      	ldrb	r3, [r7, #20]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <restoreTFTScheduleRelayLights+0xf6>
 80057d6:	2101      	movs	r1, #1
 80057d8:	2009      	movs	r0, #9
 80057da:	f001 fcfe 	bl	80071da <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 80057de:	e003      	b.n	80057e8 <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 80057e0:	2100      	movs	r1, #0
 80057e2:	2009      	movs	r0, #9
 80057e4:	f001 fcf9 	bl	80071da <changeTFTScheduleRelayLights>
}
 80057e8:	bf00      	nop
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <makeScheduleActivity>:


void makeScheduleActivity(uint8_t CurrentHour, uint8_t CurrentMinute, uint8_t CurrentDayOfWeek)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	71fb      	strb	r3, [r7, #7]
 80057fa:	460b      	mov	r3, r1
 80057fc:	71bb      	strb	r3, [r7, #6]
 80057fe:	4613      	mov	r3, r2
 8005800:	717b      	strb	r3, [r7, #5]

	for(uint8_t i = 1 ; i <= NumberOfSchedules ; i++ ) // 'i' is a number of checking schedule
 8005802:	2301      	movs	r3, #1
 8005804:	75fb      	strb	r3, [r7, #23]
 8005806:	e055      	b.n	80058b4 <makeScheduleActivity+0xc4>
	{
		uint8_t ScheduleDayOfWeekTab[7]= {0}; // Tab to handle information about day of the week to which the schedule applies
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	f107 0314 	add.w	r3, r7, #20
 8005810:	2100      	movs	r1, #0
 8005812:	460a      	mov	r2, r1
 8005814:	801a      	strh	r2, [r3, #0]
 8005816:	460a      	mov	r2, r1
 8005818:	709a      	strb	r2, [r3, #2]
		EEPROM_ScheduleDayInWeekRead(i, ScheduleDayOfWeekTab); // Get day of week from 'i' Schedule
 800581a:	f107 0210 	add.w	r2, r7, #16
 800581e:	7dfb      	ldrb	r3, [r7, #23]
 8005820:	4611      	mov	r1, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f7fd fb7c 	bl	8002f20 <EEPROM_ScheduleDayInWeekRead>

		if(1 == ScheduleDayOfWeekTab[CurrentDayOfWeek]) // If the current day of week the schedule 'i' applies
 8005828:	797b      	ldrb	r3, [r7, #5]
 800582a:	3318      	adds	r3, #24
 800582c:	443b      	add	r3, r7
 800582e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d13b      	bne.n	80058ae <makeScheduleActivity+0xbe>
		{
			// Check if some relays should be turn on
			uint8_t MinuteOnFromEEPROM = 67;
 8005836:	2343      	movs	r3, #67	; 0x43
 8005838:	73fb      	strb	r3, [r7, #15]
			EEPROM_ScheduleMinuteOnRead(i, &MinuteOnFromEEPROM); // Get set Minute ON from EEPROM
 800583a:	f107 020f 	add.w	r2, r7, #15
 800583e:	7dfb      	ldrb	r3, [r7, #23]
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f7fd fce1 	bl	800320a <EEPROM_ScheduleMinuteOnRead>
			if(CurrentMinute == MinuteOnFromEEPROM) // If Hour, Minute and Day of Week is set in this schedule
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	79ba      	ldrb	r2, [r7, #6]
 800584c:	429a      	cmp	r2, r3
 800584e:	d110      	bne.n	8005872 <makeScheduleActivity+0x82>
			{
				uint8_t HourOnFromEEPROM = 27;
 8005850:	231b      	movs	r3, #27
 8005852:	737b      	strb	r3, [r7, #13]
				EEPROM_ScheduleHourOnRead(i, &HourOnFromEEPROM); // Get set Hour ON from EEPROM
 8005854:	f107 020d 	add.w	r2, r7, #13
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	4611      	mov	r1, r2
 800585c:	4618      	mov	r0, r3
 800585e:	f7fd fcb0 	bl	80031c2 <EEPROM_ScheduleHourOnRead>
				if(CurrentHour == HourOnFromEEPROM)
 8005862:	7b7b      	ldrb	r3, [r7, #13]
 8005864:	79fa      	ldrb	r2, [r7, #7]
 8005866:	429a      	cmp	r2, r3
 8005868:	d103      	bne.n	8005872 <makeScheduleActivity+0x82>
				{
					makeRelayOn2(i);
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	4618      	mov	r0, r3
 800586e:	f000 f82d 	bl	80058cc <makeRelayOn2>
				}
			}

			// Check if some relays should be turn off
			uint8_t MinuteOffFromEEPROM = 67;
 8005872:	2343      	movs	r3, #67	; 0x43
 8005874:	73bb      	strb	r3, [r7, #14]
			EEPROM_ScheduleMinuteOffRead(i, &MinuteOffFromEEPROM);
 8005876:	f107 020e 	add.w	r2, r7, #14
 800587a:	7dfb      	ldrb	r3, [r7, #23]
 800587c:	4611      	mov	r1, r2
 800587e:	4618      	mov	r0, r3
 8005880:	f7fd fd0b 	bl	800329a <EEPROM_ScheduleMinuteOffRead>
			if(CurrentMinute == MinuteOffFromEEPROM) // If Hour, Minute and Day of Week is set in this schedule
 8005884:	7bbb      	ldrb	r3, [r7, #14]
 8005886:	79ba      	ldrb	r2, [r7, #6]
 8005888:	429a      	cmp	r2, r3
 800588a:	d110      	bne.n	80058ae <makeScheduleActivity+0xbe>
			{
				uint8_t HourOfFromEEPROM = 27;
 800588c:	231b      	movs	r3, #27
 800588e:	733b      	strb	r3, [r7, #12]
				EEPROM_ScheduleHourOffRead(i, &HourOfFromEEPROM);
 8005890:	f107 020c 	add.w	r2, r7, #12
 8005894:	7dfb      	ldrb	r3, [r7, #23]
 8005896:	4611      	mov	r1, r2
 8005898:	4618      	mov	r0, r3
 800589a:	f7fd fcda 	bl	8003252 <EEPROM_ScheduleHourOffRead>
				if(CurrentHour == HourOfFromEEPROM)
 800589e:	7b3b      	ldrb	r3, [r7, #12]
 80058a0:	79fa      	ldrb	r2, [r7, #7]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d103      	bne.n	80058ae <makeScheduleActivity+0xbe>
				{
					makeRelayOff2(i);
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 f8a5 	bl	80059f8 <makeRelayOff2>
	for(uint8_t i = 1 ; i <= NumberOfSchedules ; i++ ) // 'i' is a number of checking schedule
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	3301      	adds	r3, #1
 80058b2:	75fb      	strb	r3, [r7, #23]
 80058b4:	4b04      	ldr	r3, [pc, #16]	; (80058c8 <makeScheduleActivity+0xd8>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	7dfa      	ldrb	r2, [r7, #23]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d9a4      	bls.n	8005808 <makeScheduleActivity+0x18>
				}
			}
		}
	}
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	20000030 	.word	0x20000030

080058cc <makeRelayOn2>:

void makeRelayOn2(uint8_t NumberOfShedule)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	71fb      	strb	r3, [r7, #7]
		uint8_t ScheduleRelayAppliesTab[9] = {0};  // { R1, R2, R3, R4, WS, L1, L2, L3, L4}
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	f107 0310 	add.w	r3, r7, #16
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	711a      	strb	r2, [r3, #4]
		EEPROM_ScheduleRelayAndSwitchTabRead(NumberOfShedule, ScheduleRelayAppliesTab);
 80058e4:	f107 020c 	add.w	r2, r7, #12
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	4611      	mov	r1, r2
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fd fb93 	bl	8003018 <EEPROM_ScheduleRelayAndSwitchTabRead>
		if(ScheduleRelayAppliesTab[0] == 1)
 80058f2:	7b3b      	ldrb	r3, [r7, #12]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d109      	bne.n	800590c <makeRelayOn2+0x40>
		{
			SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 80058f8:	2005      	movs	r0, #5
 80058fa:	f004 fc35 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 80058fe:	4933      	ldr	r1, [pc, #204]	; (80059cc <makeRelayOn2+0x100>)
 8005900:	4833      	ldr	r0, [pc, #204]	; (80059d0 <makeRelayOn2+0x104>)
 8005902:	f005 fb59 	bl	800afb8 <UARTDMA_Print>
			SwitchesButtonState[0] = 1;
 8005906:	4b33      	ldr	r3, [pc, #204]	; (80059d4 <makeRelayOn2+0x108>)
 8005908:	2201      	movs	r2, #1
 800590a:	701a      	strb	r2, [r3, #0]
			//EEPROM_RelayStateUpdate(1, 1);
		}

		if(ScheduleRelayAppliesTab[1] == 1)
 800590c:	7b7b      	ldrb	r3, [r7, #13]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d109      	bne.n	8005926 <makeRelayOn2+0x5a>
		{
			SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8005912:	2007      	movs	r0, #7
 8005914:	f004 fc28 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 8005918:	492f      	ldr	r1, [pc, #188]	; (80059d8 <makeRelayOn2+0x10c>)
 800591a:	482d      	ldr	r0, [pc, #180]	; (80059d0 <makeRelayOn2+0x104>)
 800591c:	f005 fb4c 	bl	800afb8 <UARTDMA_Print>
			SwitchesButtonState[1] = 1;
 8005920:	4b2c      	ldr	r3, [pc, #176]	; (80059d4 <makeRelayOn2+0x108>)
 8005922:	2201      	movs	r2, #1
 8005924:	705a      	strb	r2, [r3, #1]
			//EEPROM_RelayStateUpdate(2, 1);
		}

		if(ScheduleRelayAppliesTab[2] == 1)
 8005926:	7bbb      	ldrb	r3, [r7, #14]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d109      	bne.n	8005940 <makeRelayOn2+0x74>
		{
			SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 800592c:	2009      	movs	r0, #9
 800592e:	f004 fc1b 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 8005932:	492a      	ldr	r1, [pc, #168]	; (80059dc <makeRelayOn2+0x110>)
 8005934:	4826      	ldr	r0, [pc, #152]	; (80059d0 <makeRelayOn2+0x104>)
 8005936:	f005 fb3f 	bl	800afb8 <UARTDMA_Print>
			SwitchesButtonState[2] = 1;
 800593a:	4b26      	ldr	r3, [pc, #152]	; (80059d4 <makeRelayOn2+0x108>)
 800593c:	2201      	movs	r2, #1
 800593e:	709a      	strb	r2, [r3, #2]
			//EEPROM_RelayStateUpdate(3, 1);
		}

		if(ScheduleRelayAppliesTab[3] == 1)
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d109      	bne.n	800595a <makeRelayOn2+0x8e>
		{
			SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8005946:	200b      	movs	r0, #11
 8005948:	f004 fc0e 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 800594c:	4924      	ldr	r1, [pc, #144]	; (80059e0 <makeRelayOn2+0x114>)
 800594e:	4820      	ldr	r0, [pc, #128]	; (80059d0 <makeRelayOn2+0x104>)
 8005950:	f005 fb32 	bl	800afb8 <UARTDMA_Print>
			SwitchesButtonState[3] = 1;
 8005954:	4b1f      	ldr	r3, [pc, #124]	; (80059d4 <makeRelayOn2+0x108>)
 8005956:	2201      	movs	r2, #1
 8005958:	70da      	strb	r2, [r3, #3]
		if(ScheduleRelayAppliesTab[4] == 1)
		{
			//TODO! WS ON
		}

		if(ScheduleRelayAppliesTab[5] == 1)
 800595a:	7c7b      	ldrb	r3, [r7, #17]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d109      	bne.n	8005974 <makeRelayOn2+0xa8>
		{
			SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 8005960:	200d      	movs	r0, #13
 8005962:	f004 fc01 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 8005966:	491f      	ldr	r1, [pc, #124]	; (80059e4 <makeRelayOn2+0x118>)
 8005968:	4819      	ldr	r0, [pc, #100]	; (80059d0 <makeRelayOn2+0x104>)
 800596a:	f005 fb25 	bl	800afb8 <UARTDMA_Print>
			LightsButtonState[0] = 1;
 800596e:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <makeRelayOn2+0x11c>)
 8005970:	2201      	movs	r2, #1
 8005972:	701a      	strb	r2, [r3, #0]
			//EEPROM_LightStateUpdate(1, 1);
		}

		if(ScheduleRelayAppliesTab[6] == 1)
 8005974:	7cbb      	ldrb	r3, [r7, #18]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d109      	bne.n	800598e <makeRelayOn2+0xc2>
		{
			SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 800597a:	200f      	movs	r0, #15
 800597c:	f004 fbf4 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 8005980:	491a      	ldr	r1, [pc, #104]	; (80059ec <makeRelayOn2+0x120>)
 8005982:	4813      	ldr	r0, [pc, #76]	; (80059d0 <makeRelayOn2+0x104>)
 8005984:	f005 fb18 	bl	800afb8 <UARTDMA_Print>
			LightsButtonState[1] = 1;
 8005988:	4b17      	ldr	r3, [pc, #92]	; (80059e8 <makeRelayOn2+0x11c>)
 800598a:	2201      	movs	r2, #1
 800598c:	705a      	strb	r2, [r3, #1]
			//EEPROM_LightStateUpdate(2, 1);
		}

		if(ScheduleRelayAppliesTab[7] == 1)
 800598e:	7cfb      	ldrb	r3, [r7, #19]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d109      	bne.n	80059a8 <makeRelayOn2+0xdc>
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8005994:	2011      	movs	r0, #17
 8005996:	f004 fbe7 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 800599a:	4915      	ldr	r1, [pc, #84]	; (80059f0 <makeRelayOn2+0x124>)
 800599c:	480c      	ldr	r0, [pc, #48]	; (80059d0 <makeRelayOn2+0x104>)
 800599e:	f005 fb0b 	bl	800afb8 <UARTDMA_Print>
			LightsButtonState[2] = 1;
 80059a2:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <makeRelayOn2+0x11c>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	709a      	strb	r2, [r3, #2]
			//EEPROM_LightStateUpdate(3, 1);
		}

		if(ScheduleRelayAppliesTab[8] == 1)
 80059a8:	7d3b      	ldrb	r3, [r7, #20]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d109      	bne.n	80059c2 <makeRelayOn2+0xf6>
		{
			SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 80059ae:	2013      	movs	r0, #19
 80059b0:	f004 fbda 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 80059b4:	490f      	ldr	r1, [pc, #60]	; (80059f4 <makeRelayOn2+0x128>)
 80059b6:	4806      	ldr	r0, [pc, #24]	; (80059d0 <makeRelayOn2+0x104>)
 80059b8:	f005 fafe 	bl	800afb8 <UARTDMA_Print>
			LightsButtonState[3] = 1;
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <makeRelayOn2+0x11c>)
 80059be:	2201      	movs	r2, #1
 80059c0:	70da      	strb	r2, [r3, #3]
			//EEPROM_LightStateUpdate(4, 1);
		}

}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	08017480 	.word	0x08017480
 80059d0:	20000654 	.word	0x20000654
 80059d4:	20000944 	.word	0x20000944
 80059d8:	0801748c 	.word	0x0801748c
 80059dc:	08017498 	.word	0x08017498
 80059e0:	080174a4 	.word	0x080174a4
 80059e4:	080174b0 	.word	0x080174b0
 80059e8:	20000948 	.word	0x20000948
 80059ec:	080174bc 	.word	0x080174bc
 80059f0:	080174c8 	.word	0x080174c8
 80059f4:	080174d4 	.word	0x080174d4

080059f8 <makeRelayOff2>:
void makeRelayOff2(uint8_t NumberOfShedule)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	71fb      	strb	r3, [r7, #7]
		uint8_t ScheduleRelayAppliesTab[9] = {0};  // { R1, R2, R3, R4, WS, L1, L2, L3, L4}
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	f107 0310 	add.w	r3, r7, #16
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	711a      	strb	r2, [r3, #4]
		EEPROM_ScheduleRelayAndSwitchTabRead(NumberOfShedule, ScheduleRelayAppliesTab);
 8005a10:	f107 020c 	add.w	r2, r7, #12
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	4611      	mov	r1, r2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fd fafd 	bl	8003018 <EEPROM_ScheduleRelayAndSwitchTabRead>
		if(ScheduleRelayAppliesTab[0] == 1)
 8005a1e:	7b3b      	ldrb	r3, [r7, #12]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d109      	bne.n	8005a38 <makeRelayOff2+0x40>
		{
			SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8005a24:	2006      	movs	r0, #6
 8005a26:	f004 fb9f 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 8005a2a:	4933      	ldr	r1, [pc, #204]	; (8005af8 <makeRelayOff2+0x100>)
 8005a2c:	4833      	ldr	r0, [pc, #204]	; (8005afc <makeRelayOff2+0x104>)
 8005a2e:	f005 fac3 	bl	800afb8 <UARTDMA_Print>
			SwitchesButtonState[0] = 0;
 8005a32:	4b33      	ldr	r3, [pc, #204]	; (8005b00 <makeRelayOff2+0x108>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
			//EEPROM_RelayStateUpdate(1, 0);
		}

		if(ScheduleRelayAppliesTab[1] == 1)
 8005a38:	7b7b      	ldrb	r3, [r7, #13]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d109      	bne.n	8005a52 <makeRelayOff2+0x5a>
		{
			SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8005a3e:	2008      	movs	r0, #8
 8005a40:	f004 fb92 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 8005a44:	492f      	ldr	r1, [pc, #188]	; (8005b04 <makeRelayOff2+0x10c>)
 8005a46:	482d      	ldr	r0, [pc, #180]	; (8005afc <makeRelayOff2+0x104>)
 8005a48:	f005 fab6 	bl	800afb8 <UARTDMA_Print>
			SwitchesButtonState[1] = 0;
 8005a4c:	4b2c      	ldr	r3, [pc, #176]	; (8005b00 <makeRelayOff2+0x108>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	705a      	strb	r2, [r3, #1]
			//EEPROM_RelayStateUpdate(2, 0);
		}

		if(ScheduleRelayAppliesTab[2] == 1)
 8005a52:	7bbb      	ldrb	r3, [r7, #14]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d109      	bne.n	8005a6c <makeRelayOff2+0x74>
		{
			SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8005a58:	200a      	movs	r0, #10
 8005a5a:	f004 fb85 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 8005a5e:	492a      	ldr	r1, [pc, #168]	; (8005b08 <makeRelayOff2+0x110>)
 8005a60:	4826      	ldr	r0, [pc, #152]	; (8005afc <makeRelayOff2+0x104>)
 8005a62:	f005 faa9 	bl	800afb8 <UARTDMA_Print>
			SwitchesButtonState[2] = 0;
 8005a66:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <makeRelayOff2+0x108>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	709a      	strb	r2, [r3, #2]
			//EEPROM_RelayStateUpdate(3, 0);
		}

		if(ScheduleRelayAppliesTab[3] == 1)
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d109      	bne.n	8005a86 <makeRelayOff2+0x8e>
		{
			SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8005a72:	200c      	movs	r0, #12
 8005a74:	f004 fb78 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 8005a78:	4924      	ldr	r1, [pc, #144]	; (8005b0c <makeRelayOff2+0x114>)
 8005a7a:	4820      	ldr	r0, [pc, #128]	; (8005afc <makeRelayOff2+0x104>)
 8005a7c:	f005 fa9c 	bl	800afb8 <UARTDMA_Print>
			SwitchesButtonState[3] = 0;
 8005a80:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <makeRelayOff2+0x108>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	70da      	strb	r2, [r3, #3]
		if(ScheduleRelayAppliesTab[4] == 1)
		{
			//TODO! WS OFF
		}

		if(ScheduleRelayAppliesTab[5] == 1)
 8005a86:	7c7b      	ldrb	r3, [r7, #17]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d109      	bne.n	8005aa0 <makeRelayOff2+0xa8>
		{
			SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8005a8c:	200e      	movs	r0, #14
 8005a8e:	f004 fb6b 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 8005a92:	491f      	ldr	r1, [pc, #124]	; (8005b10 <makeRelayOff2+0x118>)
 8005a94:	4819      	ldr	r0, [pc, #100]	; (8005afc <makeRelayOff2+0x104>)
 8005a96:	f005 fa8f 	bl	800afb8 <UARTDMA_Print>
			LightsButtonState[0] = 0;
 8005a9a:	4b1e      	ldr	r3, [pc, #120]	; (8005b14 <makeRelayOff2+0x11c>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
			//EEPROM_LightStateUpdate(1, 0);
		}

		if(ScheduleRelayAppliesTab[6] == 1)
 8005aa0:	7cbb      	ldrb	r3, [r7, #18]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d109      	bne.n	8005aba <makeRelayOff2+0xc2>
		{
			SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8005aa6:	2010      	movs	r0, #16
 8005aa8:	f004 fb5e 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 8005aac:	491a      	ldr	r1, [pc, #104]	; (8005b18 <makeRelayOff2+0x120>)
 8005aae:	4813      	ldr	r0, [pc, #76]	; (8005afc <makeRelayOff2+0x104>)
 8005ab0:	f005 fa82 	bl	800afb8 <UARTDMA_Print>
			LightsButtonState[1] = 0;
 8005ab4:	4b17      	ldr	r3, [pc, #92]	; (8005b14 <makeRelayOff2+0x11c>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	705a      	strb	r2, [r3, #1]
			//EEPROM_LightStateUpdate(2, 0);
		}

		if(ScheduleRelayAppliesTab[7] == 1)
 8005aba:	7cfb      	ldrb	r3, [r7, #19]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d109      	bne.n	8005ad4 <makeRelayOff2+0xdc>
		{
			SendComand(UCMD_LIGHT_3_ON); // Send comannd to OFF
 8005ac0:	2011      	movs	r0, #17
 8005ac2:	f004 fb51 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 8005ac6:	4915      	ldr	r1, [pc, #84]	; (8005b1c <makeRelayOff2+0x124>)
 8005ac8:	480c      	ldr	r0, [pc, #48]	; (8005afc <makeRelayOff2+0x104>)
 8005aca:	f005 fa75 	bl	800afb8 <UARTDMA_Print>
			LightsButtonState[2] = 0;
 8005ace:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <makeRelayOff2+0x11c>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	709a      	strb	r2, [r3, #2]
			//EEPROM_LightStateUpdate(3, 0);
		}

		if(ScheduleRelayAppliesTab[8] == 1)
 8005ad4:	7d3b      	ldrb	r3, [r7, #20]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d109      	bne.n	8005aee <makeRelayOff2+0xf6>
		{
			SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8005ada:	2014      	movs	r0, #20
 8005adc:	f004 fb44 	bl	800a168 <SendComand>
			UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 8005ae0:	490f      	ldr	r1, [pc, #60]	; (8005b20 <makeRelayOff2+0x128>)
 8005ae2:	4806      	ldr	r0, [pc, #24]	; (8005afc <makeRelayOff2+0x104>)
 8005ae4:	f005 fa68 	bl	800afb8 <UARTDMA_Print>
			LightsButtonState[3] = 0;
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <makeRelayOff2+0x11c>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	70da      	strb	r2, [r3, #3]
			//EEPROM_LightStateUpdate(4, 0);
		}
}
 8005aee:	bf00      	nop
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	080174e0 	.word	0x080174e0
 8005afc:	20000654 	.word	0x20000654
 8005b00:	20000944 	.word	0x20000944
 8005b04:	080174ec 	.word	0x080174ec
 8005b08:	080174f8 	.word	0x080174f8
 8005b0c:	08017504 	.word	0x08017504
 8005b10:	08017510 	.word	0x08017510
 8005b14:	20000948 	.word	0x20000948
 8005b18:	0801751c 	.word	0x0801751c
 8005b1c:	08017528 	.word	0x08017528
 8005b20:	08017534 	.word	0x08017534

08005b24 <initWait>:


//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 8005b2c:	bf00      	nop
 8005b2e:	f005 fd5b 	bl	800b5e8 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <initWait+0x28>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d2f6      	bcs.n	8005b2e <initWait+0xa>
    {

    }
}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	2000031c 	.word	0x2000031c

08005b50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	; 0x28
 8005b54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b56:	f107 0314 	add.w	r3, r7, #20
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	605a      	str	r2, [r3, #4]
 8005b60:	609a      	str	r2, [r3, #8]
 8005b62:	60da      	str	r2, [r3, #12]
 8005b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	4b5f      	ldr	r3, [pc, #380]	; (8005ce8 <MX_GPIO_Init+0x198>)
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	4a5e      	ldr	r2, [pc, #376]	; (8005ce8 <MX_GPIO_Init+0x198>)
 8005b70:	f043 0304 	orr.w	r3, r3, #4
 8005b74:	6313      	str	r3, [r2, #48]	; 0x30
 8005b76:	4b5c      	ldr	r3, [pc, #368]	; (8005ce8 <MX_GPIO_Init+0x198>)
 8005b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	4b58      	ldr	r3, [pc, #352]	; (8005ce8 <MX_GPIO_Init+0x198>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	4a57      	ldr	r2, [pc, #348]	; (8005ce8 <MX_GPIO_Init+0x198>)
 8005b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b90:	6313      	str	r3, [r2, #48]	; 0x30
 8005b92:	4b55      	ldr	r3, [pc, #340]	; (8005ce8 <MX_GPIO_Init+0x198>)
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	4b51      	ldr	r3, [pc, #324]	; (8005ce8 <MX_GPIO_Init+0x198>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	4a50      	ldr	r2, [pc, #320]	; (8005ce8 <MX_GPIO_Init+0x198>)
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	6313      	str	r3, [r2, #48]	; 0x30
 8005bae:	4b4e      	ldr	r3, [pc, #312]	; (8005ce8 <MX_GPIO_Init+0x198>)
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	60bb      	str	r3, [r7, #8]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bba:	2300      	movs	r3, #0
 8005bbc:	607b      	str	r3, [r7, #4]
 8005bbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ce8 <MX_GPIO_Init+0x198>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	4a49      	ldr	r2, [pc, #292]	; (8005ce8 <MX_GPIO_Init+0x198>)
 8005bc4:	f043 0302 	orr.w	r3, r3, #2
 8005bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bca:	4b47      	ldr	r3, [pc, #284]	; (8005ce8 <MX_GPIO_Init+0x198>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	607b      	str	r3, [r7, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bdc:	4843      	ldr	r0, [pc, #268]	; (8005cec <MX_GPIO_Init+0x19c>)
 8005bde:	f006 fc7f 	bl	800c4e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005be2:	2200      	movs	r2, #0
 8005be4:	f247 4102 	movw	r1, #29698	; 0x7402
 8005be8:	4841      	ldr	r0, [pc, #260]	; (8005cf0 <MX_GPIO_Init+0x1a0>)
 8005bea:	f006 fc79 	bl	800c4e0 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bf4:	483f      	ldr	r0, [pc, #252]	; (8005cf4 <MX_GPIO_Init+0x1a4>)
 8005bf6:	f006 fc73 	bl	800c4e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c00:	2301      	movs	r3, #1
 8005c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005c0c:	f107 0314 	add.w	r3, r7, #20
 8005c10:	4619      	mov	r1, r3
 8005c12:	4836      	ldr	r0, [pc, #216]	; (8005cec <MX_GPIO_Init+0x19c>)
 8005c14:	f006 fac8 	bl	800c1a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 8005c18:	2310      	movs	r3, #16
 8005c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c1c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c22:	2301      	movs	r3, #1
 8005c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005c26:	f107 0314 	add.w	r3, r7, #20
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4831      	ldr	r0, [pc, #196]	; (8005cf4 <MX_GPIO_Init+0x1a4>)
 8005c2e:	f006 fabb 	bl	800c1a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005c32:	f247 4302 	movw	r3, #29698	; 0x7402
 8005c36:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c40:	2300      	movs	r3, #0
 8005c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c44:	f107 0314 	add.w	r3, r7, #20
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4829      	ldr	r0, [pc, #164]	; (8005cf0 <MX_GPIO_Init+0x1a0>)
 8005c4c:	f006 faac 	bl	800c1a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 8005c50:	2304      	movs	r3, #4
 8005c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005c54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005c5e:	f107 0314 	add.w	r3, r7, #20
 8005c62:	4619      	mov	r1, r3
 8005c64:	4822      	ldr	r0, [pc, #136]	; (8005cf0 <MX_GPIO_Init+0x1a0>)
 8005c66:	f006 fa9f 	bl	800c1a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 8005c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005c78:	f107 0314 	add.w	r3, r7, #20
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	481c      	ldr	r0, [pc, #112]	; (8005cf0 <MX_GPIO_Init+0x1a0>)
 8005c80:	f006 fa92 	bl	800c1a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005c94:	f107 0314 	add.w	r3, r7, #20
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4816      	ldr	r0, [pc, #88]	; (8005cf4 <MX_GPIO_Init+0x1a4>)
 8005c9c:	f006 fa84 	bl	800c1a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 8005ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 8005cb2:	f107 0314 	add.w	r3, r7, #20
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	480e      	ldr	r0, [pc, #56]	; (8005cf4 <MX_GPIO_Init+0x1a4>)
 8005cba:	f006 fa75 	bl	800c1a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	2008      	movs	r0, #8
 8005cc4:	f005 fdff 	bl	800b8c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005cc8:	2008      	movs	r0, #8
 8005cca:	f005 fe18 	bl	800b8fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	2017      	movs	r0, #23
 8005cd4:	f005 fdf7 	bl	800b8c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005cd8:	2017      	movs	r0, #23
 8005cda:	f005 fe10 	bl	800b8fe <HAL_NVIC_EnableIRQ>

}
 8005cde:	bf00      	nop
 8005ce0:	3728      	adds	r7, #40	; 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	40020800 	.word	0x40020800
 8005cf0:	40020400 	.word	0x40020400
 8005cf4:	40020000 	.word	0x40020000

08005cf8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005cfc:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <MX_I2C1_Init+0x50>)
 8005cfe:	4a13      	ldr	r2, [pc, #76]	; (8005d4c <MX_I2C1_Init+0x54>)
 8005d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005d02:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <MX_I2C1_Init+0x50>)
 8005d04:	4a12      	ldr	r2, [pc, #72]	; (8005d50 <MX_I2C1_Init+0x58>)
 8005d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d08:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <MX_I2C1_Init+0x50>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <MX_I2C1_Init+0x50>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d14:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <MX_I2C1_Init+0x50>)
 8005d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <MX_I2C1_Init+0x50>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d22:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <MX_I2C1_Init+0x50>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d28:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <MX_I2C1_Init+0x50>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <MX_I2C1_Init+0x50>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d34:	4804      	ldr	r0, [pc, #16]	; (8005d48 <MX_I2C1_Init+0x50>)
 8005d36:	f006 fc1f 	bl	800c578 <HAL_I2C_Init>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005d40:	f000 faa2 	bl	8006288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d44:	bf00      	nop
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20000320 	.word	0x20000320
 8005d4c:	40005400 	.word	0x40005400
 8005d50:	00061a80 	.word	0x00061a80

08005d54 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005d58:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <MX_I2C3_Init+0x50>)
 8005d5a:	4a13      	ldr	r2, [pc, #76]	; (8005da8 <MX_I2C3_Init+0x54>)
 8005d5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <MX_I2C3_Init+0x50>)
 8005d60:	4a12      	ldr	r2, [pc, #72]	; (8005dac <MX_I2C3_Init+0x58>)
 8005d62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d64:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <MX_I2C3_Init+0x50>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005d6a:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <MX_I2C3_Init+0x50>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d70:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <MX_I2C3_Init+0x50>)
 8005d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d76:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <MX_I2C3_Init+0x50>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005d7e:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <MX_I2C3_Init+0x50>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d84:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <MX_I2C3_Init+0x50>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <MX_I2C3_Init+0x50>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005d90:	4804      	ldr	r0, [pc, #16]	; (8005da4 <MX_I2C3_Init+0x50>)
 8005d92:	f006 fbf1 	bl	800c578 <HAL_I2C_Init>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005d9c:	f000 fa74 	bl	8006288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005da0:	bf00      	nop
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20000374 	.word	0x20000374
 8005da8:	40005c00 	.word	0x40005c00
 8005dac:	000186a0 	.word	0x000186a0

08005db0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08c      	sub	sp, #48	; 0x30
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005db8:	f107 031c 	add.w	r3, r7, #28
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	605a      	str	r2, [r3, #4]
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	60da      	str	r2, [r3, #12]
 8005dc6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a74      	ldr	r2, [pc, #464]	; (8005fa0 <HAL_I2C_MspInit+0x1f0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	f040 8091 	bne.w	8005ef6 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	4b72      	ldr	r3, [pc, #456]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	4a71      	ldr	r2, [pc, #452]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005dde:	f043 0302 	orr.w	r3, r3, #2
 8005de2:	6313      	str	r3, [r2, #48]	; 0x30
 8005de4:	4b6f      	ldr	r3, [pc, #444]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 8005df0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005df6:	2312      	movs	r3, #18
 8005df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e02:	2304      	movs	r3, #4
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e06:	f107 031c 	add.w	r3, r7, #28
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4866      	ldr	r0, [pc, #408]	; (8005fa8 <HAL_I2C_MspInit+0x1f8>)
 8005e0e:	f006 f9cb 	bl	800c1a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	4b63      	ldr	r3, [pc, #396]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	4a62      	ldr	r2, [pc, #392]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005e1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e20:	6413      	str	r3, [r2, #64]	; 0x40
 8005e22:	4b60      	ldr	r3, [pc, #384]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005e2e:	4b5f      	ldr	r3, [pc, #380]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e30:	4a5f      	ldr	r2, [pc, #380]	; (8005fb0 <HAL_I2C_MspInit+0x200>)
 8005e32:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005e34:	4b5d      	ldr	r3, [pc, #372]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e3a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e3c:	4b5b      	ldr	r3, [pc, #364]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e42:	4b5a      	ldr	r3, [pc, #360]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e48:	4b58      	ldr	r3, [pc, #352]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e4e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e50:	4b56      	ldr	r3, [pc, #344]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e56:	4b55      	ldr	r3, [pc, #340]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005e5c:	4b53      	ldr	r3, [pc, #332]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e62:	4b52      	ldr	r3, [pc, #328]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e68:	4b50      	ldr	r3, [pc, #320]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005e6e:	484f      	ldr	r0, [pc, #316]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e70:	f005 fd8a 	bl	800b988 <HAL_DMA_Init>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8005e7a:	f000 fa05 	bl	8006288 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a4a      	ldr	r2, [pc, #296]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e82:	639a      	str	r2, [r3, #56]	; 0x38
 8005e84:	4a49      	ldr	r2, [pc, #292]	; (8005fac <HAL_I2C_MspInit+0x1fc>)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005e8c:	4a4a      	ldr	r2, [pc, #296]	; (8005fb8 <HAL_I2C_MspInit+0x208>)
 8005e8e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8005e90:	4b48      	ldr	r3, [pc, #288]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e96:	4b47      	ldr	r3, [pc, #284]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005e98:	2240      	movs	r2, #64	; 0x40
 8005e9a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e9c:	4b45      	ldr	r3, [pc, #276]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ea2:	4b44      	ldr	r3, [pc, #272]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ea8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005eaa:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005eb0:	4b40      	ldr	r3, [pc, #256]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005eb6:	4b3f      	ldr	r3, [pc, #252]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005ebc:	4b3d      	ldr	r3, [pc, #244]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ec2:	4b3c      	ldr	r3, [pc, #240]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005ec8:	483a      	ldr	r0, [pc, #232]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005eca:	f005 fd5d 	bl	800b988 <HAL_DMA_Init>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005ed4:	f000 f9d8 	bl	8006288 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a36      	ldr	r2, [pc, #216]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005edc:	635a      	str	r2, [r3, #52]	; 0x34
 8005ede:	4a35      	ldr	r2, [pc, #212]	; (8005fb4 <HAL_I2C_MspInit+0x204>)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	2020      	movs	r0, #32
 8005eea:	f005 fcec 	bl	800b8c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005eee:	2020      	movs	r0, #32
 8005ef0:	f005 fd05 	bl	800b8fe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005ef4:	e050      	b.n	8005f98 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a30      	ldr	r2, [pc, #192]	; (8005fbc <HAL_I2C_MspInit+0x20c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d14b      	bne.n	8005f98 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f00:	2300      	movs	r3, #0
 8005f02:	613b      	str	r3, [r7, #16]
 8005f04:	4b27      	ldr	r3, [pc, #156]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	4a26      	ldr	r2, [pc, #152]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005f0a:	f043 0301 	orr.w	r3, r3, #1
 8005f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f10:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	4b20      	ldr	r3, [pc, #128]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	4a1f      	ldr	r2, [pc, #124]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005f26:	f043 0302 	orr.w	r3, r3, #2
 8005f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f2c:	4b1d      	ldr	r3, [pc, #116]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 8005f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f3e:	2312      	movs	r3, #18
 8005f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f46:	2303      	movs	r3, #3
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005f4a:	2304      	movs	r3, #4
 8005f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005f4e:	f107 031c 	add.w	r3, r7, #28
 8005f52:	4619      	mov	r1, r3
 8005f54:	481a      	ldr	r0, [pc, #104]	; (8005fc0 <HAL_I2C_MspInit+0x210>)
 8005f56:	f006 f927 	bl	800c1a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 8005f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f60:	2312      	movs	r3, #18
 8005f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005f6c:	2309      	movs	r3, #9
 8005f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005f70:	f107 031c 	add.w	r3, r7, #28
 8005f74:	4619      	mov	r1, r3
 8005f76:	480c      	ldr	r0, [pc, #48]	; (8005fa8 <HAL_I2C_MspInit+0x1f8>)
 8005f78:	f006 f916 	bl	800c1a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	4a07      	ldr	r2, [pc, #28]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005f86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <HAL_I2C_MspInit+0x1f4>)
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f94:	60bb      	str	r3, [r7, #8]
 8005f96:	68bb      	ldr	r3, [r7, #8]
}
 8005f98:	bf00      	nop
 8005f9a:	3730      	adds	r7, #48	; 0x30
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40005400 	.word	0x40005400
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	40020400 	.word	0x40020400
 8005fac:	200003c8 	.word	0x200003c8
 8005fb0:	40026010 	.word	0x40026010
 8005fb4:	20000428 	.word	0x20000428
 8005fb8:	40026028 	.word	0x40026028
 8005fbc:	40005c00 	.word	0x40005c00
 8005fc0:	40020000 	.word	0x40020000

08005fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005fca:	f005 faa7 	bl	800b51c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005fce:	f000 f87f 	bl	80060d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005fd2:	f7ff fdbd 	bl	8005b50 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005fd6:	f004 faa9 	bl	800a52c <MX_SPI1_Init>
  MX_DMA_Init();
 8005fda:	f7fc fbcf 	bl	800277c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005fde:	f005 f8d7 	bl	800b190 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8005fe2:	f004 fad9 	bl	800a598 <MX_SPI3_Init>
  MX_I2C1_Init();
 8005fe6:	f7ff fe87 	bl	8005cf8 <MX_I2C1_Init>
  MX_TIM11_Init();
 8005fea:	f004 fe53 	bl	800ac94 <MX_TIM11_Init>
  MX_TIM10_Init();
 8005fee:	f004 fe2d 	bl	800ac4c <MX_TIM10_Init>
  MX_I2C3_Init();
 8005ff2:	f7ff feaf 	bl	8005d54 <MX_I2C3_Init>
  MX_SPI5_Init();
 8005ff6:	f004 fb05 	bl	800a604 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8005ffa:	f005 f89f 	bl	800b13c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8005ffe:	f004 fdd1 	bl	800aba4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8006002:	f000 f8cd 	bl	80061a0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8006006:	4829      	ldr	r0, [pc, #164]	; (80060ac <main+0xe8>)
 8006008:	f7fc f918 	bl	800223c <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 800600c:	4928      	ldr	r1, [pc, #160]	; (80060b0 <main+0xec>)
 800600e:	4829      	ldr	r0, [pc, #164]	; (80060b4 <main+0xf0>)
 8006010:	f005 f845 	bl	800b09e <UARTDMA_Init>
  UARTDMA_Init(&huartdma1, &huart1);
 8006014:	4928      	ldr	r1, [pc, #160]	; (80060b8 <main+0xf4>)
 8006016:	4829      	ldr	r0, [pc, #164]	; (80060bc <main+0xf8>)
 8006018:	f005 f841 	bl	800b09e <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 800601c:	2117      	movs	r1, #23
 800601e:	4828      	ldr	r0, [pc, #160]	; (80060c0 <main+0xfc>)
 8006020:	f7fc fb5c 	bl	80026dc <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 8006024:	4827      	ldr	r0, [pc, #156]	; (80060c4 <main+0x100>)
 8006026:	f7fc fbff 	bl	8002828 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800602a:	2001      	movs	r0, #1
 800602c:	f7fc fc56 	bl	80028dc <DS3231_SetInterruptMode>
  DS3231_SetRateSelect(DS3231_1HZ);
 8006030:	2000      	movs	r0, #0
 8006032:	f7fc fc73 	bl	800291c <DS3231_SetRateSelect>
  DS3231_EnableOscillator(DS3231_ENABLED);
 8006036:	2001      	movs	r0, #1
 8006038:	f7fc fc90 	bl	800295c <DS3231_EnableOscillator>
  // EEPROM CHECK TODO! Add check of eeprom and informing on screen about results
  uint8_t result = 0;
 800603c:	2300      	movs	r3, #0
 800603e:	71fb      	strb	r3, [r7, #7]
  eeprom_read(0x01, &result, sizeof(result));
 8006040:	1dfb      	adds	r3, r7, #7
 8006042:	2201      	movs	r2, #1
 8006044:	4619      	mov	r1, r3
 8006046:	2001      	movs	r0, #1
 8006048:	f7fc fdd4 	bl	8002bf4 <eeprom_read>

  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 800604c:	481e      	ldr	r0, [pc, #120]	; (80060c8 <main+0x104>)
 800604e:	f00a fc53 	bl	80108f8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8006052:	213c      	movs	r1, #60	; 0x3c
 8006054:	481d      	ldr	r0, [pc, #116]	; (80060cc <main+0x108>)
 8006056:	f00a fd86 	bl	8010b66 <HAL_TIM_Encoder_Start>

  int16_t EncoderValue = 0;
 800605a:	2300      	movs	r3, #0
 800605c:	80bb      	strh	r3, [r7, #4]
  {

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 800605e:	4815      	ldr	r0, [pc, #84]	; (80060b4 <main+0xf0>)
 8006060:	f004 ffd0 	bl	800b004 <UARTDMA_IsDataReceivedReady>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <main+0xac>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 800606a:	4812      	ldr	r0, [pc, #72]	; (80060b4 <main+0xf0>)
 800606c:	f003 fd86 	bl	8009b7c <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8006070:	4810      	ldr	r0, [pc, #64]	; (80060b4 <main+0xf0>)
 8006072:	f004 ffd9 	bl	800b028 <UARTDMA_TransmitEvent>

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM ESP
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma1))
 8006076:	4811      	ldr	r0, [pc, #68]	; (80060bc <main+0xf8>)
 8006078:	f004 ffc4 	bl	800b004 <UARTDMA_IsDataReceivedReady>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <main+0xc4>
	  {
		  UART_ESP_ParseLine(&huartdma1); // Parsing function
 8006082:	480e      	ldr	r0, [pc, #56]	; (80060bc <main+0xf8>)
 8006084:	f7fa ffd0 	bl	8001028 <UART_ESP_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO ESP
	  //
	  UARTDMA_TransmitEvent(&huartdma1);
 8006088:	480c      	ldr	r0, [pc, #48]	; (80060bc <main+0xf8>)
 800608a:	f004 ffcd 	bl	800b028 <UARTDMA_TransmitEvent>

	  ////////////////////////////////////////////////////////
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 800608e:	f7fc fa53 	bl	8002538 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 8006092:	f000 f935 	bl	8006300 <MenuTFT>
	  ////////////////////////////////////////////////////////

	  EncoderValue = __HAL_TIM_GET_COUNTER(&htim2);
 8006096:	4b0d      	ldr	r3, [pc, #52]	; (80060cc <main+0x108>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	b21b      	sxth	r3, r3
 800609e:	80bb      	strh	r3, [r7, #4]
	  encoderUpgrade(&EncoderValue);
 80060a0:	1d3b      	adds	r3, r7, #4
 80060a2:	4618      	mov	r0, r3
 80060a4:	f003 fbde 	bl	8009864 <encoderUpgrade>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80060a8:	e7d9      	b.n	800605e <main+0x9a>
 80060aa:	bf00      	nop
 80060ac:	2000098c 	.word	0x2000098c
 80060b0:	20000bb4 	.word	0x20000bb4
 80060b4:	20000488 	.word	0x20000488
 80060b8:	20000b70 	.word	0x20000b70
 80060bc:	20000654 	.word	0x20000654
 80060c0:	200009e4 	.word	0x200009e4
 80060c4:	20000320 	.word	0x20000320
 80060c8:	20000b28 	.word	0x20000b28
 80060cc:	20000a98 	.word	0x20000a98

080060d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b094      	sub	sp, #80	; 0x50
 80060d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060d6:	f107 0320 	add.w	r3, r7, #32
 80060da:	2230      	movs	r2, #48	; 0x30
 80060dc:	2100      	movs	r1, #0
 80060de:	4618      	mov	r0, r3
 80060e0:	f00c fa46 	bl	8012570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060e4:	f107 030c 	add.w	r3, r7, #12
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	605a      	str	r2, [r3, #4]
 80060ee:	609a      	str	r2, [r3, #8]
 80060f0:	60da      	str	r2, [r3, #12]
 80060f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80060f4:	2300      	movs	r3, #0
 80060f6:	60bb      	str	r3, [r7, #8]
 80060f8:	4b27      	ldr	r3, [pc, #156]	; (8006198 <SystemClock_Config+0xc8>)
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	4a26      	ldr	r2, [pc, #152]	; (8006198 <SystemClock_Config+0xc8>)
 80060fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006102:	6413      	str	r3, [r2, #64]	; 0x40
 8006104:	4b24      	ldr	r3, [pc, #144]	; (8006198 <SystemClock_Config+0xc8>)
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006110:	2300      	movs	r3, #0
 8006112:	607b      	str	r3, [r7, #4]
 8006114:	4b21      	ldr	r3, [pc, #132]	; (800619c <SystemClock_Config+0xcc>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a20      	ldr	r2, [pc, #128]	; (800619c <SystemClock_Config+0xcc>)
 800611a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800611e:	6013      	str	r3, [r2, #0]
 8006120:	4b1e      	ldr	r3, [pc, #120]	; (800619c <SystemClock_Config+0xcc>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006128:	607b      	str	r3, [r7, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800612c:	2301      	movs	r3, #1
 800612e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006130:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006136:	2302      	movs	r3, #2
 8006138:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800613a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8006140:	230c      	movs	r3, #12
 8006142:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8006144:	2360      	movs	r3, #96	; 0x60
 8006146:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006148:	2302      	movs	r3, #2
 800614a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800614c:	2304      	movs	r3, #4
 800614e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006150:	f107 0320 	add.w	r3, r7, #32
 8006154:	4618      	mov	r0, r3
 8006156:	f009 fb13 	bl	800f780 <HAL_RCC_OscConfig>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006160:	f000 f892 	bl	8006288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006164:	230f      	movs	r3, #15
 8006166:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006168:	2302      	movs	r3, #2
 800616a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006174:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006176:	2300      	movs	r3, #0
 8006178:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800617a:	f107 030c 	add.w	r3, r7, #12
 800617e:	2103      	movs	r1, #3
 8006180:	4618      	mov	r0, r3
 8006182:	f009 fd75 	bl	800fc70 <HAL_RCC_ClockConfig>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800618c:	f000 f87c 	bl	8006288 <Error_Handler>
  }
}
 8006190:	bf00      	nop
 8006192:	3750      	adds	r7, #80	; 0x50
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40023800 	.word	0x40023800
 800619c:	40007000 	.word	0x40007000

080061a0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80061a4:	2200      	movs	r2, #0
 80061a6:	2100      	movs	r1, #0
 80061a8:	200a      	movs	r0, #10
 80061aa:	f005 fb8c 	bl	800b8c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80061ae:	200a      	movs	r0, #10
 80061b0:	f005 fba5 	bl	800b8fe <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80061b4:	2200      	movs	r2, #0
 80061b6:	2100      	movs	r1, #0
 80061b8:	201f      	movs	r0, #31
 80061ba:	f005 fb84 	bl	800b8c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80061be:	201f      	movs	r0, #31
 80061c0:	f005 fb9d 	bl	800b8fe <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061c4:	2200      	movs	r2, #0
 80061c6:	2100      	movs	r1, #0
 80061c8:	2026      	movs	r0, #38	; 0x26
 80061ca:	f005 fb7c 	bl	800b8c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061ce:	2026      	movs	r0, #38	; 0x26
 80061d0:	f005 fb95 	bl	800b8fe <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80061d4:	2200      	movs	r2, #0
 80061d6:	2100      	movs	r1, #0
 80061d8:	2033      	movs	r0, #51	; 0x33
 80061da:	f005 fb74 	bl	800b8c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80061de:	2033      	movs	r0, #51	; 0x33
 80061e0:	f005 fb8d 	bl	800b8fe <HAL_NVIC_EnableIRQ>
}
 80061e4:	bf00      	nop
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a14      	ldr	r2, [pc, #80]	; (8006248 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d101      	bne.n	80061fe <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 80061fa:	f7fe ff11 	bl	8005020 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a12      	ldr	r2, [pc, #72]	; (800624c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d11a      	bne.n	800623e <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		//TODO! Make possibility to change FEEDING_TIME_IN_S
		if(FeedingCounter >= activitiesDurationTimeInSeconds) // timer to count seconds from start feeding to turn off this activity
 8006208:	4b11      	ldr	r3, [pc, #68]	; (8006250 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	4b11      	ldr	r3, [pc, #68]	; (8006254 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d30d      	bcc.n	8006232 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8006216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800621a:	480f      	ldr	r0, [pc, #60]	; (8006258 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800621c:	f006 f979 	bl	800c512 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8006220:	2000      	movs	r0, #0
 8006222:	f7fe ff93 	bl	800514c <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 800622c:	480b      	ldr	r0, [pc, #44]	; (800625c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800622e:	f00a fbc5 	bl	80109bc <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8006232:	4b07      	ldr	r3, [pc, #28]	; (8006250 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	b2da      	uxtb	r2, r3
 800623a:	4b05      	ldr	r3, [pc, #20]	; (8006250 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800623c:	701a      	strb	r2, [r3, #0]
	}
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40014800 	.word	0x40014800
 800624c:	40014400 	.word	0x40014400
 8006250:	20000860 	.word	0x20000860
 8006254:	20000898 	.word	0x20000898
 8006258:	40020800 	.word	0x40020800
 800625c:	20000ae0 	.word	0x20000ae0

08006260 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006270:	d101      	bne.n	8006276 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8006272:	f7fc fa27 	bl	80026c4 <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	2b10      	cmp	r3, #16
 800627a:	d101      	bne.n	8006280 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 800627c:	f7fc fbb2 	bl	80029e4 <DS3231_ClearAlarm2Flag>
	}
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 800628e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006292:	f7fb ff75 	bl	8002180 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 8006296:	4814      	ldr	r0, [pc, #80]	; (80062e8 <Error_Handler+0x60>)
 8006298:	f7fb fb6e 	bl	8001978 <EF_SetFont>
	sprintf((char*)MsgMain, "Error in Function: %s\n", __FILE__);
 800629c:	4a13      	ldr	r2, [pc, #76]	; (80062ec <Error_Handler+0x64>)
 800629e:	4914      	ldr	r1, [pc, #80]	; (80062f0 <Error_Handler+0x68>)
 80062a0:	4814      	ldr	r0, [pc, #80]	; (80062f4 <Error_Handler+0x6c>)
 80062a2:	f00c ffed 	bl	8013280 <siprintf>
	EF_PutString(MsgMain, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 80062a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	2301      	movs	r3, #1
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	2300      	movs	r3, #0
 80062b2:	2214      	movs	r2, #20
 80062b4:	210a      	movs	r1, #10
 80062b6:	480f      	ldr	r0, [pc, #60]	; (80062f4 <Error_Handler+0x6c>)
 80062b8:	f7fb fd78 	bl	8001dac <EF_PutString>
	sprintf((char*)MsgMain, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 80062bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80062c0:	4a0d      	ldr	r2, [pc, #52]	; (80062f8 <Error_Handler+0x70>)
 80062c2:	490e      	ldr	r1, [pc, #56]	; (80062fc <Error_Handler+0x74>)
 80062c4:	480b      	ldr	r0, [pc, #44]	; (80062f4 <Error_Handler+0x6c>)
 80062c6:	f00c ffdb 	bl	8013280 <siprintf>
	EF_PutString(MsgMain, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 80062ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	2301      	movs	r3, #1
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	2300      	movs	r3, #0
 80062d6:	2232      	movs	r2, #50	; 0x32
 80062d8:	210a      	movs	r1, #10
 80062da:	4806      	ldr	r0, [pc, #24]	; (80062f4 <Error_Handler+0x6c>)
 80062dc:	f7fb fd66 	bl	8001dac <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062e0:	b672      	cpsid	i
}
 80062e2:	bf00      	nop

  __disable_irq();

  while (1)
 80062e4:	e7fe      	b.n	80062e4 <Error_Handler+0x5c>
 80062e6:	bf00      	nop
 80062e8:	08028c04 	.word	0x08028c04
 80062ec:	08017540 	.word	0x08017540
 80062f0:	08017554 	.word	0x08017554
 80062f4:	20000820 	.word	0x20000820
 80062f8:	08028134 	.word	0x08028134
 80062fc:	0801756c 	.word	0x0801756c

08006300 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
	switch(State)
 8006304:	4b5b      	ldr	r3, [pc, #364]	; (8006474 <MenuTFT+0x174>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b08      	cmp	r3, #8
 800630a:	f200 80b0 	bhi.w	800646e <MenuTFT+0x16e>
 800630e:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <MenuTFT+0x14>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	08006339 	.word	0x08006339
 8006318:	0800634b 	.word	0x0800634b
 800631c:	08006385 	.word	0x08006385
 8006320:	080063c1 	.word	0x080063c1
 8006324:	080063e5 	.word	0x080063e5
 8006328:	080063a3 	.word	0x080063a3
 800632c:	08006403 	.word	0x08006403
 8006330:	08006427 	.word	0x08006427
 8006334:	0800644b 	.word	0x0800644b
	{
	case MENUTFT_INIT:
		system_init();
 8006338:	f7fd f89a 	bl	8003470 <system_init>
		State = MENUTFT_PARAMETERS;
 800633c:	4b4d      	ldr	r3, [pc, #308]	; (8006474 <MenuTFT+0x174>)
 800633e:	2201      	movs	r2, #1
 8006340:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8006342:	4b4d      	ldr	r3, [pc, #308]	; (8006478 <MenuTFT+0x178>)
 8006344:	2201      	movs	r2, #1
 8006346:	701a      	strb	r2, [r3, #0]
		break;
 8006348:	e091      	b.n	800646e <MenuTFT+0x16e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 800634a:	4b4b      	ldr	r3, [pc, #300]	; (8006478 <MenuTFT+0x178>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d115      	bne.n	800637e <MenuTFT+0x7e>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8006352:	4b4a      	ldr	r3, [pc, #296]	; (800647c <MenuTFT+0x17c>)
 8006354:	edd3 7a00 	vldr	s15, [r3]
 8006358:	4b49      	ldr	r3, [pc, #292]	; (8006480 <MenuTFT+0x180>)
 800635a:	ed93 7a00 	vldr	s14, [r3]
 800635e:	eeb0 1a47 	vmov.f32	s2, s14
 8006362:	2100      	movs	r1, #0
 8006364:	2000      	movs	r0, #0
 8006366:	eddf 0a47 	vldr	s1, [pc, #284]	; 8006484 <MenuTFT+0x184>
 800636a:	eeb0 0a67 	vmov.f32	s0, s15
 800636e:	f7fd f9fd 	bl	800376c <showCurrentParameters>
			EncoderState = ENCODER_IDLE;
 8006372:	4b45      	ldr	r3, [pc, #276]	; (8006488 <MenuTFT+0x188>)
 8006374:	2200      	movs	r2, #0
 8006376:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006378:	4b3f      	ldr	r3, [pc, #252]	; (8006478 <MenuTFT+0x178>)
 800637a:	2200      	movs	r2, #0
 800637c:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 800637e:	f000 f88b 	bl	8006498 <TouchParametersActivity>
		break;
 8006382:	e074      	b.n	800646e <MenuTFT+0x16e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8006384:	4b3c      	ldr	r3, [pc, #240]	; (8006478 <MenuTFT+0x178>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d107      	bne.n	800639c <MenuTFT+0x9c>
		{
			showControlPanel();
 800638c:	f7fd fb38 	bl	8003a00 <showControlPanel>
			EncoderState = ENCODER_IDLE;
 8006390:	4b3d      	ldr	r3, [pc, #244]	; (8006488 <MenuTFT+0x188>)
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006396:	4b38      	ldr	r3, [pc, #224]	; (8006478 <MenuTFT+0x178>)
 8006398:	2200      	movs	r2, #0
 800639a:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 800639c:	f000 f8dc 	bl	8006558 <TouchSwitchActivity>
		break;
 80063a0:	e065      	b.n	800646e <MenuTFT+0x16e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 80063a2:	4b35      	ldr	r3, [pc, #212]	; (8006478 <MenuTFT+0x178>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d107      	bne.n	80063ba <MenuTFT+0xba>
		{
			showLightsControlPanel();
 80063aa:	f7fd fc03 	bl	8003bb4 <showLightsControlPanel>
			EncoderState = ENCODER_IDLE;
 80063ae:	4b36      	ldr	r3, [pc, #216]	; (8006488 <MenuTFT+0x188>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80063b4:	4b30      	ldr	r3, [pc, #192]	; (8006478 <MenuTFT+0x178>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 80063ba:	f000 f93f 	bl	800663c <TouchLightsActivity>
		break;
 80063be:	e056      	b.n	800646e <MenuTFT+0x16e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 80063c0:	4b2d      	ldr	r3, [pc, #180]	; (8006478 <MenuTFT+0x178>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d10a      	bne.n	80063de <MenuTFT+0xde>
		{
			showClockSetPanel();
 80063c8:	f7fd fccc 	bl	8003d64 <showClockSetPanel>
			EncoderState = ENCODER_IDLE;
 80063cc:	4b2e      	ldr	r3, [pc, #184]	; (8006488 <MenuTFT+0x188>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]
			ClockChangeFlag = 1;
 80063d2:	4b2e      	ldr	r3, [pc, #184]	; (800648c <MenuTFT+0x18c>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80063d8:	4b27      	ldr	r3, [pc, #156]	; (8006478 <MenuTFT+0x178>)
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 80063de:	f000 f99d 	bl	800671c <TouchClockActivity>
		break;
 80063e2:	e044      	b.n	800646e <MenuTFT+0x16e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 80063e4:	4b24      	ldr	r3, [pc, #144]	; (8006478 <MenuTFT+0x178>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d107      	bne.n	80063fc <MenuTFT+0xfc>
		{
			showPreparedActivitiesPanel();
 80063ec:	f7fd fe22 	bl	8004034 <showPreparedActivitiesPanel>
			EncoderState = ENCODER_ACTIVITIES;
 80063f0:	4b25      	ldr	r3, [pc, #148]	; (8006488 <MenuTFT+0x188>)
 80063f2:	2205      	movs	r2, #5
 80063f4:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 80063f6:	4b20      	ldr	r3, [pc, #128]	; (8006478 <MenuTFT+0x178>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 80063fc:	f000 fa5a 	bl	80068b4 <TouchPredefinedActivityActivity>
		break;
 8006400:	e035      	b.n	800646e <MenuTFT+0x16e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8006402:	4b1d      	ldr	r3, [pc, #116]	; (8006478 <MenuTFT+0x178>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d10a      	bne.n	8006420 <MenuTFT+0x120>
		{
			showWSLedPanel();
 800640a:	f7fd ff61 	bl	80042d0 <showWSLedPanel>
			EncoderState = ENCODER_WS_LED;
 800640e:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <MenuTFT+0x188>)
 8006410:	2204      	movs	r2, #4
 8006412:	701a      	strb	r2, [r3, #0]
			WSLedChangeFlag = 1;
 8006414:	4b1e      	ldr	r3, [pc, #120]	; (8006490 <MenuTFT+0x190>)
 8006416:	2201      	movs	r2, #1
 8006418:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 800641a:	4b17      	ldr	r3, [pc, #92]	; (8006478 <MenuTFT+0x178>)
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8006420:	f000 fac0 	bl	80069a4 <TouchWSLedActivity>
		break;
 8006424:	e023      	b.n	800646e <MenuTFT+0x16e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8006426:	4b14      	ldr	r3, [pc, #80]	; (8006478 <MenuTFT+0x178>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d10a      	bne.n	8006444 <MenuTFT+0x144>
		{
			showSchedule1Panel();
 800642e:	f7fe fceb 	bl	8004e08 <showSchedule1Panel>
			EncoderState = ENCODER_IDLE;
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <MenuTFT+0x188>)
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]
			ScheduleChangeFlag = 1;
 8006438:	4b16      	ldr	r3, [pc, #88]	; (8006494 <MenuTFT+0x194>)
 800643a:	2201      	movs	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 800643e:	4b0e      	ldr	r3, [pc, #56]	; (8006478 <MenuTFT+0x178>)
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8006444:	f000 fb1a 	bl	8006a7c <Schedule1Activity>
		break;
 8006448:	e011      	b.n	800646e <MenuTFT+0x16e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 800644a:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <MenuTFT+0x178>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d10a      	bne.n	8006468 <MenuTFT+0x168>
		{
			showSchedule2Panel();
 8006452:	f7fe fd6d 	bl	8004f30 <showSchedule2Panel>
			EncoderState = ENCODER_IDLE;
 8006456:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <MenuTFT+0x188>)
 8006458:	2200      	movs	r2, #0
 800645a:	701a      	strb	r2, [r3, #0]
			ScheduleChangeFlag = 1;
 800645c:	4b0d      	ldr	r3, [pc, #52]	; (8006494 <MenuTFT+0x194>)
 800645e:	2201      	movs	r2, #1
 8006460:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <MenuTFT+0x178>)
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8006468:	f000 fc0a 	bl	8006c80 <Schedule2Activity>
		break;
 800646c:	bf00      	nop
	}
}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	200008e8 	.word	0x200008e8
 8006478:	20000861 	.word	0x20000861
 800647c:	20000930 	.word	0x20000930
 8006480:	20000938 	.word	0x20000938
 8006484:	00000000 	.word	0x00000000
 8006488:	200008e9 	.word	0x200008e9
 800648c:	20000862 	.word	0x20000862
 8006490:	20000863 	.word	0x20000863
 8006494:	20000864 	.word	0x20000864

08006498 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800649e:	f7fc f839 	bl	8002514 <XPT2046_IsTouched>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d04c      	beq.n	8006542 <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80064a8:	f005 f89e 	bl	800b5e8 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	4b27      	ldr	r3, [pc, #156]	; (800654c <TouchParametersActivity+0xb4>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b8:	d343      	bcc.n	8006542 <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80064ba:	1d3a      	adds	r2, r7, #4
 80064bc:	1dbb      	adds	r3, r7, #6
 80064be:	4611      	mov	r1, r2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fb ffe9 	bl	8002498 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	2b09      	cmp	r3, #9
 80064ca:	d90f      	bls.n	80064ec <TouchParametersActivity+0x54>
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	2b6e      	cmp	r3, #110	; 0x6e
 80064d0:	d80c      	bhi.n	80064ec <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80064d2:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80064d4:	2bd7      	cmp	r3, #215	; 0xd7
 80064d6:	d909      	bls.n	80064ec <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80064d8:	88bb      	ldrh	r3, [r7, #4]
 80064da:	2bec      	cmp	r3, #236	; 0xec
 80064dc:	d806      	bhi.n	80064ec <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 80064de:	4b1c      	ldr	r3, [pc, #112]	; (8006550 <TouchParametersActivity+0xb8>)
 80064e0:	2205      	movs	r2, #5
 80064e2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80064e4:	4b1b      	ldr	r3, [pc, #108]	; (8006554 <TouchParametersActivity+0xbc>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	e025      	b.n	8006538 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80064ec:	88fb      	ldrh	r3, [r7, #6]
 80064ee:	2bdb      	cmp	r3, #219	; 0xdb
 80064f0:	d910      	bls.n	8006514 <TouchParametersActivity+0x7c>
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80064f8:	d20c      	bcs.n	8006514 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80064fa:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80064fc:	2bd7      	cmp	r3, #215	; 0xd7
 80064fe:	d909      	bls.n	8006514 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006500:	88bb      	ldrh	r3, [r7, #4]
 8006502:	2bec      	cmp	r3, #236	; 0xec
 8006504:	d806      	bhi.n	8006514 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8006506:	4b12      	ldr	r3, [pc, #72]	; (8006550 <TouchParametersActivity+0xb8>)
 8006508:	2202      	movs	r2, #2
 800650a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800650c:	4b11      	ldr	r3, [pc, #68]	; (8006554 <TouchParametersActivity+0xbc>)
 800650e:	2201      	movs	r2, #1
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	e011      	b.n	8006538 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	2b77      	cmp	r3, #119	; 0x77
 8006518:	d90e      	bls.n	8006538 <TouchParametersActivity+0xa0>
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	2bd2      	cmp	r3, #210	; 0xd2
 800651e:	d80b      	bhi.n	8006538 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006520:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006522:	2bd7      	cmp	r3, #215	; 0xd7
 8006524:	d908      	bls.n	8006538 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006526:	88bb      	ldrh	r3, [r7, #4]
 8006528:	2bec      	cmp	r3, #236	; 0xec
 800652a:	d805      	bhi.n	8006538 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 800652c:	4b08      	ldr	r3, [pc, #32]	; (8006550 <TouchParametersActivity+0xb8>)
 800652e:	2203      	movs	r2, #3
 8006530:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006532:	4b08      	ldr	r3, [pc, #32]	; (8006554 <TouchParametersActivity+0xbc>)
 8006534:	2201      	movs	r2, #1
 8006536:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8006538:	f005 f856 	bl	800b5e8 <HAL_GetTick>
 800653c:	4603      	mov	r3, r0
 800653e:	4a03      	ldr	r2, [pc, #12]	; (800654c <TouchParametersActivity+0xb4>)
 8006540:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006542:	bf00      	nop
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	200008e4 	.word	0x200008e4
 8006550:	200008e8 	.word	0x200008e8
 8006554:	20000861 	.word	0x20000861

08006558 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 800655e:	f7fb ffd9 	bl	8002514 <XPT2046_IsTouched>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05d      	beq.n	8006624 <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006568:	f005 f83e 	bl	800b5e8 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	4b2f      	ldr	r3, [pc, #188]	; (800662c <TouchSwitchActivity+0xd4>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006578:	d354      	bcc.n	8006624 <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800657a:	1d3a      	adds	r2, r7, #4
 800657c:	1dbb      	adds	r3, r7, #6
 800657e:	4611      	mov	r1, r2
 8006580:	4618      	mov	r0, r3
 8006582:	f7fb ff89 	bl	8002498 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	2b09      	cmp	r3, #9
 800658a:	d90f      	bls.n	80065ac <TouchSwitchActivity+0x54>
 800658c:	88fb      	ldrh	r3, [r7, #6]
 800658e:	2b6e      	cmp	r3, #110	; 0x6e
 8006590:	d80c      	bhi.n	80065ac <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006592:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006594:	2bd7      	cmp	r3, #215	; 0xd7
 8006596:	d909      	bls.n	80065ac <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006598:	88bb      	ldrh	r3, [r7, #4]
 800659a:	2bec      	cmp	r3, #236	; 0xec
 800659c:	d806      	bhi.n	80065ac <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <TouchSwitchActivity+0xd8>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80065a4:	4b23      	ldr	r3, [pc, #140]	; (8006634 <TouchSwitchActivity+0xdc>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e036      	b.n	800661a <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80065ac:	88fb      	ldrh	r3, [r7, #6]
 80065ae:	2bdb      	cmp	r3, #219	; 0xdb
 80065b0:	d910      	bls.n	80065d4 <TouchSwitchActivity+0x7c>
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80065b8:	d20c      	bcs.n	80065d4 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80065ba:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80065bc:	2bd7      	cmp	r3, #215	; 0xd7
 80065be:	d909      	bls.n	80065d4 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80065c0:	88bb      	ldrh	r3, [r7, #4]
 80065c2:	2bec      	cmp	r3, #236	; 0xec
 80065c4:	d806      	bhi.n	80065d4 <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 80065c6:	4b1a      	ldr	r3, [pc, #104]	; (8006630 <TouchSwitchActivity+0xd8>)
 80065c8:	2205      	movs	r2, #5
 80065ca:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80065cc:	4b19      	ldr	r3, [pc, #100]	; (8006634 <TouchSwitchActivity+0xdc>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e022      	b.n	800661a <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	2b77      	cmp	r3, #119	; 0x77
 80065d8:	d90f      	bls.n	80065fa <TouchSwitchActivity+0xa2>
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	2bd2      	cmp	r3, #210	; 0xd2
 80065de:	d80c      	bhi.n	80065fa <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80065e0:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80065e2:	2bd7      	cmp	r3, #215	; 0xd7
 80065e4:	d909      	bls.n	80065fa <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80065e6:	88bb      	ldrh	r3, [r7, #4]
 80065e8:	2bec      	cmp	r3, #236	; 0xec
 80065ea:	d806      	bhi.n	80065fa <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 80065ec:	4b10      	ldr	r3, [pc, #64]	; (8006630 <TouchSwitchActivity+0xd8>)
 80065ee:	2204      	movs	r2, #4
 80065f0:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80065f2:	4b10      	ldr	r3, [pc, #64]	; (8006634 <TouchSwitchActivity+0xdc>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	e00f      	b.n	800661a <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006600:	d30b      	bcc.n	800661a <TouchSwitchActivity+0xc2>
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8006608:	d207      	bcs.n	800661a <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 800660a:	480b      	ldr	r0, [pc, #44]	; (8006638 <TouchSwitchActivity+0xe0>)
 800660c:	f7fb f9b4 	bl	8001978 <EF_SetFont>
				changeSwitchStatusTouch(y);
 8006610:	88bb      	ldrh	r3, [r7, #4]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	4618      	mov	r0, r3
 8006616:	f002 f8a7 	bl	8008768 <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 800661a:	f004 ffe5 	bl	800b5e8 <HAL_GetTick>
 800661e:	4603      	mov	r3, r0
 8006620:	4a02      	ldr	r2, [pc, #8]	; (800662c <TouchSwitchActivity+0xd4>)
 8006622:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006624:	bf00      	nop
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	200008e4 	.word	0x200008e4
 8006630:	200008e8 	.word	0x200008e8
 8006634:	20000861 	.word	0x20000861
 8006638:	08028c04 	.word	0x08028c04

0800663c <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006642:	f7fb ff67 	bl	8002514 <XPT2046_IsTouched>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d05b      	beq.n	8006704 <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800664c:	f004 ffcc 	bl	800b5e8 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	4b2e      	ldr	r3, [pc, #184]	; (800670c <TouchLightsActivity+0xd0>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800665c:	d352      	bcc.n	8006704 <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800665e:	1d3a      	adds	r2, r7, #4
 8006660:	1dbb      	adds	r3, r7, #6
 8006662:	4611      	mov	r1, r2
 8006664:	4618      	mov	r0, r3
 8006666:	f7fb ff17 	bl	8002498 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800666a:	88fb      	ldrh	r3, [r7, #6]
 800666c:	2b09      	cmp	r3, #9
 800666e:	d90f      	bls.n	8006690 <TouchLightsActivity+0x54>
 8006670:	88fb      	ldrh	r3, [r7, #6]
 8006672:	2b6e      	cmp	r3, #110	; 0x6e
 8006674:	d80c      	bhi.n	8006690 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006676:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006678:	2bd7      	cmp	r3, #215	; 0xd7
 800667a:	d909      	bls.n	8006690 <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800667c:	88bb      	ldrh	r3, [r7, #4]
 800667e:	2bec      	cmp	r3, #236	; 0xec
 8006680:	d806      	bhi.n	8006690 <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 8006682:	4b23      	ldr	r3, [pc, #140]	; (8006710 <TouchLightsActivity+0xd4>)
 8006684:	2202      	movs	r2, #2
 8006686:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006688:	4b22      	ldr	r3, [pc, #136]	; (8006714 <TouchLightsActivity+0xd8>)
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	e034      	b.n	80066fa <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006690:	88fb      	ldrh	r3, [r7, #6]
 8006692:	2bdb      	cmp	r3, #219	; 0xdb
 8006694:	d910      	bls.n	80066b8 <TouchLightsActivity+0x7c>
 8006696:	88fb      	ldrh	r3, [r7, #6]
 8006698:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800669c:	d20c      	bcs.n	80066b8 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800669e:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80066a0:	2bd7      	cmp	r3, #215	; 0xd7
 80066a2:	d909      	bls.n	80066b8 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80066a4:	88bb      	ldrh	r3, [r7, #4]
 80066a6:	2bec      	cmp	r3, #236	; 0xec
 80066a8:	d806      	bhi.n	80066b8 <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 80066aa:	4b19      	ldr	r3, [pc, #100]	; (8006710 <TouchLightsActivity+0xd4>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80066b0:	4b18      	ldr	r3, [pc, #96]	; (8006714 <TouchLightsActivity+0xd8>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e020      	b.n	80066fa <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80066b8:	88fb      	ldrh	r3, [r7, #6]
 80066ba:	2b77      	cmp	r3, #119	; 0x77
 80066bc:	d90f      	bls.n	80066de <TouchLightsActivity+0xa2>
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	2bd2      	cmp	r3, #210	; 0xd2
 80066c2:	d80c      	bhi.n	80066de <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80066c4:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 80066c6:	2bd7      	cmp	r3, #215	; 0xd7
 80066c8:	d909      	bls.n	80066de <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 80066ca:	88bb      	ldrh	r3, [r7, #4]
 80066cc:	2bec      	cmp	r3, #236	; 0xec
 80066ce:	d806      	bhi.n	80066de <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 80066d0:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <TouchLightsActivity+0xd4>)
 80066d2:	2206      	movs	r2, #6
 80066d4:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80066d6:	4b0f      	ldr	r3, [pc, #60]	; (8006714 <TouchLightsActivity+0xd8>)
 80066d8:	2201      	movs	r2, #1
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	e00d      	b.n	80066fa <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	2bc7      	cmp	r3, #199	; 0xc7
 80066e2:	d90a      	bls.n	80066fa <TouchLightsActivity+0xbe>
 80066e4:	88fb      	ldrh	r3, [r7, #6]
 80066e6:	2be9      	cmp	r3, #233	; 0xe9
 80066e8:	d807      	bhi.n	80066fa <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 80066ea:	480b      	ldr	r0, [pc, #44]	; (8006718 <TouchLightsActivity+0xdc>)
 80066ec:	f7fb f944 	bl	8001978 <EF_SetFont>
				changeLightsStatusTouch(y);
 80066f0:	88bb      	ldrh	r3, [r7, #4]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	4618      	mov	r0, r3
 80066f6:	f002 f88f 	bl	8008818 <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 80066fa:	f004 ff75 	bl	800b5e8 <HAL_GetTick>
 80066fe:	4603      	mov	r3, r0
 8006700:	4a02      	ldr	r2, [pc, #8]	; (800670c <TouchLightsActivity+0xd0>)
 8006702:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	200008e4 	.word	0x200008e4
 8006710:	200008e8 	.word	0x200008e8
 8006714:	20000861 	.word	0x20000861
 8006718:	08028c04 	.word	0x08028c04

0800671c <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af02      	add	r7, sp, #8

	// Check if screen was touched
		if(XPT2046_IsTouched())
 8006722:	f7fb fef7 	bl	8002514 <XPT2046_IsTouched>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80a9 	beq.w	8006880 <TouchClockActivity+0x164>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800672e:	4856      	ldr	r0, [pc, #344]	; (8006888 <TouchClockActivity+0x16c>)
 8006730:	f7fb f922 	bl	8001978 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006734:	f004 ff58 	bl	800b5e8 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	4b54      	ldr	r3, [pc, #336]	; (800688c <TouchClockActivity+0x170>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006744:	f0c0 809c 	bcc.w	8006880 <TouchClockActivity+0x164>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006748:	1d3a      	adds	r2, r7, #4
 800674a:	1dbb      	adds	r3, r7, #6
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f7fb fea2 	bl	8002498 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8006754:	4b4e      	ldr	r3, [pc, #312]	; (8006890 <TouchClockActivity+0x174>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d114      	bne.n	8006786 <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 800675c:	f7fc f99c 	bl	8002a98 <DS3231_GetHour>
 8006760:	4603      	mov	r3, r0
 8006762:	461a      	mov	r2, r3
 8006764:	4b4b      	ldr	r3, [pc, #300]	; (8006894 <TouchClockActivity+0x178>)
 8006766:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 8006768:	f7fc f9a2 	bl	8002ab0 <DS3231_GetMinute>
 800676c:	4603      	mov	r3, r0
 800676e:	461a      	mov	r2, r3
 8006770:	4b49      	ldr	r3, [pc, #292]	; (8006898 <TouchClockActivity+0x17c>)
 8006772:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 8006774:	f7fc f984 	bl	8002a80 <DS3231_GetDayOfWeek>
 8006778:	4603      	mov	r3, r0
 800677a:	461a      	mov	r2, r3
 800677c:	4b47      	ldr	r3, [pc, #284]	; (800689c <TouchClockActivity+0x180>)
 800677e:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 8006780:	4b43      	ldr	r3, [pc, #268]	; (8006890 <TouchClockActivity+0x174>)
 8006782:	2200      	movs	r2, #0
 8006784:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006786:	88fb      	ldrh	r3, [r7, #6]
 8006788:	2b09      	cmp	r3, #9
 800678a:	d912      	bls.n	80067b2 <TouchClockActivity+0x96>
 800678c:	88fb      	ldrh	r3, [r7, #6]
 800678e:	2b6e      	cmp	r3, #110	; 0x6e
 8006790:	d80f      	bhi.n	80067b2 <TouchClockActivity+0x96>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006792:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006794:	2bd7      	cmp	r3, #215	; 0xd7
 8006796:	d90c      	bls.n	80067b2 <TouchClockActivity+0x96>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006798:	88bb      	ldrh	r3, [r7, #4]
 800679a:	2bec      	cmp	r3, #236	; 0xec
 800679c:	d809      	bhi.n	80067b2 <TouchClockActivity+0x96>
				{
					State = MENUTFT_PARAMETERS;
 800679e:	4b40      	ldr	r3, [pc, #256]	; (80068a0 <TouchClockActivity+0x184>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	701a      	strb	r2, [r3, #0]
					EncoderState = ENCODER_IDLE;
 80067a4:	4b3f      	ldr	r3, [pc, #252]	; (80068a4 <TouchClockActivity+0x188>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80067aa:	4b3f      	ldr	r3, [pc, #252]	; (80068a8 <TouchClockActivity+0x18c>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]
 80067b0:	e061      	b.n	8006876 <TouchClockActivity+0x15a>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	2bdb      	cmp	r3, #219	; 0xdb
 80067b6:	d92c      	bls.n	8006812 <TouchClockActivity+0xf6>
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80067be:	d228      	bcs.n	8006812 <TouchClockActivity+0xf6>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80067c0:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80067c2:	2bd7      	cmp	r3, #215	; 0xd7
 80067c4:	d925      	bls.n	8006812 <TouchClockActivity+0xf6>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80067c6:	88bb      	ldrh	r3, [r7, #4]
 80067c8:	2bec      	cmp	r3, #236	; 0xec
 80067ca:	d822      	bhi.n	8006812 <TouchClockActivity+0xf6>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 80067cc:	4b33      	ldr	r3, [pc, #204]	; (800689c <TouchClockActivity+0x180>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fc f979 	bl	8002ac8 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 80067d6:	4b2f      	ldr	r3, [pc, #188]	; (8006894 <TouchClockActivity+0x178>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fc f986 	bl	8002aec <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 80067e0:	4b2d      	ldr	r3, [pc, #180]	; (8006898 <TouchClockActivity+0x17c>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fc f996 	bl	8002b16 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 80067ea:	2032      	movs	r0, #50	; 0x32
 80067ec:	f7fc f9a5 	bl	8002b3a <DS3231_SetSecond>
					sprintf((char*)MsgMenuTFT, "-Time Changed-");
 80067f0:	492e      	ldr	r1, [pc, #184]	; (80068ac <TouchClockActivity+0x190>)
 80067f2:	482f      	ldr	r0, [pc, #188]	; (80068b0 <TouchClockActivity+0x194>)
 80067f4:	f00c fd44 	bl	8013280 <siprintf>
					EF_PutString(MsgMenuTFT, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 80067f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80067fc:	9301      	str	r3, [sp, #4]
 80067fe:	2301      	movs	r3, #1
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006806:	220a      	movs	r2, #10
 8006808:	212f      	movs	r1, #47	; 0x2f
 800680a:	4829      	ldr	r0, [pc, #164]	; (80068b0 <TouchClockActivity+0x194>)
 800680c:	f7fb face 	bl	8001dac <EF_PutString>
 8006810:	e031      	b.n	8006876 <TouchClockActivity+0x15a>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006812:	88fb      	ldrh	r3, [r7, #6]
 8006814:	2b6d      	cmp	r3, #109	; 0x6d
 8006816:	d912      	bls.n	800683e <TouchClockActivity+0x122>
 8006818:	88fb      	ldrh	r3, [r7, #6]
 800681a:	2bdc      	cmp	r3, #220	; 0xdc
 800681c:	d80f      	bhi.n	800683e <TouchClockActivity+0x122>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 800681e:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006820:	2bbd      	cmp	r3, #189	; 0xbd
 8006822:	d90c      	bls.n	800683e <TouchClockActivity+0x122>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006824:	88bb      	ldrh	r3, [r7, #4]
 8006826:	2bd4      	cmp	r3, #212	; 0xd4
 8006828:	d809      	bhi.n	800683e <TouchClockActivity+0x122>
				{
					State = MENUTFT_SCHEDULE_1;
 800682a:	4b1d      	ldr	r3, [pc, #116]	; (80068a0 <TouchClockActivity+0x184>)
 800682c:	2207      	movs	r2, #7
 800682e:	701a      	strb	r2, [r3, #0]
					EncoderState = ENCODER_IDLE;
 8006830:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <TouchClockActivity+0x188>)
 8006832:	2200      	movs	r2, #0
 8006834:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006836:	4b1c      	ldr	r3, [pc, #112]	; (80068a8 <TouchClockActivity+0x18c>)
 8006838:	2201      	movs	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	e01b      	b.n	8006876 <TouchClockActivity+0x15a>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	2bef      	cmp	r3, #239	; 0xef
 8006842:	d90a      	bls.n	800685a <TouchClockActivity+0x13e>
 8006844:	88fb      	ldrh	r3, [r7, #6]
 8006846:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800684a:	d806      	bhi.n	800685a <TouchClockActivity+0x13e>
				{
					clockIncreaseOneHourAndMinute(x, y);
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	88ba      	ldrh	r2, [r7, #4]
 8006850:	4611      	mov	r1, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f001 fed6 	bl	8008604 <clockIncreaseOneHourAndMinute>
 8006858:	e00d      	b.n	8006876 <TouchClockActivity+0x15a>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006860:	d309      	bcc.n	8006876 <TouchClockActivity+0x15a>
 8006862:	88fb      	ldrh	r3, [r7, #6]
 8006864:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006868:	d805      	bhi.n	8006876 <TouchClockActivity+0x15a>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 800686a:	88fb      	ldrh	r3, [r7, #6]
 800686c:	88ba      	ldrh	r2, [r7, #4]
 800686e:	4611      	mov	r1, r2
 8006870:	4618      	mov	r0, r3
 8006872:	f001 fef9 	bl	8008668 <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 8006876:	f004 feb7 	bl	800b5e8 <HAL_GetTick>
 800687a:	4603      	mov	r3, r0
 800687c:	4a03      	ldr	r2, [pc, #12]	; (800688c <TouchClockActivity+0x170>)
 800687e:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	0802ab7c 	.word	0x0802ab7c
 800688c:	200008e4 	.word	0x200008e4
 8006890:	20000862 	.word	0x20000862
 8006894:	20000032 	.word	0x20000032
 8006898:	20000033 	.word	0x20000033
 800689c:	20000031 	.word	0x20000031
 80068a0:	200008e8 	.word	0x200008e8
 80068a4:	200008e9 	.word	0x200008e9
 80068a8:	20000861 	.word	0x20000861
 80068ac:	08017584 	.word	0x08017584
 80068b0:	200008a4 	.word	0x200008a4

080068b4 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 80068ba:	f7fb fe2b 	bl	8002514 <XPT2046_IsTouched>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d05b      	beq.n	800697c <TouchPredefinedActivityActivity+0xc8>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80068c4:	f004 fe90 	bl	800b5e8 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	4b2e      	ldr	r3, [pc, #184]	; (8006984 <TouchPredefinedActivityActivity+0xd0>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068d4:	d352      	bcc.n	800697c <TouchPredefinedActivityActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80068d6:	1d3a      	adds	r2, r7, #4
 80068d8:	1dbb      	adds	r3, r7, #6
 80068da:	4611      	mov	r1, r2
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fb fddb 	bl	8002498 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 80068e2:	4829      	ldr	r0, [pc, #164]	; (8006988 <TouchPredefinedActivityActivity+0xd4>)
 80068e4:	f7fb f848 	bl	8001978 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80068e8:	88fb      	ldrh	r3, [r7, #6]
 80068ea:	2b09      	cmp	r3, #9
 80068ec:	d90f      	bls.n	800690e <TouchPredefinedActivityActivity+0x5a>
 80068ee:	88fb      	ldrh	r3, [r7, #6]
 80068f0:	2b6e      	cmp	r3, #110	; 0x6e
 80068f2:	d80c      	bhi.n	800690e <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80068f4:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80068f6:	2bd7      	cmp	r3, #215	; 0xd7
 80068f8:	d909      	bls.n	800690e <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80068fa:	88bb      	ldrh	r3, [r7, #4]
 80068fc:	2bec      	cmp	r3, #236	; 0xec
 80068fe:	d806      	bhi.n	800690e <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 8006900:	4b22      	ldr	r3, [pc, #136]	; (800698c <TouchPredefinedActivityActivity+0xd8>)
 8006902:	2202      	movs	r2, #2
 8006904:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006906:	4b22      	ldr	r3, [pc, #136]	; (8006990 <TouchPredefinedActivityActivity+0xdc>)
 8006908:	2201      	movs	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	e031      	b.n	8006972 <TouchPredefinedActivityActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button - Confirmed changed clock
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	2bdb      	cmp	r3, #219	; 0xdb
 8006912:	d923      	bls.n	800695c <TouchPredefinedActivityActivity+0xa8>
 8006914:	88fb      	ldrh	r3, [r7, #6]
 8006916:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800691a:	d21f      	bcs.n	800695c <TouchPredefinedActivityActivity+0xa8>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800691c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 800691e:	2bd7      	cmp	r3, #215	; 0xd7
 8006920:	d91c      	bls.n	800695c <TouchPredefinedActivityActivity+0xa8>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006922:	88bb      	ldrh	r3, [r7, #4]
 8006924:	2bec      	cmp	r3, #236	; 0xec
 8006926:	d819      	bhi.n	800695c <TouchPredefinedActivityActivity+0xa8>
			{
				EF_SetFont(&arialBlack_20ptFontInfo);
 8006928:	481a      	ldr	r0, [pc, #104]	; (8006994 <TouchPredefinedActivityActivity+0xe0>)
 800692a:	f7fb f825 	bl	8001978 <EF_SetFont>
				EEPROM_ActivitiesTimeUpdate(1, activitiesDurationTimeInSeconds);
 800692e:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <TouchPredefinedActivityActivity+0xe4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4619      	mov	r1, r3
 8006934:	2001      	movs	r0, #1
 8006936:	f7fc fd7d 	bl	8003434 <EEPROM_ActivitiesTimeUpdate>
				sprintf((char*)MsgMenuTFT, "-Time Changed-");
 800693a:	4918      	ldr	r1, [pc, #96]	; (800699c <TouchPredefinedActivityActivity+0xe8>)
 800693c:	4818      	ldr	r0, [pc, #96]	; (80069a0 <TouchPredefinedActivityActivity+0xec>)
 800693e:	f00c fc9f 	bl	8013280 <siprintf>
				EF_PutString(MsgMenuTFT, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 8006942:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006946:	9301      	str	r3, [sp, #4]
 8006948:	2301      	movs	r3, #1
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006950:	220a      	movs	r2, #10
 8006952:	212f      	movs	r1, #47	; 0x2f
 8006954:	4812      	ldr	r0, [pc, #72]	; (80069a0 <TouchPredefinedActivityActivity+0xec>)
 8006956:	f7fb fa29 	bl	8001dac <EF_PutString>
 800695a:	e00a      	b.n	8006972 <TouchPredefinedActivityActivity+0xbe>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	2b63      	cmp	r3, #99	; 0x63
 8006960:	d907      	bls.n	8006972 <TouchPredefinedActivityActivity+0xbe>
 8006962:	88fb      	ldrh	r3, [r7, #6]
 8006964:	2bdc      	cmp	r3, #220	; 0xdc
 8006966:	d804      	bhi.n	8006972 <TouchPredefinedActivityActivity+0xbe>
			{
				predefinedActivityTouchAction(y);
 8006968:	88bb      	ldrh	r3, [r7, #4]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	4618      	mov	r0, r3
 800696e:	f001 ffab 	bl	80088c8 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 8006972:	f004 fe39 	bl	800b5e8 <HAL_GetTick>
 8006976:	4603      	mov	r3, r0
 8006978:	4a02      	ldr	r2, [pc, #8]	; (8006984 <TouchPredefinedActivityActivity+0xd0>)
 800697a:	6013      	str	r3, [r2, #0]
		}
	}
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	200008e4 	.word	0x200008e4
 8006988:	08028c04 	.word	0x08028c04
 800698c:	200008e8 	.word	0x200008e8
 8006990:	20000861 	.word	0x20000861
 8006994:	0802ab7c 	.word	0x0802ab7c
 8006998:	20000898 	.word	0x20000898
 800699c:	08017584 	.word	0x08017584
 80069a0:	200008a4 	.word	0x200008a4

080069a4 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 80069aa:	f7fb fdb3 	bl	8002514 <XPT2046_IsTouched>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d050      	beq.n	8006a56 <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80069b4:	482a      	ldr	r0, [pc, #168]	; (8006a60 <TouchWSLedActivity+0xbc>)
 80069b6:	f7fa ffdf 	bl	8001978 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80069ba:	f004 fe15 	bl	800b5e8 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	4b28      	ldr	r3, [pc, #160]	; (8006a64 <TouchWSLedActivity+0xc0>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069ca:	d344      	bcc.n	8006a56 <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80069cc:	1d3a      	adds	r2, r7, #4
 80069ce:	1dbb      	adds	r3, r7, #6
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fb fd60 	bl	8002498 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 80069d8:	4b23      	ldr	r3, [pc, #140]	; (8006a68 <TouchWSLedActivity+0xc4>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d10b      	bne.n	80069f8 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 80069e0:	bf00      	nop
 80069e2:	2201      	movs	r2, #1
 80069e4:	4921      	ldr	r1, [pc, #132]	; (8006a6c <TouchWSLedActivity+0xc8>)
 80069e6:	2001      	movs	r0, #1
 80069e8:	f7fc f904 	bl	8002bf4 <eeprom_read>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f7      	bne.n	80069e2 <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 80069f2:	4b1f      	ldr	r3, [pc, #124]	; (8006a70 <TouchWSLedActivity+0xcc>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80069f8:	88fb      	ldrh	r3, [r7, #6]
 80069fa:	2b09      	cmp	r3, #9
 80069fc:	d90f      	bls.n	8006a1e <TouchWSLedActivity+0x7a>
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	2b6e      	cmp	r3, #110	; 0x6e
 8006a02:	d80c      	bhi.n	8006a1e <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006a04:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006a06:	2bd7      	cmp	r3, #215	; 0xd7
 8006a08:	d909      	bls.n	8006a1e <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006a0a:	88bb      	ldrh	r3, [r7, #4]
 8006a0c:	2bec      	cmp	r3, #236	; 0xec
 8006a0e:	d806      	bhi.n	8006a1e <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 8006a10:	4b18      	ldr	r3, [pc, #96]	; (8006a74 <TouchWSLedActivity+0xd0>)
 8006a12:	2205      	movs	r2, #5
 8006a14:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006a16:	4b18      	ldr	r3, [pc, #96]	; (8006a78 <TouchWSLedActivity+0xd4>)
 8006a18:	2201      	movs	r2, #1
 8006a1a:	701a      	strb	r2, [r3, #0]
 8006a1c:	e016      	b.n	8006a4c <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 8006a1e:	88bb      	ldrh	r3, [r7, #4]
 8006a20:	2b40      	cmp	r3, #64	; 0x40
 8006a22:	d90b      	bls.n	8006a3c <TouchWSLedActivity+0x98>
 8006a24:	88bb      	ldrh	r3, [r7, #4]
 8006a26:	2b56      	cmp	r3, #86	; 0x56
 8006a28:	d808      	bhi.n	8006a3c <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	88ba      	ldrh	r2, [r7, #4]
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	4611      	mov	r1, r2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f002 f8a5 	bl	8008b84 <increaseNumberOfWSLedOnTFT>
 8006a3a:	e007      	b.n	8006a4c <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	88ba      	ldrh	r2, [r7, #4]
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f002 f8fc 	bl	8008c44 <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 8006a4c:	f004 fdcc 	bl	800b5e8 <HAL_GetTick>
 8006a50:	4603      	mov	r3, r0
 8006a52:	4a04      	ldr	r2, [pc, #16]	; (8006a64 <TouchWSLedActivity+0xc0>)
 8006a54:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	0802ab7c 	.word	0x0802ab7c
 8006a64:	200008e4 	.word	0x200008e4
 8006a68:	20000862 	.word	0x20000862
 8006a6c:	20000034 	.word	0x20000034
 8006a70:	20000863 	.word	0x20000863
 8006a74:	200008e8 	.word	0x200008e8
 8006a78:	20000861 	.word	0x20000861

08006a7c <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006a82:	4b70      	ldr	r3, [pc, #448]	; (8006c44 <Schedule1Activity+0x1c8>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d105      	bne.n	8006a96 <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	f001 fd66 	bl	800855c <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006a90:	4b6c      	ldr	r3, [pc, #432]	; (8006c44 <Schedule1Activity+0x1c8>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006a96:	f7fb fd3d 	bl	8002514 <XPT2046_IsTouched>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80cc 	beq.w	8006c3a <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006aa2:	f004 fda1 	bl	800b5e8 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	4b67      	ldr	r3, [pc, #412]	; (8006c48 <Schedule1Activity+0x1cc>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ab2:	f0c0 80c2 	bcc.w	8006c3a <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006ab6:	1d3a      	adds	r2, r7, #4
 8006ab8:	1dbb      	adds	r3, r7, #6
 8006aba:	4611      	mov	r1, r2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fb fceb 	bl	8002498 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	2b09      	cmp	r3, #9
 8006ac6:	d90f      	bls.n	8006ae8 <Schedule1Activity+0x6c>
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	2b6e      	cmp	r3, #110	; 0x6e
 8006acc:	d80c      	bhi.n	8006ae8 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006ace:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006ad0:	2bd7      	cmp	r3, #215	; 0xd7
 8006ad2:	d909      	bls.n	8006ae8 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006ad4:	88bb      	ldrh	r3, [r7, #4]
 8006ad6:	2bec      	cmp	r3, #236	; 0xec
 8006ad8:	d806      	bhi.n	8006ae8 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006ada:	4b5c      	ldr	r3, [pc, #368]	; (8006c4c <Schedule1Activity+0x1d0>)
 8006adc:	2203      	movs	r2, #3
 8006ade:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006ae0:	4b5b      	ldr	r3, [pc, #364]	; (8006c50 <Schedule1Activity+0x1d4>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e0a3      	b.n	8006c30 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	2bdb      	cmp	r3, #219	; 0xdb
 8006aec:	d910      	bls.n	8006b10 <Schedule1Activity+0x94>
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006af4:	d20c      	bcs.n	8006b10 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006af6:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006af8:	2bd7      	cmp	r3, #215	; 0xd7
 8006afa:	d909      	bls.n	8006b10 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006afc:	88bb      	ldrh	r3, [r7, #4]
 8006afe:	2bec      	cmp	r3, #236	; 0xec
 8006b00:	d806      	bhi.n	8006b10 <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 8006b02:	4b52      	ldr	r3, [pc, #328]	; (8006c4c <Schedule1Activity+0x1d0>)
 8006b04:	2208      	movs	r2, #8
 8006b06:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006b08:	4b51      	ldr	r3, [pc, #324]	; (8006c50 <Schedule1Activity+0x1d4>)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	e08f      	b.n	8006c30 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006b10:	88bb      	ldrh	r3, [r7, #4]
 8006b12:	2b31      	cmp	r3, #49	; 0x31
 8006b14:	d909      	bls.n	8006b2a <Schedule1Activity+0xae>
 8006b16:	88bb      	ldrh	r3, [r7, #4]
 8006b18:	2b46      	cmp	r3, #70	; 0x46
 8006b1a:	d806      	bhi.n	8006b2a <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 8006b1c:	88fb      	ldrh	r3, [r7, #6]
 8006b1e:	88ba      	ldrh	r2, [r7, #4]
 8006b20:	4611      	mov	r1, r2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 f99a 	bl	8006e5c <MenuTFTSchedule1ActivityDayOfWeekRow>
 8006b28:	e082      	b.n	8006c30 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006b2a:	88bb      	ldrh	r3, [r7, #4]
 8006b2c:	2b64      	cmp	r3, #100	; 0x64
 8006b2e:	d909      	bls.n	8006b44 <Schedule1Activity+0xc8>
 8006b30:	88bb      	ldrh	r3, [r7, #4]
 8006b32:	2b79      	cmp	r3, #121	; 0x79
 8006b34:	d806      	bhi.n	8006b44 <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	88ba      	ldrh	r2, [r7, #4]
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fe37 	bl	80077b0 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 8006b42:	e075      	b.n	8006c30 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006b44:	88bb      	ldrh	r3, [r7, #4]
 8006b46:	2b87      	cmp	r3, #135	; 0x87
 8006b48:	d909      	bls.n	8006b5e <Schedule1Activity+0xe2>
 8006b4a:	88bb      	ldrh	r3, [r7, #4]
 8006b4c:	2b9c      	cmp	r3, #156	; 0x9c
 8006b4e:	d806      	bhi.n	8006b5e <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 8006b50:	88fb      	ldrh	r3, [r7, #6]
 8006b52:	88ba      	ldrh	r2, [r7, #4]
 8006b54:	4611      	mov	r1, r2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fea8 	bl	80078ac <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 8006b5c:	e068      	b.n	8006c30 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006b5e:	88bb      	ldrh	r3, [r7, #4]
 8006b60:	2ba9      	cmp	r3, #169	; 0xa9
 8006b62:	d909      	bls.n	8006b78 <Schedule1Activity+0xfc>
 8006b64:	88bb      	ldrh	r3, [r7, #4]
 8006b66:	2bbe      	cmp	r3, #190	; 0xbe
 8006b68:	d806      	bhi.n	8006b78 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 8006b6a:	88fb      	ldrh	r3, [r7, #6]
 8006b6c:	88ba      	ldrh	r2, [r7, #4]
 8006b6e:	4611      	mov	r1, r2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f001 fac7 	bl	8008104 <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 8006b76:	e05b      	b.n	8006c30 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	2b77      	cmp	r3, #119	; 0x77
 8006b7c:	d958      	bls.n	8006c30 <Schedule1Activity+0x1b4>
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	2bd2      	cmp	r3, #210	; 0xd2
 8006b82:	d855      	bhi.n	8006c30 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006b84:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006b86:	2bd7      	cmp	r3, #215	; 0xd7
 8006b88:	d952      	bls.n	8006c30 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006b8a:	88bb      	ldrh	r3, [r7, #4]
 8006b8c:	2bec      	cmp	r3, #236	; 0xec
 8006b8e:	d84f      	bhi.n	8006c30 <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 8006b90:	4b30      	ldr	r3, [pc, #192]	; (8006c54 <Schedule1Activity+0x1d8>)
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	4619      	mov	r1, r3
 8006b96:	2001      	movs	r0, #1
 8006b98:	f7fc fba3 	bl	80032e2 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 8006b9c:	4b2e      	ldr	r3, [pc, #184]	; (8006c58 <Schedule1Activity+0x1dc>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	f7fc fbc0 	bl	8003328 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006ba8:	4b2c      	ldr	r3, [pc, #176]	; (8006c5c <Schedule1Activity+0x1e0>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	4619      	mov	r1, r3
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f7fc fbdd 	bl	800336e <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 8006bb4:	4b2a      	ldr	r3, [pc, #168]	; (8006c60 <Schedule1Activity+0x1e4>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	2001      	movs	r0, #1
 8006bbc:	f7fc fbfa 	bl	80033b4 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006bc0:	4928      	ldr	r1, [pc, #160]	; (8006c64 <Schedule1Activity+0x1e8>)
 8006bc2:	2001      	movs	r0, #1
 8006bc4:	f7fc f9ed 	bl	8002fa2 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006bc8:	4927      	ldr	r1, [pc, #156]	; (8006c68 <Schedule1Activity+0x1ec>)
 8006bca:	2001      	movs	r0, #1
 8006bcc:	f7fc fa94 	bl	80030f8 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006bd0:	4826      	ldr	r0, [pc, #152]	; (8006c6c <Schedule1Activity+0x1f0>)
 8006bd2:	f7fa fed1 	bl	8001978 <EF_SetFont>
				sprintf((char*)MsgMenuTFT, " H1 ZMIENIONY      ");
 8006bd6:	4926      	ldr	r1, [pc, #152]	; (8006c70 <Schedule1Activity+0x1f4>)
 8006bd8:	4826      	ldr	r0, [pc, #152]	; (8006c74 <Schedule1Activity+0x1f8>)
 8006bda:	f00c fb51 	bl	8013280 <siprintf>
				EF_PutString(MsgMenuTFT, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006bde:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	2301      	movs	r3, #1
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006bec:	220a      	movs	r2, #10
 8006bee:	2128      	movs	r1, #40	; 0x28
 8006bf0:	4820      	ldr	r0, [pc, #128]	; (8006c74 <Schedule1Activity+0x1f8>)
 8006bf2:	f7fb f8db 	bl	8001dac <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006bf6:	4820      	ldr	r0, [pc, #128]	; (8006c78 <Schedule1Activity+0x1fc>)
 8006bf8:	f7fa febe 	bl	8001978 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006bfc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	2305      	movs	r3, #5
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2314      	movs	r3, #20
 8006c08:	225a      	movs	r2, #90	; 0x5a
 8006c0a:	21d8      	movs	r1, #216	; 0xd8
 8006c0c:	2078      	movs	r0, #120	; 0x78
 8006c0e:	f7fa fe62 	bl	80018d6 <GFX_DrawFillRoundRectangle>
				sprintf((char*)MsgMenuTFT, " >POTW<");
 8006c12:	491a      	ldr	r1, [pc, #104]	; (8006c7c <Schedule1Activity+0x200>)
 8006c14:	4817      	ldr	r0, [pc, #92]	; (8006c74 <Schedule1Activity+0x1f8>)
 8006c16:	f00c fb33 	bl	8013280 <siprintf>
				EF_PutString(MsgMenuTFT, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006c1a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	2300      	movs	r3, #0
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	2300      	movs	r3, #0
 8006c26:	22da      	movs	r2, #218	; 0xda
 8006c28:	217e      	movs	r1, #126	; 0x7e
 8006c2a:	4812      	ldr	r0, [pc, #72]	; (8006c74 <Schedule1Activity+0x1f8>)
 8006c2c:	f7fb f8be 	bl	8001dac <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 8006c30:	f004 fcda 	bl	800b5e8 <HAL_GetTick>
 8006c34:	4603      	mov	r3, r0
 8006c36:	4a04      	ldr	r2, [pc, #16]	; (8006c48 <Schedule1Activity+0x1cc>)
 8006c38:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000864 	.word	0x20000864
 8006c48:	200008e4 	.word	0x200008e4
 8006c4c:	200008e8 	.word	0x200008e8
 8006c50:	20000861 	.word	0x20000861
 8006c54:	2000088d 	.word	0x2000088d
 8006c58:	2000088f 	.word	0x2000088f
 8006c5c:	2000088e 	.word	0x2000088e
 8006c60:	20000890 	.word	0x20000890
 8006c64:	20000868 	.word	0x20000868
 8006c68:	20000870 	.word	0x20000870
 8006c6c:	0802ab7c 	.word	0x0802ab7c
 8006c70:	08017594 	.word	0x08017594
 8006c74:	200008a4 	.word	0x200008a4
 8006c78:	08028c04 	.word	0x08028c04
 8006c7c:	080175a8 	.word	0x080175a8

08006c80 <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006c86:	4b66      	ldr	r3, [pc, #408]	; (8006e20 <Schedule2Activity+0x1a0>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d105      	bne.n	8006c9a <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 8006c8e:	2002      	movs	r0, #2
 8006c90:	f001 fc64 	bl	800855c <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006c94:	4b62      	ldr	r3, [pc, #392]	; (8006e20 <Schedule2Activity+0x1a0>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006c9a:	f7fb fc3b 	bl	8002514 <XPT2046_IsTouched>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 80b8 	beq.w	8006e16 <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006ca6:	f004 fc9f 	bl	800b5e8 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	4b5d      	ldr	r3, [pc, #372]	; (8006e24 <Schedule2Activity+0x1a4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cb6:	f0c0 80ae 	bcc.w	8006e16 <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006cba:	1d3a      	adds	r2, r7, #4
 8006cbc:	1dbb      	adds	r3, r7, #6
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fb fbe9 	bl	8002498 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	2b09      	cmp	r3, #9
 8006cca:	d90f      	bls.n	8006cec <Schedule2Activity+0x6c>
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	2b6e      	cmp	r3, #110	; 0x6e
 8006cd0:	d80c      	bhi.n	8006cec <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006cd2:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006cd4:	2bd7      	cmp	r3, #215	; 0xd7
 8006cd6:	d909      	bls.n	8006cec <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006cd8:	88bb      	ldrh	r3, [r7, #4]
 8006cda:	2bec      	cmp	r3, #236	; 0xec
 8006cdc:	d806      	bhi.n	8006cec <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 8006cde:	4b52      	ldr	r3, [pc, #328]	; (8006e28 <Schedule2Activity+0x1a8>)
 8006ce0:	2203      	movs	r2, #3
 8006ce2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006ce4:	4b51      	ldr	r3, [pc, #324]	; (8006e2c <Schedule2Activity+0x1ac>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	e08f      	b.n	8006e0c <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006cec:	88bb      	ldrh	r3, [r7, #4]
 8006cee:	2b31      	cmp	r3, #49	; 0x31
 8006cf0:	d909      	bls.n	8006d06 <Schedule2Activity+0x86>
 8006cf2:	88bb      	ldrh	r3, [r7, #4]
 8006cf4:	2b46      	cmp	r3, #70	; 0x46
 8006cf6:	d806      	bhi.n	8006d06 <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 8006cf8:	88fb      	ldrh	r3, [r7, #6]
 8006cfa:	88ba      	ldrh	r2, [r7, #4]
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fe52 	bl	80079a8 <MenuTFTSchedule2ActivityDayOfWeekRow>
 8006d04:	e082      	b.n	8006e0c <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006d06:	88bb      	ldrh	r3, [r7, #4]
 8006d08:	2b64      	cmp	r3, #100	; 0x64
 8006d0a:	d909      	bls.n	8006d20 <Schedule2Activity+0xa0>
 8006d0c:	88bb      	ldrh	r3, [r7, #4]
 8006d0e:	2b79      	cmp	r3, #121	; 0x79
 8006d10:	d806      	bhi.n	8006d20 <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	88ba      	ldrh	r2, [r7, #4]
 8006d16:	4611      	mov	r1, r2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f001 f8f7 	bl	8007f0c <MenuTFTSchedule2ActivityHourMinuteONAdd>
 8006d1e:	e075      	b.n	8006e0c <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006d20:	88bb      	ldrh	r3, [r7, #4]
 8006d22:	2b87      	cmp	r3, #135	; 0x87
 8006d24:	d909      	bls.n	8006d3a <Schedule2Activity+0xba>
 8006d26:	88bb      	ldrh	r3, [r7, #4]
 8006d28:	2b9c      	cmp	r3, #156	; 0x9c
 8006d2a:	d806      	bhi.n	8006d3a <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 8006d2c:	88fb      	ldrh	r3, [r7, #6]
 8006d2e:	88ba      	ldrh	r2, [r7, #4]
 8006d30:	4611      	mov	r1, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 f968 	bl	8008008 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 8006d38:	e068      	b.n	8006e0c <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006d3a:	88bb      	ldrh	r3, [r7, #4]
 8006d3c:	2ba9      	cmp	r3, #169	; 0xa9
 8006d3e:	d909      	bls.n	8006d54 <Schedule2Activity+0xd4>
 8006d40:	88bb      	ldrh	r3, [r7, #4]
 8006d42:	2bbe      	cmp	r3, #190	; 0xbe
 8006d44:	d806      	bhi.n	8006d54 <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	88ba      	ldrh	r2, [r7, #4]
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f001 faef 	bl	8008330 <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 8006d52:	e05b      	b.n	8006e0c <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006d54:	88fb      	ldrh	r3, [r7, #6]
 8006d56:	2b77      	cmp	r3, #119	; 0x77
 8006d58:	d958      	bls.n	8006e0c <Schedule2Activity+0x18c>
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	2bd2      	cmp	r3, #210	; 0xd2
 8006d5e:	d855      	bhi.n	8006e0c <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006d60:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006d62:	2bd7      	cmp	r3, #215	; 0xd7
 8006d64:	d952      	bls.n	8006e0c <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006d66:	88bb      	ldrh	r3, [r7, #4]
 8006d68:	2bec      	cmp	r3, #236	; 0xec
 8006d6a:	d84f      	bhi.n	8006e0c <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 8006d6c:	4b30      	ldr	r3, [pc, #192]	; (8006e30 <Schedule2Activity+0x1b0>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	4619      	mov	r1, r3
 8006d72:	2002      	movs	r0, #2
 8006d74:	f7fc fab5 	bl	80032e2 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006d78:	4b2e      	ldr	r3, [pc, #184]	; (8006e34 <Schedule2Activity+0x1b4>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	2002      	movs	r0, #2
 8006d80:	f7fc fad2 	bl	8003328 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006d84:	4b2c      	ldr	r3, [pc, #176]	; (8006e38 <Schedule2Activity+0x1b8>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	2002      	movs	r0, #2
 8006d8c:	f7fc faef 	bl	800336e <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 8006d90:	4b2a      	ldr	r3, [pc, #168]	; (8006e3c <Schedule2Activity+0x1bc>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	4619      	mov	r1, r3
 8006d96:	2002      	movs	r0, #2
 8006d98:	f7fc fb0c 	bl	80033b4 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 8006d9c:	4928      	ldr	r1, [pc, #160]	; (8006e40 <Schedule2Activity+0x1c0>)
 8006d9e:	2002      	movs	r0, #2
 8006da0:	f7fc f8ff 	bl	8002fa2 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 8006da4:	4927      	ldr	r1, [pc, #156]	; (8006e44 <Schedule2Activity+0x1c4>)
 8006da6:	2002      	movs	r0, #2
 8006da8:	f7fc f9a6 	bl	80030f8 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006dac:	4826      	ldr	r0, [pc, #152]	; (8006e48 <Schedule2Activity+0x1c8>)
 8006dae:	f7fa fde3 	bl	8001978 <EF_SetFont>
				sprintf((char*)MsgMenuTFT, " H2 ZMIENIONY       ");
 8006db2:	4926      	ldr	r1, [pc, #152]	; (8006e4c <Schedule2Activity+0x1cc>)
 8006db4:	4826      	ldr	r0, [pc, #152]	; (8006e50 <Schedule2Activity+0x1d0>)
 8006db6:	f00c fa63 	bl	8013280 <siprintf>
				EF_PutString(MsgMenuTFT, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006dba:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006dc8:	220a      	movs	r2, #10
 8006dca:	2128      	movs	r1, #40	; 0x28
 8006dcc:	4820      	ldr	r0, [pc, #128]	; (8006e50 <Schedule2Activity+0x1d0>)
 8006dce:	f7fa ffed 	bl	8001dac <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006dd2:	4820      	ldr	r0, [pc, #128]	; (8006e54 <Schedule2Activity+0x1d4>)
 8006dd4:	f7fa fdd0 	bl	8001978 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006dd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	2305      	movs	r3, #5
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	2314      	movs	r3, #20
 8006de4:	225a      	movs	r2, #90	; 0x5a
 8006de6:	21d8      	movs	r1, #216	; 0xd8
 8006de8:	2078      	movs	r0, #120	; 0x78
 8006dea:	f7fa fd74 	bl	80018d6 <GFX_DrawFillRoundRectangle>
				sprintf((char*)MsgMenuTFT, " >POTW<");
 8006dee:	491a      	ldr	r1, [pc, #104]	; (8006e58 <Schedule2Activity+0x1d8>)
 8006df0:	4817      	ldr	r0, [pc, #92]	; (8006e50 <Schedule2Activity+0x1d0>)
 8006df2:	f00c fa45 	bl	8013280 <siprintf>
				EF_PutString(MsgMenuTFT, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006df6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	2300      	movs	r3, #0
 8006e02:	22da      	movs	r2, #218	; 0xda
 8006e04:	217e      	movs	r1, #126	; 0x7e
 8006e06:	4812      	ldr	r0, [pc, #72]	; (8006e50 <Schedule2Activity+0x1d0>)
 8006e08:	f7fa ffd0 	bl	8001dac <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 8006e0c:	f004 fbec 	bl	800b5e8 <HAL_GetTick>
 8006e10:	4603      	mov	r3, r0
 8006e12:	4a04      	ldr	r2, [pc, #16]	; (8006e24 <Schedule2Activity+0x1a4>)
 8006e14:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000864 	.word	0x20000864
 8006e24:	200008e4 	.word	0x200008e4
 8006e28:	200008e8 	.word	0x200008e8
 8006e2c:	20000861 	.word	0x20000861
 8006e30:	20000891 	.word	0x20000891
 8006e34:	20000893 	.word	0x20000893
 8006e38:	20000892 	.word	0x20000892
 8006e3c:	20000894 	.word	0x20000894
 8006e40:	2000087c 	.word	0x2000087c
 8006e44:	20000884 	.word	0x20000884
 8006e48:	0802ab7c 	.word	0x0802ab7c
 8006e4c:	080175b0 	.word	0x080175b0
 8006e50:	200008a4 	.word	0x200008a4
 8006e54:	08028c04 	.word	0x08028c04
 8006e58:	080175a8 	.word	0x080175a8

08006e5c <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	460a      	mov	r2, r1
 8006e66:	80fb      	strh	r3, [r7, #6]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	2b3b      	cmp	r3, #59	; 0x3b
 8006e70:	d91a      	bls.n	8006ea8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 8006e72:	88fb      	ldrh	r3, [r7, #6]
 8006e74:	2b50      	cmp	r3, #80	; 0x50
 8006e76:	d817      	bhi.n	8006ea8 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006e78:	4b68      	ldr	r3, [pc, #416]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d004      	beq.n	8006e8a <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 8006e80:	2100      	movs	r1, #0
 8006e82:	2001      	movs	r0, #1
 8006e84:	f000 f8cc 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8006e88:	e003      	b.n	8006e92 <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	f000 f8c7 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006e92:	4b62      	ldr	r3, [pc, #392]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bf0c      	ite	eq
 8006e9a:	2301      	moveq	r3, #1
 8006e9c:	2300      	movne	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4b5e      	ldr	r3, [pc, #376]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	e0b4      	b.n	8007012 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	2b59      	cmp	r3, #89	; 0x59
 8006eac:	d91a      	bls.n	8006ee4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b6e      	cmp	r3, #110	; 0x6e
 8006eb2:	d817      	bhi.n	8006ee4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006eb4:	4b59      	ldr	r3, [pc, #356]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006eb6:	785b      	ldrb	r3, [r3, #1]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	2002      	movs	r0, #2
 8006ec0:	f000 f8ae 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8006ec4:	e003      	b.n	8006ece <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	2002      	movs	r0, #2
 8006eca:	f000 f8a9 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 8006ece:	4b53      	ldr	r3, [pc, #332]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	bf0c      	ite	eq
 8006ed6:	2301      	moveq	r3, #1
 8006ed8:	2300      	movne	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	4b4f      	ldr	r3, [pc, #316]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ee0:	705a      	strb	r2, [r3, #1]
 8006ee2:	e096      	b.n	8007012 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8006ee4:	88fb      	ldrh	r3, [r7, #6]
 8006ee6:	2b77      	cmp	r3, #119	; 0x77
 8006ee8:	d91a      	bls.n	8006f20 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 8006eea:	88fb      	ldrh	r3, [r7, #6]
 8006eec:	2b8c      	cmp	r3, #140	; 0x8c
 8006eee:	d817      	bhi.n	8006f20 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8006ef0:	4b4a      	ldr	r3, [pc, #296]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ef2:	789b      	ldrb	r3, [r3, #2]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8006ef8:	2100      	movs	r1, #0
 8006efa:	2003      	movs	r0, #3
 8006efc:	f000 f890 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8006f00:	e003      	b.n	8006f0a <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8006f02:	2101      	movs	r1, #1
 8006f04:	2003      	movs	r0, #3
 8006f06:	f000 f88b 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 8006f0a:	4b44      	ldr	r3, [pc, #272]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f0c:	789b      	ldrb	r3, [r3, #2]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	bf0c      	ite	eq
 8006f12:	2301      	moveq	r3, #1
 8006f14:	2300      	movne	r3, #0
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4b40      	ldr	r3, [pc, #256]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f1c:	709a      	strb	r2, [r3, #2]
 8006f1e:	e078      	b.n	8007012 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8006f20:	88fb      	ldrh	r3, [r7, #6]
 8006f22:	2b95      	cmp	r3, #149	; 0x95
 8006f24:	d91a      	bls.n	8006f5c <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	2baa      	cmp	r3, #170	; 0xaa
 8006f2a:	d817      	bhi.n	8006f5c <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8006f2c:	4b3b      	ldr	r3, [pc, #236]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f2e:	78db      	ldrb	r3, [r3, #3]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 8006f34:	2100      	movs	r1, #0
 8006f36:	2004      	movs	r0, #4
 8006f38:	f000 f872 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8006f3c:	e003      	b.n	8006f46 <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8006f3e:	2101      	movs	r1, #1
 8006f40:	2004      	movs	r0, #4
 8006f42:	f000 f86d 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 8006f46:	4b35      	ldr	r3, [pc, #212]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f48:	78db      	ldrb	r3, [r3, #3]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bf0c      	ite	eq
 8006f4e:	2301      	moveq	r3, #1
 8006f50:	2300      	movne	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	4b31      	ldr	r3, [pc, #196]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f58:	70da      	strb	r2, [r3, #3]
 8006f5a:	e05a      	b.n	8007012 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	2bb3      	cmp	r3, #179	; 0xb3
 8006f60:	d91a      	bls.n	8006f98 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 8006f62:	88fb      	ldrh	r3, [r7, #6]
 8006f64:	2bc8      	cmp	r3, #200	; 0xc8
 8006f66:	d817      	bhi.n	8006f98 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006f68:	4b2c      	ldr	r3, [pc, #176]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f6a:	791b      	ldrb	r3, [r3, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d004      	beq.n	8006f7a <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 8006f70:	2100      	movs	r1, #0
 8006f72:	2005      	movs	r0, #5
 8006f74:	f000 f854 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8006f78:	e003      	b.n	8006f82 <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	2005      	movs	r0, #5
 8006f7e:	f000 f84f 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 8006f82:	4b26      	ldr	r3, [pc, #152]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f84:	791b      	ldrb	r3, [r3, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	bf0c      	ite	eq
 8006f8a:	2301      	moveq	r3, #1
 8006f8c:	2300      	movne	r3, #0
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	4b22      	ldr	r3, [pc, #136]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006f94:	711a      	strb	r2, [r3, #4]
 8006f96:	e03c      	b.n	8007012 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006f98:	88fb      	ldrh	r3, [r7, #6]
 8006f9a:	2bd1      	cmp	r3, #209	; 0xd1
 8006f9c:	d91a      	bls.n	8006fd4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 8006f9e:	88fb      	ldrh	r3, [r7, #6]
 8006fa0:	2be6      	cmp	r3, #230	; 0xe6
 8006fa2:	d817      	bhi.n	8006fd4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006fa4:	4b1d      	ldr	r3, [pc, #116]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fa6:	795b      	ldrb	r3, [r3, #5]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d004      	beq.n	8006fb6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 8006fac:	2100      	movs	r1, #0
 8006fae:	2006      	movs	r0, #6
 8006fb0:	f000 f836 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8006fb4:	e003      	b.n	8006fbe <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	2006      	movs	r0, #6
 8006fba:	f000 f831 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 8006fbe:	4b17      	ldr	r3, [pc, #92]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fc0:	795b      	ldrb	r3, [r3, #5]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bf0c      	ite	eq
 8006fc6:	2301      	moveq	r3, #1
 8006fc8:	2300      	movne	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	4b13      	ldr	r3, [pc, #76]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fd0:	715a      	strb	r2, [r3, #5]
 8006fd2:	e01e      	b.n	8007012 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	2bef      	cmp	r3, #239	; 0xef
 8006fd8:	d91b      	bls.n	8007012 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fe0:	d817      	bhi.n	8007012 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8006fe2:	4b0e      	ldr	r3, [pc, #56]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006fe4:	799b      	ldrb	r3, [r3, #6]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 8006fea:	2100      	movs	r1, #0
 8006fec:	2007      	movs	r0, #7
 8006fee:	f000 f817 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8006ff2:	e003      	b.n	8006ffc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	2007      	movs	r0, #7
 8006ff8:	f000 f812 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 8006ffc:	4b07      	ldr	r3, [pc, #28]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006ffe:	799b      	ldrb	r3, [r3, #6]
 8007000:	2b00      	cmp	r3, #0
 8007002:	bf0c      	ite	eq
 8007004:	2301      	moveq	r3, #1
 8007006:	2300      	movne	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	4b03      	ldr	r3, [pc, #12]	; (800701c <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800700e:	719a      	strb	r2, [r3, #6]
	}
}
 8007010:	e7ff      	b.n	8007012 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8007012:	bf00      	nop
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000868 	.word	0x20000868

08007020 <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af02      	add	r7, sp, #8
 8007026:	4603      	mov	r3, r0
 8007028:	460a      	mov	r2, r1
 800702a:	71fb      	strb	r3, [r7, #7]
 800702c:	4613      	mov	r3, r2
 800702e:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d11a      	bne.n	800706c <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 8007036:	79bb      	ldrb	r3, [r7, #6]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10b      	bne.n	8007054 <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800703c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007040:	9301      	str	r3, [sp, #4]
 8007042:	2305      	movs	r3, #5
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	2312      	movs	r3, #18
 8007048:	2212      	movs	r2, #18
 800704a:	2133      	movs	r1, #51	; 0x33
 800704c:	203d      	movs	r0, #61	; 0x3d
 800704e:	f7fa fc42 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8007052:	e0be      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007054:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	2305      	movs	r3, #5
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	2312      	movs	r3, #18
 8007060:	2212      	movs	r2, #18
 8007062:	2133      	movs	r1, #51	; 0x33
 8007064:	203d      	movs	r0, #61	; 0x3d
 8007066:	f7fa fc36 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 800706a:	e0b2      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	2b02      	cmp	r3, #2
 8007070:	d11a      	bne.n	80070a8 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 8007072:	79bb      	ldrb	r3, [r7, #6]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10b      	bne.n	8007090 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007078:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800707c:	9301      	str	r3, [sp, #4]
 800707e:	2305      	movs	r3, #5
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	2312      	movs	r3, #18
 8007084:	2212      	movs	r2, #18
 8007086:	2133      	movs	r1, #51	; 0x33
 8007088:	205b      	movs	r0, #91	; 0x5b
 800708a:	f7fa fc24 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 800708e:	e0a0      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007090:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	2305      	movs	r3, #5
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	2312      	movs	r3, #18
 800709c:	2212      	movs	r2, #18
 800709e:	2133      	movs	r1, #51	; 0x33
 80070a0:	205b      	movs	r0, #91	; 0x5b
 80070a2:	f7fa fc18 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80070a6:	e094      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d11a      	bne.n	80070e4 <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 80070ae:	79bb      	ldrb	r3, [r7, #6]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10b      	bne.n	80070cc <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070b8:	9301      	str	r3, [sp, #4]
 80070ba:	2305      	movs	r3, #5
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	2312      	movs	r3, #18
 80070c0:	2212      	movs	r2, #18
 80070c2:	2133      	movs	r1, #51	; 0x33
 80070c4:	2079      	movs	r0, #121	; 0x79
 80070c6:	f7fa fc06 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80070ca:	e082      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80070cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80070d0:	9301      	str	r3, [sp, #4]
 80070d2:	2305      	movs	r3, #5
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	2312      	movs	r3, #18
 80070d8:	2212      	movs	r2, #18
 80070da:	2133      	movs	r1, #51	; 0x33
 80070dc:	2079      	movs	r0, #121	; 0x79
 80070de:	f7fa fbfa 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80070e2:	e076      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 80070e4:	79fb      	ldrb	r3, [r7, #7]
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d11a      	bne.n	8007120 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 80070ea:	79bb      	ldrb	r3, [r7, #6]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80070f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	2305      	movs	r3, #5
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	2312      	movs	r3, #18
 80070fc:	2212      	movs	r2, #18
 80070fe:	2133      	movs	r1, #51	; 0x33
 8007100:	2097      	movs	r0, #151	; 0x97
 8007102:	f7fa fbe8 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007106:	e064      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007108:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	2305      	movs	r3, #5
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	2312      	movs	r3, #18
 8007114:	2212      	movs	r2, #18
 8007116:	2133      	movs	r1, #51	; 0x33
 8007118:	2097      	movs	r0, #151	; 0x97
 800711a:	f7fa fbdc 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 800711e:	e058      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	2b05      	cmp	r3, #5
 8007124:	d11a      	bne.n	800715c <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 8007126:	79bb      	ldrb	r3, [r7, #6]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10b      	bne.n	8007144 <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800712c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007130:	9301      	str	r3, [sp, #4]
 8007132:	2305      	movs	r3, #5
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	2312      	movs	r3, #18
 8007138:	2212      	movs	r2, #18
 800713a:	2133      	movs	r1, #51	; 0x33
 800713c:	20b5      	movs	r0, #181	; 0xb5
 800713e:	f7fa fbca 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007142:	e046      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007144:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007148:	9301      	str	r3, [sp, #4]
 800714a:	2305      	movs	r3, #5
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	2312      	movs	r3, #18
 8007150:	2212      	movs	r2, #18
 8007152:	2133      	movs	r1, #51	; 0x33
 8007154:	20b5      	movs	r0, #181	; 0xb5
 8007156:	f7fa fbbe 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 800715a:	e03a      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	2b06      	cmp	r3, #6
 8007160:	d11a      	bne.n	8007198 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 8007162:	79bb      	ldrb	r3, [r7, #6]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10b      	bne.n	8007180 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007168:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	2305      	movs	r3, #5
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	2312      	movs	r3, #18
 8007174:	2212      	movs	r2, #18
 8007176:	2133      	movs	r1, #51	; 0x33
 8007178:	20d3      	movs	r0, #211	; 0xd3
 800717a:	f7fa fbac 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 800717e:	e028      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007180:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	2305      	movs	r3, #5
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	2312      	movs	r3, #18
 800718c:	2212      	movs	r2, #18
 800718e:	2133      	movs	r1, #51	; 0x33
 8007190:	20d3      	movs	r0, #211	; 0xd3
 8007192:	f7fa fba0 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007196:	e01c      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	2b07      	cmp	r3, #7
 800719c:	d119      	bne.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 800719e:	79bb      	ldrb	r3, [r7, #6]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10b      	bne.n	80071bc <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80071a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	2305      	movs	r3, #5
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	2312      	movs	r3, #18
 80071b0:	2212      	movs	r2, #18
 80071b2:	2133      	movs	r1, #51	; 0x33
 80071b4:	20f1      	movs	r0, #241	; 0xf1
 80071b6:	f7fa fb8e 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80071ba:	e00a      	b.n	80071d2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80071bc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80071c0:	9301      	str	r3, [sp, #4]
 80071c2:	2305      	movs	r3, #5
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	2312      	movs	r3, #18
 80071c8:	2212      	movs	r2, #18
 80071ca:	2133      	movs	r1, #51	; 0x33
 80071cc:	20f1      	movs	r0, #241	; 0xf1
 80071ce:	f7fa fb82 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af02      	add	r7, sp, #8
 80071e0:	4603      	mov	r3, r0
 80071e2:	460a      	mov	r2, r1
 80071e4:	71fb      	strb	r3, [r7, #7]
 80071e6:	4613      	mov	r3, r2
 80071e8:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d11a      	bne.n	8007226 <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 80071f0:	79bb      	ldrb	r3, [r7, #6]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10b      	bne.n	800720e <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80071f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	2305      	movs	r3, #5
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	2312      	movs	r3, #18
 8007202:	2212      	movs	r2, #18
 8007204:	21ab      	movs	r1, #171	; 0xab
 8007206:	2016      	movs	r0, #22
 8007208:	f7fa fb65 	bl	80018d6 <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 800720c:	e0fc      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800720e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	2305      	movs	r3, #5
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	2312      	movs	r3, #18
 800721a:	2212      	movs	r2, #18
 800721c:	21ab      	movs	r1, #171	; 0xab
 800721e:	2016      	movs	r0, #22
 8007220:	f7fa fb59 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007224:	e0f0      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	2b02      	cmp	r3, #2
 800722a:	d11a      	bne.n	8007262 <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 800722c:	79bb      	ldrb	r3, [r7, #6]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10b      	bne.n	800724a <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007232:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	2305      	movs	r3, #5
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	2312      	movs	r3, #18
 800723e:	2212      	movs	r2, #18
 8007240:	21ab      	movs	r1, #171	; 0xab
 8007242:	2036      	movs	r0, #54	; 0x36
 8007244:	f7fa fb47 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007248:	e0de      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800724a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	2305      	movs	r3, #5
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	2312      	movs	r3, #18
 8007256:	2212      	movs	r2, #18
 8007258:	21ab      	movs	r1, #171	; 0xab
 800725a:	2036      	movs	r0, #54	; 0x36
 800725c:	f7fa fb3b 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007260:	e0d2      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d11a      	bne.n	800729e <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 8007268:	79bb      	ldrb	r3, [r7, #6]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10b      	bne.n	8007286 <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800726e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	2305      	movs	r3, #5
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	2312      	movs	r3, #18
 800727a:	2212      	movs	r2, #18
 800727c:	21ab      	movs	r1, #171	; 0xab
 800727e:	2056      	movs	r0, #86	; 0x56
 8007280:	f7fa fb29 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007284:	e0c0      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007286:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800728a:	9301      	str	r3, [sp, #4]
 800728c:	2305      	movs	r3, #5
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	2312      	movs	r3, #18
 8007292:	2212      	movs	r2, #18
 8007294:	21ab      	movs	r1, #171	; 0xab
 8007296:	2056      	movs	r0, #86	; 0x56
 8007298:	f7fa fb1d 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 800729c:	e0b4      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d11a      	bne.n	80072da <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 80072a4:	79bb      	ldrb	r3, [r7, #6]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10b      	bne.n	80072c2 <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80072aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	2305      	movs	r3, #5
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	2312      	movs	r3, #18
 80072b6:	2212      	movs	r2, #18
 80072b8:	21ab      	movs	r1, #171	; 0xab
 80072ba:	2076      	movs	r0, #118	; 0x76
 80072bc:	f7fa fb0b 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80072c0:	e0a2      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80072c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	2305      	movs	r3, #5
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	2312      	movs	r3, #18
 80072ce:	2212      	movs	r2, #18
 80072d0:	21ab      	movs	r1, #171	; 0xab
 80072d2:	2076      	movs	r0, #118	; 0x76
 80072d4:	f7fa faff 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80072d8:	e096      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	2b05      	cmp	r3, #5
 80072de:	d11a      	bne.n	8007316 <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 80072e0:	79bb      	ldrb	r3, [r7, #6]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10b      	bne.n	80072fe <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80072e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80072ea:	9301      	str	r3, [sp, #4]
 80072ec:	2305      	movs	r3, #5
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	2312      	movs	r3, #18
 80072f2:	2212      	movs	r2, #18
 80072f4:	21ab      	movs	r1, #171	; 0xab
 80072f6:	2096      	movs	r0, #150	; 0x96
 80072f8:	f7fa faed 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80072fc:	e084      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80072fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007302:	9301      	str	r3, [sp, #4]
 8007304:	2305      	movs	r3, #5
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	2312      	movs	r3, #18
 800730a:	2212      	movs	r2, #18
 800730c:	21ab      	movs	r1, #171	; 0xab
 800730e:	2096      	movs	r0, #150	; 0x96
 8007310:	f7fa fae1 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007314:	e078      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	2b06      	cmp	r3, #6
 800731a:	d11a      	bne.n	8007352 <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 800731c:	79bb      	ldrb	r3, [r7, #6]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10b      	bne.n	800733a <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007322:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	2305      	movs	r3, #5
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	2312      	movs	r3, #18
 800732e:	2212      	movs	r2, #18
 8007330:	21ab      	movs	r1, #171	; 0xab
 8007332:	20b6      	movs	r0, #182	; 0xb6
 8007334:	f7fa facf 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007338:	e066      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800733a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	2305      	movs	r3, #5
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	2312      	movs	r3, #18
 8007346:	2212      	movs	r2, #18
 8007348:	21ab      	movs	r1, #171	; 0xab
 800734a:	20b6      	movs	r0, #182	; 0xb6
 800734c:	f7fa fac3 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007350:	e05a      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	2b07      	cmp	r3, #7
 8007356:	d11a      	bne.n	800738e <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8007358:	79bb      	ldrb	r3, [r7, #6]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10b      	bne.n	8007376 <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800735e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	2305      	movs	r3, #5
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	2312      	movs	r3, #18
 800736a:	2212      	movs	r2, #18
 800736c:	21ab      	movs	r1, #171	; 0xab
 800736e:	20d6      	movs	r0, #214	; 0xd6
 8007370:	f7fa fab1 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007374:	e048      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007376:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800737a:	9301      	str	r3, [sp, #4]
 800737c:	2305      	movs	r3, #5
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	2312      	movs	r3, #18
 8007382:	2212      	movs	r2, #18
 8007384:	21ab      	movs	r1, #171	; 0xab
 8007386:	20d6      	movs	r0, #214	; 0xd6
 8007388:	f7fa faa5 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 800738c:	e03c      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	2b08      	cmp	r3, #8
 8007392:	d11a      	bne.n	80073ca <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 8007394:	79bb      	ldrb	r3, [r7, #6]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10b      	bne.n	80073b2 <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800739a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	2305      	movs	r3, #5
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	2312      	movs	r3, #18
 80073a6:	2212      	movs	r2, #18
 80073a8:	21ab      	movs	r1, #171	; 0xab
 80073aa:	20f6      	movs	r0, #246	; 0xf6
 80073ac:	f7fa fa93 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80073b0:	e02a      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80073b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	2305      	movs	r3, #5
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	2312      	movs	r3, #18
 80073be:	2212      	movs	r2, #18
 80073c0:	21ab      	movs	r1, #171	; 0xab
 80073c2:	20f6      	movs	r0, #246	; 0xf6
 80073c4:	f7fa fa87 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80073c8:	e01e      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	2b09      	cmp	r3, #9
 80073ce:	d11b      	bne.n	8007408 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 80073d0:	79bb      	ldrb	r3, [r7, #6]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10c      	bne.n	80073f0 <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80073d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	2305      	movs	r3, #5
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	2312      	movs	r3, #18
 80073e2:	2212      	movs	r2, #18
 80073e4:	21ab      	movs	r1, #171	; 0xab
 80073e6:	f44f 708b 	mov.w	r0, #278	; 0x116
 80073ea:	f7fa fa74 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 80073ee:	e00b      	b.n	8007408 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80073f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	2305      	movs	r3, #5
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	2312      	movs	r3, #18
 80073fc:	2212      	movs	r2, #18
 80073fe:	21ab      	movs	r1, #171	; 0xab
 8007400:	f44f 708b 	mov.w	r0, #278	; 0x116
 8007404:	f7fa fa67 	bl	80018d6 <GFX_DrawFillRoundRectangle>
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <schedule1HourOnIncrease>:

//
// Functions to change on screen hour and minute ON/OFF  1 schedule
void schedule1HourOnIncrease(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af02      	add	r7, sp, #8
	if(hourOnSchedule1 < 24)
 8007416:	4b17      	ldr	r3, [pc, #92]	; (8007474 <schedule1HourOnIncrease+0x64>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b17      	cmp	r3, #23
 800741c:	d806      	bhi.n	800742c <schedule1HourOnIncrease+0x1c>
	{
		hourOnSchedule1++;
 800741e:	4b15      	ldr	r3, [pc, #84]	; (8007474 <schedule1HourOnIncrease+0x64>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	3301      	adds	r3, #1
 8007424:	b2da      	uxtb	r2, r3
 8007426:	4b13      	ldr	r3, [pc, #76]	; (8007474 <schedule1HourOnIncrease+0x64>)
 8007428:	701a      	strb	r2, [r3, #0]
 800742a:	e002      	b.n	8007432 <schedule1HourOnIncrease+0x22>
	}
	else
	{
		hourOnSchedule1 = 1;
 800742c:	4b11      	ldr	r3, [pc, #68]	; (8007474 <schedule1HourOnIncrease+0x64>)
 800742e:	2201      	movs	r2, #1
 8007430:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOnSchedule1);
 8007432:	4b10      	ldr	r3, [pc, #64]	; (8007474 <schedule1HourOnIncrease+0x64>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b09      	cmp	r3, #9
 8007438:	d907      	bls.n	800744a <schedule1HourOnIncrease+0x3a>
 800743a:	4b0e      	ldr	r3, [pc, #56]	; (8007474 <schedule1HourOnIncrease+0x64>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	490d      	ldr	r1, [pc, #52]	; (8007478 <schedule1HourOnIncrease+0x68>)
 8007442:	480e      	ldr	r0, [pc, #56]	; (800747c <schedule1HourOnIncrease+0x6c>)
 8007444:	f00b ff1c 	bl	8013280 <siprintf>
 8007448:	e006      	b.n	8007458 <schedule1HourOnIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOnSchedule1);
 800744a:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <schedule1HourOnIncrease+0x64>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	490b      	ldr	r1, [pc, #44]	; (8007480 <schedule1HourOnIncrease+0x70>)
 8007452:	480a      	ldr	r0, [pc, #40]	; (800747c <schedule1HourOnIncrease+0x6c>)
 8007454:	f00b ff14 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007458:	f24c 6318 	movw	r3, #50712	; 0xc618
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	2301      	movs	r3, #1
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	2300      	movs	r3, #0
 8007464:	2264      	movs	r2, #100	; 0x64
 8007466:	2150      	movs	r1, #80	; 0x50
 8007468:	4804      	ldr	r0, [pc, #16]	; (800747c <schedule1HourOnIncrease+0x6c>)
 800746a:	f7fa fc9f 	bl	8001dac <EF_PutString>
}
 800746e:	bf00      	nop
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	2000088d 	.word	0x2000088d
 8007478:	080175c8 	.word	0x080175c8
 800747c:	200008a4 	.word	0x200008a4
 8007480:	080175d0 	.word	0x080175d0

08007484 <schedule1HourOnDecrease>:
void schedule1HourOnDecrease(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af02      	add	r7, sp, #8
	if(hourOnSchedule1 > 1)
 800748a:	4b17      	ldr	r3, [pc, #92]	; (80074e8 <schedule1HourOnDecrease+0x64>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d906      	bls.n	80074a0 <schedule1HourOnDecrease+0x1c>
	{
		hourOnSchedule1--;
 8007492:	4b15      	ldr	r3, [pc, #84]	; (80074e8 <schedule1HourOnDecrease+0x64>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	3b01      	subs	r3, #1
 8007498:	b2da      	uxtb	r2, r3
 800749a:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <schedule1HourOnDecrease+0x64>)
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	e002      	b.n	80074a6 <schedule1HourOnDecrease+0x22>
	}
	else
	{
		hourOnSchedule1 = 24;
 80074a0:	4b11      	ldr	r3, [pc, #68]	; (80074e8 <schedule1HourOnDecrease+0x64>)
 80074a2:	2218      	movs	r2, #24
 80074a4:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOnSchedule1);
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <schedule1HourOnDecrease+0x64>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b09      	cmp	r3, #9
 80074ac:	d907      	bls.n	80074be <schedule1HourOnDecrease+0x3a>
 80074ae:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <schedule1HourOnDecrease+0x64>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	490d      	ldr	r1, [pc, #52]	; (80074ec <schedule1HourOnDecrease+0x68>)
 80074b6:	480e      	ldr	r0, [pc, #56]	; (80074f0 <schedule1HourOnDecrease+0x6c>)
 80074b8:	f00b fee2 	bl	8013280 <siprintf>
 80074bc:	e006      	b.n	80074cc <schedule1HourOnDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOnSchedule1);
 80074be:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <schedule1HourOnDecrease+0x64>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	490b      	ldr	r1, [pc, #44]	; (80074f4 <schedule1HourOnDecrease+0x70>)
 80074c6:	480a      	ldr	r0, [pc, #40]	; (80074f0 <schedule1HourOnDecrease+0x6c>)
 80074c8:	f00b feda 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80074cc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80074d0:	9301      	str	r3, [sp, #4]
 80074d2:	2301      	movs	r3, #1
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	2300      	movs	r3, #0
 80074d8:	2264      	movs	r2, #100	; 0x64
 80074da:	2150      	movs	r1, #80	; 0x50
 80074dc:	4804      	ldr	r0, [pc, #16]	; (80074f0 <schedule1HourOnDecrease+0x6c>)
 80074de:	f7fa fc65 	bl	8001dac <EF_PutString>
}
 80074e2:	bf00      	nop
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	2000088d 	.word	0x2000088d
 80074ec:	080175c8 	.word	0x080175c8
 80074f0:	200008a4 	.word	0x200008a4
 80074f4:	080175d0 	.word	0x080175d0

080074f8 <schedule1MinuteOnIncrease>:
void schedule1MinuteOnIncrease(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af02      	add	r7, sp, #8
	if(minuteOnSchedule1 < 59)
 80074fe:	4b17      	ldr	r3, [pc, #92]	; (800755c <schedule1MinuteOnIncrease+0x64>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b3a      	cmp	r3, #58	; 0x3a
 8007504:	d806      	bhi.n	8007514 <schedule1MinuteOnIncrease+0x1c>
	{
		minuteOnSchedule1++;
 8007506:	4b15      	ldr	r3, [pc, #84]	; (800755c <schedule1MinuteOnIncrease+0x64>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	3301      	adds	r3, #1
 800750c:	b2da      	uxtb	r2, r3
 800750e:	4b13      	ldr	r3, [pc, #76]	; (800755c <schedule1MinuteOnIncrease+0x64>)
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	e002      	b.n	800751a <schedule1MinuteOnIncrease+0x22>
	}
	else
	{
		minuteOnSchedule1 = 0;
 8007514:	4b11      	ldr	r3, [pc, #68]	; (800755c <schedule1MinuteOnIncrease+0x64>)
 8007516:	2200      	movs	r2, #0
 8007518:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOnSchedule1);
 800751a:	4b10      	ldr	r3, [pc, #64]	; (800755c <schedule1MinuteOnIncrease+0x64>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b09      	cmp	r3, #9
 8007520:	d907      	bls.n	8007532 <schedule1MinuteOnIncrease+0x3a>
 8007522:	4b0e      	ldr	r3, [pc, #56]	; (800755c <schedule1MinuteOnIncrease+0x64>)
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	490d      	ldr	r1, [pc, #52]	; (8007560 <schedule1MinuteOnIncrease+0x68>)
 800752a:	480e      	ldr	r0, [pc, #56]	; (8007564 <schedule1MinuteOnIncrease+0x6c>)
 800752c:	f00b fea8 	bl	8013280 <siprintf>
 8007530:	e006      	b.n	8007540 <schedule1MinuteOnIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOnSchedule1);
 8007532:	4b0a      	ldr	r3, [pc, #40]	; (800755c <schedule1MinuteOnIncrease+0x64>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	490b      	ldr	r1, [pc, #44]	; (8007568 <schedule1MinuteOnIncrease+0x70>)
 800753a:	480a      	ldr	r0, [pc, #40]	; (8007564 <schedule1MinuteOnIncrease+0x6c>)
 800753c:	f00b fea0 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007540:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	2301      	movs	r3, #1
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	2300      	movs	r3, #0
 800754c:	2264      	movs	r2, #100	; 0x64
 800754e:	218a      	movs	r1, #138	; 0x8a
 8007550:	4804      	ldr	r0, [pc, #16]	; (8007564 <schedule1MinuteOnIncrease+0x6c>)
 8007552:	f7fa fc2b 	bl	8001dac <EF_PutString>
}
 8007556:	bf00      	nop
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	2000088f 	.word	0x2000088f
 8007560:	080175c8 	.word	0x080175c8
 8007564:	200008a4 	.word	0x200008a4
 8007568:	080175d0 	.word	0x080175d0

0800756c <schedule1MinuteOnDecrease>:
void schedule1MinuteOnDecrease(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af02      	add	r7, sp, #8
	if(minuteOnSchedule1 > 0)
 8007572:	4b17      	ldr	r3, [pc, #92]	; (80075d0 <schedule1MinuteOnDecrease+0x64>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d006      	beq.n	8007588 <schedule1MinuteOnDecrease+0x1c>
	{
		minuteOnSchedule1--;
 800757a:	4b15      	ldr	r3, [pc, #84]	; (80075d0 <schedule1MinuteOnDecrease+0x64>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	3b01      	subs	r3, #1
 8007580:	b2da      	uxtb	r2, r3
 8007582:	4b13      	ldr	r3, [pc, #76]	; (80075d0 <schedule1MinuteOnDecrease+0x64>)
 8007584:	701a      	strb	r2, [r3, #0]
 8007586:	e002      	b.n	800758e <schedule1MinuteOnDecrease+0x22>
	}
	else
	{
		minuteOnSchedule1 = 59;
 8007588:	4b11      	ldr	r3, [pc, #68]	; (80075d0 <schedule1MinuteOnDecrease+0x64>)
 800758a:	223b      	movs	r2, #59	; 0x3b
 800758c:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOnSchedule1);
 800758e:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <schedule1MinuteOnDecrease+0x64>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b09      	cmp	r3, #9
 8007594:	d907      	bls.n	80075a6 <schedule1MinuteOnDecrease+0x3a>
 8007596:	4b0e      	ldr	r3, [pc, #56]	; (80075d0 <schedule1MinuteOnDecrease+0x64>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	490d      	ldr	r1, [pc, #52]	; (80075d4 <schedule1MinuteOnDecrease+0x68>)
 800759e:	480e      	ldr	r0, [pc, #56]	; (80075d8 <schedule1MinuteOnDecrease+0x6c>)
 80075a0:	f00b fe6e 	bl	8013280 <siprintf>
 80075a4:	e006      	b.n	80075b4 <schedule1MinuteOnDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOnSchedule1);
 80075a6:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <schedule1MinuteOnDecrease+0x64>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	490b      	ldr	r1, [pc, #44]	; (80075dc <schedule1MinuteOnDecrease+0x70>)
 80075ae:	480a      	ldr	r0, [pc, #40]	; (80075d8 <schedule1MinuteOnDecrease+0x6c>)
 80075b0:	f00b fe66 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80075b4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	2301      	movs	r3, #1
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	2300      	movs	r3, #0
 80075c0:	2264      	movs	r2, #100	; 0x64
 80075c2:	218a      	movs	r1, #138	; 0x8a
 80075c4:	4804      	ldr	r0, [pc, #16]	; (80075d8 <schedule1MinuteOnDecrease+0x6c>)
 80075c6:	f7fa fbf1 	bl	8001dac <EF_PutString>
}
 80075ca:	bf00      	nop
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	2000088f 	.word	0x2000088f
 80075d4:	080175c8 	.word	0x080175c8
 80075d8:	200008a4 	.word	0x200008a4
 80075dc:	080175d0 	.word	0x080175d0

080075e0 <schedule1HourOffIncrease>:

void schedule1HourOffIncrease(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af02      	add	r7, sp, #8
	if(hourOffSchedule1 < 24)
 80075e6:	4b17      	ldr	r3, [pc, #92]	; (8007644 <schedule1HourOffIncrease+0x64>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b17      	cmp	r3, #23
 80075ec:	d806      	bhi.n	80075fc <schedule1HourOffIncrease+0x1c>
	{
		hourOffSchedule1++;
 80075ee:	4b15      	ldr	r3, [pc, #84]	; (8007644 <schedule1HourOffIncrease+0x64>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	3301      	adds	r3, #1
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	4b13      	ldr	r3, [pc, #76]	; (8007644 <schedule1HourOffIncrease+0x64>)
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e002      	b.n	8007602 <schedule1HourOffIncrease+0x22>
	}
	else
	{
		hourOffSchedule1 = 1;
 80075fc:	4b11      	ldr	r3, [pc, #68]	; (8007644 <schedule1HourOffIncrease+0x64>)
 80075fe:	2201      	movs	r2, #1
 8007600:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOffSchedule1);
 8007602:	4b10      	ldr	r3, [pc, #64]	; (8007644 <schedule1HourOffIncrease+0x64>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b09      	cmp	r3, #9
 8007608:	d907      	bls.n	800761a <schedule1HourOffIncrease+0x3a>
 800760a:	4b0e      	ldr	r3, [pc, #56]	; (8007644 <schedule1HourOffIncrease+0x64>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	490d      	ldr	r1, [pc, #52]	; (8007648 <schedule1HourOffIncrease+0x68>)
 8007612:	480e      	ldr	r0, [pc, #56]	; (800764c <schedule1HourOffIncrease+0x6c>)
 8007614:	f00b fe34 	bl	8013280 <siprintf>
 8007618:	e006      	b.n	8007628 <schedule1HourOffIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOffSchedule1);
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <schedule1HourOffIncrease+0x64>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	461a      	mov	r2, r3
 8007620:	490b      	ldr	r1, [pc, #44]	; (8007650 <schedule1HourOffIncrease+0x70>)
 8007622:	480a      	ldr	r0, [pc, #40]	; (800764c <schedule1HourOffIncrease+0x6c>)
 8007624:	f00b fe2c 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007628:	f24c 6318 	movw	r3, #50712	; 0xc618
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	2301      	movs	r3, #1
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	2300      	movs	r3, #0
 8007634:	2287      	movs	r2, #135	; 0x87
 8007636:	214e      	movs	r1, #78	; 0x4e
 8007638:	4804      	ldr	r0, [pc, #16]	; (800764c <schedule1HourOffIncrease+0x6c>)
 800763a:	f7fa fbb7 	bl	8001dac <EF_PutString>
}
 800763e:	bf00      	nop
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	2000088e 	.word	0x2000088e
 8007648:	080175c8 	.word	0x080175c8
 800764c:	200008a4 	.word	0x200008a4
 8007650:	080175d0 	.word	0x080175d0

08007654 <schedule1HourOffDecrease>:
void schedule1HourOffDecrease(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af02      	add	r7, sp, #8
	if(hourOffSchedule1 > 1)
 800765a:	4b17      	ldr	r3, [pc, #92]	; (80076b8 <schedule1HourOffDecrease+0x64>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d906      	bls.n	8007670 <schedule1HourOffDecrease+0x1c>
	{
		hourOffSchedule1--;
 8007662:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <schedule1HourOffDecrease+0x64>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	3b01      	subs	r3, #1
 8007668:	b2da      	uxtb	r2, r3
 800766a:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <schedule1HourOffDecrease+0x64>)
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e002      	b.n	8007676 <schedule1HourOffDecrease+0x22>
	}
	else
	{
		hourOffSchedule1 = 24;
 8007670:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <schedule1HourOffDecrease+0x64>)
 8007672:	2218      	movs	r2, #24
 8007674:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOffSchedule1);
 8007676:	4b10      	ldr	r3, [pc, #64]	; (80076b8 <schedule1HourOffDecrease+0x64>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b09      	cmp	r3, #9
 800767c:	d907      	bls.n	800768e <schedule1HourOffDecrease+0x3a>
 800767e:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <schedule1HourOffDecrease+0x64>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	490d      	ldr	r1, [pc, #52]	; (80076bc <schedule1HourOffDecrease+0x68>)
 8007686:	480e      	ldr	r0, [pc, #56]	; (80076c0 <schedule1HourOffDecrease+0x6c>)
 8007688:	f00b fdfa 	bl	8013280 <siprintf>
 800768c:	e006      	b.n	800769c <schedule1HourOffDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOffSchedule1);
 800768e:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <schedule1HourOffDecrease+0x64>)
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	490b      	ldr	r1, [pc, #44]	; (80076c4 <schedule1HourOffDecrease+0x70>)
 8007696:	480a      	ldr	r0, [pc, #40]	; (80076c0 <schedule1HourOffDecrease+0x6c>)
 8007698:	f00b fdf2 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800769c:	f24c 6318 	movw	r3, #50712	; 0xc618
 80076a0:	9301      	str	r3, [sp, #4]
 80076a2:	2301      	movs	r3, #1
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	2300      	movs	r3, #0
 80076a8:	2287      	movs	r2, #135	; 0x87
 80076aa:	214e      	movs	r1, #78	; 0x4e
 80076ac:	4804      	ldr	r0, [pc, #16]	; (80076c0 <schedule1HourOffDecrease+0x6c>)
 80076ae:	f7fa fb7d 	bl	8001dac <EF_PutString>
}
 80076b2:	bf00      	nop
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	2000088e 	.word	0x2000088e
 80076bc:	080175c8 	.word	0x080175c8
 80076c0:	200008a4 	.word	0x200008a4
 80076c4:	080175d0 	.word	0x080175d0

080076c8 <schedule1MinuteOffIncrease>:
void schedule1MinuteOffIncrease(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af02      	add	r7, sp, #8
	if(minuteOffSchedule1 < 59)
 80076ce:	4b17      	ldr	r3, [pc, #92]	; (800772c <schedule1MinuteOffIncrease+0x64>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b3a      	cmp	r3, #58	; 0x3a
 80076d4:	d806      	bhi.n	80076e4 <schedule1MinuteOffIncrease+0x1c>
	{
		minuteOffSchedule1++;
 80076d6:	4b15      	ldr	r3, [pc, #84]	; (800772c <schedule1MinuteOffIncrease+0x64>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	3301      	adds	r3, #1
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	4b13      	ldr	r3, [pc, #76]	; (800772c <schedule1MinuteOffIncrease+0x64>)
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	e002      	b.n	80076ea <schedule1MinuteOffIncrease+0x22>
	}
	else
	{
		minuteOffSchedule1 = 0;
 80076e4:	4b11      	ldr	r3, [pc, #68]	; (800772c <schedule1MinuteOffIncrease+0x64>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOffSchedule1);
 80076ea:	4b10      	ldr	r3, [pc, #64]	; (800772c <schedule1MinuteOffIncrease+0x64>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b09      	cmp	r3, #9
 80076f0:	d907      	bls.n	8007702 <schedule1MinuteOffIncrease+0x3a>
 80076f2:	4b0e      	ldr	r3, [pc, #56]	; (800772c <schedule1MinuteOffIncrease+0x64>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	490d      	ldr	r1, [pc, #52]	; (8007730 <schedule1MinuteOffIncrease+0x68>)
 80076fa:	480e      	ldr	r0, [pc, #56]	; (8007734 <schedule1MinuteOffIncrease+0x6c>)
 80076fc:	f00b fdc0 	bl	8013280 <siprintf>
 8007700:	e006      	b.n	8007710 <schedule1MinuteOffIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOffSchedule1);
 8007702:	4b0a      	ldr	r3, [pc, #40]	; (800772c <schedule1MinuteOffIncrease+0x64>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	490b      	ldr	r1, [pc, #44]	; (8007738 <schedule1MinuteOffIncrease+0x70>)
 800770a:	480a      	ldr	r0, [pc, #40]	; (8007734 <schedule1MinuteOffIncrease+0x6c>)
 800770c:	f00b fdb8 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007710:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	2301      	movs	r3, #1
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	2287      	movs	r2, #135	; 0x87
 800771e:	218a      	movs	r1, #138	; 0x8a
 8007720:	4804      	ldr	r0, [pc, #16]	; (8007734 <schedule1MinuteOffIncrease+0x6c>)
 8007722:	f7fa fb43 	bl	8001dac <EF_PutString>
}
 8007726:	bf00      	nop
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20000890 	.word	0x20000890
 8007730:	080175c8 	.word	0x080175c8
 8007734:	200008a4 	.word	0x200008a4
 8007738:	080175d0 	.word	0x080175d0

0800773c <schedule1MinuteOffDecrease>:
void schedule1MinuteOffDecrease(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af02      	add	r7, sp, #8
	if(minuteOffSchedule1 > 0)
 8007742:	4b17      	ldr	r3, [pc, #92]	; (80077a0 <schedule1MinuteOffDecrease+0x64>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d006      	beq.n	8007758 <schedule1MinuteOffDecrease+0x1c>
	{
		minuteOffSchedule1--;
 800774a:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <schedule1MinuteOffDecrease+0x64>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	3b01      	subs	r3, #1
 8007750:	b2da      	uxtb	r2, r3
 8007752:	4b13      	ldr	r3, [pc, #76]	; (80077a0 <schedule1MinuteOffDecrease+0x64>)
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	e002      	b.n	800775e <schedule1MinuteOffDecrease+0x22>
	}
	else
	{
		minuteOffSchedule1 = 59;
 8007758:	4b11      	ldr	r3, [pc, #68]	; (80077a0 <schedule1MinuteOffDecrease+0x64>)
 800775a:	223b      	movs	r2, #59	; 0x3b
 800775c:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOffSchedule1);
 800775e:	4b10      	ldr	r3, [pc, #64]	; (80077a0 <schedule1MinuteOffDecrease+0x64>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b09      	cmp	r3, #9
 8007764:	d907      	bls.n	8007776 <schedule1MinuteOffDecrease+0x3a>
 8007766:	4b0e      	ldr	r3, [pc, #56]	; (80077a0 <schedule1MinuteOffDecrease+0x64>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	490d      	ldr	r1, [pc, #52]	; (80077a4 <schedule1MinuteOffDecrease+0x68>)
 800776e:	480e      	ldr	r0, [pc, #56]	; (80077a8 <schedule1MinuteOffDecrease+0x6c>)
 8007770:	f00b fd86 	bl	8013280 <siprintf>
 8007774:	e006      	b.n	8007784 <schedule1MinuteOffDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOffSchedule1);
 8007776:	4b0a      	ldr	r3, [pc, #40]	; (80077a0 <schedule1MinuteOffDecrease+0x64>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	490b      	ldr	r1, [pc, #44]	; (80077ac <schedule1MinuteOffDecrease+0x70>)
 800777e:	480a      	ldr	r0, [pc, #40]	; (80077a8 <schedule1MinuteOffDecrease+0x6c>)
 8007780:	f00b fd7e 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007784:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007788:	9301      	str	r3, [sp, #4]
 800778a:	2301      	movs	r3, #1
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	2300      	movs	r3, #0
 8007790:	2287      	movs	r2, #135	; 0x87
 8007792:	218a      	movs	r1, #138	; 0x8a
 8007794:	4804      	ldr	r0, [pc, #16]	; (80077a8 <schedule1MinuteOffDecrease+0x6c>)
 8007796:	f7fa fb09 	bl	8001dac <EF_PutString>
}
 800779a:	bf00      	nop
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20000890 	.word	0x20000890
 80077a4:	080175c8 	.word	0x080175c8
 80077a8:	200008a4 	.word	0x200008a4
 80077ac:	080175d0 	.word	0x080175d0

080077b0 <MenuTFTSchedule1ActivityHourMinuteONAdd>:


//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	4603      	mov	r3, r0
 80077b8:	460a      	mov	r2, r1
 80077ba:	80fb      	strh	r3, [r7, #6]
 80077bc:	4613      	mov	r3, r2
 80077be:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80077c0:	4833      	ldr	r0, [pc, #204]	; (8007890 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe0>)
 80077c2:	f7fa f8d9 	bl	8001978 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	2bba      	cmp	r3, #186	; 0xba
 80077ca:	d908      	bls.n	80077de <MenuTFTSchedule1ActivityHourMinuteONAdd+0x2e>
 80077cc:	88fb      	ldrh	r3, [r7, #6]
 80077ce:	2bdd      	cmp	r3, #221	; 0xdd
 80077d0:	d805      	bhi.n	80077de <MenuTFTSchedule1ActivityHourMinuteONAdd+0x2e>
	{
		EncoderState = ENCODER_SCHEDULE_1_HOUR_ON;
 80077d2:	4b30      	ldr	r3, [pc, #192]	; (8007894 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>)
 80077d4:	2206      	movs	r2, #6
 80077d6:	701a      	strb	r2, [r3, #0]
		schedule1HourOnIncrease();
 80077d8:	f7ff fe1a 	bl	8007410 <schedule1HourOnIncrease>
 80077dc:	e054      	b.n	8007888 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>

	}

	// Check if it is Minute to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	2be8      	cmp	r3, #232	; 0xe8
 80077e2:	d909      	bls.n	80077f8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x48>
 80077e4:	88fb      	ldrh	r3, [r7, #6]
 80077e6:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80077ea:	d205      	bcs.n	80077f8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x48>
	{
		schedule1MinuteOnIncrease();
 80077ec:	f7ff fe84 	bl	80074f8 <schedule1MinuteOnIncrease>
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_ON;
 80077f0:	4b28      	ldr	r3, [pc, #160]	; (8007894 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>)
 80077f2:	2208      	movs	r2, #8
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	e047      	b.n	8007888 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80077f8:	88fb      	ldrh	r3, [r7, #6]
 80077fa:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80077fe:	d943      	bls.n	8007888 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
 8007800:	88fb      	ldrh	r3, [r7, #6]
 8007802:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007806:	d23f      	bcs.n	8007888 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_ON;
 8007808:	4b22      	ldr	r3, [pc, #136]	; (8007894 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>)
 800780a:	2208      	movs	r2, #8
 800780c:	701a      	strb	r2, [r3, #0]
		if(minuteOnSchedule1 < 49)
 800780e:	4b22      	ldr	r3, [pc, #136]	; (8007898 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b30      	cmp	r3, #48	; 0x30
 8007814:	d806      	bhi.n	8007824 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x74>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8007816:	4b20      	ldr	r3, [pc, #128]	; (8007898 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	330a      	adds	r3, #10
 800781c:	b2da      	uxtb	r2, r3
 800781e:	4b1e      	ldr	r3, [pc, #120]	; (8007898 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007820:	701a      	strb	r2, [r3, #0]
 8007822:	e012      	b.n	800784a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x9a>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 8007824:	4b1c      	ldr	r3, [pc, #112]	; (8007898 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	f103 020a 	add.w	r2, r3, #10
 800782c:	4b1b      	ldr	r3, [pc, #108]	; (800789c <MenuTFTSchedule1ActivityHourMinuteONAdd+0xec>)
 800782e:	fb83 1302 	smull	r1, r3, r3, r2
 8007832:	4413      	add	r3, r2
 8007834:	1159      	asrs	r1, r3, #5
 8007836:	17d3      	asrs	r3, r2, #31
 8007838:	1ac9      	subs	r1, r1, r3
 800783a:	460b      	mov	r3, r1
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	1a5b      	subs	r3, r3, r1
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	1ad1      	subs	r1, r2, r3
 8007844:	b2ca      	uxtb	r2, r1
 8007846:	4b14      	ldr	r3, [pc, #80]	; (8007898 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007848:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOnSchedule1);
 800784a:	4b13      	ldr	r3, [pc, #76]	; (8007898 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	2b09      	cmp	r3, #9
 8007850:	d907      	bls.n	8007862 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xb2>
 8007852:	4b11      	ldr	r3, [pc, #68]	; (8007898 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	4911      	ldr	r1, [pc, #68]	; (80078a0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf0>)
 800785a:	4812      	ldr	r0, [pc, #72]	; (80078a4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf4>)
 800785c:	f00b fd10 	bl	8013280 <siprintf>
 8007860:	e006      	b.n	8007870 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xc0>
		else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOnSchedule1);
 8007862:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe8>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	490f      	ldr	r1, [pc, #60]	; (80078a8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf8>)
 800786a:	480e      	ldr	r0, [pc, #56]	; (80078a4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf4>)
 800786c:	f00b fd08 	bl	8013280 <siprintf>
		EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007870:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	2301      	movs	r3, #1
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	2300      	movs	r3, #0
 800787c:	2264      	movs	r2, #100	; 0x64
 800787e:	218a      	movs	r1, #138	; 0x8a
 8007880:	4808      	ldr	r0, [pc, #32]	; (80078a4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xf4>)
 8007882:	f7fa fa93 	bl	8001dac <EF_PutString>
	}
}
 8007886:	e7ff      	b.n	8007888 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xd8>
 8007888:	bf00      	nop
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	0802ab7c 	.word	0x0802ab7c
 8007894:	200008e9 	.word	0x200008e9
 8007898:	2000088f 	.word	0x2000088f
 800789c:	88888889 	.word	0x88888889
 80078a0:	080175c8 	.word	0x080175c8
 80078a4:	200008a4 	.word	0x200008a4
 80078a8:	080175d0 	.word	0x080175d0

080078ac <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	4603      	mov	r3, r0
 80078b4:	460a      	mov	r2, r1
 80078b6:	80fb      	strh	r3, [r7, #6]
 80078b8:	4613      	mov	r3, r2
 80078ba:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80078bc:	4833      	ldr	r0, [pc, #204]	; (800798c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe0>)
 80078be:	f7fa f85b 	bl	8001978 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80078c2:	88fb      	ldrh	r3, [r7, #6]
 80078c4:	2bba      	cmp	r3, #186	; 0xba
 80078c6:	d908      	bls.n	80078da <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x2e>
 80078c8:	88fb      	ldrh	r3, [r7, #6]
 80078ca:	2bdd      	cmp	r3, #221	; 0xdd
 80078cc:	d805      	bhi.n	80078da <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x2e>
	{
		schedule1HourOffIncrease();
 80078ce:	f7ff fe87 	bl	80075e0 <schedule1HourOffIncrease>
		EncoderState = ENCODER_SCHEDULE_1_HOUR_OFF;
 80078d2:	4b2f      	ldr	r3, [pc, #188]	; (8007990 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>)
 80078d4:	2207      	movs	r2, #7
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	e054      	b.n	8007984 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>

	}

	// Check if it is Minute to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80078da:	88fb      	ldrh	r3, [r7, #6]
 80078dc:	2be8      	cmp	r3, #232	; 0xe8
 80078de:	d909      	bls.n	80078f4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x48>
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80078e6:	d205      	bcs.n	80078f4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x48>
	{
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_OFF;
 80078e8:	4b29      	ldr	r3, [pc, #164]	; (8007990 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>)
 80078ea:	2209      	movs	r2, #9
 80078ec:	701a      	strb	r2, [r3, #0]
		schedule1MinuteOffIncrease();
 80078ee:	f7ff feeb 	bl	80076c8 <schedule1MinuteOffIncrease>
 80078f2:	e047      	b.n	8007984 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>

	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80078f4:	88fb      	ldrh	r3, [r7, #6]
 80078f6:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80078fa:	d943      	bls.n	8007984 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>
 80078fc:	88fb      	ldrh	r3, [r7, #6]
 80078fe:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007902:	d23f      	bcs.n	8007984 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_1_MINUTE_OFF;
 8007904:	4b22      	ldr	r3, [pc, #136]	; (8007990 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>)
 8007906:	2209      	movs	r2, #9
 8007908:	701a      	strb	r2, [r3, #0]
		if(minuteOffSchedule1 < 49)
 800790a:	4b22      	ldr	r3, [pc, #136]	; (8007994 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b30      	cmp	r3, #48	; 0x30
 8007910:	d806      	bhi.n	8007920 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x74>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 8007912:	4b20      	ldr	r3, [pc, #128]	; (8007994 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	330a      	adds	r3, #10
 8007918:	b2da      	uxtb	r2, r3
 800791a:	4b1e      	ldr	r3, [pc, #120]	; (8007994 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	e012      	b.n	8007946 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x9a>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8007920:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	f103 020a 	add.w	r2, r3, #10
 8007928:	4b1b      	ldr	r3, [pc, #108]	; (8007998 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xec>)
 800792a:	fb83 1302 	smull	r1, r3, r3, r2
 800792e:	4413      	add	r3, r2
 8007930:	1159      	asrs	r1, r3, #5
 8007932:	17d3      	asrs	r3, r2, #31
 8007934:	1ac9      	subs	r1, r1, r3
 8007936:	460b      	mov	r3, r1
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	1a5b      	subs	r3, r3, r1
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	1ad1      	subs	r1, r2, r3
 8007940:	b2ca      	uxtb	r2, r1
 8007942:	4b14      	ldr	r3, [pc, #80]	; (8007994 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007944:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOffSchedule1);
 8007946:	4b13      	ldr	r3, [pc, #76]	; (8007994 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b09      	cmp	r3, #9
 800794c:	d907      	bls.n	800795e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xb2>
 800794e:	4b11      	ldr	r3, [pc, #68]	; (8007994 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	4911      	ldr	r1, [pc, #68]	; (800799c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf0>)
 8007956:	4812      	ldr	r0, [pc, #72]	; (80079a0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf4>)
 8007958:	f00b fc92 	bl	8013280 <siprintf>
 800795c:	e006      	b.n	800796c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xc0>
		else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOffSchedule1);
 800795e:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe8>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	490f      	ldr	r1, [pc, #60]	; (80079a4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf8>)
 8007966:	480e      	ldr	r0, [pc, #56]	; (80079a0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf4>)
 8007968:	f00b fc8a 	bl	8013280 <siprintf>
		EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800796c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	2301      	movs	r3, #1
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	2300      	movs	r3, #0
 8007978:	2287      	movs	r2, #135	; 0x87
 800797a:	218a      	movs	r1, #138	; 0x8a
 800797c:	4808      	ldr	r0, [pc, #32]	; (80079a0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xf4>)
 800797e:	f7fa fa15 	bl	8001dac <EF_PutString>
	}
}
 8007982:	e7ff      	b.n	8007984 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xd8>
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	0802ab7c 	.word	0x0802ab7c
 8007990:	200008e9 	.word	0x200008e9
 8007994:	20000890 	.word	0x20000890
 8007998:	88888889 	.word	0x88888889
 800799c:	080175c8 	.word	0x080175c8
 80079a0:	200008a4 	.word	0x200008a4
 80079a4:	080175d0 	.word	0x080175d0

080079a8 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	460a      	mov	r2, r1
 80079b2:	80fb      	strh	r3, [r7, #6]
 80079b4:	4613      	mov	r3, r2
 80079b6:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 80079b8:	88fb      	ldrh	r3, [r7, #6]
 80079ba:	2b3b      	cmp	r3, #59	; 0x3b
 80079bc:	d91a      	bls.n	80079f4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 80079be:	88fb      	ldrh	r3, [r7, #6]
 80079c0:	2b50      	cmp	r3, #80	; 0x50
 80079c2:	d817      	bhi.n	80079f4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 80079c4:	4b68      	ldr	r3, [pc, #416]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d004      	beq.n	80079d6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 80079cc:	2100      	movs	r1, #0
 80079ce:	2001      	movs	r0, #1
 80079d0:	f7ff fb26 	bl	8007020 <changeTFTScheduleDayOfWeek>
 80079d4:	e003      	b.n	80079de <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 80079d6:	2101      	movs	r1, #1
 80079d8:	2001      	movs	r0, #1
 80079da:	f7ff fb21 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 80079de:	4b62      	ldr	r3, [pc, #392]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bf0c      	ite	eq
 80079e6:	2301      	moveq	r3, #1
 80079e8:	2300      	movne	r3, #0
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	4b5e      	ldr	r3, [pc, #376]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80079f0:	701a      	strb	r2, [r3, #0]
 80079f2:	e0b4      	b.n	8007b5e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 80079f4:	88fb      	ldrh	r3, [r7, #6]
 80079f6:	2b59      	cmp	r3, #89	; 0x59
 80079f8:	d91a      	bls.n	8007a30 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 80079fa:	88fb      	ldrh	r3, [r7, #6]
 80079fc:	2b6e      	cmp	r3, #110	; 0x6e
 80079fe:	d817      	bhi.n	8007a30 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8007a00:	4b59      	ldr	r3, [pc, #356]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a02:	785b      	ldrb	r3, [r3, #1]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d004      	beq.n	8007a12 <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8007a08:	2100      	movs	r1, #0
 8007a0a:	2002      	movs	r0, #2
 8007a0c:	f7ff fb08 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8007a10:	e003      	b.n	8007a1a <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8007a12:	2101      	movs	r1, #1
 8007a14:	2002      	movs	r0, #2
 8007a16:	f7ff fb03 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 8007a1a:	4b53      	ldr	r3, [pc, #332]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a1c:	785b      	ldrb	r3, [r3, #1]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bf0c      	ite	eq
 8007a22:	2301      	moveq	r3, #1
 8007a24:	2300      	movne	r3, #0
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4b4f      	ldr	r3, [pc, #316]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a2c:	705a      	strb	r2, [r3, #1]
 8007a2e:	e096      	b.n	8007b5e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	2b77      	cmp	r3, #119	; 0x77
 8007a34:	d91a      	bls.n	8007a6c <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 8007a36:	88fb      	ldrh	r3, [r7, #6]
 8007a38:	2b8c      	cmp	r3, #140	; 0x8c
 8007a3a:	d817      	bhi.n	8007a6c <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8007a3c:	4b4a      	ldr	r3, [pc, #296]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a3e:	789b      	ldrb	r3, [r3, #2]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d004      	beq.n	8007a4e <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 8007a44:	2100      	movs	r1, #0
 8007a46:	2003      	movs	r0, #3
 8007a48:	f7ff faea 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8007a4c:	e003      	b.n	8007a56 <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8007a4e:	2101      	movs	r1, #1
 8007a50:	2003      	movs	r0, #3
 8007a52:	f7ff fae5 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 8007a56:	4b44      	ldr	r3, [pc, #272]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a58:	789b      	ldrb	r3, [r3, #2]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	bf0c      	ite	eq
 8007a5e:	2301      	moveq	r3, #1
 8007a60:	2300      	movne	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	4b40      	ldr	r3, [pc, #256]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a68:	709a      	strb	r2, [r3, #2]
 8007a6a:	e078      	b.n	8007b5e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007a6c:	88fb      	ldrh	r3, [r7, #6]
 8007a6e:	2b95      	cmp	r3, #149	; 0x95
 8007a70:	d91a      	bls.n	8007aa8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 8007a72:	88fb      	ldrh	r3, [r7, #6]
 8007a74:	2baa      	cmp	r3, #170	; 0xaa
 8007a76:	d817      	bhi.n	8007aa8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8007a78:	4b3b      	ldr	r3, [pc, #236]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a7a:	78db      	ldrb	r3, [r3, #3]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 8007a80:	2100      	movs	r1, #0
 8007a82:	2004      	movs	r0, #4
 8007a84:	f7ff facc 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8007a88:	e003      	b.n	8007a92 <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	2004      	movs	r0, #4
 8007a8e:	f7ff fac7 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 8007a92:	4b35      	ldr	r3, [pc, #212]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a94:	78db      	ldrb	r3, [r3, #3]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bf0c      	ite	eq
 8007a9a:	2301      	moveq	r3, #1
 8007a9c:	2300      	movne	r3, #0
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4b31      	ldr	r3, [pc, #196]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007aa4:	70da      	strb	r2, [r3, #3]
 8007aa6:	e05a      	b.n	8007b5e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007aa8:	88fb      	ldrh	r3, [r7, #6]
 8007aaa:	2bb3      	cmp	r3, #179	; 0xb3
 8007aac:	d91a      	bls.n	8007ae4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 8007aae:	88fb      	ldrh	r3, [r7, #6]
 8007ab0:	2bc8      	cmp	r3, #200	; 0xc8
 8007ab2:	d817      	bhi.n	8007ae4 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8007ab4:	4b2c      	ldr	r3, [pc, #176]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007ab6:	791b      	ldrb	r3, [r3, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 8007abc:	2100      	movs	r1, #0
 8007abe:	2005      	movs	r0, #5
 8007ac0:	f7ff faae 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8007ac4:	e003      	b.n	8007ace <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	2005      	movs	r0, #5
 8007aca:	f7ff faa9 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 8007ace:	4b26      	ldr	r3, [pc, #152]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007ad0:	791b      	ldrb	r3, [r3, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bf0c      	ite	eq
 8007ad6:	2301      	moveq	r3, #1
 8007ad8:	2300      	movne	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	461a      	mov	r2, r3
 8007ade:	4b22      	ldr	r3, [pc, #136]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007ae0:	711a      	strb	r2, [r3, #4]
 8007ae2:	e03c      	b.n	8007b5e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	2bd1      	cmp	r3, #209	; 0xd1
 8007ae8:	d91a      	bls.n	8007b20 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	2be6      	cmp	r3, #230	; 0xe6
 8007aee:	d817      	bhi.n	8007b20 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8007af0:	4b1d      	ldr	r3, [pc, #116]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007af2:	795b      	ldrb	r3, [r3, #5]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d004      	beq.n	8007b02 <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007af8:	2100      	movs	r1, #0
 8007afa:	2006      	movs	r0, #6
 8007afc:	f7ff fa90 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8007b00:	e003      	b.n	8007b0a <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8007b02:	2101      	movs	r1, #1
 8007b04:	2006      	movs	r0, #6
 8007b06:	f7ff fa8b 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 8007b0a:	4b17      	ldr	r3, [pc, #92]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b0c:	795b      	ldrb	r3, [r3, #5]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bf0c      	ite	eq
 8007b12:	2301      	moveq	r3, #1
 8007b14:	2300      	movne	r3, #0
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4b13      	ldr	r3, [pc, #76]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b1c:	715a      	strb	r2, [r3, #5]
 8007b1e:	e01e      	b.n	8007b5e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007b20:	88fb      	ldrh	r3, [r7, #6]
 8007b22:	2bef      	cmp	r3, #239	; 0xef
 8007b24:	d91b      	bls.n	8007b5e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b2c:	d817      	bhi.n	8007b5e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8007b2e:	4b0e      	ldr	r3, [pc, #56]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b30:	799b      	ldrb	r3, [r3, #6]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d004      	beq.n	8007b40 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 8007b36:	2100      	movs	r1, #0
 8007b38:	2007      	movs	r0, #7
 8007b3a:	f7ff fa71 	bl	8007020 <changeTFTScheduleDayOfWeek>
 8007b3e:	e003      	b.n	8007b48 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007b40:	2101      	movs	r1, #1
 8007b42:	2007      	movs	r0, #7
 8007b44:	f7ff fa6c 	bl	8007020 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 8007b48:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b4a:	799b      	ldrb	r3, [r3, #6]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bf0c      	ite	eq
 8007b50:	2301      	moveq	r3, #1
 8007b52:	2300      	movne	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b5a:	719a      	strb	r2, [r3, #6]
	}
}
 8007b5c:	e7ff      	b.n	8007b5e <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007b5e:	bf00      	nop
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	2000087c 	.word	0x2000087c

08007b6c <schedule2HourOnIncrease>:

//
// Functions to change on screen hour and minute ON/OFF 2 schedule
void schedule2HourOnIncrease(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af02      	add	r7, sp, #8
	if(hourOnSchedule2 < 24)
 8007b72:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <schedule2HourOnIncrease+0x64>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b17      	cmp	r3, #23
 8007b78:	d806      	bhi.n	8007b88 <schedule2HourOnIncrease+0x1c>
	{
		hourOnSchedule2++;
 8007b7a:	4b15      	ldr	r3, [pc, #84]	; (8007bd0 <schedule2HourOnIncrease+0x64>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	4b13      	ldr	r3, [pc, #76]	; (8007bd0 <schedule2HourOnIncrease+0x64>)
 8007b84:	701a      	strb	r2, [r3, #0]
 8007b86:	e002      	b.n	8007b8e <schedule2HourOnIncrease+0x22>
	}
	else
	{
		hourOnSchedule2 = 1;
 8007b88:	4b11      	ldr	r3, [pc, #68]	; (8007bd0 <schedule2HourOnIncrease+0x64>)
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOnSchedule2);
 8007b8e:	4b10      	ldr	r3, [pc, #64]	; (8007bd0 <schedule2HourOnIncrease+0x64>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b09      	cmp	r3, #9
 8007b94:	d907      	bls.n	8007ba6 <schedule2HourOnIncrease+0x3a>
 8007b96:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <schedule2HourOnIncrease+0x64>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	490d      	ldr	r1, [pc, #52]	; (8007bd4 <schedule2HourOnIncrease+0x68>)
 8007b9e:	480e      	ldr	r0, [pc, #56]	; (8007bd8 <schedule2HourOnIncrease+0x6c>)
 8007ba0:	f00b fb6e 	bl	8013280 <siprintf>
 8007ba4:	e006      	b.n	8007bb4 <schedule2HourOnIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOnSchedule2);
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <schedule2HourOnIncrease+0x64>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	490b      	ldr	r1, [pc, #44]	; (8007bdc <schedule2HourOnIncrease+0x70>)
 8007bae:	480a      	ldr	r0, [pc, #40]	; (8007bd8 <schedule2HourOnIncrease+0x6c>)
 8007bb0:	f00b fb66 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007bb4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	2301      	movs	r3, #1
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2264      	movs	r2, #100	; 0x64
 8007bc2:	2150      	movs	r1, #80	; 0x50
 8007bc4:	4804      	ldr	r0, [pc, #16]	; (8007bd8 <schedule2HourOnIncrease+0x6c>)
 8007bc6:	f7fa f8f1 	bl	8001dac <EF_PutString>
}
 8007bca:	bf00      	nop
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20000891 	.word	0x20000891
 8007bd4:	080175c8 	.word	0x080175c8
 8007bd8:	200008a4 	.word	0x200008a4
 8007bdc:	080175d0 	.word	0x080175d0

08007be0 <schedule2HourOnDecrease>:
void schedule2HourOnDecrease(void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af02      	add	r7, sp, #8
	if(hourOnSchedule2 > 1)
 8007be6:	4b17      	ldr	r3, [pc, #92]	; (8007c44 <schedule2HourOnDecrease+0x64>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d906      	bls.n	8007bfc <schedule2HourOnDecrease+0x1c>
	{
		hourOnSchedule2--;
 8007bee:	4b15      	ldr	r3, [pc, #84]	; (8007c44 <schedule2HourOnDecrease+0x64>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	4b13      	ldr	r3, [pc, #76]	; (8007c44 <schedule2HourOnDecrease+0x64>)
 8007bf8:	701a      	strb	r2, [r3, #0]
 8007bfa:	e002      	b.n	8007c02 <schedule2HourOnDecrease+0x22>
	}
	else
	{
		hourOnSchedule2 = 24;
 8007bfc:	4b11      	ldr	r3, [pc, #68]	; (8007c44 <schedule2HourOnDecrease+0x64>)
 8007bfe:	2218      	movs	r2, #24
 8007c00:	701a      	strb	r2, [r3, #0]
	}
	if(hourOnSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOnSchedule2);
 8007c02:	4b10      	ldr	r3, [pc, #64]	; (8007c44 <schedule2HourOnDecrease+0x64>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b09      	cmp	r3, #9
 8007c08:	d907      	bls.n	8007c1a <schedule2HourOnDecrease+0x3a>
 8007c0a:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <schedule2HourOnDecrease+0x64>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	490d      	ldr	r1, [pc, #52]	; (8007c48 <schedule2HourOnDecrease+0x68>)
 8007c12:	480e      	ldr	r0, [pc, #56]	; (8007c4c <schedule2HourOnDecrease+0x6c>)
 8007c14:	f00b fb34 	bl	8013280 <siprintf>
 8007c18:	e006      	b.n	8007c28 <schedule2HourOnDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOnSchedule2);
 8007c1a:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <schedule2HourOnDecrease+0x64>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	490b      	ldr	r1, [pc, #44]	; (8007c50 <schedule2HourOnDecrease+0x70>)
 8007c22:	480a      	ldr	r0, [pc, #40]	; (8007c4c <schedule2HourOnDecrease+0x6c>)
 8007c24:	f00b fb2c 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007c28:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	2301      	movs	r3, #1
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	2300      	movs	r3, #0
 8007c34:	2264      	movs	r2, #100	; 0x64
 8007c36:	2150      	movs	r1, #80	; 0x50
 8007c38:	4804      	ldr	r0, [pc, #16]	; (8007c4c <schedule2HourOnDecrease+0x6c>)
 8007c3a:	f7fa f8b7 	bl	8001dac <EF_PutString>
}
 8007c3e:	bf00      	nop
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20000891 	.word	0x20000891
 8007c48:	080175c8 	.word	0x080175c8
 8007c4c:	200008a4 	.word	0x200008a4
 8007c50:	080175d0 	.word	0x080175d0

08007c54 <schedule2MinuteOnIncrease>:
void schedule2MinuteOnIncrease(void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af02      	add	r7, sp, #8
	if(minuteOnSchedule2 < 59)
 8007c5a:	4b17      	ldr	r3, [pc, #92]	; (8007cb8 <schedule2MinuteOnIncrease+0x64>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	2b3a      	cmp	r3, #58	; 0x3a
 8007c60:	d806      	bhi.n	8007c70 <schedule2MinuteOnIncrease+0x1c>
	{
		minuteOnSchedule2++;
 8007c62:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <schedule2MinuteOnIncrease+0x64>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	3301      	adds	r3, #1
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <schedule2MinuteOnIncrease+0x64>)
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	e002      	b.n	8007c76 <schedule2MinuteOnIncrease+0x22>
	}
	else
	{
		minuteOnSchedule2 = 0;
 8007c70:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <schedule2MinuteOnIncrease+0x64>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOnSchedule2);
 8007c76:	4b10      	ldr	r3, [pc, #64]	; (8007cb8 <schedule2MinuteOnIncrease+0x64>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b09      	cmp	r3, #9
 8007c7c:	d907      	bls.n	8007c8e <schedule2MinuteOnIncrease+0x3a>
 8007c7e:	4b0e      	ldr	r3, [pc, #56]	; (8007cb8 <schedule2MinuteOnIncrease+0x64>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	490d      	ldr	r1, [pc, #52]	; (8007cbc <schedule2MinuteOnIncrease+0x68>)
 8007c86:	480e      	ldr	r0, [pc, #56]	; (8007cc0 <schedule2MinuteOnIncrease+0x6c>)
 8007c88:	f00b fafa 	bl	8013280 <siprintf>
 8007c8c:	e006      	b.n	8007c9c <schedule2MinuteOnIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOnSchedule2);
 8007c8e:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <schedule2MinuteOnIncrease+0x64>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	490b      	ldr	r1, [pc, #44]	; (8007cc4 <schedule2MinuteOnIncrease+0x70>)
 8007c96:	480a      	ldr	r0, [pc, #40]	; (8007cc0 <schedule2MinuteOnIncrease+0x6c>)
 8007c98:	f00b faf2 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007c9c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007ca0:	9301      	str	r3, [sp, #4]
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2264      	movs	r2, #100	; 0x64
 8007caa:	218a      	movs	r1, #138	; 0x8a
 8007cac:	4804      	ldr	r0, [pc, #16]	; (8007cc0 <schedule2MinuteOnIncrease+0x6c>)
 8007cae:	f7fa f87d 	bl	8001dac <EF_PutString>
}
 8007cb2:	bf00      	nop
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20000893 	.word	0x20000893
 8007cbc:	080175c8 	.word	0x080175c8
 8007cc0:	200008a4 	.word	0x200008a4
 8007cc4:	080175d0 	.word	0x080175d0

08007cc8 <schedule2MinuteOnDecrease>:
void schedule2MinuteOnDecrease(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af02      	add	r7, sp, #8
	if(minuteOnSchedule2 > 0)
 8007cce:	4b17      	ldr	r3, [pc, #92]	; (8007d2c <schedule2MinuteOnDecrease+0x64>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d006      	beq.n	8007ce4 <schedule2MinuteOnDecrease+0x1c>
	{
		minuteOnSchedule2--;
 8007cd6:	4b15      	ldr	r3, [pc, #84]	; (8007d2c <schedule2MinuteOnDecrease+0x64>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <schedule2MinuteOnDecrease+0x64>)
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	e002      	b.n	8007cea <schedule2MinuteOnDecrease+0x22>
	}
	else
	{
		minuteOnSchedule2 = 59;
 8007ce4:	4b11      	ldr	r3, [pc, #68]	; (8007d2c <schedule2MinuteOnDecrease+0x64>)
 8007ce6:	223b      	movs	r2, #59	; 0x3b
 8007ce8:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOnSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOnSchedule2);
 8007cea:	4b10      	ldr	r3, [pc, #64]	; (8007d2c <schedule2MinuteOnDecrease+0x64>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	2b09      	cmp	r3, #9
 8007cf0:	d907      	bls.n	8007d02 <schedule2MinuteOnDecrease+0x3a>
 8007cf2:	4b0e      	ldr	r3, [pc, #56]	; (8007d2c <schedule2MinuteOnDecrease+0x64>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	490d      	ldr	r1, [pc, #52]	; (8007d30 <schedule2MinuteOnDecrease+0x68>)
 8007cfa:	480e      	ldr	r0, [pc, #56]	; (8007d34 <schedule2MinuteOnDecrease+0x6c>)
 8007cfc:	f00b fac0 	bl	8013280 <siprintf>
 8007d00:	e006      	b.n	8007d10 <schedule2MinuteOnDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOnSchedule2);
 8007d02:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <schedule2MinuteOnDecrease+0x64>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	490b      	ldr	r1, [pc, #44]	; (8007d38 <schedule2MinuteOnDecrease+0x70>)
 8007d0a:	480a      	ldr	r0, [pc, #40]	; (8007d34 <schedule2MinuteOnDecrease+0x6c>)
 8007d0c:	f00b fab8 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007d10:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	2301      	movs	r3, #1
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2264      	movs	r2, #100	; 0x64
 8007d1e:	218a      	movs	r1, #138	; 0x8a
 8007d20:	4804      	ldr	r0, [pc, #16]	; (8007d34 <schedule2MinuteOnDecrease+0x6c>)
 8007d22:	f7fa f843 	bl	8001dac <EF_PutString>
}
 8007d26:	bf00      	nop
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20000893 	.word	0x20000893
 8007d30:	080175c8 	.word	0x080175c8
 8007d34:	200008a4 	.word	0x200008a4
 8007d38:	080175d0 	.word	0x080175d0

08007d3c <schedule2HourOffIncrease>:

void schedule2HourOffIncrease(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af02      	add	r7, sp, #8
	if(hourOffSchedule2 < 24)
 8007d42:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <schedule2HourOffIncrease+0x64>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b17      	cmp	r3, #23
 8007d48:	d806      	bhi.n	8007d58 <schedule2HourOffIncrease+0x1c>
	{
		hourOffSchedule2++;
 8007d4a:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <schedule2HourOffIncrease+0x64>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <schedule2HourOffIncrease+0x64>)
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	e002      	b.n	8007d5e <schedule2HourOffIncrease+0x22>
	}
	else
	{
		hourOffSchedule2 = 1;
 8007d58:	4b11      	ldr	r3, [pc, #68]	; (8007da0 <schedule2HourOffIncrease+0x64>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOffSchedule2);
 8007d5e:	4b10      	ldr	r3, [pc, #64]	; (8007da0 <schedule2HourOffIncrease+0x64>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b09      	cmp	r3, #9
 8007d64:	d907      	bls.n	8007d76 <schedule2HourOffIncrease+0x3a>
 8007d66:	4b0e      	ldr	r3, [pc, #56]	; (8007da0 <schedule2HourOffIncrease+0x64>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	490d      	ldr	r1, [pc, #52]	; (8007da4 <schedule2HourOffIncrease+0x68>)
 8007d6e:	480e      	ldr	r0, [pc, #56]	; (8007da8 <schedule2HourOffIncrease+0x6c>)
 8007d70:	f00b fa86 	bl	8013280 <siprintf>
 8007d74:	e006      	b.n	8007d84 <schedule2HourOffIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOffSchedule2);
 8007d76:	4b0a      	ldr	r3, [pc, #40]	; (8007da0 <schedule2HourOffIncrease+0x64>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	490b      	ldr	r1, [pc, #44]	; (8007dac <schedule2HourOffIncrease+0x70>)
 8007d7e:	480a      	ldr	r0, [pc, #40]	; (8007da8 <schedule2HourOffIncrease+0x6c>)
 8007d80:	f00b fa7e 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007d84:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2287      	movs	r2, #135	; 0x87
 8007d92:	214e      	movs	r1, #78	; 0x4e
 8007d94:	4804      	ldr	r0, [pc, #16]	; (8007da8 <schedule2HourOffIncrease+0x6c>)
 8007d96:	f7fa f809 	bl	8001dac <EF_PutString>
}
 8007d9a:	bf00      	nop
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000892 	.word	0x20000892
 8007da4:	080175c8 	.word	0x080175c8
 8007da8:	200008a4 	.word	0x200008a4
 8007dac:	080175d0 	.word	0x080175d0

08007db0 <schedule2HourOffDecrease>:
void schedule2HourOffDecrease(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af02      	add	r7, sp, #8
	if(hourOffSchedule2 > 1)
 8007db6:	4b17      	ldr	r3, [pc, #92]	; (8007e14 <schedule2HourOffDecrease+0x64>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d906      	bls.n	8007dcc <schedule2HourOffDecrease+0x1c>
	{
		hourOffSchedule2--;
 8007dbe:	4b15      	ldr	r3, [pc, #84]	; (8007e14 <schedule2HourOffDecrease+0x64>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	4b13      	ldr	r3, [pc, #76]	; (8007e14 <schedule2HourOffDecrease+0x64>)
 8007dc8:	701a      	strb	r2, [r3, #0]
 8007dca:	e002      	b.n	8007dd2 <schedule2HourOffDecrease+0x22>
	}
	else
	{
		hourOffSchedule2 = 24;
 8007dcc:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <schedule2HourOffDecrease+0x64>)
 8007dce:	2218      	movs	r2, #24
 8007dd0:	701a      	strb	r2, [r3, #0]
	}
	if(hourOffSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", hourOffSchedule2);
 8007dd2:	4b10      	ldr	r3, [pc, #64]	; (8007e14 <schedule2HourOffDecrease+0x64>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b09      	cmp	r3, #9
 8007dd8:	d907      	bls.n	8007dea <schedule2HourOffDecrease+0x3a>
 8007dda:	4b0e      	ldr	r3, [pc, #56]	; (8007e14 <schedule2HourOffDecrease+0x64>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	490d      	ldr	r1, [pc, #52]	; (8007e18 <schedule2HourOffDecrease+0x68>)
 8007de2:	480e      	ldr	r0, [pc, #56]	; (8007e1c <schedule2HourOffDecrease+0x6c>)
 8007de4:	f00b fa4c 	bl	8013280 <siprintf>
 8007de8:	e006      	b.n	8007df8 <schedule2HourOffDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", hourOffSchedule2);
 8007dea:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <schedule2HourOffDecrease+0x64>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	490b      	ldr	r1, [pc, #44]	; (8007e20 <schedule2HourOffDecrease+0x70>)
 8007df2:	480a      	ldr	r0, [pc, #40]	; (8007e1c <schedule2HourOffDecrease+0x6c>)
 8007df4:	f00b fa44 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007df8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	2301      	movs	r3, #1
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	2300      	movs	r3, #0
 8007e04:	2287      	movs	r2, #135	; 0x87
 8007e06:	214e      	movs	r1, #78	; 0x4e
 8007e08:	4804      	ldr	r0, [pc, #16]	; (8007e1c <schedule2HourOffDecrease+0x6c>)
 8007e0a:	f7f9 ffcf 	bl	8001dac <EF_PutString>
}
 8007e0e:	bf00      	nop
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20000892 	.word	0x20000892
 8007e18:	080175c8 	.word	0x080175c8
 8007e1c:	200008a4 	.word	0x200008a4
 8007e20:	080175d0 	.word	0x080175d0

08007e24 <schedule2MinuteOffIncrease>:
void schedule2MinuteOffIncrease(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af02      	add	r7, sp, #8
	if(minuteOffSchedule2 < 59)
 8007e2a:	4b17      	ldr	r3, [pc, #92]	; (8007e88 <schedule2MinuteOffIncrease+0x64>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	2b3a      	cmp	r3, #58	; 0x3a
 8007e30:	d806      	bhi.n	8007e40 <schedule2MinuteOffIncrease+0x1c>
	{
		minuteOffSchedule2++;
 8007e32:	4b15      	ldr	r3, [pc, #84]	; (8007e88 <schedule2MinuteOffIncrease+0x64>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	3301      	adds	r3, #1
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	4b13      	ldr	r3, [pc, #76]	; (8007e88 <schedule2MinuteOffIncrease+0x64>)
 8007e3c:	701a      	strb	r2, [r3, #0]
 8007e3e:	e002      	b.n	8007e46 <schedule2MinuteOffIncrease+0x22>
	}
	else
	{
		minuteOffSchedule2 = 0;
 8007e40:	4b11      	ldr	r3, [pc, #68]	; (8007e88 <schedule2MinuteOffIncrease+0x64>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOffSchedule2);
 8007e46:	4b10      	ldr	r3, [pc, #64]	; (8007e88 <schedule2MinuteOffIncrease+0x64>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b09      	cmp	r3, #9
 8007e4c:	d907      	bls.n	8007e5e <schedule2MinuteOffIncrease+0x3a>
 8007e4e:	4b0e      	ldr	r3, [pc, #56]	; (8007e88 <schedule2MinuteOffIncrease+0x64>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	490d      	ldr	r1, [pc, #52]	; (8007e8c <schedule2MinuteOffIncrease+0x68>)
 8007e56:	480e      	ldr	r0, [pc, #56]	; (8007e90 <schedule2MinuteOffIncrease+0x6c>)
 8007e58:	f00b fa12 	bl	8013280 <siprintf>
 8007e5c:	e006      	b.n	8007e6c <schedule2MinuteOffIncrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOffSchedule2);
 8007e5e:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <schedule2MinuteOffIncrease+0x64>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	490b      	ldr	r1, [pc, #44]	; (8007e94 <schedule2MinuteOffIncrease+0x70>)
 8007e66:	480a      	ldr	r0, [pc, #40]	; (8007e90 <schedule2MinuteOffIncrease+0x6c>)
 8007e68:	f00b fa0a 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007e6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	2301      	movs	r3, #1
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	2300      	movs	r3, #0
 8007e78:	2287      	movs	r2, #135	; 0x87
 8007e7a:	218a      	movs	r1, #138	; 0x8a
 8007e7c:	4804      	ldr	r0, [pc, #16]	; (8007e90 <schedule2MinuteOffIncrease+0x6c>)
 8007e7e:	f7f9 ff95 	bl	8001dac <EF_PutString>
}
 8007e82:	bf00      	nop
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000894 	.word	0x20000894
 8007e8c:	080175c8 	.word	0x080175c8
 8007e90:	200008a4 	.word	0x200008a4
 8007e94:	080175d0 	.word	0x080175d0

08007e98 <schedule2MinuteOffDecrease>:
void schedule2MinuteOffDecrease(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af02      	add	r7, sp, #8
	if(minuteOffSchedule2 > 0)
 8007e9e:	4b17      	ldr	r3, [pc, #92]	; (8007efc <schedule2MinuteOffDecrease+0x64>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d006      	beq.n	8007eb4 <schedule2MinuteOffDecrease+0x1c>
	{
		minuteOffSchedule2--;
 8007ea6:	4b15      	ldr	r3, [pc, #84]	; (8007efc <schedule2MinuteOffDecrease+0x64>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	4b13      	ldr	r3, [pc, #76]	; (8007efc <schedule2MinuteOffDecrease+0x64>)
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	e002      	b.n	8007eba <schedule2MinuteOffDecrease+0x22>
	}
	else
	{
		minuteOffSchedule2 = 59;
 8007eb4:	4b11      	ldr	r3, [pc, #68]	; (8007efc <schedule2MinuteOffDecrease+0x64>)
 8007eb6:	223b      	movs	r2, #59	; 0x3b
 8007eb8:	701a      	strb	r2, [r3, #0]
	}
	if(minuteOffSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOffSchedule2);
 8007eba:	4b10      	ldr	r3, [pc, #64]	; (8007efc <schedule2MinuteOffDecrease+0x64>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b09      	cmp	r3, #9
 8007ec0:	d907      	bls.n	8007ed2 <schedule2MinuteOffDecrease+0x3a>
 8007ec2:	4b0e      	ldr	r3, [pc, #56]	; (8007efc <schedule2MinuteOffDecrease+0x64>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	490d      	ldr	r1, [pc, #52]	; (8007f00 <schedule2MinuteOffDecrease+0x68>)
 8007eca:	480e      	ldr	r0, [pc, #56]	; (8007f04 <schedule2MinuteOffDecrease+0x6c>)
 8007ecc:	f00b f9d8 	bl	8013280 <siprintf>
 8007ed0:	e006      	b.n	8007ee0 <schedule2MinuteOffDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOffSchedule2);
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <schedule2MinuteOffDecrease+0x64>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	490b      	ldr	r1, [pc, #44]	; (8007f08 <schedule2MinuteOffDecrease+0x70>)
 8007eda:	480a      	ldr	r0, [pc, #40]	; (8007f04 <schedule2MinuteOffDecrease+0x6c>)
 8007edc:	f00b f9d0 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007ee0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	2300      	movs	r3, #0
 8007eec:	2287      	movs	r2, #135	; 0x87
 8007eee:	218a      	movs	r1, #138	; 0x8a
 8007ef0:	4804      	ldr	r0, [pc, #16]	; (8007f04 <schedule2MinuteOffDecrease+0x6c>)
 8007ef2:	f7f9 ff5b 	bl	8001dac <EF_PutString>
}
 8007ef6:	bf00      	nop
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20000894 	.word	0x20000894
 8007f00:	080175c8 	.word	0x080175c8
 8007f04:	200008a4 	.word	0x200008a4
 8007f08:	080175d0 	.word	0x080175d0

08007f0c <MenuTFTSchedule2ActivityHourMinuteONAdd>:
//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	4603      	mov	r3, r0
 8007f14:	460a      	mov	r2, r1
 8007f16:	80fb      	strh	r3, [r7, #6]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007f1c:	4833      	ldr	r0, [pc, #204]	; (8007fec <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe0>)
 8007f1e:	f7f9 fd2b 	bl	8001978 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007f22:	88fb      	ldrh	r3, [r7, #6]
 8007f24:	2bba      	cmp	r3, #186	; 0xba
 8007f26:	d908      	bls.n	8007f3a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x2e>
 8007f28:	88fb      	ldrh	r3, [r7, #6]
 8007f2a:	2bdd      	cmp	r3, #221	; 0xdd
 8007f2c:	d805      	bhi.n	8007f3a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x2e>
	{
		schedule2HourOnIncrease();
 8007f2e:	f7ff fe1d 	bl	8007b6c <schedule2HourOnIncrease>
		EncoderState = ENCODER_SCHEDULE_2_HOUR_ON;
 8007f32:	4b2f      	ldr	r3, [pc, #188]	; (8007ff0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>)
 8007f34:	220a      	movs	r2, #10
 8007f36:	701a      	strb	r2, [r3, #0]
 8007f38:	e054      	b.n	8007fe4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007f3a:	88fb      	ldrh	r3, [r7, #6]
 8007f3c:	2be8      	cmp	r3, #232	; 0xe8
 8007f3e:	d909      	bls.n	8007f54 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x48>
 8007f40:	88fb      	ldrh	r3, [r7, #6]
 8007f42:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007f46:	d205      	bcs.n	8007f54 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x48>
	{
		schedule2MinuteOnIncrease();
 8007f48:	f7ff fe84 	bl	8007c54 <schedule2MinuteOnIncrease>
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_ON;
 8007f4c:	4b28      	ldr	r3, [pc, #160]	; (8007ff0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>)
 8007f4e:	220c      	movs	r2, #12
 8007f50:	701a      	strb	r2, [r3, #0]
 8007f52:	e047      	b.n	8007fe4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007f54:	88fb      	ldrh	r3, [r7, #6]
 8007f56:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007f5a:	d943      	bls.n	8007fe4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
 8007f5c:	88fb      	ldrh	r3, [r7, #6]
 8007f5e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007f62:	d23f      	bcs.n	8007fe4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_ON;
 8007f64:	4b22      	ldr	r3, [pc, #136]	; (8007ff0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>)
 8007f66:	220c      	movs	r2, #12
 8007f68:	701a      	strb	r2, [r3, #0]
		if(minuteOnSchedule2 < 49)
 8007f6a:	4b22      	ldr	r3, [pc, #136]	; (8007ff4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b30      	cmp	r3, #48	; 0x30
 8007f70:	d806      	bhi.n	8007f80 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x74>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 8007f72:	4b20      	ldr	r3, [pc, #128]	; (8007ff4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	330a      	adds	r3, #10
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	4b1e      	ldr	r3, [pc, #120]	; (8007ff4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007f7c:	701a      	strb	r2, [r3, #0]
 8007f7e:	e012      	b.n	8007fa6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x9a>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 8007f80:	4b1c      	ldr	r3, [pc, #112]	; (8007ff4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	f103 020a 	add.w	r2, r3, #10
 8007f88:	4b1b      	ldr	r3, [pc, #108]	; (8007ff8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xec>)
 8007f8a:	fb83 1302 	smull	r1, r3, r3, r2
 8007f8e:	4413      	add	r3, r2
 8007f90:	1159      	asrs	r1, r3, #5
 8007f92:	17d3      	asrs	r3, r2, #31
 8007f94:	1ac9      	subs	r1, r1, r3
 8007f96:	460b      	mov	r3, r1
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	1a5b      	subs	r3, r3, r1
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	1ad1      	subs	r1, r2, r3
 8007fa0:	b2ca      	uxtb	r2, r1
 8007fa2:	4b14      	ldr	r3, [pc, #80]	; (8007ff4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fa4:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOnSchedule2);
 8007fa6:	4b13      	ldr	r3, [pc, #76]	; (8007ff4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b09      	cmp	r3, #9
 8007fac:	d907      	bls.n	8007fbe <MenuTFTSchedule2ActivityHourMinuteONAdd+0xb2>
 8007fae:	4b11      	ldr	r3, [pc, #68]	; (8007ff4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	4911      	ldr	r1, [pc, #68]	; (8007ffc <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf0>)
 8007fb6:	4812      	ldr	r0, [pc, #72]	; (8008000 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf4>)
 8007fb8:	f00b f962 	bl	8013280 <siprintf>
 8007fbc:	e006      	b.n	8007fcc <MenuTFTSchedule2ActivityHourMinuteONAdd+0xc0>
		else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOnSchedule2);
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe8>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	490f      	ldr	r1, [pc, #60]	; (8008004 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf8>)
 8007fc6:	480e      	ldr	r0, [pc, #56]	; (8008000 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf4>)
 8007fc8:	f00b f95a 	bl	8013280 <siprintf>
		EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007fcc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	2264      	movs	r2, #100	; 0x64
 8007fda:	218a      	movs	r1, #138	; 0x8a
 8007fdc:	4808      	ldr	r0, [pc, #32]	; (8008000 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xf4>)
 8007fde:	f7f9 fee5 	bl	8001dac <EF_PutString>
	}
}
 8007fe2:	e7ff      	b.n	8007fe4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xd8>
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	0802ab7c 	.word	0x0802ab7c
 8007ff0:	200008e9 	.word	0x200008e9
 8007ff4:	20000893 	.word	0x20000893
 8007ff8:	88888889 	.word	0x88888889
 8007ffc:	080175c8 	.word	0x080175c8
 8008000:	200008a4 	.word	0x200008a4
 8008004:	080175d0 	.word	0x080175d0

08008008 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af02      	add	r7, sp, #8
 800800e:	4603      	mov	r3, r0
 8008010:	460a      	mov	r2, r1
 8008012:	80fb      	strh	r3, [r7, #6]
 8008014:	4613      	mov	r3, r2
 8008016:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008018:	4833      	ldr	r0, [pc, #204]	; (80080e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe0>)
 800801a:	f7f9 fcad 	bl	8001978 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	2bba      	cmp	r3, #186	; 0xba
 8008022:	d908      	bls.n	8008036 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x2e>
 8008024:	88fb      	ldrh	r3, [r7, #6]
 8008026:	2bdd      	cmp	r3, #221	; 0xdd
 8008028:	d805      	bhi.n	8008036 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x2e>
	{
		schedule2HourOffIncrease();
 800802a:	f7ff fe87 	bl	8007d3c <schedule2HourOffIncrease>
		EncoderState = ENCODER_SCHEDULE_2_HOUR_OFF;
 800802e:	4b2f      	ldr	r3, [pc, #188]	; (80080ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>)
 8008030:	220b      	movs	r2, #11
 8008032:	701a      	strb	r2, [r3, #0]
 8008034:	e054      	b.n	80080e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8008036:	88fb      	ldrh	r3, [r7, #6]
 8008038:	2be8      	cmp	r3, #232	; 0xe8
 800803a:	d909      	bls.n	8008050 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x48>
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8008042:	d205      	bcs.n	8008050 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x48>
	{
		schedule2MinuteOffIncrease();
 8008044:	f7ff feee 	bl	8007e24 <schedule2MinuteOffIncrease>
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_OFF;
 8008048:	4b28      	ldr	r3, [pc, #160]	; (80080ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>)
 800804a:	220d      	movs	r2, #13
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	e047      	b.n	80080e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8008050:	88fb      	ldrh	r3, [r7, #6]
 8008052:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8008056:	d943      	bls.n	80080e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
 8008058:	88fb      	ldrh	r3, [r7, #6]
 800805a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800805e:	d23f      	bcs.n	80080e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
	{
		EncoderState = ENCODER_SCHEDULE_2_MINUTE_OFF;
 8008060:	4b22      	ldr	r3, [pc, #136]	; (80080ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>)
 8008062:	220d      	movs	r2, #13
 8008064:	701a      	strb	r2, [r3, #0]
		if(minuteOffSchedule2 < 49)
 8008066:	4b22      	ldr	r3, [pc, #136]	; (80080f0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b30      	cmp	r3, #48	; 0x30
 800806c:	d806      	bhi.n	800807c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x74>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 800806e:	4b20      	ldr	r3, [pc, #128]	; (80080f0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	330a      	adds	r3, #10
 8008074:	b2da      	uxtb	r2, r3
 8008076:	4b1e      	ldr	r3, [pc, #120]	; (80080f0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	e012      	b.n	80080a2 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x9a>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 800807c:	4b1c      	ldr	r3, [pc, #112]	; (80080f0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	f103 020a 	add.w	r2, r3, #10
 8008084:	4b1b      	ldr	r3, [pc, #108]	; (80080f4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xec>)
 8008086:	fb83 1302 	smull	r1, r3, r3, r2
 800808a:	4413      	add	r3, r2
 800808c:	1159      	asrs	r1, r3, #5
 800808e:	17d3      	asrs	r3, r2, #31
 8008090:	1ac9      	subs	r1, r1, r3
 8008092:	460b      	mov	r3, r1
 8008094:	011b      	lsls	r3, r3, #4
 8008096:	1a5b      	subs	r3, r3, r1
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	1ad1      	subs	r1, r2, r3
 800809c:	b2ca      	uxtb	r2, r1
 800809e:	4b14      	ldr	r3, [pc, #80]	; (80080f0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080a0:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)MsgMenuTFT, " %d ", minuteOffSchedule2);
 80080a2:	4b13      	ldr	r3, [pc, #76]	; (80080f0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2b09      	cmp	r3, #9
 80080a8:	d907      	bls.n	80080ba <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xb2>
 80080aa:	4b11      	ldr	r3, [pc, #68]	; (80080f0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	4911      	ldr	r1, [pc, #68]	; (80080f8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf0>)
 80080b2:	4812      	ldr	r0, [pc, #72]	; (80080fc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf4>)
 80080b4:	f00b f8e4 	bl	8013280 <siprintf>
 80080b8:	e006      	b.n	80080c8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xc0>
		else sprintf((char*)MsgMenuTFT, " 0%d ", minuteOffSchedule2);
 80080ba:	4b0d      	ldr	r3, [pc, #52]	; (80080f0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe8>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	490f      	ldr	r1, [pc, #60]	; (8008100 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf8>)
 80080c2:	480e      	ldr	r0, [pc, #56]	; (80080fc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf4>)
 80080c4:	f00b f8dc 	bl	8013280 <siprintf>
		EF_PutString(MsgMenuTFT, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80080c8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	2301      	movs	r3, #1
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	2300      	movs	r3, #0
 80080d4:	2287      	movs	r2, #135	; 0x87
 80080d6:	218a      	movs	r1, #138	; 0x8a
 80080d8:	4808      	ldr	r0, [pc, #32]	; (80080fc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xf4>)
 80080da:	f7f9 fe67 	bl	8001dac <EF_PutString>
	}
}
 80080de:	e7ff      	b.n	80080e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xd8>
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	0802ab7c 	.word	0x0802ab7c
 80080ec:	200008e9 	.word	0x200008e9
 80080f0:	20000894 	.word	0x20000894
 80080f4:	88888889 	.word	0x88888889
 80080f8:	080175c8 	.word	0x080175c8
 80080fc:	200008a4 	.word	0x200008a4
 8008100:	080175d0 	.word	0x080175d0

08008104 <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	460a      	mov	r2, r1
 800810e:	80fb      	strh	r3, [r7, #6]
 8008110:	4613      	mov	r3, r2
 8008112:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	2b14      	cmp	r3, #20
 8008118:	d919      	bls.n	800814e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 800811a:	88fb      	ldrh	r3, [r7, #6]
 800811c:	2b29      	cmp	r3, #41	; 0x29
 800811e:	d816      	bhi.n	800814e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8008120:	4b82      	ldr	r3, [pc, #520]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d004      	beq.n	8008132 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 8008128:	2100      	movs	r1, #0
 800812a:	2001      	movs	r0, #1
 800812c:	f7ff f855 	bl	80071da <changeTFTScheduleRelayLights>
 8008130:	e003      	b.n	800813a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8008132:	2101      	movs	r1, #1
 8008134:	2001      	movs	r0, #1
 8008136:	f7ff f850 	bl	80071da <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 800813a:	4b7c      	ldr	r3, [pc, #496]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	bf0c      	ite	eq
 8008142:	2301      	moveq	r3, #1
 8008144:	2300      	movne	r3, #0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	461a      	mov	r2, r3
 800814a:	4b78      	ldr	r3, [pc, #480]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800814c:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800814e:	88fb      	ldrh	r3, [r7, #6]
 8008150:	2b34      	cmp	r3, #52	; 0x34
 8008152:	d919      	bls.n	8008188 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 8008154:	88fb      	ldrh	r3, [r7, #6]
 8008156:	2b49      	cmp	r3, #73	; 0x49
 8008158:	d816      	bhi.n	8008188 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 800815a:	4b74      	ldr	r3, [pc, #464]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d004      	beq.n	800816c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 8008162:	2100      	movs	r1, #0
 8008164:	2002      	movs	r0, #2
 8008166:	f7ff f838 	bl	80071da <changeTFTScheduleRelayLights>
 800816a:	e003      	b.n	8008174 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 800816c:	2101      	movs	r1, #1
 800816e:	2002      	movs	r0, #2
 8008170:	f7ff f833 	bl	80071da <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8008174:	4b6d      	ldr	r3, [pc, #436]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008176:	785b      	ldrb	r3, [r3, #1]
 8008178:	2b00      	cmp	r3, #0
 800817a:	bf0c      	ite	eq
 800817c:	2301      	moveq	r3, #1
 800817e:	2300      	movne	r3, #0
 8008180:	b2db      	uxtb	r3, r3
 8008182:	461a      	mov	r2, r3
 8008184:	4b69      	ldr	r3, [pc, #420]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008186:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8008188:	88fb      	ldrh	r3, [r7, #6]
 800818a:	2b54      	cmp	r3, #84	; 0x54
 800818c:	d919      	bls.n	80081c2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 800818e:	88fb      	ldrh	r3, [r7, #6]
 8008190:	2b69      	cmp	r3, #105	; 0x69
 8008192:	d816      	bhi.n	80081c2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8008194:	4b65      	ldr	r3, [pc, #404]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008196:	789b      	ldrb	r3, [r3, #2]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d004      	beq.n	80081a6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 800819c:	2100      	movs	r1, #0
 800819e:	2003      	movs	r0, #3
 80081a0:	f7ff f81b 	bl	80071da <changeTFTScheduleRelayLights>
 80081a4:	e003      	b.n	80081ae <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 80081a6:	2101      	movs	r1, #1
 80081a8:	2003      	movs	r0, #3
 80081aa:	f7ff f816 	bl	80071da <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 80081ae:	4b5f      	ldr	r3, [pc, #380]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081b0:	789b      	ldrb	r3, [r3, #2]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bf0c      	ite	eq
 80081b6:	2301      	moveq	r3, #1
 80081b8:	2300      	movne	r3, #0
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	461a      	mov	r2, r3
 80081be:	4b5b      	ldr	r3, [pc, #364]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081c0:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80081c2:	88fb      	ldrh	r3, [r7, #6]
 80081c4:	2b74      	cmp	r3, #116	; 0x74
 80081c6:	d919      	bls.n	80081fc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 80081c8:	88fb      	ldrh	r3, [r7, #6]
 80081ca:	2b89      	cmp	r3, #137	; 0x89
 80081cc:	d816      	bhi.n	80081fc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80081ce:	4b57      	ldr	r3, [pc, #348]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081d0:	78db      	ldrb	r3, [r3, #3]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d004      	beq.n	80081e0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 80081d6:	2100      	movs	r1, #0
 80081d8:	2004      	movs	r0, #4
 80081da:	f7fe fffe 	bl	80071da <changeTFTScheduleRelayLights>
 80081de:	e003      	b.n	80081e8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80081e0:	2101      	movs	r1, #1
 80081e2:	2004      	movs	r0, #4
 80081e4:	f7fe fff9 	bl	80071da <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 80081e8:	4b50      	ldr	r3, [pc, #320]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081ea:	78db      	ldrb	r3, [r3, #3]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	bf0c      	ite	eq
 80081f0:	2301      	moveq	r3, #1
 80081f2:	2300      	movne	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	461a      	mov	r2, r3
 80081f8:	4b4c      	ldr	r3, [pc, #304]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80081fa:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80081fc:	88fb      	ldrh	r3, [r7, #6]
 80081fe:	2b94      	cmp	r3, #148	; 0x94
 8008200:	d919      	bls.n	8008236 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 8008202:	88fb      	ldrh	r3, [r7, #6]
 8008204:	2ba9      	cmp	r3, #169	; 0xa9
 8008206:	d816      	bhi.n	8008236 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8008208:	4b48      	ldr	r3, [pc, #288]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800820a:	791b      	ldrb	r3, [r3, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 8008210:	2100      	movs	r1, #0
 8008212:	2005      	movs	r0, #5
 8008214:	f7fe ffe1 	bl	80071da <changeTFTScheduleRelayLights>
 8008218:	e003      	b.n	8008222 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 800821a:	2101      	movs	r1, #1
 800821c:	2005      	movs	r0, #5
 800821e:	f7fe ffdc 	bl	80071da <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 8008222:	4b42      	ldr	r3, [pc, #264]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008224:	791b      	ldrb	r3, [r3, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	bf0c      	ite	eq
 800822a:	2301      	moveq	r3, #1
 800822c:	2300      	movne	r3, #0
 800822e:	b2db      	uxtb	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	4b3e      	ldr	r3, [pc, #248]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008234:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8008236:	88fb      	ldrh	r3, [r7, #6]
 8008238:	2bb4      	cmp	r3, #180	; 0xb4
 800823a:	d919      	bls.n	8008270 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 800823c:	88fb      	ldrh	r3, [r7, #6]
 800823e:	2bc9      	cmp	r3, #201	; 0xc9
 8008240:	d816      	bhi.n	8008270 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8008242:	4b3a      	ldr	r3, [pc, #232]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008244:	795b      	ldrb	r3, [r3, #5]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d004      	beq.n	8008254 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 800824a:	2100      	movs	r1, #0
 800824c:	2006      	movs	r0, #6
 800824e:	f7fe ffc4 	bl	80071da <changeTFTScheduleRelayLights>
 8008252:	e003      	b.n	800825c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8008254:	2101      	movs	r1, #1
 8008256:	2006      	movs	r0, #6
 8008258:	f7fe ffbf 	bl	80071da <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 800825c:	4b33      	ldr	r3, [pc, #204]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800825e:	795b      	ldrb	r3, [r3, #5]
 8008260:	2b00      	cmp	r3, #0
 8008262:	bf0c      	ite	eq
 8008264:	2301      	moveq	r3, #1
 8008266:	2300      	movne	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	461a      	mov	r2, r3
 800826c:	4b2f      	ldr	r3, [pc, #188]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800826e:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8008270:	88fb      	ldrh	r3, [r7, #6]
 8008272:	2bd4      	cmp	r3, #212	; 0xd4
 8008274:	d919      	bls.n	80082aa <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 8008276:	88fb      	ldrh	r3, [r7, #6]
 8008278:	2be9      	cmp	r3, #233	; 0xe9
 800827a:	d816      	bhi.n	80082aa <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 800827c:	4b2b      	ldr	r3, [pc, #172]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800827e:	799b      	ldrb	r3, [r3, #6]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d004      	beq.n	800828e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 8008284:	2100      	movs	r1, #0
 8008286:	2007      	movs	r0, #7
 8008288:	f7fe ffa7 	bl	80071da <changeTFTScheduleRelayLights>
 800828c:	e003      	b.n	8008296 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 800828e:	2101      	movs	r1, #1
 8008290:	2007      	movs	r0, #7
 8008292:	f7fe ffa2 	bl	80071da <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8008296:	4b25      	ldr	r3, [pc, #148]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008298:	799b      	ldrb	r3, [r3, #6]
 800829a:	2b00      	cmp	r3, #0
 800829c:	bf0c      	ite	eq
 800829e:	2301      	moveq	r3, #1
 80082a0:	2300      	movne	r3, #0
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	4b21      	ldr	r3, [pc, #132]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082a8:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 80082aa:	88fb      	ldrh	r3, [r7, #6]
 80082ac:	2bf4      	cmp	r3, #244	; 0xf4
 80082ae:	d91a      	bls.n	80082e6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 80082b0:	88fb      	ldrh	r3, [r7, #6]
 80082b2:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80082b6:	d216      	bcs.n	80082e6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80082b8:	4b1c      	ldr	r3, [pc, #112]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082ba:	79db      	ldrb	r3, [r3, #7]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 80082c0:	2100      	movs	r1, #0
 80082c2:	2008      	movs	r0, #8
 80082c4:	f7fe ff89 	bl	80071da <changeTFTScheduleRelayLights>
 80082c8:	e003      	b.n	80082d2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80082ca:	2101      	movs	r1, #1
 80082cc:	2008      	movs	r0, #8
 80082ce:	f7fe ff84 	bl	80071da <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 80082d2:	4b16      	ldr	r3, [pc, #88]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082d4:	79db      	ldrb	r3, [r3, #7]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	bf0c      	ite	eq
 80082da:	2301      	moveq	r3, #1
 80082dc:	2300      	movne	r3, #0
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	461a      	mov	r2, r3
 80082e2:	4b12      	ldr	r3, [pc, #72]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082e4:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 80082e6:	88fb      	ldrh	r3, [r7, #6]
 80082e8:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 80082ec:	d91a      	bls.n	8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 80082ee:	88fb      	ldrh	r3, [r7, #6]
 80082f0:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80082f4:	d216      	bcs.n	8008324 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 80082f6:	4b0d      	ldr	r3, [pc, #52]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80082f8:	7a1b      	ldrb	r3, [r3, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 80082fe:	2100      	movs	r1, #0
 8008300:	2009      	movs	r0, #9
 8008302:	f7fe ff6a 	bl	80071da <changeTFTScheduleRelayLights>
 8008306:	e003      	b.n	8008310 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8008308:	2101      	movs	r1, #1
 800830a:	2009      	movs	r0, #9
 800830c:	f7fe ff65 	bl	80071da <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8008310:	4b06      	ldr	r3, [pc, #24]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008312:	7a1b      	ldrb	r3, [r3, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	bf0c      	ite	eq
 8008318:	2301      	moveq	r3, #1
 800831a:	2300      	movne	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	461a      	mov	r2, r3
 8008320:	4b02      	ldr	r3, [pc, #8]	; (800832c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008322:	721a      	strb	r2, [r3, #8]
	}

}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20000870 	.word	0x20000870

08008330 <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	460a      	mov	r2, r1
 800833a:	80fb      	strh	r3, [r7, #6]
 800833c:	4613      	mov	r3, r2
 800833e:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8008340:	88fb      	ldrh	r3, [r7, #6]
 8008342:	2b14      	cmp	r3, #20
 8008344:	d919      	bls.n	800837a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	2b29      	cmp	r3, #41	; 0x29
 800834a:	d816      	bhi.n	800837a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 800834c:	4b82      	ldr	r3, [pc, #520]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d004      	beq.n	800835e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 8008354:	2100      	movs	r1, #0
 8008356:	2001      	movs	r0, #1
 8008358:	f7fe ff3f 	bl	80071da <changeTFTScheduleRelayLights>
 800835c:	e003      	b.n	8008366 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 800835e:	2101      	movs	r1, #1
 8008360:	2001      	movs	r0, #1
 8008362:	f7fe ff3a 	bl	80071da <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8008366:	4b7c      	ldr	r3, [pc, #496]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	bf0c      	ite	eq
 800836e:	2301      	moveq	r3, #1
 8008370:	2300      	movne	r3, #0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	461a      	mov	r2, r3
 8008376:	4b78      	ldr	r3, [pc, #480]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008378:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800837a:	88fb      	ldrh	r3, [r7, #6]
 800837c:	2b34      	cmp	r3, #52	; 0x34
 800837e:	d919      	bls.n	80083b4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 8008380:	88fb      	ldrh	r3, [r7, #6]
 8008382:	2b49      	cmp	r3, #73	; 0x49
 8008384:	d816      	bhi.n	80083b4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8008386:	4b74      	ldr	r3, [pc, #464]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008388:	785b      	ldrb	r3, [r3, #1]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 800838e:	2100      	movs	r1, #0
 8008390:	2002      	movs	r0, #2
 8008392:	f7fe ff22 	bl	80071da <changeTFTScheduleRelayLights>
 8008396:	e003      	b.n	80083a0 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8008398:	2101      	movs	r1, #1
 800839a:	2002      	movs	r0, #2
 800839c:	f7fe ff1d 	bl	80071da <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 80083a0:	4b6d      	ldr	r3, [pc, #436]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083a2:	785b      	ldrb	r3, [r3, #1]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	bf0c      	ite	eq
 80083a8:	2301      	moveq	r3, #1
 80083aa:	2300      	movne	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	461a      	mov	r2, r3
 80083b0:	4b69      	ldr	r3, [pc, #420]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083b2:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 80083b4:	88fb      	ldrh	r3, [r7, #6]
 80083b6:	2b54      	cmp	r3, #84	; 0x54
 80083b8:	d919      	bls.n	80083ee <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 80083ba:	88fb      	ldrh	r3, [r7, #6]
 80083bc:	2b69      	cmp	r3, #105	; 0x69
 80083be:	d816      	bhi.n	80083ee <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 80083c0:	4b65      	ldr	r3, [pc, #404]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083c2:	789b      	ldrb	r3, [r3, #2]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d004      	beq.n	80083d2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 80083c8:	2100      	movs	r1, #0
 80083ca:	2003      	movs	r0, #3
 80083cc:	f7fe ff05 	bl	80071da <changeTFTScheduleRelayLights>
 80083d0:	e003      	b.n	80083da <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 80083d2:	2101      	movs	r1, #1
 80083d4:	2003      	movs	r0, #3
 80083d6:	f7fe ff00 	bl	80071da <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 80083da:	4b5f      	ldr	r3, [pc, #380]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083dc:	789b      	ldrb	r3, [r3, #2]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	bf0c      	ite	eq
 80083e2:	2301      	moveq	r3, #1
 80083e4:	2300      	movne	r3, #0
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	461a      	mov	r2, r3
 80083ea:	4b5b      	ldr	r3, [pc, #364]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083ec:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	2b74      	cmp	r3, #116	; 0x74
 80083f2:	d919      	bls.n	8008428 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 80083f4:	88fb      	ldrh	r3, [r7, #6]
 80083f6:	2b89      	cmp	r3, #137	; 0x89
 80083f8:	d816      	bhi.n	8008428 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80083fa:	4b57      	ldr	r3, [pc, #348]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80083fc:	78db      	ldrb	r3, [r3, #3]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d004      	beq.n	800840c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 8008402:	2100      	movs	r1, #0
 8008404:	2004      	movs	r0, #4
 8008406:	f7fe fee8 	bl	80071da <changeTFTScheduleRelayLights>
 800840a:	e003      	b.n	8008414 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 800840c:	2101      	movs	r1, #1
 800840e:	2004      	movs	r0, #4
 8008410:	f7fe fee3 	bl	80071da <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8008414:	4b50      	ldr	r3, [pc, #320]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008416:	78db      	ldrb	r3, [r3, #3]
 8008418:	2b00      	cmp	r3, #0
 800841a:	bf0c      	ite	eq
 800841c:	2301      	moveq	r3, #1
 800841e:	2300      	movne	r3, #0
 8008420:	b2db      	uxtb	r3, r3
 8008422:	461a      	mov	r2, r3
 8008424:	4b4c      	ldr	r3, [pc, #304]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008426:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8008428:	88fb      	ldrh	r3, [r7, #6]
 800842a:	2b94      	cmp	r3, #148	; 0x94
 800842c:	d919      	bls.n	8008462 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 800842e:	88fb      	ldrh	r3, [r7, #6]
 8008430:	2ba9      	cmp	r3, #169	; 0xa9
 8008432:	d816      	bhi.n	8008462 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8008434:	4b48      	ldr	r3, [pc, #288]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008436:	791b      	ldrb	r3, [r3, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 800843c:	2100      	movs	r1, #0
 800843e:	2005      	movs	r0, #5
 8008440:	f7fe fecb 	bl	80071da <changeTFTScheduleRelayLights>
 8008444:	e003      	b.n	800844e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8008446:	2101      	movs	r1, #1
 8008448:	2005      	movs	r0, #5
 800844a:	f7fe fec6 	bl	80071da <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 800844e:	4b42      	ldr	r3, [pc, #264]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008450:	791b      	ldrb	r3, [r3, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	bf0c      	ite	eq
 8008456:	2301      	moveq	r3, #1
 8008458:	2300      	movne	r3, #0
 800845a:	b2db      	uxtb	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	4b3e      	ldr	r3, [pc, #248]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008460:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8008462:	88fb      	ldrh	r3, [r7, #6]
 8008464:	2bb4      	cmp	r3, #180	; 0xb4
 8008466:	d919      	bls.n	800849c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 8008468:	88fb      	ldrh	r3, [r7, #6]
 800846a:	2bc9      	cmp	r3, #201	; 0xc9
 800846c:	d816      	bhi.n	800849c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 800846e:	4b3a      	ldr	r3, [pc, #232]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008470:	795b      	ldrb	r3, [r3, #5]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 8008476:	2100      	movs	r1, #0
 8008478:	2006      	movs	r0, #6
 800847a:	f7fe feae 	bl	80071da <changeTFTScheduleRelayLights>
 800847e:	e003      	b.n	8008488 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8008480:	2101      	movs	r1, #1
 8008482:	2006      	movs	r0, #6
 8008484:	f7fe fea9 	bl	80071da <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8008488:	4b33      	ldr	r3, [pc, #204]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800848a:	795b      	ldrb	r3, [r3, #5]
 800848c:	2b00      	cmp	r3, #0
 800848e:	bf0c      	ite	eq
 8008490:	2301      	moveq	r3, #1
 8008492:	2300      	movne	r3, #0
 8008494:	b2db      	uxtb	r3, r3
 8008496:	461a      	mov	r2, r3
 8008498:	4b2f      	ldr	r3, [pc, #188]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800849a:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 800849c:	88fb      	ldrh	r3, [r7, #6]
 800849e:	2bd4      	cmp	r3, #212	; 0xd4
 80084a0:	d919      	bls.n	80084d6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	2be9      	cmp	r3, #233	; 0xe9
 80084a6:	d816      	bhi.n	80084d6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 80084a8:	4b2b      	ldr	r3, [pc, #172]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084aa:	799b      	ldrb	r3, [r3, #6]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d004      	beq.n	80084ba <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 80084b0:	2100      	movs	r1, #0
 80084b2:	2007      	movs	r0, #7
 80084b4:	f7fe fe91 	bl	80071da <changeTFTScheduleRelayLights>
 80084b8:	e003      	b.n	80084c2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 80084ba:	2101      	movs	r1, #1
 80084bc:	2007      	movs	r0, #7
 80084be:	f7fe fe8c 	bl	80071da <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 80084c2:	4b25      	ldr	r3, [pc, #148]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084c4:	799b      	ldrb	r3, [r3, #6]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bf0c      	ite	eq
 80084ca:	2301      	moveq	r3, #1
 80084cc:	2300      	movne	r3, #0
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	461a      	mov	r2, r3
 80084d2:	4b21      	ldr	r3, [pc, #132]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084d4:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	2bf4      	cmp	r3, #244	; 0xf4
 80084da:	d91a      	bls.n	8008512 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 80084dc:	88fb      	ldrh	r3, [r7, #6]
 80084de:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80084e2:	d216      	bcs.n	8008512 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80084e4:	4b1c      	ldr	r3, [pc, #112]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80084e6:	79db      	ldrb	r3, [r3, #7]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d004      	beq.n	80084f6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 80084ec:	2100      	movs	r1, #0
 80084ee:	2008      	movs	r0, #8
 80084f0:	f7fe fe73 	bl	80071da <changeTFTScheduleRelayLights>
 80084f4:	e003      	b.n	80084fe <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80084f6:	2101      	movs	r1, #1
 80084f8:	2008      	movs	r0, #8
 80084fa:	f7fe fe6e 	bl	80071da <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 80084fe:	4b16      	ldr	r3, [pc, #88]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008500:	79db      	ldrb	r3, [r3, #7]
 8008502:	2b00      	cmp	r3, #0
 8008504:	bf0c      	ite	eq
 8008506:	2301      	moveq	r3, #1
 8008508:	2300      	movne	r3, #0
 800850a:	b2db      	uxtb	r3, r3
 800850c:	461a      	mov	r2, r3
 800850e:	4b12      	ldr	r3, [pc, #72]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008510:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8008512:	88fb      	ldrh	r3, [r7, #6]
 8008514:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8008518:	d91a      	bls.n	8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 800851a:	88fb      	ldrh	r3, [r7, #6]
 800851c:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8008520:	d216      	bcs.n	8008550 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8008522:	4b0d      	ldr	r3, [pc, #52]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008524:	7a1b      	ldrb	r3, [r3, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 800852a:	2100      	movs	r1, #0
 800852c:	2009      	movs	r0, #9
 800852e:	f7fe fe54 	bl	80071da <changeTFTScheduleRelayLights>
 8008532:	e003      	b.n	800853c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8008534:	2101      	movs	r1, #1
 8008536:	2009      	movs	r0, #9
 8008538:	f7fe fe4f 	bl	80071da <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 800853c:	4b06      	ldr	r3, [pc, #24]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800853e:	7a1b      	ldrb	r3, [r3, #8]
 8008540:	2b00      	cmp	r3, #0
 8008542:	bf0c      	ite	eq
 8008544:	2301      	moveq	r3, #1
 8008546:	2300      	movne	r3, #0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	461a      	mov	r2, r3
 800854c:	4b02      	ldr	r3, [pc, #8]	; (8008558 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800854e:	721a      	strb	r2, [r3, #8]
	}
}
 8008550:	bf00      	nop
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	20000884 	.word	0x20000884

0800855c <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d118      	bne.n	800859e <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 800856c:	491b      	ldr	r1, [pc, #108]	; (80085dc <updateAllSchedulesInfo+0x80>)
 800856e:	2001      	movs	r0, #1
 8008570:	f7fa fe27 	bl	80031c2 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 8008574:	491a      	ldr	r1, [pc, #104]	; (80085e0 <updateAllSchedulesInfo+0x84>)
 8008576:	2001      	movs	r0, #1
 8008578:	f7fa fe47 	bl	800320a <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 800857c:	4919      	ldr	r1, [pc, #100]	; (80085e4 <updateAllSchedulesInfo+0x88>)
 800857e:	2001      	movs	r0, #1
 8008580:	f7fa fe67 	bl	8003252 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 8008584:	4918      	ldr	r1, [pc, #96]	; (80085e8 <updateAllSchedulesInfo+0x8c>)
 8008586:	2001      	movs	r0, #1
 8008588:	f7fa fe87 	bl	800329a <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 800858c:	4917      	ldr	r1, [pc, #92]	; (80085ec <updateAllSchedulesInfo+0x90>)
 800858e:	2001      	movs	r0, #1
 8008590:	f7fa fcc6 	bl	8002f20 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8008594:	4916      	ldr	r1, [pc, #88]	; (80085f0 <updateAllSchedulesInfo+0x94>)
 8008596:	2001      	movs	r0, #1
 8008598:	f7fa fd3e 	bl	8003018 <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 800859c:	e01a      	b.n	80085d4 <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 800859e:	79fb      	ldrb	r3, [r7, #7]
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d117      	bne.n	80085d4 <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 80085a4:	4913      	ldr	r1, [pc, #76]	; (80085f4 <updateAllSchedulesInfo+0x98>)
 80085a6:	2002      	movs	r0, #2
 80085a8:	f7fa fe0b 	bl	80031c2 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 80085ac:	4912      	ldr	r1, [pc, #72]	; (80085f8 <updateAllSchedulesInfo+0x9c>)
 80085ae:	2002      	movs	r0, #2
 80085b0:	f7fa fe2b 	bl	800320a <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 80085b4:	4911      	ldr	r1, [pc, #68]	; (80085fc <updateAllSchedulesInfo+0xa0>)
 80085b6:	2002      	movs	r0, #2
 80085b8:	f7fa fe4b 	bl	8003252 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 80085bc:	4910      	ldr	r1, [pc, #64]	; (8008600 <updateAllSchedulesInfo+0xa4>)
 80085be:	2002      	movs	r0, #2
 80085c0:	f7fa fe6b 	bl	800329a <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 80085c4:	4909      	ldr	r1, [pc, #36]	; (80085ec <updateAllSchedulesInfo+0x90>)
 80085c6:	2002      	movs	r0, #2
 80085c8:	f7fa fcaa 	bl	8002f20 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 80085cc:	4908      	ldr	r1, [pc, #32]	; (80085f0 <updateAllSchedulesInfo+0x94>)
 80085ce:	2002      	movs	r0, #2
 80085d0:	f7fa fd22 	bl	8003018 <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	2000088d 	.word	0x2000088d
 80085e0:	2000088f 	.word	0x2000088f
 80085e4:	2000088e 	.word	0x2000088e
 80085e8:	20000890 	.word	0x20000890
 80085ec:	20000868 	.word	0x20000868
 80085f0:	20000870 	.word	0x20000870
 80085f4:	20000891 	.word	0x20000891
 80085f8:	20000893 	.word	0x20000893
 80085fc:	20000892 	.word	0x20000892
 8008600:	20000894 	.word	0x20000894

08008604 <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	460a      	mov	r2, r1
 800860e:	80fb      	strh	r3, [r7, #6]
 8008610:	4613      	mov	r3, r2
 8008612:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8008614:	88bb      	ldrh	r3, [r7, #4]
 8008616:	2b4a      	cmp	r3, #74	; 0x4a
 8008618:	d908      	bls.n	800862c <clockIncreaseOneHourAndMinute+0x28>
 800861a:	88bb      	ldrh	r3, [r7, #4]
 800861c:	2b60      	cmp	r3, #96	; 0x60
 800861e:	d805      	bhi.n	800862c <clockIncreaseOneHourAndMinute+0x28>
	{
		EncoderState = ENCODER_CLOCK_HOUR;
 8008620:	4b10      	ldr	r3, [pc, #64]	; (8008664 <clockIncreaseOneHourAndMinute+0x60>)
 8008622:	2201      	movs	r2, #1
 8008624:	701a      	strb	r2, [r3, #0]

		OneHourIncrease();
 8008626:	f000 ffcb 	bl	80095c0 <OneHourIncrease>
 800862a:	e017      	b.n	800865c <clockIncreaseOneHourAndMinute+0x58>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 800862c:	88bb      	ldrh	r3, [r7, #4]
 800862e:	2b72      	cmp	r3, #114	; 0x72
 8008630:	d908      	bls.n	8008644 <clockIncreaseOneHourAndMinute+0x40>
 8008632:	88bb      	ldrh	r3, [r7, #4]
 8008634:	2b88      	cmp	r3, #136	; 0x88
 8008636:	d805      	bhi.n	8008644 <clockIncreaseOneHourAndMinute+0x40>
	{
		EncoderState = ENCODER_CLOCK_MINUTE;
 8008638:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <clockIncreaseOneHourAndMinute+0x60>)
 800863a:	2202      	movs	r2, #2
 800863c:	701a      	strb	r2, [r3, #0]

		OneMinuteIncrease();
 800863e:	f000 ff93 	bl	8009568 <OneMinuteIncrease>
 8008642:	e00b      	b.n	800865c <clockIncreaseOneHourAndMinute+0x58>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8008644:	88bb      	ldrh	r3, [r7, #4]
 8008646:	2b9a      	cmp	r3, #154	; 0x9a
 8008648:	d908      	bls.n	800865c <clockIncreaseOneHourAndMinute+0x58>
 800864a:	88bb      	ldrh	r3, [r7, #4]
 800864c:	2bb0      	cmp	r3, #176	; 0xb0
 800864e:	d805      	bhi.n	800865c <clockIncreaseOneHourAndMinute+0x58>
	{
		EncoderState = ENCODER_CLOCK_DAY;
 8008650:	4b04      	ldr	r3, [pc, #16]	; (8008664 <clockIncreaseOneHourAndMinute+0x60>)
 8008652:	2203      	movs	r2, #3
 8008654:	701a      	strb	r2, [r3, #0]

		OneDayIncrease();
 8008656:	f000 ffdf 	bl	8009618 <OneDayIncrease>
	}
}
 800865a:	e7ff      	b.n	800865c <clockIncreaseOneHourAndMinute+0x58>
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	200008e9 	.word	0x200008e9

08008668 <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af02      	add	r7, sp, #8
 800866e:	4603      	mov	r3, r0
 8008670:	460a      	mov	r2, r1
 8008672:	80fb      	strh	r3, [r7, #6]
 8008674:	4613      	mov	r3, r2
 8008676:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8008678:	88bb      	ldrh	r3, [r7, #4]
 800867a:	2b4a      	cmp	r3, #74	; 0x4a
 800867c:	d926      	bls.n	80086cc <clockIncreaseSixHoursTenMinutes+0x64>
 800867e:	88bb      	ldrh	r3, [r7, #4]
 8008680:	2b60      	cmp	r3, #96	; 0x60
 8008682:	d823      	bhi.n	80086cc <clockIncreaseSixHoursTenMinutes+0x64>
	{
		EncoderState = ENCODER_CLOCK_HOUR;
 8008684:	4b31      	ldr	r3, [pc, #196]	; (800874c <clockIncreaseSixHoursTenMinutes+0xe4>)
 8008686:	2201      	movs	r2, #1
 8008688:	701a      	strb	r2, [r3, #0]

		if(Hours < 19)
 800868a:	4b31      	ldr	r3, [pc, #196]	; (8008750 <clockIncreaseSixHoursTenMinutes+0xe8>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b12      	cmp	r3, #18
 8008690:	d806      	bhi.n	80086a0 <clockIncreaseSixHoursTenMinutes+0x38>
		{
			Hours = Hours + 6;
 8008692:	4b2f      	ldr	r3, [pc, #188]	; (8008750 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	3306      	adds	r3, #6
 8008698:	b2da      	uxtb	r2, r3
 800869a:	4b2d      	ldr	r3, [pc, #180]	; (8008750 <clockIncreaseSixHoursTenMinutes+0xe8>)
 800869c:	701a      	strb	r2, [r3, #0]
 800869e:	e002      	b.n	80086a6 <clockIncreaseSixHoursTenMinutes+0x3e>
		}
		else
		{
			Hours = 1;
 80086a0:	4b2b      	ldr	r3, [pc, #172]	; (8008750 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80086a2:	2201      	movs	r2, #1
 80086a4:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)MsgMenuTFT, " %d  ", Hours);
 80086a6:	4b2a      	ldr	r3, [pc, #168]	; (8008750 <clockIncreaseSixHoursTenMinutes+0xe8>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	4929      	ldr	r1, [pc, #164]	; (8008754 <clockIncreaseSixHoursTenMinutes+0xec>)
 80086ae:	482a      	ldr	r0, [pc, #168]	; (8008758 <clockIncreaseSixHoursTenMinutes+0xf0>)
 80086b0:	f00a fde6 	bl	8013280 <siprintf>
		EF_PutString(MsgMenuTFT, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80086b4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	2301      	movs	r3, #1
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	2300      	movs	r3, #0
 80086c0:	2246      	movs	r2, #70	; 0x46
 80086c2:	219d      	movs	r1, #157	; 0x9d
 80086c4:	4824      	ldr	r0, [pc, #144]	; (8008758 <clockIncreaseSixHoursTenMinutes+0xf0>)
 80086c6:	f7f9 fb71 	bl	8001dac <EF_PutString>
 80086ca:	e038      	b.n	800873e <clockIncreaseSixHoursTenMinutes+0xd6>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 80086cc:	88bb      	ldrh	r3, [r7, #4]
 80086ce:	2b72      	cmp	r3, #114	; 0x72
 80086d0:	d935      	bls.n	800873e <clockIncreaseSixHoursTenMinutes+0xd6>
 80086d2:	88bb      	ldrh	r3, [r7, #4]
 80086d4:	2b88      	cmp	r3, #136	; 0x88
 80086d6:	d832      	bhi.n	800873e <clockIncreaseSixHoursTenMinutes+0xd6>
	{
		EncoderState = ENCODER_CLOCK_MINUTE;
 80086d8:	4b1c      	ldr	r3, [pc, #112]	; (800874c <clockIncreaseSixHoursTenMinutes+0xe4>)
 80086da:	2202      	movs	r2, #2
 80086dc:	701a      	strb	r2, [r3, #0]

		if(Minutes < 49)
 80086de:	4b1f      	ldr	r3, [pc, #124]	; (800875c <clockIncreaseSixHoursTenMinutes+0xf4>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b30      	cmp	r3, #48	; 0x30
 80086e4:	d806      	bhi.n	80086f4 <clockIncreaseSixHoursTenMinutes+0x8c>
		{
			Minutes = Minutes +10;
 80086e6:	4b1d      	ldr	r3, [pc, #116]	; (800875c <clockIncreaseSixHoursTenMinutes+0xf4>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	330a      	adds	r3, #10
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	4b1b      	ldr	r3, [pc, #108]	; (800875c <clockIncreaseSixHoursTenMinutes+0xf4>)
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	e012      	b.n	800871a <clockIncreaseSixHoursTenMinutes+0xb2>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 80086f4:	4b19      	ldr	r3, [pc, #100]	; (800875c <clockIncreaseSixHoursTenMinutes+0xf4>)
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	f103 020a 	add.w	r2, r3, #10
 80086fc:	4b18      	ldr	r3, [pc, #96]	; (8008760 <clockIncreaseSixHoursTenMinutes+0xf8>)
 80086fe:	fb83 1302 	smull	r1, r3, r3, r2
 8008702:	4413      	add	r3, r2
 8008704:	1159      	asrs	r1, r3, #5
 8008706:	17d3      	asrs	r3, r2, #31
 8008708:	1ac9      	subs	r1, r1, r3
 800870a:	460b      	mov	r3, r1
 800870c:	011b      	lsls	r3, r3, #4
 800870e:	1a5b      	subs	r3, r3, r1
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	1ad1      	subs	r1, r2, r3
 8008714:	b2ca      	uxtb	r2, r1
 8008716:	4b11      	ldr	r3, [pc, #68]	; (800875c <clockIncreaseSixHoursTenMinutes+0xf4>)
 8008718:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)MsgMenuTFT, " %d  ", Minutes);
 800871a:	4b10      	ldr	r3, [pc, #64]	; (800875c <clockIncreaseSixHoursTenMinutes+0xf4>)
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	490c      	ldr	r1, [pc, #48]	; (8008754 <clockIncreaseSixHoursTenMinutes+0xec>)
 8008722:	480d      	ldr	r0, [pc, #52]	; (8008758 <clockIncreaseSixHoursTenMinutes+0xf0>)
 8008724:	f00a fdac 	bl	8013280 <siprintf>
		EF_PutString(MsgMenuTFT, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008728:	f24c 6318 	movw	r3, #50712	; 0xc618
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	2301      	movs	r3, #1
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	2300      	movs	r3, #0
 8008734:	226e      	movs	r2, #110	; 0x6e
 8008736:	219c      	movs	r1, #156	; 0x9c
 8008738:	4807      	ldr	r0, [pc, #28]	; (8008758 <clockIncreaseSixHoursTenMinutes+0xf0>)
 800873a:	f7f9 fb37 	bl	8001dac <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 800873e:	4809      	ldr	r0, [pc, #36]	; (8008764 <clockIncreaseSixHoursTenMinutes+0xfc>)
 8008740:	f7f9 f91a 	bl	8001978 <EF_SetFont>
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	200008e9 	.word	0x200008e9
 8008750:	20000032 	.word	0x20000032
 8008754:	080175d8 	.word	0x080175d8
 8008758:	200008a4 	.word	0x200008a4
 800875c:	20000033 	.word	0x20000033
 8008760:	88888889 	.word	0x88888889
 8008764:	0802ab7c 	.word	0x0802ab7c

08008768 <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	2b40      	cmp	r3, #64	; 0x40
 8008776:	d90e      	bls.n	8008796 <changeSwitchStatusTouch+0x2e>
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	2b56      	cmp	r3, #86	; 0x56
 800877c:	d80b      	bhi.n	8008796 <changeSwitchStatusTouch+0x2e>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 800877e:	4b24      	ldr	r3, [pc, #144]	; (8008810 <changeSwitchStatusTouch+0xa8>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <changeSwitchStatusTouch+0x26>
		{
			firstSwitchTurn(0);
 8008786:	2000      	movs	r0, #0
 8008788:	f000 faee 	bl	8008d68 <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 800878c:	e038      	b.n	8008800 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstSwitchTurn(1);
 800878e:	2001      	movs	r0, #1
 8008790:	f000 faea 	bl	8008d68 <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8008794:	e034      	b.n	8008800 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8008796:	79fb      	ldrb	r3, [r7, #7]
 8008798:	2b5e      	cmp	r3, #94	; 0x5e
 800879a:	d90e      	bls.n	80087ba <changeSwitchStatusTouch+0x52>
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	2b74      	cmp	r3, #116	; 0x74
 80087a0:	d80b      	bhi.n	80087ba <changeSwitchStatusTouch+0x52>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 80087a2:	4b1b      	ldr	r3, [pc, #108]	; (8008810 <changeSwitchStatusTouch+0xa8>)
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <changeSwitchStatusTouch+0x4a>
		{
			secondSwitchTurn(0);
 80087aa:	2000      	movs	r0, #0
 80087ac:	f000 fb5e 	bl	8008e6c <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 80087b0:	e026      	b.n	8008800 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondSwitchTurn(1);
 80087b2:	2001      	movs	r0, #1
 80087b4:	f000 fb5a 	bl	8008e6c <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 80087b8:	e022      	b.n	8008800 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	2b7c      	cmp	r3, #124	; 0x7c
 80087be:	d90e      	bls.n	80087de <changeSwitchStatusTouch+0x76>
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	2b92      	cmp	r3, #146	; 0x92
 80087c4:	d80b      	bhi.n	80087de <changeSwitchStatusTouch+0x76>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 80087c6:	4b12      	ldr	r3, [pc, #72]	; (8008810 <changeSwitchStatusTouch+0xa8>)
 80087c8:	789b      	ldrb	r3, [r3, #2]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <changeSwitchStatusTouch+0x6e>
		{
			thirdSwitchTurn(0);
 80087ce:	2000      	movs	r0, #0
 80087d0:	f000 fbce 	bl	8008f70 <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 80087d4:	e014      	b.n	8008800 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdSwitchTurn(1);
 80087d6:	2001      	movs	r0, #1
 80087d8:	f000 fbca 	bl	8008f70 <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 80087dc:	e010      	b.n	8008800 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	2b9a      	cmp	r3, #154	; 0x9a
 80087e2:	d90d      	bls.n	8008800 <changeSwitchStatusTouch+0x98>
 80087e4:	79fb      	ldrb	r3, [r7, #7]
 80087e6:	2bb0      	cmp	r3, #176	; 0xb0
 80087e8:	d80a      	bhi.n	8008800 <changeSwitchStatusTouch+0x98>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 80087ea:	4b09      	ldr	r3, [pc, #36]	; (8008810 <changeSwitchStatusTouch+0xa8>)
 80087ec:	78db      	ldrb	r3, [r3, #3]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <changeSwitchStatusTouch+0x92>
		{
			fourthSwitchTurn(0);
 80087f2:	2000      	movs	r0, #0
 80087f4:	f000 fc3e 	bl	8009074 <fourthSwitchTurn>
 80087f8:	e002      	b.n	8008800 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthSwitchTurn(1);
 80087fa:	2001      	movs	r0, #1
 80087fc:	f000 fc3a 	bl	8009074 <fourthSwitchTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8008800:	4804      	ldr	r0, [pc, #16]	; (8008814 <changeSwitchStatusTouch+0xac>)
 8008802:	f7f9 f8b9 	bl	8001978 <EF_SetFont>
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000944 	.word	0x20000944
 8008814:	0802ab7c 	.word	0x0802ab7c

08008818 <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	2b40      	cmp	r3, #64	; 0x40
 8008826:	d90e      	bls.n	8008846 <changeLightsStatusTouch+0x2e>
 8008828:	79fb      	ldrb	r3, [r7, #7]
 800882a:	2b56      	cmp	r3, #86	; 0x56
 800882c:	d80b      	bhi.n	8008846 <changeLightsStatusTouch+0x2e>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 800882e:	4b24      	ldr	r3, [pc, #144]	; (80088c0 <changeLightsStatusTouch+0xa8>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d003      	beq.n	800883e <changeLightsStatusTouch+0x26>
		{
			firstLightTurn(0);
 8008836:	2000      	movs	r0, #0
 8008838:	f000 fc9e 	bl	8009178 <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 800883c:	e038      	b.n	80088b0 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstLightTurn(1);
 800883e:	2001      	movs	r0, #1
 8008840:	f000 fc9a 	bl	8009178 <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 8008844:	e034      	b.n	80088b0 <changeLightsStatusTouch+0x98>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8008846:	79fb      	ldrb	r3, [r7, #7]
 8008848:	2b5e      	cmp	r3, #94	; 0x5e
 800884a:	d90e      	bls.n	800886a <changeLightsStatusTouch+0x52>
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	2b74      	cmp	r3, #116	; 0x74
 8008850:	d80b      	bhi.n	800886a <changeLightsStatusTouch+0x52>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 8008852:	4b1b      	ldr	r3, [pc, #108]	; (80088c0 <changeLightsStatusTouch+0xa8>)
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <changeLightsStatusTouch+0x4a>
		{
			secondLightTurn(0);
 800885a:	2000      	movs	r0, #0
 800885c:	f000 fd0a 	bl	8009274 <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8008860:	e026      	b.n	80088b0 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondLightTurn(1);
 8008862:	2001      	movs	r0, #1
 8008864:	f000 fd06 	bl	8009274 <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8008868:	e022      	b.n	80088b0 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	2b7c      	cmp	r3, #124	; 0x7c
 800886e:	d90e      	bls.n	800888e <changeLightsStatusTouch+0x76>
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	2b92      	cmp	r3, #146	; 0x92
 8008874:	d80b      	bhi.n	800888e <changeLightsStatusTouch+0x76>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 8008876:	4b12      	ldr	r3, [pc, #72]	; (80088c0 <changeLightsStatusTouch+0xa8>)
 8008878:	789b      	ldrb	r3, [r3, #2]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <changeLightsStatusTouch+0x6e>
		{
			thirdLightTurn(0);
 800887e:	2000      	movs	r0, #0
 8008880:	f000 fd76 	bl	8009370 <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 8008884:	e014      	b.n	80088b0 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdLightTurn(1);
 8008886:	2001      	movs	r0, #1
 8008888:	f000 fd72 	bl	8009370 <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 800888c:	e010      	b.n	80088b0 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	2b9a      	cmp	r3, #154	; 0x9a
 8008892:	d90d      	bls.n	80088b0 <changeLightsStatusTouch+0x98>
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	2bb0      	cmp	r3, #176	; 0xb0
 8008898:	d80a      	bhi.n	80088b0 <changeLightsStatusTouch+0x98>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 800889a:	4b09      	ldr	r3, [pc, #36]	; (80088c0 <changeLightsStatusTouch+0xa8>)
 800889c:	78db      	ldrb	r3, [r3, #3]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <changeLightsStatusTouch+0x92>
		{
			fourthLightTurn(0);
 80088a2:	2000      	movs	r0, #0
 80088a4:	f000 fde2 	bl	800946c <fourthLightTurn>
 80088a8:	e002      	b.n	80088b0 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthLightTurn(1);
 80088aa:	2001      	movs	r0, #1
 80088ac:	f000 fdde 	bl	800946c <fourthLightTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 80088b0:	4804      	ldr	r0, [pc, #16]	; (80088c4 <changeLightsStatusTouch+0xac>)
 80088b2:	f7f9 f861 	bl	8001978 <EF_SetFont>
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	20000948 	.word	0x20000948
 80088c4:	0802ab7c 	.word	0x0802ab7c

080088c8 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	4603      	mov	r3, r0
 80088d0:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 80088d2:	79fb      	ldrb	r3, [r7, #7]
 80088d4:	2b3b      	cmp	r3, #59	; 0x3b
 80088d6:	d966      	bls.n	80089a6 <predefinedActivityTouchAction+0xde>
 80088d8:	79fb      	ldrb	r3, [r7, #7]
 80088da:	2b64      	cmp	r3, #100	; 0x64
 80088dc:	d863      	bhi.n	80089a6 <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 80088de:	4b69      	ldr	r3, [pc, #420]	; (8008a84 <predefinedActivityTouchAction+0x1bc>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d02f      	beq.n	8008946 <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 80088e6:	4b67      	ldr	r3, [pc, #412]	; (8008a84 <predefinedActivityTouchAction+0x1bc>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80088ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	230a      	movs	r3, #10
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	2328      	movs	r3, #40	; 0x28
 80088f8:	2278      	movs	r2, #120	; 0x78
 80088fa:	213c      	movs	r1, #60	; 0x3c
 80088fc:	2064      	movs	r0, #100	; 0x64
 80088fe:	f7f8 ffea 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "KARMIENIE");
 8008902:	4961      	ldr	r1, [pc, #388]	; (8008a88 <predefinedActivityTouchAction+0x1c0>)
 8008904:	4861      	ldr	r0, [pc, #388]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 8008906:	f00a fcbb 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800890a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800890e:	9301      	str	r3, [sp, #4]
 8008910:	2300      	movs	r3, #0
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	2300      	movs	r3, #0
 8008916:	223e      	movs	r2, #62	; 0x3e
 8008918:	2177      	movs	r1, #119	; 0x77
 800891a:	485c      	ldr	r0, [pc, #368]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 800891c:	f7f9 fa46 	bl	8001dac <EF_PutString>
			sprintf((char*)MsgMenuTFT, "OFF");
 8008920:	495b      	ldr	r1, [pc, #364]	; (8008a90 <predefinedActivityTouchAction+0x1c8>)
 8008922:	485a      	ldr	r0, [pc, #360]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 8008924:	f00a fcac 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008928:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800892c:	9301      	str	r3, [sp, #4]
 800892e:	2300      	movs	r3, #0
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	2300      	movs	r3, #0
 8008934:	2250      	movs	r2, #80	; 0x50
 8008936:	2193      	movs	r1, #147	; 0x93
 8008938:	4854      	ldr	r0, [pc, #336]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 800893a:	f7f9 fa37 	bl	8001dac <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 800893e:	2000      	movs	r0, #0
 8008940:	f7fc fc04 	bl	800514c <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8008944:	e099      	b.n	8008a7a <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 8008946:	4b4f      	ldr	r3, [pc, #316]	; (8008a84 <predefinedActivityTouchAction+0x1bc>)
 8008948:	2201      	movs	r2, #1
 800894a:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800894c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008950:	9301      	str	r3, [sp, #4]
 8008952:	230a      	movs	r3, #10
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	2328      	movs	r3, #40	; 0x28
 8008958:	2278      	movs	r2, #120	; 0x78
 800895a:	213c      	movs	r1, #60	; 0x3c
 800895c:	2064      	movs	r0, #100	; 0x64
 800895e:	f7f8 ffba 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "KARMIENIE");
 8008962:	4949      	ldr	r1, [pc, #292]	; (8008a88 <predefinedActivityTouchAction+0x1c0>)
 8008964:	4849      	ldr	r0, [pc, #292]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 8008966:	f00a fc8b 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800896a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800896e:	9301      	str	r3, [sp, #4]
 8008970:	2300      	movs	r3, #0
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	2300      	movs	r3, #0
 8008976:	223e      	movs	r2, #62	; 0x3e
 8008978:	2177      	movs	r1, #119	; 0x77
 800897a:	4844      	ldr	r0, [pc, #272]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 800897c:	f7f9 fa16 	bl	8001dac <EF_PutString>
			sprintf((char*)MsgMenuTFT, "ON");
 8008980:	4944      	ldr	r1, [pc, #272]	; (8008a94 <predefinedActivityTouchAction+0x1cc>)
 8008982:	4842      	ldr	r0, [pc, #264]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 8008984:	f00a fc7c 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008988:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800898c:	9301      	str	r3, [sp, #4]
 800898e:	2300      	movs	r3, #0
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	2300      	movs	r3, #0
 8008994:	2250      	movs	r2, #80	; 0x50
 8008996:	2193      	movs	r1, #147	; 0x93
 8008998:	483c      	ldr	r0, [pc, #240]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 800899a:	f7f9 fa07 	bl	8001dac <EF_PutString>
			predefinedActivityKarmienie(1);
 800899e:	2001      	movs	r0, #1
 80089a0:	f7fc fbd4 	bl	800514c <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 80089a4:	e069      	b.n	8008a7a <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 80089a6:	79fb      	ldrb	r3, [r7, #7]
 80089a8:	2b77      	cmp	r3, #119	; 0x77
 80089aa:	d966      	bls.n	8008a7a <predefinedActivityTouchAction+0x1b2>
 80089ac:	79fb      	ldrb	r3, [r7, #7]
 80089ae:	2ba0      	cmp	r3, #160	; 0xa0
 80089b0:	d863      	bhi.n	8008a7a <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 80089b2:	4b34      	ldr	r3, [pc, #208]	; (8008a84 <predefinedActivityTouchAction+0x1bc>)
 80089b4:	785b      	ldrb	r3, [r3, #1]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d02f      	beq.n	8008a1a <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 80089ba:	4b32      	ldr	r3, [pc, #200]	; (8008a84 <predefinedActivityTouchAction+0x1bc>)
 80089bc:	2200      	movs	r2, #0
 80089be:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80089c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	230a      	movs	r3, #10
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	2328      	movs	r3, #40	; 0x28
 80089cc:	2278      	movs	r2, #120	; 0x78
 80089ce:	2178      	movs	r1, #120	; 0x78
 80089d0:	2064      	movs	r0, #100	; 0x64
 80089d2:	f7f8 ff80 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "CZYSZCZENIE");
 80089d6:	4930      	ldr	r1, [pc, #192]	; (8008a98 <predefinedActivityTouchAction+0x1d0>)
 80089d8:	482c      	ldr	r0, [pc, #176]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 80089da:	f00a fc51 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80089de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	2300      	movs	r3, #0
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	2300      	movs	r3, #0
 80089ea:	227a      	movs	r2, #122	; 0x7a
 80089ec:	2169      	movs	r1, #105	; 0x69
 80089ee:	4827      	ldr	r0, [pc, #156]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 80089f0:	f7f9 f9dc 	bl	8001dac <EF_PutString>
			sprintf((char*)MsgMenuTFT, "OFF");
 80089f4:	4926      	ldr	r1, [pc, #152]	; (8008a90 <predefinedActivityTouchAction+0x1c8>)
 80089f6:	4825      	ldr	r0, [pc, #148]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 80089f8:	f00a fc42 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80089fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	2300      	movs	r3, #0
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	2300      	movs	r3, #0
 8008a08:	228c      	movs	r2, #140	; 0x8c
 8008a0a:	2193      	movs	r1, #147	; 0x93
 8008a0c:	481f      	ldr	r0, [pc, #124]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 8008a0e:	f7f9 f9cd 	bl	8001dac <EF_PutString>
			predefinedActivityCzyszczenie(0);
 8008a12:	2000      	movs	r0, #0
 8008a14:	f7fc fb80 	bl	8005118 <predefinedActivityCzyszczenie>
			sprintf((char*)MsgMenuTFT, "ON");
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 8008a18:	e02f      	b.n	8008a7a <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 8008a1a:	4b1a      	ldr	r3, [pc, #104]	; (8008a84 <predefinedActivityTouchAction+0x1bc>)
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008a20:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	230a      	movs	r3, #10
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	2328      	movs	r3, #40	; 0x28
 8008a2c:	2278      	movs	r2, #120	; 0x78
 8008a2e:	2178      	movs	r1, #120	; 0x78
 8008a30:	2064      	movs	r0, #100	; 0x64
 8008a32:	f7f8 ff50 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "CZYSZCZENIE");
 8008a36:	4918      	ldr	r1, [pc, #96]	; (8008a98 <predefinedActivityTouchAction+0x1d0>)
 8008a38:	4814      	ldr	r0, [pc, #80]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 8008a3a:	f00a fc21 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008a3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	2300      	movs	r3, #0
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	227a      	movs	r2, #122	; 0x7a
 8008a4c:	2169      	movs	r1, #105	; 0x69
 8008a4e:	480f      	ldr	r0, [pc, #60]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 8008a50:	f7f9 f9ac 	bl	8001dac <EF_PutString>
			sprintf((char*)MsgMenuTFT, "ON");
 8008a54:	490f      	ldr	r1, [pc, #60]	; (8008a94 <predefinedActivityTouchAction+0x1cc>)
 8008a56:	480d      	ldr	r0, [pc, #52]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 8008a58:	f00a fc12 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8008a5c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	2300      	movs	r3, #0
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	2300      	movs	r3, #0
 8008a68:	228c      	movs	r2, #140	; 0x8c
 8008a6a:	2193      	movs	r1, #147	; 0x93
 8008a6c:	4807      	ldr	r0, [pc, #28]	; (8008a8c <predefinedActivityTouchAction+0x1c4>)
 8008a6e:	f7f9 f99d 	bl	8001dac <EF_PutString>
			predefinedActivityCzyszczenie(1);
 8008a72:	2001      	movs	r0, #1
 8008a74:	f7fc fb50 	bl	8005118 <predefinedActivityCzyszczenie>
}
 8008a78:	e7ff      	b.n	8008a7a <predefinedActivityTouchAction+0x1b2>
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	200002d4 	.word	0x200002d4
 8008a88:	080175e0 	.word	0x080175e0
 8008a8c:	200008a4 	.word	0x200008a4
 8008a90:	080175ec 	.word	0x080175ec
 8008a94:	080175f0 	.word	0x080175f0
 8008a98:	080175f4 	.word	0x080175f4

08008a9c <WSONEincreaseNumberOfLedOnTFT>:
//
// Handling Touch to increase number of WS LED
//

void WSONEincreaseNumberOfLedOnTFT(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af02      	add	r7, sp, #8
	if(NrOfLeds < 98)
 8008aa2:	4b17      	ldr	r3, [pc, #92]	; (8008b00 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	2b61      	cmp	r3, #97	; 0x61
 8008aa8:	d806      	bhi.n	8008ab8 <WSONEincreaseNumberOfLedOnTFT+0x1c>
			{
				NrOfLeds++;
 8008aaa:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	4b13      	ldr	r3, [pc, #76]	; (8008b00 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008ab4:	701a      	strb	r2, [r3, #0]
 8008ab6:	e002      	b.n	8008abe <WSONEincreaseNumberOfLedOnTFT+0x22>
			}
			else
			{
				NrOfLeds = 1;
 8008ab8:	4b11      	ldr	r3, [pc, #68]	; (8008b00 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008aba:	2201      	movs	r2, #1
 8008abc:	701a      	strb	r2, [r3, #0]
			}
			if(NrOfLeds < 10)sprintf((char*)MsgMenuTFT, "  %d ", NrOfLeds);
 8008abe:	4b10      	ldr	r3, [pc, #64]	; (8008b00 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b09      	cmp	r3, #9
 8008ac4:	d807      	bhi.n	8008ad6 <WSONEincreaseNumberOfLedOnTFT+0x3a>
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	490d      	ldr	r1, [pc, #52]	; (8008b04 <WSONEincreaseNumberOfLedOnTFT+0x68>)
 8008ace:	480e      	ldr	r0, [pc, #56]	; (8008b08 <WSONEincreaseNumberOfLedOnTFT+0x6c>)
 8008ad0:	f00a fbd6 	bl	8013280 <siprintf>
 8008ad4:	e006      	b.n	8008ae4 <WSONEincreaseNumberOfLedOnTFT+0x48>
			else sprintf((char*)MsgMenuTFT, " %d", NrOfLeds);
 8008ad6:	4b0a      	ldr	r3, [pc, #40]	; (8008b00 <WSONEincreaseNumberOfLedOnTFT+0x64>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	490b      	ldr	r1, [pc, #44]	; (8008b0c <WSONEincreaseNumberOfLedOnTFT+0x70>)
 8008ade:	480a      	ldr	r0, [pc, #40]	; (8008b08 <WSONEincreaseNumberOfLedOnTFT+0x6c>)
 8008ae0:	f00a fbce 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008ae4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	2301      	movs	r3, #1
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	2300      	movs	r3, #0
 8008af0:	223c      	movs	r2, #60	; 0x3c
 8008af2:	21ac      	movs	r1, #172	; 0xac
 8008af4:	4804      	ldr	r0, [pc, #16]	; (8008b08 <WSONEincreaseNumberOfLedOnTFT+0x6c>)
 8008af6:	f7f9 f959 	bl	8001dac <EF_PutString>
}
 8008afa:	bf00      	nop
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20000034 	.word	0x20000034
 8008b04:	08017600 	.word	0x08017600
 8008b08:	200008a4 	.word	0x200008a4
 8008b0c:	08017608 	.word	0x08017608

08008b10 <WSONEdecreaseNumberOfLedOnTFT>:

void WSONEdecreaseNumberOfLedOnTFT(void)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af02      	add	r7, sp, #8
	if(NrOfLeds > 0)
 8008b16:	4b17      	ldr	r3, [pc, #92]	; (8008b74 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d006      	beq.n	8008b2c <WSONEdecreaseNumberOfLedOnTFT+0x1c>
			{
				NrOfLeds--;
 8008b1e:	4b15      	ldr	r3, [pc, #84]	; (8008b74 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	4b13      	ldr	r3, [pc, #76]	; (8008b74 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	e002      	b.n	8008b32 <WSONEdecreaseNumberOfLedOnTFT+0x22>
			}
			else
			{
				NrOfLeds = 99;
 8008b2c:	4b11      	ldr	r3, [pc, #68]	; (8008b74 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b2e:	2263      	movs	r2, #99	; 0x63
 8008b30:	701a      	strb	r2, [r3, #0]
			}
			if(NrOfLeds < 10)sprintf((char*)MsgMenuTFT, "  %d ", NrOfLeds);
 8008b32:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	2b09      	cmp	r3, #9
 8008b38:	d807      	bhi.n	8008b4a <WSONEdecreaseNumberOfLedOnTFT+0x3a>
 8008b3a:	4b0e      	ldr	r3, [pc, #56]	; (8008b74 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	490d      	ldr	r1, [pc, #52]	; (8008b78 <WSONEdecreaseNumberOfLedOnTFT+0x68>)
 8008b42:	480e      	ldr	r0, [pc, #56]	; (8008b7c <WSONEdecreaseNumberOfLedOnTFT+0x6c>)
 8008b44:	f00a fb9c 	bl	8013280 <siprintf>
 8008b48:	e006      	b.n	8008b58 <WSONEdecreaseNumberOfLedOnTFT+0x48>
			else sprintf((char*)MsgMenuTFT, " %d", NrOfLeds);
 8008b4a:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <WSONEdecreaseNumberOfLedOnTFT+0x64>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	490b      	ldr	r1, [pc, #44]	; (8008b80 <WSONEdecreaseNumberOfLedOnTFT+0x70>)
 8008b52:	480a      	ldr	r0, [pc, #40]	; (8008b7c <WSONEdecreaseNumberOfLedOnTFT+0x6c>)
 8008b54:	f00a fb94 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008b58:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	2301      	movs	r3, #1
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	2300      	movs	r3, #0
 8008b64:	223c      	movs	r2, #60	; 0x3c
 8008b66:	21ac      	movs	r1, #172	; 0xac
 8008b68:	4804      	ldr	r0, [pc, #16]	; (8008b7c <WSONEdecreaseNumberOfLedOnTFT+0x6c>)
 8008b6a:	f7f9 f91f 	bl	8001dac <EF_PutString>
}
 8008b6e:	bf00      	nop
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20000034 	.word	0x20000034
 8008b78:	08017600 	.word	0x08017600
 8008b7c:	200008a4 	.word	0x200008a4
 8008b80:	08017608 	.word	0x08017608

08008b84 <increaseNumberOfWSLedOnTFT>:

void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af02      	add	r7, sp, #8
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	460a      	mov	r2, r1
 8008b8e:	71fb      	strb	r3, [r7, #7]
 8008b90:	4613      	mov	r3, r2
 8008b92:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8008b94:	79fb      	ldrb	r3, [r7, #7]
 8008b96:	2bd8      	cmp	r3, #216	; 0xd8
 8008b98:	d905      	bls.n	8008ba6 <increaseNumberOfWSLedOnTFT+0x22>
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	2bf7      	cmp	r3, #247	; 0xf7
 8008b9e:	d802      	bhi.n	8008ba6 <increaseNumberOfWSLedOnTFT+0x22>
	{
		WSONEincreaseNumberOfLedOnTFT();
 8008ba0:	f7ff ff7c 	bl	8008a9c <WSONEincreaseNumberOfLedOnTFT>
		sprintf((char*)MsgMenuTFT, "OK");
		EF_PutString(MsgMenuTFT, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 8008ba4:	e03f      	b.n	8008c26 <increaseNumberOfWSLedOnTFT+0xa2>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	2bfb      	cmp	r3, #251	; 0xfb
 8008baa:	d93c      	bls.n	8008c26 <increaseNumberOfWSLedOnTFT+0xa2>
		if(NrOfLeds < 90)
 8008bac:	4b20      	ldr	r3, [pc, #128]	; (8008c30 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	2b59      	cmp	r3, #89	; 0x59
 8008bb2:	d806      	bhi.n	8008bc2 <increaseNumberOfWSLedOnTFT+0x3e>
			NrOfLeds = NrOfLeds + 10;
 8008bb4:	4b1e      	ldr	r3, [pc, #120]	; (8008c30 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	330a      	adds	r3, #10
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	4b1c      	ldr	r3, [pc, #112]	; (8008c30 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bbe:	701a      	strb	r2, [r3, #0]
 8008bc0:	e013      	b.n	8008bea <increaseNumberOfWSLedOnTFT+0x66>
			NrOfLeds = (NrOfLeds + 10) % 99;
 8008bc2:	4b1b      	ldr	r3, [pc, #108]	; (8008c30 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	f103 020a 	add.w	r2, r3, #10
 8008bca:	4b1a      	ldr	r3, [pc, #104]	; (8008c34 <increaseNumberOfWSLedOnTFT+0xb0>)
 8008bcc:	fb83 1302 	smull	r1, r3, r3, r2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	1199      	asrs	r1, r3, #6
 8008bd4:	17d3      	asrs	r3, r2, #31
 8008bd6:	1ac9      	subs	r1, r1, r3
 8008bd8:	460b      	mov	r3, r1
 8008bda:	005b      	lsls	r3, r3, #1
 8008bdc:	440b      	add	r3, r1
 8008bde:	0159      	lsls	r1, r3, #5
 8008be0:	440b      	add	r3, r1
 8008be2:	1ad1      	subs	r1, r2, r3
 8008be4:	b2ca      	uxtb	r2, r1
 8008be6:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <increaseNumberOfWSLedOnTFT+0xac>)
 8008be8:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)MsgMenuTFT, "  %d ", NrOfLeds);
 8008bea:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	2b09      	cmp	r3, #9
 8008bf0:	d807      	bhi.n	8008c02 <increaseNumberOfWSLedOnTFT+0x7e>
 8008bf2:	4b0f      	ldr	r3, [pc, #60]	; (8008c30 <increaseNumberOfWSLedOnTFT+0xac>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	490f      	ldr	r1, [pc, #60]	; (8008c38 <increaseNumberOfWSLedOnTFT+0xb4>)
 8008bfa:	4810      	ldr	r0, [pc, #64]	; (8008c3c <increaseNumberOfWSLedOnTFT+0xb8>)
 8008bfc:	f00a fb40 	bl	8013280 <siprintf>
 8008c00:	e006      	b.n	8008c10 <increaseNumberOfWSLedOnTFT+0x8c>
	else sprintf((char*)MsgMenuTFT, " %d", NrOfLeds);
 8008c02:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <increaseNumberOfWSLedOnTFT+0xac>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	490d      	ldr	r1, [pc, #52]	; (8008c40 <increaseNumberOfWSLedOnTFT+0xbc>)
 8008c0a:	480c      	ldr	r0, [pc, #48]	; (8008c3c <increaseNumberOfWSLedOnTFT+0xb8>)
 8008c0c:	f00a fb38 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008c10:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	2301      	movs	r3, #1
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	223c      	movs	r2, #60	; 0x3c
 8008c1e:	21ac      	movs	r1, #172	; 0xac
 8008c20:	4806      	ldr	r0, [pc, #24]	; (8008c3c <increaseNumberOfWSLedOnTFT+0xb8>)
 8008c22:	f7f9 f8c3 	bl	8001dac <EF_PutString>
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000034 	.word	0x20000034
 8008c34:	a57eb503 	.word	0xa57eb503
 8008c38:	08017600 	.word	0x08017600
 8008c3c:	200008a4 	.word	0x200008a4
 8008c40:	08017608 	.word	0x08017608

08008c44 <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	460a      	mov	r2, r1
 8008c4e:	71fb      	strb	r3, [r7, #7]
 8008c50:	4613      	mov	r3, r2
 8008c52:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8008c54:	79bb      	ldrb	r3, [r7, #6]
 8008c56:	2b5e      	cmp	r3, #94	; 0x5e
 8008c58:	d91e      	bls.n	8008c98 <changeTypeOfWSLights+0x54>
 8008c5a:	79bb      	ldrb	r3, [r7, #6]
 8008c5c:	2b74      	cmp	r3, #116	; 0x74
 8008c5e:	d81b      	bhi.n	8008c98 <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008c60:	79fb      	ldrb	r3, [r7, #7]
 8008c62:	2b95      	cmp	r3, #149	; 0x95
 8008c64:	d906      	bls.n	8008c74 <changeTypeOfWSLights+0x30>
 8008c66:	79fb      	ldrb	r3, [r7, #7]
 8008c68:	2bbe      	cmp	r3, #190	; 0xbe
 8008c6a:	d803      	bhi.n	8008c74 <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 8008c6c:	201d      	movs	r0, #29
 8008c6e:	f001 fa7b 	bl	800a168 <SendComand>
 8008c72:	e010      	b.n	8008c96 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008c74:	79fb      	ldrb	r3, [r7, #7]
 8008c76:	2bc9      	cmp	r3, #201	; 0xc9
 8008c78:	d906      	bls.n	8008c88 <changeTypeOfWSLights+0x44>
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	2bf2      	cmp	r3, #242	; 0xf2
 8008c7e:	d803      	bhi.n	8008c88 <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 8008c80:	201e      	movs	r0, #30
 8008c82:	f001 fa71 	bl	800a168 <SendComand>
 8008c86:	e006      	b.n	8008c96 <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	2bfd      	cmp	r3, #253	; 0xfd
 8008c8c:	d962      	bls.n	8008d54 <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 8008c8e:	201f      	movs	r0, #31
 8008c90:	f001 fa6a 	bl	800a168 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008c94:	e05e      	b.n	8008d54 <changeTypeOfWSLights+0x110>
 8008c96:	e05d      	b.n	8008d54 <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 8008c98:	79bb      	ldrb	r3, [r7, #6]
 8008c9a:	2b7c      	cmp	r3, #124	; 0x7c
 8008c9c:	d91e      	bls.n	8008cdc <changeTypeOfWSLights+0x98>
 8008c9e:	79bb      	ldrb	r3, [r7, #6]
 8008ca0:	2b92      	cmp	r3, #146	; 0x92
 8008ca2:	d81b      	bhi.n	8008cdc <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	2b95      	cmp	r3, #149	; 0x95
 8008ca8:	d906      	bls.n	8008cb8 <changeTypeOfWSLights+0x74>
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	2bbe      	cmp	r3, #190	; 0xbe
 8008cae:	d803      	bhi.n	8008cb8 <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 8008cb0:	2020      	movs	r0, #32
 8008cb2:	f001 fa59 	bl	800a168 <SendComand>
 8008cb6:	e010      	b.n	8008cda <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	2bc9      	cmp	r3, #201	; 0xc9
 8008cbc:	d906      	bls.n	8008ccc <changeTypeOfWSLights+0x88>
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	2bf2      	cmp	r3, #242	; 0xf2
 8008cc2:	d803      	bhi.n	8008ccc <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 8008cc4:	2021      	movs	r0, #33	; 0x21
 8008cc6:	f001 fa4f 	bl	800a168 <SendComand>
 8008cca:	e006      	b.n	8008cda <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	2bfd      	cmp	r3, #253	; 0xfd
 8008cd0:	d942      	bls.n	8008d58 <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 8008cd2:	2022      	movs	r0, #34	; 0x22
 8008cd4:	f001 fa48 	bl	800a168 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008cd8:	e03e      	b.n	8008d58 <changeTypeOfWSLights+0x114>
 8008cda:	e03d      	b.n	8008d58 <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8008cdc:	79bb      	ldrb	r3, [r7, #6]
 8008cde:	2b9b      	cmp	r3, #155	; 0x9b
 8008ce0:	d91e      	bls.n	8008d20 <changeTypeOfWSLights+0xdc>
 8008ce2:	79bb      	ldrb	r3, [r7, #6]
 8008ce4:	2bb1      	cmp	r3, #177	; 0xb1
 8008ce6:	d81b      	bhi.n	8008d20 <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008ce8:	79fb      	ldrb	r3, [r7, #7]
 8008cea:	2b13      	cmp	r3, #19
 8008cec:	d906      	bls.n	8008cfc <changeTypeOfWSLights+0xb8>
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	2b64      	cmp	r3, #100	; 0x64
 8008cf2:	d803      	bhi.n	8008cfc <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 8008cf4:	2023      	movs	r0, #35	; 0x23
 8008cf6:	f001 fa37 	bl	800a168 <SendComand>
 8008cfa:	e010      	b.n	8008d1e <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008cfc:	79fb      	ldrb	r3, [r7, #7]
 8008cfe:	2b77      	cmp	r3, #119	; 0x77
 8008d00:	d906      	bls.n	8008d10 <changeTypeOfWSLights+0xcc>
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	2bc8      	cmp	r3, #200	; 0xc8
 8008d06:	d803      	bhi.n	8008d10 <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 8008d08:	201c      	movs	r0, #28
 8008d0a:	f001 fa2d 	bl	800a168 <SendComand>
 8008d0e:	e006      	b.n	8008d1e <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	2bdb      	cmp	r3, #219	; 0xdb
 8008d14:	d922      	bls.n	8008d5c <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 8008d16:	2024      	movs	r0, #36	; 0x24
 8008d18:	f001 fa26 	bl	800a168 <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008d1c:	e01e      	b.n	8008d5c <changeTypeOfWSLights+0x118>
 8008d1e:	e01d      	b.n	8008d5c <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8008d20:	79bb      	ldrb	r3, [r7, #6]
 8008d22:	2bba      	cmp	r3, #186	; 0xba
 8008d24:	d91b      	bls.n	8008d5e <changeTypeOfWSLights+0x11a>
 8008d26:	79bb      	ldrb	r3, [r7, #6]
 8008d28:	2bd0      	cmp	r3, #208	; 0xd0
 8008d2a:	d818      	bhi.n	8008d5e <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	2b45      	cmp	r3, #69	; 0x45
 8008d30:	d906      	bls.n	8008d40 <changeTypeOfWSLights+0xfc>
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	2b96      	cmp	r3, #150	; 0x96
 8008d36:	d803      	bhi.n	8008d40 <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 8008d38:	2026      	movs	r0, #38	; 0x26
 8008d3a:	f001 fa15 	bl	800a168 <SendComand>
 8008d3e:	e00e      	b.n	8008d5e <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	2ba9      	cmp	r3, #169	; 0xa9
 8008d44:	d90b      	bls.n	8008d5e <changeTypeOfWSLights+0x11a>
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	2bfa      	cmp	r3, #250	; 0xfa
 8008d4a:	d808      	bhi.n	8008d5e <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 8008d4c:	2027      	movs	r0, #39	; 0x27
 8008d4e:	f001 fa0b 	bl	800a168 <SendComand>
		}
	}
}
 8008d52:	e004      	b.n	8008d5e <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008d54:	bf00      	nop
 8008d56:	e002      	b.n	8008d5e <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008d58:	bf00      	nop
 8008d5a:	e000      	b.n	8008d5e <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008d5c:	bf00      	nop
}
 8008d5e:	bf00      	nop
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
	...

08008d68 <firstSwitchTurn>:
////////////////////////////////////////////////////////////////////
//
// Functions to change state of relays to manage switches and lights
//
void firstSwitchTurn(uint8_t NewState)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af02      	add	r7, sp, #8
 8008d6e:	4603      	mov	r3, r0
 8008d70:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d131      	bne.n	8008ddc <firstSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8008d78:	2006      	movs	r0, #6
 8008d7a:	f001 f9f5 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 8008d7e:	4932      	ldr	r1, [pc, #200]	; (8008e48 <firstSwitchTurn+0xe0>)
 8008d80:	4832      	ldr	r0, [pc, #200]	; (8008e4c <firstSwitchTurn+0xe4>)
 8008d82:	f002 f919 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008d86:	4b32      	ldr	r3, [pc, #200]	; (8008e50 <firstSwitchTurn+0xe8>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d11e      	bne.n	8008dcc <firstSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008d8e:	4831      	ldr	r0, [pc, #196]	; (8008e54 <firstSwitchTurn+0xec>)
 8008d90:	f7f8 fdf2 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008d94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	2305      	movs	r3, #5
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	2315      	movs	r3, #21
 8008da0:	2221      	movs	r2, #33	; 0x21
 8008da2:	2141      	movs	r1, #65	; 0x41
 8008da4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008da8:	f7f8 fd95 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 8008dac:	492a      	ldr	r1, [pc, #168]	; (8008e58 <firstSwitchTurn+0xf0>)
 8008dae:	482b      	ldr	r0, [pc, #172]	; (8008e5c <firstSwitchTurn+0xf4>)
 8008db0:	f00a fa66 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008db4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008db8:	9301      	str	r3, [sp, #4]
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	2243      	movs	r2, #67	; 0x43
 8008dc2:	f240 1111 	movw	r1, #273	; 0x111
 8008dc6:	4825      	ldr	r0, [pc, #148]	; (8008e5c <firstSwitchTurn+0xf4>)
 8008dc8:	f7f8 fff0 	bl	8001dac <EF_PutString>
		}
		SwitchesButtonState[0] = 0;
 8008dcc:	4b24      	ldr	r3, [pc, #144]	; (8008e60 <firstSwitchTurn+0xf8>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 0);
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	f7f9 ff53 	bl	8002c80 <EEPROM_RelayStateUpdate>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[0] = 1;
		EEPROM_RelayStateUpdate(1, 1);
	}
}
 8008dda:	e030      	b.n	8008e3e <firstSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8008ddc:	2005      	movs	r0, #5
 8008dde:	f001 f9c3 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 8008de2:	4920      	ldr	r1, [pc, #128]	; (8008e64 <firstSwitchTurn+0xfc>)
 8008de4:	4819      	ldr	r0, [pc, #100]	; (8008e4c <firstSwitchTurn+0xe4>)
 8008de6:	f002 f8e7 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008dea:	4b19      	ldr	r3, [pc, #100]	; (8008e50 <firstSwitchTurn+0xe8>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d11e      	bne.n	8008e30 <firstSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008df2:	4818      	ldr	r0, [pc, #96]	; (8008e54 <firstSwitchTurn+0xec>)
 8008df4:	f7f8 fdc0 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008df8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	2305      	movs	r3, #5
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	2315      	movs	r3, #21
 8008e04:	2221      	movs	r2, #33	; 0x21
 8008e06:	2141      	movs	r1, #65	; 0x41
 8008e08:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008e0c:	f7f8 fd63 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 8008e10:	4915      	ldr	r1, [pc, #84]	; (8008e68 <firstSwitchTurn+0x100>)
 8008e12:	4812      	ldr	r0, [pc, #72]	; (8008e5c <firstSwitchTurn+0xf4>)
 8008e14:	f00a fa34 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008e18:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008e1c:	9301      	str	r3, [sp, #4]
 8008e1e:	2300      	movs	r3, #0
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	2300      	movs	r3, #0
 8008e24:	2243      	movs	r2, #67	; 0x43
 8008e26:	f240 1111 	movw	r1, #273	; 0x111
 8008e2a:	480c      	ldr	r0, [pc, #48]	; (8008e5c <firstSwitchTurn+0xf4>)
 8008e2c:	f7f8 ffbe 	bl	8001dac <EF_PutString>
		SwitchesButtonState[0] = 1;
 8008e30:	4b0b      	ldr	r3, [pc, #44]	; (8008e60 <firstSwitchTurn+0xf8>)
 8008e32:	2201      	movs	r2, #1
 8008e34:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 1);
 8008e36:	2101      	movs	r1, #1
 8008e38:	2001      	movs	r0, #1
 8008e3a:	f7f9 ff21 	bl	8002c80 <EEPROM_RelayStateUpdate>
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	0801760c 	.word	0x0801760c
 8008e4c:	20000654 	.word	0x20000654
 8008e50:	200008e8 	.word	0x200008e8
 8008e54:	08028c04 	.word	0x08028c04
 8008e58:	080175ec 	.word	0x080175ec
 8008e5c:	200008a4 	.word	0x200008a4
 8008e60:	20000944 	.word	0x20000944
 8008e64:	08017618 	.word	0x08017618
 8008e68:	080175f0 	.word	0x080175f0

08008e6c <secondSwitchTurn>:
void secondSwitchTurn(uint8_t NewState)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af02      	add	r7, sp, #8
 8008e72:	4603      	mov	r3, r0
 8008e74:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008e76:	79fb      	ldrb	r3, [r7, #7]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d131      	bne.n	8008ee0 <secondSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8008e7c:	2008      	movs	r0, #8
 8008e7e:	f001 f973 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 8008e82:	4932      	ldr	r1, [pc, #200]	; (8008f4c <secondSwitchTurn+0xe0>)
 8008e84:	4832      	ldr	r0, [pc, #200]	; (8008f50 <secondSwitchTurn+0xe4>)
 8008e86:	f002 f897 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008e8a:	4b32      	ldr	r3, [pc, #200]	; (8008f54 <secondSwitchTurn+0xe8>)
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d11e      	bne.n	8008ed0 <secondSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008e92:	4831      	ldr	r0, [pc, #196]	; (8008f58 <secondSwitchTurn+0xec>)
 8008e94:	f7f8 fd70 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008e98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	2305      	movs	r3, #5
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	2315      	movs	r3, #21
 8008ea4:	2221      	movs	r2, #33	; 0x21
 8008ea6:	215f      	movs	r1, #95	; 0x5f
 8008ea8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008eac:	f7f8 fd13 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 8008eb0:	492a      	ldr	r1, [pc, #168]	; (8008f5c <secondSwitchTurn+0xf0>)
 8008eb2:	482b      	ldr	r0, [pc, #172]	; (8008f60 <secondSwitchTurn+0xf4>)
 8008eb4:	f00a f9e4 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008eb8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	2261      	movs	r2, #97	; 0x61
 8008ec6:	f240 1111 	movw	r1, #273	; 0x111
 8008eca:	4825      	ldr	r0, [pc, #148]	; (8008f60 <secondSwitchTurn+0xf4>)
 8008ecc:	f7f8 ff6e 	bl	8001dac <EF_PutString>
		}
		SwitchesButtonState[1] = 0;
 8008ed0:	4b24      	ldr	r3, [pc, #144]	; (8008f64 <secondSwitchTurn+0xf8>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 0);
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	2002      	movs	r0, #2
 8008eda:	f7f9 fed1 	bl	8002c80 <EEPROM_RelayStateUpdate>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[1] = 1;
		EEPROM_RelayStateUpdate(2, 1);
	}
}
 8008ede:	e030      	b.n	8008f42 <secondSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8008ee0:	2007      	movs	r0, #7
 8008ee2:	f001 f941 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 8008ee6:	4920      	ldr	r1, [pc, #128]	; (8008f68 <secondSwitchTurn+0xfc>)
 8008ee8:	4819      	ldr	r0, [pc, #100]	; (8008f50 <secondSwitchTurn+0xe4>)
 8008eea:	f002 f865 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008eee:	4b19      	ldr	r3, [pc, #100]	; (8008f54 <secondSwitchTurn+0xe8>)
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d11e      	bne.n	8008f34 <secondSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008ef6:	4818      	ldr	r0, [pc, #96]	; (8008f58 <secondSwitchTurn+0xec>)
 8008ef8:	f7f8 fd3e 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008efc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	2305      	movs	r3, #5
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	2315      	movs	r3, #21
 8008f08:	2221      	movs	r2, #33	; 0x21
 8008f0a:	215f      	movs	r1, #95	; 0x5f
 8008f0c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008f10:	f7f8 fce1 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 8008f14:	4915      	ldr	r1, [pc, #84]	; (8008f6c <secondSwitchTurn+0x100>)
 8008f16:	4812      	ldr	r0, [pc, #72]	; (8008f60 <secondSwitchTurn+0xf4>)
 8008f18:	f00a f9b2 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008f1c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	2300      	movs	r3, #0
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	2300      	movs	r3, #0
 8008f28:	2261      	movs	r2, #97	; 0x61
 8008f2a:	f240 1111 	movw	r1, #273	; 0x111
 8008f2e:	480c      	ldr	r0, [pc, #48]	; (8008f60 <secondSwitchTurn+0xf4>)
 8008f30:	f7f8 ff3c 	bl	8001dac <EF_PutString>
		SwitchesButtonState[1] = 1;
 8008f34:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <secondSwitchTurn+0xf8>)
 8008f36:	2201      	movs	r2, #1
 8008f38:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 1);
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	2002      	movs	r0, #2
 8008f3e:	f7f9 fe9f 	bl	8002c80 <EEPROM_RelayStateUpdate>
}
 8008f42:	bf00      	nop
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	08017624 	.word	0x08017624
 8008f50:	20000654 	.word	0x20000654
 8008f54:	200008e8 	.word	0x200008e8
 8008f58:	08028c04 	.word	0x08028c04
 8008f5c:	080175ec 	.word	0x080175ec
 8008f60:	200008a4 	.word	0x200008a4
 8008f64:	20000944 	.word	0x20000944
 8008f68:	08017630 	.word	0x08017630
 8008f6c:	080175f0 	.word	0x080175f0

08008f70 <thirdSwitchTurn>:
void thirdSwitchTurn(uint8_t NewState)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af02      	add	r7, sp, #8
 8008f76:	4603      	mov	r3, r0
 8008f78:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008f7a:	79fb      	ldrb	r3, [r7, #7]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d131      	bne.n	8008fe4 <thirdSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8008f80:	200a      	movs	r0, #10
 8008f82:	f001 f8f1 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 8008f86:	4932      	ldr	r1, [pc, #200]	; (8009050 <thirdSwitchTurn+0xe0>)
 8008f88:	4832      	ldr	r0, [pc, #200]	; (8009054 <thirdSwitchTurn+0xe4>)
 8008f8a:	f002 f815 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008f8e:	4b32      	ldr	r3, [pc, #200]	; (8009058 <thirdSwitchTurn+0xe8>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d11e      	bne.n	8008fd4 <thirdSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8008f96:	4831      	ldr	r0, [pc, #196]	; (800905c <thirdSwitchTurn+0xec>)
 8008f98:	f7f8 fcee 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008f9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	2305      	movs	r3, #5
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	2315      	movs	r3, #21
 8008fa8:	2221      	movs	r2, #33	; 0x21
 8008faa:	217d      	movs	r1, #125	; 0x7d
 8008fac:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008fb0:	f7f8 fc91 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 8008fb4:	492a      	ldr	r1, [pc, #168]	; (8009060 <thirdSwitchTurn+0xf0>)
 8008fb6:	482b      	ldr	r0, [pc, #172]	; (8009064 <thirdSwitchTurn+0xf4>)
 8008fb8:	f00a f962 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008fbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008fc0:	9301      	str	r3, [sp, #4]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	227f      	movs	r2, #127	; 0x7f
 8008fca:	f240 1111 	movw	r1, #273	; 0x111
 8008fce:	4825      	ldr	r0, [pc, #148]	; (8009064 <thirdSwitchTurn+0xf4>)
 8008fd0:	f7f8 feec 	bl	8001dac <EF_PutString>
		}
		SwitchesButtonState[2] = 0;
 8008fd4:	4b24      	ldr	r3, [pc, #144]	; (8009068 <thirdSwitchTurn+0xf8>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 0);
 8008fda:	2100      	movs	r1, #0
 8008fdc:	2003      	movs	r0, #3
 8008fde:	f7f9 fe4f 	bl	8002c80 <EEPROM_RelayStateUpdate>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[2] = 1;
		EEPROM_RelayStateUpdate(3, 1);
	}
}
 8008fe2:	e030      	b.n	8009046 <thirdSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8008fe4:	2009      	movs	r0, #9
 8008fe6:	f001 f8bf 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 8008fea:	4920      	ldr	r1, [pc, #128]	; (800906c <thirdSwitchTurn+0xfc>)
 8008fec:	4819      	ldr	r0, [pc, #100]	; (8009054 <thirdSwitchTurn+0xe4>)
 8008fee:	f001 ffe3 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8008ff2:	4b19      	ldr	r3, [pc, #100]	; (8009058 <thirdSwitchTurn+0xe8>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d11e      	bne.n	8009038 <thirdSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 8008ffa:	4818      	ldr	r0, [pc, #96]	; (800905c <thirdSwitchTurn+0xec>)
 8008ffc:	f7f8 fcbc 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8009000:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009004:	9301      	str	r3, [sp, #4]
 8009006:	2305      	movs	r3, #5
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	2315      	movs	r3, #21
 800900c:	2221      	movs	r2, #33	; 0x21
 800900e:	217d      	movs	r1, #125	; 0x7d
 8009010:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8009014:	f7f8 fc5f 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 8009018:	4915      	ldr	r1, [pc, #84]	; (8009070 <thirdSwitchTurn+0x100>)
 800901a:	4812      	ldr	r0, [pc, #72]	; (8009064 <thirdSwitchTurn+0xf4>)
 800901c:	f00a f930 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8009020:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	2300      	movs	r3, #0
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	2300      	movs	r3, #0
 800902c:	227f      	movs	r2, #127	; 0x7f
 800902e:	f240 1111 	movw	r1, #273	; 0x111
 8009032:	480c      	ldr	r0, [pc, #48]	; (8009064 <thirdSwitchTurn+0xf4>)
 8009034:	f7f8 feba 	bl	8001dac <EF_PutString>
		SwitchesButtonState[2] = 1;
 8009038:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <thirdSwitchTurn+0xf8>)
 800903a:	2201      	movs	r2, #1
 800903c:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 1);
 800903e:	2101      	movs	r1, #1
 8009040:	2003      	movs	r0, #3
 8009042:	f7f9 fe1d 	bl	8002c80 <EEPROM_RelayStateUpdate>
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	0801763c 	.word	0x0801763c
 8009054:	20000654 	.word	0x20000654
 8009058:	200008e8 	.word	0x200008e8
 800905c:	08028c04 	.word	0x08028c04
 8009060:	080175ec 	.word	0x080175ec
 8009064:	200008a4 	.word	0x200008a4
 8009068:	20000944 	.word	0x20000944
 800906c:	08017648 	.word	0x08017648
 8009070:	080175f0 	.word	0x080175f0

08009074 <fourthSwitchTurn>:
void fourthSwitchTurn(uint8_t NewState)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af02      	add	r7, sp, #8
 800907a:	4603      	mov	r3, r0
 800907c:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d131      	bne.n	80090e8 <fourthSwitchTurn+0x74>
	{
		SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8009084:	200c      	movs	r0, #12
 8009086:	f001 f86f 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 800908a:	4932      	ldr	r1, [pc, #200]	; (8009154 <fourthSwitchTurn+0xe0>)
 800908c:	4832      	ldr	r0, [pc, #200]	; (8009158 <fourthSwitchTurn+0xe4>)
 800908e:	f001 ff93 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 8009092:	4b32      	ldr	r3, [pc, #200]	; (800915c <fourthSwitchTurn+0xe8>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d11e      	bne.n	80090d8 <fourthSwitchTurn+0x64>
		{
			EF_SetFont(&arial_11ptFontInfo);
 800909a:	4831      	ldr	r0, [pc, #196]	; (8009160 <fourthSwitchTurn+0xec>)
 800909c:	f7f8 fc6c 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80090a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	2305      	movs	r3, #5
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	2315      	movs	r3, #21
 80090ac:	2221      	movs	r2, #33	; 0x21
 80090ae:	219b      	movs	r1, #155	; 0x9b
 80090b0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80090b4:	f7f8 fc0f 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 80090b8:	492a      	ldr	r1, [pc, #168]	; (8009164 <fourthSwitchTurn+0xf0>)
 80090ba:	482b      	ldr	r0, [pc, #172]	; (8009168 <fourthSwitchTurn+0xf4>)
 80090bc:	f00a f8e0 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80090c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80090c4:	9301      	str	r3, [sp, #4]
 80090c6:	2300      	movs	r3, #0
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	2300      	movs	r3, #0
 80090cc:	229d      	movs	r2, #157	; 0x9d
 80090ce:	f240 1111 	movw	r1, #273	; 0x111
 80090d2:	4825      	ldr	r0, [pc, #148]	; (8009168 <fourthSwitchTurn+0xf4>)
 80090d4:	f7f8 fe6a 	bl	8001dac <EF_PutString>
		}
		SwitchesButtonState[3] = 0;
 80090d8:	4b24      	ldr	r3, [pc, #144]	; (800916c <fourthSwitchTurn+0xf8>)
 80090da:	2200      	movs	r2, #0
 80090dc:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 0);
 80090de:	2100      	movs	r1, #0
 80090e0:	2004      	movs	r0, #4
 80090e2:	f7f9 fdcd 	bl	8002c80 <EEPROM_RelayStateUpdate>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		}
		SwitchesButtonState[3] = 1;
		EEPROM_RelayStateUpdate(4, 1);
	}
}
 80090e6:	e030      	b.n	800914a <fourthSwitchTurn+0xd6>
		SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 80090e8:	200b      	movs	r0, #11
 80090ea:	f001 f83d 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 80090ee:	4920      	ldr	r1, [pc, #128]	; (8009170 <fourthSwitchTurn+0xfc>)
 80090f0:	4819      	ldr	r0, [pc, #100]	; (8009158 <fourthSwitchTurn+0xe4>)
 80090f2:	f001 ff61 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_SWITCH == State)
 80090f6:	4b19      	ldr	r3, [pc, #100]	; (800915c <fourthSwitchTurn+0xe8>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d11e      	bne.n	800913c <fourthSwitchTurn+0xc8>
			EF_SetFont(&arial_11ptFontInfo);
 80090fe:	4818      	ldr	r0, [pc, #96]	; (8009160 <fourthSwitchTurn+0xec>)
 8009100:	f7f8 fc3a 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8009104:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009108:	9301      	str	r3, [sp, #4]
 800910a:	2305      	movs	r3, #5
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	2315      	movs	r3, #21
 8009110:	2221      	movs	r2, #33	; 0x21
 8009112:	219b      	movs	r1, #155	; 0x9b
 8009114:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8009118:	f7f8 fbdd 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 800911c:	4915      	ldr	r1, [pc, #84]	; (8009174 <fourthSwitchTurn+0x100>)
 800911e:	4812      	ldr	r0, [pc, #72]	; (8009168 <fourthSwitchTurn+0xf4>)
 8009120:	f00a f8ae 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8009124:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	2300      	movs	r3, #0
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	2300      	movs	r3, #0
 8009130:	229d      	movs	r2, #157	; 0x9d
 8009132:	f240 1111 	movw	r1, #273	; 0x111
 8009136:	480c      	ldr	r0, [pc, #48]	; (8009168 <fourthSwitchTurn+0xf4>)
 8009138:	f7f8 fe38 	bl	8001dac <EF_PutString>
		SwitchesButtonState[3] = 1;
 800913c:	4b0b      	ldr	r3, [pc, #44]	; (800916c <fourthSwitchTurn+0xf8>)
 800913e:	2201      	movs	r2, #1
 8009140:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 1);
 8009142:	2101      	movs	r1, #1
 8009144:	2004      	movs	r0, #4
 8009146:	f7f9 fd9b 	bl	8002c80 <EEPROM_RelayStateUpdate>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	08017654 	.word	0x08017654
 8009158:	20000654 	.word	0x20000654
 800915c:	200008e8 	.word	0x200008e8
 8009160:	08028c04 	.word	0x08028c04
 8009164:	080175ec 	.word	0x080175ec
 8009168:	200008a4 	.word	0x200008a4
 800916c:	20000944 	.word	0x20000944
 8009170:	08017660 	.word	0x08017660
 8009174:	080175f0 	.word	0x080175f0

08009178 <firstLightTurn>:


void firstLightTurn(uint8_t NewState)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af02      	add	r7, sp, #8
 800917e:	4603      	mov	r3, r0
 8009180:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8009182:	79fb      	ldrb	r3, [r7, #7]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d12f      	bne.n	80091e8 <firstLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8009188:	200e      	movs	r0, #14
 800918a:	f000 ffed 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 800918e:	4930      	ldr	r1, [pc, #192]	; (8009250 <firstLightTurn+0xd8>)
 8009190:	4830      	ldr	r0, [pc, #192]	; (8009254 <firstLightTurn+0xdc>)
 8009192:	f001 ff11 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8009196:	4b30      	ldr	r3, [pc, #192]	; (8009258 <firstLightTurn+0xe0>)
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	2b05      	cmp	r3, #5
 800919c:	d11c      	bne.n	80091d8 <firstLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 800919e:	482f      	ldr	r0, [pc, #188]	; (800925c <firstLightTurn+0xe4>)
 80091a0:	f7f8 fbea 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80091a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80091a8:	9301      	str	r3, [sp, #4]
 80091aa:	2305      	movs	r3, #5
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	2315      	movs	r3, #21
 80091b0:	2221      	movs	r2, #33	; 0x21
 80091b2:	2141      	movs	r1, #65	; 0x41
 80091b4:	20c8      	movs	r0, #200	; 0xc8
 80091b6:	f7f8 fb8e 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 80091ba:	4929      	ldr	r1, [pc, #164]	; (8009260 <firstLightTurn+0xe8>)
 80091bc:	4829      	ldr	r0, [pc, #164]	; (8009264 <firstLightTurn+0xec>)
 80091be:	f00a f85f 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80091c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	2300      	movs	r3, #0
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	2300      	movs	r3, #0
 80091ce:	2243      	movs	r2, #67	; 0x43
 80091d0:	21cb      	movs	r1, #203	; 0xcb
 80091d2:	4824      	ldr	r0, [pc, #144]	; (8009264 <firstLightTurn+0xec>)
 80091d4:	f7f8 fdea 	bl	8001dac <EF_PutString>
		}
		LightsButtonState[0] = 0;
 80091d8:	4b23      	ldr	r3, [pc, #140]	; (8009268 <firstLightTurn+0xf0>)
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 0);
 80091de:	2100      	movs	r1, #0
 80091e0:	2001      	movs	r0, #1
 80091e2:	f7f9 fd86 	bl	8002cf2 <EEPROM_LightStateUpdate>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[0] = 1;
		EEPROM_LightStateUpdate(1, 1);
	}
}
 80091e6:	e02e      	b.n	8009246 <firstLightTurn+0xce>
		SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 80091e8:	200d      	movs	r0, #13
 80091ea:	f000 ffbd 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 80091ee:	491f      	ldr	r1, [pc, #124]	; (800926c <firstLightTurn+0xf4>)
 80091f0:	4818      	ldr	r0, [pc, #96]	; (8009254 <firstLightTurn+0xdc>)
 80091f2:	f001 fee1 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80091f6:	4b18      	ldr	r3, [pc, #96]	; (8009258 <firstLightTurn+0xe0>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	2b05      	cmp	r3, #5
 80091fc:	d11c      	bne.n	8009238 <firstLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 80091fe:	4817      	ldr	r0, [pc, #92]	; (800925c <firstLightTurn+0xe4>)
 8009200:	f7f8 fbba 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8009204:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	2305      	movs	r3, #5
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	2315      	movs	r3, #21
 8009210:	2221      	movs	r2, #33	; 0x21
 8009212:	2141      	movs	r1, #65	; 0x41
 8009214:	20c8      	movs	r0, #200	; 0xc8
 8009216:	f7f8 fb5e 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 800921a:	4915      	ldr	r1, [pc, #84]	; (8009270 <firstLightTurn+0xf8>)
 800921c:	4811      	ldr	r0, [pc, #68]	; (8009264 <firstLightTurn+0xec>)
 800921e:	f00a f82f 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8009222:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	2300      	movs	r3, #0
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	2300      	movs	r3, #0
 800922e:	2243      	movs	r2, #67	; 0x43
 8009230:	21cb      	movs	r1, #203	; 0xcb
 8009232:	480c      	ldr	r0, [pc, #48]	; (8009264 <firstLightTurn+0xec>)
 8009234:	f7f8 fdba 	bl	8001dac <EF_PutString>
		LightsButtonState[0] = 1;
 8009238:	4b0b      	ldr	r3, [pc, #44]	; (8009268 <firstLightTurn+0xf0>)
 800923a:	2201      	movs	r2, #1
 800923c:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 1);
 800923e:	2101      	movs	r1, #1
 8009240:	2001      	movs	r0, #1
 8009242:	f7f9 fd56 	bl	8002cf2 <EEPROM_LightStateUpdate>
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	0801766c 	.word	0x0801766c
 8009254:	20000654 	.word	0x20000654
 8009258:	200008e8 	.word	0x200008e8
 800925c:	08028c04 	.word	0x08028c04
 8009260:	080175ec 	.word	0x080175ec
 8009264:	200008a4 	.word	0x200008a4
 8009268:	20000948 	.word	0x20000948
 800926c:	08017678 	.word	0x08017678
 8009270:	080175f0 	.word	0x080175f0

08009274 <secondLightTurn>:
void secondLightTurn(uint8_t NewState)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af02      	add	r7, sp, #8
 800927a:	4603      	mov	r3, r0
 800927c:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d12f      	bne.n	80092e4 <secondLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8009284:	2010      	movs	r0, #16
 8009286:	f000 ff6f 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 800928a:	4930      	ldr	r1, [pc, #192]	; (800934c <secondLightTurn+0xd8>)
 800928c:	4830      	ldr	r0, [pc, #192]	; (8009350 <secondLightTurn+0xdc>)
 800928e:	f001 fe93 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 8009292:	4b30      	ldr	r3, [pc, #192]	; (8009354 <secondLightTurn+0xe0>)
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	2b05      	cmp	r3, #5
 8009298:	d11c      	bne.n	80092d4 <secondLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 800929a:	482f      	ldr	r0, [pc, #188]	; (8009358 <secondLightTurn+0xe4>)
 800929c:	f7f8 fb6c 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80092a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	2305      	movs	r3, #5
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	2315      	movs	r3, #21
 80092ac:	2221      	movs	r2, #33	; 0x21
 80092ae:	215f      	movs	r1, #95	; 0x5f
 80092b0:	20c8      	movs	r0, #200	; 0xc8
 80092b2:	f7f8 fb10 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 80092b6:	4929      	ldr	r1, [pc, #164]	; (800935c <secondLightTurn+0xe8>)
 80092b8:	4829      	ldr	r0, [pc, #164]	; (8009360 <secondLightTurn+0xec>)
 80092ba:	f009 ffe1 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80092be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	2300      	movs	r3, #0
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	2300      	movs	r3, #0
 80092ca:	2261      	movs	r2, #97	; 0x61
 80092cc:	21cb      	movs	r1, #203	; 0xcb
 80092ce:	4824      	ldr	r0, [pc, #144]	; (8009360 <secondLightTurn+0xec>)
 80092d0:	f7f8 fd6c 	bl	8001dac <EF_PutString>
		}
		LightsButtonState[1] = 0;
 80092d4:	4b23      	ldr	r3, [pc, #140]	; (8009364 <secondLightTurn+0xf0>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 0);
 80092da:	2100      	movs	r1, #0
 80092dc:	2002      	movs	r0, #2
 80092de:	f7f9 fd08 	bl	8002cf2 <EEPROM_LightStateUpdate>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[1] = 1;
		EEPROM_LightStateUpdate(2, 1);
	}
}
 80092e2:	e02e      	b.n	8009342 <secondLightTurn+0xce>
		SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 80092e4:	200f      	movs	r0, #15
 80092e6:	f000 ff3f 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 80092ea:	491f      	ldr	r1, [pc, #124]	; (8009368 <secondLightTurn+0xf4>)
 80092ec:	4818      	ldr	r0, [pc, #96]	; (8009350 <secondLightTurn+0xdc>)
 80092ee:	f001 fe63 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80092f2:	4b18      	ldr	r3, [pc, #96]	; (8009354 <secondLightTurn+0xe0>)
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	2b05      	cmp	r3, #5
 80092f8:	d11c      	bne.n	8009334 <secondLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 80092fa:	4817      	ldr	r0, [pc, #92]	; (8009358 <secondLightTurn+0xe4>)
 80092fc:	f7f8 fb3c 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8009300:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	2305      	movs	r3, #5
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	2315      	movs	r3, #21
 800930c:	2221      	movs	r2, #33	; 0x21
 800930e:	215f      	movs	r1, #95	; 0x5f
 8009310:	20c8      	movs	r0, #200	; 0xc8
 8009312:	f7f8 fae0 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 8009316:	4915      	ldr	r1, [pc, #84]	; (800936c <secondLightTurn+0xf8>)
 8009318:	4811      	ldr	r0, [pc, #68]	; (8009360 <secondLightTurn+0xec>)
 800931a:	f009 ffb1 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800931e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8009322:	9301      	str	r3, [sp, #4]
 8009324:	2300      	movs	r3, #0
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	2300      	movs	r3, #0
 800932a:	2261      	movs	r2, #97	; 0x61
 800932c:	21cb      	movs	r1, #203	; 0xcb
 800932e:	480c      	ldr	r0, [pc, #48]	; (8009360 <secondLightTurn+0xec>)
 8009330:	f7f8 fd3c 	bl	8001dac <EF_PutString>
		LightsButtonState[1] = 1;
 8009334:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <secondLightTurn+0xf0>)
 8009336:	2201      	movs	r2, #1
 8009338:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 1);
 800933a:	2101      	movs	r1, #1
 800933c:	2002      	movs	r0, #2
 800933e:	f7f9 fcd8 	bl	8002cf2 <EEPROM_LightStateUpdate>
}
 8009342:	bf00      	nop
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	08017684 	.word	0x08017684
 8009350:	20000654 	.word	0x20000654
 8009354:	200008e8 	.word	0x200008e8
 8009358:	08028c04 	.word	0x08028c04
 800935c:	080175ec 	.word	0x080175ec
 8009360:	200008a4 	.word	0x200008a4
 8009364:	20000948 	.word	0x20000948
 8009368:	08017690 	.word	0x08017690
 800936c:	080175f0 	.word	0x080175f0

08009370 <thirdLightTurn>:
void thirdLightTurn(uint8_t NewState)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af02      	add	r7, sp, #8
 8009376:	4603      	mov	r3, r0
 8009378:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d12f      	bne.n	80093e0 <thirdLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 8009380:	2012      	movs	r0, #18
 8009382:	f000 fef1 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 8009386:	4930      	ldr	r1, [pc, #192]	; (8009448 <thirdLightTurn+0xd8>)
 8009388:	4830      	ldr	r0, [pc, #192]	; (800944c <thirdLightTurn+0xdc>)
 800938a:	f001 fe15 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 800938e:	4b30      	ldr	r3, [pc, #192]	; (8009450 <thirdLightTurn+0xe0>)
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b05      	cmp	r3, #5
 8009394:	d11c      	bne.n	80093d0 <thirdLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8009396:	482f      	ldr	r0, [pc, #188]	; (8009454 <thirdLightTurn+0xe4>)
 8009398:	f7f8 faee 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800939c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	2305      	movs	r3, #5
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	2315      	movs	r3, #21
 80093a8:	2221      	movs	r2, #33	; 0x21
 80093aa:	217d      	movs	r1, #125	; 0x7d
 80093ac:	20c8      	movs	r0, #200	; 0xc8
 80093ae:	f7f8 fa92 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 80093b2:	4929      	ldr	r1, [pc, #164]	; (8009458 <thirdLightTurn+0xe8>)
 80093b4:	4829      	ldr	r0, [pc, #164]	; (800945c <thirdLightTurn+0xec>)
 80093b6:	f009 ff63 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80093ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80093be:	9301      	str	r3, [sp, #4]
 80093c0:	2300      	movs	r3, #0
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	2300      	movs	r3, #0
 80093c6:	227f      	movs	r2, #127	; 0x7f
 80093c8:	21cb      	movs	r1, #203	; 0xcb
 80093ca:	4824      	ldr	r0, [pc, #144]	; (800945c <thirdLightTurn+0xec>)
 80093cc:	f7f8 fcee 	bl	8001dac <EF_PutString>
		}
		LightsButtonState[2] = 0;
 80093d0:	4b23      	ldr	r3, [pc, #140]	; (8009460 <thirdLightTurn+0xf0>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 0);
 80093d6:	2100      	movs	r1, #0
 80093d8:	2003      	movs	r0, #3
 80093da:	f7f9 fc8a 	bl	8002cf2 <EEPROM_LightStateUpdate>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[2] = 1;
		EEPROM_LightStateUpdate(3, 1);
	}
}
 80093de:	e02e      	b.n	800943e <thirdLightTurn+0xce>
		SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 80093e0:	2011      	movs	r0, #17
 80093e2:	f000 fec1 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 80093e6:	491f      	ldr	r1, [pc, #124]	; (8009464 <thirdLightTurn+0xf4>)
 80093e8:	4818      	ldr	r0, [pc, #96]	; (800944c <thirdLightTurn+0xdc>)
 80093ea:	f001 fde5 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80093ee:	4b18      	ldr	r3, [pc, #96]	; (8009450 <thirdLightTurn+0xe0>)
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	2b05      	cmp	r3, #5
 80093f4:	d11c      	bne.n	8009430 <thirdLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 80093f6:	4817      	ldr	r0, [pc, #92]	; (8009454 <thirdLightTurn+0xe4>)
 80093f8:	f7f8 fabe 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80093fc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	2305      	movs	r3, #5
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	2315      	movs	r3, #21
 8009408:	2221      	movs	r2, #33	; 0x21
 800940a:	217d      	movs	r1, #125	; 0x7d
 800940c:	20c8      	movs	r0, #200	; 0xc8
 800940e:	f7f8 fa62 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 8009412:	4915      	ldr	r1, [pc, #84]	; (8009468 <thirdLightTurn+0xf8>)
 8009414:	4811      	ldr	r0, [pc, #68]	; (800945c <thirdLightTurn+0xec>)
 8009416:	f009 ff33 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800941a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	2300      	movs	r3, #0
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	2300      	movs	r3, #0
 8009426:	227f      	movs	r2, #127	; 0x7f
 8009428:	21cb      	movs	r1, #203	; 0xcb
 800942a:	480c      	ldr	r0, [pc, #48]	; (800945c <thirdLightTurn+0xec>)
 800942c:	f7f8 fcbe 	bl	8001dac <EF_PutString>
		LightsButtonState[2] = 1;
 8009430:	4b0b      	ldr	r3, [pc, #44]	; (8009460 <thirdLightTurn+0xf0>)
 8009432:	2201      	movs	r2, #1
 8009434:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 1);
 8009436:	2101      	movs	r1, #1
 8009438:	2003      	movs	r0, #3
 800943a:	f7f9 fc5a 	bl	8002cf2 <EEPROM_LightStateUpdate>
}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	0801769c 	.word	0x0801769c
 800944c:	20000654 	.word	0x20000654
 8009450:	200008e8 	.word	0x200008e8
 8009454:	08028c04 	.word	0x08028c04
 8009458:	080175ec 	.word	0x080175ec
 800945c:	200008a4 	.word	0x200008a4
 8009460:	20000948 	.word	0x20000948
 8009464:	080176a8 	.word	0x080176a8
 8009468:	080175f0 	.word	0x080175f0

0800946c <fourthLightTurn>:
void fourthLightTurn(uint8_t NewState)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af02      	add	r7, sp, #8
 8009472:	4603      	mov	r3, r0
 8009474:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d12f      	bne.n	80094dc <fourthLightTurn+0x70>
	{
		SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 800947c:	2014      	movs	r0, #20
 800947e:	f000 fe73 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 8009482:	4930      	ldr	r1, [pc, #192]	; (8009544 <fourthLightTurn+0xd8>)
 8009484:	4830      	ldr	r0, [pc, #192]	; (8009548 <fourthLightTurn+0xdc>)
 8009486:	f001 fd97 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 800948a:	4b30      	ldr	r3, [pc, #192]	; (800954c <fourthLightTurn+0xe0>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	2b05      	cmp	r3, #5
 8009490:	d11c      	bne.n	80094cc <fourthLightTurn+0x60>
		{
			EF_SetFont(&arial_11ptFontInfo);
 8009492:	482f      	ldr	r0, [pc, #188]	; (8009550 <fourthLightTurn+0xe4>)
 8009494:	f7f8 fa70 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8009498:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	2305      	movs	r3, #5
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	2315      	movs	r3, #21
 80094a4:	2221      	movs	r2, #33	; 0x21
 80094a6:	219b      	movs	r1, #155	; 0x9b
 80094a8:	20c8      	movs	r0, #200	; 0xc8
 80094aa:	f7f8 fa14 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "OFF");
 80094ae:	4929      	ldr	r1, [pc, #164]	; (8009554 <fourthLightTurn+0xe8>)
 80094b0:	4829      	ldr	r0, [pc, #164]	; (8009558 <fourthLightTurn+0xec>)
 80094b2:	f009 fee5 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80094b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80094ba:	9301      	str	r3, [sp, #4]
 80094bc:	2300      	movs	r3, #0
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	2300      	movs	r3, #0
 80094c2:	229d      	movs	r2, #157	; 0x9d
 80094c4:	21cb      	movs	r1, #203	; 0xcb
 80094c6:	4824      	ldr	r0, [pc, #144]	; (8009558 <fourthLightTurn+0xec>)
 80094c8:	f7f8 fc70 	bl	8001dac <EF_PutString>
		}
		LightsButtonState[3] = 0;
 80094cc:	4b23      	ldr	r3, [pc, #140]	; (800955c <fourthLightTurn+0xf0>)
 80094ce:	2200      	movs	r2, #0
 80094d0:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 0);
 80094d2:	2100      	movs	r1, #0
 80094d4:	2004      	movs	r0, #4
 80094d6:	f7f9 fc0c 	bl	8002cf2 <EEPROM_LightStateUpdate>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		}
		LightsButtonState[3] = 1;
		EEPROM_LightStateUpdate(4, 1);
	}
}
 80094da:	e02e      	b.n	800953a <fourthLightTurn+0xce>
		SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 80094dc:	2013      	movs	r0, #19
 80094de:	f000 fe43 	bl	800a168 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 80094e2:	491f      	ldr	r1, [pc, #124]	; (8009560 <fourthLightTurn+0xf4>)
 80094e4:	4818      	ldr	r0, [pc, #96]	; (8009548 <fourthLightTurn+0xdc>)
 80094e6:	f001 fd67 	bl	800afb8 <UARTDMA_Print>
		if(MENUTFT_LIGHTS == State)
 80094ea:	4b18      	ldr	r3, [pc, #96]	; (800954c <fourthLightTurn+0xe0>)
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	2b05      	cmp	r3, #5
 80094f0:	d11c      	bne.n	800952c <fourthLightTurn+0xc0>
			EF_SetFont(&arial_11ptFontInfo);
 80094f2:	4817      	ldr	r0, [pc, #92]	; (8009550 <fourthLightTurn+0xe4>)
 80094f4:	f7f8 fa40 	bl	8001978 <EF_SetFont>
			GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80094f8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80094fc:	9301      	str	r3, [sp, #4]
 80094fe:	2305      	movs	r3, #5
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	2315      	movs	r3, #21
 8009504:	2221      	movs	r2, #33	; 0x21
 8009506:	219b      	movs	r1, #155	; 0x9b
 8009508:	20c8      	movs	r0, #200	; 0xc8
 800950a:	f7f8 f9e4 	bl	80018d6 <GFX_DrawFillRoundRectangle>
			sprintf((char*)MsgMenuTFT, "ON");
 800950e:	4915      	ldr	r1, [pc, #84]	; (8009564 <fourthLightTurn+0xf8>)
 8009510:	4811      	ldr	r0, [pc, #68]	; (8009558 <fourthLightTurn+0xec>)
 8009512:	f009 feb5 	bl	8013280 <siprintf>
			EF_PutString(MsgMenuTFT, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8009516:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800951a:	9301      	str	r3, [sp, #4]
 800951c:	2300      	movs	r3, #0
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	2300      	movs	r3, #0
 8009522:	229d      	movs	r2, #157	; 0x9d
 8009524:	21cb      	movs	r1, #203	; 0xcb
 8009526:	480c      	ldr	r0, [pc, #48]	; (8009558 <fourthLightTurn+0xec>)
 8009528:	f7f8 fc40 	bl	8001dac <EF_PutString>
		LightsButtonState[3] = 1;
 800952c:	4b0b      	ldr	r3, [pc, #44]	; (800955c <fourthLightTurn+0xf0>)
 800952e:	2201      	movs	r2, #1
 8009530:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 1);
 8009532:	2101      	movs	r1, #1
 8009534:	2004      	movs	r0, #4
 8009536:	f7f9 fbdc 	bl	8002cf2 <EEPROM_LightStateUpdate>
}
 800953a:	bf00      	nop
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	080176b4 	.word	0x080176b4
 8009548:	20000654 	.word	0x20000654
 800954c:	200008e8 	.word	0x200008e8
 8009550:	08028c04 	.word	0x08028c04
 8009554:	080175ec 	.word	0x080175ec
 8009558:	200008a4 	.word	0x200008a4
 800955c:	20000948 	.word	0x20000948
 8009560:	080176c0 	.word	0x080176c0
 8009564:	080175f0 	.word	0x080175f0

08009568 <OneMinuteIncrease>:

void OneMinuteIncrease(void)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af02      	add	r7, sp, #8
	if(Minutes < 59)
 800956e:	4b11      	ldr	r3, [pc, #68]	; (80095b4 <OneMinuteIncrease+0x4c>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	2b3a      	cmp	r3, #58	; 0x3a
 8009574:	d806      	bhi.n	8009584 <OneMinuteIncrease+0x1c>
	{
		Minutes++;
 8009576:	4b0f      	ldr	r3, [pc, #60]	; (80095b4 <OneMinuteIncrease+0x4c>)
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	3301      	adds	r3, #1
 800957c:	b2da      	uxtb	r2, r3
 800957e:	4b0d      	ldr	r3, [pc, #52]	; (80095b4 <OneMinuteIncrease+0x4c>)
 8009580:	701a      	strb	r2, [r3, #0]
 8009582:	e002      	b.n	800958a <OneMinuteIncrease+0x22>
	}
	else
	{
		Minutes = 0;
 8009584:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <OneMinuteIncrease+0x4c>)
 8009586:	2200      	movs	r2, #0
 8009588:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)MsgMenuTFT, " %d  ", Minutes);
 800958a:	4b0a      	ldr	r3, [pc, #40]	; (80095b4 <OneMinuteIncrease+0x4c>)
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	4909      	ldr	r1, [pc, #36]	; (80095b8 <OneMinuteIncrease+0x50>)
 8009592:	480a      	ldr	r0, [pc, #40]	; (80095bc <OneMinuteIncrease+0x54>)
 8009594:	f009 fe74 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009598:	f24c 6318 	movw	r3, #50712	; 0xc618
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	2301      	movs	r3, #1
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	2300      	movs	r3, #0
 80095a4:	226e      	movs	r2, #110	; 0x6e
 80095a6:	21a0      	movs	r1, #160	; 0xa0
 80095a8:	4804      	ldr	r0, [pc, #16]	; (80095bc <OneMinuteIncrease+0x54>)
 80095aa:	f7f8 fbff 	bl	8001dac <EF_PutString>
}
 80095ae:	bf00      	nop
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20000033 	.word	0x20000033
 80095b8:	080175d8 	.word	0x080175d8
 80095bc:	200008a4 	.word	0x200008a4

080095c0 <OneHourIncrease>:

void OneHourIncrease(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af02      	add	r7, sp, #8
	if(Hours < 24)
 80095c6:	4b11      	ldr	r3, [pc, #68]	; (800960c <OneHourIncrease+0x4c>)
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	2b17      	cmp	r3, #23
 80095cc:	d806      	bhi.n	80095dc <OneHourIncrease+0x1c>
	{
		Hours++;
 80095ce:	4b0f      	ldr	r3, [pc, #60]	; (800960c <OneHourIncrease+0x4c>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	3301      	adds	r3, #1
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	4b0d      	ldr	r3, [pc, #52]	; (800960c <OneHourIncrease+0x4c>)
 80095d8:	701a      	strb	r2, [r3, #0]
 80095da:	e002      	b.n	80095e2 <OneHourIncrease+0x22>
	}
	else
	{
		Hours = 1;
 80095dc:	4b0b      	ldr	r3, [pc, #44]	; (800960c <OneHourIncrease+0x4c>)
 80095de:	2201      	movs	r2, #1
 80095e0:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)MsgMenuTFT, " %d  ", Hours);
 80095e2:	4b0a      	ldr	r3, [pc, #40]	; (800960c <OneHourIncrease+0x4c>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	4909      	ldr	r1, [pc, #36]	; (8009610 <OneHourIncrease+0x50>)
 80095ea:	480a      	ldr	r0, [pc, #40]	; (8009614 <OneHourIncrease+0x54>)
 80095ec:	f009 fe48 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80095f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	2301      	movs	r3, #1
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	2300      	movs	r3, #0
 80095fc:	2246      	movs	r2, #70	; 0x46
 80095fe:	21a0      	movs	r1, #160	; 0xa0
 8009600:	4804      	ldr	r0, [pc, #16]	; (8009614 <OneHourIncrease+0x54>)
 8009602:	f7f8 fbd3 	bl	8001dac <EF_PutString>
}
 8009606:	bf00      	nop
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20000032 	.word	0x20000032
 8009610:	080175d8 	.word	0x080175d8
 8009614:	200008a4 	.word	0x200008a4

08009618 <OneDayIncrease>:

void OneDayIncrease(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af02      	add	r7, sp, #8
	if(DayOfWeek < 7)
 800961e:	4b11      	ldr	r3, [pc, #68]	; (8009664 <OneDayIncrease+0x4c>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	2b06      	cmp	r3, #6
 8009624:	d806      	bhi.n	8009634 <OneDayIncrease+0x1c>
	{
		DayOfWeek++;
 8009626:	4b0f      	ldr	r3, [pc, #60]	; (8009664 <OneDayIncrease+0x4c>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	3301      	adds	r3, #1
 800962c:	b2da      	uxtb	r2, r3
 800962e:	4b0d      	ldr	r3, [pc, #52]	; (8009664 <OneDayIncrease+0x4c>)
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	e002      	b.n	800963a <OneDayIncrease+0x22>
	}
	else
	{
		DayOfWeek = 1;
 8009634:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <OneDayIncrease+0x4c>)
 8009636:	2201      	movs	r2, #1
 8009638:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)MsgMenuTFT, "DZIEŃ TYG:  %d ", DayOfWeek);
 800963a:	4b0a      	ldr	r3, [pc, #40]	; (8009664 <OneDayIncrease+0x4c>)
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	4909      	ldr	r1, [pc, #36]	; (8009668 <OneDayIncrease+0x50>)
 8009642:	480a      	ldr	r0, [pc, #40]	; (800966c <OneDayIncrease+0x54>)
 8009644:	f009 fe1c 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009648:	f24c 6318 	movw	r3, #50712	; 0xc618
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	2301      	movs	r3, #1
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	2300      	movs	r3, #0
 8009654:	2296      	movs	r2, #150	; 0x96
 8009656:	2114      	movs	r1, #20
 8009658:	4804      	ldr	r0, [pc, #16]	; (800966c <OneDayIncrease+0x54>)
 800965a:	f7f8 fba7 	bl	8001dac <EF_PutString>
}
 800965e:	bf00      	nop
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20000031 	.word	0x20000031
 8009668:	080176cc 	.word	0x080176cc
 800966c:	200008a4 	.word	0x200008a4

08009670 <OneMinuteDecrease>:

void OneMinuteDecrease(void)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af02      	add	r7, sp, #8
	if(Minutes > 0)
 8009676:	4b11      	ldr	r3, [pc, #68]	; (80096bc <OneMinuteDecrease+0x4c>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d006      	beq.n	800968c <OneMinuteDecrease+0x1c>
	{
		Minutes--;
 800967e:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <OneMinuteDecrease+0x4c>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	3b01      	subs	r3, #1
 8009684:	b2da      	uxtb	r2, r3
 8009686:	4b0d      	ldr	r3, [pc, #52]	; (80096bc <OneMinuteDecrease+0x4c>)
 8009688:	701a      	strb	r2, [r3, #0]
 800968a:	e002      	b.n	8009692 <OneMinuteDecrease+0x22>
	}
	else
	{
		Minutes = 59;
 800968c:	4b0b      	ldr	r3, [pc, #44]	; (80096bc <OneMinuteDecrease+0x4c>)
 800968e:	223b      	movs	r2, #59	; 0x3b
 8009690:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)MsgMenuTFT, " %d  ", Minutes);
 8009692:	4b0a      	ldr	r3, [pc, #40]	; (80096bc <OneMinuteDecrease+0x4c>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	461a      	mov	r2, r3
 8009698:	4909      	ldr	r1, [pc, #36]	; (80096c0 <OneMinuteDecrease+0x50>)
 800969a:	480a      	ldr	r0, [pc, #40]	; (80096c4 <OneMinuteDecrease+0x54>)
 800969c:	f009 fdf0 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80096a0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	2301      	movs	r3, #1
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	2300      	movs	r3, #0
 80096ac:	226e      	movs	r2, #110	; 0x6e
 80096ae:	21a0      	movs	r1, #160	; 0xa0
 80096b0:	4804      	ldr	r0, [pc, #16]	; (80096c4 <OneMinuteDecrease+0x54>)
 80096b2:	f7f8 fb7b 	bl	8001dac <EF_PutString>

}
 80096b6:	bf00      	nop
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20000033 	.word	0x20000033
 80096c0:	080175d8 	.word	0x080175d8
 80096c4:	200008a4 	.word	0x200008a4

080096c8 <OneHourDecrease>:

void OneHourDecrease(void)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af02      	add	r7, sp, #8
	if(Hours > 0)
 80096ce:	4b11      	ldr	r3, [pc, #68]	; (8009714 <OneHourDecrease+0x4c>)
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d006      	beq.n	80096e4 <OneHourDecrease+0x1c>
	{
		Hours--;
 80096d6:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <OneHourDecrease+0x4c>)
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	3b01      	subs	r3, #1
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <OneHourDecrease+0x4c>)
 80096e0:	701a      	strb	r2, [r3, #0]
 80096e2:	e002      	b.n	80096ea <OneHourDecrease+0x22>
	}
	else
	{
		Hours = 24;
 80096e4:	4b0b      	ldr	r3, [pc, #44]	; (8009714 <OneHourDecrease+0x4c>)
 80096e6:	2218      	movs	r2, #24
 80096e8:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)MsgMenuTFT, " %d  ", Hours);
 80096ea:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <OneHourDecrease+0x4c>)
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	4909      	ldr	r1, [pc, #36]	; (8009718 <OneHourDecrease+0x50>)
 80096f2:	480a      	ldr	r0, [pc, #40]	; (800971c <OneHourDecrease+0x54>)
 80096f4:	f009 fdc4 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80096f8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	2301      	movs	r3, #1
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	2300      	movs	r3, #0
 8009704:	2246      	movs	r2, #70	; 0x46
 8009706:	21a0      	movs	r1, #160	; 0xa0
 8009708:	4804      	ldr	r0, [pc, #16]	; (800971c <OneHourDecrease+0x54>)
 800970a:	f7f8 fb4f 	bl	8001dac <EF_PutString>

}
 800970e:	bf00      	nop
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20000032 	.word	0x20000032
 8009718:	080175d8 	.word	0x080175d8
 800971c:	200008a4 	.word	0x200008a4

08009720 <OneDayDecrease>:

void OneDayDecrease(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af02      	add	r7, sp, #8
	if(DayOfWeek > 0)
 8009726:	4b11      	ldr	r3, [pc, #68]	; (800976c <OneDayDecrease+0x4c>)
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d006      	beq.n	800973c <OneDayDecrease+0x1c>
	{
		DayOfWeek--;
 800972e:	4b0f      	ldr	r3, [pc, #60]	; (800976c <OneDayDecrease+0x4c>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	3b01      	subs	r3, #1
 8009734:	b2da      	uxtb	r2, r3
 8009736:	4b0d      	ldr	r3, [pc, #52]	; (800976c <OneDayDecrease+0x4c>)
 8009738:	701a      	strb	r2, [r3, #0]
 800973a:	e002      	b.n	8009742 <OneDayDecrease+0x22>
	}
	else
	{
		DayOfWeek = 7;
 800973c:	4b0b      	ldr	r3, [pc, #44]	; (800976c <OneDayDecrease+0x4c>)
 800973e:	2207      	movs	r2, #7
 8009740:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*)MsgMenuTFT, "DZIEŃ TYG:  %d ", DayOfWeek);
 8009742:	4b0a      	ldr	r3, [pc, #40]	; (800976c <OneDayDecrease+0x4c>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	4909      	ldr	r1, [pc, #36]	; (8009770 <OneDayDecrease+0x50>)
 800974a:	480a      	ldr	r0, [pc, #40]	; (8009774 <OneDayDecrease+0x54>)
 800974c:	f009 fd98 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009750:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009754:	9301      	str	r3, [sp, #4]
 8009756:	2301      	movs	r3, #1
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	2300      	movs	r3, #0
 800975c:	2296      	movs	r2, #150	; 0x96
 800975e:	2114      	movs	r1, #20
 8009760:	4804      	ldr	r0, [pc, #16]	; (8009774 <OneDayDecrease+0x54>)
 8009762:	f7f8 fb23 	bl	8001dac <EF_PutString>

}
 8009766:	bf00      	nop
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000031 	.word	0x20000031
 8009770:	080176cc 	.word	0x080176cc
 8009774:	200008a4 	.word	0x200008a4

08009778 <TenSecondsActivitiesDurationIncrease>:

void TenSecondsActivitiesDurationIncrease(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af02      	add	r7, sp, #8
	if(activitiesDurationTimeInSeconds < 990)
 800977e:	4b18      	ldr	r3, [pc, #96]	; (80097e0 <TenSecondsActivitiesDurationIncrease+0x68>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f240 32dd 	movw	r2, #989	; 0x3dd
 8009786:	4293      	cmp	r3, r2
 8009788:	d805      	bhi.n	8009796 <TenSecondsActivitiesDurationIncrease+0x1e>
	{
		activitiesDurationTimeInSeconds = activitiesDurationTimeInSeconds + 10;
 800978a:	4b15      	ldr	r3, [pc, #84]	; (80097e0 <TenSecondsActivitiesDurationIncrease+0x68>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	330a      	adds	r3, #10
 8009790:	4a13      	ldr	r2, [pc, #76]	; (80097e0 <TenSecondsActivitiesDurationIncrease+0x68>)
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	e002      	b.n	800979c <TenSecondsActivitiesDurationIncrease+0x24>
	}
	else
	{
		activitiesDurationTimeInSeconds = 10;
 8009796:	4b12      	ldr	r3, [pc, #72]	; (80097e0 <TenSecondsActivitiesDurationIncrease+0x68>)
 8009798:	220a      	movs	r2, #10
 800979a:	601a      	str	r2, [r3, #0]
	}
	if(activitiesDurationTimeInSeconds < 100) sprintf((char*)MsgMenuTFT, " %ld s ", activitiesDurationTimeInSeconds);
 800979c:	4b10      	ldr	r3, [pc, #64]	; (80097e0 <TenSecondsActivitiesDurationIncrease+0x68>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b63      	cmp	r3, #99	; 0x63
 80097a2:	d807      	bhi.n	80097b4 <TenSecondsActivitiesDurationIncrease+0x3c>
 80097a4:	4b0e      	ldr	r3, [pc, #56]	; (80097e0 <TenSecondsActivitiesDurationIncrease+0x68>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	461a      	mov	r2, r3
 80097aa:	490e      	ldr	r1, [pc, #56]	; (80097e4 <TenSecondsActivitiesDurationIncrease+0x6c>)
 80097ac:	480e      	ldr	r0, [pc, #56]	; (80097e8 <TenSecondsActivitiesDurationIncrease+0x70>)
 80097ae:	f009 fd67 	bl	8013280 <siprintf>
 80097b2:	e006      	b.n	80097c2 <TenSecondsActivitiesDurationIncrease+0x4a>
	else sprintf((char*)MsgMenuTFT, "%ld s", activitiesDurationTimeInSeconds);
 80097b4:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <TenSecondsActivitiesDurationIncrease+0x68>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	461a      	mov	r2, r3
 80097ba:	490c      	ldr	r1, [pc, #48]	; (80097ec <TenSecondsActivitiesDurationIncrease+0x74>)
 80097bc:	480a      	ldr	r0, [pc, #40]	; (80097e8 <TenSecondsActivitiesDurationIncrease+0x70>)
 80097be:	f009 fd5f 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, ACTIVITIES_TIME_DURATION_NUMBER_X, ACTIVITIES_TIME_DURATION_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80097c2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80097c6:	9301      	str	r3, [sp, #4]
 80097c8:	2301      	movs	r3, #1
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	2300      	movs	r3, #0
 80097ce:	22b4      	movs	r2, #180	; 0xb4
 80097d0:	21e7      	movs	r1, #231	; 0xe7
 80097d2:	4805      	ldr	r0, [pc, #20]	; (80097e8 <TenSecondsActivitiesDurationIncrease+0x70>)
 80097d4:	f7f8 faea 	bl	8001dac <EF_PutString>
}
 80097d8:	bf00      	nop
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000898 	.word	0x20000898
 80097e4:	080176e0 	.word	0x080176e0
 80097e8:	200008a4 	.word	0x200008a4
 80097ec:	080176e8 	.word	0x080176e8

080097f0 <TenSecondsActivitiesDurationDecrease>:

void TenSecondsActivitiesDurationDecrease(void)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af02      	add	r7, sp, #8
	if(activitiesDurationTimeInSeconds > 10)
 80097f6:	4b17      	ldr	r3, [pc, #92]	; (8009854 <TenSecondsActivitiesDurationDecrease+0x64>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b0a      	cmp	r3, #10
 80097fc:	d905      	bls.n	800980a <TenSecondsActivitiesDurationDecrease+0x1a>
	{
		activitiesDurationTimeInSeconds = activitiesDurationTimeInSeconds - 10;
 80097fe:	4b15      	ldr	r3, [pc, #84]	; (8009854 <TenSecondsActivitiesDurationDecrease+0x64>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3b0a      	subs	r3, #10
 8009804:	4a13      	ldr	r2, [pc, #76]	; (8009854 <TenSecondsActivitiesDurationDecrease+0x64>)
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	e003      	b.n	8009812 <TenSecondsActivitiesDurationDecrease+0x22>
	}
	else
	{
		activitiesDurationTimeInSeconds = 990;
 800980a:	4b12      	ldr	r3, [pc, #72]	; (8009854 <TenSecondsActivitiesDurationDecrease+0x64>)
 800980c:	f240 32de 	movw	r2, #990	; 0x3de
 8009810:	601a      	str	r2, [r3, #0]
	}

	if(activitiesDurationTimeInSeconds < 100) sprintf((char*)MsgMenuTFT, " %ld s ", activitiesDurationTimeInSeconds);
 8009812:	4b10      	ldr	r3, [pc, #64]	; (8009854 <TenSecondsActivitiesDurationDecrease+0x64>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b63      	cmp	r3, #99	; 0x63
 8009818:	d807      	bhi.n	800982a <TenSecondsActivitiesDurationDecrease+0x3a>
 800981a:	4b0e      	ldr	r3, [pc, #56]	; (8009854 <TenSecondsActivitiesDurationDecrease+0x64>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	490d      	ldr	r1, [pc, #52]	; (8009858 <TenSecondsActivitiesDurationDecrease+0x68>)
 8009822:	480e      	ldr	r0, [pc, #56]	; (800985c <TenSecondsActivitiesDurationDecrease+0x6c>)
 8009824:	f009 fd2c 	bl	8013280 <siprintf>
 8009828:	e006      	b.n	8009838 <TenSecondsActivitiesDurationDecrease+0x48>
	else sprintf((char*)MsgMenuTFT, "%ld s", activitiesDurationTimeInSeconds);
 800982a:	4b0a      	ldr	r3, [pc, #40]	; (8009854 <TenSecondsActivitiesDurationDecrease+0x64>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	461a      	mov	r2, r3
 8009830:	490b      	ldr	r1, [pc, #44]	; (8009860 <TenSecondsActivitiesDurationDecrease+0x70>)
 8009832:	480a      	ldr	r0, [pc, #40]	; (800985c <TenSecondsActivitiesDurationDecrease+0x6c>)
 8009834:	f009 fd24 	bl	8013280 <siprintf>
	EF_PutString(MsgMenuTFT, ACTIVITIES_TIME_DURATION_NUMBER_X, ACTIVITIES_TIME_DURATION_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009838:	f24c 6318 	movw	r3, #50712	; 0xc618
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	2301      	movs	r3, #1
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	2300      	movs	r3, #0
 8009844:	22b4      	movs	r2, #180	; 0xb4
 8009846:	21e7      	movs	r1, #231	; 0xe7
 8009848:	4804      	ldr	r0, [pc, #16]	; (800985c <TenSecondsActivitiesDurationDecrease+0x6c>)
 800984a:	f7f8 faaf 	bl	8001dac <EF_PutString>
}
 800984e:	bf00      	nop
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	20000898 	.word	0x20000898
 8009858:	080176e0 	.word	0x080176e0
 800985c:	200008a4 	.word	0x200008a4
 8009860:	080176e8 	.word	0x080176e8

08009864 <encoderUpgrade>:

void encoderUpgrade(int16_t *EncoderCntWsk)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
	EncoderCounter = *EncoderCntWsk;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009872:	4b9d      	ldr	r3, [pc, #628]	; (8009ae8 <encoderUpgrade+0x284>)
 8009874:	801a      	strh	r2, [r3, #0]
	if(EncoderCounter != EncoderCounterPrevious) // if was rotated
 8009876:	4b9c      	ldr	r3, [pc, #624]	; (8009ae8 <encoderUpgrade+0x284>)
 8009878:	f9b3 2000 	ldrsh.w	r2, [r3]
 800987c:	4b9b      	ldr	r3, [pc, #620]	; (8009aec <encoderUpgrade+0x288>)
 800987e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009882:	429a      	cmp	r2, r3
 8009884:	f000 816d 	beq.w	8009b62 <encoderUpgrade+0x2fe>
	{
		if (EncoderCounter > EncoderCounterPrevious) // if increase
 8009888:	4b97      	ldr	r3, [pc, #604]	; (8009ae8 <encoderUpgrade+0x284>)
 800988a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800988e:	4b97      	ldr	r3, [pc, #604]	; (8009aec <encoderUpgrade+0x288>)
 8009890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009894:	429a      	cmp	r2, r3
 8009896:	f340 80ae 	ble.w	80099f6 <encoderUpgrade+0x192>
		{
			if((EncoderCounter - EncoderCounterPrevious >= 2)) // if full rotate was done
 800989a:	4b93      	ldr	r3, [pc, #588]	; (8009ae8 <encoderUpgrade+0x284>)
 800989c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098a0:	461a      	mov	r2, r3
 80098a2:	4b92      	ldr	r3, [pc, #584]	; (8009aec <encoderUpgrade+0x288>)
 80098a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	f340 8159 	ble.w	8009b62 <encoderUpgrade+0x2fe>
			{
				RotateUpgradeNumber = (EncoderCounter - EncoderCounterPrevious)/2;
 80098b0:	4b8d      	ldr	r3, [pc, #564]	; (8009ae8 <encoderUpgrade+0x284>)
 80098b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098b6:	461a      	mov	r2, r3
 80098b8:	4b8c      	ldr	r3, [pc, #560]	; (8009aec <encoderUpgrade+0x288>)
 80098ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	0fda      	lsrs	r2, r3, #31
 80098c2:	4413      	add	r3, r2
 80098c4:	105b      	asrs	r3, r3, #1
 80098c6:	b21a      	sxth	r2, r3
 80098c8:	4b89      	ldr	r3, [pc, #548]	; (8009af0 <encoderUpgrade+0x28c>)
 80098ca:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 80098cc:	2301      	movs	r3, #1
 80098ce:	73fb      	strb	r3, [r7, #15]
 80098d0:	e081      	b.n	80099d6 <encoderUpgrade+0x172>
				{
					if(EncoderState == ENCODER_IDLE)
 80098d2:	4b88      	ldr	r3, [pc, #544]	; (8009af4 <encoderUpgrade+0x290>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d120      	bne.n	800991c <encoderUpgrade+0xb8>
					{
						if(State == MENUTFT_PARAMETERS)
 80098da:	4b87      	ldr	r3, [pc, #540]	; (8009af8 <encoderUpgrade+0x294>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d106      	bne.n	80098f0 <encoderUpgrade+0x8c>
							{
							State = MENUTFT_SWITCH;
 80098e2:	4b85      	ldr	r3, [pc, #532]	; (8009af8 <encoderUpgrade+0x294>)
 80098e4:	2202      	movs	r2, #2
 80098e6:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 80098e8:	4b84      	ldr	r3, [pc, #528]	; (8009afc <encoderUpgrade+0x298>)
 80098ea:	2201      	movs	r2, #1
 80098ec:	701a      	strb	r2, [r3, #0]
 80098ee:	e06f      	b.n	80099d0 <encoderUpgrade+0x16c>
							}
						else if (State == MENUTFT_SWITCH)
 80098f0:	4b81      	ldr	r3, [pc, #516]	; (8009af8 <encoderUpgrade+0x294>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d106      	bne.n	8009906 <encoderUpgrade+0xa2>
						{
							State = MENUTFT_LIGHTS;
 80098f8:	4b7f      	ldr	r3, [pc, #508]	; (8009af8 <encoderUpgrade+0x294>)
 80098fa:	2205      	movs	r2, #5
 80098fc:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 80098fe:	4b7f      	ldr	r3, [pc, #508]	; (8009afc <encoderUpgrade+0x298>)
 8009900:	2201      	movs	r2, #1
 8009902:	701a      	strb	r2, [r3, #0]
 8009904:	e064      	b.n	80099d0 <encoderUpgrade+0x16c>
						}
						else if (State == MENUTFT_LIGHTS)
 8009906:	4b7c      	ldr	r3, [pc, #496]	; (8009af8 <encoderUpgrade+0x294>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	2b05      	cmp	r3, #5
 800990c:	d160      	bne.n	80099d0 <encoderUpgrade+0x16c>
							{
							State = MENUTFT_PARAMETERS;
 800990e:	4b7a      	ldr	r3, [pc, #488]	; (8009af8 <encoderUpgrade+0x294>)
 8009910:	2201      	movs	r2, #1
 8009912:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009914:	4b79      	ldr	r3, [pc, #484]	; (8009afc <encoderUpgrade+0x298>)
 8009916:	2201      	movs	r2, #1
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	e059      	b.n	80099d0 <encoderUpgrade+0x16c>
							}
					}
					else if(EncoderState == ENCODER_CLOCK_MINUTE)
 800991c:	4b75      	ldr	r3, [pc, #468]	; (8009af4 <encoderUpgrade+0x290>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b02      	cmp	r3, #2
 8009922:	d102      	bne.n	800992a <encoderUpgrade+0xc6>
					{
						OneMinuteIncrease();
 8009924:	f7ff fe20 	bl	8009568 <OneMinuteIncrease>
 8009928:	e052      	b.n	80099d0 <encoderUpgrade+0x16c>
					}
					else if(EncoderState == ENCODER_CLOCK_HOUR)
 800992a:	4b72      	ldr	r3, [pc, #456]	; (8009af4 <encoderUpgrade+0x290>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d102      	bne.n	8009938 <encoderUpgrade+0xd4>
					{
						OneHourIncrease();
 8009932:	f7ff fe45 	bl	80095c0 <OneHourIncrease>
 8009936:	e04b      	b.n	80099d0 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_CLOCK_DAY)
 8009938:	4b6e      	ldr	r3, [pc, #440]	; (8009af4 <encoderUpgrade+0x290>)
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2b03      	cmp	r3, #3
 800993e:	d102      	bne.n	8009946 <encoderUpgrade+0xe2>
					{
						OneDayIncrease();
 8009940:	f7ff fe6a 	bl	8009618 <OneDayIncrease>
 8009944:	e044      	b.n	80099d0 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_WS_LED)
 8009946:	4b6b      	ldr	r3, [pc, #428]	; (8009af4 <encoderUpgrade+0x290>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b04      	cmp	r3, #4
 800994c:	d102      	bne.n	8009954 <encoderUpgrade+0xf0>
					{
						WSONEincreaseNumberOfLedOnTFT();
 800994e:	f7ff f8a5 	bl	8008a9c <WSONEincreaseNumberOfLedOnTFT>
 8009952:	e03d      	b.n	80099d0 <encoderUpgrade+0x16c>
					}
					else if(EncoderState == ENCODER_ACTIVITIES)
 8009954:	4b67      	ldr	r3, [pc, #412]	; (8009af4 <encoderUpgrade+0x290>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b05      	cmp	r3, #5
 800995a:	d102      	bne.n	8009962 <encoderUpgrade+0xfe>
					{
						TenSecondsActivitiesDurationIncrease();
 800995c:	f7ff ff0c 	bl	8009778 <TenSecondsActivitiesDurationIncrease>
 8009960:	e036      	b.n	80099d0 <encoderUpgrade+0x16c>
					}
					//Schedules
					else if (EncoderState == ENCODER_SCHEDULE_1_HOUR_ON)
 8009962:	4b64      	ldr	r3, [pc, #400]	; (8009af4 <encoderUpgrade+0x290>)
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b06      	cmp	r3, #6
 8009968:	d102      	bne.n	8009970 <encoderUpgrade+0x10c>
					{
						schedule1HourOnIncrease();
 800996a:	f7fd fd51 	bl	8007410 <schedule1HourOnIncrease>
 800996e:	e02f      	b.n	80099d0 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_1_MINUTE_ON)
 8009970:	4b60      	ldr	r3, [pc, #384]	; (8009af4 <encoderUpgrade+0x290>)
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	2b08      	cmp	r3, #8
 8009976:	d102      	bne.n	800997e <encoderUpgrade+0x11a>
					{
						schedule1MinuteOnIncrease();
 8009978:	f7fd fdbe 	bl	80074f8 <schedule1MinuteOnIncrease>
 800997c:	e028      	b.n	80099d0 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_1_HOUR_OFF)
 800997e:	4b5d      	ldr	r3, [pc, #372]	; (8009af4 <encoderUpgrade+0x290>)
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b07      	cmp	r3, #7
 8009984:	d102      	bne.n	800998c <encoderUpgrade+0x128>
					{
						schedule1HourOffIncrease();
 8009986:	f7fd fe2b 	bl	80075e0 <schedule1HourOffIncrease>
 800998a:	e021      	b.n	80099d0 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_1_MINUTE_OFF)
 800998c:	4b59      	ldr	r3, [pc, #356]	; (8009af4 <encoderUpgrade+0x290>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b09      	cmp	r3, #9
 8009992:	d102      	bne.n	800999a <encoderUpgrade+0x136>
					{
						schedule1MinuteOffIncrease();
 8009994:	f7fd fe98 	bl	80076c8 <schedule1MinuteOffIncrease>
 8009998:	e01a      	b.n	80099d0 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_2_HOUR_ON)
 800999a:	4b56      	ldr	r3, [pc, #344]	; (8009af4 <encoderUpgrade+0x290>)
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	2b0a      	cmp	r3, #10
 80099a0:	d102      	bne.n	80099a8 <encoderUpgrade+0x144>
					{
						schedule2HourOnIncrease();
 80099a2:	f7fe f8e3 	bl	8007b6c <schedule2HourOnIncrease>
 80099a6:	e013      	b.n	80099d0 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_2_MINUTE_ON)
 80099a8:	4b52      	ldr	r3, [pc, #328]	; (8009af4 <encoderUpgrade+0x290>)
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	2b0c      	cmp	r3, #12
 80099ae:	d102      	bne.n	80099b6 <encoderUpgrade+0x152>
					{
						schedule2MinuteOnIncrease();
 80099b0:	f7fe f950 	bl	8007c54 <schedule2MinuteOnIncrease>
 80099b4:	e00c      	b.n	80099d0 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_2_HOUR_OFF)
 80099b6:	4b4f      	ldr	r3, [pc, #316]	; (8009af4 <encoderUpgrade+0x290>)
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	2b0b      	cmp	r3, #11
 80099bc:	d102      	bne.n	80099c4 <encoderUpgrade+0x160>
					{
						schedule2HourOffIncrease();
 80099be:	f7fe f9bd 	bl	8007d3c <schedule2HourOffIncrease>
 80099c2:	e005      	b.n	80099d0 <encoderUpgrade+0x16c>
					}
					else if (EncoderState == ENCODER_SCHEDULE_2_MINUTE_OFF)
 80099c4:	4b4b      	ldr	r3, [pc, #300]	; (8009af4 <encoderUpgrade+0x290>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b0d      	cmp	r3, #13
 80099ca:	d101      	bne.n	80099d0 <encoderUpgrade+0x16c>
					{
						schedule2MinuteOffIncrease();
 80099cc:	f7fe fa2a 	bl	8007e24 <schedule2MinuteOffIncrease>
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	3301      	adds	r3, #1
 80099d4:	73fb      	strb	r3, [r7, #15]
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	4a45      	ldr	r2, [pc, #276]	; (8009af0 <encoderUpgrade+0x28c>)
 80099da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80099de:	4293      	cmp	r3, r2
 80099e0:	f77f af77 	ble.w	80098d2 <encoderUpgrade+0x6e>
					}
				}
				RotateUpgradeNumber = 0;
 80099e4:	4b42      	ldr	r3, [pc, #264]	; (8009af0 <encoderUpgrade+0x28c>)
 80099e6:	2200      	movs	r2, #0
 80099e8:	801a      	strh	r2, [r3, #0]
				EncoderCounterPrevious = EncoderCounter;
 80099ea:	4b3f      	ldr	r3, [pc, #252]	; (8009ae8 <encoderUpgrade+0x284>)
 80099ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80099f0:	4b3e      	ldr	r3, [pc, #248]	; (8009aec <encoderUpgrade+0x288>)
 80099f2:	801a      	strh	r2, [r3, #0]
				}
				EncoderCounterPrevious = EncoderCounter;
			}
		}
	}
}
 80099f4:	e0b5      	b.n	8009b62 <encoderUpgrade+0x2fe>
			if(EncoderCounterPrevious - EncoderCounter >= 2) // if full rotate was done
 80099f6:	4b3d      	ldr	r3, [pc, #244]	; (8009aec <encoderUpgrade+0x288>)
 80099f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099fc:	461a      	mov	r2, r3
 80099fe:	4b3a      	ldr	r3, [pc, #232]	; (8009ae8 <encoderUpgrade+0x284>)
 8009a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	f340 80ab 	ble.w	8009b62 <encoderUpgrade+0x2fe>
				RotateUpgradeNumber = (EncoderCounterPrevious - EncoderCounter)/2;
 8009a0c:	4b37      	ldr	r3, [pc, #220]	; (8009aec <encoderUpgrade+0x288>)
 8009a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a12:	461a      	mov	r2, r3
 8009a14:	4b34      	ldr	r3, [pc, #208]	; (8009ae8 <encoderUpgrade+0x284>)
 8009a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	0fda      	lsrs	r2, r3, #31
 8009a1e:	4413      	add	r3, r2
 8009a20:	105b      	asrs	r3, r3, #1
 8009a22:	b21a      	sxth	r2, r3
 8009a24:	4b32      	ldr	r3, [pc, #200]	; (8009af0 <encoderUpgrade+0x28c>)
 8009a26:	801a      	strh	r2, [r3, #0]
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 8009a28:	2301      	movs	r3, #1
 8009a2a:	73bb      	strb	r3, [r7, #14]
 8009a2c:	e08d      	b.n	8009b4a <encoderUpgrade+0x2e6>
					if(EncoderState == ENCODER_IDLE)
 8009a2e:	4b31      	ldr	r3, [pc, #196]	; (8009af4 <encoderUpgrade+0x290>)
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d120      	bne.n	8009a78 <encoderUpgrade+0x214>
						if(State == MENUTFT_PARAMETERS)
 8009a36:	4b30      	ldr	r3, [pc, #192]	; (8009af8 <encoderUpgrade+0x294>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d106      	bne.n	8009a4c <encoderUpgrade+0x1e8>
							State = MENUTFT_LIGHTS;
 8009a3e:	4b2e      	ldr	r3, [pc, #184]	; (8009af8 <encoderUpgrade+0x294>)
 8009a40:	2205      	movs	r2, #5
 8009a42:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009a44:	4b2d      	ldr	r3, [pc, #180]	; (8009afc <encoderUpgrade+0x298>)
 8009a46:	2201      	movs	r2, #1
 8009a48:	701a      	strb	r2, [r3, #0]
 8009a4a:	e07b      	b.n	8009b44 <encoderUpgrade+0x2e0>
						else if (State == MENUTFT_SWITCH)
 8009a4c:	4b2a      	ldr	r3, [pc, #168]	; (8009af8 <encoderUpgrade+0x294>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d106      	bne.n	8009a62 <encoderUpgrade+0x1fe>
							State = MENUTFT_PARAMETERS;
 8009a54:	4b28      	ldr	r3, [pc, #160]	; (8009af8 <encoderUpgrade+0x294>)
 8009a56:	2201      	movs	r2, #1
 8009a58:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009a5a:	4b28      	ldr	r3, [pc, #160]	; (8009afc <encoderUpgrade+0x298>)
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	701a      	strb	r2, [r3, #0]
 8009a60:	e070      	b.n	8009b44 <encoderUpgrade+0x2e0>
						else if (State == MENUTFT_LIGHTS)
 8009a62:	4b25      	ldr	r3, [pc, #148]	; (8009af8 <encoderUpgrade+0x294>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2b05      	cmp	r3, #5
 8009a68:	d16c      	bne.n	8009b44 <encoderUpgrade+0x2e0>
							State = MENUTFT_SWITCH;
 8009a6a:	4b23      	ldr	r3, [pc, #140]	; (8009af8 <encoderUpgrade+0x294>)
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	701a      	strb	r2, [r3, #0]
							StateChangeFlag = 1;
 8009a70:	4b22      	ldr	r3, [pc, #136]	; (8009afc <encoderUpgrade+0x298>)
 8009a72:	2201      	movs	r2, #1
 8009a74:	701a      	strb	r2, [r3, #0]
 8009a76:	e065      	b.n	8009b44 <encoderUpgrade+0x2e0>
					else if(EncoderState == ENCODER_CLOCK_MINUTE)
 8009a78:	4b1e      	ldr	r3, [pc, #120]	; (8009af4 <encoderUpgrade+0x290>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d102      	bne.n	8009a86 <encoderUpgrade+0x222>
						OneMinuteDecrease();
 8009a80:	f7ff fdf6 	bl	8009670 <OneMinuteDecrease>
 8009a84:	e05e      	b.n	8009b44 <encoderUpgrade+0x2e0>
					else if(EncoderState == ENCODER_CLOCK_HOUR)
 8009a86:	4b1b      	ldr	r3, [pc, #108]	; (8009af4 <encoderUpgrade+0x290>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d102      	bne.n	8009a94 <encoderUpgrade+0x230>
						OneHourDecrease();
 8009a8e:	f7ff fe1b 	bl	80096c8 <OneHourDecrease>
 8009a92:	e057      	b.n	8009b44 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_CLOCK_DAY)
 8009a94:	4b17      	ldr	r3, [pc, #92]	; (8009af4 <encoderUpgrade+0x290>)
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	2b03      	cmp	r3, #3
 8009a9a:	d102      	bne.n	8009aa2 <encoderUpgrade+0x23e>
						OneDayDecrease();
 8009a9c:	f7ff fe40 	bl	8009720 <OneDayDecrease>
 8009aa0:	e050      	b.n	8009b44 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_WS_LED)
 8009aa2:	4b14      	ldr	r3, [pc, #80]	; (8009af4 <encoderUpgrade+0x290>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d102      	bne.n	8009ab0 <encoderUpgrade+0x24c>
						WSONEdecreaseNumberOfLedOnTFT();
 8009aaa:	f7ff f831 	bl	8008b10 <WSONEdecreaseNumberOfLedOnTFT>
 8009aae:	e049      	b.n	8009b44 <encoderUpgrade+0x2e0>
					else if(EncoderState == ENCODER_ACTIVITIES)
 8009ab0:	4b10      	ldr	r3, [pc, #64]	; (8009af4 <encoderUpgrade+0x290>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	2b05      	cmp	r3, #5
 8009ab6:	d102      	bne.n	8009abe <encoderUpgrade+0x25a>
						TenSecondsActivitiesDurationDecrease();
 8009ab8:	f7ff fe9a 	bl	80097f0 <TenSecondsActivitiesDurationDecrease>
 8009abc:	e042      	b.n	8009b44 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_1_HOUR_ON)
 8009abe:	4b0d      	ldr	r3, [pc, #52]	; (8009af4 <encoderUpgrade+0x290>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	2b06      	cmp	r3, #6
 8009ac4:	d102      	bne.n	8009acc <encoderUpgrade+0x268>
						schedule1HourOnDecrease();
 8009ac6:	f7fd fcdd 	bl	8007484 <schedule1HourOnDecrease>
 8009aca:	e03b      	b.n	8009b44 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_1_MINUTE_ON)
 8009acc:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <encoderUpgrade+0x290>)
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d102      	bne.n	8009ada <encoderUpgrade+0x276>
						schedule1MinuteOnDecrease();
 8009ad4:	f7fd fd4a 	bl	800756c <schedule1MinuteOnDecrease>
 8009ad8:	e034      	b.n	8009b44 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_1_HOUR_OFF)
 8009ada:	4b06      	ldr	r3, [pc, #24]	; (8009af4 <encoderUpgrade+0x290>)
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	2b07      	cmp	r3, #7
 8009ae0:	d10e      	bne.n	8009b00 <encoderUpgrade+0x29c>
						schedule1HourOffDecrease();
 8009ae2:	f7fd fdb7 	bl	8007654 <schedule1HourOffDecrease>
 8009ae6:	e02d      	b.n	8009b44 <encoderUpgrade+0x2e0>
 8009ae8:	2000089c 	.word	0x2000089c
 8009aec:	2000089e 	.word	0x2000089e
 8009af0:	200008a0 	.word	0x200008a0
 8009af4:	200008e9 	.word	0x200008e9
 8009af8:	200008e8 	.word	0x200008e8
 8009afc:	20000861 	.word	0x20000861
					else if (EncoderState == ENCODER_SCHEDULE_1_MINUTE_OFF)
 8009b00:	4b1a      	ldr	r3, [pc, #104]	; (8009b6c <encoderUpgrade+0x308>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	2b09      	cmp	r3, #9
 8009b06:	d102      	bne.n	8009b0e <encoderUpgrade+0x2aa>
						schedule1MinuteOffDecrease();
 8009b08:	f7fd fe18 	bl	800773c <schedule1MinuteOffDecrease>
 8009b0c:	e01a      	b.n	8009b44 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_2_HOUR_ON)
 8009b0e:	4b17      	ldr	r3, [pc, #92]	; (8009b6c <encoderUpgrade+0x308>)
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	2b0a      	cmp	r3, #10
 8009b14:	d102      	bne.n	8009b1c <encoderUpgrade+0x2b8>
						schedule2HourOnDecrease();
 8009b16:	f7fe f863 	bl	8007be0 <schedule2HourOnDecrease>
 8009b1a:	e013      	b.n	8009b44 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_2_MINUTE_ON)
 8009b1c:	4b13      	ldr	r3, [pc, #76]	; (8009b6c <encoderUpgrade+0x308>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	2b0c      	cmp	r3, #12
 8009b22:	d102      	bne.n	8009b2a <encoderUpgrade+0x2c6>
						schedule2MinuteOnDecrease();
 8009b24:	f7fe f8d0 	bl	8007cc8 <schedule2MinuteOnDecrease>
 8009b28:	e00c      	b.n	8009b44 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_2_HOUR_OFF)
 8009b2a:	4b10      	ldr	r3, [pc, #64]	; (8009b6c <encoderUpgrade+0x308>)
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	2b0b      	cmp	r3, #11
 8009b30:	d102      	bne.n	8009b38 <encoderUpgrade+0x2d4>
						schedule2HourOffDecrease();
 8009b32:	f7fe f93d 	bl	8007db0 <schedule2HourOffDecrease>
 8009b36:	e005      	b.n	8009b44 <encoderUpgrade+0x2e0>
					else if (EncoderState == ENCODER_SCHEDULE_2_MINUTE_OFF)
 8009b38:	4b0c      	ldr	r3, [pc, #48]	; (8009b6c <encoderUpgrade+0x308>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b0d      	cmp	r3, #13
 8009b3e:	d101      	bne.n	8009b44 <encoderUpgrade+0x2e0>
						schedule2MinuteOffDecrease();
 8009b40:	f7fe f9aa 	bl	8007e98 <schedule2MinuteOffDecrease>
				for(uint8_t i = 1 ; i <= RotateUpgradeNumber ; i++)
 8009b44:	7bbb      	ldrb	r3, [r7, #14]
 8009b46:	3301      	adds	r3, #1
 8009b48:	73bb      	strb	r3, [r7, #14]
 8009b4a:	7bbb      	ldrb	r3, [r7, #14]
 8009b4c:	4a08      	ldr	r2, [pc, #32]	; (8009b70 <encoderUpgrade+0x30c>)
 8009b4e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009b52:	4293      	cmp	r3, r2
 8009b54:	f77f af6b 	ble.w	8009a2e <encoderUpgrade+0x1ca>
				EncoderCounterPrevious = EncoderCounter;
 8009b58:	4b06      	ldr	r3, [pc, #24]	; (8009b74 <encoderUpgrade+0x310>)
 8009b5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009b5e:	4b06      	ldr	r3, [pc, #24]	; (8009b78 <encoderUpgrade+0x314>)
 8009b60:	801a      	strh	r2, [r3, #0]
}
 8009b62:	bf00      	nop
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	200008e9 	.word	0x200008e9
 8009b70:	200008a0 	.word	0x200008a0
 8009b74:	2000089c 	.word	0x2000089c
 8009b78:	2000089e 	.word	0x2000089e

08009b7c <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b094      	sub	sp, #80	; 0x50
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8009b84:	f107 0308 	add.w	r3, r7, #8
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f001 f9e3 	bl	800af56 <UARTDMA_GetLineFromReceiveBuffer>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d15f      	bne.n	8009c56 <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8009b96:	f107 0308 	add.w	r3, r7, #8
 8009b9a:	4931      	ldr	r1, [pc, #196]	; (8009c60 <UART_ParseLine+0xe4>)
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f00a f9c3 	bl	8013f28 <strtok>
 8009ba2:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8009ba4:	492f      	ldr	r1, [pc, #188]	; (8009c64 <UART_ParseLine+0xe8>)
 8009ba6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009ba8:	f7f6 fb1a 	bl	80001e0 <strcmp>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d102      	bne.n	8009bb8 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8009bb2:	f000 f869 	bl	8009c88 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8009bb6:	e04e      	b.n	8009c56 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8009bb8:	492b      	ldr	r1, [pc, #172]	; (8009c68 <UART_ParseLine+0xec>)
 8009bba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009bbc:	f7f6 fb10 	bl	80001e0 <strcmp>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d102      	bne.n	8009bcc <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8009bc6:	f000 f8ad 	bl	8009d24 <UART_ParseAnswStatus>
}
 8009bca:	e044      	b.n	8009c56 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8009bcc:	4927      	ldr	r1, [pc, #156]	; (8009c6c <UART_ParseLine+0xf0>)
 8009bce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009bd0:	f7f6 fb06 	bl	80001e0 <strcmp>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d102      	bne.n	8009be0 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8009bda:	f000 f8ab 	bl	8009d34 <UART_ParseAnswTemp>
}
 8009bde:	e03a      	b.n	8009c56 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8009be0:	4923      	ldr	r1, [pc, #140]	; (8009c70 <UART_ParseLine+0xf4>)
 8009be2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009be4:	f7f6 fafc 	bl	80001e0 <strcmp>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d102      	bne.n	8009bf4 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8009bee:	f000 f953 	bl	8009e98 <UART_ParseAnswPres>
}
 8009bf2:	e030      	b.n	8009c56 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8009bf4:	491f      	ldr	r1, [pc, #124]	; (8009c74 <UART_ParseLine+0xf8>)
 8009bf6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009bf8:	f7f6 faf2 	bl	80001e0 <strcmp>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d102      	bne.n	8009c08 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8009c02:	f000 f9d7 	bl	8009fb4 <UART_ParseAnswChangeRelayState>
}
 8009c06:	e026      	b.n	8009c56 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8009c08:	491b      	ldr	r1, [pc, #108]	; (8009c78 <UART_ParseLine+0xfc>)
 8009c0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c0c:	f7f6 fae8 	bl	80001e0 <strcmp>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d102      	bne.n	8009c1c <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 8009c16:	f000 f9d4 	bl	8009fc2 <UART_ParseAnswChangeLightState>
}
 8009c1a:	e01c      	b.n	8009c56 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8009c1c:	4917      	ldr	r1, [pc, #92]	; (8009c7c <UART_ParseLine+0x100>)
 8009c1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c20:	f7f6 fade 	bl	80001e0 <strcmp>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d102      	bne.n	8009c30 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8009c2a:	f000 f9d1 	bl	8009fd0 <UART_ParseAnswRelayStateStatus>
}
 8009c2e:	e012      	b.n	8009c56 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8009c30:	4913      	ldr	r1, [pc, #76]	; (8009c80 <UART_ParseLine+0x104>)
 8009c32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c34:	f7f6 fad4 	bl	80001e0 <strcmp>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d102      	bne.n	8009c44 <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 8009c3e:	f000 fa2d 	bl	800a09c <UART_ParseAnswLightsStateStatus>
}
 8009c42:	e008      	b.n	8009c56 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 8009c44:	490f      	ldr	r1, [pc, #60]	; (8009c84 <UART_ParseLine+0x108>)
 8009c46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c48:	f7f6 faca 	bl	80001e0 <strcmp>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 8009c52:	f000 f96d 	bl	8009f30 <UART_ParseAnswDist>
}
 8009c56:	bf00      	nop
 8009c58:	3750      	adds	r7, #80	; 0x50
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	080176f0 	.word	0x080176f0
 8009c64:	080176f4 	.word	0x080176f4
 8009c68:	080176f8 	.word	0x080176f8
 8009c6c:	08017700 	.word	0x08017700
 8009c70:	08017708 	.word	0x08017708
 8009c74:	08017710 	.word	0x08017710
 8009c78:	0801771c 	.word	0x0801771c
 8009c7c:	08017728 	.word	0x08017728
 8009c80:	08017734 	.word	0x08017734
 8009c84:	08017740 	.word	0x08017740

08009c88 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009c8e:	491f      	ldr	r1, [pc, #124]	; (8009d0c <UART_ParseLED+0x84>)
 8009c90:	2000      	movs	r0, #0
 8009c92:	f00a f949 	bl	8013f28 <strtok>
 8009c96:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d031      	beq.n	8009d04 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	2b2f      	cmp	r3, #47	; 0x2f
 8009ca6:	d903      	bls.n	8009cb0 <UART_ParseLED+0x28>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b39      	cmp	r3, #57	; 0x39
 8009cae:	d904      	bls.n	8009cba <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8009cb0:	4917      	ldr	r1, [pc, #92]	; (8009d10 <UART_ParseLED+0x88>)
 8009cb2:	4818      	ldr	r0, [pc, #96]	; (8009d14 <UART_ParseLED+0x8c>)
 8009cb4:	f001 f980 	bl	800afb8 <UARTDMA_Print>
			return;	// And exit parsing
 8009cb8:	e024      	b.n	8009d04 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f008 fc29 	bl	8012512 <atoi>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d10a      	bne.n	8009ce0 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009cd0:	4811      	ldr	r0, [pc, #68]	; (8009d18 <UART_ParseLED+0x90>)
 8009cd2:	f002 fc05 	bl	800c4e0 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8009cd6:	4911      	ldr	r1, [pc, #68]	; (8009d1c <UART_ParseLED+0x94>)
 8009cd8:	480e      	ldr	r0, [pc, #56]	; (8009d14 <UART_ParseLED+0x8c>)
 8009cda:	f001 f96d 	bl	800afb8 <UARTDMA_Print>
 8009cde:	e011      	b.n	8009d04 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8009ce0:	78fb      	ldrb	r3, [r7, #3]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10a      	bne.n	8009cfc <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009cec:	480a      	ldr	r0, [pc, #40]	; (8009d18 <UART_ParseLED+0x90>)
 8009cee:	f002 fbf7 	bl	800c4e0 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8009cf2:	490b      	ldr	r1, [pc, #44]	; (8009d20 <UART_ParseLED+0x98>)
 8009cf4:	4807      	ldr	r0, [pc, #28]	; (8009d14 <UART_ParseLED+0x8c>)
 8009cf6:	f001 f95f 	bl	800afb8 <UARTDMA_Print>
 8009cfa:	e003      	b.n	8009d04 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8009cfc:	4904      	ldr	r1, [pc, #16]	; (8009d10 <UART_ParseLED+0x88>)
 8009cfe:	4805      	ldr	r0, [pc, #20]	; (8009d14 <UART_ParseLED+0x8c>)
 8009d00:	f001 f95a 	bl	800afb8 <UARTDMA_Print>
		}
	}
}
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	08017748 	.word	0x08017748
 8009d10:	0801774c 	.word	0x0801774c
 8009d14:	20000488 	.word	0x20000488
 8009d18:	40020800 	.word	0x40020800
 8009d1c:	0801775c 	.word	0x0801775c
 8009d20:	08017768 	.word	0x08017768

08009d24 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8009d24:	b480      	push	{r7}
 8009d26:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8009d28:	bf00      	nop
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
	...

08009d34 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8009d3e:	494e      	ldr	r1, [pc, #312]	; (8009e78 <UART_ParseAnswTemp+0x144>)
 8009d40:	2000      	movs	r0, #0
 8009d42:	f00a f8f1 	bl	8013f28 <strtok>
 8009d46:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 808f 	beq.w	8009e70 <UART_ParseAnswTemp+0x13c>
	{
			NrCzujnika = atoi(ParsePointer);
 8009d52:	68b8      	ldr	r0, [r7, #8]
 8009d54:	f008 fbdd 	bl	8012512 <atoi>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d010      	beq.n	8009d86 <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009d64:	4944      	ldr	r1, [pc, #272]	; (8009e78 <UART_ParseAnswTemp+0x144>)
 8009d66:	2000      	movs	r0, #0
 8009d68:	f00a f8de 	bl	8013f28 <strtok>
 8009d6c:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f008 fbcc 	bl	801250c <atof>
 8009d74:	ec53 2b10 	vmov	r2, r3, d0
 8009d78:	4610      	mov	r0, r2
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	f7f6 ff4c 	bl	8000c18 <__aeabi_d2f>
 8009d80:	4603      	mov	r3, r0
 8009d82:	4a3e      	ldr	r2, [pc, #248]	; (8009e7c <UART_ParseAnswTemp+0x148>)
 8009d84:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8009d86:	4b3e      	ldr	r3, [pc, #248]	; (8009e80 <UART_ParseAnswTemp+0x14c>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d170      	bne.n	8009e70 <UART_ParseAnswTemp+0x13c>
			{
				if(NrCzujnika == 1)
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d120      	bne.n	8009dd6 <UART_ParseAnswTemp+0xa2>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8009d94:	483b      	ldr	r0, [pc, #236]	; (8009e84 <UART_ParseAnswTemp+0x150>)
 8009d96:	f7f7 fdef 	bl	8001978 <EF_SetFont>
						sprintf((char*)MsgParse, "Temp. zewn: %.2f`C ", CTemp);
 8009d9a:	4b38      	ldr	r3, [pc, #224]	; (8009e7c <UART_ParseAnswTemp+0x148>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7f6 fbea 	bl	8000578 <__aeabi_f2d>
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	4937      	ldr	r1, [pc, #220]	; (8009e88 <UART_ParseAnswTemp+0x154>)
 8009daa:	4838      	ldr	r0, [pc, #224]	; (8009e8c <UART_ParseAnswTemp+0x158>)
 8009dac:	f009 fa68 	bl	8013280 <siprintf>
						EF_PutString(MsgParse, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009db0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009db4:	9301      	str	r3, [sp, #4]
 8009db6:	2301      	movs	r3, #1
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	2250      	movs	r2, #80	; 0x50
 8009dbe:	2114      	movs	r1, #20
 8009dc0:	4832      	ldr	r0, [pc, #200]	; (8009e8c <UART_ParseAnswTemp+0x158>)
 8009dc2:	f7f7 fff3 	bl	8001dac <EF_PutString>
						ESP_SendCurrentTempOutside(CTemp);
 8009dc6:	4b2d      	ldr	r3, [pc, #180]	; (8009e7c <UART_ParseAnswTemp+0x148>)
 8009dc8:	edd3 7a00 	vldr	s15, [r3]
 8009dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8009dd0:	f7f7 fa18 	bl	8001204 <ESP_SendCurrentTempOutside>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8009dd4:	e04c      	b.n	8009e70 <UART_ParseAnswTemp+0x13c>
				else if(NrCzujnika == 2)
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d149      	bne.n	8009e70 <UART_ParseAnswTemp+0x13c>
						if (CTemp == 0.0) // Error in connection to ds18b20 - TODO! Send information about error in connection
 8009ddc:	4b27      	ldr	r3, [pc, #156]	; (8009e7c <UART_ParseAnswTemp+0x148>)
 8009dde:	edd3 7a00 	vldr	s15, [r3]
 8009de2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dea:	d11d      	bne.n	8009e28 <UART_ParseAnswTemp+0xf4>
							CTemp = LCTemp;
 8009dec:	4b28      	ldr	r3, [pc, #160]	; (8009e90 <UART_ParseAnswTemp+0x15c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a22      	ldr	r2, [pc, #136]	; (8009e7c <UART_ParseAnswTemp+0x148>)
 8009df2:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8009df4:	4823      	ldr	r0, [pc, #140]	; (8009e84 <UART_ParseAnswTemp+0x150>)
 8009df6:	f7f7 fdbf 	bl	8001978 <EF_SetFont>
							sprintf((char*)MsgParse, "Temp. wewn: %.2f`C ", CTemp);
 8009dfa:	4b20      	ldr	r3, [pc, #128]	; (8009e7c <UART_ParseAnswTemp+0x148>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7f6 fbba 	bl	8000578 <__aeabi_f2d>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4922      	ldr	r1, [pc, #136]	; (8009e94 <UART_ParseAnswTemp+0x160>)
 8009e0a:	4820      	ldr	r0, [pc, #128]	; (8009e8c <UART_ParseAnswTemp+0x158>)
 8009e0c:	f009 fa38 	bl	8013280 <siprintf>
							EF_PutString(MsgParse, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009e10:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	2301      	movs	r3, #1
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	226e      	movs	r2, #110	; 0x6e
 8009e1e:	2114      	movs	r1, #20
 8009e20:	481a      	ldr	r0, [pc, #104]	; (8009e8c <UART_ParseAnswTemp+0x158>)
 8009e22:	f7f7 ffc3 	bl	8001dac <EF_PutString>
	}
 8009e26:	e023      	b.n	8009e70 <UART_ParseAnswTemp+0x13c>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8009e28:	4816      	ldr	r0, [pc, #88]	; (8009e84 <UART_ParseAnswTemp+0x150>)
 8009e2a:	f7f7 fda5 	bl	8001978 <EF_SetFont>
							sprintf((char*)MsgParse, "Temp. wewn: %.2f`C ", CTemp);
 8009e2e:	4b13      	ldr	r3, [pc, #76]	; (8009e7c <UART_ParseAnswTemp+0x148>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7f6 fba0 	bl	8000578 <__aeabi_f2d>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4915      	ldr	r1, [pc, #84]	; (8009e94 <UART_ParseAnswTemp+0x160>)
 8009e3e:	4813      	ldr	r0, [pc, #76]	; (8009e8c <UART_ParseAnswTemp+0x158>)
 8009e40:	f009 fa1e 	bl	8013280 <siprintf>
							EF_PutString(MsgParse, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009e44:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	226e      	movs	r2, #110	; 0x6e
 8009e52:	2114      	movs	r1, #20
 8009e54:	480d      	ldr	r0, [pc, #52]	; (8009e8c <UART_ParseAnswTemp+0x158>)
 8009e56:	f7f7 ffa9 	bl	8001dac <EF_PutString>
							LCTemp = CTemp;
 8009e5a:	4b08      	ldr	r3, [pc, #32]	; (8009e7c <UART_ParseAnswTemp+0x148>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a0c      	ldr	r2, [pc, #48]	; (8009e90 <UART_ParseAnswTemp+0x15c>)
 8009e60:	6013      	str	r3, [r2, #0]
							ESP_SendCurrentTempInside(CTemp);
 8009e62:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <UART_ParseAnswTemp+0x148>)
 8009e64:	edd3 7a00 	vldr	s15, [r3]
 8009e68:	eeb0 0a67 	vmov.f32	s0, s15
 8009e6c:	f7f7 f9ae 	bl	80011cc <ESP_SendCurrentTempInside>
	}
 8009e70:	bf00      	nop
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	08017748 	.word	0x08017748
 8009e7c:	20000930 	.word	0x20000930
 8009e80:	200008e8 	.word	0x200008e8
 8009e84:	0802ab7c 	.word	0x0802ab7c
 8009e88:	08017774 	.word	0x08017774
 8009e8c:	2000094c 	.word	0x2000094c
 8009e90:	20000934 	.word	0x20000934
 8009e94:	08017788 	.word	0x08017788

08009e98 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8009e9e:	491e      	ldr	r1, [pc, #120]	; (8009f18 <UART_ParseAnswPres+0x80>)
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	f00a f841 	bl	8013f28 <strtok>
 8009ea6:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d02f      	beq.n	8009f10 <UART_ParseAnswPres+0x78>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f008 fb2b 	bl	801250c <atof>
 8009eb6:	ec53 2b10 	vmov	r2, r3, d0
 8009eba:	4610      	mov	r0, r2
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	f7f6 feab 	bl	8000c18 <__aeabi_d2f>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	4a15      	ldr	r2, [pc, #84]	; (8009f1c <UART_ParseAnswPres+0x84>)
 8009ec6:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8009ec8:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <UART_ParseAnswPres+0x88>)
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d11f      	bne.n	8009f10 <UART_ParseAnswPres+0x78>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8009ed0:	4814      	ldr	r0, [pc, #80]	; (8009f24 <UART_ParseAnswPres+0x8c>)
 8009ed2:	f7f7 fd51 	bl	8001978 <EF_SetFont>
			sprintf((char*)MsgParse, "Ciśnienie: %.1fhPa ", CPres);
 8009ed6:	4b11      	ldr	r3, [pc, #68]	; (8009f1c <UART_ParseAnswPres+0x84>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7f6 fb4c 	bl	8000578 <__aeabi_f2d>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4910      	ldr	r1, [pc, #64]	; (8009f28 <UART_ParseAnswPres+0x90>)
 8009ee6:	4811      	ldr	r0, [pc, #68]	; (8009f2c <UART_ParseAnswPres+0x94>)
 8009ee8:	f009 f9ca 	bl	8013280 <siprintf>
			EF_PutString(MsgParse, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009eec:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009ef0:	9301      	str	r3, [sp, #4]
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	22aa      	movs	r2, #170	; 0xaa
 8009efa:	2114      	movs	r1, #20
 8009efc:	480b      	ldr	r0, [pc, #44]	; (8009f2c <UART_ParseAnswPres+0x94>)
 8009efe:	f7f7 ff55 	bl	8001dac <EF_PutString>
			ESP_SendCurrentPressure(CPres);
 8009f02:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <UART_ParseAnswPres+0x84>)
 8009f04:	edd3 7a00 	vldr	s15, [r3]
 8009f08:	eeb0 0a67 	vmov.f32	s0, s15
 8009f0c:	f7f7 f996 	bl	800123c <ESP_SendCurrentPressure>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	08017748 	.word	0x08017748
 8009f1c:	20000938 	.word	0x20000938
 8009f20:	200008e8 	.word	0x200008e8
 8009f24:	0802ab7c 	.word	0x0802ab7c
 8009f28:	0801779c 	.word	0x0801779c
 8009f2c:	2000094c 	.word	0x2000094c

08009f30 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8009f36:	4919      	ldr	r1, [pc, #100]	; (8009f9c <UART_ParseAnswDist+0x6c>)
 8009f38:	2000      	movs	r0, #0
 8009f3a:	f009 fff5 	bl	8013f28 <strtok>
 8009f3e:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d024      	beq.n	8009f92 <UART_ParseAnswDist+0x62>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f008 fae2 	bl	8012512 <atoi>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	461a      	mov	r2, r3
 8009f52:	4b13      	ldr	r3, [pc, #76]	; (8009fa0 <UART_ParseAnswDist+0x70>)
 8009f54:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8009f56:	4b13      	ldr	r3, [pc, #76]	; (8009fa4 <UART_ParseAnswDist+0x74>)
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d119      	bne.n	8009f92 <UART_ParseAnswDist+0x62>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8009f5e:	4812      	ldr	r0, [pc, #72]	; (8009fa8 <UART_ParseAnswDist+0x78>)
 8009f60:	f7f7 fd0a 	bl	8001978 <EF_SetFont>
			sprintf((char*)MsgParse, "-%ldmm  ", CDist2water);
 8009f64:	4b0e      	ldr	r3, [pc, #56]	; (8009fa0 <UART_ParseAnswDist+0x70>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	461a      	mov	r2, r3
 8009f6a:	4910      	ldr	r1, [pc, #64]	; (8009fac <UART_ParseAnswDist+0x7c>)
 8009f6c:	4810      	ldr	r0, [pc, #64]	; (8009fb0 <UART_ParseAnswDist+0x80>)
 8009f6e:	f009 f987 	bl	8013280 <siprintf>
			EF_PutString(MsgParse, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8009f72:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	2301      	movs	r3, #1
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	228c      	movs	r2, #140	; 0x8c
 8009f80:	21ad      	movs	r1, #173	; 0xad
 8009f82:	480b      	ldr	r0, [pc, #44]	; (8009fb0 <UART_ParseAnswDist+0x80>)
 8009f84:	f7f7 ff12 	bl	8001dac <EF_PutString>
			ESP_SendCurrentWaterLvl(CDist2water);
 8009f88:	4b05      	ldr	r3, [pc, #20]	; (8009fa0 <UART_ParseAnswDist+0x70>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7f7 f971 	bl	8001274 <ESP_SendCurrentWaterLvl>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8009f92:	bf00      	nop
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	08017748 	.word	0x08017748
 8009fa0:	20000940 	.word	0x20000940
 8009fa4:	200008e8 	.word	0x200008e8
 8009fa8:	0802ab7c 	.word	0x0802ab7c
 8009fac:	080177b4 	.word	0x080177b4
 8009fb0:	2000094c 	.word	0x2000094c

08009fb4 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	af00      	add	r7, sp, #0
	//TODO!
}
 8009fb8:	bf00      	nop
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	af00      	add	r7, sp, #0
	//TODO!
}
 8009fc6:	bf00      	nop
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	71fb      	strb	r3, [r7, #7]
 8009fda:	e04a      	b.n	800a072 <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8009fdc:	4928      	ldr	r1, [pc, #160]	; (800a080 <UART_ParseAnswRelayStateStatus+0xb0>)
 8009fde:	2000      	movs	r0, #0
 8009fe0:	f009 ffa2 	bl	8013f28 <strtok>
 8009fe4:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d02f      	beq.n	800a04e <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8009fee:	2300      	movs	r3, #0
 8009ff0:	71bb      	strb	r3, [r7, #6]
 8009ff2:	e025      	b.n	800a040 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8009ff4:	79bb      	ldrb	r3, [r7, #6]
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	2b2f      	cmp	r3, #47	; 0x2f
 8009ffe:	d905      	bls.n	800a00c <UART_ParseAnswRelayStateStatus+0x3c>
 800a000:	79bb      	ldrb	r3, [r7, #6]
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	4413      	add	r3, r2
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b39      	cmp	r3, #57	; 0x39
 800a00a:	d90e      	bls.n	800a02a <UART_ParseAnswRelayStateStatus+0x5a>
 800a00c:	79bb      	ldrb	r3, [r7, #6]
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	4413      	add	r3, r2
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	2b2e      	cmp	r3, #46	; 0x2e
 800a016:	d008      	beq.n	800a02a <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(MessageP, "ERROR_WRONG_VALUE\n"); // If not, Error message
 800a018:	491a      	ldr	r1, [pc, #104]	; (800a084 <UART_ParseAnswRelayStateStatus+0xb4>)
 800a01a:	481b      	ldr	r0, [pc, #108]	; (800a088 <UART_ParseAnswRelayStateStatus+0xb8>)
 800a01c:	f009 f930 	bl	8013280 <siprintf>
					UARTDMA_Print(&huartdma2, MessageP); // Print message
 800a020:	4919      	ldr	r1, [pc, #100]	; (800a088 <UART_ParseAnswRelayStateStatus+0xb8>)
 800a022:	481a      	ldr	r0, [pc, #104]	; (800a08c <UART_ParseAnswRelayStateStatus+0xbc>)
 800a024:	f000 ffc8 	bl	800afb8 <UARTDMA_Print>
					return;	// And exit parsing
 800a028:	e026      	b.n	800a078 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800a02a:	6838      	ldr	r0, [r7, #0]
 800a02c:	f008 fa71 	bl	8012512 <atoi>
 800a030:	4602      	mov	r2, r0
 800a032:	79fb      	ldrb	r3, [r7, #7]
 800a034:	b2d1      	uxtb	r1, r2
 800a036:	4a16      	ldr	r2, [pc, #88]	; (800a090 <UART_ParseAnswRelayStateStatus+0xc0>)
 800a038:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800a03a:	79bb      	ldrb	r3, [r7, #6]
 800a03c:	3301      	adds	r3, #1
 800a03e:	71bb      	strb	r3, [r7, #6]
 800a040:	79bb      	ldrb	r3, [r7, #6]
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	4413      	add	r3, r2
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1d3      	bne.n	8009ff4 <UART_ParseAnswRelayStateStatus+0x24>
 800a04c:	e008      	b.n	800a060 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(MessageP, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800a04e:	4911      	ldr	r1, [pc, #68]	; (800a094 <UART_ParseAnswRelayStateStatus+0xc4>)
 800a050:	480d      	ldr	r0, [pc, #52]	; (800a088 <UART_ParseAnswRelayStateStatus+0xb8>)
 800a052:	f009 f915 	bl	8013280 <siprintf>
			UARTDMA_Print(&huartdma2, MessageP); // Print message
 800a056:	490c      	ldr	r1, [pc, #48]	; (800a088 <UART_ParseAnswRelayStateStatus+0xb8>)
 800a058:	480c      	ldr	r0, [pc, #48]	; (800a08c <UART_ParseAnswRelayStateStatus+0xbc>)
 800a05a:	f000 ffad 	bl	800afb8 <UARTDMA_Print>
			return;	// And exit parsing
 800a05e:	e00b      	b.n	800a078 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 800a060:	4b0d      	ldr	r3, [pc, #52]	; (800a098 <UART_ParseAnswRelayStateStatus+0xc8>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b02      	cmp	r3, #2
 800a066:	d101      	bne.n	800a06c <UART_ParseAnswRelayStateStatus+0x9c>
 800a068:	f7fb f8d2 	bl	8005210 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	3301      	adds	r3, #1
 800a070:	71fb      	strb	r3, [r7, #7]
 800a072:	79fb      	ldrb	r3, [r7, #7]
 800a074:	2b03      	cmp	r3, #3
 800a076:	d9b1      	bls.n	8009fdc <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	08017748 	.word	0x08017748
 800a084:	080177c0 	.word	0x080177c0
 800a088:	200008ec 	.word	0x200008ec
 800a08c:	20000488 	.word	0x20000488
 800a090:	20000944 	.word	0x20000944
 800a094:	080177d4 	.word	0x080177d4
 800a098:	200008e8 	.word	0x200008e8

0800a09c <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	71fb      	strb	r3, [r7, #7]
 800a0a6:	e04a      	b.n	800a13e <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800a0a8:	4928      	ldr	r1, [pc, #160]	; (800a14c <UART_ParseAnswLightsStateStatus+0xb0>)
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	f009 ff3c 	bl	8013f28 <strtok>
 800a0b0:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d02f      	beq.n	800a11a <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	71bb      	strb	r3, [r7, #6]
 800a0be:	e025      	b.n	800a10c <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 800a0c0:	79bb      	ldrb	r3, [r7, #6]
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	2b2f      	cmp	r3, #47	; 0x2f
 800a0ca:	d905      	bls.n	800a0d8 <UART_ParseAnswLightsStateStatus+0x3c>
 800a0cc:	79bb      	ldrb	r3, [r7, #6]
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2b39      	cmp	r3, #57	; 0x39
 800a0d6:	d90e      	bls.n	800a0f6 <UART_ParseAnswLightsStateStatus+0x5a>
 800a0d8:	79bb      	ldrb	r3, [r7, #6]
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	4413      	add	r3, r2
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a0e2:	d008      	beq.n	800a0f6 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(MessageP, "ERROR_WRONG_VALUE\n"); // If not, Error message
 800a0e4:	491a      	ldr	r1, [pc, #104]	; (800a150 <UART_ParseAnswLightsStateStatus+0xb4>)
 800a0e6:	481b      	ldr	r0, [pc, #108]	; (800a154 <UART_ParseAnswLightsStateStatus+0xb8>)
 800a0e8:	f009 f8ca 	bl	8013280 <siprintf>
					UARTDMA_Print(&huartdma2, MessageP); // Print message
 800a0ec:	4919      	ldr	r1, [pc, #100]	; (800a154 <UART_ParseAnswLightsStateStatus+0xb8>)
 800a0ee:	481a      	ldr	r0, [pc, #104]	; (800a158 <UART_ParseAnswLightsStateStatus+0xbc>)
 800a0f0:	f000 ff62 	bl	800afb8 <UARTDMA_Print>
					return;	// And exit parsing
 800a0f4:	e026      	b.n	800a144 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800a0f6:	6838      	ldr	r0, [r7, #0]
 800a0f8:	f008 fa0b 	bl	8012512 <atoi>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	b2d1      	uxtb	r1, r2
 800a102:	4a16      	ldr	r2, [pc, #88]	; (800a15c <UART_ParseAnswLightsStateStatus+0xc0>)
 800a104:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800a106:	79bb      	ldrb	r3, [r7, #6]
 800a108:	3301      	adds	r3, #1
 800a10a:	71bb      	strb	r3, [r7, #6]
 800a10c:	79bb      	ldrb	r3, [r7, #6]
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	4413      	add	r3, r2
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1d3      	bne.n	800a0c0 <UART_ParseAnswLightsStateStatus+0x24>
 800a118:	e008      	b.n	800a12c <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(MessageP, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800a11a:	4911      	ldr	r1, [pc, #68]	; (800a160 <UART_ParseAnswLightsStateStatus+0xc4>)
 800a11c:	480d      	ldr	r0, [pc, #52]	; (800a154 <UART_ParseAnswLightsStateStatus+0xb8>)
 800a11e:	f009 f8af 	bl	8013280 <siprintf>
			UARTDMA_Print(&huartdma2, MessageP); // Print message
 800a122:	490c      	ldr	r1, [pc, #48]	; (800a154 <UART_ParseAnswLightsStateStatus+0xb8>)
 800a124:	480c      	ldr	r0, [pc, #48]	; (800a158 <UART_ParseAnswLightsStateStatus+0xbc>)
 800a126:	f000 ff47 	bl	800afb8 <UARTDMA_Print>
			return;	// And exit parsing
 800a12a:	e00b      	b.n	800a144 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 800a12c:	4b0d      	ldr	r3, [pc, #52]	; (800a164 <UART_ParseAnswLightsStateStatus+0xc8>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b05      	cmp	r3, #5
 800a132:	d101      	bne.n	800a138 <UART_ParseAnswLightsStateStatus+0x9c>
 800a134:	f7fb f974 	bl	8005420 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 800a138:	79fb      	ldrb	r3, [r7, #7]
 800a13a:	3301      	adds	r3, #1
 800a13c:	71fb      	strb	r3, [r7, #7]
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	2b03      	cmp	r3, #3
 800a142:	d9b1      	bls.n	800a0a8 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	08017748 	.word	0x08017748
 800a150:	080177c0 	.word	0x080177c0
 800a154:	200008ec 	.word	0x200008ec
 800a158:	20000488 	.word	0x20000488
 800a15c:	20000948 	.word	0x20000948
 800a160:	080177d4 	.word	0x080177d4
 800a164:	200008e8 	.word	0x200008e8

0800a168 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	4603      	mov	r3, r0
 800a170:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 800a172:	79fb      	ldrb	r3, [r7, #7]
 800a174:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 800a176:	7bfb      	ldrb	r3, [r7, #15]
 800a178:	2b27      	cmp	r3, #39	; 0x27
 800a17a:	f200 8129 	bhi.w	800a3d0 <SendComand+0x268>
 800a17e:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <SendComand+0x1c>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a225 	.word	0x0800a225
 800a188:	0800a22f 	.word	0x0800a22f
 800a18c:	0800a239 	.word	0x0800a239
 800a190:	0800a243 	.word	0x0800a243
 800a194:	0800a257 	.word	0x0800a257
 800a198:	0800a261 	.word	0x0800a261
 800a19c:	0800a26b 	.word	0x0800a26b
 800a1a0:	0800a275 	.word	0x0800a275
 800a1a4:	0800a27f 	.word	0x0800a27f
 800a1a8:	0800a289 	.word	0x0800a289
 800a1ac:	0800a293 	.word	0x0800a293
 800a1b0:	0800a29d 	.word	0x0800a29d
 800a1b4:	0800a2a7 	.word	0x0800a2a7
 800a1b8:	0800a2cf 	.word	0x0800a2cf
 800a1bc:	0800a2d9 	.word	0x0800a2d9
 800a1c0:	0800a2e3 	.word	0x0800a2e3
 800a1c4:	0800a2ed 	.word	0x0800a2ed
 800a1c8:	0800a2f7 	.word	0x0800a2f7
 800a1cc:	0800a301 	.word	0x0800a301
 800a1d0:	0800a30b 	.word	0x0800a30b
 800a1d4:	0800a315 	.word	0x0800a315
 800a1d8:	0800a2c5 	.word	0x0800a2c5
 800a1dc:	0800a333 	.word	0x0800a333
 800a1e0:	0800a2b1 	.word	0x0800a2b1
 800a1e4:	0800a2bb 	.word	0x0800a2bb
 800a1e8:	0800a31f 	.word	0x0800a31f
 800a1ec:	0800a329 	.word	0x0800a329
 800a1f0:	0800a24d 	.word	0x0800a24d
 800a1f4:	0800a33d 	.word	0x0800a33d
 800a1f8:	0800a347 	.word	0x0800a347
 800a1fc:	0800a351 	.word	0x0800a351
 800a200:	0800a35b 	.word	0x0800a35b
 800a204:	0800a365 	.word	0x0800a365
 800a208:	0800a36f 	.word	0x0800a36f
 800a20c:	0800a379 	.word	0x0800a379
 800a210:	0800a383 	.word	0x0800a383
 800a214:	0800a38d 	.word	0x0800a38d
 800a218:	0800a397 	.word	0x0800a397
 800a21c:	0800a3bd 	.word	0x0800a3bd
 800a220:	0800a3c7 	.word	0x0800a3c7
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 800a224:	496d      	ldr	r1, [pc, #436]	; (800a3dc <SendComand+0x274>)
 800a226:	486e      	ldr	r0, [pc, #440]	; (800a3e0 <SendComand+0x278>)
 800a228:	f000 fec6 	bl	800afb8 <UARTDMA_Print>
			break;
 800a22c:	e0d0      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 800a22e:	496d      	ldr	r1, [pc, #436]	; (800a3e4 <SendComand+0x27c>)
 800a230:	486b      	ldr	r0, [pc, #428]	; (800a3e0 <SendComand+0x278>)
 800a232:	f000 fec1 	bl	800afb8 <UARTDMA_Print>
			break;
 800a236:	e0cb      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 800a238:	496b      	ldr	r1, [pc, #428]	; (800a3e8 <SendComand+0x280>)
 800a23a:	4869      	ldr	r0, [pc, #420]	; (800a3e0 <SendComand+0x278>)
 800a23c:	f000 febc 	bl	800afb8 <UARTDMA_Print>
			break;
 800a240:	e0c6      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 800a242:	496a      	ldr	r1, [pc, #424]	; (800a3ec <SendComand+0x284>)
 800a244:	4866      	ldr	r0, [pc, #408]	; (800a3e0 <SendComand+0x278>)
 800a246:	f000 feb7 	bl	800afb8 <UARTDMA_Print>
			break;
 800a24a:	e0c1      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 800a24c:	4968      	ldr	r1, [pc, #416]	; (800a3f0 <SendComand+0x288>)
 800a24e:	4864      	ldr	r0, [pc, #400]	; (800a3e0 <SendComand+0x278>)
 800a250:	f000 feb2 	bl	800afb8 <UARTDMA_Print>
			break;
 800a254:	e0bc      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 800a256:	4967      	ldr	r1, [pc, #412]	; (800a3f4 <SendComand+0x28c>)
 800a258:	4861      	ldr	r0, [pc, #388]	; (800a3e0 <SendComand+0x278>)
 800a25a:	f000 fead 	bl	800afb8 <UARTDMA_Print>
			break;
 800a25e:	e0b7      	b.n	800a3d0 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 800a260:	4965      	ldr	r1, [pc, #404]	; (800a3f8 <SendComand+0x290>)
 800a262:	485f      	ldr	r0, [pc, #380]	; (800a3e0 <SendComand+0x278>)
 800a264:	f000 fea8 	bl	800afb8 <UARTDMA_Print>
			break;
 800a268:	e0b2      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 800a26a:	4964      	ldr	r1, [pc, #400]	; (800a3fc <SendComand+0x294>)
 800a26c:	485c      	ldr	r0, [pc, #368]	; (800a3e0 <SendComand+0x278>)
 800a26e:	f000 fea3 	bl	800afb8 <UARTDMA_Print>
			break;
 800a272:	e0ad      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 800a274:	4962      	ldr	r1, [pc, #392]	; (800a400 <SendComand+0x298>)
 800a276:	485a      	ldr	r0, [pc, #360]	; (800a3e0 <SendComand+0x278>)
 800a278:	f000 fe9e 	bl	800afb8 <UARTDMA_Print>
			break;
 800a27c:	e0a8      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 800a27e:	4961      	ldr	r1, [pc, #388]	; (800a404 <SendComand+0x29c>)
 800a280:	4857      	ldr	r0, [pc, #348]	; (800a3e0 <SendComand+0x278>)
 800a282:	f000 fe99 	bl	800afb8 <UARTDMA_Print>
			break;
 800a286:	e0a3      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 800a288:	495f      	ldr	r1, [pc, #380]	; (800a408 <SendComand+0x2a0>)
 800a28a:	4855      	ldr	r0, [pc, #340]	; (800a3e0 <SendComand+0x278>)
 800a28c:	f000 fe94 	bl	800afb8 <UARTDMA_Print>
			break;
 800a290:	e09e      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 800a292:	495e      	ldr	r1, [pc, #376]	; (800a40c <SendComand+0x2a4>)
 800a294:	4852      	ldr	r0, [pc, #328]	; (800a3e0 <SendComand+0x278>)
 800a296:	f000 fe8f 	bl	800afb8 <UARTDMA_Print>
			break;
 800a29a:	e099      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 800a29c:	495c      	ldr	r1, [pc, #368]	; (800a410 <SendComand+0x2a8>)
 800a29e:	4850      	ldr	r0, [pc, #320]	; (800a3e0 <SendComand+0x278>)
 800a2a0:	f000 fe8a 	bl	800afb8 <UARTDMA_Print>
			break;
 800a2a4:	e094      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 800a2a6:	495b      	ldr	r1, [pc, #364]	; (800a414 <SendComand+0x2ac>)
 800a2a8:	484d      	ldr	r0, [pc, #308]	; (800a3e0 <SendComand+0x278>)
 800a2aa:	f000 fe85 	bl	800afb8 <UARTDMA_Print>
			break;
 800a2ae:	e08f      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 800a2b0:	4959      	ldr	r1, [pc, #356]	; (800a418 <SendComand+0x2b0>)
 800a2b2:	484b      	ldr	r0, [pc, #300]	; (800a3e0 <SendComand+0x278>)
 800a2b4:	f000 fe80 	bl	800afb8 <UARTDMA_Print>
			break;
 800a2b8:	e08a      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 800a2ba:	4958      	ldr	r1, [pc, #352]	; (800a41c <SendComand+0x2b4>)
 800a2bc:	4848      	ldr	r0, [pc, #288]	; (800a3e0 <SendComand+0x278>)
 800a2be:	f000 fe7b 	bl	800afb8 <UARTDMA_Print>
			break;
 800a2c2:	e085      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 800a2c4:	4956      	ldr	r1, [pc, #344]	; (800a420 <SendComand+0x2b8>)
 800a2c6:	4846      	ldr	r0, [pc, #280]	; (800a3e0 <SendComand+0x278>)
 800a2c8:	f000 fe76 	bl	800afb8 <UARTDMA_Print>
			break;
 800a2cc:	e080      	b.n	800a3d0 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 800a2ce:	4955      	ldr	r1, [pc, #340]	; (800a424 <SendComand+0x2bc>)
 800a2d0:	4843      	ldr	r0, [pc, #268]	; (800a3e0 <SendComand+0x278>)
 800a2d2:	f000 fe71 	bl	800afb8 <UARTDMA_Print>
			break;
 800a2d6:	e07b      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 800a2d8:	4953      	ldr	r1, [pc, #332]	; (800a428 <SendComand+0x2c0>)
 800a2da:	4841      	ldr	r0, [pc, #260]	; (800a3e0 <SendComand+0x278>)
 800a2dc:	f000 fe6c 	bl	800afb8 <UARTDMA_Print>
			break;
 800a2e0:	e076      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 800a2e2:	4952      	ldr	r1, [pc, #328]	; (800a42c <SendComand+0x2c4>)
 800a2e4:	483e      	ldr	r0, [pc, #248]	; (800a3e0 <SendComand+0x278>)
 800a2e6:	f000 fe67 	bl	800afb8 <UARTDMA_Print>
			break;
 800a2ea:	e071      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 800a2ec:	4950      	ldr	r1, [pc, #320]	; (800a430 <SendComand+0x2c8>)
 800a2ee:	483c      	ldr	r0, [pc, #240]	; (800a3e0 <SendComand+0x278>)
 800a2f0:	f000 fe62 	bl	800afb8 <UARTDMA_Print>
			break;
 800a2f4:	e06c      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 800a2f6:	494f      	ldr	r1, [pc, #316]	; (800a434 <SendComand+0x2cc>)
 800a2f8:	4839      	ldr	r0, [pc, #228]	; (800a3e0 <SendComand+0x278>)
 800a2fa:	f000 fe5d 	bl	800afb8 <UARTDMA_Print>
			break;
 800a2fe:	e067      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 800a300:	494d      	ldr	r1, [pc, #308]	; (800a438 <SendComand+0x2d0>)
 800a302:	4837      	ldr	r0, [pc, #220]	; (800a3e0 <SendComand+0x278>)
 800a304:	f000 fe58 	bl	800afb8 <UARTDMA_Print>
			break;
 800a308:	e062      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 800a30a:	494c      	ldr	r1, [pc, #304]	; (800a43c <SendComand+0x2d4>)
 800a30c:	4834      	ldr	r0, [pc, #208]	; (800a3e0 <SendComand+0x278>)
 800a30e:	f000 fe53 	bl	800afb8 <UARTDMA_Print>
			break;
 800a312:	e05d      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 800a314:	494a      	ldr	r1, [pc, #296]	; (800a440 <SendComand+0x2d8>)
 800a316:	4832      	ldr	r0, [pc, #200]	; (800a3e0 <SendComand+0x278>)
 800a318:	f000 fe4e 	bl	800afb8 <UARTDMA_Print>
			break;
 800a31c:	e058      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 800a31e:	4949      	ldr	r1, [pc, #292]	; (800a444 <SendComand+0x2dc>)
 800a320:	482f      	ldr	r0, [pc, #188]	; (800a3e0 <SendComand+0x278>)
 800a322:	f000 fe49 	bl	800afb8 <UARTDMA_Print>
			break;
 800a326:	e053      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 800a328:	4947      	ldr	r1, [pc, #284]	; (800a448 <SendComand+0x2e0>)
 800a32a:	482d      	ldr	r0, [pc, #180]	; (800a3e0 <SendComand+0x278>)
 800a32c:	f000 fe44 	bl	800afb8 <UARTDMA_Print>
			break;
 800a330:	e04e      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 800a332:	4946      	ldr	r1, [pc, #280]	; (800a44c <SendComand+0x2e4>)
 800a334:	482a      	ldr	r0, [pc, #168]	; (800a3e0 <SendComand+0x278>)
 800a336:	f000 fe3f 	bl	800afb8 <UARTDMA_Print>
			break;
 800a33a:	e049      	b.n	800a3d0 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 800a33c:	4944      	ldr	r1, [pc, #272]	; (800a450 <SendComand+0x2e8>)
 800a33e:	4828      	ldr	r0, [pc, #160]	; (800a3e0 <SendComand+0x278>)
 800a340:	f000 fe3a 	bl	800afb8 <UARTDMA_Print>
			break;
 800a344:	e044      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 800a346:	4943      	ldr	r1, [pc, #268]	; (800a454 <SendComand+0x2ec>)
 800a348:	4825      	ldr	r0, [pc, #148]	; (800a3e0 <SendComand+0x278>)
 800a34a:	f000 fe35 	bl	800afb8 <UARTDMA_Print>
			break;
 800a34e:	e03f      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 800a350:	4941      	ldr	r1, [pc, #260]	; (800a458 <SendComand+0x2f0>)
 800a352:	4823      	ldr	r0, [pc, #140]	; (800a3e0 <SendComand+0x278>)
 800a354:	f000 fe30 	bl	800afb8 <UARTDMA_Print>
			break;
 800a358:	e03a      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 800a35a:	4940      	ldr	r1, [pc, #256]	; (800a45c <SendComand+0x2f4>)
 800a35c:	4820      	ldr	r0, [pc, #128]	; (800a3e0 <SendComand+0x278>)
 800a35e:	f000 fe2b 	bl	800afb8 <UARTDMA_Print>
			break;
 800a362:	e035      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 800a364:	493e      	ldr	r1, [pc, #248]	; (800a460 <SendComand+0x2f8>)
 800a366:	481e      	ldr	r0, [pc, #120]	; (800a3e0 <SendComand+0x278>)
 800a368:	f000 fe26 	bl	800afb8 <UARTDMA_Print>
			break;
 800a36c:	e030      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 800a36e:	493d      	ldr	r1, [pc, #244]	; (800a464 <SendComand+0x2fc>)
 800a370:	481b      	ldr	r0, [pc, #108]	; (800a3e0 <SendComand+0x278>)
 800a372:	f000 fe21 	bl	800afb8 <UARTDMA_Print>
			break;
 800a376:	e02b      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 800a378:	493b      	ldr	r1, [pc, #236]	; (800a468 <SendComand+0x300>)
 800a37a:	4819      	ldr	r0, [pc, #100]	; (800a3e0 <SendComand+0x278>)
 800a37c:	f000 fe1c 	bl	800afb8 <UARTDMA_Print>
			break;
 800a380:	e026      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 800a382:	493a      	ldr	r1, [pc, #232]	; (800a46c <SendComand+0x304>)
 800a384:	4816      	ldr	r0, [pc, #88]	; (800a3e0 <SendComand+0x278>)
 800a386:	f000 fe17 	bl	800afb8 <UARTDMA_Print>
			break;
 800a38a:	e021      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 800a38c:	4938      	ldr	r1, [pc, #224]	; (800a470 <SendComand+0x308>)
 800a38e:	4814      	ldr	r0, [pc, #80]	; (800a3e0 <SendComand+0x278>)
 800a390:	f000 fe12 	bl	800afb8 <UARTDMA_Print>
			break;
 800a394:	e01c      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 800a396:	4b37      	ldr	r3, [pc, #220]	; (800a474 <SendComand+0x30c>)
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	2b08      	cmp	r3, #8
 800a39c:	d802      	bhi.n	800a3a4 <SendComand+0x23c>
 800a39e:	4b35      	ldr	r3, [pc, #212]	; (800a474 <SendComand+0x30c>)
 800a3a0:	2209      	movs	r2, #9
 800a3a2:	701a      	strb	r2, [r3, #0]
			sprintf(MessageP, "CHLIGHT=9,%d\n", NrOfLeds);
 800a3a4:	4b33      	ldr	r3, [pc, #204]	; (800a474 <SendComand+0x30c>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	4933      	ldr	r1, [pc, #204]	; (800a478 <SendComand+0x310>)
 800a3ac:	4833      	ldr	r0, [pc, #204]	; (800a47c <SendComand+0x314>)
 800a3ae:	f008 ff67 	bl	8013280 <siprintf>
			UARTDMA_Print(&huartdma2, MessageP); // Print message
 800a3b2:	4932      	ldr	r1, [pc, #200]	; (800a47c <SendComand+0x314>)
 800a3b4:	480a      	ldr	r0, [pc, #40]	; (800a3e0 <SendComand+0x278>)
 800a3b6:	f000 fdff 	bl	800afb8 <UARTDMA_Print>
			break;
 800a3ba:	e009      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 800a3bc:	4930      	ldr	r1, [pc, #192]	; (800a480 <SendComand+0x318>)
 800a3be:	4808      	ldr	r0, [pc, #32]	; (800a3e0 <SendComand+0x278>)
 800a3c0:	f000 fdfa 	bl	800afb8 <UARTDMA_Print>
			break;
 800a3c4:	e004      	b.n	800a3d0 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 800a3c6:	492f      	ldr	r1, [pc, #188]	; (800a484 <SendComand+0x31c>)
 800a3c8:	4805      	ldr	r0, [pc, #20]	; (800a3e0 <SendComand+0x278>)
 800a3ca:	f000 fdf5 	bl	800afb8 <UARTDMA_Print>
			break;
 800a3ce:	bf00      	nop
		}
	return 1;
 800a3d0:	2301      	movs	r3, #1
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	080177f0 	.word	0x080177f0
 800a3e0:	20000488 	.word	0x20000488
 800a3e4:	080177f8 	.word	0x080177f8
 800a3e8:	08017800 	.word	0x08017800
 800a3ec:	0801780c 	.word	0x0801780c
 800a3f0:	08017814 	.word	0x08017814
 800a3f4:	0801781c 	.word	0x0801781c
 800a3f8:	08017824 	.word	0x08017824
 800a3fc:	08017834 	.word	0x08017834
 800a400:	08017844 	.word	0x08017844
 800a404:	08017854 	.word	0x08017854
 800a408:	08017864 	.word	0x08017864
 800a40c:	08017874 	.word	0x08017874
 800a410:	08017884 	.word	0x08017884
 800a414:	08017894 	.word	0x08017894
 800a418:	080178a4 	.word	0x080178a4
 800a41c:	080178b4 	.word	0x080178b4
 800a420:	080178c4 	.word	0x080178c4
 800a424:	080178d4 	.word	0x080178d4
 800a428:	080178e4 	.word	0x080178e4
 800a42c:	080178f4 	.word	0x080178f4
 800a430:	08017904 	.word	0x08017904
 800a434:	08017914 	.word	0x08017914
 800a438:	08017924 	.word	0x08017924
 800a43c:	08017934 	.word	0x08017934
 800a440:	08017944 	.word	0x08017944
 800a444:	08017954 	.word	0x08017954
 800a448:	08017964 	.word	0x08017964
 800a44c:	08017974 	.word	0x08017974
 800a450:	08017984 	.word	0x08017984
 800a454:	08017994 	.word	0x08017994
 800a458:	080179a4 	.word	0x080179a4
 800a45c:	080179b4 	.word	0x080179b4
 800a460:	080179c4 	.word	0x080179c4
 800a464:	080179d4 	.word	0x080179d4
 800a468:	080179e4 	.word	0x080179e4
 800a46c:	080179f4 	.word	0x080179f4
 800a470:	08017a04 	.word	0x08017a04
 800a474:	20000034 	.word	0x20000034
 800a478:	08017a14 	.word	0x08017a14
 800a47c:	200008ec 	.word	0x200008ec
 800a480:	08017a24 	.word	0x08017a24
 800a484:	08017a34 	.word	0x08017a34

0800a488 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	781a      	ldrb	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	785b      	ldrb	r3, [r3, #1]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d101      	bne.n	800a4a2 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e015      	b.n	800a4ce <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	785b      	ldrb	r3, [r3, #1]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	789a      	ldrb	r2, [r3, #2]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	785b      	ldrb	r3, [r3, #1]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	425a      	negs	r2, r3
 800a4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4c2:	bf58      	it	pl
 800a4c4:	4253      	negpl	r3, r2
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b085      	sub	sp, #20
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	425a      	negs	r2, r3
 800a4ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4f6:	bf58      	it	pl
 800a4f8:	4253      	negpl	r3, r2
 800a4fa:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	785b      	ldrb	r3, [r3, #1]
 800a500:	7bfa      	ldrb	r2, [r7, #15]
 800a502:	429a      	cmp	r2, r3
 800a504:	d101      	bne.n	800a50a <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 800a506:	2301      	movs	r3, #1
 800a508:	e00a      	b.n	800a520 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4413      	add	r3, r2
 800a514:	78fa      	ldrb	r2, [r7, #3]
 800a516:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	7bfa      	ldrb	r2, [r7, #15]
 800a51c:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800a530:	4b17      	ldr	r3, [pc, #92]	; (800a590 <MX_SPI1_Init+0x64>)
 800a532:	4a18      	ldr	r2, [pc, #96]	; (800a594 <MX_SPI1_Init+0x68>)
 800a534:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a536:	4b16      	ldr	r3, [pc, #88]	; (800a590 <MX_SPI1_Init+0x64>)
 800a538:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a53c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a53e:	4b14      	ldr	r3, [pc, #80]	; (800a590 <MX_SPI1_Init+0x64>)
 800a540:	2200      	movs	r2, #0
 800a542:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a544:	4b12      	ldr	r3, [pc, #72]	; (800a590 <MX_SPI1_Init+0x64>)
 800a546:	2200      	movs	r2, #0
 800a548:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a54a:	4b11      	ldr	r3, [pc, #68]	; (800a590 <MX_SPI1_Init+0x64>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a550:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <MX_SPI1_Init+0x64>)
 800a552:	2200      	movs	r2, #0
 800a554:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a556:	4b0e      	ldr	r3, [pc, #56]	; (800a590 <MX_SPI1_Init+0x64>)
 800a558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a55c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800a55e:	4b0c      	ldr	r3, [pc, #48]	; (800a590 <MX_SPI1_Init+0x64>)
 800a560:	2210      	movs	r2, #16
 800a562:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a564:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <MX_SPI1_Init+0x64>)
 800a566:	2200      	movs	r2, #0
 800a568:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a56a:	4b09      	ldr	r3, [pc, #36]	; (800a590 <MX_SPI1_Init+0x64>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a570:	4b07      	ldr	r3, [pc, #28]	; (800a590 <MX_SPI1_Init+0x64>)
 800a572:	2200      	movs	r2, #0
 800a574:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a576:	4b06      	ldr	r3, [pc, #24]	; (800a590 <MX_SPI1_Init+0x64>)
 800a578:	220a      	movs	r2, #10
 800a57a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a57c:	4804      	ldr	r0, [pc, #16]	; (800a590 <MX_SPI1_Init+0x64>)
 800a57e:	f005 fd57 	bl	8010030 <HAL_SPI_Init>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d001      	beq.n	800a58c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a588:	f7fb fe7e 	bl	8006288 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a58c:	bf00      	nop
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	2000098c 	.word	0x2000098c
 800a594:	40013000 	.word	0x40013000

0800a598 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800a59c:	4b17      	ldr	r3, [pc, #92]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a59e:	4a18      	ldr	r2, [pc, #96]	; (800a600 <MX_SPI3_Init+0x68>)
 800a5a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a5a2:	4b16      	ldr	r3, [pc, #88]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a5a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a5a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a5aa:	4b14      	ldr	r3, [pc, #80]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a5b0:	4b12      	ldr	r3, [pc, #72]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5b6:	4b11      	ldr	r3, [pc, #68]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a5bc:	4b0f      	ldr	r3, [pc, #60]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a5c2:	4b0e      	ldr	r3, [pc, #56]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a5c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5c8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a5ca:	4b0c      	ldr	r3, [pc, #48]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a5cc:	2220      	movs	r2, #32
 800a5ce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a5d0:	4b0a      	ldr	r3, [pc, #40]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a5d6:	4b09      	ldr	r3, [pc, #36]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5dc:	4b07      	ldr	r3, [pc, #28]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800a5e2:	4b06      	ldr	r3, [pc, #24]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a5e4:	220a      	movs	r2, #10
 800a5e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a5e8:	4804      	ldr	r0, [pc, #16]	; (800a5fc <MX_SPI3_Init+0x64>)
 800a5ea:	f005 fd21 	bl	8010030 <HAL_SPI_Init>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800a5f4:	f7fb fe48 	bl	8006288 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a5f8:	bf00      	nop
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	200009e4 	.word	0x200009e4
 800a600:	40003c00 	.word	0x40003c00

0800a604 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800a608:	4b17      	ldr	r3, [pc, #92]	; (800a668 <MX_SPI5_Init+0x64>)
 800a60a:	4a18      	ldr	r2, [pc, #96]	; (800a66c <MX_SPI5_Init+0x68>)
 800a60c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800a60e:	4b16      	ldr	r3, [pc, #88]	; (800a668 <MX_SPI5_Init+0x64>)
 800a610:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a614:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800a616:	4b14      	ldr	r3, [pc, #80]	; (800a668 <MX_SPI5_Init+0x64>)
 800a618:	2200      	movs	r2, #0
 800a61a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800a61c:	4b12      	ldr	r3, [pc, #72]	; (800a668 <MX_SPI5_Init+0x64>)
 800a61e:	2200      	movs	r2, #0
 800a620:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a622:	4b11      	ldr	r3, [pc, #68]	; (800a668 <MX_SPI5_Init+0x64>)
 800a624:	2200      	movs	r2, #0
 800a626:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a628:	4b0f      	ldr	r3, [pc, #60]	; (800a668 <MX_SPI5_Init+0x64>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800a62e:	4b0e      	ldr	r3, [pc, #56]	; (800a668 <MX_SPI5_Init+0x64>)
 800a630:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a634:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a636:	4b0c      	ldr	r3, [pc, #48]	; (800a668 <MX_SPI5_Init+0x64>)
 800a638:	2200      	movs	r2, #0
 800a63a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a63c:	4b0a      	ldr	r3, [pc, #40]	; (800a668 <MX_SPI5_Init+0x64>)
 800a63e:	2200      	movs	r2, #0
 800a640:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800a642:	4b09      	ldr	r3, [pc, #36]	; (800a668 <MX_SPI5_Init+0x64>)
 800a644:	2200      	movs	r2, #0
 800a646:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a648:	4b07      	ldr	r3, [pc, #28]	; (800a668 <MX_SPI5_Init+0x64>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800a64e:	4b06      	ldr	r3, [pc, #24]	; (800a668 <MX_SPI5_Init+0x64>)
 800a650:	220a      	movs	r2, #10
 800a652:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800a654:	4804      	ldr	r0, [pc, #16]	; (800a668 <MX_SPI5_Init+0x64>)
 800a656:	f005 fceb 	bl	8010030 <HAL_SPI_Init>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800a660:	f7fb fe12 	bl	8006288 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800a664:	bf00      	nop
 800a666:	bd80      	pop	{r7, pc}
 800a668:	20000a3c 	.word	0x20000a3c
 800a66c:	40015000 	.word	0x40015000

0800a670 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08e      	sub	sp, #56	; 0x38
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a67c:	2200      	movs	r2, #0
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	605a      	str	r2, [r3, #4]
 800a682:	609a      	str	r2, [r3, #8]
 800a684:	60da      	str	r2, [r3, #12]
 800a686:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a5a      	ldr	r2, [pc, #360]	; (800a7f8 <HAL_SPI_MspInit+0x188>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d12c      	bne.n	800a6ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a692:	2300      	movs	r3, #0
 800a694:	623b      	str	r3, [r7, #32]
 800a696:	4b59      	ldr	r3, [pc, #356]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a69a:	4a58      	ldr	r2, [pc, #352]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a69c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6a0:	6453      	str	r3, [r2, #68]	; 0x44
 800a6a2:	4b56      	ldr	r3, [pc, #344]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a6a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6aa:	623b      	str	r3, [r7, #32]
 800a6ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	61fb      	str	r3, [r7, #28]
 800a6b2:	4b52      	ldr	r3, [pc, #328]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b6:	4a51      	ldr	r2, [pc, #324]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a6b8:	f043 0301 	orr.w	r3, r3, #1
 800a6bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a6be:	4b4f      	ldr	r3, [pc, #316]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	61fb      	str	r3, [r7, #28]
 800a6c8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 800a6ca:	23e0      	movs	r3, #224	; 0xe0
 800a6cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ce:	2302      	movs	r3, #2
 800a6d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a6da:	2305      	movs	r3, #5
 800a6dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4846      	ldr	r0, [pc, #280]	; (800a800 <HAL_SPI_MspInit+0x190>)
 800a6e6:	f001 fd5f 	bl	800c1a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800a6ea:	e081      	b.n	800a7f0 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a44      	ldr	r2, [pc, #272]	; (800a804 <HAL_SPI_MspInit+0x194>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d12c      	bne.n	800a750 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	61bb      	str	r3, [r7, #24]
 800a6fa:	4b40      	ldr	r3, [pc, #256]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fe:	4a3f      	ldr	r2, [pc, #252]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a704:	6413      	str	r3, [r2, #64]	; 0x40
 800a706:	4b3d      	ldr	r3, [pc, #244]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a70e:	61bb      	str	r3, [r7, #24]
 800a710:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a712:	2300      	movs	r3, #0
 800a714:	617b      	str	r3, [r7, #20]
 800a716:	4b39      	ldr	r3, [pc, #228]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71a:	4a38      	ldr	r2, [pc, #224]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a71c:	f043 0302 	orr.w	r3, r3, #2
 800a720:	6313      	str	r3, [r2, #48]	; 0x30
 800a722:	4b36      	ldr	r3, [pc, #216]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a726:	f003 0302 	and.w	r3, r3, #2
 800a72a:	617b      	str	r3, [r7, #20]
 800a72c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 800a72e:	2338      	movs	r3, #56	; 0x38
 800a730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a732:	2302      	movs	r3, #2
 800a734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a736:	2300      	movs	r3, #0
 800a738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a73a:	2303      	movs	r3, #3
 800a73c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a73e:	2306      	movs	r3, #6
 800a740:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a746:	4619      	mov	r1, r3
 800a748:	482f      	ldr	r0, [pc, #188]	; (800a808 <HAL_SPI_MspInit+0x198>)
 800a74a:	f001 fd2d 	bl	800c1a8 <HAL_GPIO_Init>
}
 800a74e:	e04f      	b.n	800a7f0 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a2d      	ldr	r2, [pc, #180]	; (800a80c <HAL_SPI_MspInit+0x19c>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d14a      	bne.n	800a7f0 <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800a75a:	2300      	movs	r3, #0
 800a75c:	613b      	str	r3, [r7, #16]
 800a75e:	4b27      	ldr	r3, [pc, #156]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a762:	4a26      	ldr	r2, [pc, #152]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a768:	6453      	str	r3, [r2, #68]	; 0x44
 800a76a:	4b24      	ldr	r3, [pc, #144]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a76e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a772:	613b      	str	r3, [r7, #16]
 800a774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a776:	2300      	movs	r3, #0
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	4b20      	ldr	r3, [pc, #128]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77e:	4a1f      	ldr	r2, [pc, #124]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a780:	f043 0302 	orr.w	r3, r3, #2
 800a784:	6313      	str	r3, [r2, #48]	; 0x30
 800a786:	4b1d      	ldr	r3, [pc, #116]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	60fb      	str	r3, [r7, #12]
 800a790:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a792:	2300      	movs	r3, #0
 800a794:	60bb      	str	r3, [r7, #8]
 800a796:	4b19      	ldr	r3, [pc, #100]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79a:	4a18      	ldr	r2, [pc, #96]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a79c:	f043 0301 	orr.w	r3, r3, #1
 800a7a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a7a2:	4b16      	ldr	r3, [pc, #88]	; (800a7fc <HAL_SPI_MspInit+0x18c>)
 800a7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	60bb      	str	r3, [r7, #8]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800a7be:	2306      	movs	r3, #6
 800a7c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 800a7c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	480f      	ldr	r0, [pc, #60]	; (800a808 <HAL_SPI_MspInit+0x198>)
 800a7ca:	f001 fced 	bl	800c1a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 800a7ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a7d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800a7e0:	2306      	movs	r3, #6
 800a7e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	4805      	ldr	r0, [pc, #20]	; (800a800 <HAL_SPI_MspInit+0x190>)
 800a7ec:	f001 fcdc 	bl	800c1a8 <HAL_GPIO_Init>
}
 800a7f0:	bf00      	nop
 800a7f2:	3738      	adds	r7, #56	; 0x38
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	40013000 	.word	0x40013000
 800a7fc:	40023800 	.word	0x40023800
 800a800:	40020000 	.word	0x40020000
 800a804:	40003c00 	.word	0x40003c00
 800a808:	40020400 	.word	0x40020400
 800a80c:	40015000 	.word	0x40015000

0800a810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a816:	2300      	movs	r3, #0
 800a818:	607b      	str	r3, [r7, #4]
 800a81a:	4b10      	ldr	r3, [pc, #64]	; (800a85c <HAL_MspInit+0x4c>)
 800a81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a81e:	4a0f      	ldr	r2, [pc, #60]	; (800a85c <HAL_MspInit+0x4c>)
 800a820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a824:	6453      	str	r3, [r2, #68]	; 0x44
 800a826:	4b0d      	ldr	r3, [pc, #52]	; (800a85c <HAL_MspInit+0x4c>)
 800a828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a82a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a82e:	607b      	str	r3, [r7, #4]
 800a830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a832:	2300      	movs	r3, #0
 800a834:	603b      	str	r3, [r7, #0]
 800a836:	4b09      	ldr	r3, [pc, #36]	; (800a85c <HAL_MspInit+0x4c>)
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	4a08      	ldr	r2, [pc, #32]	; (800a85c <HAL_MspInit+0x4c>)
 800a83c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a840:	6413      	str	r3, [r2, #64]	; 0x40
 800a842:	4b06      	ldr	r3, [pc, #24]	; (800a85c <HAL_MspInit+0x4c>)
 800a844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a84a:	603b      	str	r3, [r7, #0]
 800a84c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a84e:	bf00      	nop
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	40023800 	.word	0x40023800

0800a860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a860:	b480      	push	{r7}
 800a862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a864:	e7fe      	b.n	800a864 <NMI_Handler+0x4>

0800a866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a866:	b480      	push	{r7}
 800a868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a86a:	e7fe      	b.n	800a86a <HardFault_Handler+0x4>

0800a86c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a86c:	b480      	push	{r7}
 800a86e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a870:	e7fe      	b.n	800a870 <MemManage_Handler+0x4>

0800a872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a872:	b480      	push	{r7}
 800a874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a876:	e7fe      	b.n	800a876 <BusFault_Handler+0x4>

0800a878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a878:	b480      	push	{r7}
 800a87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a87c:	e7fe      	b.n	800a87c <UsageFault_Handler+0x4>

0800a87e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a87e:	b480      	push	{r7}
 800a880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a882:	bf00      	nop
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a88c:	b480      	push	{r7}
 800a88e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a890:	bf00      	nop
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a89a:	b480      	push	{r7}
 800a89c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a89e:	bf00      	nop
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a8ac:	f000 fe88 	bl	800b5c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a8b0:	bf00      	nop
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART2_TX_2uC_Pin);
 800a8b8:	2004      	movs	r0, #4
 800a8ba:	f001 fe45 	bl	800c548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800a8be:	bf00      	nop
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 800a8c6:	2010      	movs	r0, #16
 800a8c8:	f001 fe3e 	bl	800c548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800a8cc:	bf00      	nop
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800a8d4:	4802      	ldr	r0, [pc, #8]	; (800a8e0 <DMA1_Stream0_IRQHandler+0x10>)
 800a8d6:	f001 f9ef 	bl	800bcb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800a8da:	bf00      	nop
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	200003c8 	.word	0x200003c8

0800a8e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800a8e8:	4802      	ldr	r0, [pc, #8]	; (800a8f4 <DMA1_Stream1_IRQHandler+0x10>)
 800a8ea:	f001 f9e5 	bl	800bcb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800a8ee:	bf00      	nop
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20000428 	.word	0x20000428

0800a8f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 800a8fc:	4802      	ldr	r0, [pc, #8]	; (800a908 <DMA1_Stream5_IRQHandler+0x10>)
 800a8fe:	f000 faa5 	bl	800ae4c <UARTDMA_DmaReceiveIrqHandler>
	return;
 800a902:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	20000488 	.word	0x20000488

0800a90c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800a910:	4802      	ldr	r0, [pc, #8]	; (800a91c <DMA1_Stream6_IRQHandler+0x10>)
 800a912:	f001 f9d1 	bl	800bcb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800a916:	bf00      	nop
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	20000d18 	.word	0x20000d18

0800a920 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 800a924:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a928:	f001 fe0e 	bl	800c548 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a92c:	bf00      	nop
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800a934:	4802      	ldr	r0, [pc, #8]	; (800a940 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a936:	f006 f9a4 	bl	8010c82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a93a:	bf00      	nop
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20000ae0 	.word	0x20000ae0

0800a944 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800a948:	4802      	ldr	r0, [pc, #8]	; (800a954 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800a94a:	f006 f99a 	bl	8010c82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800a94e:	bf00      	nop
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20000b28 	.word	0x20000b28

0800a958 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800a95c:	4802      	ldr	r0, [pc, #8]	; (800a968 <I2C1_EV_IRQHandler+0x10>)
 800a95e:	f002 fd93 	bl	800d488 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800a962:	bf00      	nop
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20000320 	.word	0x20000320

0800a96c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800a970:	4802      	ldr	r0, [pc, #8]	; (800a97c <I2C1_ER_IRQHandler+0x10>)
 800a972:	f002 fefa 	bl	800d76a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800a976:	bf00      	nop
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	20000320 	.word	0x20000320

0800a980 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma1);
 800a984:	4803      	ldr	r0, [pc, #12]	; (800a994 <USART1_IRQHandler+0x14>)
 800a986:	f000 fa37 	bl	800adf8 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a98a:	4803      	ldr	r0, [pc, #12]	; (800a998 <USART1_IRQHandler+0x18>)
 800a98c:	f006 fcce 	bl	801132c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a990:	bf00      	nop
 800a992:	bd80      	pop	{r7, pc}
 800a994:	20000654 	.word	0x20000654
 800a998:	20000b70 	.word	0x20000b70

0800a99c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 800a9a0:	4803      	ldr	r0, [pc, #12]	; (800a9b0 <USART2_IRQHandler+0x14>)
 800a9a2:	f000 fa29 	bl	800adf8 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a9a6:	4803      	ldr	r0, [pc, #12]	; (800a9b4 <USART2_IRQHandler+0x18>)
 800a9a8:	f006 fcc0 	bl	801132c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a9ac:	bf00      	nop
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	20000488 	.word	0x20000488
 800a9b4:	20000bb4 	.word	0x20000bb4

0800a9b8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800a9bc:	4802      	ldr	r0, [pc, #8]	; (800a9c8 <SPI3_IRQHandler+0x10>)
 800a9be:	f005 fd63 	bl	8010488 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800a9c2:	bf00      	nop
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	200009e4 	.word	0x200009e4

0800a9cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma1);
 800a9d0:	4802      	ldr	r0, [pc, #8]	; (800a9dc <DMA2_Stream2_IRQHandler+0x10>)
 800a9d2:	f000 fa3b 	bl	800ae4c <UARTDMA_DmaReceiveIrqHandler>
	return;
 800a9d6:	bf00      	nop
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	20000654 	.word	0x20000654

0800a9e0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a9e4:	4802      	ldr	r0, [pc, #8]	; (800a9f0 <DMA2_Stream7_IRQHandler+0x10>)
 800a9e6:	f001 f967 	bl	800bcb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800a9ea:	bf00      	nop
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	20000c58 	.word	0x20000c58

0800a9f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	af00      	add	r7, sp, #0
	return 1;
 800a9f8:	2301      	movs	r3, #1
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <_kill>:

int _kill(int pid, int sig)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800aa0e:	f007 fd85 	bl	801251c <__errno>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2216      	movs	r2, #22
 800aa16:	601a      	str	r2, [r3, #0]
	return -1;
 800aa18:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <_exit>:

void _exit (int status)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800aa2c:	f04f 31ff 	mov.w	r1, #4294967295
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff ffe7 	bl	800aa04 <_kill>
	while (1) {}		/* Make sure we hang here */
 800aa36:	e7fe      	b.n	800aa36 <_exit+0x12>

0800aa38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa44:	2300      	movs	r3, #0
 800aa46:	617b      	str	r3, [r7, #20]
 800aa48:	e00a      	b.n	800aa60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800aa4a:	f3af 8000 	nop.w
 800aa4e:	4601      	mov	r1, r0
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	60ba      	str	r2, [r7, #8]
 800aa56:	b2ca      	uxtb	r2, r1
 800aa58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	617b      	str	r3, [r7, #20]
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	dbf0      	blt.n	800aa4a <_read+0x12>
	}

return len;
 800aa68:	687b      	ldr	r3, [r7, #4]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3718      	adds	r7, #24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b086      	sub	sp, #24
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	60f8      	str	r0, [r7, #12]
 800aa7a:	60b9      	str	r1, [r7, #8]
 800aa7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa7e:	2300      	movs	r3, #0
 800aa80:	617b      	str	r3, [r7, #20]
 800aa82:	e009      	b.n	800aa98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	60ba      	str	r2, [r7, #8]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	3301      	adds	r3, #1
 800aa96:	617b      	str	r3, [r7, #20]
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	dbf1      	blt.n	800aa84 <_write+0x12>
	}
	return len;
 800aaa0:	687b      	ldr	r3, [r7, #4]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <_close>:

int _close(int file)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
	return -1;
 800aab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b083      	sub	sp, #12
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800aad2:	605a      	str	r2, [r3, #4]
	return 0;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <_isatty>:

int _isatty(int file)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
	return 1;
 800aaea:	2301      	movs	r3, #1
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
	return 0;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
	...

0800ab14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ab1c:	4a14      	ldr	r2, [pc, #80]	; (800ab70 <_sbrk+0x5c>)
 800ab1e:	4b15      	ldr	r3, [pc, #84]	; (800ab74 <_sbrk+0x60>)
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ab28:	4b13      	ldr	r3, [pc, #76]	; (800ab78 <_sbrk+0x64>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d102      	bne.n	800ab36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ab30:	4b11      	ldr	r3, [pc, #68]	; (800ab78 <_sbrk+0x64>)
 800ab32:	4a12      	ldr	r2, [pc, #72]	; (800ab7c <_sbrk+0x68>)
 800ab34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ab36:	4b10      	ldr	r3, [pc, #64]	; (800ab78 <_sbrk+0x64>)
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d207      	bcs.n	800ab54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ab44:	f007 fcea 	bl	801251c <__errno>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	220c      	movs	r2, #12
 800ab4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ab4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab52:	e009      	b.n	800ab68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ab54:	4b08      	ldr	r3, [pc, #32]	; (800ab78 <_sbrk+0x64>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ab5a:	4b07      	ldr	r3, [pc, #28]	; (800ab78 <_sbrk+0x64>)
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4413      	add	r3, r2
 800ab62:	4a05      	ldr	r2, [pc, #20]	; (800ab78 <_sbrk+0x64>)
 800ab64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ab66:	68fb      	ldr	r3, [r7, #12]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	20020000 	.word	0x20020000
 800ab74:	00000400 	.word	0x00000400
 800ab78:	20000a94 	.word	0x20000a94
 800ab7c:	20000d90 	.word	0x20000d90

0800ab80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ab80:	b480      	push	{r7}
 800ab82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ab84:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <SystemInit+0x20>)
 800ab86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab8a:	4a05      	ldr	r2, [pc, #20]	; (800aba0 <SystemInit+0x20>)
 800ab8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ab94:	bf00      	nop
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	e000ed00 	.word	0xe000ed00

0800aba4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b08c      	sub	sp, #48	; 0x30
 800aba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800abaa:	f107 030c 	add.w	r3, r7, #12
 800abae:	2224      	movs	r2, #36	; 0x24
 800abb0:	2100      	movs	r1, #0
 800abb2:	4618      	mov	r0, r3
 800abb4:	f007 fcdc 	bl	8012570 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abb8:	1d3b      	adds	r3, r7, #4
 800abba:	2200      	movs	r2, #0
 800abbc:	601a      	str	r2, [r3, #0]
 800abbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800abc0:	4b21      	ldr	r3, [pc, #132]	; (800ac48 <MX_TIM2_Init+0xa4>)
 800abc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800abc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800abc8:	4b1f      	ldr	r3, [pc, #124]	; (800ac48 <MX_TIM2_Init+0xa4>)
 800abca:	2200      	movs	r2, #0
 800abcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abce:	4b1e      	ldr	r3, [pc, #120]	; (800ac48 <MX_TIM2_Init+0xa4>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800abd4:	4b1c      	ldr	r3, [pc, #112]	; (800ac48 <MX_TIM2_Init+0xa4>)
 800abd6:	f04f 32ff 	mov.w	r2, #4294967295
 800abda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800abdc:	4b1a      	ldr	r3, [pc, #104]	; (800ac48 <MX_TIM2_Init+0xa4>)
 800abde:	2200      	movs	r2, #0
 800abe0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800abe2:	4b19      	ldr	r3, [pc, #100]	; (800ac48 <MX_TIM2_Init+0xa4>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800abe8:	2301      	movs	r3, #1
 800abea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800abec:	2300      	movs	r3, #0
 800abee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800abf0:	2301      	movs	r3, #1
 800abf2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800abf4:	2300      	movs	r3, #0
 800abf6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800abfc:	2300      	movs	r3, #0
 800abfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ac00:	2301      	movs	r3, #1
 800ac02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ac04:	2300      	movs	r3, #0
 800ac06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800ac0c:	f107 030c 	add.w	r3, r7, #12
 800ac10:	4619      	mov	r1, r3
 800ac12:	480d      	ldr	r0, [pc, #52]	; (800ac48 <MX_TIM2_Init+0xa4>)
 800ac14:	f005 ff01 	bl	8010a1a <HAL_TIM_Encoder_Init>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800ac1e:	f7fb fb33 	bl	8006288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac22:	2300      	movs	r3, #0
 800ac24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac26:	2300      	movs	r3, #0
 800ac28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ac2a:	1d3b      	adds	r3, r7, #4
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	4806      	ldr	r0, [pc, #24]	; (800ac48 <MX_TIM2_Init+0xa4>)
 800ac30:	f006 f9fe 	bl	8011030 <HAL_TIMEx_MasterConfigSynchronization>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800ac3a:	f7fb fb25 	bl	8006288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800ac3e:	bf00      	nop
 800ac40:	3730      	adds	r7, #48	; 0x30
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	20000a98 	.word	0x20000a98

0800ac4c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800ac50:	4b0e      	ldr	r3, [pc, #56]	; (800ac8c <MX_TIM10_Init+0x40>)
 800ac52:	4a0f      	ldr	r2, [pc, #60]	; (800ac90 <MX_TIM10_Init+0x44>)
 800ac54:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 800ac56:	4b0d      	ldr	r3, [pc, #52]	; (800ac8c <MX_TIM10_Init+0x40>)
 800ac58:	f242 720f 	movw	r2, #9999	; 0x270f
 800ac5c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac5e:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <MX_TIM10_Init+0x40>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 800ac64:	4b09      	ldr	r3, [pc, #36]	; (800ac8c <MX_TIM10_Init+0x40>)
 800ac66:	f242 720f 	movw	r2, #9999	; 0x270f
 800ac6a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac6c:	4b07      	ldr	r3, [pc, #28]	; (800ac8c <MX_TIM10_Init+0x40>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac72:	4b06      	ldr	r3, [pc, #24]	; (800ac8c <MX_TIM10_Init+0x40>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800ac78:	4804      	ldr	r0, [pc, #16]	; (800ac8c <MX_TIM10_Init+0x40>)
 800ac7a:	f005 fded 	bl	8010858 <HAL_TIM_Base_Init>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d001      	beq.n	800ac88 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800ac84:	f7fb fb00 	bl	8006288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800ac88:	bf00      	nop
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	20000ae0 	.word	0x20000ae0
 800ac90:	40014400 	.word	0x40014400

0800ac94 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800ac98:	4b0f      	ldr	r3, [pc, #60]	; (800acd8 <MX_TIM11_Init+0x44>)
 800ac9a:	4a10      	ldr	r2, [pc, #64]	; (800acdc <MX_TIM11_Init+0x48>)
 800ac9c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800ac9e:	4b0e      	ldr	r3, [pc, #56]	; (800acd8 <MX_TIM11_Init+0x44>)
 800aca0:	f643 2297 	movw	r2, #14999	; 0x3a97
 800aca4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aca6:	4b0c      	ldr	r3, [pc, #48]	; (800acd8 <MX_TIM11_Init+0x44>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 800acac:	4b0a      	ldr	r3, [pc, #40]	; (800acd8 <MX_TIM11_Init+0x44>)
 800acae:	f247 522f 	movw	r2, #29999	; 0x752f
 800acb2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800acb4:	4b08      	ldr	r3, [pc, #32]	; (800acd8 <MX_TIM11_Init+0x44>)
 800acb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800acbc:	4b06      	ldr	r3, [pc, #24]	; (800acd8 <MX_TIM11_Init+0x44>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800acc2:	4805      	ldr	r0, [pc, #20]	; (800acd8 <MX_TIM11_Init+0x44>)
 800acc4:	f005 fdc8 	bl	8010858 <HAL_TIM_Base_Init>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800acce:	f7fb fadb 	bl	8006288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800acd2:	bf00      	nop
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	20000b28 	.word	0x20000b28
 800acdc:	40014800 	.word	0x40014800

0800ace0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08a      	sub	sp, #40	; 0x28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ace8:	f107 0314 	add.w	r3, r7, #20
 800acec:	2200      	movs	r2, #0
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	605a      	str	r2, [r3, #4]
 800acf2:	609a      	str	r2, [r3, #8]
 800acf4:	60da      	str	r2, [r3, #12]
 800acf6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad00:	d12b      	bne.n	800ad5a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ad02:	2300      	movs	r3, #0
 800ad04:	613b      	str	r3, [r7, #16]
 800ad06:	4b17      	ldr	r3, [pc, #92]	; (800ad64 <HAL_TIM_Encoder_MspInit+0x84>)
 800ad08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0a:	4a16      	ldr	r2, [pc, #88]	; (800ad64 <HAL_TIM_Encoder_MspInit+0x84>)
 800ad0c:	f043 0301 	orr.w	r3, r3, #1
 800ad10:	6413      	str	r3, [r2, #64]	; 0x40
 800ad12:	4b14      	ldr	r3, [pc, #80]	; (800ad64 <HAL_TIM_Encoder_MspInit+0x84>)
 800ad14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	613b      	str	r3, [r7, #16]
 800ad1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
 800ad22:	4b10      	ldr	r3, [pc, #64]	; (800ad64 <HAL_TIM_Encoder_MspInit+0x84>)
 800ad24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad26:	4a0f      	ldr	r2, [pc, #60]	; (800ad64 <HAL_TIM_Encoder_MspInit+0x84>)
 800ad28:	f043 0301 	orr.w	r3, r3, #1
 800ad2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad2e:	4b0d      	ldr	r3, [pc, #52]	; (800ad64 <HAL_TIM_Encoder_MspInit+0x84>)
 800ad30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	60fb      	str	r3, [r7, #12]
 800ad38:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad3e:	2302      	movs	r3, #2
 800ad40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad42:	2300      	movs	r3, #0
 800ad44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad46:	2300      	movs	r3, #0
 800ad48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad4e:	f107 0314 	add.w	r3, r7, #20
 800ad52:	4619      	mov	r1, r3
 800ad54:	4804      	ldr	r0, [pc, #16]	; (800ad68 <HAL_TIM_Encoder_MspInit+0x88>)
 800ad56:	f001 fa27 	bl	800c1a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800ad5a:	bf00      	nop
 800ad5c:	3728      	adds	r7, #40	; 0x28
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	40023800 	.word	0x40023800
 800ad68:	40020000 	.word	0x40020000

0800ad6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a1c      	ldr	r2, [pc, #112]	; (800adec <HAL_TIM_Base_MspInit+0x80>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d116      	bne.n	800adac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800ad7e:	2300      	movs	r3, #0
 800ad80:	60fb      	str	r3, [r7, #12]
 800ad82:	4b1b      	ldr	r3, [pc, #108]	; (800adf0 <HAL_TIM_Base_MspInit+0x84>)
 800ad84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad86:	4a1a      	ldr	r2, [pc, #104]	; (800adf0 <HAL_TIM_Base_MspInit+0x84>)
 800ad88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad8c:	6453      	str	r3, [r2, #68]	; 0x44
 800ad8e:	4b18      	ldr	r3, [pc, #96]	; (800adf0 <HAL_TIM_Base_MspInit+0x84>)
 800ad90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad96:	60fb      	str	r3, [r7, #12]
 800ad98:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	2019      	movs	r0, #25
 800ada0:	f000 fd91 	bl	800b8c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800ada4:	2019      	movs	r0, #25
 800ada6:	f000 fdaa 	bl	800b8fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800adaa:	e01a      	b.n	800ade2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a10      	ldr	r2, [pc, #64]	; (800adf4 <HAL_TIM_Base_MspInit+0x88>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d115      	bne.n	800ade2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800adb6:	2300      	movs	r3, #0
 800adb8:	60bb      	str	r3, [r7, #8]
 800adba:	4b0d      	ldr	r3, [pc, #52]	; (800adf0 <HAL_TIM_Base_MspInit+0x84>)
 800adbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adbe:	4a0c      	ldr	r2, [pc, #48]	; (800adf0 <HAL_TIM_Base_MspInit+0x84>)
 800adc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800adc4:	6453      	str	r3, [r2, #68]	; 0x44
 800adc6:	4b0a      	ldr	r3, [pc, #40]	; (800adf0 <HAL_TIM_Base_MspInit+0x84>)
 800adc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adce:	60bb      	str	r3, [r7, #8]
 800add0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800add2:	2200      	movs	r2, #0
 800add4:	2100      	movs	r1, #0
 800add6:	201a      	movs	r0, #26
 800add8:	f000 fd75 	bl	800b8c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800addc:	201a      	movs	r0, #26
 800adde:	f000 fd8e 	bl	800b8fe <HAL_NVIC_EnableIRQ>
}
 800ade2:	bf00      	nop
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	40014400 	.word	0x40014400
 800adf0:	40023800 	.word	0x40023800
 800adf4:	40014800 	.word	0x40014800

0800adf8 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 0310 	and.w	r3, r3, #16
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d017      	beq.n	800ae40 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f022 0201 	bic.w	r2, r2, #1
 800ae3a:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	60fb      	str	r3, [r7, #12]
	}
}
 800ae40:	bf00      	nop
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae5c:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0310 	and.w	r3, r3, #16
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d056      	beq.n	800af1e <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae78:	2220      	movs	r2, #32
 800ae7a:	409a      	lsls	r2, r3
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800ae90:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	3304      	adds	r3, #4
 800ae96:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800ae98:	2300      	movs	r3, #0
 800ae9a:	82fb      	strh	r3, [r7, #22]
 800ae9c:	e01a      	b.n	800aed4 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800aea4:	8afb      	ldrh	r3, [r7, #22]
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	4413      	add	r3, r2
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	4619      	mov	r1, r3
 800aeae:	f7ff fb14 	bl	800a4da <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 800aeb2:	8afb      	ldrh	r3, [r7, #22]
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	2b0a      	cmp	r3, #10
 800aebc:	d107      	bne.n	800aece <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800aec4:	3301      	adds	r3, #1
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800aece:	8afb      	ldrh	r3, [r7, #22]
 800aed0:	3301      	adds	r3, #1
 800aed2:	82fb      	strh	r3, [r7, #22]
 800aed4:	8afa      	ldrh	r2, [r7, #22]
 800aed6:	89fb      	ldrh	r3, [r7, #14]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d3e0      	bcc.n	800ae9e <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aee4:	223f      	movs	r2, #63	; 0x3f
 800aee6:	409a      	lsls	r2, r3
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	1d1a      	adds	r2, r3, #4
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2240      	movs	r2, #64	; 0x40
 800af04:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f042 0201 	orr.w	r2, r2, #1
 800af1c:	601a      	str	r2, [r3, #0]
	}
}
 800af1e:	bf00      	nop
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b082      	sub	sp, #8
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	460b      	mov	r3, r1
 800af30:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f203 1347 	addw	r3, r3, #327	; 0x147
 800af38:	78fa      	ldrb	r2, [r7, #3]
 800af3a:	4611      	mov	r1, r2
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7ff facc 	bl	800a4da <RB_Write>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 800af48:	2301      	movs	r3, #1
 800af4a:	e000      	b.n	800af4e <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b084      	sub	sp, #16
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
 800af5e:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d01f      	beq.n	800afae <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800af6e:	e013      	b.n	800af98 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	2b0a      	cmp	r3, #10
 800af76:	d10c      	bne.n	800af92 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800af84:	3b01      	subs	r3, #1
 800af86:	b2da      	uxtb	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 800af8e:	2300      	movs	r3, #0
 800af90:	e00e      	b.n	800afb0 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	3301      	adds	r3, #1
 800af96:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	3344      	adds	r3, #68	; 0x44
 800af9c:	68f9      	ldr	r1, [r7, #12]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7ff fa72 	bl	800a488 <RB_Read>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0e2      	beq.n	800af70 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 800afaa:	2300      	movs	r3, #0
 800afac:	e000      	b.n	800afb0 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 800afae:	2301      	movs	r3, #1
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800afc6:	e012      	b.n	800afee <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 800afc8:	7afb      	ldrb	r3, [r7, #11]
 800afca:	4619      	mov	r1, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff ffaa 	bl	800af26 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	3301      	adds	r3, #1
 800afd6:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 800afd8:	7afb      	ldrb	r3, [r7, #11]
 800afda:	2b0a      	cmp	r3, #10
 800afdc:	d107      	bne.n	800afee <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800afe4:	3301      	adds	r3, #1
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	72fb      	strb	r3, [r7, #11]
 800aff4:	7afb      	ldrb	r3, [r7, #11]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1e6      	bne.n	800afc8 <UARTDMA_Print+0x10>
		}
	}
}
 800affa:	bf00      	nop
 800affc:	bf00      	nop
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 800b016:	2301      	movs	r3, #1
 800b018:	e000      	b.n	800b01c <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 800b030:	2300      	movs	r3, #0
 800b032:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b02      	cmp	r3, #2
 800b042:	d028      	beq.n	800b096 <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800b044:	e013      	b.n	800b06e <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 800b046:	7b7b      	ldrb	r3, [r7, #13]
 800b048:	2b0a      	cmp	r3, #10
 800b04a:	d107      	bne.n	800b05c <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 800b052:	3b01      	subs	r3, #1
 800b054:	b2da      	uxtb	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 800b05c:	89fb      	ldrh	r3, [r7, #14]
 800b05e:	1c5a      	adds	r2, r3, #1
 800b060:	81fa      	strh	r2, [r7, #14]
 800b062:	4619      	mov	r1, r3
 800b064:	7b7a      	ldrb	r2, [r7, #13]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	440b      	add	r3, r1
 800b06a:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f203 1347 	addw	r3, r3, #327	; 0x147
 800b074:	f107 020d 	add.w	r2, r7, #13
 800b078:	4611      	mov	r1, r2
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff fa04 	bl	800a488 <RB_Read>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d0df      	beq.n	800b046 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6818      	ldr	r0, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	33c7      	adds	r3, #199	; 0xc7
 800b08e:	89fa      	ldrh	r2, [r7, #14]
 800b090:	4619      	mov	r1, r3
 800b092:	f006 f89d 	bl	80111d0 <HAL_UART_Transmit_DMA>
	}
}
 800b096:	bf00      	nop
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b082      	sub	sp, #8
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68da      	ldr	r2, [r3, #12]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f042 0210 	orr.w	r2, r2, #16
 800b0c0:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f042 0210 	orr.w	r2, r2, #16
 800b0d8:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f042 0210 	orr.w	r2, r2, #16
 800b0f0:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6818      	ldr	r0, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	2240      	movs	r2, #64	; 0x40
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	f006 f8e5 	bl	80112cc <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f022 0208 	bic.w	r2, r2, #8
 800b118:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f022 0208 	bic.w	r2, r2, #8
 800b130:	601a      	str	r2, [r3, #0]
}
 800b132:	bf00      	nop
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
	...

0800b13c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b140:	4b11      	ldr	r3, [pc, #68]	; (800b188 <MX_USART1_UART_Init+0x4c>)
 800b142:	4a12      	ldr	r2, [pc, #72]	; (800b18c <MX_USART1_UART_Init+0x50>)
 800b144:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b146:	4b10      	ldr	r3, [pc, #64]	; (800b188 <MX_USART1_UART_Init+0x4c>)
 800b148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b14c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b14e:	4b0e      	ldr	r3, [pc, #56]	; (800b188 <MX_USART1_UART_Init+0x4c>)
 800b150:	2200      	movs	r2, #0
 800b152:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b154:	4b0c      	ldr	r3, [pc, #48]	; (800b188 <MX_USART1_UART_Init+0x4c>)
 800b156:	2200      	movs	r2, #0
 800b158:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b15a:	4b0b      	ldr	r3, [pc, #44]	; (800b188 <MX_USART1_UART_Init+0x4c>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b160:	4b09      	ldr	r3, [pc, #36]	; (800b188 <MX_USART1_UART_Init+0x4c>)
 800b162:	220c      	movs	r2, #12
 800b164:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b166:	4b08      	ldr	r3, [pc, #32]	; (800b188 <MX_USART1_UART_Init+0x4c>)
 800b168:	2200      	movs	r2, #0
 800b16a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b16c:	4b06      	ldr	r3, [pc, #24]	; (800b188 <MX_USART1_UART_Init+0x4c>)
 800b16e:	2200      	movs	r2, #0
 800b170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b172:	4805      	ldr	r0, [pc, #20]	; (800b188 <MX_USART1_UART_Init+0x4c>)
 800b174:	f005 ffde 	bl	8011134 <HAL_UART_Init>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d001      	beq.n	800b182 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800b17e:	f7fb f883 	bl	8006288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b182:	bf00      	nop
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	20000b70 	.word	0x20000b70
 800b18c:	40011000 	.word	0x40011000

0800b190 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b194:	4b11      	ldr	r3, [pc, #68]	; (800b1dc <MX_USART2_UART_Init+0x4c>)
 800b196:	4a12      	ldr	r2, [pc, #72]	; (800b1e0 <MX_USART2_UART_Init+0x50>)
 800b198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800b19a:	4b10      	ldr	r3, [pc, #64]	; (800b1dc <MX_USART2_UART_Init+0x4c>)
 800b19c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b1a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b1a2:	4b0e      	ldr	r3, [pc, #56]	; (800b1dc <MX_USART2_UART_Init+0x4c>)
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b1a8:	4b0c      	ldr	r3, [pc, #48]	; (800b1dc <MX_USART2_UART_Init+0x4c>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b1ae:	4b0b      	ldr	r3, [pc, #44]	; (800b1dc <MX_USART2_UART_Init+0x4c>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b1b4:	4b09      	ldr	r3, [pc, #36]	; (800b1dc <MX_USART2_UART_Init+0x4c>)
 800b1b6:	220c      	movs	r2, #12
 800b1b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b1ba:	4b08      	ldr	r3, [pc, #32]	; (800b1dc <MX_USART2_UART_Init+0x4c>)
 800b1bc:	2200      	movs	r2, #0
 800b1be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b1c0:	4b06      	ldr	r3, [pc, #24]	; (800b1dc <MX_USART2_UART_Init+0x4c>)
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b1c6:	4805      	ldr	r0, [pc, #20]	; (800b1dc <MX_USART2_UART_Init+0x4c>)
 800b1c8:	f005 ffb4 	bl	8011134 <HAL_UART_Init>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800b1d2:	f7fb f859 	bl	8006288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b1d6:	bf00      	nop
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	20000bb4 	.word	0x20000bb4
 800b1e0:	40004400 	.word	0x40004400

0800b1e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b08c      	sub	sp, #48	; 0x30
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1ec:	f107 031c 	add.w	r3, r7, #28
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	601a      	str	r2, [r3, #0]
 800b1f4:	605a      	str	r2, [r3, #4]
 800b1f6:	609a      	str	r2, [r3, #8]
 800b1f8:	60da      	str	r2, [r3, #12]
 800b1fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a59      	ldr	r2, [pc, #356]	; (800b368 <HAL_UART_MspInit+0x184>)
 800b202:	4293      	cmp	r3, r2
 800b204:	f040 80c0 	bne.w	800b388 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b208:	2300      	movs	r3, #0
 800b20a:	61bb      	str	r3, [r7, #24]
 800b20c:	4b57      	ldr	r3, [pc, #348]	; (800b36c <HAL_UART_MspInit+0x188>)
 800b20e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b210:	4a56      	ldr	r2, [pc, #344]	; (800b36c <HAL_UART_MspInit+0x188>)
 800b212:	f043 0310 	orr.w	r3, r3, #16
 800b216:	6453      	str	r3, [r2, #68]	; 0x44
 800b218:	4b54      	ldr	r3, [pc, #336]	; (800b36c <HAL_UART_MspInit+0x188>)
 800b21a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b21c:	f003 0310 	and.w	r3, r3, #16
 800b220:	61bb      	str	r3, [r7, #24]
 800b222:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b224:	2300      	movs	r3, #0
 800b226:	617b      	str	r3, [r7, #20]
 800b228:	4b50      	ldr	r3, [pc, #320]	; (800b36c <HAL_UART_MspInit+0x188>)
 800b22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22c:	4a4f      	ldr	r2, [pc, #316]	; (800b36c <HAL_UART_MspInit+0x188>)
 800b22e:	f043 0301 	orr.w	r3, r3, #1
 800b232:	6313      	str	r3, [r2, #48]	; 0x30
 800b234:	4b4d      	ldr	r3, [pc, #308]	; (800b36c <HAL_UART_MspInit+0x188>)
 800b236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b238:	f003 0301 	and.w	r3, r3, #1
 800b23c:	617b      	str	r3, [r7, #20]
 800b23e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b240:	2300      	movs	r3, #0
 800b242:	613b      	str	r3, [r7, #16]
 800b244:	4b49      	ldr	r3, [pc, #292]	; (800b36c <HAL_UART_MspInit+0x188>)
 800b246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b248:	4a48      	ldr	r2, [pc, #288]	; (800b36c <HAL_UART_MspInit+0x188>)
 800b24a:	f043 0302 	orr.w	r3, r3, #2
 800b24e:	6313      	str	r3, [r2, #48]	; 0x30
 800b250:	4b46      	ldr	r3, [pc, #280]	; (800b36c <HAL_UART_MspInit+0x188>)
 800b252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b254:	f003 0302 	and.w	r3, r3, #2
 800b258:	613b      	str	r3, [r7, #16]
 800b25a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 800b25c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b262:	2302      	movs	r3, #2
 800b264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b266:	2300      	movs	r3, #0
 800b268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b26a:	2303      	movs	r3, #3
 800b26c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b26e:	2307      	movs	r3, #7
 800b270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 800b272:	f107 031c 	add.w	r3, r7, #28
 800b276:	4619      	mov	r1, r3
 800b278:	483d      	ldr	r0, [pc, #244]	; (800b370 <HAL_UART_MspInit+0x18c>)
 800b27a:	f000 ff95 	bl	800c1a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 800b27e:	2380      	movs	r3, #128	; 0x80
 800b280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b282:	2302      	movs	r3, #2
 800b284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b286:	2300      	movs	r3, #0
 800b288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b28a:	2303      	movs	r3, #3
 800b28c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b28e:	2307      	movs	r3, #7
 800b290:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 800b292:	f107 031c 	add.w	r3, r7, #28
 800b296:	4619      	mov	r1, r3
 800b298:	4836      	ldr	r0, [pc, #216]	; (800b374 <HAL_UART_MspInit+0x190>)
 800b29a:	f000 ff85 	bl	800c1a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800b29e:	4b36      	ldr	r3, [pc, #216]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2a0:	4a36      	ldr	r2, [pc, #216]	; (800b37c <HAL_UART_MspInit+0x198>)
 800b2a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800b2a4:	4b34      	ldr	r3, [pc, #208]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b2aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b2ac:	4b32      	ldr	r3, [pc, #200]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b2b2:	4b31      	ldr	r3, [pc, #196]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b2b8:	4b2f      	ldr	r3, [pc, #188]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b2be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b2c0:	4b2d      	ldr	r3, [pc, #180]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b2c6:	4b2c      	ldr	r3, [pc, #176]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800b2cc:	4b2a      	ldr	r3, [pc, #168]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b2d2:	4b29      	ldr	r3, [pc, #164]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b2d8:	4b27      	ldr	r3, [pc, #156]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800b2de:	4826      	ldr	r0, [pc, #152]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2e0:	f000 fb52 	bl	800b988 <HAL_DMA_Init>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d001      	beq.n	800b2ee <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800b2ea:	f7fa ffcd 	bl	8006288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a21      	ldr	r2, [pc, #132]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2f2:	639a      	str	r2, [r3, #56]	; 0x38
 800b2f4:	4a20      	ldr	r2, [pc, #128]	; (800b378 <HAL_UART_MspInit+0x194>)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800b2fa:	4b21      	ldr	r3, [pc, #132]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b2fc:	4a21      	ldr	r2, [pc, #132]	; (800b384 <HAL_UART_MspInit+0x1a0>)
 800b2fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800b300:	4b1f      	ldr	r3, [pc, #124]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b306:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b308:	4b1d      	ldr	r3, [pc, #116]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b30a:	2240      	movs	r2, #64	; 0x40
 800b30c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b30e:	4b1c      	ldr	r3, [pc, #112]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b310:	2200      	movs	r2, #0
 800b312:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b314:	4b1a      	ldr	r3, [pc, #104]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b31a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b31c:	4b18      	ldr	r3, [pc, #96]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b31e:	2200      	movs	r2, #0
 800b320:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b322:	4b17      	ldr	r3, [pc, #92]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b324:	2200      	movs	r2, #0
 800b326:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800b328:	4b15      	ldr	r3, [pc, #84]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b32e:	4b14      	ldr	r3, [pc, #80]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b330:	2200      	movs	r2, #0
 800b332:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b334:	4b12      	ldr	r3, [pc, #72]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b336:	2200      	movs	r2, #0
 800b338:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800b33a:	4811      	ldr	r0, [pc, #68]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b33c:	f000 fb24 	bl	800b988 <HAL_DMA_Init>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800b346:	f7fa ff9f 	bl	8006288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a0c      	ldr	r2, [pc, #48]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b34e:	635a      	str	r2, [r3, #52]	; 0x34
 800b350:	4a0b      	ldr	r2, [pc, #44]	; (800b380 <HAL_UART_MspInit+0x19c>)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800b356:	2200      	movs	r2, #0
 800b358:	2100      	movs	r1, #0
 800b35a:	2025      	movs	r0, #37	; 0x25
 800b35c:	f000 fab3 	bl	800b8c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b360:	2025      	movs	r0, #37	; 0x25
 800b362:	f000 facc 	bl	800b8fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800b366:	e09d      	b.n	800b4a4 <HAL_UART_MspInit+0x2c0>
 800b368:	40011000 	.word	0x40011000
 800b36c:	40023800 	.word	0x40023800
 800b370:	40020000 	.word	0x40020000
 800b374:	40020400 	.word	0x40020400
 800b378:	20000bf8 	.word	0x20000bf8
 800b37c:	40026440 	.word	0x40026440
 800b380:	20000c58 	.word	0x20000c58
 800b384:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a47      	ldr	r2, [pc, #284]	; (800b4ac <HAL_UART_MspInit+0x2c8>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	f040 8088 	bne.w	800b4a4 <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b394:	2300      	movs	r3, #0
 800b396:	60fb      	str	r3, [r7, #12]
 800b398:	4b45      	ldr	r3, [pc, #276]	; (800b4b0 <HAL_UART_MspInit+0x2cc>)
 800b39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b39c:	4a44      	ldr	r2, [pc, #272]	; (800b4b0 <HAL_UART_MspInit+0x2cc>)
 800b39e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3a2:	6413      	str	r3, [r2, #64]	; 0x40
 800b3a4:	4b42      	ldr	r3, [pc, #264]	; (800b4b0 <HAL_UART_MspInit+0x2cc>)
 800b3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3ac:	60fb      	str	r3, [r7, #12]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	60bb      	str	r3, [r7, #8]
 800b3b4:	4b3e      	ldr	r3, [pc, #248]	; (800b4b0 <HAL_UART_MspInit+0x2cc>)
 800b3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b8:	4a3d      	ldr	r2, [pc, #244]	; (800b4b0 <HAL_UART_MspInit+0x2cc>)
 800b3ba:	f043 0301 	orr.w	r3, r3, #1
 800b3be:	6313      	str	r3, [r2, #48]	; 0x30
 800b3c0:	4b3b      	ldr	r3, [pc, #236]	; (800b4b0 <HAL_UART_MspInit+0x2cc>)
 800b3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c4:	f003 0301 	and.w	r3, r3, #1
 800b3c8:	60bb      	str	r3, [r7, #8]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 800b3cc:	230c      	movs	r3, #12
 800b3ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b3dc:	2307      	movs	r3, #7
 800b3de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3e0:	f107 031c 	add.w	r3, r7, #28
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	4833      	ldr	r0, [pc, #204]	; (800b4b4 <HAL_UART_MspInit+0x2d0>)
 800b3e8:	f000 fede 	bl	800c1a8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800b3ec:	4b32      	ldr	r3, [pc, #200]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b3ee:	4a33      	ldr	r2, [pc, #204]	; (800b4bc <HAL_UART_MspInit+0x2d8>)
 800b3f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800b3f2:	4b31      	ldr	r3, [pc, #196]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b3f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b3f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b3fa:	4b2f      	ldr	r3, [pc, #188]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b400:	4b2d      	ldr	r3, [pc, #180]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b402:	2200      	movs	r2, #0
 800b404:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b406:	4b2c      	ldr	r3, [pc, #176]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b40c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b40e:	4b2a      	ldr	r3, [pc, #168]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b410:	2200      	movs	r2, #0
 800b412:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b414:	4b28      	ldr	r3, [pc, #160]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b416:	2200      	movs	r2, #0
 800b418:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800b41a:	4b27      	ldr	r3, [pc, #156]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b420:	4b25      	ldr	r3, [pc, #148]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b422:	2200      	movs	r2, #0
 800b424:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b426:	4b24      	ldr	r3, [pc, #144]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b428:	2200      	movs	r2, #0
 800b42a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800b42c:	4822      	ldr	r0, [pc, #136]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b42e:	f000 faab 	bl	800b988 <HAL_DMA_Init>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <HAL_UART_MspInit+0x258>
      Error_Handler();
 800b438:	f7fa ff26 	bl	8006288 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a1e      	ldr	r2, [pc, #120]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b440:	639a      	str	r2, [r3, #56]	; 0x38
 800b442:	4a1d      	ldr	r2, [pc, #116]	; (800b4b8 <HAL_UART_MspInit+0x2d4>)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800b448:	4b1d      	ldr	r3, [pc, #116]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b44a:	4a1e      	ldr	r2, [pc, #120]	; (800b4c4 <HAL_UART_MspInit+0x2e0>)
 800b44c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800b44e:	4b1c      	ldr	r3, [pc, #112]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b450:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b454:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b456:	4b1a      	ldr	r3, [pc, #104]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b458:	2240      	movs	r2, #64	; 0x40
 800b45a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b45c:	4b18      	ldr	r3, [pc, #96]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b45e:	2200      	movs	r2, #0
 800b460:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b462:	4b17      	ldr	r3, [pc, #92]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b468:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b46a:	4b15      	ldr	r3, [pc, #84]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b470:	4b13      	ldr	r3, [pc, #76]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b472:	2200      	movs	r2, #0
 800b474:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800b476:	4b12      	ldr	r3, [pc, #72]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b478:	2200      	movs	r2, #0
 800b47a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b47c:	4b10      	ldr	r3, [pc, #64]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b47e:	2200      	movs	r2, #0
 800b480:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b482:	4b0f      	ldr	r3, [pc, #60]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b484:	2200      	movs	r2, #0
 800b486:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800b488:	480d      	ldr	r0, [pc, #52]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b48a:	f000 fa7d 	bl	800b988 <HAL_DMA_Init>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 800b494:	f7fa fef8 	bl	8006288 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a09      	ldr	r2, [pc, #36]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b49c:	635a      	str	r2, [r3, #52]	; 0x34
 800b49e:	4a08      	ldr	r2, [pc, #32]	; (800b4c0 <HAL_UART_MspInit+0x2dc>)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6393      	str	r3, [r2, #56]	; 0x38
}
 800b4a4:	bf00      	nop
 800b4a6:	3730      	adds	r7, #48	; 0x30
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	40004400 	.word	0x40004400
 800b4b0:	40023800 	.word	0x40023800
 800b4b4:	40020000 	.word	0x40020000
 800b4b8:	20000cb8 	.word	0x20000cb8
 800b4bc:	40026088 	.word	0x40026088
 800b4c0:	20000d18 	.word	0x20000d18
 800b4c4:	400260a0 	.word	0x400260a0

0800b4c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b4c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b4cc:	480d      	ldr	r0, [pc, #52]	; (800b504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b4ce:	490e      	ldr	r1, [pc, #56]	; (800b508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b4d0:	4a0e      	ldr	r2, [pc, #56]	; (800b50c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b4d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b4d4:	e002      	b.n	800b4dc <LoopCopyDataInit>

0800b4d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b4d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b4d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b4da:	3304      	adds	r3, #4

0800b4dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b4dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b4de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b4e0:	d3f9      	bcc.n	800b4d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b4e2:	4a0b      	ldr	r2, [pc, #44]	; (800b510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b4e4:	4c0b      	ldr	r4, [pc, #44]	; (800b514 <LoopFillZerobss+0x26>)
  movs r3, #0
 800b4e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b4e8:	e001      	b.n	800b4ee <LoopFillZerobss>

0800b4ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b4ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b4ec:	3204      	adds	r2, #4

0800b4ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b4ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b4f0:	d3fb      	bcc.n	800b4ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b4f2:	f7ff fb45 	bl	800ab80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b4f6:	f007 f817 	bl	8012528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b4fa:	f7fa fd63 	bl	8005fc4 <main>
  bx  lr    
 800b4fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b508:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 800b50c:	0802b0a0 	.word	0x0802b0a0
  ldr r2, =_sbss
 800b510:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800b514:	20000d8c 	.word	0x20000d8c

0800b518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b518:	e7fe      	b.n	800b518 <ADC_IRQHandler>
	...

0800b51c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b520:	4b0e      	ldr	r3, [pc, #56]	; (800b55c <HAL_Init+0x40>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a0d      	ldr	r2, [pc, #52]	; (800b55c <HAL_Init+0x40>)
 800b526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b52a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b52c:	4b0b      	ldr	r3, [pc, #44]	; (800b55c <HAL_Init+0x40>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a0a      	ldr	r2, [pc, #40]	; (800b55c <HAL_Init+0x40>)
 800b532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b538:	4b08      	ldr	r3, [pc, #32]	; (800b55c <HAL_Init+0x40>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a07      	ldr	r2, [pc, #28]	; (800b55c <HAL_Init+0x40>)
 800b53e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b544:	2003      	movs	r0, #3
 800b546:	f000 f9b3 	bl	800b8b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b54a:	2000      	movs	r0, #0
 800b54c:	f000 f808 	bl	800b560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b550:	f7ff f95e 	bl	800a810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	40023c00 	.word	0x40023c00

0800b560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b568:	4b12      	ldr	r3, [pc, #72]	; (800b5b4 <HAL_InitTick+0x54>)
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	4b12      	ldr	r3, [pc, #72]	; (800b5b8 <HAL_InitTick+0x58>)
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	4619      	mov	r1, r3
 800b572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b576:	fbb3 f3f1 	udiv	r3, r3, r1
 800b57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b57e:	4618      	mov	r0, r3
 800b580:	f000 f9d9 	bl	800b936 <HAL_SYSTICK_Config>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	e00e      	b.n	800b5ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b0f      	cmp	r3, #15
 800b592:	d80a      	bhi.n	800b5aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b594:	2200      	movs	r2, #0
 800b596:	6879      	ldr	r1, [r7, #4]
 800b598:	f04f 30ff 	mov.w	r0, #4294967295
 800b59c:	f000 f993 	bl	800b8c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b5a0:	4a06      	ldr	r2, [pc, #24]	; (800b5bc <HAL_InitTick+0x5c>)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	e000      	b.n	800b5ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	20000038 	.word	0x20000038
 800b5b8:	20000040 	.word	0x20000040
 800b5bc:	2000003c 	.word	0x2000003c

0800b5c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b5c4:	4b06      	ldr	r3, [pc, #24]	; (800b5e0 <HAL_IncTick+0x20>)
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	4b06      	ldr	r3, [pc, #24]	; (800b5e4 <HAL_IncTick+0x24>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	4a04      	ldr	r2, [pc, #16]	; (800b5e4 <HAL_IncTick+0x24>)
 800b5d2:	6013      	str	r3, [r2, #0]
}
 800b5d4:	bf00      	nop
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	20000040 	.word	0x20000040
 800b5e4:	20000d78 	.word	0x20000d78

0800b5e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	af00      	add	r7, sp, #0
  return uwTick;
 800b5ec:	4b03      	ldr	r3, [pc, #12]	; (800b5fc <HAL_GetTick+0x14>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	20000d78 	.word	0x20000d78

0800b600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b608:	f7ff ffee 	bl	800b5e8 <HAL_GetTick>
 800b60c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b618:	d005      	beq.n	800b626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b61a:	4b0a      	ldr	r3, [pc, #40]	; (800b644 <HAL_Delay+0x44>)
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	4413      	add	r3, r2
 800b624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b626:	bf00      	nop
 800b628:	f7ff ffde 	bl	800b5e8 <HAL_GetTick>
 800b62c:	4602      	mov	r2, r0
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	429a      	cmp	r2, r3
 800b636:	d8f7      	bhi.n	800b628 <HAL_Delay+0x28>
  {
  }
}
 800b638:	bf00      	nop
 800b63a:	bf00      	nop
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	20000040 	.word	0x20000040

0800b648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f003 0307 	and.w	r3, r3, #7
 800b656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b658:	4b0c      	ldr	r3, [pc, #48]	; (800b68c <__NVIC_SetPriorityGrouping+0x44>)
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b664:	4013      	ands	r3, r2
 800b666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b67a:	4a04      	ldr	r2, [pc, #16]	; (800b68c <__NVIC_SetPriorityGrouping+0x44>)
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	60d3      	str	r3, [r2, #12]
}
 800b680:	bf00      	nop
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	e000ed00 	.word	0xe000ed00

0800b690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b690:	b480      	push	{r7}
 800b692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b694:	4b04      	ldr	r3, [pc, #16]	; (800b6a8 <__NVIC_GetPriorityGrouping+0x18>)
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	0a1b      	lsrs	r3, r3, #8
 800b69a:	f003 0307 	and.w	r3, r3, #7
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	e000ed00 	.word	0xe000ed00

0800b6ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	db0b      	blt.n	800b6d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b6be:	79fb      	ldrb	r3, [r7, #7]
 800b6c0:	f003 021f 	and.w	r2, r3, #31
 800b6c4:	4907      	ldr	r1, [pc, #28]	; (800b6e4 <__NVIC_EnableIRQ+0x38>)
 800b6c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6ca:	095b      	lsrs	r3, r3, #5
 800b6cc:	2001      	movs	r0, #1
 800b6ce:	fa00 f202 	lsl.w	r2, r0, r2
 800b6d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b6d6:	bf00      	nop
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	e000e100 	.word	0xe000e100

0800b6e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	db12      	blt.n	800b720 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b6fa:	79fb      	ldrb	r3, [r7, #7]
 800b6fc:	f003 021f 	and.w	r2, r3, #31
 800b700:	490a      	ldr	r1, [pc, #40]	; (800b72c <__NVIC_DisableIRQ+0x44>)
 800b702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b706:	095b      	lsrs	r3, r3, #5
 800b708:	2001      	movs	r0, #1
 800b70a:	fa00 f202 	lsl.w	r2, r0, r2
 800b70e:	3320      	adds	r3, #32
 800b710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b714:	f3bf 8f4f 	dsb	sy
}
 800b718:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b71a:	f3bf 8f6f 	isb	sy
}
 800b71e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800b720:	bf00      	nop
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	e000e100 	.word	0xe000e100

0800b730 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	4603      	mov	r3, r0
 800b738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b73a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	db0e      	blt.n	800b760 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800b742:	4a0b      	ldr	r2, [pc, #44]	; (800b770 <__NVIC_GetPendingIRQ+0x40>)
 800b744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b748:	095b      	lsrs	r3, r3, #5
 800b74a:	3340      	adds	r3, #64	; 0x40
 800b74c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b750:	79fb      	ldrb	r3, [r7, #7]
 800b752:	f003 031f 	and.w	r3, r3, #31
 800b756:	fa22 f303 	lsr.w	r3, r2, r3
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	e000      	b.n	800b762 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800b760:	2300      	movs	r3, #0
  }
}
 800b762:	4618      	mov	r0, r3
 800b764:	370c      	adds	r7, #12
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	e000e100 	.word	0xe000e100

0800b774 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	4603      	mov	r3, r0
 800b77c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b77e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b782:	2b00      	cmp	r3, #0
 800b784:	db0c      	blt.n	800b7a0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b786:	79fb      	ldrb	r3, [r7, #7]
 800b788:	f003 021f 	and.w	r2, r3, #31
 800b78c:	4907      	ldr	r1, [pc, #28]	; (800b7ac <__NVIC_ClearPendingIRQ+0x38>)
 800b78e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b792:	095b      	lsrs	r3, r3, #5
 800b794:	2001      	movs	r0, #1
 800b796:	fa00 f202 	lsl.w	r2, r0, r2
 800b79a:	3360      	adds	r3, #96	; 0x60
 800b79c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b7a0:	bf00      	nop
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	e000e100 	.word	0xe000e100

0800b7b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	6039      	str	r1, [r7, #0]
 800b7ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	db0a      	blt.n	800b7da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	490c      	ldr	r1, [pc, #48]	; (800b7fc <__NVIC_SetPriority+0x4c>)
 800b7ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7ce:	0112      	lsls	r2, r2, #4
 800b7d0:	b2d2      	uxtb	r2, r2
 800b7d2:	440b      	add	r3, r1
 800b7d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b7d8:	e00a      	b.n	800b7f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	b2da      	uxtb	r2, r3
 800b7de:	4908      	ldr	r1, [pc, #32]	; (800b800 <__NVIC_SetPriority+0x50>)
 800b7e0:	79fb      	ldrb	r3, [r7, #7]
 800b7e2:	f003 030f 	and.w	r3, r3, #15
 800b7e6:	3b04      	subs	r3, #4
 800b7e8:	0112      	lsls	r2, r2, #4
 800b7ea:	b2d2      	uxtb	r2, r2
 800b7ec:	440b      	add	r3, r1
 800b7ee:	761a      	strb	r2, [r3, #24]
}
 800b7f0:	bf00      	nop
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr
 800b7fc:	e000e100 	.word	0xe000e100
 800b800:	e000ed00 	.word	0xe000ed00

0800b804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b804:	b480      	push	{r7}
 800b806:	b089      	sub	sp, #36	; 0x24
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f003 0307 	and.w	r3, r3, #7
 800b816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	f1c3 0307 	rsb	r3, r3, #7
 800b81e:	2b04      	cmp	r3, #4
 800b820:	bf28      	it	cs
 800b822:	2304      	movcs	r3, #4
 800b824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	3304      	adds	r3, #4
 800b82a:	2b06      	cmp	r3, #6
 800b82c:	d902      	bls.n	800b834 <NVIC_EncodePriority+0x30>
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	3b03      	subs	r3, #3
 800b832:	e000      	b.n	800b836 <NVIC_EncodePriority+0x32>
 800b834:	2300      	movs	r3, #0
 800b836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b838:	f04f 32ff 	mov.w	r2, #4294967295
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	fa02 f303 	lsl.w	r3, r2, r3
 800b842:	43da      	mvns	r2, r3
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	401a      	ands	r2, r3
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b84c:	f04f 31ff 	mov.w	r1, #4294967295
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	fa01 f303 	lsl.w	r3, r1, r3
 800b856:	43d9      	mvns	r1, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b85c:	4313      	orrs	r3, r2
         );
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3724      	adds	r7, #36	; 0x24
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
	...

0800b86c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	3b01      	subs	r3, #1
 800b878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b87c:	d301      	bcc.n	800b882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b87e:	2301      	movs	r3, #1
 800b880:	e00f      	b.n	800b8a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b882:	4a0a      	ldr	r2, [pc, #40]	; (800b8ac <SysTick_Config+0x40>)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	3b01      	subs	r3, #1
 800b888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b88a:	210f      	movs	r1, #15
 800b88c:	f04f 30ff 	mov.w	r0, #4294967295
 800b890:	f7ff ff8e 	bl	800b7b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b894:	4b05      	ldr	r3, [pc, #20]	; (800b8ac <SysTick_Config+0x40>)
 800b896:	2200      	movs	r2, #0
 800b898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b89a:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <SysTick_Config+0x40>)
 800b89c:	2207      	movs	r2, #7
 800b89e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	e000e010 	.word	0xe000e010

0800b8b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff fec5 	bl	800b648 <__NVIC_SetPriorityGrouping>
}
 800b8be:	bf00      	nop
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b086      	sub	sp, #24
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	60b9      	str	r1, [r7, #8]
 800b8d0:	607a      	str	r2, [r7, #4]
 800b8d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b8d8:	f7ff feda 	bl	800b690 <__NVIC_GetPriorityGrouping>
 800b8dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	68b9      	ldr	r1, [r7, #8]
 800b8e2:	6978      	ldr	r0, [r7, #20]
 800b8e4:	f7ff ff8e 	bl	800b804 <NVIC_EncodePriority>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ee:	4611      	mov	r1, r2
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff ff5d 	bl	800b7b0 <__NVIC_SetPriority>
}
 800b8f6:	bf00      	nop
 800b8f8:	3718      	adds	r7, #24
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b082      	sub	sp, #8
 800b902:	af00      	add	r7, sp, #0
 800b904:	4603      	mov	r3, r0
 800b906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff fecd 	bl	800b6ac <__NVIC_EnableIRQ>
}
 800b912:	bf00      	nop
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b082      	sub	sp, #8
 800b91e:	af00      	add	r7, sp, #0
 800b920:	4603      	mov	r3, r0
 800b922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b928:	4618      	mov	r0, r3
 800b92a:	f7ff fedd 	bl	800b6e8 <__NVIC_DisableIRQ>
}
 800b92e:	bf00      	nop
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7ff ff94 	bl	800b86c <SysTick_Config>
 800b944:	4603      	mov	r3, r0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b082      	sub	sp, #8
 800b952:	af00      	add	r7, sp, #0
 800b954:	4603      	mov	r3, r0
 800b956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800b958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7ff fee7 	bl	800b730 <__NVIC_GetPendingIRQ>
 800b962:	4603      	mov	r3, r0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800b976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7ff fefa 	bl	800b774 <__NVIC_ClearPendingIRQ>
}
 800b980:	bf00      	nop
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b990:	2300      	movs	r3, #0
 800b992:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b994:	f7ff fe28 	bl	800b5e8 <HAL_GetTick>
 800b998:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e099      	b.n	800bad8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2202      	movs	r2, #2
 800b9a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f022 0201 	bic.w	r2, r2, #1
 800b9c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b9c4:	e00f      	b.n	800b9e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b9c6:	f7ff fe0f 	bl	800b5e8 <HAL_GetTick>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	1ad3      	subs	r3, r2, r3
 800b9d0:	2b05      	cmp	r3, #5
 800b9d2:	d908      	bls.n	800b9e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2203      	movs	r2, #3
 800b9de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b9e2:	2303      	movs	r3, #3
 800b9e4:	e078      	b.n	800bad8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f003 0301 	and.w	r3, r3, #1
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d1e8      	bne.n	800b9c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b9fc:	697a      	ldr	r2, [r7, #20]
 800b9fe:	4b38      	ldr	r3, [pc, #224]	; (800bae0 <HAL_DMA_Init+0x158>)
 800ba00:	4013      	ands	r3, r2
 800ba02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685a      	ldr	r2, [r3, #4]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	691b      	ldr	r3, [r3, #16]
 800ba18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	699b      	ldr	r3, [r3, #24]
 800ba24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a1b      	ldr	r3, [r3, #32]
 800ba30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba32:	697a      	ldr	r2, [r7, #20]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	2b04      	cmp	r3, #4
 800ba3e:	d107      	bne.n	800ba50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	697a      	ldr	r2, [r7, #20]
 800ba56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	695b      	ldr	r3, [r3, #20]
 800ba5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	f023 0307 	bic.w	r3, r3, #7
 800ba66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba76:	2b04      	cmp	r3, #4
 800ba78:	d117      	bne.n	800baaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00e      	beq.n	800baaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fb0f 	bl	800c0b0 <DMA_CheckFifoParam>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d008      	beq.n	800baaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2240      	movs	r2, #64	; 0x40
 800ba9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2201      	movs	r2, #1
 800baa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800baa6:	2301      	movs	r3, #1
 800baa8:	e016      	b.n	800bad8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fac6 	bl	800c044 <DMA_CalcBaseAndBitshift>
 800bab8:	4603      	mov	r3, r0
 800baba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bac0:	223f      	movs	r2, #63	; 0x3f
 800bac2:	409a      	lsls	r2, r3
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	f010803f 	.word	0xf010803f

0800bae4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bafa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d101      	bne.n	800bb0a <HAL_DMA_Start_IT+0x26>
 800bb06:	2302      	movs	r3, #2
 800bb08:	e040      	b.n	800bb8c <HAL_DMA_Start_IT+0xa8>
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d12f      	bne.n	800bb7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2202      	movs	r2, #2
 800bb22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	68b9      	ldr	r1, [r7, #8]
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f000 fa58 	bl	800bfe8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb3c:	223f      	movs	r2, #63	; 0x3f
 800bb3e:	409a      	lsls	r2, r3
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f042 0216 	orr.w	r2, r2, #22
 800bb52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d007      	beq.n	800bb6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f042 0208 	orr.w	r2, r2, #8
 800bb6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f042 0201 	orr.w	r2, r2, #1
 800bb7a:	601a      	str	r2, [r3, #0]
 800bb7c:	e005      	b.n	800bb8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bb86:	2302      	movs	r3, #2
 800bb88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3718      	adds	r7, #24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bba0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800bba2:	f7ff fd21 	bl	800b5e8 <HAL_GetTick>
 800bba6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d008      	beq.n	800bbc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2280      	movs	r2, #128	; 0x80
 800bbb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e052      	b.n	800bc6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f022 0216 	bic.w	r2, r2, #22
 800bbd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	695a      	ldr	r2, [r3, #20]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbe4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d103      	bne.n	800bbf6 <HAL_DMA_Abort+0x62>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d007      	beq.n	800bc06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f022 0208 	bic.w	r2, r2, #8
 800bc04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f022 0201 	bic.w	r2, r2, #1
 800bc14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bc16:	e013      	b.n	800bc40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bc18:	f7ff fce6 	bl	800b5e8 <HAL_GetTick>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	2b05      	cmp	r3, #5
 800bc24:	d90c      	bls.n	800bc40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2203      	movs	r2, #3
 800bc30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	e015      	b.n	800bc6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f003 0301 	and.w	r3, r3, #1
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1e4      	bne.n	800bc18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc52:	223f      	movs	r2, #63	; 0x3f
 800bc54:	409a      	lsls	r2, r3
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d004      	beq.n	800bc92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2280      	movs	r2, #128	; 0x80
 800bc8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e00c      	b.n	800bcac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2205      	movs	r2, #5
 800bc96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f022 0201 	bic.w	r2, r2, #1
 800bca8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bcc4:	4b8e      	ldr	r3, [pc, #568]	; (800bf00 <HAL_DMA_IRQHandler+0x248>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a8e      	ldr	r2, [pc, #568]	; (800bf04 <HAL_DMA_IRQHandler+0x24c>)
 800bcca:	fba2 2303 	umull	r2, r3, r2, r3
 800bcce:	0a9b      	lsrs	r3, r3, #10
 800bcd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bce2:	2208      	movs	r2, #8
 800bce4:	409a      	lsls	r2, r3
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	4013      	ands	r3, r2
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d01a      	beq.n	800bd24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f003 0304 	and.w	r3, r3, #4
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d013      	beq.n	800bd24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f022 0204 	bic.w	r2, r2, #4
 800bd0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd10:	2208      	movs	r2, #8
 800bd12:	409a      	lsls	r2, r3
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd1c:	f043 0201 	orr.w	r2, r3, #1
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd28:	2201      	movs	r2, #1
 800bd2a:	409a      	lsls	r2, r3
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	4013      	ands	r3, r2
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d012      	beq.n	800bd5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00b      	beq.n	800bd5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd46:	2201      	movs	r2, #1
 800bd48:	409a      	lsls	r2, r3
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd52:	f043 0202 	orr.w	r2, r3, #2
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd5e:	2204      	movs	r2, #4
 800bd60:	409a      	lsls	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	4013      	ands	r3, r2
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d012      	beq.n	800bd90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0302 	and.w	r3, r3, #2
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00b      	beq.n	800bd90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd7c:	2204      	movs	r2, #4
 800bd7e:	409a      	lsls	r2, r3
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd88:	f043 0204 	orr.w	r2, r3, #4
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd94:	2210      	movs	r2, #16
 800bd96:	409a      	lsls	r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d043      	beq.n	800be28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 0308 	and.w	r3, r3, #8
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d03c      	beq.n	800be28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdb2:	2210      	movs	r2, #16
 800bdb4:	409a      	lsls	r2, r3
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d018      	beq.n	800bdfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d108      	bne.n	800bde8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d024      	beq.n	800be28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	4798      	blx	r3
 800bde6:	e01f      	b.n	800be28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d01b      	beq.n	800be28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	4798      	blx	r3
 800bdf8:	e016      	b.n	800be28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be04:	2b00      	cmp	r3, #0
 800be06:	d107      	bne.n	800be18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f022 0208 	bic.w	r2, r2, #8
 800be16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d003      	beq.n	800be28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be2c:	2220      	movs	r2, #32
 800be2e:	409a      	lsls	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4013      	ands	r3, r2
 800be34:	2b00      	cmp	r3, #0
 800be36:	f000 808f 	beq.w	800bf58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f003 0310 	and.w	r3, r3, #16
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 8087 	beq.w	800bf58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be4e:	2220      	movs	r2, #32
 800be50:	409a      	lsls	r2, r3
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b05      	cmp	r3, #5
 800be60:	d136      	bne.n	800bed0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f022 0216 	bic.w	r2, r2, #22
 800be70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	695a      	ldr	r2, [r3, #20]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be86:	2b00      	cmp	r3, #0
 800be88:	d103      	bne.n	800be92 <HAL_DMA_IRQHandler+0x1da>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d007      	beq.n	800bea2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f022 0208 	bic.w	r2, r2, #8
 800bea0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bea6:	223f      	movs	r2, #63	; 0x3f
 800bea8:	409a      	lsls	r2, r3
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2201      	movs	r2, #1
 800beb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d07e      	beq.n	800bfc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	4798      	blx	r3
        }
        return;
 800bece:	e079      	b.n	800bfc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d01d      	beq.n	800bf1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10d      	bne.n	800bf08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d031      	beq.n	800bf58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	4798      	blx	r3
 800befc:	e02c      	b.n	800bf58 <HAL_DMA_IRQHandler+0x2a0>
 800befe:	bf00      	nop
 800bf00:	20000038 	.word	0x20000038
 800bf04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d023      	beq.n	800bf58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	4798      	blx	r3
 800bf18:	e01e      	b.n	800bf58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d10f      	bne.n	800bf48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f022 0210 	bic.w	r2, r2, #16
 800bf36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d032      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf64:	f003 0301 	and.w	r3, r3, #1
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d022      	beq.n	800bfb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2205      	movs	r2, #5
 800bf70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f022 0201 	bic.w	r2, r2, #1
 800bf82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	3301      	adds	r3, #1
 800bf88:	60bb      	str	r3, [r7, #8]
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d307      	bcc.n	800bfa0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 0301 	and.w	r3, r3, #1
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1f2      	bne.n	800bf84 <HAL_DMA_IRQHandler+0x2cc>
 800bf9e:	e000      	b.n	800bfa2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800bfa0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d005      	beq.n	800bfc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	4798      	blx	r3
 800bfc2:	e000      	b.n	800bfc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 800bfc4:	bf00      	nop
    }
  }
}
 800bfc6:	3718      	adds	r7, #24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bfda:	b2db      	uxtb	r3, r3
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr

0800bfe8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
 800bff4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c004:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	2b40      	cmp	r3, #64	; 0x40
 800c014:	d108      	bne.n	800c028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c026:	e007      	b.n	800c038 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	60da      	str	r2, [r3, #12]
}
 800c038:	bf00      	nop
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	b2db      	uxtb	r3, r3
 800c052:	3b10      	subs	r3, #16
 800c054:	4a14      	ldr	r2, [pc, #80]	; (800c0a8 <DMA_CalcBaseAndBitshift+0x64>)
 800c056:	fba2 2303 	umull	r2, r3, r2, r3
 800c05a:	091b      	lsrs	r3, r3, #4
 800c05c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c05e:	4a13      	ldr	r2, [pc, #76]	; (800c0ac <DMA_CalcBaseAndBitshift+0x68>)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	4413      	add	r3, r2
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	461a      	mov	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2b03      	cmp	r3, #3
 800c070:	d909      	bls.n	800c086 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c07a:	f023 0303 	bic.w	r3, r3, #3
 800c07e:	1d1a      	adds	r2, r3, #4
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	659a      	str	r2, [r3, #88]	; 0x58
 800c084:	e007      	b.n	800c096 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c08e:	f023 0303 	bic.w	r3, r3, #3
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	aaaaaaab 	.word	0xaaaaaaab
 800c0ac:	0802ab88 	.word	0x0802ab88

0800c0b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	699b      	ldr	r3, [r3, #24]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d11f      	bne.n	800c10a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	2b03      	cmp	r3, #3
 800c0ce:	d856      	bhi.n	800c17e <DMA_CheckFifoParam+0xce>
 800c0d0:	a201      	add	r2, pc, #4	; (adr r2, 800c0d8 <DMA_CheckFifoParam+0x28>)
 800c0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d6:	bf00      	nop
 800c0d8:	0800c0e9 	.word	0x0800c0e9
 800c0dc:	0800c0fb 	.word	0x0800c0fb
 800c0e0:	0800c0e9 	.word	0x0800c0e9
 800c0e4:	0800c17f 	.word	0x0800c17f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d046      	beq.n	800c182 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c0f8:	e043      	b.n	800c182 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c102:	d140      	bne.n	800c186 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c108:	e03d      	b.n	800c186 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	699b      	ldr	r3, [r3, #24]
 800c10e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c112:	d121      	bne.n	800c158 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2b03      	cmp	r3, #3
 800c118:	d837      	bhi.n	800c18a <DMA_CheckFifoParam+0xda>
 800c11a:	a201      	add	r2, pc, #4	; (adr r2, 800c120 <DMA_CheckFifoParam+0x70>)
 800c11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c120:	0800c131 	.word	0x0800c131
 800c124:	0800c137 	.word	0x0800c137
 800c128:	0800c131 	.word	0x0800c131
 800c12c:	0800c149 	.word	0x0800c149
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c130:	2301      	movs	r3, #1
 800c132:	73fb      	strb	r3, [r7, #15]
      break;
 800c134:	e030      	b.n	800c198 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d025      	beq.n	800c18e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c146:	e022      	b.n	800c18e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c150:	d11f      	bne.n	800c192 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c156:	e01c      	b.n	800c192 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d903      	bls.n	800c166 <DMA_CheckFifoParam+0xb6>
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2b03      	cmp	r3, #3
 800c162:	d003      	beq.n	800c16c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c164:	e018      	b.n	800c198 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	73fb      	strb	r3, [r7, #15]
      break;
 800c16a:	e015      	b.n	800c198 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00e      	beq.n	800c196 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	73fb      	strb	r3, [r7, #15]
      break;
 800c17c:	e00b      	b.n	800c196 <DMA_CheckFifoParam+0xe6>
      break;
 800c17e:	bf00      	nop
 800c180:	e00a      	b.n	800c198 <DMA_CheckFifoParam+0xe8>
      break;
 800c182:	bf00      	nop
 800c184:	e008      	b.n	800c198 <DMA_CheckFifoParam+0xe8>
      break;
 800c186:	bf00      	nop
 800c188:	e006      	b.n	800c198 <DMA_CheckFifoParam+0xe8>
      break;
 800c18a:	bf00      	nop
 800c18c:	e004      	b.n	800c198 <DMA_CheckFifoParam+0xe8>
      break;
 800c18e:	bf00      	nop
 800c190:	e002      	b.n	800c198 <DMA_CheckFifoParam+0xe8>
      break;   
 800c192:	bf00      	nop
 800c194:	e000      	b.n	800c198 <DMA_CheckFifoParam+0xe8>
      break;
 800c196:	bf00      	nop
    }
  } 
  
  return status; 
 800c198:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3714      	adds	r7, #20
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop

0800c1a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b089      	sub	sp, #36	; 0x24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c1be:	2300      	movs	r3, #0
 800c1c0:	61fb      	str	r3, [r7, #28]
 800c1c2:	e159      	b.n	800c478 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	697a      	ldr	r2, [r7, #20]
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c1d8:	693a      	ldr	r2, [r7, #16]
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	f040 8148 	bne.w	800c472 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	f003 0303 	and.w	r3, r3, #3
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d005      	beq.n	800c1fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c1f6:	2b02      	cmp	r3, #2
 800c1f8:	d130      	bne.n	800c25c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	2203      	movs	r2, #3
 800c206:	fa02 f303 	lsl.w	r3, r2, r3
 800c20a:	43db      	mvns	r3, r3
 800c20c:	69ba      	ldr	r2, [r7, #24]
 800c20e:	4013      	ands	r3, r2
 800c210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	68da      	ldr	r2, [r3, #12]
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	005b      	lsls	r3, r3, #1
 800c21a:	fa02 f303 	lsl.w	r3, r2, r3
 800c21e:	69ba      	ldr	r2, [r7, #24]
 800c220:	4313      	orrs	r3, r2
 800c222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	69ba      	ldr	r2, [r7, #24]
 800c228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c230:	2201      	movs	r2, #1
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	fa02 f303 	lsl.w	r3, r2, r3
 800c238:	43db      	mvns	r3, r3
 800c23a:	69ba      	ldr	r2, [r7, #24]
 800c23c:	4013      	ands	r3, r2
 800c23e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	091b      	lsrs	r3, r3, #4
 800c246:	f003 0201 	and.w	r2, r3, #1
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	fa02 f303 	lsl.w	r3, r2, r3
 800c250:	69ba      	ldr	r2, [r7, #24]
 800c252:	4313      	orrs	r3, r2
 800c254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	69ba      	ldr	r2, [r7, #24]
 800c25a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	f003 0303 	and.w	r3, r3, #3
 800c264:	2b03      	cmp	r3, #3
 800c266:	d017      	beq.n	800c298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	005b      	lsls	r3, r3, #1
 800c272:	2203      	movs	r2, #3
 800c274:	fa02 f303 	lsl.w	r3, r2, r3
 800c278:	43db      	mvns	r3, r3
 800c27a:	69ba      	ldr	r2, [r7, #24]
 800c27c:	4013      	ands	r3, r2
 800c27e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	689a      	ldr	r2, [r3, #8]
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	005b      	lsls	r3, r3, #1
 800c288:	fa02 f303 	lsl.w	r3, r2, r3
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	4313      	orrs	r3, r2
 800c290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	69ba      	ldr	r2, [r7, #24]
 800c296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	f003 0303 	and.w	r3, r3, #3
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d123      	bne.n	800c2ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	08da      	lsrs	r2, r3, #3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	3208      	adds	r2, #8
 800c2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	f003 0307 	and.w	r3, r3, #7
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	220f      	movs	r2, #15
 800c2bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c2c0:	43db      	mvns	r3, r3
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	691a      	ldr	r2, [r3, #16]
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	f003 0307 	and.w	r3, r3, #7
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d8:	69ba      	ldr	r2, [r7, #24]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	08da      	lsrs	r2, r3, #3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3208      	adds	r2, #8
 800c2e6:	69b9      	ldr	r1, [r7, #24]
 800c2e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	005b      	lsls	r3, r3, #1
 800c2f6:	2203      	movs	r2, #3
 800c2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2fc:	43db      	mvns	r3, r3
 800c2fe:	69ba      	ldr	r2, [r7, #24]
 800c300:	4013      	ands	r3, r2
 800c302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	f003 0203 	and.w	r2, r3, #3
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	fa02 f303 	lsl.w	r3, r2, r3
 800c314:	69ba      	ldr	r2, [r7, #24]
 800c316:	4313      	orrs	r3, r2
 800c318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	69ba      	ldr	r2, [r7, #24]
 800c31e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f000 80a2 	beq.w	800c472 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c32e:	2300      	movs	r3, #0
 800c330:	60fb      	str	r3, [r7, #12]
 800c332:	4b57      	ldr	r3, [pc, #348]	; (800c490 <HAL_GPIO_Init+0x2e8>)
 800c334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c336:	4a56      	ldr	r2, [pc, #344]	; (800c490 <HAL_GPIO_Init+0x2e8>)
 800c338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c33c:	6453      	str	r3, [r2, #68]	; 0x44
 800c33e:	4b54      	ldr	r3, [pc, #336]	; (800c490 <HAL_GPIO_Init+0x2e8>)
 800c340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c34a:	4a52      	ldr	r2, [pc, #328]	; (800c494 <HAL_GPIO_Init+0x2ec>)
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	089b      	lsrs	r3, r3, #2
 800c350:	3302      	adds	r3, #2
 800c352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	f003 0303 	and.w	r3, r3, #3
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	220f      	movs	r2, #15
 800c362:	fa02 f303 	lsl.w	r3, r2, r3
 800c366:	43db      	mvns	r3, r3
 800c368:	69ba      	ldr	r2, [r7, #24]
 800c36a:	4013      	ands	r3, r2
 800c36c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4a49      	ldr	r2, [pc, #292]	; (800c498 <HAL_GPIO_Init+0x2f0>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d019      	beq.n	800c3aa <HAL_GPIO_Init+0x202>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	4a48      	ldr	r2, [pc, #288]	; (800c49c <HAL_GPIO_Init+0x2f4>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d013      	beq.n	800c3a6 <HAL_GPIO_Init+0x1fe>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4a47      	ldr	r2, [pc, #284]	; (800c4a0 <HAL_GPIO_Init+0x2f8>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d00d      	beq.n	800c3a2 <HAL_GPIO_Init+0x1fa>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a46      	ldr	r2, [pc, #280]	; (800c4a4 <HAL_GPIO_Init+0x2fc>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d007      	beq.n	800c39e <HAL_GPIO_Init+0x1f6>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a45      	ldr	r2, [pc, #276]	; (800c4a8 <HAL_GPIO_Init+0x300>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d101      	bne.n	800c39a <HAL_GPIO_Init+0x1f2>
 800c396:	2304      	movs	r3, #4
 800c398:	e008      	b.n	800c3ac <HAL_GPIO_Init+0x204>
 800c39a:	2307      	movs	r3, #7
 800c39c:	e006      	b.n	800c3ac <HAL_GPIO_Init+0x204>
 800c39e:	2303      	movs	r3, #3
 800c3a0:	e004      	b.n	800c3ac <HAL_GPIO_Init+0x204>
 800c3a2:	2302      	movs	r3, #2
 800c3a4:	e002      	b.n	800c3ac <HAL_GPIO_Init+0x204>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e000      	b.n	800c3ac <HAL_GPIO_Init+0x204>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	69fa      	ldr	r2, [r7, #28]
 800c3ae:	f002 0203 	and.w	r2, r2, #3
 800c3b2:	0092      	lsls	r2, r2, #2
 800c3b4:	4093      	lsls	r3, r2
 800c3b6:	69ba      	ldr	r2, [r7, #24]
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c3bc:	4935      	ldr	r1, [pc, #212]	; (800c494 <HAL_GPIO_Init+0x2ec>)
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	089b      	lsrs	r3, r3, #2
 800c3c2:	3302      	adds	r3, #2
 800c3c4:	69ba      	ldr	r2, [r7, #24]
 800c3c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c3ca:	4b38      	ldr	r3, [pc, #224]	; (800c4ac <HAL_GPIO_Init+0x304>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	43db      	mvns	r3, r3
 800c3d4:	69ba      	ldr	r2, [r7, #24]
 800c3d6:	4013      	ands	r3, r2
 800c3d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800c3e6:	69ba      	ldr	r2, [r7, #24]
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c3ee:	4a2f      	ldr	r2, [pc, #188]	; (800c4ac <HAL_GPIO_Init+0x304>)
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c3f4:	4b2d      	ldr	r3, [pc, #180]	; (800c4ac <HAL_GPIO_Init+0x304>)
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	43db      	mvns	r3, r3
 800c3fe:	69ba      	ldr	r2, [r7, #24]
 800c400:	4013      	ands	r3, r2
 800c402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d003      	beq.n	800c418 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800c410:	69ba      	ldr	r2, [r7, #24]
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	4313      	orrs	r3, r2
 800c416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c418:	4a24      	ldr	r2, [pc, #144]	; (800c4ac <HAL_GPIO_Init+0x304>)
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c41e:	4b23      	ldr	r3, [pc, #140]	; (800c4ac <HAL_GPIO_Init+0x304>)
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	43db      	mvns	r3, r3
 800c428:	69ba      	ldr	r2, [r7, #24]
 800c42a:	4013      	ands	r3, r2
 800c42c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c436:	2b00      	cmp	r3, #0
 800c438:	d003      	beq.n	800c442 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800c43a:	69ba      	ldr	r2, [r7, #24]
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	4313      	orrs	r3, r2
 800c440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c442:	4a1a      	ldr	r2, [pc, #104]	; (800c4ac <HAL_GPIO_Init+0x304>)
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c448:	4b18      	ldr	r3, [pc, #96]	; (800c4ac <HAL_GPIO_Init+0x304>)
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	43db      	mvns	r3, r3
 800c452:	69ba      	ldr	r2, [r7, #24]
 800c454:	4013      	ands	r3, r2
 800c456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c460:	2b00      	cmp	r3, #0
 800c462:	d003      	beq.n	800c46c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800c464:	69ba      	ldr	r2, [r7, #24]
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	4313      	orrs	r3, r2
 800c46a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c46c:	4a0f      	ldr	r2, [pc, #60]	; (800c4ac <HAL_GPIO_Init+0x304>)
 800c46e:	69bb      	ldr	r3, [r7, #24]
 800c470:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	3301      	adds	r3, #1
 800c476:	61fb      	str	r3, [r7, #28]
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	2b0f      	cmp	r3, #15
 800c47c:	f67f aea2 	bls.w	800c1c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c480:	bf00      	nop
 800c482:	bf00      	nop
 800c484:	3724      	adds	r7, #36	; 0x24
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	40023800 	.word	0x40023800
 800c494:	40013800 	.word	0x40013800
 800c498:	40020000 	.word	0x40020000
 800c49c:	40020400 	.word	0x40020400
 800c4a0:	40020800 	.word	0x40020800
 800c4a4:	40020c00 	.word	0x40020c00
 800c4a8:	40021000 	.word	0x40021000
 800c4ac:	40013c00 	.word	0x40013c00

0800c4b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	691a      	ldr	r2, [r3, #16]
 800c4c0:	887b      	ldrh	r3, [r7, #2]
 800c4c2:	4013      	ands	r3, r2
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	73fb      	strb	r3, [r7, #15]
 800c4cc:	e001      	b.n	800c4d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3714      	adds	r7, #20
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	807b      	strh	r3, [r7, #2]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c4f0:	787b      	ldrb	r3, [r7, #1]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d003      	beq.n	800c4fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c4f6:	887a      	ldrh	r2, [r7, #2]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c4fc:	e003      	b.n	800c506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c4fe:	887b      	ldrh	r3, [r7, #2]
 800c500:	041a      	lsls	r2, r3, #16
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	619a      	str	r2, [r3, #24]
}
 800c506:	bf00      	nop
 800c508:	370c      	adds	r7, #12
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr

0800c512 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c512:	b480      	push	{r7}
 800c514:	b085      	sub	sp, #20
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	460b      	mov	r3, r1
 800c51c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c524:	887a      	ldrh	r2, [r7, #2]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	4013      	ands	r3, r2
 800c52a:	041a      	lsls	r2, r3, #16
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	43d9      	mvns	r1, r3
 800c530:	887b      	ldrh	r3, [r7, #2]
 800c532:	400b      	ands	r3, r1
 800c534:	431a      	orrs	r2, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	619a      	str	r2, [r3, #24]
}
 800c53a:	bf00      	nop
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
	...

0800c548 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	4603      	mov	r3, r0
 800c550:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800c552:	4b08      	ldr	r3, [pc, #32]	; (800c574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c554:	695a      	ldr	r2, [r3, #20]
 800c556:	88fb      	ldrh	r3, [r7, #6]
 800c558:	4013      	ands	r3, r2
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d006      	beq.n	800c56c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c55e:	4a05      	ldr	r2, [pc, #20]	; (800c574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c560:	88fb      	ldrh	r3, [r7, #6]
 800c562:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c564:	88fb      	ldrh	r3, [r7, #6]
 800c566:	4618      	mov	r0, r3
 800c568:	f7f9 fe7a 	bl	8006260 <HAL_GPIO_EXTI_Callback>
  }
}
 800c56c:	bf00      	nop
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	40013c00 	.word	0x40013c00

0800c578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d101      	bne.n	800c58a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	e12b      	b.n	800c7e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c590:	b2db      	uxtb	r3, r3
 800c592:	2b00      	cmp	r3, #0
 800c594:	d106      	bne.n	800c5a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f7f9 fc06 	bl	8005db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2224      	movs	r2, #36	; 0x24
 800c5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f022 0201 	bic.w	r2, r2, #1
 800c5ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c5da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c5dc:	f003 fd00 	bl	800ffe0 <HAL_RCC_GetPCLK1Freq>
 800c5e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	4a81      	ldr	r2, [pc, #516]	; (800c7ec <HAL_I2C_Init+0x274>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d807      	bhi.n	800c5fc <HAL_I2C_Init+0x84>
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4a80      	ldr	r2, [pc, #512]	; (800c7f0 <HAL_I2C_Init+0x278>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	bf94      	ite	ls
 800c5f4:	2301      	movls	r3, #1
 800c5f6:	2300      	movhi	r3, #0
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	e006      	b.n	800c60a <HAL_I2C_Init+0x92>
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4a7d      	ldr	r2, [pc, #500]	; (800c7f4 <HAL_I2C_Init+0x27c>)
 800c600:	4293      	cmp	r3, r2
 800c602:	bf94      	ite	ls
 800c604:	2301      	movls	r3, #1
 800c606:	2300      	movhi	r3, #0
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d001      	beq.n	800c612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	e0e7      	b.n	800c7e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	4a78      	ldr	r2, [pc, #480]	; (800c7f8 <HAL_I2C_Init+0x280>)
 800c616:	fba2 2303 	umull	r2, r3, r2, r3
 800c61a:	0c9b      	lsrs	r3, r3, #18
 800c61c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	430a      	orrs	r2, r1
 800c630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	6a1b      	ldr	r3, [r3, #32]
 800c638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	4a6a      	ldr	r2, [pc, #424]	; (800c7ec <HAL_I2C_Init+0x274>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d802      	bhi.n	800c64c <HAL_I2C_Init+0xd4>
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	3301      	adds	r3, #1
 800c64a:	e009      	b.n	800c660 <HAL_I2C_Init+0xe8>
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c652:	fb02 f303 	mul.w	r3, r2, r3
 800c656:	4a69      	ldr	r2, [pc, #420]	; (800c7fc <HAL_I2C_Init+0x284>)
 800c658:	fba2 2303 	umull	r2, r3, r2, r3
 800c65c:	099b      	lsrs	r3, r3, #6
 800c65e:	3301      	adds	r3, #1
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	6812      	ldr	r2, [r2, #0]
 800c664:	430b      	orrs	r3, r1
 800c666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	69db      	ldr	r3, [r3, #28]
 800c66e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c672:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	495c      	ldr	r1, [pc, #368]	; (800c7ec <HAL_I2C_Init+0x274>)
 800c67c:	428b      	cmp	r3, r1
 800c67e:	d819      	bhi.n	800c6b4 <HAL_I2C_Init+0x13c>
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	1e59      	subs	r1, r3, #1
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c68e:	1c59      	adds	r1, r3, #1
 800c690:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c694:	400b      	ands	r3, r1
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00a      	beq.n	800c6b0 <HAL_I2C_Init+0x138>
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	1e59      	subs	r1, r3, #1
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	005b      	lsls	r3, r3, #1
 800c6a4:	fbb1 f3f3 	udiv	r3, r1, r3
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6ae:	e051      	b.n	800c754 <HAL_I2C_Init+0x1dc>
 800c6b0:	2304      	movs	r3, #4
 800c6b2:	e04f      	b.n	800c754 <HAL_I2C_Init+0x1dc>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d111      	bne.n	800c6e0 <HAL_I2C_Init+0x168>
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	1e58      	subs	r0, r3, #1
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6859      	ldr	r1, [r3, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	005b      	lsls	r3, r3, #1
 800c6c8:	440b      	add	r3, r1
 800c6ca:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	bf0c      	ite	eq
 800c6d8:	2301      	moveq	r3, #1
 800c6da:	2300      	movne	r3, #0
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	e012      	b.n	800c706 <HAL_I2C_Init+0x18e>
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	1e58      	subs	r0, r3, #1
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6859      	ldr	r1, [r3, #4]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	440b      	add	r3, r1
 800c6ee:	0099      	lsls	r1, r3, #2
 800c6f0:	440b      	add	r3, r1
 800c6f2:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	bf0c      	ite	eq
 800c700:	2301      	moveq	r3, #1
 800c702:	2300      	movne	r3, #0
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	d001      	beq.n	800c70e <HAL_I2C_Init+0x196>
 800c70a:	2301      	movs	r3, #1
 800c70c:	e022      	b.n	800c754 <HAL_I2C_Init+0x1dc>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10e      	bne.n	800c734 <HAL_I2C_Init+0x1bc>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	1e58      	subs	r0, r3, #1
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6859      	ldr	r1, [r3, #4]
 800c71e:	460b      	mov	r3, r1
 800c720:	005b      	lsls	r3, r3, #1
 800c722:	440b      	add	r3, r1
 800c724:	fbb0 f3f3 	udiv	r3, r0, r3
 800c728:	3301      	adds	r3, #1
 800c72a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c72e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c732:	e00f      	b.n	800c754 <HAL_I2C_Init+0x1dc>
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	1e58      	subs	r0, r3, #1
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6859      	ldr	r1, [r3, #4]
 800c73c:	460b      	mov	r3, r1
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	440b      	add	r3, r1
 800c742:	0099      	lsls	r1, r3, #2
 800c744:	440b      	add	r3, r1
 800c746:	fbb0 f3f3 	udiv	r3, r0, r3
 800c74a:	3301      	adds	r3, #1
 800c74c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	6809      	ldr	r1, [r1, #0]
 800c758:	4313      	orrs	r3, r2
 800c75a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	69da      	ldr	r2, [r3, #28]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6a1b      	ldr	r3, [r3, #32]
 800c76e:	431a      	orrs	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	430a      	orrs	r2, r1
 800c776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	6911      	ldr	r1, [r2, #16]
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	68d2      	ldr	r2, [r2, #12]
 800c78e:	4311      	orrs	r1, r2
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	6812      	ldr	r2, [r2, #0]
 800c794:	430b      	orrs	r3, r1
 800c796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	695a      	ldr	r2, [r3, #20]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	699b      	ldr	r3, [r3, #24]
 800c7aa:	431a      	orrs	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	430a      	orrs	r2, r1
 800c7b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f042 0201 	orr.w	r2, r2, #1
 800c7c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2220      	movs	r2, #32
 800c7ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	000186a0 	.word	0x000186a0
 800c7f0:	001e847f 	.word	0x001e847f
 800c7f4:	003d08ff 	.word	0x003d08ff
 800c7f8:	431bde83 	.word	0x431bde83
 800c7fc:	10624dd3 	.word	0x10624dd3

0800c800 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b088      	sub	sp, #32
 800c804:	af02      	add	r7, sp, #8
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	607a      	str	r2, [r7, #4]
 800c80a:	461a      	mov	r2, r3
 800c80c:	460b      	mov	r3, r1
 800c80e:	817b      	strh	r3, [r7, #10]
 800c810:	4613      	mov	r3, r2
 800c812:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c814:	f7fe fee8 	bl	800b5e8 <HAL_GetTick>
 800c818:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c820:	b2db      	uxtb	r3, r3
 800c822:	2b20      	cmp	r3, #32
 800c824:	f040 80e0 	bne.w	800c9e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	2319      	movs	r3, #25
 800c82e:	2201      	movs	r2, #1
 800c830:	4970      	ldr	r1, [pc, #448]	; (800c9f4 <HAL_I2C_Master_Transmit+0x1f4>)
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f002 fd7a 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d001      	beq.n	800c842 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800c83e:	2302      	movs	r3, #2
 800c840:	e0d3      	b.n	800c9ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d101      	bne.n	800c850 <HAL_I2C_Master_Transmit+0x50>
 800c84c:	2302      	movs	r3, #2
 800c84e:	e0cc      	b.n	800c9ea <HAL_I2C_Master_Transmit+0x1ea>
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 0301 	and.w	r3, r3, #1
 800c862:	2b01      	cmp	r3, #1
 800c864:	d007      	beq.n	800c876 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f042 0201 	orr.w	r2, r2, #1
 800c874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c884:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2221      	movs	r2, #33	; 0x21
 800c88a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2210      	movs	r2, #16
 800c892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2200      	movs	r2, #0
 800c89a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	893a      	ldrh	r2, [r7, #8]
 800c8a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8ac:	b29a      	uxth	r2, r3
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	4a50      	ldr	r2, [pc, #320]	; (800c9f8 <HAL_I2C_Master_Transmit+0x1f8>)
 800c8b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c8b8:	8979      	ldrh	r1, [r7, #10]
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	6a3a      	ldr	r2, [r7, #32]
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f002 f9be 	bl	800ec40 <I2C_MasterRequestWrite>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d001      	beq.n	800c8ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e08d      	b.n	800c9ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	613b      	str	r3, [r7, #16]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	695b      	ldr	r3, [r3, #20]
 800c8d8:	613b      	str	r3, [r7, #16]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	699b      	ldr	r3, [r3, #24]
 800c8e0:	613b      	str	r3, [r7, #16]
 800c8e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800c8e4:	e066      	b.n	800c9b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	6a39      	ldr	r1, [r7, #32]
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f002 fdf4 	bl	800f4d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00d      	beq.n	800c912 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fa:	2b04      	cmp	r3, #4
 800c8fc:	d107      	bne.n	800c90e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c90c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	e06b      	b.n	800c9ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c916:	781a      	ldrb	r2, [r3, #0]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c922:	1c5a      	adds	r2, r3, #1
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	3b01      	subs	r3, #1
 800c930:	b29a      	uxth	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c93a:	3b01      	subs	r3, #1
 800c93c:	b29a      	uxth	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	695b      	ldr	r3, [r3, #20]
 800c948:	f003 0304 	and.w	r3, r3, #4
 800c94c:	2b04      	cmp	r3, #4
 800c94e:	d11b      	bne.n	800c988 <HAL_I2C_Master_Transmit+0x188>
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c954:	2b00      	cmp	r3, #0
 800c956:	d017      	beq.n	800c988 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95c:	781a      	ldrb	r2, [r3, #0]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c968:	1c5a      	adds	r2, r3, #1
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c972:	b29b      	uxth	r3, r3
 800c974:	3b01      	subs	r3, #1
 800c976:	b29a      	uxth	r2, r3
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c980:	3b01      	subs	r3, #1
 800c982:	b29a      	uxth	r2, r3
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c988:	697a      	ldr	r2, [r7, #20]
 800c98a:	6a39      	ldr	r1, [r7, #32]
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f002 fde4 	bl	800f55a <I2C_WaitOnBTFFlagUntilTimeout>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00d      	beq.n	800c9b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c99c:	2b04      	cmp	r3, #4
 800c99e:	d107      	bne.n	800c9b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e01a      	b.n	800c9ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d194      	bne.n	800c8e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c9ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2220      	movs	r2, #32
 800c9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	e000      	b.n	800c9ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800c9e8:	2302      	movs	r3, #2
  }
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	00100002 	.word	0x00100002
 800c9f8:	ffff0000 	.word	0xffff0000

0800c9fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b08c      	sub	sp, #48	; 0x30
 800ca00:	af02      	add	r7, sp, #8
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	607a      	str	r2, [r7, #4]
 800ca06:	461a      	mov	r2, r3
 800ca08:	460b      	mov	r3, r1
 800ca0a:	817b      	strh	r3, [r7, #10]
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ca10:	f7fe fdea 	bl	800b5e8 <HAL_GetTick>
 800ca14:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	2b20      	cmp	r3, #32
 800ca20:	f040 820b 	bne.w	800ce3a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ca24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	2319      	movs	r3, #25
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	497c      	ldr	r1, [pc, #496]	; (800cc20 <HAL_I2C_Master_Receive+0x224>)
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f002 fc7c 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d001      	beq.n	800ca3e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800ca3a:	2302      	movs	r3, #2
 800ca3c:	e1fe      	b.n	800ce3c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d101      	bne.n	800ca4c <HAL_I2C_Master_Receive+0x50>
 800ca48:	2302      	movs	r3, #2
 800ca4a:	e1f7      	b.n	800ce3c <HAL_I2C_Master_Receive+0x440>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f003 0301 	and.w	r3, r3, #1
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d007      	beq.n	800ca72 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f042 0201 	orr.w	r2, r2, #1
 800ca70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2222      	movs	r2, #34	; 0x22
 800ca86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2210      	movs	r2, #16
 800ca8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	893a      	ldrh	r2, [r7, #8]
 800caa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	4a5c      	ldr	r2, [pc, #368]	; (800cc24 <HAL_I2C_Master_Receive+0x228>)
 800cab2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800cab4:	8979      	ldrh	r1, [r7, #10]
 800cab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f002 f942 	bl	800ed44 <I2C_MasterRequestRead>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d001      	beq.n	800caca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	e1b8      	b.n	800ce3c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d113      	bne.n	800cafa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cad2:	2300      	movs	r3, #0
 800cad4:	623b      	str	r3, [r7, #32]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	695b      	ldr	r3, [r3, #20]
 800cadc:	623b      	str	r3, [r7, #32]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	699b      	ldr	r3, [r3, #24]
 800cae4:	623b      	str	r3, [r7, #32]
 800cae6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800caf6:	601a      	str	r2, [r3, #0]
 800caf8:	e18c      	b.n	800ce14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d11b      	bne.n	800cb3a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb12:	2300      	movs	r3, #0
 800cb14:	61fb      	str	r3, [r7, #28]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	695b      	ldr	r3, [r3, #20]
 800cb1c:	61fb      	str	r3, [r7, #28]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	61fb      	str	r3, [r7, #28]
 800cb26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb36:	601a      	str	r2, [r3, #0]
 800cb38:	e16c      	b.n	800ce14 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d11b      	bne.n	800cb7a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb62:	2300      	movs	r3, #0
 800cb64:	61bb      	str	r3, [r7, #24]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	695b      	ldr	r3, [r3, #20]
 800cb6c:	61bb      	str	r3, [r7, #24]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	699b      	ldr	r3, [r3, #24]
 800cb74:	61bb      	str	r3, [r7, #24]
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	e14c      	b.n	800ce14 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	617b      	str	r3, [r7, #20]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	695b      	ldr	r3, [r3, #20]
 800cb94:	617b      	str	r3, [r7, #20]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	699b      	ldr	r3, [r3, #24]
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800cba0:	e138      	b.n	800ce14 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	f200 80f1 	bhi.w	800cd8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d123      	bne.n	800cbfc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f002 fd41 	bl	800f640 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d001      	beq.n	800cbc8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e139      	b.n	800ce3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	691a      	ldr	r2, [r3, #16]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd2:	b2d2      	uxtb	r2, r2
 800cbd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbe4:	3b01      	subs	r3, #1
 800cbe6:	b29a      	uxth	r2, r3
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cbfa:	e10b      	b.n	800ce14 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d14e      	bne.n	800cca2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc06:	9300      	str	r3, [sp, #0]
 800cc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	4906      	ldr	r1, [pc, #24]	; (800cc28 <HAL_I2C_Master_Receive+0x22c>)
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	f002 fb8c 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d008      	beq.n	800cc2c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e10e      	b.n	800ce3c <HAL_I2C_Master_Receive+0x440>
 800cc1e:	bf00      	nop
 800cc20:	00100002 	.word	0x00100002
 800cc24:	ffff0000 	.word	0xffff0000
 800cc28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	691a      	ldr	r2, [r3, #16]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc46:	b2d2      	uxtb	r2, r2
 800cc48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4e:	1c5a      	adds	r2, r3, #1
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc58:	3b01      	subs	r3, #1
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	3b01      	subs	r3, #1
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	691a      	ldr	r2, [r3, #16]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc78:	b2d2      	uxtb	r2, r2
 800cc7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc80:	1c5a      	adds	r2, r3, #1
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cca0:	e0b8      	b.n	800ce14 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca8:	2200      	movs	r2, #0
 800ccaa:	4966      	ldr	r1, [pc, #408]	; (800ce44 <HAL_I2C_Master_Receive+0x448>)
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f002 fb3d 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d001      	beq.n	800ccbc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	e0bf      	b.n	800ce3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	691a      	ldr	r2, [r3, #16]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd6:	b2d2      	uxtb	r2, r2
 800ccd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccde:	1c5a      	adds	r2, r3, #1
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cce8:	3b01      	subs	r3, #1
 800ccea:	b29a      	uxth	r2, r3
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd04:	2200      	movs	r2, #0
 800cd06:	494f      	ldr	r1, [pc, #316]	; (800ce44 <HAL_I2C_Master_Receive+0x448>)
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f002 fb0f 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800cd14:	2301      	movs	r3, #1
 800cd16:	e091      	b.n	800ce3c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	691a      	ldr	r2, [r3, #16]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd32:	b2d2      	uxtb	r2, r2
 800cd34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd3a:	1c5a      	adds	r2, r3, #1
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd44:	3b01      	subs	r3, #1
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	3b01      	subs	r3, #1
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	691a      	ldr	r2, [r3, #16]
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd64:	b2d2      	uxtb	r2, r2
 800cd66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6c:	1c5a      	adds	r2, r3, #1
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd76:	3b01      	subs	r3, #1
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	3b01      	subs	r3, #1
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd8c:	e042      	b.n	800ce14 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cd8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd92:	68f8      	ldr	r0, [r7, #12]
 800cd94:	f002 fc54 	bl	800f640 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d001      	beq.n	800cda2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e04c      	b.n	800ce3c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	691a      	ldr	r2, [r3, #16]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdac:	b2d2      	uxtb	r2, r2
 800cdae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb4:	1c5a      	adds	r2, r3, #1
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	695b      	ldr	r3, [r3, #20]
 800cdda:	f003 0304 	and.w	r3, r3, #4
 800cdde:	2b04      	cmp	r3, #4
 800cde0:	d118      	bne.n	800ce14 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	691a      	ldr	r2, [r3, #16]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdec:	b2d2      	uxtb	r2, r2
 800cdee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf4:	1c5a      	adds	r2, r3, #1
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	f47f aec2 	bne.w	800cba2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2220      	movs	r2, #32
 800ce22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ce36:	2300      	movs	r3, #0
 800ce38:	e000      	b.n	800ce3c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ce3a:	2302      	movs	r3, #2
  }
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3728      	adds	r7, #40	; 0x28
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	00010004 	.word	0x00010004

0800ce48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b088      	sub	sp, #32
 800ce4c:	af02      	add	r7, sp, #8
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	4608      	mov	r0, r1
 800ce52:	4611      	mov	r1, r2
 800ce54:	461a      	mov	r2, r3
 800ce56:	4603      	mov	r3, r0
 800ce58:	817b      	strh	r3, [r7, #10]
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	813b      	strh	r3, [r7, #8]
 800ce5e:	4613      	mov	r3, r2
 800ce60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ce62:	f7fe fbc1 	bl	800b5e8 <HAL_GetTick>
 800ce66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	2b20      	cmp	r3, #32
 800ce72:	f040 80d9 	bne.w	800d028 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	2319      	movs	r3, #25
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	496d      	ldr	r1, [pc, #436]	; (800d034 <HAL_I2C_Mem_Write+0x1ec>)
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f002 fa53 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d001      	beq.n	800ce90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	e0cc      	b.n	800d02a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d101      	bne.n	800ce9e <HAL_I2C_Mem_Write+0x56>
 800ce9a:	2302      	movs	r3, #2
 800ce9c:	e0c5      	b.n	800d02a <HAL_I2C_Mem_Write+0x1e2>
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2201      	movs	r2, #1
 800cea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f003 0301 	and.w	r3, r3, #1
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d007      	beq.n	800cec4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f042 0201 	orr.w	r2, r2, #1
 800cec2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ced2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2221      	movs	r2, #33	; 0x21
 800ced8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2240      	movs	r2, #64	; 0x40
 800cee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6a3a      	ldr	r2, [r7, #32]
 800ceee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	4a4d      	ldr	r2, [pc, #308]	; (800d038 <HAL_I2C_Mem_Write+0x1f0>)
 800cf04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cf06:	88f8      	ldrh	r0, [r7, #6]
 800cf08:	893a      	ldrh	r2, [r7, #8]
 800cf0a:	8979      	ldrh	r1, [r7, #10]
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	9301      	str	r3, [sp, #4]
 800cf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf12:	9300      	str	r3, [sp, #0]
 800cf14:	4603      	mov	r3, r0
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f001 ffe2 	bl	800eee0 <I2C_RequestMemoryWrite>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d052      	beq.n	800cfc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800cf22:	2301      	movs	r3, #1
 800cf24:	e081      	b.n	800d02a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf26:	697a      	ldr	r2, [r7, #20]
 800cf28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf2a:	68f8      	ldr	r0, [r7, #12]
 800cf2c:	f002 fad4 	bl	800f4d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00d      	beq.n	800cf52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3a:	2b04      	cmp	r3, #4
 800cf3c:	d107      	bne.n	800cf4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e06b      	b.n	800d02a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf56:	781a      	ldrb	r2, [r3, #0]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf62:	1c5a      	adds	r2, r3, #1
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	695b      	ldr	r3, [r3, #20]
 800cf88:	f003 0304 	and.w	r3, r3, #4
 800cf8c:	2b04      	cmp	r3, #4
 800cf8e:	d11b      	bne.n	800cfc8 <HAL_I2C_Mem_Write+0x180>
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d017      	beq.n	800cfc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf9c:	781a      	ldrb	r2, [r3, #0]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa8:	1c5a      	adds	r2, r3, #1
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	3b01      	subs	r3, #1
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1aa      	bne.n	800cf26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cfd0:	697a      	ldr	r2, [r7, #20]
 800cfd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f002 fac0 	bl	800f55a <I2C_WaitOnBTFFlagUntilTimeout>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d00d      	beq.n	800cffc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe4:	2b04      	cmp	r3, #4
 800cfe6:	d107      	bne.n	800cff8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cff6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	e016      	b.n	800d02a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d00a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2220      	movs	r2, #32
 800d010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d024:	2300      	movs	r3, #0
 800d026:	e000      	b.n	800d02a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d028:	2302      	movs	r3, #2
  }
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3718      	adds	r7, #24
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	00100002 	.word	0x00100002
 800d038:	ffff0000 	.word	0xffff0000

0800d03c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b08c      	sub	sp, #48	; 0x30
 800d040:	af02      	add	r7, sp, #8
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	4608      	mov	r0, r1
 800d046:	4611      	mov	r1, r2
 800d048:	461a      	mov	r2, r3
 800d04a:	4603      	mov	r3, r0
 800d04c:	817b      	strh	r3, [r7, #10]
 800d04e:	460b      	mov	r3, r1
 800d050:	813b      	strh	r3, [r7, #8]
 800d052:	4613      	mov	r3, r2
 800d054:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d056:	f7fe fac7 	bl	800b5e8 <HAL_GetTick>
 800d05a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d062:	b2db      	uxtb	r3, r3
 800d064:	2b20      	cmp	r3, #32
 800d066:	f040 8208 	bne.w	800d47a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	2319      	movs	r3, #25
 800d070:	2201      	movs	r2, #1
 800d072:	497b      	ldr	r1, [pc, #492]	; (800d260 <HAL_I2C_Mem_Read+0x224>)
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f002 f959 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d080:	2302      	movs	r3, #2
 800d082:	e1fb      	b.n	800d47c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d101      	bne.n	800d092 <HAL_I2C_Mem_Read+0x56>
 800d08e:	2302      	movs	r3, #2
 800d090:	e1f4      	b.n	800d47c <HAL_I2C_Mem_Read+0x440>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2201      	movs	r2, #1
 800d096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f003 0301 	and.w	r3, r3, #1
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d007      	beq.n	800d0b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f042 0201 	orr.w	r2, r2, #1
 800d0b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d0c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2222      	movs	r2, #34	; 0x22
 800d0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2240      	movs	r2, #64	; 0x40
 800d0d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d0e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0ee:	b29a      	uxth	r2, r3
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	4a5b      	ldr	r2, [pc, #364]	; (800d264 <HAL_I2C_Mem_Read+0x228>)
 800d0f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d0fa:	88f8      	ldrh	r0, [r7, #6]
 800d0fc:	893a      	ldrh	r2, [r7, #8]
 800d0fe:	8979      	ldrh	r1, [r7, #10]
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	4603      	mov	r3, r0
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f001 ff7e 	bl	800f00c <I2C_RequestMemoryRead>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	e1b0      	b.n	800d47c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d113      	bne.n	800d14a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d122:	2300      	movs	r3, #0
 800d124:	623b      	str	r3, [r7, #32]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	695b      	ldr	r3, [r3, #20]
 800d12c:	623b      	str	r3, [r7, #32]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	699b      	ldr	r3, [r3, #24]
 800d134:	623b      	str	r3, [r7, #32]
 800d136:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d146:	601a      	str	r2, [r3, #0]
 800d148:	e184      	b.n	800d454 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d11b      	bne.n	800d18a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d160:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d162:	2300      	movs	r3, #0
 800d164:	61fb      	str	r3, [r7, #28]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	695b      	ldr	r3, [r3, #20]
 800d16c:	61fb      	str	r3, [r7, #28]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	699b      	ldr	r3, [r3, #24]
 800d174:	61fb      	str	r3, [r7, #28]
 800d176:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d186:	601a      	str	r2, [r3, #0]
 800d188:	e164      	b.n	800d454 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d18e:	2b02      	cmp	r3, #2
 800d190:	d11b      	bne.n	800d1ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	61bb      	str	r3, [r7, #24]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	695b      	ldr	r3, [r3, #20]
 800d1bc:	61bb      	str	r3, [r7, #24]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	699b      	ldr	r3, [r3, #24]
 800d1c4:	61bb      	str	r3, [r7, #24]
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	e144      	b.n	800d454 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	617b      	str	r3, [r7, #20]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	695b      	ldr	r3, [r3, #20]
 800d1d4:	617b      	str	r3, [r7, #20]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	699b      	ldr	r3, [r3, #24]
 800d1dc:	617b      	str	r3, [r7, #20]
 800d1de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d1e0:	e138      	b.n	800d454 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1e6:	2b03      	cmp	r3, #3
 800d1e8:	f200 80f1 	bhi.w	800d3ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d123      	bne.n	800d23c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f002 fa21 	bl	800f640 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d001      	beq.n	800d208 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	e139      	b.n	800d47c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	691a      	ldr	r2, [r3, #16]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d212:	b2d2      	uxtb	r2, r2
 800d214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21a:	1c5a      	adds	r2, r3, #1
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d224:	3b01      	subs	r3, #1
 800d226:	b29a      	uxth	r2, r3
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d230:	b29b      	uxth	r3, r3
 800d232:	3b01      	subs	r3, #1
 800d234:	b29a      	uxth	r2, r3
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d23a:	e10b      	b.n	800d454 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d240:	2b02      	cmp	r3, #2
 800d242:	d14e      	bne.n	800d2e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24a:	2200      	movs	r2, #0
 800d24c:	4906      	ldr	r1, [pc, #24]	; (800d268 <HAL_I2C_Mem_Read+0x22c>)
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	f002 f86c 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d008      	beq.n	800d26c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e10e      	b.n	800d47c <HAL_I2C_Mem_Read+0x440>
 800d25e:	bf00      	nop
 800d260:	00100002 	.word	0x00100002
 800d264:	ffff0000 	.word	0xffff0000
 800d268:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d27a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	691a      	ldr	r2, [r3, #16]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d286:	b2d2      	uxtb	r2, r2
 800d288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d298:	3b01      	subs	r3, #1
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	b29a      	uxth	r2, r3
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	691a      	ldr	r2, [r3, #16]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b8:	b2d2      	uxtb	r2, r2
 800d2ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c0:	1c5a      	adds	r2, r3, #1
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	b29a      	uxth	r2, r3
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d2e0:	e0b8      	b.n	800d454 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	4966      	ldr	r1, [pc, #408]	; (800d484 <HAL_I2C_Mem_Read+0x448>)
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f002 f81d 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d001      	beq.n	800d2fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e0bf      	b.n	800d47c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d30a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	691a      	ldr	r2, [r3, #16]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d316:	b2d2      	uxtb	r2, r2
 800d318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d328:	3b01      	subs	r3, #1
 800d32a:	b29a      	uxth	r2, r3
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d334:	b29b      	uxth	r3, r3
 800d336:	3b01      	subs	r3, #1
 800d338:	b29a      	uxth	r2, r3
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	2200      	movs	r2, #0
 800d346:	494f      	ldr	r1, [pc, #316]	; (800d484 <HAL_I2C_Mem_Read+0x448>)
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f001 ffef 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d001      	beq.n	800d358 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d354:	2301      	movs	r3, #1
 800d356:	e091      	b.n	800d47c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	691a      	ldr	r2, [r3, #16]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d372:	b2d2      	uxtb	r2, r2
 800d374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37a:	1c5a      	adds	r2, r3, #1
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d384:	3b01      	subs	r3, #1
 800d386:	b29a      	uxth	r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d390:	b29b      	uxth	r3, r3
 800d392:	3b01      	subs	r3, #1
 800d394:	b29a      	uxth	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	691a      	ldr	r2, [r3, #16]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a4:	b2d2      	uxtb	r2, r2
 800d3a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ac:	1c5a      	adds	r2, r3, #1
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	3b01      	subs	r3, #1
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d3cc:	e042      	b.n	800d454 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f002 f934 	bl	800f640 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e04c      	b.n	800d47c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	691a      	ldr	r2, [r3, #16]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ec:	b2d2      	uxtb	r2, r2
 800d3ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f4:	1c5a      	adds	r2, r3, #1
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3fe:	3b01      	subs	r3, #1
 800d400:	b29a      	uxth	r2, r3
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	3b01      	subs	r3, #1
 800d40e:	b29a      	uxth	r2, r3
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	695b      	ldr	r3, [r3, #20]
 800d41a:	f003 0304 	and.w	r3, r3, #4
 800d41e:	2b04      	cmp	r3, #4
 800d420:	d118      	bne.n	800d454 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	691a      	ldr	r2, [r3, #16]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42c:	b2d2      	uxtb	r2, r2
 800d42e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d434:	1c5a      	adds	r2, r3, #1
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d43e:	3b01      	subs	r3, #1
 800d440:	b29a      	uxth	r2, r3
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	3b01      	subs	r3, #1
 800d44e:	b29a      	uxth	r2, r3
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f47f aec2 	bne.w	800d1e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2220      	movs	r2, #32
 800d462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2200      	movs	r2, #0
 800d46a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2200      	movs	r2, #0
 800d472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d476:	2300      	movs	r3, #0
 800d478:	e000      	b.n	800d47c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d47a:	2302      	movs	r3, #2
  }
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3728      	adds	r7, #40	; 0x28
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	00010004 	.word	0x00010004

0800d488 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b088      	sub	sp, #32
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800d490:	2300      	movs	r3, #0
 800d492:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d4b2:	7bfb      	ldrb	r3, [r7, #15]
 800d4b4:	2b10      	cmp	r3, #16
 800d4b6:	d003      	beq.n	800d4c0 <HAL_I2C_EV_IRQHandler+0x38>
 800d4b8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ba:	2b40      	cmp	r3, #64	; 0x40
 800d4bc:	f040 80c1 	bne.w	800d642 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	699b      	ldr	r3, [r3, #24]
 800d4c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	695b      	ldr	r3, [r3, #20]
 800d4ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	f003 0301 	and.w	r3, r3, #1
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d10d      	bne.n	800d4f6 <HAL_I2C_EV_IRQHandler+0x6e>
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d4e0:	d003      	beq.n	800d4ea <HAL_I2C_EV_IRQHandler+0x62>
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d4e8:	d101      	bne.n	800d4ee <HAL_I2C_EV_IRQHandler+0x66>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e000      	b.n	800d4f0 <HAL_I2C_EV_IRQHandler+0x68>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	f000 8132 	beq.w	800d75a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	f003 0301 	and.w	r3, r3, #1
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00c      	beq.n	800d51a <HAL_I2C_EV_IRQHandler+0x92>
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	0a5b      	lsrs	r3, r3, #9
 800d504:	f003 0301 	and.w	r3, r3, #1
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d006      	beq.n	800d51a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f002 f91c 	bl	800f74a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 fd79 	bl	800e00a <I2C_Master_SB>
 800d518:	e092      	b.n	800d640 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	08db      	lsrs	r3, r3, #3
 800d51e:	f003 0301 	and.w	r3, r3, #1
 800d522:	2b00      	cmp	r3, #0
 800d524:	d009      	beq.n	800d53a <HAL_I2C_EV_IRQHandler+0xb2>
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	0a5b      	lsrs	r3, r3, #9
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d003      	beq.n	800d53a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fdef 	bl	800e116 <I2C_Master_ADD10>
 800d538:	e082      	b.n	800d640 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	085b      	lsrs	r3, r3, #1
 800d53e:	f003 0301 	and.w	r3, r3, #1
 800d542:	2b00      	cmp	r3, #0
 800d544:	d009      	beq.n	800d55a <HAL_I2C_EV_IRQHandler+0xd2>
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	0a5b      	lsrs	r3, r3, #9
 800d54a:	f003 0301 	and.w	r3, r3, #1
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d003      	beq.n	800d55a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 fe09 	bl	800e16a <I2C_Master_ADDR>
 800d558:	e072      	b.n	800d640 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	089b      	lsrs	r3, r3, #2
 800d55e:	f003 0301 	and.w	r3, r3, #1
 800d562:	2b00      	cmp	r3, #0
 800d564:	d03b      	beq.n	800d5de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d574:	f000 80f3 	beq.w	800d75e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	09db      	lsrs	r3, r3, #7
 800d57c:	f003 0301 	and.w	r3, r3, #1
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00f      	beq.n	800d5a4 <HAL_I2C_EV_IRQHandler+0x11c>
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	0a9b      	lsrs	r3, r3, #10
 800d588:	f003 0301 	and.w	r3, r3, #1
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d009      	beq.n	800d5a4 <HAL_I2C_EV_IRQHandler+0x11c>
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	089b      	lsrs	r3, r3, #2
 800d594:	f003 0301 	and.w	r3, r3, #1
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d103      	bne.n	800d5a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 f9f3 	bl	800d988 <I2C_MasterTransmit_TXE>
 800d5a2:	e04d      	b.n	800d640 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	089b      	lsrs	r3, r3, #2
 800d5a8:	f003 0301 	and.w	r3, r3, #1
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f000 80d6 	beq.w	800d75e <HAL_I2C_EV_IRQHandler+0x2d6>
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	0a5b      	lsrs	r3, r3, #9
 800d5b6:	f003 0301 	and.w	r3, r3, #1
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	f000 80cf 	beq.w	800d75e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d5c0:	7bbb      	ldrb	r3, [r7, #14]
 800d5c2:	2b21      	cmp	r3, #33	; 0x21
 800d5c4:	d103      	bne.n	800d5ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fa7a 	bl	800dac0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d5cc:	e0c7      	b.n	800d75e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800d5ce:	7bfb      	ldrb	r3, [r7, #15]
 800d5d0:	2b40      	cmp	r3, #64	; 0x40
 800d5d2:	f040 80c4 	bne.w	800d75e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 fae8 	bl	800dbac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d5dc:	e0bf      	b.n	800d75e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5ec:	f000 80b7 	beq.w	800d75e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	099b      	lsrs	r3, r3, #6
 800d5f4:	f003 0301 	and.w	r3, r3, #1
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00f      	beq.n	800d61c <HAL_I2C_EV_IRQHandler+0x194>
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	0a9b      	lsrs	r3, r3, #10
 800d600:	f003 0301 	and.w	r3, r3, #1
 800d604:	2b00      	cmp	r3, #0
 800d606:	d009      	beq.n	800d61c <HAL_I2C_EV_IRQHandler+0x194>
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	089b      	lsrs	r3, r3, #2
 800d60c:	f003 0301 	and.w	r3, r3, #1
 800d610:	2b00      	cmp	r3, #0
 800d612:	d103      	bne.n	800d61c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fb5d 	bl	800dcd4 <I2C_MasterReceive_RXNE>
 800d61a:	e011      	b.n	800d640 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	089b      	lsrs	r3, r3, #2
 800d620:	f003 0301 	and.w	r3, r3, #1
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 809a 	beq.w	800d75e <HAL_I2C_EV_IRQHandler+0x2d6>
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	0a5b      	lsrs	r3, r3, #9
 800d62e:	f003 0301 	and.w	r3, r3, #1
 800d632:	2b00      	cmp	r3, #0
 800d634:	f000 8093 	beq.w	800d75e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 fbfc 	bl	800de36 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d63e:	e08e      	b.n	800d75e <HAL_I2C_EV_IRQHandler+0x2d6>
 800d640:	e08d      	b.n	800d75e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d646:	2b00      	cmp	r3, #0
 800d648:	d004      	beq.n	800d654 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	695b      	ldr	r3, [r3, #20]
 800d650:	61fb      	str	r3, [r7, #28]
 800d652:	e007      	b.n	800d664 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	699b      	ldr	r3, [r3, #24]
 800d65a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	695b      	ldr	r3, [r3, #20]
 800d662:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	085b      	lsrs	r3, r3, #1
 800d668:	f003 0301 	and.w	r3, r3, #1
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d012      	beq.n	800d696 <HAL_I2C_EV_IRQHandler+0x20e>
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	0a5b      	lsrs	r3, r3, #9
 800d674:	f003 0301 	and.w	r3, r3, #1
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d00c      	beq.n	800d696 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d680:	2b00      	cmp	r3, #0
 800d682:	d003      	beq.n	800d68c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	699b      	ldr	r3, [r3, #24]
 800d68a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800d68c:	69b9      	ldr	r1, [r7, #24]
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 ffba 	bl	800e608 <I2C_Slave_ADDR>
 800d694:	e066      	b.n	800d764 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	091b      	lsrs	r3, r3, #4
 800d69a:	f003 0301 	and.w	r3, r3, #1
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d009      	beq.n	800d6b6 <HAL_I2C_EV_IRQHandler+0x22e>
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	0a5b      	lsrs	r3, r3, #9
 800d6a6:	f003 0301 	and.w	r3, r3, #1
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d003      	beq.n	800d6b6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 fff4 	bl	800e69c <I2C_Slave_STOPF>
 800d6b4:	e056      	b.n	800d764 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d6b6:	7bbb      	ldrb	r3, [r7, #14]
 800d6b8:	2b21      	cmp	r3, #33	; 0x21
 800d6ba:	d002      	beq.n	800d6c2 <HAL_I2C_EV_IRQHandler+0x23a>
 800d6bc:	7bbb      	ldrb	r3, [r7, #14]
 800d6be:	2b29      	cmp	r3, #41	; 0x29
 800d6c0:	d125      	bne.n	800d70e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	09db      	lsrs	r3, r3, #7
 800d6c6:	f003 0301 	and.w	r3, r3, #1
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00f      	beq.n	800d6ee <HAL_I2C_EV_IRQHandler+0x266>
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	0a9b      	lsrs	r3, r3, #10
 800d6d2:	f003 0301 	and.w	r3, r3, #1
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d009      	beq.n	800d6ee <HAL_I2C_EV_IRQHandler+0x266>
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	089b      	lsrs	r3, r3, #2
 800d6de:	f003 0301 	and.w	r3, r3, #1
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d103      	bne.n	800d6ee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 fed0 	bl	800e48c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d6ec:	e039      	b.n	800d762 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	089b      	lsrs	r3, r3, #2
 800d6f2:	f003 0301 	and.w	r3, r3, #1
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d033      	beq.n	800d762 <HAL_I2C_EV_IRQHandler+0x2da>
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	0a5b      	lsrs	r3, r3, #9
 800d6fe:	f003 0301 	and.w	r3, r3, #1
 800d702:	2b00      	cmp	r3, #0
 800d704:	d02d      	beq.n	800d762 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fefd 	bl	800e506 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d70c:	e029      	b.n	800d762 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d70e:	69fb      	ldr	r3, [r7, #28]
 800d710:	099b      	lsrs	r3, r3, #6
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00f      	beq.n	800d73a <HAL_I2C_EV_IRQHandler+0x2b2>
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	0a9b      	lsrs	r3, r3, #10
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	2b00      	cmp	r3, #0
 800d724:	d009      	beq.n	800d73a <HAL_I2C_EV_IRQHandler+0x2b2>
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	089b      	lsrs	r3, r3, #2
 800d72a:	f003 0301 	and.w	r3, r3, #1
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d103      	bne.n	800d73a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 ff08 	bl	800e548 <I2C_SlaveReceive_RXNE>
 800d738:	e014      	b.n	800d764 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	089b      	lsrs	r3, r3, #2
 800d73e:	f003 0301 	and.w	r3, r3, #1
 800d742:	2b00      	cmp	r3, #0
 800d744:	d00e      	beq.n	800d764 <HAL_I2C_EV_IRQHandler+0x2dc>
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	0a5b      	lsrs	r3, r3, #9
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d008      	beq.n	800d764 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 ff36 	bl	800e5c4 <I2C_SlaveReceive_BTF>
 800d758:	e004      	b.n	800d764 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800d75a:	bf00      	nop
 800d75c:	e002      	b.n	800d764 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d75e:	bf00      	nop
 800d760:	e000      	b.n	800d764 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d762:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800d764:	3720      	adds	r7, #32
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}

0800d76a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b08a      	sub	sp, #40	; 0x28
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	695b      	ldr	r3, [r3, #20]
 800d778:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800d782:	2300      	movs	r3, #0
 800d784:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d78c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d78e:	6a3b      	ldr	r3, [r7, #32]
 800d790:	0a1b      	lsrs	r3, r3, #8
 800d792:	f003 0301 	and.w	r3, r3, #1
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00e      	beq.n	800d7b8 <HAL_I2C_ER_IRQHandler+0x4e>
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	0a1b      	lsrs	r3, r3, #8
 800d79e:	f003 0301 	and.w	r3, r3, #1
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d008      	beq.n	800d7b8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a8:	f043 0301 	orr.w	r3, r3, #1
 800d7ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d7b6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d7b8:	6a3b      	ldr	r3, [r7, #32]
 800d7ba:	0a5b      	lsrs	r3, r3, #9
 800d7bc:	f003 0301 	and.w	r3, r3, #1
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00e      	beq.n	800d7e2 <HAL_I2C_ER_IRQHandler+0x78>
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	0a1b      	lsrs	r3, r3, #8
 800d7c8:	f003 0301 	and.w	r3, r3, #1
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d008      	beq.n	800d7e2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	f043 0302 	orr.w	r3, r3, #2
 800d7d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800d7e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d7e2:	6a3b      	ldr	r3, [r7, #32]
 800d7e4:	0a9b      	lsrs	r3, r3, #10
 800d7e6:	f003 0301 	and.w	r3, r3, #1
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d03f      	beq.n	800d86e <HAL_I2C_ER_IRQHandler+0x104>
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	0a1b      	lsrs	r3, r3, #8
 800d7f2:	f003 0301 	and.w	r3, r3, #1
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d039      	beq.n	800d86e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800d7fa:	7efb      	ldrb	r3, [r7, #27]
 800d7fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d802:	b29b      	uxth	r3, r3
 800d804:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d80c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d812:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800d814:	7ebb      	ldrb	r3, [r7, #26]
 800d816:	2b20      	cmp	r3, #32
 800d818:	d112      	bne.n	800d840 <HAL_I2C_ER_IRQHandler+0xd6>
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10f      	bne.n	800d840 <HAL_I2C_ER_IRQHandler+0xd6>
 800d820:	7cfb      	ldrb	r3, [r7, #19]
 800d822:	2b21      	cmp	r3, #33	; 0x21
 800d824:	d008      	beq.n	800d838 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800d826:	7cfb      	ldrb	r3, [r7, #19]
 800d828:	2b29      	cmp	r3, #41	; 0x29
 800d82a:	d005      	beq.n	800d838 <HAL_I2C_ER_IRQHandler+0xce>
 800d82c:	7cfb      	ldrb	r3, [r7, #19]
 800d82e:	2b28      	cmp	r3, #40	; 0x28
 800d830:	d106      	bne.n	800d840 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2b21      	cmp	r3, #33	; 0x21
 800d836:	d103      	bne.n	800d840 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f001 f85f 	bl	800e8fc <I2C_Slave_AF>
 800d83e:	e016      	b.n	800d86e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d848:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800d84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84c:	f043 0304 	orr.w	r3, r3, #4
 800d850:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d852:	7efb      	ldrb	r3, [r7, #27]
 800d854:	2b10      	cmp	r3, #16
 800d856:	d002      	beq.n	800d85e <HAL_I2C_ER_IRQHandler+0xf4>
 800d858:	7efb      	ldrb	r3, [r7, #27]
 800d85a:	2b40      	cmp	r3, #64	; 0x40
 800d85c:	d107      	bne.n	800d86e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d86c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d86e:	6a3b      	ldr	r3, [r7, #32]
 800d870:	0adb      	lsrs	r3, r3, #11
 800d872:	f003 0301 	and.w	r3, r3, #1
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00e      	beq.n	800d898 <HAL_I2C_ER_IRQHandler+0x12e>
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	0a1b      	lsrs	r3, r3, #8
 800d87e:	f003 0301 	and.w	r3, r3, #1
 800d882:	2b00      	cmp	r3, #0
 800d884:	d008      	beq.n	800d898 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800d886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d888:	f043 0308 	orr.w	r3, r3, #8
 800d88c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800d896:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800d898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d008      	beq.n	800d8b0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a4:	431a      	orrs	r2, r3
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f001 f896 	bl	800e9dc <I2C_ITError>
  }
}
 800d8b0:	bf00      	nop
 800d8b2:	3728      	adds	r7, #40	; 0x28
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b083      	sub	sp, #12
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d8c0:	bf00      	nop
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800d8d4:	bf00      	nop
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d8e8:	bf00      	nop
 800d8ea:	370c      	adds	r7, #12
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d8fc:	bf00      	nop
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	460b      	mov	r3, r1
 800d912:	70fb      	strb	r3, [r7, #3]
 800d914:	4613      	mov	r3, r2
 800d916:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d918:	bf00      	nop
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800d92c:	bf00      	nop
 800d92e:	370c      	adds	r7, #12
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d940:	bf00      	nop
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d954:	bf00      	nop
 800d956:	370c      	adds	r7, #12
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d968:	bf00      	nop
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d996:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d99e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d150      	bne.n	800da50 <I2C_MasterTransmit_TXE+0xc8>
 800d9ae:	7bfb      	ldrb	r3, [r7, #15]
 800d9b0:	2b21      	cmp	r3, #33	; 0x21
 800d9b2:	d14d      	bne.n	800da50 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	2b08      	cmp	r3, #8
 800d9b8:	d01d      	beq.n	800d9f6 <I2C_MasterTransmit_TXE+0x6e>
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	2b20      	cmp	r3, #32
 800d9be:	d01a      	beq.n	800d9f6 <I2C_MasterTransmit_TXE+0x6e>
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d9c6:	d016      	beq.n	800d9f6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	685a      	ldr	r2, [r3, #4]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d9d6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2211      	movs	r2, #17
 800d9dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2220      	movs	r2, #32
 800d9ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7ff ff62 	bl	800d8b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d9f4:	e060      	b.n	800dab8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	685a      	ldr	r2, [r3, #4]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800da04:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da14:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2220      	movs	r2, #32
 800da20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	2b40      	cmp	r3, #64	; 0x40
 800da2e:	d107      	bne.n	800da40 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7ff ff7d 	bl	800d938 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800da3e:	e03b      	b.n	800dab8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7ff ff35 	bl	800d8b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800da4e:	e033      	b.n	800dab8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800da50:	7bfb      	ldrb	r3, [r7, #15]
 800da52:	2b21      	cmp	r3, #33	; 0x21
 800da54:	d005      	beq.n	800da62 <I2C_MasterTransmit_TXE+0xda>
 800da56:	7bbb      	ldrb	r3, [r7, #14]
 800da58:	2b40      	cmp	r3, #64	; 0x40
 800da5a:	d12d      	bne.n	800dab8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800da5c:	7bfb      	ldrb	r3, [r7, #15]
 800da5e:	2b22      	cmp	r3, #34	; 0x22
 800da60:	d12a      	bne.n	800dab8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da66:	b29b      	uxth	r3, r3
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d108      	bne.n	800da7e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	685a      	ldr	r2, [r3, #4]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da7a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800da7c:	e01c      	b.n	800dab8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da84:	b2db      	uxtb	r3, r3
 800da86:	2b40      	cmp	r3, #64	; 0x40
 800da88:	d103      	bne.n	800da92 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 f88e 	bl	800dbac <I2C_MemoryTransmit_TXE_BTF>
}
 800da90:	e012      	b.n	800dab8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da96:	781a      	ldrb	r2, [r3, #0]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa2:	1c5a      	adds	r2, r3, #1
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800daac:	b29b      	uxth	r3, r3
 800daae:	3b01      	subs	r3, #1
 800dab0:	b29a      	uxth	r2, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800dab6:	e7ff      	b.n	800dab8 <I2C_MasterTransmit_TXE+0x130>
 800dab8:	bf00      	nop
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dacc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	2b21      	cmp	r3, #33	; 0x21
 800dad8:	d164      	bne.n	800dba4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dade:	b29b      	uxth	r3, r3
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d012      	beq.n	800db0a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae8:	781a      	ldrb	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf4:	1c5a      	adds	r2, r3, #1
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dafe:	b29b      	uxth	r3, r3
 800db00:	3b01      	subs	r3, #1
 800db02:	b29a      	uxth	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800db08:	e04c      	b.n	800dba4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b08      	cmp	r3, #8
 800db0e:	d01d      	beq.n	800db4c <I2C_MasterTransmit_BTF+0x8c>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2b20      	cmp	r3, #32
 800db14:	d01a      	beq.n	800db4c <I2C_MasterTransmit_BTF+0x8c>
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800db1c:	d016      	beq.n	800db4c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	685a      	ldr	r2, [r3, #4]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800db2c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2211      	movs	r2, #17
 800db32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2220      	movs	r2, #32
 800db40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f7ff feb7 	bl	800d8b8 <HAL_I2C_MasterTxCpltCallback>
}
 800db4a:	e02b      	b.n	800dba4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	685a      	ldr	r2, [r3, #4]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800db5a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db6a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2220      	movs	r2, #32
 800db76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800db80:	b2db      	uxtb	r3, r3
 800db82:	2b40      	cmp	r3, #64	; 0x40
 800db84:	d107      	bne.n	800db96 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7ff fed2 	bl	800d938 <HAL_I2C_MemTxCpltCallback>
}
 800db94:	e006      	b.n	800dba4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7ff fe8a 	bl	800d8b8 <HAL_I2C_MasterTxCpltCallback>
}
 800dba4:	bf00      	nop
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d11d      	bne.n	800dc00 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d10b      	bne.n	800dbe4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbd0:	b2da      	uxtb	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbdc:	1c9a      	adds	r2, r3, #2
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800dbe2:	e073      	b.n	800dccc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	121b      	asrs	r3, r3, #8
 800dbec:	b2da      	uxtb	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800dbfe:	e065      	b.n	800dccc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d10b      	bne.n	800dc20 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc0c:	b2da      	uxtb	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc18:	1c5a      	adds	r2, r3, #1
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800dc1e:	e055      	b.n	800dccc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc24:	2b02      	cmp	r3, #2
 800dc26:	d151      	bne.n	800dccc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800dc28:	7bfb      	ldrb	r3, [r7, #15]
 800dc2a:	2b22      	cmp	r3, #34	; 0x22
 800dc2c:	d10d      	bne.n	800dc4a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc3c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc42:	1c5a      	adds	r2, r3, #1
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	651a      	str	r2, [r3, #80]	; 0x50
}
 800dc48:	e040      	b.n	800dccc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d015      	beq.n	800dc80 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
 800dc56:	2b21      	cmp	r3, #33	; 0x21
 800dc58:	d112      	bne.n	800dc80 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5e:	781a      	ldrb	r2, [r3, #0]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	3b01      	subs	r3, #1
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800dc7e:	e025      	b.n	800dccc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d120      	bne.n	800dccc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800dc8a:	7bfb      	ldrb	r3, [r7, #15]
 800dc8c:	2b21      	cmp	r3, #33	; 0x21
 800dc8e:	d11d      	bne.n	800dccc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	685a      	ldr	r2, [r3, #4]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800dc9e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dcae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2220      	movs	r2, #32
 800dcba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f7ff fe36 	bl	800d938 <HAL_I2C_MemTxCpltCallback>
}
 800dccc:	bf00      	nop
 800dcce:	3710      	adds	r7, #16
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	2b22      	cmp	r3, #34	; 0x22
 800dce6:	f040 80a2 	bne.w	800de2e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2b03      	cmp	r3, #3
 800dcf6:	d921      	bls.n	800dd3c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	691a      	ldr	r2, [r3, #16]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd02:	b2d2      	uxtb	r2, r2
 800dd04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd0a:	1c5a      	adds	r2, r3, #1
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	3b01      	subs	r3, #1
 800dd18:	b29a      	uxth	r2, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	2b03      	cmp	r3, #3
 800dd26:	f040 8082 	bne.w	800de2e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	685a      	ldr	r2, [r3, #4]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd38:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800dd3a:	e078      	b.n	800de2e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d074      	beq.n	800de2e <I2C_MasterReceive_RXNE+0x15a>
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d002      	beq.n	800dd50 <I2C_MasterReceive_RXNE+0x7c>
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d16e      	bne.n	800de2e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f001 fc43 	bl	800f5dc <I2C_WaitOnSTOPRequestThroughIT>
 800dd56:	4603      	mov	r3, r0
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d142      	bne.n	800dde2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	681a      	ldr	r2, [r3, #0]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd6a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	685a      	ldr	r2, [r3, #4]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800dd7a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	691a      	ldr	r2, [r3, #16]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd86:	b2d2      	uxtb	r2, r2
 800dd88:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd8e:	1c5a      	adds	r2, r3, #1
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2220      	movs	r2, #32
 800dda6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	2b40      	cmp	r3, #64	; 0x40
 800ddb4:	d10a      	bne.n	800ddcc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7ff fdc1 	bl	800d94c <HAL_I2C_MemRxCpltCallback>
}
 800ddca:	e030      	b.n	800de2e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2212      	movs	r2, #18
 800ddd8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f7ff fd76 	bl	800d8cc <HAL_I2C_MasterRxCpltCallback>
}
 800dde0:	e025      	b.n	800de2e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	685a      	ldr	r2, [r3, #4]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ddf0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	691a      	ldr	r2, [r3, #16]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddfc:	b2d2      	uxtb	r2, r2
 800ddfe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de04:	1c5a      	adds	r2, r3, #1
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de0e:	b29b      	uxth	r3, r3
 800de10:	3b01      	subs	r3, #1
 800de12:	b29a      	uxth	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2220      	movs	r2, #32
 800de1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f7ff fd99 	bl	800d960 <HAL_I2C_ErrorCallback>
}
 800de2e:	bf00      	nop
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b084      	sub	sp, #16
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de42:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de48:	b29b      	uxth	r3, r3
 800de4a:	2b04      	cmp	r3, #4
 800de4c:	d11b      	bne.n	800de86 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	685a      	ldr	r2, [r3, #4]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de5c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	691a      	ldr	r2, [r3, #16]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de68:	b2d2      	uxtb	r2, r2
 800de6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de70:	1c5a      	adds	r2, r3, #1
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	3b01      	subs	r3, #1
 800de7e:	b29a      	uxth	r2, r3
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800de84:	e0bd      	b.n	800e002 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	2b03      	cmp	r3, #3
 800de8e:	d129      	bne.n	800dee4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	685a      	ldr	r2, [r3, #4]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de9e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2b04      	cmp	r3, #4
 800dea4:	d00a      	beq.n	800debc <I2C_MasterReceive_BTF+0x86>
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2b02      	cmp	r3, #2
 800deaa:	d007      	beq.n	800debc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800deba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	691a      	ldr	r2, [r3, #16]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec6:	b2d2      	uxtb	r2, r2
 800dec8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dece:	1c5a      	adds	r2, r3, #1
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ded8:	b29b      	uxth	r3, r3
 800deda:	3b01      	subs	r3, #1
 800dedc:	b29a      	uxth	r2, r3
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800dee2:	e08e      	b.n	800e002 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dee8:	b29b      	uxth	r3, r3
 800deea:	2b02      	cmp	r3, #2
 800deec:	d176      	bne.n	800dfdc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2b01      	cmp	r3, #1
 800def2:	d002      	beq.n	800defa <I2C_MasterReceive_BTF+0xc4>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2b10      	cmp	r3, #16
 800def8:	d108      	bne.n	800df0c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	e019      	b.n	800df40 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2b04      	cmp	r3, #4
 800df10:	d002      	beq.n	800df18 <I2C_MasterReceive_BTF+0xe2>
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b02      	cmp	r3, #2
 800df16:	d108      	bne.n	800df2a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800df26:	601a      	str	r2, [r3, #0]
 800df28:	e00a      	b.n	800df40 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2b10      	cmp	r3, #16
 800df2e:	d007      	beq.n	800df40 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	681a      	ldr	r2, [r3, #0]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df3e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	691a      	ldr	r2, [r3, #16]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4a:	b2d2      	uxtb	r2, r2
 800df4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df52:	1c5a      	adds	r2, r3, #1
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	3b01      	subs	r3, #1
 800df60:	b29a      	uxth	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	691a      	ldr	r2, [r3, #16]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df70:	b2d2      	uxtb	r2, r2
 800df72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df78:	1c5a      	adds	r2, r3, #1
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df82:	b29b      	uxth	r3, r3
 800df84:	3b01      	subs	r3, #1
 800df86:	b29a      	uxth	r2, r3
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	685a      	ldr	r2, [r3, #4]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800df9a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2220      	movs	r2, #32
 800dfa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	2b40      	cmp	r3, #64	; 0x40
 800dfae:	d10a      	bne.n	800dfc6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7ff fcc4 	bl	800d94c <HAL_I2C_MemRxCpltCallback>
}
 800dfc4:	e01d      	b.n	800e002 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2212      	movs	r2, #18
 800dfd2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7ff fc79 	bl	800d8cc <HAL_I2C_MasterRxCpltCallback>
}
 800dfda:	e012      	b.n	800e002 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	691a      	ldr	r2, [r3, #16]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe6:	b2d2      	uxtb	r2, r2
 800dfe8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfee:	1c5a      	adds	r2, r3, #1
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	3b01      	subs	r3, #1
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800e002:	bf00      	nop
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}

0800e00a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800e00a:	b480      	push	{r7}
 800e00c:	b083      	sub	sp, #12
 800e00e:	af00      	add	r7, sp, #0
 800e010:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b40      	cmp	r3, #64	; 0x40
 800e01c:	d117      	bne.n	800e04e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e022:	2b00      	cmp	r3, #0
 800e024:	d109      	bne.n	800e03a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	461a      	mov	r2, r3
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e036:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800e038:	e067      	b.n	800e10a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	f043 0301 	orr.w	r3, r3, #1
 800e044:	b2da      	uxtb	r2, r3
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	611a      	str	r2, [r3, #16]
}
 800e04c:	e05d      	b.n	800e10a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	691b      	ldr	r3, [r3, #16]
 800e052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e056:	d133      	bne.n	800e0c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	2b21      	cmp	r3, #33	; 0x21
 800e062:	d109      	bne.n	800e078 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	461a      	mov	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e074:	611a      	str	r2, [r3, #16]
 800e076:	e008      	b.n	800e08a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	f043 0301 	orr.w	r3, r3, #1
 800e082:	b2da      	uxtb	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d004      	beq.n	800e09c <I2C_Master_SB+0x92>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d108      	bne.n	800e0ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d032      	beq.n	800e10a <I2C_Master_SB+0x100>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d02d      	beq.n	800e10a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	685a      	ldr	r2, [r3, #4]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0bc:	605a      	str	r2, [r3, #4]
}
 800e0be:	e024      	b.n	800e10a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10e      	bne.n	800e0e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	11db      	asrs	r3, r3, #7
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	f003 0306 	and.w	r3, r3, #6
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	f063 030f 	orn	r3, r3, #15
 800e0dc:	b2da      	uxtb	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	611a      	str	r2, [r3, #16]
}
 800e0e4:	e011      	b.n	800e10a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d10d      	bne.n	800e10a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	11db      	asrs	r3, r3, #7
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	f003 0306 	and.w	r3, r3, #6
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	f063 030e 	orn	r3, r3, #14
 800e102:	b2da      	uxtb	r2, r3
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	611a      	str	r2, [r3, #16]
}
 800e10a:	bf00      	nop
 800e10c:	370c      	adds	r7, #12
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr

0800e116 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800e116:	b480      	push	{r7}
 800e118:	b083      	sub	sp, #12
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e122:	b2da      	uxtb	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d004      	beq.n	800e13c <I2C_Master_ADD10+0x26>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d108      	bne.n	800e14e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e140:	2b00      	cmp	r3, #0
 800e142:	d00c      	beq.n	800e15e <I2C_Master_ADD10+0x48>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d007      	beq.n	800e15e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	685a      	ldr	r2, [r3, #4]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e15c:	605a      	str	r2, [r3, #4]
  }
}
 800e15e:	bf00      	nop
 800e160:	370c      	adds	r7, #12
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr

0800e16a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800e16a:	b480      	push	{r7}
 800e16c:	b091      	sub	sp, #68	; 0x44
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e178:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e180:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e186:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e18e:	b2db      	uxtb	r3, r3
 800e190:	2b22      	cmp	r3, #34	; 0x22
 800e192:	f040 8169 	bne.w	800e468 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d10f      	bne.n	800e1be <I2C_Master_ADDR+0x54>
 800e19e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1a2:	2b40      	cmp	r3, #64	; 0x40
 800e1a4:	d10b      	bne.n	800e1be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	633b      	str	r3, [r7, #48]	; 0x30
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	695b      	ldr	r3, [r3, #20]
 800e1b0:	633b      	str	r3, [r7, #48]	; 0x30
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	699b      	ldr	r3, [r3, #24]
 800e1b8:	633b      	str	r3, [r7, #48]	; 0x30
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1bc:	e160      	b.n	800e480 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d11d      	bne.n	800e202 <I2C_Master_ADDR+0x98>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	691b      	ldr	r3, [r3, #16]
 800e1ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e1ce:	d118      	bne.n	800e202 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	695b      	ldr	r3, [r3, #20]
 800e1da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	699b      	ldr	r3, [r3, #24]
 800e1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e1f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1fa:	1c5a      	adds	r2, r3, #1
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	651a      	str	r2, [r3, #80]	; 0x50
 800e200:	e13e      	b.n	800e480 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e206:	b29b      	uxth	r3, r3
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d113      	bne.n	800e234 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e20c:	2300      	movs	r3, #0
 800e20e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	695b      	ldr	r3, [r3, #20]
 800e216:	62bb      	str	r3, [r7, #40]	; 0x28
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	699b      	ldr	r3, [r3, #24]
 800e21e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e220:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e230:	601a      	str	r2, [r3, #0]
 800e232:	e115      	b.n	800e460 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e238:	b29b      	uxth	r3, r3
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	f040 808a 	bne.w	800e354 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800e240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e242:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e246:	d137      	bne.n	800e2b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e256:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e266:	d113      	bne.n	800e290 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e276:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e278:	2300      	movs	r3, #0
 800e27a:	627b      	str	r3, [r7, #36]	; 0x24
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	695b      	ldr	r3, [r3, #20]
 800e282:	627b      	str	r3, [r7, #36]	; 0x24
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	699b      	ldr	r3, [r3, #24]
 800e28a:	627b      	str	r3, [r7, #36]	; 0x24
 800e28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28e:	e0e7      	b.n	800e460 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e290:	2300      	movs	r3, #0
 800e292:	623b      	str	r3, [r7, #32]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	695b      	ldr	r3, [r3, #20]
 800e29a:	623b      	str	r3, [r7, #32]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	699b      	ldr	r3, [r3, #24]
 800e2a2:	623b      	str	r3, [r7, #32]
 800e2a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2b4:	601a      	str	r2, [r3, #0]
 800e2b6:	e0d3      	b.n	800e460 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ba:	2b08      	cmp	r3, #8
 800e2bc:	d02e      	beq.n	800e31c <I2C_Master_ADDR+0x1b2>
 800e2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c0:	2b20      	cmp	r3, #32
 800e2c2:	d02b      	beq.n	800e31c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800e2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2c6:	2b12      	cmp	r3, #18
 800e2c8:	d102      	bne.n	800e2d0 <I2C_Master_ADDR+0x166>
 800e2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d125      	bne.n	800e31c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d2:	2b04      	cmp	r3, #4
 800e2d4:	d00e      	beq.n	800e2f4 <I2C_Master_ADDR+0x18a>
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	d00b      	beq.n	800e2f4 <I2C_Master_ADDR+0x18a>
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2de:	2b10      	cmp	r3, #16
 800e2e0:	d008      	beq.n	800e2f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2f0:	601a      	str	r2, [r3, #0]
 800e2f2:	e007      	b.n	800e304 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	681a      	ldr	r2, [r3, #0]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e302:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e304:	2300      	movs	r3, #0
 800e306:	61fb      	str	r3, [r7, #28]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	695b      	ldr	r3, [r3, #20]
 800e30e:	61fb      	str	r3, [r7, #28]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	699b      	ldr	r3, [r3, #24]
 800e316:	61fb      	str	r3, [r7, #28]
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	e0a1      	b.n	800e460 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e32a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e32c:	2300      	movs	r3, #0
 800e32e:	61bb      	str	r3, [r7, #24]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	695b      	ldr	r3, [r3, #20]
 800e336:	61bb      	str	r3, [r7, #24]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	699b      	ldr	r3, [r3, #24]
 800e33e:	61bb      	str	r3, [r7, #24]
 800e340:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e350:	601a      	str	r2, [r3, #0]
 800e352:	e085      	b.n	800e460 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e358:	b29b      	uxth	r3, r3
 800e35a:	2b02      	cmp	r3, #2
 800e35c:	d14d      	bne.n	800e3fa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800e35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e360:	2b04      	cmp	r3, #4
 800e362:	d016      	beq.n	800e392 <I2C_Master_ADDR+0x228>
 800e364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e366:	2b02      	cmp	r3, #2
 800e368:	d013      	beq.n	800e392 <I2C_Master_ADDR+0x228>
 800e36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36c:	2b10      	cmp	r3, #16
 800e36e:	d010      	beq.n	800e392 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e37e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e38e:	601a      	str	r2, [r3, #0]
 800e390:	e007      	b.n	800e3a2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e3a0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3b0:	d117      	bne.n	800e3e2 <I2C_Master_ADDR+0x278>
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e3b8:	d00b      	beq.n	800e3d2 <I2C_Master_ADDR+0x268>
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d008      	beq.n	800e3d2 <I2C_Master_ADDR+0x268>
 800e3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c2:	2b08      	cmp	r3, #8
 800e3c4:	d005      	beq.n	800e3d2 <I2C_Master_ADDR+0x268>
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c8:	2b10      	cmp	r3, #16
 800e3ca:	d002      	beq.n	800e3d2 <I2C_Master_ADDR+0x268>
 800e3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ce:	2b20      	cmp	r3, #32
 800e3d0:	d107      	bne.n	800e3e2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	685a      	ldr	r2, [r3, #4]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e3e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	617b      	str	r3, [r7, #20]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	695b      	ldr	r3, [r3, #20]
 800e3ec:	617b      	str	r3, [r7, #20]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	699b      	ldr	r3, [r3, #24]
 800e3f4:	617b      	str	r3, [r7, #20]
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	e032      	b.n	800e460 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e408:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e418:	d117      	bne.n	800e44a <I2C_Master_ADDR+0x2e0>
 800e41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e420:	d00b      	beq.n	800e43a <I2C_Master_ADDR+0x2d0>
 800e422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e424:	2b01      	cmp	r3, #1
 800e426:	d008      	beq.n	800e43a <I2C_Master_ADDR+0x2d0>
 800e428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42a:	2b08      	cmp	r3, #8
 800e42c:	d005      	beq.n	800e43a <I2C_Master_ADDR+0x2d0>
 800e42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e430:	2b10      	cmp	r3, #16
 800e432:	d002      	beq.n	800e43a <I2C_Master_ADDR+0x2d0>
 800e434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e436:	2b20      	cmp	r3, #32
 800e438:	d107      	bne.n	800e44a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	685a      	ldr	r2, [r3, #4]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e448:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e44a:	2300      	movs	r3, #0
 800e44c:	613b      	str	r3, [r7, #16]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	695b      	ldr	r3, [r3, #20]
 800e454:	613b      	str	r3, [r7, #16]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	699b      	ldr	r3, [r3, #24]
 800e45c:	613b      	str	r3, [r7, #16]
 800e45e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800e466:	e00b      	b.n	800e480 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e468:	2300      	movs	r3, #0
 800e46a:	60fb      	str	r3, [r7, #12]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	695b      	ldr	r3, [r3, #20]
 800e472:	60fb      	str	r3, [r7, #12]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	699b      	ldr	r3, [r3, #24]
 800e47a:	60fb      	str	r3, [r7, #12]
 800e47c:	68fb      	ldr	r3, [r7, #12]
}
 800e47e:	e7ff      	b.n	800e480 <I2C_Master_ADDR+0x316>
 800e480:	bf00      	nop
 800e482:	3744      	adds	r7, #68	; 0x44
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e49a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d02b      	beq.n	800e4fe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4aa:	781a      	ldrb	r2, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b6:	1c5a      	adds	r2, r3, #1
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d114      	bne.n	800e4fe <I2C_SlaveTransmit_TXE+0x72>
 800e4d4:	7bfb      	ldrb	r3, [r7, #15]
 800e4d6:	2b29      	cmp	r3, #41	; 0x29
 800e4d8:	d111      	bne.n	800e4fe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	685a      	ldr	r2, [r3, #4]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e4e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2221      	movs	r2, #33	; 0x21
 800e4ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2228      	movs	r2, #40	; 0x28
 800e4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7ff f9f1 	bl	800d8e0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e4fe:	bf00      	nop
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800e506:	b480      	push	{r7}
 800e508:	b083      	sub	sp, #12
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e512:	b29b      	uxth	r3, r3
 800e514:	2b00      	cmp	r3, #0
 800e516:	d011      	beq.n	800e53c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e51c:	781a      	ldrb	r2, [r3, #0]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e528:	1c5a      	adds	r2, r3, #1
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e532:	b29b      	uxth	r3, r3
 800e534:	3b01      	subs	r3, #1
 800e536:	b29a      	uxth	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800e53c:	bf00      	nop
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e556:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d02c      	beq.n	800e5bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	691a      	ldr	r2, [r3, #16]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56c:	b2d2      	uxtb	r2, r2
 800e56e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e57e:	b29b      	uxth	r3, r3
 800e580:	3b01      	subs	r3, #1
 800e582:	b29a      	uxth	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d114      	bne.n	800e5bc <I2C_SlaveReceive_RXNE+0x74>
 800e592:	7bfb      	ldrb	r3, [r7, #15]
 800e594:	2b2a      	cmp	r3, #42	; 0x2a
 800e596:	d111      	bne.n	800e5bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	685a      	ldr	r2, [r3, #4]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2222      	movs	r2, #34	; 0x22
 800e5ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2228      	movs	r2, #40	; 0x28
 800e5b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f7ff f99c 	bl	800d8f4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800e5bc:	bf00      	nop
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d012      	beq.n	800e5fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	691a      	ldr	r2, [r3, #16]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e0:	b2d2      	uxtb	r2, r2
 800e5e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e8:	1c5a      	adds	r2, r3, #1
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	3b01      	subs	r3, #1
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800e612:	2300      	movs	r3, #0
 800e614:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e622:	2b28      	cmp	r3, #40	; 0x28
 800e624:	d127      	bne.n	800e676 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	685a      	ldr	r2, [r3, #4]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e634:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	089b      	lsrs	r3, r3, #2
 800e63a:	f003 0301 	and.w	r3, r3, #1
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d101      	bne.n	800e646 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800e642:	2301      	movs	r3, #1
 800e644:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	09db      	lsrs	r3, r3, #7
 800e64a:	f003 0301 	and.w	r3, r3, #1
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d103      	bne.n	800e65a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	81bb      	strh	r3, [r7, #12]
 800e658:	e002      	b.n	800e660 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	699b      	ldr	r3, [r3, #24]
 800e65e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800e668:	89ba      	ldrh	r2, [r7, #12]
 800e66a:	7bfb      	ldrb	r3, [r7, #15]
 800e66c:	4619      	mov	r1, r3
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f7ff f94a 	bl	800d908 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e674:	e00e      	b.n	800e694 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e676:	2300      	movs	r3, #0
 800e678:	60bb      	str	r3, [r7, #8]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	695b      	ldr	r3, [r3, #20]
 800e680:	60bb      	str	r3, [r7, #8]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	699b      	ldr	r3, [r3, #24]
 800e688:	60bb      	str	r3, [r7, #8]
 800e68a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800e694:	bf00      	nop
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	685a      	ldr	r2, [r3, #4]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e6ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800e6bc:	2300      	movs	r3, #0
 800e6be:	60bb      	str	r3, [r7, #8]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	695b      	ldr	r3, [r3, #20]
 800e6c6:	60bb      	str	r3, [r7, #8]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f042 0201 	orr.w	r2, r2, #1
 800e6d6:	601a      	str	r2, [r3, #0]
 800e6d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e6f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e6f8:	d172      	bne.n	800e7e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e6fa:	7bfb      	ldrb	r3, [r7, #15]
 800e6fc:	2b22      	cmp	r3, #34	; 0x22
 800e6fe:	d002      	beq.n	800e706 <I2C_Slave_STOPF+0x6a>
 800e700:	7bfb      	ldrb	r3, [r7, #15]
 800e702:	2b2a      	cmp	r3, #42	; 0x2a
 800e704:	d135      	bne.n	800e772 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	b29a      	uxth	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e718:	b29b      	uxth	r3, r3
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d005      	beq.n	800e72a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e722:	f043 0204 	orr.w	r2, r3, #4
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	685a      	ldr	r2, [r3, #4]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e738:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fd fc44 	bl	800bfcc <HAL_DMA_GetState>
 800e744:	4603      	mov	r3, r0
 800e746:	2b01      	cmp	r3, #1
 800e748:	d049      	beq.n	800e7de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e74e:	4a69      	ldr	r2, [pc, #420]	; (800e8f4 <I2C_Slave_STOPF+0x258>)
 800e750:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e756:	4618      	mov	r0, r3
 800e758:	f7fd fa8c 	bl	800bc74 <HAL_DMA_Abort_IT>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d03d      	beq.n	800e7de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e76c:	4610      	mov	r0, r2
 800e76e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e770:	e035      	b.n	800e7de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e784:	b29b      	uxth	r3, r3
 800e786:	2b00      	cmp	r3, #0
 800e788:	d005      	beq.n	800e796 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e78e:	f043 0204 	orr.w	r2, r3, #4
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e7a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fd fc0e 	bl	800bfcc <HAL_DMA_GetState>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d014      	beq.n	800e7e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ba:	4a4e      	ldr	r2, [pc, #312]	; (800e8f4 <I2C_Slave_STOPF+0x258>)
 800e7bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fd fa56 	bl	800bc74 <HAL_DMA_Abort_IT>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d008      	beq.n	800e7e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e7d8:	4610      	mov	r0, r2
 800e7da:	4798      	blx	r3
 800e7dc:	e000      	b.n	800e7e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e7de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d03e      	beq.n	800e868 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	695b      	ldr	r3, [r3, #20]
 800e7f0:	f003 0304 	and.w	r3, r3, #4
 800e7f4:	2b04      	cmp	r3, #4
 800e7f6:	d112      	bne.n	800e81e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	691a      	ldr	r2, [r3, #16]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e802:	b2d2      	uxtb	r2, r2
 800e804:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e80a:	1c5a      	adds	r2, r3, #1
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e814:	b29b      	uxth	r3, r3
 800e816:	3b01      	subs	r3, #1
 800e818:	b29a      	uxth	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	695b      	ldr	r3, [r3, #20]
 800e824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e828:	2b40      	cmp	r3, #64	; 0x40
 800e82a:	d112      	bne.n	800e852 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	691a      	ldr	r2, [r3, #16]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e836:	b2d2      	uxtb	r2, r2
 800e838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e848:	b29b      	uxth	r3, r3
 800e84a:	3b01      	subs	r3, #1
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e856:	b29b      	uxth	r3, r3
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d005      	beq.n	800e868 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e860:	f043 0204 	orr.w	r2, r3, #4
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d003      	beq.n	800e878 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 f8b3 	bl	800e9dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800e876:	e039      	b.n	800e8ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e878:	7bfb      	ldrb	r3, [r7, #15]
 800e87a:	2b2a      	cmp	r3, #42	; 0x2a
 800e87c:	d109      	bne.n	800e892 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2200      	movs	r2, #0
 800e882:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2228      	movs	r2, #40	; 0x28
 800e888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f7ff f831 	bl	800d8f4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b28      	cmp	r3, #40	; 0x28
 800e89c:	d111      	bne.n	800e8c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4a15      	ldr	r2, [pc, #84]	; (800e8f8 <I2C_Slave_STOPF+0x25c>)
 800e8a2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2220      	movs	r2, #32
 800e8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7ff f832 	bl	800d924 <HAL_I2C_ListenCpltCallback>
}
 800e8c0:	e014      	b.n	800e8ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c6:	2b22      	cmp	r3, #34	; 0x22
 800e8c8:	d002      	beq.n	800e8d0 <I2C_Slave_STOPF+0x234>
 800e8ca:	7bfb      	ldrb	r3, [r7, #15]
 800e8cc:	2b22      	cmp	r3, #34	; 0x22
 800e8ce:	d10d      	bne.n	800e8ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2220      	movs	r2, #32
 800e8da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f7ff f804 	bl	800d8f4 <HAL_I2C_SlaveRxCpltCallback>
}
 800e8ec:	bf00      	nop
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	0800f1dd 	.word	0x0800f1dd
 800e8f8:	ffff0000 	.word	0xffff0000

0800e8fc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e90a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e910:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	2b08      	cmp	r3, #8
 800e916:	d002      	beq.n	800e91e <I2C_Slave_AF+0x22>
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	2b20      	cmp	r3, #32
 800e91c:	d129      	bne.n	800e972 <I2C_Slave_AF+0x76>
 800e91e:	7bfb      	ldrb	r3, [r7, #15]
 800e920:	2b28      	cmp	r3, #40	; 0x28
 800e922:	d126      	bne.n	800e972 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4a2c      	ldr	r2, [pc, #176]	; (800e9d8 <I2C_Slave_AF+0xdc>)
 800e928:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	685a      	ldr	r2, [r3, #4]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e938:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e942:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e952:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2220      	movs	r2, #32
 800e95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f7fe ffda 	bl	800d924 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800e970:	e02e      	b.n	800e9d0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e972:	7bfb      	ldrb	r3, [r7, #15]
 800e974:	2b21      	cmp	r3, #33	; 0x21
 800e976:	d126      	bne.n	800e9c6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	4a17      	ldr	r2, [pc, #92]	; (800e9d8 <I2C_Slave_AF+0xdc>)
 800e97c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2221      	movs	r2, #33	; 0x21
 800e982:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2220      	movs	r2, #32
 800e988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	685a      	ldr	r2, [r3, #4]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e9a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e9ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e9bc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7fe ff8e 	bl	800d8e0 <HAL_I2C_SlaveTxCpltCallback>
}
 800e9c4:	e004      	b.n	800e9d0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e9ce:	615a      	str	r2, [r3, #20]
}
 800e9d0:	bf00      	nop
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	ffff0000 	.word	0xffff0000

0800e9dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b084      	sub	sp, #16
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e9f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e9f4:	7bbb      	ldrb	r3, [r7, #14]
 800e9f6:	2b10      	cmp	r3, #16
 800e9f8:	d002      	beq.n	800ea00 <I2C_ITError+0x24>
 800e9fa:	7bbb      	ldrb	r3, [r7, #14]
 800e9fc:	2b40      	cmp	r3, #64	; 0x40
 800e9fe:	d10a      	bne.n	800ea16 <I2C_ITError+0x3a>
 800ea00:	7bfb      	ldrb	r3, [r7, #15]
 800ea02:	2b22      	cmp	r3, #34	; 0x22
 800ea04:	d107      	bne.n	800ea16 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea14:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ea16:	7bfb      	ldrb	r3, [r7, #15]
 800ea18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ea1c:	2b28      	cmp	r3, #40	; 0x28
 800ea1e:	d107      	bne.n	800ea30 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2200      	movs	r2, #0
 800ea24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2228      	movs	r2, #40	; 0x28
 800ea2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ea2e:	e015      	b.n	800ea5c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea3e:	d00a      	beq.n	800ea56 <I2C_ITError+0x7a>
 800ea40:	7bfb      	ldrb	r3, [r7, #15]
 800ea42:	2b60      	cmp	r3, #96	; 0x60
 800ea44:	d007      	beq.n	800ea56 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2220      	movs	r2, #32
 800ea4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea6a:	d162      	bne.n	800eb32 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	685a      	ldr	r2, [r3, #4]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea7a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d020      	beq.n	800eacc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea8e:	4a6a      	ldr	r2, [pc, #424]	; (800ec38 <I2C_ITError+0x25c>)
 800ea90:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fd f8ec 	bl	800bc74 <HAL_DMA_Abort_IT>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 8089 	beq.w	800ebb6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f022 0201 	bic.w	r2, r2, #1
 800eab2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2220      	movs	r2, #32
 800eab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800eac6:	4610      	mov	r0, r2
 800eac8:	4798      	blx	r3
 800eaca:	e074      	b.n	800ebb6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead0:	4a59      	ldr	r2, [pc, #356]	; (800ec38 <I2C_ITError+0x25c>)
 800ead2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead8:	4618      	mov	r0, r3
 800eada:	f7fd f8cb 	bl	800bc74 <HAL_DMA_Abort_IT>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d068      	beq.n	800ebb6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	695b      	ldr	r3, [r3, #20]
 800eaea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaee:	2b40      	cmp	r3, #64	; 0x40
 800eaf0:	d10b      	bne.n	800eb0a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	691a      	ldr	r2, [r3, #16]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafc:	b2d2      	uxtb	r2, r2
 800eafe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb04:	1c5a      	adds	r2, r3, #1
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f022 0201 	bic.w	r2, r2, #1
 800eb18:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2220      	movs	r2, #32
 800eb1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800eb2c:	4610      	mov	r0, r2
 800eb2e:	4798      	blx	r3
 800eb30:	e041      	b.n	800ebb6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b60      	cmp	r3, #96	; 0x60
 800eb3c:	d125      	bne.n	800eb8a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2220      	movs	r2, #32
 800eb42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	695b      	ldr	r3, [r3, #20]
 800eb52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb56:	2b40      	cmp	r3, #64	; 0x40
 800eb58:	d10b      	bne.n	800eb72 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	691a      	ldr	r2, [r3, #16]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb64:	b2d2      	uxtb	r2, r2
 800eb66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb6c:	1c5a      	adds	r2, r3, #1
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f022 0201 	bic.w	r2, r2, #1
 800eb80:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f7fe fef6 	bl	800d974 <HAL_I2C_AbortCpltCallback>
 800eb88:	e015      	b.n	800ebb6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	695b      	ldr	r3, [r3, #20]
 800eb90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb94:	2b40      	cmp	r3, #64	; 0x40
 800eb96:	d10b      	bne.n	800ebb0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	691a      	ldr	r2, [r3, #16]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba2:	b2d2      	uxtb	r2, r2
 800eba4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebaa:	1c5a      	adds	r2, r3, #1
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7fe fed5 	bl	800d960 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	f003 0301 	and.w	r3, r3, #1
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10e      	bne.n	800ebe4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d109      	bne.n	800ebe4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d104      	bne.n	800ebe4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d007      	beq.n	800ebf4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	685a      	ldr	r2, [r3, #4]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ebf2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebfa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec00:	f003 0304 	and.w	r3, r3, #4
 800ec04:	2b04      	cmp	r3, #4
 800ec06:	d113      	bne.n	800ec30 <I2C_ITError+0x254>
 800ec08:	7bfb      	ldrb	r3, [r7, #15]
 800ec0a:	2b28      	cmp	r3, #40	; 0x28
 800ec0c:	d110      	bne.n	800ec30 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4a0a      	ldr	r2, [pc, #40]	; (800ec3c <I2C_ITError+0x260>)
 800ec12:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2200      	movs	r2, #0
 800ec18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2220      	movs	r2, #32
 800ec1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2200      	movs	r2, #0
 800ec26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f7fe fe7a 	bl	800d924 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ec30:	bf00      	nop
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	0800f1dd 	.word	0x0800f1dd
 800ec3c:	ffff0000 	.word	0xffff0000

0800ec40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b088      	sub	sp, #32
 800ec44:	af02      	add	r7, sp, #8
 800ec46:	60f8      	str	r0, [r7, #12]
 800ec48:	607a      	str	r2, [r7, #4]
 800ec4a:	603b      	str	r3, [r7, #0]
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	2b08      	cmp	r3, #8
 800ec5a:	d006      	beq.n	800ec6a <I2C_MasterRequestWrite+0x2a>
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d003      	beq.n	800ec6a <I2C_MasterRequestWrite+0x2a>
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ec68:	d108      	bne.n	800ec7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ec78:	601a      	str	r2, [r3, #0]
 800ec7a:	e00b      	b.n	800ec94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec80:	2b12      	cmp	r3, #18
 800ec82:	d107      	bne.n	800ec94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ec92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	9300      	str	r3, [sp, #0]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f000 fb43 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d00d      	beq.n	800ecc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecba:	d103      	bne.n	800ecc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ecc4:	2303      	movs	r3, #3
 800ecc6:	e035      	b.n	800ed34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	691b      	ldr	r3, [r3, #16]
 800eccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecd0:	d108      	bne.n	800ece4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ecd2:	897b      	ldrh	r3, [r7, #10]
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ece0:	611a      	str	r2, [r3, #16]
 800ece2:	e01b      	b.n	800ed1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ece4:	897b      	ldrh	r3, [r7, #10]
 800ece6:	11db      	asrs	r3, r3, #7
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	f003 0306 	and.w	r3, r3, #6
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	f063 030f 	orn	r3, r3, #15
 800ecf4:	b2da      	uxtb	r2, r3
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	490e      	ldr	r1, [pc, #56]	; (800ed3c <I2C_MasterRequestWrite+0xfc>)
 800ed02:	68f8      	ldr	r0, [r7, #12]
 800ed04:	f000 fb69 	bl	800f3da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d001      	beq.n	800ed12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	e010      	b.n	800ed34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ed12:	897b      	ldrh	r3, [r7, #10]
 800ed14:	b2da      	uxtb	r2, r3
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	4907      	ldr	r1, [pc, #28]	; (800ed40 <I2C_MasterRequestWrite+0x100>)
 800ed22:	68f8      	ldr	r0, [r7, #12]
 800ed24:	f000 fb59 	bl	800f3da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d001      	beq.n	800ed32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e000      	b.n	800ed34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ed32:	2300      	movs	r3, #0
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3718      	adds	r7, #24
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	00010008 	.word	0x00010008
 800ed40:	00010002 	.word	0x00010002

0800ed44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b088      	sub	sp, #32
 800ed48:	af02      	add	r7, sp, #8
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	607a      	str	r2, [r7, #4]
 800ed4e:	603b      	str	r3, [r7, #0]
 800ed50:	460b      	mov	r3, r1
 800ed52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	2b08      	cmp	r3, #8
 800ed6e:	d006      	beq.n	800ed7e <I2C_MasterRequestRead+0x3a>
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d003      	beq.n	800ed7e <I2C_MasterRequestRead+0x3a>
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ed7c:	d108      	bne.n	800ed90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed8c:	601a      	str	r2, [r3, #0]
 800ed8e:	e00b      	b.n	800eda8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed94:	2b11      	cmp	r3, #17
 800ed96:	d107      	bne.n	800eda8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eda6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f000 fab9 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d00d      	beq.n	800eddc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edce:	d103      	bne.n	800edd8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800edd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800edd8:	2303      	movs	r3, #3
 800edda:	e079      	b.n	800eed0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	691b      	ldr	r3, [r3, #16]
 800ede0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ede4:	d108      	bne.n	800edf8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ede6:	897b      	ldrh	r3, [r7, #10]
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	f043 0301 	orr.w	r3, r3, #1
 800edee:	b2da      	uxtb	r2, r3
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	611a      	str	r2, [r3, #16]
 800edf6:	e05f      	b.n	800eeb8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800edf8:	897b      	ldrh	r3, [r7, #10]
 800edfa:	11db      	asrs	r3, r3, #7
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	f003 0306 	and.w	r3, r3, #6
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	f063 030f 	orn	r3, r3, #15
 800ee08:	b2da      	uxtb	r2, r3
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	4930      	ldr	r1, [pc, #192]	; (800eed8 <I2C_MasterRequestRead+0x194>)
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f000 fadf 	bl	800f3da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d001      	beq.n	800ee26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800ee22:	2301      	movs	r3, #1
 800ee24:	e054      	b.n	800eed0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ee26:	897b      	ldrh	r3, [r7, #10]
 800ee28:	b2da      	uxtb	r2, r3
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	4929      	ldr	r1, [pc, #164]	; (800eedc <I2C_MasterRequestRead+0x198>)
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f000 facf 	bl	800f3da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d001      	beq.n	800ee46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800ee42:	2301      	movs	r3, #1
 800ee44:	e044      	b.n	800eed0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ee46:	2300      	movs	r3, #0
 800ee48:	613b      	str	r3, [r7, #16]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	695b      	ldr	r3, [r3, #20]
 800ee50:	613b      	str	r3, [r7, #16]
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	613b      	str	r3, [r7, #16]
 800ee5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ee6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f000 fa57 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d00d      	beq.n	800eea0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee92:	d103      	bne.n	800ee9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ee9c:	2303      	movs	r3, #3
 800ee9e:	e017      	b.n	800eed0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800eea0:	897b      	ldrh	r3, [r7, #10]
 800eea2:	11db      	asrs	r3, r3, #7
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	f003 0306 	and.w	r3, r3, #6
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	f063 030e 	orn	r3, r3, #14
 800eeb0:	b2da      	uxtb	r2, r3
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	4907      	ldr	r1, [pc, #28]	; (800eedc <I2C_MasterRequestRead+0x198>)
 800eebe:	68f8      	ldr	r0, [r7, #12]
 800eec0:	f000 fa8b 	bl	800f3da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d001      	beq.n	800eece <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800eeca:	2301      	movs	r3, #1
 800eecc:	e000      	b.n	800eed0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800eece:	2300      	movs	r3, #0
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3718      	adds	r7, #24
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	00010008 	.word	0x00010008
 800eedc:	00010002 	.word	0x00010002

0800eee0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b088      	sub	sp, #32
 800eee4:	af02      	add	r7, sp, #8
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	4608      	mov	r0, r1
 800eeea:	4611      	mov	r1, r2
 800eeec:	461a      	mov	r2, r3
 800eeee:	4603      	mov	r3, r0
 800eef0:	817b      	strh	r3, [r7, #10]
 800eef2:	460b      	mov	r3, r1
 800eef4:	813b      	strh	r3, [r7, #8]
 800eef6:	4613      	mov	r3, r2
 800eef8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ef08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0c:	9300      	str	r3, [sp, #0]
 800ef0e:	6a3b      	ldr	r3, [r7, #32]
 800ef10:	2200      	movs	r2, #0
 800ef12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f000 fa08 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d00d      	beq.n	800ef3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef30:	d103      	bne.n	800ef3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ef3a:	2303      	movs	r3, #3
 800ef3c:	e05f      	b.n	800effe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ef3e:	897b      	ldrh	r3, [r7, #10]
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	461a      	mov	r2, r3
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ef4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef50:	6a3a      	ldr	r2, [r7, #32]
 800ef52:	492d      	ldr	r1, [pc, #180]	; (800f008 <I2C_RequestMemoryWrite+0x128>)
 800ef54:	68f8      	ldr	r0, [r7, #12]
 800ef56:	f000 fa40 	bl	800f3da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d001      	beq.n	800ef64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ef60:	2301      	movs	r3, #1
 800ef62:	e04c      	b.n	800effe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ef64:	2300      	movs	r3, #0
 800ef66:	617b      	str	r3, [r7, #20]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	695b      	ldr	r3, [r3, #20]
 800ef6e:	617b      	str	r3, [r7, #20]
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	699b      	ldr	r3, [r3, #24]
 800ef76:	617b      	str	r3, [r7, #20]
 800ef78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ef7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef7c:	6a39      	ldr	r1, [r7, #32]
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f000 faaa 	bl	800f4d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00d      	beq.n	800efa6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef8e:	2b04      	cmp	r3, #4
 800ef90:	d107      	bne.n	800efa2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800efa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800efa2:	2301      	movs	r3, #1
 800efa4:	e02b      	b.n	800effe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800efa6:	88fb      	ldrh	r3, [r7, #6]
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d105      	bne.n	800efb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800efac:	893b      	ldrh	r3, [r7, #8]
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	611a      	str	r2, [r3, #16]
 800efb6:	e021      	b.n	800effc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800efb8:	893b      	ldrh	r3, [r7, #8]
 800efba:	0a1b      	lsrs	r3, r3, #8
 800efbc:	b29b      	uxth	r3, r3
 800efbe:	b2da      	uxtb	r2, r3
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800efc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efc8:	6a39      	ldr	r1, [r7, #32]
 800efca:	68f8      	ldr	r0, [r7, #12]
 800efcc:	f000 fa84 	bl	800f4d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800efd0:	4603      	mov	r3, r0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00d      	beq.n	800eff2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efda:	2b04      	cmp	r3, #4
 800efdc:	d107      	bne.n	800efee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800efec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800efee:	2301      	movs	r3, #1
 800eff0:	e005      	b.n	800effe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800eff2:	893b      	ldrh	r3, [r7, #8]
 800eff4:	b2da      	uxtb	r2, r3
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800effc:	2300      	movs	r3, #0
}
 800effe:	4618      	mov	r0, r3
 800f000:	3718      	adds	r7, #24
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	00010002 	.word	0x00010002

0800f00c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b088      	sub	sp, #32
 800f010:	af02      	add	r7, sp, #8
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	4608      	mov	r0, r1
 800f016:	4611      	mov	r1, r2
 800f018:	461a      	mov	r2, r3
 800f01a:	4603      	mov	r3, r0
 800f01c:	817b      	strh	r3, [r7, #10]
 800f01e:	460b      	mov	r3, r1
 800f020:	813b      	strh	r3, [r7, #8]
 800f022:	4613      	mov	r3, r2
 800f024:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f034:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f044:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f048:	9300      	str	r3, [sp, #0]
 800f04a:	6a3b      	ldr	r3, [r7, #32]
 800f04c:	2200      	movs	r2, #0
 800f04e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f052:	68f8      	ldr	r0, [r7, #12]
 800f054:	f000 f96a 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00d      	beq.n	800f07a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f06c:	d103      	bne.n	800f076 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f074:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f076:	2303      	movs	r3, #3
 800f078:	e0aa      	b.n	800f1d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f07a:	897b      	ldrh	r3, [r7, #10]
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	461a      	mov	r2, r3
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f088:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08c:	6a3a      	ldr	r2, [r7, #32]
 800f08e:	4952      	ldr	r1, [pc, #328]	; (800f1d8 <I2C_RequestMemoryRead+0x1cc>)
 800f090:	68f8      	ldr	r0, [r7, #12]
 800f092:	f000 f9a2 	bl	800f3da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d001      	beq.n	800f0a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800f09c:	2301      	movs	r3, #1
 800f09e:	e097      	b.n	800f1d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	617b      	str	r3, [r7, #20]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	695b      	ldr	r3, [r3, #20]
 800f0aa:	617b      	str	r3, [r7, #20]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	699b      	ldr	r3, [r3, #24]
 800f0b2:	617b      	str	r3, [r7, #20]
 800f0b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0b8:	6a39      	ldr	r1, [r7, #32]
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f000 fa0c 	bl	800f4d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00d      	beq.n	800f0e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0ca:	2b04      	cmp	r3, #4
 800f0cc:	d107      	bne.n	800f0de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f0dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f0de:	2301      	movs	r3, #1
 800f0e0:	e076      	b.n	800f1d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f0e2:	88fb      	ldrh	r3, [r7, #6]
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d105      	bne.n	800f0f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f0e8:	893b      	ldrh	r3, [r7, #8]
 800f0ea:	b2da      	uxtb	r2, r3
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	611a      	str	r2, [r3, #16]
 800f0f2:	e021      	b.n	800f138 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800f0f4:	893b      	ldrh	r3, [r7, #8]
 800f0f6:	0a1b      	lsrs	r3, r3, #8
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	b2da      	uxtb	r2, r3
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f104:	6a39      	ldr	r1, [r7, #32]
 800f106:	68f8      	ldr	r0, [r7, #12]
 800f108:	f000 f9e6 	bl	800f4d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d00d      	beq.n	800f12e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f116:	2b04      	cmp	r3, #4
 800f118:	d107      	bne.n	800f12a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	681a      	ldr	r2, [r3, #0]
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f128:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800f12a:	2301      	movs	r3, #1
 800f12c:	e050      	b.n	800f1d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800f12e:	893b      	ldrh	r3, [r7, #8]
 800f130:	b2da      	uxtb	r2, r3
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f13a:	6a39      	ldr	r1, [r7, #32]
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	f000 f9cb 	bl	800f4d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d00d      	beq.n	800f164 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f14c:	2b04      	cmp	r3, #4
 800f14e:	d107      	bne.n	800f160 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	681a      	ldr	r2, [r3, #0]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f15e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800f160:	2301      	movs	r3, #1
 800f162:	e035      	b.n	800f1d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f172:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f176:	9300      	str	r3, [sp, #0]
 800f178:	6a3b      	ldr	r3, [r7, #32]
 800f17a:	2200      	movs	r2, #0
 800f17c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f180:	68f8      	ldr	r0, [r7, #12]
 800f182:	f000 f8d3 	bl	800f32c <I2C_WaitOnFlagUntilTimeout>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00d      	beq.n	800f1a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f19a:	d103      	bne.n	800f1a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f1a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f1a4:	2303      	movs	r3, #3
 800f1a6:	e013      	b.n	800f1d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800f1a8:	897b      	ldrh	r3, [r7, #10]
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	f043 0301 	orr.w	r3, r3, #1
 800f1b0:	b2da      	uxtb	r2, r3
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ba:	6a3a      	ldr	r2, [r7, #32]
 800f1bc:	4906      	ldr	r1, [pc, #24]	; (800f1d8 <I2C_RequestMemoryRead+0x1cc>)
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f000 f90b 	bl	800f3da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d001      	beq.n	800f1ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e000      	b.n	800f1d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3718      	adds	r7, #24
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	00010002 	.word	0x00010002

0800f1dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b086      	sub	sp, #24
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800f1f6:	4b4b      	ldr	r3, [pc, #300]	; (800f324 <I2C_DMAAbort+0x148>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	08db      	lsrs	r3, r3, #3
 800f1fc:	4a4a      	ldr	r2, [pc, #296]	; (800f328 <I2C_DMAAbort+0x14c>)
 800f1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f202:	0a1a      	lsrs	r2, r3, #8
 800f204:	4613      	mov	r3, r2
 800f206:	009b      	lsls	r3, r3, #2
 800f208:	4413      	add	r3, r2
 800f20a:	00da      	lsls	r2, r3, #3
 800f20c:	1ad3      	subs	r3, r2, r3
 800f20e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d106      	bne.n	800f224 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f21a:	f043 0220 	orr.w	r2, r3, #32
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800f222:	e00a      	b.n	800f23a <I2C_DMAAbort+0x5e>
    }
    count--;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	3b01      	subs	r3, #1
 800f228:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f238:	d0ea      	beq.n	800f210 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d003      	beq.n	800f24a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f246:	2200      	movs	r2, #0
 800f248:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d003      	beq.n	800f25a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f256:	2200      	movs	r2, #0
 800f258:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f268:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	2200      	movs	r2, #0
 800f26e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f274:	2b00      	cmp	r3, #0
 800f276:	d003      	beq.n	800f280 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f27c:	2200      	movs	r2, #0
 800f27e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f284:	2b00      	cmp	r3, #0
 800f286:	d003      	beq.n	800f290 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f28c:	2200      	movs	r2, #0
 800f28e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f022 0201 	bic.w	r2, r2, #1
 800f29e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	2b60      	cmp	r3, #96	; 0x60
 800f2aa:	d10e      	bne.n	800f2ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	2220      	movs	r2, #32
 800f2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800f2c2:	6978      	ldr	r0, [r7, #20]
 800f2c4:	f7fe fb56 	bl	800d974 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800f2c8:	e027      	b.n	800f31a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f2ca:	7cfb      	ldrb	r3, [r7, #19]
 800f2cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f2d0:	2b28      	cmp	r3, #40	; 0x28
 800f2d2:	d117      	bne.n	800f304 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f042 0201 	orr.w	r2, r2, #1
 800f2e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f2f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	2228      	movs	r2, #40	; 0x28
 800f2fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f302:	e007      	b.n	800f314 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	2220      	movs	r2, #32
 800f308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	2200      	movs	r2, #0
 800f310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800f314:	6978      	ldr	r0, [r7, #20]
 800f316:	f7fe fb23 	bl	800d960 <HAL_I2C_ErrorCallback>
}
 800f31a:	bf00      	nop
 800f31c:	3718      	adds	r7, #24
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	20000038 	.word	0x20000038
 800f328:	14f8b589 	.word	0x14f8b589

0800f32c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	603b      	str	r3, [r7, #0]
 800f338:	4613      	mov	r3, r2
 800f33a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f33c:	e025      	b.n	800f38a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f344:	d021      	beq.n	800f38a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f346:	f7fc f94f 	bl	800b5e8 <HAL_GetTick>
 800f34a:	4602      	mov	r2, r0
 800f34c:	69bb      	ldr	r3, [r7, #24]
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	683a      	ldr	r2, [r7, #0]
 800f352:	429a      	cmp	r2, r3
 800f354:	d302      	bcc.n	800f35c <I2C_WaitOnFlagUntilTimeout+0x30>
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d116      	bne.n	800f38a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2200      	movs	r2, #0
 800f360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2220      	movs	r2, #32
 800f366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2200      	movs	r2, #0
 800f36e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f376:	f043 0220 	orr.w	r2, r3, #32
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2200      	movs	r2, #0
 800f382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f386:	2301      	movs	r3, #1
 800f388:	e023      	b.n	800f3d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	0c1b      	lsrs	r3, r3, #16
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	2b01      	cmp	r3, #1
 800f392:	d10d      	bne.n	800f3b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	695b      	ldr	r3, [r3, #20]
 800f39a:	43da      	mvns	r2, r3
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	4013      	ands	r3, r2
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	bf0c      	ite	eq
 800f3a6:	2301      	moveq	r3, #1
 800f3a8:	2300      	movne	r3, #0
 800f3aa:	b2db      	uxtb	r3, r3
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	e00c      	b.n	800f3ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	699b      	ldr	r3, [r3, #24]
 800f3b6:	43da      	mvns	r2, r3
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	4013      	ands	r3, r2
 800f3bc:	b29b      	uxth	r3, r3
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	bf0c      	ite	eq
 800f3c2:	2301      	moveq	r3, #1
 800f3c4:	2300      	movne	r3, #0
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	79fb      	ldrb	r3, [r7, #7]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d0b6      	beq.n	800f33e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f3d0:	2300      	movs	r3, #0
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3710      	adds	r7, #16
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}

0800f3da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f3da:	b580      	push	{r7, lr}
 800f3dc:	b084      	sub	sp, #16
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	60f8      	str	r0, [r7, #12]
 800f3e2:	60b9      	str	r1, [r7, #8]
 800f3e4:	607a      	str	r2, [r7, #4]
 800f3e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f3e8:	e051      	b.n	800f48e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	695b      	ldr	r3, [r3, #20]
 800f3f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f3f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3f8:	d123      	bne.n	800f442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f408:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f412:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2200      	movs	r2, #0
 800f418:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2220      	movs	r2, #32
 800f41e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	2200      	movs	r2, #0
 800f426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f42e:	f043 0204 	orr.w	r2, r3, #4
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2200      	movs	r2, #0
 800f43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	e046      	b.n	800f4d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f448:	d021      	beq.n	800f48e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f44a:	f7fc f8cd 	bl	800b5e8 <HAL_GetTick>
 800f44e:	4602      	mov	r2, r0
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	1ad3      	subs	r3, r2, r3
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	429a      	cmp	r2, r3
 800f458:	d302      	bcc.n	800f460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d116      	bne.n	800f48e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2200      	movs	r2, #0
 800f464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2220      	movs	r2, #32
 800f46a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2200      	movs	r2, #0
 800f472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f47a:	f043 0220 	orr.w	r2, r3, #32
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2200      	movs	r2, #0
 800f486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	e020      	b.n	800f4d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	0c1b      	lsrs	r3, r3, #16
 800f492:	b2db      	uxtb	r3, r3
 800f494:	2b01      	cmp	r3, #1
 800f496:	d10c      	bne.n	800f4b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	695b      	ldr	r3, [r3, #20]
 800f49e:	43da      	mvns	r2, r3
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	4013      	ands	r3, r2
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	bf14      	ite	ne
 800f4aa:	2301      	movne	r3, #1
 800f4ac:	2300      	moveq	r3, #0
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	e00b      	b.n	800f4ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	699b      	ldr	r3, [r3, #24]
 800f4b8:	43da      	mvns	r2, r3
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	4013      	ands	r3, r2
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	bf14      	ite	ne
 800f4c4:	2301      	movne	r3, #1
 800f4c6:	2300      	moveq	r3, #0
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d18d      	bne.n	800f3ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800f4ce:	2300      	movs	r3, #0
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f4e4:	e02d      	b.n	800f542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f000 f900 	bl	800f6ec <I2C_IsAcknowledgeFailed>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d001      	beq.n	800f4f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	e02d      	b.n	800f552 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4fc:	d021      	beq.n	800f542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f4fe:	f7fc f873 	bl	800b5e8 <HAL_GetTick>
 800f502:	4602      	mov	r2, r0
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	1ad3      	subs	r3, r2, r3
 800f508:	68ba      	ldr	r2, [r7, #8]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d302      	bcc.n	800f514 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d116      	bne.n	800f542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2200      	movs	r2, #0
 800f518:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2220      	movs	r2, #32
 800f51e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2200      	movs	r2, #0
 800f526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f52e:	f043 0220 	orr.w	r2, r3, #32
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2200      	movs	r2, #0
 800f53a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f53e:	2301      	movs	r3, #1
 800f540:	e007      	b.n	800f552 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	695b      	ldr	r3, [r3, #20]
 800f548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f54c:	2b80      	cmp	r3, #128	; 0x80
 800f54e:	d1ca      	bne.n	800f4e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f550:	2300      	movs	r3, #0
}
 800f552:	4618      	mov	r0, r3
 800f554:	3710      	adds	r7, #16
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b084      	sub	sp, #16
 800f55e:	af00      	add	r7, sp, #0
 800f560:	60f8      	str	r0, [r7, #12]
 800f562:	60b9      	str	r1, [r7, #8]
 800f564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f566:	e02d      	b.n	800f5c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f568:	68f8      	ldr	r0, [r7, #12]
 800f56a:	f000 f8bf 	bl	800f6ec <I2C_IsAcknowledgeFailed>
 800f56e:	4603      	mov	r3, r0
 800f570:	2b00      	cmp	r3, #0
 800f572:	d001      	beq.n	800f578 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f574:	2301      	movs	r3, #1
 800f576:	e02d      	b.n	800f5d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f57e:	d021      	beq.n	800f5c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f580:	f7fc f832 	bl	800b5e8 <HAL_GetTick>
 800f584:	4602      	mov	r2, r0
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	1ad3      	subs	r3, r2, r3
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d302      	bcc.n	800f596 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d116      	bne.n	800f5c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2200      	movs	r2, #0
 800f59a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2220      	movs	r2, #32
 800f5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5b0:	f043 0220 	orr.w	r2, r3, #32
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	e007      	b.n	800f5d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	695b      	ldr	r3, [r3, #20]
 800f5ca:	f003 0304 	and.w	r3, r3, #4
 800f5ce:	2b04      	cmp	r3, #4
 800f5d0:	d1ca      	bne.n	800f568 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f5d2:	2300      	movs	r3, #0
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3710      	adds	r7, #16
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b085      	sub	sp, #20
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800f5e8:	4b13      	ldr	r3, [pc, #76]	; (800f638 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	08db      	lsrs	r3, r3, #3
 800f5ee:	4a13      	ldr	r2, [pc, #76]	; (800f63c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800f5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800f5f4:	0a1a      	lsrs	r2, r3, #8
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	4413      	add	r3, r2
 800f5fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	3b01      	subs	r3, #1
 800f602:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d107      	bne.n	800f61a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f60e:	f043 0220 	orr.w	r2, r3, #32
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f616:	2301      	movs	r3, #1
 800f618:	e008      	b.n	800f62c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f628:	d0e9      	beq.n	800f5fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800f62a:	2300      	movs	r3, #0
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3714      	adds	r7, #20
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr
 800f638:	20000038 	.word	0x20000038
 800f63c:	14f8b589 	.word	0x14f8b589

0800f640 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f64c:	e042      	b.n	800f6d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	695b      	ldr	r3, [r3, #20]
 800f654:	f003 0310 	and.w	r3, r3, #16
 800f658:	2b10      	cmp	r3, #16
 800f65a:	d119      	bne.n	800f690 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f06f 0210 	mvn.w	r2, #16
 800f664:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2200      	movs	r2, #0
 800f66a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2220      	movs	r2, #32
 800f670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2200      	movs	r2, #0
 800f678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2200      	movs	r2, #0
 800f688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f68c:	2301      	movs	r3, #1
 800f68e:	e029      	b.n	800f6e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f690:	f7fb ffaa 	bl	800b5e8 <HAL_GetTick>
 800f694:	4602      	mov	r2, r0
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	1ad3      	subs	r3, r2, r3
 800f69a:	68ba      	ldr	r2, [r7, #8]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d302      	bcc.n	800f6a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d116      	bne.n	800f6d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	2220      	movs	r2, #32
 800f6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6c0:	f043 0220 	orr.w	r2, r3, #32
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e007      	b.n	800f6e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	695b      	ldr	r3, [r3, #20]
 800f6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6de:	2b40      	cmp	r3, #64	; 0x40
 800f6e0:	d1b5      	bne.n	800f64e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800f6e2:	2300      	movs	r3, #0
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	695b      	ldr	r3, [r3, #20]
 800f6fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f6fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f702:	d11b      	bne.n	800f73c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f70c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2200      	movs	r2, #0
 800f712:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2220      	movs	r2, #32
 800f718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2200      	movs	r2, #0
 800f720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f728:	f043 0204 	orr.w	r2, r3, #4
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800f738:	2301      	movs	r3, #1
 800f73a:	e000      	b.n	800f73e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800f73c:	2300      	movs	r3, #0
}
 800f73e:	4618      	mov	r0, r3
 800f740:	370c      	adds	r7, #12
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr

0800f74a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800f74a:	b480      	push	{r7}
 800f74c:	b083      	sub	sp, #12
 800f74e:	af00      	add	r7, sp, #0
 800f750:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f756:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800f75a:	d103      	bne.n	800f764 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2201      	movs	r2, #1
 800f760:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800f762:	e007      	b.n	800f774 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f768:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800f76c:	d102      	bne.n	800f774 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2208      	movs	r2, #8
 800f772:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f774:	bf00      	nop
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b086      	sub	sp, #24
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d101      	bne.n	800f792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f78e:	2301      	movs	r3, #1
 800f790:	e267      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f003 0301 	and.w	r3, r3, #1
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d075      	beq.n	800f88a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f79e:	4b88      	ldr	r3, [pc, #544]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f7a0:	689b      	ldr	r3, [r3, #8]
 800f7a2:	f003 030c 	and.w	r3, r3, #12
 800f7a6:	2b04      	cmp	r3, #4
 800f7a8:	d00c      	beq.n	800f7c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f7aa:	4b85      	ldr	r3, [pc, #532]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f7ac:	689b      	ldr	r3, [r3, #8]
 800f7ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800f7b2:	2b08      	cmp	r3, #8
 800f7b4:	d112      	bne.n	800f7dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f7b6:	4b82      	ldr	r3, [pc, #520]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f7be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f7c2:	d10b      	bne.n	800f7dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f7c4:	4b7e      	ldr	r3, [pc, #504]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d05b      	beq.n	800f888 <HAL_RCC_OscConfig+0x108>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d157      	bne.n	800f888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	e242      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7e4:	d106      	bne.n	800f7f4 <HAL_RCC_OscConfig+0x74>
 800f7e6:	4b76      	ldr	r3, [pc, #472]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	4a75      	ldr	r2, [pc, #468]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f7ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f7f0:	6013      	str	r3, [r2, #0]
 800f7f2:	e01d      	b.n	800f830 <HAL_RCC_OscConfig+0xb0>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f7fc:	d10c      	bne.n	800f818 <HAL_RCC_OscConfig+0x98>
 800f7fe:	4b70      	ldr	r3, [pc, #448]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	4a6f      	ldr	r2, [pc, #444]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f808:	6013      	str	r3, [r2, #0]
 800f80a:	4b6d      	ldr	r3, [pc, #436]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	4a6c      	ldr	r2, [pc, #432]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f814:	6013      	str	r3, [r2, #0]
 800f816:	e00b      	b.n	800f830 <HAL_RCC_OscConfig+0xb0>
 800f818:	4b69      	ldr	r3, [pc, #420]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4a68      	ldr	r2, [pc, #416]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f81e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f822:	6013      	str	r3, [r2, #0]
 800f824:	4b66      	ldr	r3, [pc, #408]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4a65      	ldr	r2, [pc, #404]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f82a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f82e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d013      	beq.n	800f860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f838:	f7fb fed6 	bl	800b5e8 <HAL_GetTick>
 800f83c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f83e:	e008      	b.n	800f852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f840:	f7fb fed2 	bl	800b5e8 <HAL_GetTick>
 800f844:	4602      	mov	r2, r0
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	1ad3      	subs	r3, r2, r3
 800f84a:	2b64      	cmp	r3, #100	; 0x64
 800f84c:	d901      	bls.n	800f852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f84e:	2303      	movs	r3, #3
 800f850:	e207      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f852:	4b5b      	ldr	r3, [pc, #364]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d0f0      	beq.n	800f840 <HAL_RCC_OscConfig+0xc0>
 800f85e:	e014      	b.n	800f88a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f860:	f7fb fec2 	bl	800b5e8 <HAL_GetTick>
 800f864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f866:	e008      	b.n	800f87a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f868:	f7fb febe 	bl	800b5e8 <HAL_GetTick>
 800f86c:	4602      	mov	r2, r0
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	2b64      	cmp	r3, #100	; 0x64
 800f874:	d901      	bls.n	800f87a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f876:	2303      	movs	r3, #3
 800f878:	e1f3      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f87a:	4b51      	ldr	r3, [pc, #324]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f882:	2b00      	cmp	r3, #0
 800f884:	d1f0      	bne.n	800f868 <HAL_RCC_OscConfig+0xe8>
 800f886:	e000      	b.n	800f88a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f003 0302 	and.w	r3, r3, #2
 800f892:	2b00      	cmp	r3, #0
 800f894:	d063      	beq.n	800f95e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f896:	4b4a      	ldr	r3, [pc, #296]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f898:	689b      	ldr	r3, [r3, #8]
 800f89a:	f003 030c 	and.w	r3, r3, #12
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d00b      	beq.n	800f8ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f8a2:	4b47      	ldr	r3, [pc, #284]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f8a4:	689b      	ldr	r3, [r3, #8]
 800f8a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800f8aa:	2b08      	cmp	r3, #8
 800f8ac:	d11c      	bne.n	800f8e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f8ae:	4b44      	ldr	r3, [pc, #272]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d116      	bne.n	800f8e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f8ba:	4b41      	ldr	r3, [pc, #260]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f003 0302 	and.w	r3, r3, #2
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d005      	beq.n	800f8d2 <HAL_RCC_OscConfig+0x152>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	68db      	ldr	r3, [r3, #12]
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d001      	beq.n	800f8d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	e1c7      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f8d2:	4b3b      	ldr	r3, [pc, #236]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	691b      	ldr	r3, [r3, #16]
 800f8de:	00db      	lsls	r3, r3, #3
 800f8e0:	4937      	ldr	r1, [pc, #220]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f8e6:	e03a      	b.n	800f95e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	68db      	ldr	r3, [r3, #12]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d020      	beq.n	800f932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f8f0:	4b34      	ldr	r3, [pc, #208]	; (800f9c4 <HAL_RCC_OscConfig+0x244>)
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f8f6:	f7fb fe77 	bl	800b5e8 <HAL_GetTick>
 800f8fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f8fc:	e008      	b.n	800f910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f8fe:	f7fb fe73 	bl	800b5e8 <HAL_GetTick>
 800f902:	4602      	mov	r2, r0
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	1ad3      	subs	r3, r2, r3
 800f908:	2b02      	cmp	r3, #2
 800f90a:	d901      	bls.n	800f910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f90c:	2303      	movs	r3, #3
 800f90e:	e1a8      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f910:	4b2b      	ldr	r3, [pc, #172]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f003 0302 	and.w	r3, r3, #2
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d0f0      	beq.n	800f8fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f91c:	4b28      	ldr	r3, [pc, #160]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	691b      	ldr	r3, [r3, #16]
 800f928:	00db      	lsls	r3, r3, #3
 800f92a:	4925      	ldr	r1, [pc, #148]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f92c:	4313      	orrs	r3, r2
 800f92e:	600b      	str	r3, [r1, #0]
 800f930:	e015      	b.n	800f95e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f932:	4b24      	ldr	r3, [pc, #144]	; (800f9c4 <HAL_RCC_OscConfig+0x244>)
 800f934:	2200      	movs	r2, #0
 800f936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f938:	f7fb fe56 	bl	800b5e8 <HAL_GetTick>
 800f93c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f93e:	e008      	b.n	800f952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f940:	f7fb fe52 	bl	800b5e8 <HAL_GetTick>
 800f944:	4602      	mov	r2, r0
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	1ad3      	subs	r3, r2, r3
 800f94a:	2b02      	cmp	r3, #2
 800f94c:	d901      	bls.n	800f952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f94e:	2303      	movs	r3, #3
 800f950:	e187      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f952:	4b1b      	ldr	r3, [pc, #108]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f003 0302 	and.w	r3, r3, #2
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d1f0      	bne.n	800f940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f003 0308 	and.w	r3, r3, #8
 800f966:	2b00      	cmp	r3, #0
 800f968:	d036      	beq.n	800f9d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	695b      	ldr	r3, [r3, #20]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d016      	beq.n	800f9a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f972:	4b15      	ldr	r3, [pc, #84]	; (800f9c8 <HAL_RCC_OscConfig+0x248>)
 800f974:	2201      	movs	r2, #1
 800f976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f978:	f7fb fe36 	bl	800b5e8 <HAL_GetTick>
 800f97c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f97e:	e008      	b.n	800f992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f980:	f7fb fe32 	bl	800b5e8 <HAL_GetTick>
 800f984:	4602      	mov	r2, r0
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	1ad3      	subs	r3, r2, r3
 800f98a:	2b02      	cmp	r3, #2
 800f98c:	d901      	bls.n	800f992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f98e:	2303      	movs	r3, #3
 800f990:	e167      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f992:	4b0b      	ldr	r3, [pc, #44]	; (800f9c0 <HAL_RCC_OscConfig+0x240>)
 800f994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f996:	f003 0302 	and.w	r3, r3, #2
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d0f0      	beq.n	800f980 <HAL_RCC_OscConfig+0x200>
 800f99e:	e01b      	b.n	800f9d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f9a0:	4b09      	ldr	r3, [pc, #36]	; (800f9c8 <HAL_RCC_OscConfig+0x248>)
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f9a6:	f7fb fe1f 	bl	800b5e8 <HAL_GetTick>
 800f9aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f9ac:	e00e      	b.n	800f9cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f9ae:	f7fb fe1b 	bl	800b5e8 <HAL_GetTick>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	1ad3      	subs	r3, r2, r3
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	d907      	bls.n	800f9cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f9bc:	2303      	movs	r3, #3
 800f9be:	e150      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
 800f9c0:	40023800 	.word	0x40023800
 800f9c4:	42470000 	.word	0x42470000
 800f9c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f9cc:	4b88      	ldr	r3, [pc, #544]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800f9ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9d0:	f003 0302 	and.w	r3, r3, #2
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d1ea      	bne.n	800f9ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f003 0304 	and.w	r3, r3, #4
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	f000 8097 	beq.w	800fb14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f9ea:	4b81      	ldr	r3, [pc, #516]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800f9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d10f      	bne.n	800fa16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	60bb      	str	r3, [r7, #8]
 800f9fa:	4b7d      	ldr	r3, [pc, #500]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800f9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9fe:	4a7c      	ldr	r2, [pc, #496]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fa00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa04:	6413      	str	r3, [r2, #64]	; 0x40
 800fa06:	4b7a      	ldr	r3, [pc, #488]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa0e:	60bb      	str	r3, [r7, #8]
 800fa10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fa12:	2301      	movs	r3, #1
 800fa14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fa16:	4b77      	ldr	r3, [pc, #476]	; (800fbf4 <HAL_RCC_OscConfig+0x474>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d118      	bne.n	800fa54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fa22:	4b74      	ldr	r3, [pc, #464]	; (800fbf4 <HAL_RCC_OscConfig+0x474>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4a73      	ldr	r2, [pc, #460]	; (800fbf4 <HAL_RCC_OscConfig+0x474>)
 800fa28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fa2e:	f7fb fddb 	bl	800b5e8 <HAL_GetTick>
 800fa32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fa34:	e008      	b.n	800fa48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fa36:	f7fb fdd7 	bl	800b5e8 <HAL_GetTick>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	d901      	bls.n	800fa48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800fa44:	2303      	movs	r3, #3
 800fa46:	e10c      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fa48:	4b6a      	ldr	r3, [pc, #424]	; (800fbf4 <HAL_RCC_OscConfig+0x474>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d0f0      	beq.n	800fa36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	689b      	ldr	r3, [r3, #8]
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	d106      	bne.n	800fa6a <HAL_RCC_OscConfig+0x2ea>
 800fa5c:	4b64      	ldr	r3, [pc, #400]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fa5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa60:	4a63      	ldr	r2, [pc, #396]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fa62:	f043 0301 	orr.w	r3, r3, #1
 800fa66:	6713      	str	r3, [r2, #112]	; 0x70
 800fa68:	e01c      	b.n	800faa4 <HAL_RCC_OscConfig+0x324>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	2b05      	cmp	r3, #5
 800fa70:	d10c      	bne.n	800fa8c <HAL_RCC_OscConfig+0x30c>
 800fa72:	4b5f      	ldr	r3, [pc, #380]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fa74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa76:	4a5e      	ldr	r2, [pc, #376]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fa78:	f043 0304 	orr.w	r3, r3, #4
 800fa7c:	6713      	str	r3, [r2, #112]	; 0x70
 800fa7e:	4b5c      	ldr	r3, [pc, #368]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fa80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa82:	4a5b      	ldr	r2, [pc, #364]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fa84:	f043 0301 	orr.w	r3, r3, #1
 800fa88:	6713      	str	r3, [r2, #112]	; 0x70
 800fa8a:	e00b      	b.n	800faa4 <HAL_RCC_OscConfig+0x324>
 800fa8c:	4b58      	ldr	r3, [pc, #352]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fa8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa90:	4a57      	ldr	r2, [pc, #348]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fa92:	f023 0301 	bic.w	r3, r3, #1
 800fa96:	6713      	str	r3, [r2, #112]	; 0x70
 800fa98:	4b55      	ldr	r3, [pc, #340]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fa9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa9c:	4a54      	ldr	r2, [pc, #336]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fa9e:	f023 0304 	bic.w	r3, r3, #4
 800faa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	689b      	ldr	r3, [r3, #8]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d015      	beq.n	800fad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800faac:	f7fb fd9c 	bl	800b5e8 <HAL_GetTick>
 800fab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fab2:	e00a      	b.n	800faca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fab4:	f7fb fd98 	bl	800b5e8 <HAL_GetTick>
 800fab8:	4602      	mov	r2, r0
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	1ad3      	subs	r3, r2, r3
 800fabe:	f241 3288 	movw	r2, #5000	; 0x1388
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d901      	bls.n	800faca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800fac6:	2303      	movs	r3, #3
 800fac8:	e0cb      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800faca:	4b49      	ldr	r3, [pc, #292]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800facc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800face:	f003 0302 	and.w	r3, r3, #2
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d0ee      	beq.n	800fab4 <HAL_RCC_OscConfig+0x334>
 800fad6:	e014      	b.n	800fb02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fad8:	f7fb fd86 	bl	800b5e8 <HAL_GetTick>
 800fadc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fade:	e00a      	b.n	800faf6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fae0:	f7fb fd82 	bl	800b5e8 <HAL_GetTick>
 800fae4:	4602      	mov	r2, r0
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	1ad3      	subs	r3, r2, r3
 800faea:	f241 3288 	movw	r2, #5000	; 0x1388
 800faee:	4293      	cmp	r3, r2
 800faf0:	d901      	bls.n	800faf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800faf2:	2303      	movs	r3, #3
 800faf4:	e0b5      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800faf6:	4b3e      	ldr	r3, [pc, #248]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800faf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fafa:	f003 0302 	and.w	r3, r3, #2
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d1ee      	bne.n	800fae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fb02:	7dfb      	ldrb	r3, [r7, #23]
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d105      	bne.n	800fb14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fb08:	4b39      	ldr	r3, [pc, #228]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb0c:	4a38      	ldr	r2, [pc, #224]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fb0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fb12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	699b      	ldr	r3, [r3, #24]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	f000 80a1 	beq.w	800fc60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800fb1e:	4b34      	ldr	r3, [pc, #208]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fb20:	689b      	ldr	r3, [r3, #8]
 800fb22:	f003 030c 	and.w	r3, r3, #12
 800fb26:	2b08      	cmp	r3, #8
 800fb28:	d05c      	beq.n	800fbe4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	699b      	ldr	r3, [r3, #24]
 800fb2e:	2b02      	cmp	r3, #2
 800fb30:	d141      	bne.n	800fbb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fb32:	4b31      	ldr	r3, [pc, #196]	; (800fbf8 <HAL_RCC_OscConfig+0x478>)
 800fb34:	2200      	movs	r2, #0
 800fb36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb38:	f7fb fd56 	bl	800b5e8 <HAL_GetTick>
 800fb3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fb3e:	e008      	b.n	800fb52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fb40:	f7fb fd52 	bl	800b5e8 <HAL_GetTick>
 800fb44:	4602      	mov	r2, r0
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	1ad3      	subs	r3, r2, r3
 800fb4a:	2b02      	cmp	r3, #2
 800fb4c:	d901      	bls.n	800fb52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800fb4e:	2303      	movs	r3, #3
 800fb50:	e087      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fb52:	4b27      	ldr	r3, [pc, #156]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d1f0      	bne.n	800fb40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	69da      	ldr	r2, [r3, #28]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6a1b      	ldr	r3, [r3, #32]
 800fb66:	431a      	orrs	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6c:	019b      	lsls	r3, r3, #6
 800fb6e:	431a      	orrs	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb74:	085b      	lsrs	r3, r3, #1
 800fb76:	3b01      	subs	r3, #1
 800fb78:	041b      	lsls	r3, r3, #16
 800fb7a:	431a      	orrs	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb80:	061b      	lsls	r3, r3, #24
 800fb82:	491b      	ldr	r1, [pc, #108]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fb84:	4313      	orrs	r3, r2
 800fb86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fb88:	4b1b      	ldr	r3, [pc, #108]	; (800fbf8 <HAL_RCC_OscConfig+0x478>)
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb8e:	f7fb fd2b 	bl	800b5e8 <HAL_GetTick>
 800fb92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fb94:	e008      	b.n	800fba8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fb96:	f7fb fd27 	bl	800b5e8 <HAL_GetTick>
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	1ad3      	subs	r3, r2, r3
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	d901      	bls.n	800fba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800fba4:	2303      	movs	r3, #3
 800fba6:	e05c      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fba8:	4b11      	ldr	r3, [pc, #68]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d0f0      	beq.n	800fb96 <HAL_RCC_OscConfig+0x416>
 800fbb4:	e054      	b.n	800fc60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fbb6:	4b10      	ldr	r3, [pc, #64]	; (800fbf8 <HAL_RCC_OscConfig+0x478>)
 800fbb8:	2200      	movs	r2, #0
 800fbba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fbbc:	f7fb fd14 	bl	800b5e8 <HAL_GetTick>
 800fbc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fbc2:	e008      	b.n	800fbd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fbc4:	f7fb fd10 	bl	800b5e8 <HAL_GetTick>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	1ad3      	subs	r3, r2, r3
 800fbce:	2b02      	cmp	r3, #2
 800fbd0:	d901      	bls.n	800fbd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800fbd2:	2303      	movs	r3, #3
 800fbd4:	e045      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800fbd6:	4b06      	ldr	r3, [pc, #24]	; (800fbf0 <HAL_RCC_OscConfig+0x470>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d1f0      	bne.n	800fbc4 <HAL_RCC_OscConfig+0x444>
 800fbe2:	e03d      	b.n	800fc60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	699b      	ldr	r3, [r3, #24]
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d107      	bne.n	800fbfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800fbec:	2301      	movs	r3, #1
 800fbee:	e038      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
 800fbf0:	40023800 	.word	0x40023800
 800fbf4:	40007000 	.word	0x40007000
 800fbf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800fbfc:	4b1b      	ldr	r3, [pc, #108]	; (800fc6c <HAL_RCC_OscConfig+0x4ec>)
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	699b      	ldr	r3, [r3, #24]
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	d028      	beq.n	800fc5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d121      	bne.n	800fc5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d11a      	bne.n	800fc5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fc26:	68fa      	ldr	r2, [r7, #12]
 800fc28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800fc2c:	4013      	ands	r3, r2
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fc32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800fc34:	4293      	cmp	r3, r2
 800fc36:	d111      	bne.n	800fc5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc42:	085b      	lsrs	r3, r3, #1
 800fc44:	3b01      	subs	r3, #1
 800fc46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d107      	bne.n	800fc5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d001      	beq.n	800fc60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	e000      	b.n	800fc62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800fc60:	2300      	movs	r3, #0
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3718      	adds	r7, #24
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	40023800 	.word	0x40023800

0800fc70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d101      	bne.n	800fc84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fc80:	2301      	movs	r3, #1
 800fc82:	e0cc      	b.n	800fe1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fc84:	4b68      	ldr	r3, [pc, #416]	; (800fe28 <HAL_RCC_ClockConfig+0x1b8>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f003 0307 	and.w	r3, r3, #7
 800fc8c:	683a      	ldr	r2, [r7, #0]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d90c      	bls.n	800fcac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fc92:	4b65      	ldr	r3, [pc, #404]	; (800fe28 <HAL_RCC_ClockConfig+0x1b8>)
 800fc94:	683a      	ldr	r2, [r7, #0]
 800fc96:	b2d2      	uxtb	r2, r2
 800fc98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc9a:	4b63      	ldr	r3, [pc, #396]	; (800fe28 <HAL_RCC_ClockConfig+0x1b8>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	f003 0307 	and.w	r3, r3, #7
 800fca2:	683a      	ldr	r2, [r7, #0]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d001      	beq.n	800fcac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800fca8:	2301      	movs	r3, #1
 800fcaa:	e0b8      	b.n	800fe1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	f003 0302 	and.w	r3, r3, #2
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d020      	beq.n	800fcfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f003 0304 	and.w	r3, r3, #4
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d005      	beq.n	800fcd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800fcc4:	4b59      	ldr	r3, [pc, #356]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	4a58      	ldr	r2, [pc, #352]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fcca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800fcce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	f003 0308 	and.w	r3, r3, #8
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d005      	beq.n	800fce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800fcdc:	4b53      	ldr	r3, [pc, #332]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fcde:	689b      	ldr	r3, [r3, #8]
 800fce0:	4a52      	ldr	r2, [pc, #328]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800fce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fce8:	4b50      	ldr	r3, [pc, #320]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	689b      	ldr	r3, [r3, #8]
 800fcf4:	494d      	ldr	r1, [pc, #308]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f003 0301 	and.w	r3, r3, #1
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d044      	beq.n	800fd90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d107      	bne.n	800fd1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fd0e:	4b47      	ldr	r3, [pc, #284]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d119      	bne.n	800fd4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	e07f      	b.n	800fe1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	2b02      	cmp	r3, #2
 800fd24:	d003      	beq.n	800fd2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800fd2a:	2b03      	cmp	r3, #3
 800fd2c:	d107      	bne.n	800fd3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800fd2e:	4b3f      	ldr	r3, [pc, #252]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d109      	bne.n	800fd4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e06f      	b.n	800fe1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fd3e:	4b3b      	ldr	r3, [pc, #236]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f003 0302 	and.w	r3, r3, #2
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d101      	bne.n	800fd4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	e067      	b.n	800fe1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800fd4e:	4b37      	ldr	r3, [pc, #220]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fd50:	689b      	ldr	r3, [r3, #8]
 800fd52:	f023 0203 	bic.w	r2, r3, #3
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	4934      	ldr	r1, [pc, #208]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fd60:	f7fb fc42 	bl	800b5e8 <HAL_GetTick>
 800fd64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fd66:	e00a      	b.n	800fd7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fd68:	f7fb fc3e 	bl	800b5e8 <HAL_GetTick>
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	1ad3      	subs	r3, r2, r3
 800fd72:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d901      	bls.n	800fd7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800fd7a:	2303      	movs	r3, #3
 800fd7c:	e04f      	b.n	800fe1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fd7e:	4b2b      	ldr	r3, [pc, #172]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fd80:	689b      	ldr	r3, [r3, #8]
 800fd82:	f003 020c 	and.w	r2, r3, #12
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	009b      	lsls	r3, r3, #2
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d1eb      	bne.n	800fd68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fd90:	4b25      	ldr	r3, [pc, #148]	; (800fe28 <HAL_RCC_ClockConfig+0x1b8>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f003 0307 	and.w	r3, r3, #7
 800fd98:	683a      	ldr	r2, [r7, #0]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d20c      	bcs.n	800fdb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fd9e:	4b22      	ldr	r3, [pc, #136]	; (800fe28 <HAL_RCC_ClockConfig+0x1b8>)
 800fda0:	683a      	ldr	r2, [r7, #0]
 800fda2:	b2d2      	uxtb	r2, r2
 800fda4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fda6:	4b20      	ldr	r3, [pc, #128]	; (800fe28 <HAL_RCC_ClockConfig+0x1b8>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f003 0307 	and.w	r3, r3, #7
 800fdae:	683a      	ldr	r2, [r7, #0]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d001      	beq.n	800fdb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	e032      	b.n	800fe1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	f003 0304 	and.w	r3, r3, #4
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d008      	beq.n	800fdd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fdc4:	4b19      	ldr	r3, [pc, #100]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fdc6:	689b      	ldr	r3, [r3, #8]
 800fdc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	4916      	ldr	r1, [pc, #88]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fdd2:	4313      	orrs	r3, r2
 800fdd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f003 0308 	and.w	r3, r3, #8
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d009      	beq.n	800fdf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fde2:	4b12      	ldr	r3, [pc, #72]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	691b      	ldr	r3, [r3, #16]
 800fdee:	00db      	lsls	r3, r3, #3
 800fdf0:	490e      	ldr	r1, [pc, #56]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fdf2:	4313      	orrs	r3, r2
 800fdf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800fdf6:	f000 f821 	bl	800fe3c <HAL_RCC_GetSysClockFreq>
 800fdfa:	4602      	mov	r2, r0
 800fdfc:	4b0b      	ldr	r3, [pc, #44]	; (800fe2c <HAL_RCC_ClockConfig+0x1bc>)
 800fdfe:	689b      	ldr	r3, [r3, #8]
 800fe00:	091b      	lsrs	r3, r3, #4
 800fe02:	f003 030f 	and.w	r3, r3, #15
 800fe06:	490a      	ldr	r1, [pc, #40]	; (800fe30 <HAL_RCC_ClockConfig+0x1c0>)
 800fe08:	5ccb      	ldrb	r3, [r1, r3]
 800fe0a:	fa22 f303 	lsr.w	r3, r2, r3
 800fe0e:	4a09      	ldr	r2, [pc, #36]	; (800fe34 <HAL_RCC_ClockConfig+0x1c4>)
 800fe10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800fe12:	4b09      	ldr	r3, [pc, #36]	; (800fe38 <HAL_RCC_ClockConfig+0x1c8>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7fb fba2 	bl	800b560 <HAL_InitTick>

  return HAL_OK;
 800fe1c:	2300      	movs	r3, #0
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3710      	adds	r7, #16
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	40023c00 	.word	0x40023c00
 800fe2c:	40023800 	.word	0x40023800
 800fe30:	08028144 	.word	0x08028144
 800fe34:	20000038 	.word	0x20000038
 800fe38:	2000003c 	.word	0x2000003c

0800fe3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fe3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe40:	b090      	sub	sp, #64	; 0x40
 800fe42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800fe44:	2300      	movs	r3, #0
 800fe46:	637b      	str	r3, [r7, #52]	; 0x34
 800fe48:	2300      	movs	r3, #0
 800fe4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800fe50:	2300      	movs	r3, #0
 800fe52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fe54:	4b59      	ldr	r3, [pc, #356]	; (800ffbc <HAL_RCC_GetSysClockFreq+0x180>)
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	f003 030c 	and.w	r3, r3, #12
 800fe5c:	2b08      	cmp	r3, #8
 800fe5e:	d00d      	beq.n	800fe7c <HAL_RCC_GetSysClockFreq+0x40>
 800fe60:	2b08      	cmp	r3, #8
 800fe62:	f200 80a1 	bhi.w	800ffa8 <HAL_RCC_GetSysClockFreq+0x16c>
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d002      	beq.n	800fe70 <HAL_RCC_GetSysClockFreq+0x34>
 800fe6a:	2b04      	cmp	r3, #4
 800fe6c:	d003      	beq.n	800fe76 <HAL_RCC_GetSysClockFreq+0x3a>
 800fe6e:	e09b      	b.n	800ffa8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800fe70:	4b53      	ldr	r3, [pc, #332]	; (800ffc0 <HAL_RCC_GetSysClockFreq+0x184>)
 800fe72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800fe74:	e09b      	b.n	800ffae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800fe76:	4b53      	ldr	r3, [pc, #332]	; (800ffc4 <HAL_RCC_GetSysClockFreq+0x188>)
 800fe78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800fe7a:	e098      	b.n	800ffae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800fe7c:	4b4f      	ldr	r3, [pc, #316]	; (800ffbc <HAL_RCC_GetSysClockFreq+0x180>)
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800fe86:	4b4d      	ldr	r3, [pc, #308]	; (800ffbc <HAL_RCC_GetSysClockFreq+0x180>)
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d028      	beq.n	800fee4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fe92:	4b4a      	ldr	r3, [pc, #296]	; (800ffbc <HAL_RCC_GetSysClockFreq+0x180>)
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	099b      	lsrs	r3, r3, #6
 800fe98:	2200      	movs	r2, #0
 800fe9a:	623b      	str	r3, [r7, #32]
 800fe9c:	627a      	str	r2, [r7, #36]	; 0x24
 800fe9e:	6a3b      	ldr	r3, [r7, #32]
 800fea0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800fea4:	2100      	movs	r1, #0
 800fea6:	4b47      	ldr	r3, [pc, #284]	; (800ffc4 <HAL_RCC_GetSysClockFreq+0x188>)
 800fea8:	fb03 f201 	mul.w	r2, r3, r1
 800feac:	2300      	movs	r3, #0
 800feae:	fb00 f303 	mul.w	r3, r0, r3
 800feb2:	4413      	add	r3, r2
 800feb4:	4a43      	ldr	r2, [pc, #268]	; (800ffc4 <HAL_RCC_GetSysClockFreq+0x188>)
 800feb6:	fba0 1202 	umull	r1, r2, r0, r2
 800feba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800febc:	460a      	mov	r2, r1
 800febe:	62ba      	str	r2, [r7, #40]	; 0x28
 800fec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fec2:	4413      	add	r3, r2
 800fec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fec8:	2200      	movs	r2, #0
 800feca:	61bb      	str	r3, [r7, #24]
 800fecc:	61fa      	str	r2, [r7, #28]
 800fece:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fed2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fed6:	f7f0 feef 	bl	8000cb8 <__aeabi_uldivmod>
 800feda:	4602      	mov	r2, r0
 800fedc:	460b      	mov	r3, r1
 800fede:	4613      	mov	r3, r2
 800fee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fee2:	e053      	b.n	800ff8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800fee4:	4b35      	ldr	r3, [pc, #212]	; (800ffbc <HAL_RCC_GetSysClockFreq+0x180>)
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	099b      	lsrs	r3, r3, #6
 800feea:	2200      	movs	r2, #0
 800feec:	613b      	str	r3, [r7, #16]
 800feee:	617a      	str	r2, [r7, #20]
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800fef6:	f04f 0b00 	mov.w	fp, #0
 800fefa:	4652      	mov	r2, sl
 800fefc:	465b      	mov	r3, fp
 800fefe:	f04f 0000 	mov.w	r0, #0
 800ff02:	f04f 0100 	mov.w	r1, #0
 800ff06:	0159      	lsls	r1, r3, #5
 800ff08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ff0c:	0150      	lsls	r0, r2, #5
 800ff0e:	4602      	mov	r2, r0
 800ff10:	460b      	mov	r3, r1
 800ff12:	ebb2 080a 	subs.w	r8, r2, sl
 800ff16:	eb63 090b 	sbc.w	r9, r3, fp
 800ff1a:	f04f 0200 	mov.w	r2, #0
 800ff1e:	f04f 0300 	mov.w	r3, #0
 800ff22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ff26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ff2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ff2e:	ebb2 0408 	subs.w	r4, r2, r8
 800ff32:	eb63 0509 	sbc.w	r5, r3, r9
 800ff36:	f04f 0200 	mov.w	r2, #0
 800ff3a:	f04f 0300 	mov.w	r3, #0
 800ff3e:	00eb      	lsls	r3, r5, #3
 800ff40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ff44:	00e2      	lsls	r2, r4, #3
 800ff46:	4614      	mov	r4, r2
 800ff48:	461d      	mov	r5, r3
 800ff4a:	eb14 030a 	adds.w	r3, r4, sl
 800ff4e:	603b      	str	r3, [r7, #0]
 800ff50:	eb45 030b 	adc.w	r3, r5, fp
 800ff54:	607b      	str	r3, [r7, #4]
 800ff56:	f04f 0200 	mov.w	r2, #0
 800ff5a:	f04f 0300 	mov.w	r3, #0
 800ff5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ff62:	4629      	mov	r1, r5
 800ff64:	028b      	lsls	r3, r1, #10
 800ff66:	4621      	mov	r1, r4
 800ff68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ff6c:	4621      	mov	r1, r4
 800ff6e:	028a      	lsls	r2, r1, #10
 800ff70:	4610      	mov	r0, r2
 800ff72:	4619      	mov	r1, r3
 800ff74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff76:	2200      	movs	r2, #0
 800ff78:	60bb      	str	r3, [r7, #8]
 800ff7a:	60fa      	str	r2, [r7, #12]
 800ff7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ff80:	f7f0 fe9a 	bl	8000cb8 <__aeabi_uldivmod>
 800ff84:	4602      	mov	r2, r0
 800ff86:	460b      	mov	r3, r1
 800ff88:	4613      	mov	r3, r2
 800ff8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ff8c:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <HAL_RCC_GetSysClockFreq+0x180>)
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	0c1b      	lsrs	r3, r3, #16
 800ff92:	f003 0303 	and.w	r3, r3, #3
 800ff96:	3301      	adds	r3, #1
 800ff98:	005b      	lsls	r3, r3, #1
 800ff9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800ff9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ffa6:	e002      	b.n	800ffae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ffa8:	4b05      	ldr	r3, [pc, #20]	; (800ffc0 <HAL_RCC_GetSysClockFreq+0x184>)
 800ffaa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ffac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ffae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3740      	adds	r7, #64	; 0x40
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ffba:	bf00      	nop
 800ffbc:	40023800 	.word	0x40023800
 800ffc0:	00f42400 	.word	0x00f42400
 800ffc4:	017d7840 	.word	0x017d7840

0800ffc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ffcc:	4b03      	ldr	r3, [pc, #12]	; (800ffdc <HAL_RCC_GetHCLKFreq+0x14>)
 800ffce:	681b      	ldr	r3, [r3, #0]
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd8:	4770      	bx	lr
 800ffda:	bf00      	nop
 800ffdc:	20000038 	.word	0x20000038

0800ffe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ffe4:	f7ff fff0 	bl	800ffc8 <HAL_RCC_GetHCLKFreq>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	4b05      	ldr	r3, [pc, #20]	; (8010000 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	0a9b      	lsrs	r3, r3, #10
 800fff0:	f003 0307 	and.w	r3, r3, #7
 800fff4:	4903      	ldr	r1, [pc, #12]	; (8010004 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fff6:	5ccb      	ldrb	r3, [r1, r3]
 800fff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	40023800 	.word	0x40023800
 8010004:	08028154 	.word	0x08028154

08010008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801000c:	f7ff ffdc 	bl	800ffc8 <HAL_RCC_GetHCLKFreq>
 8010010:	4602      	mov	r2, r0
 8010012:	4b05      	ldr	r3, [pc, #20]	; (8010028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010014:	689b      	ldr	r3, [r3, #8]
 8010016:	0b5b      	lsrs	r3, r3, #13
 8010018:	f003 0307 	and.w	r3, r3, #7
 801001c:	4903      	ldr	r1, [pc, #12]	; (801002c <HAL_RCC_GetPCLK2Freq+0x24>)
 801001e:	5ccb      	ldrb	r3, [r1, r3]
 8010020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010024:	4618      	mov	r0, r3
 8010026:	bd80      	pop	{r7, pc}
 8010028:	40023800 	.word	0x40023800
 801002c:	08028154 	.word	0x08028154

08010030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d101      	bne.n	8010042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801003e:	2301      	movs	r3, #1
 8010040:	e07b      	b.n	801013a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010046:	2b00      	cmp	r3, #0
 8010048:	d108      	bne.n	801005c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010052:	d009      	beq.n	8010068 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	61da      	str	r2, [r3, #28]
 801005a:	e005      	b.n	8010068 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2200      	movs	r2, #0
 801006c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010074:	b2db      	uxtb	r3, r3
 8010076:	2b00      	cmp	r3, #0
 8010078:	d106      	bne.n	8010088 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2200      	movs	r2, #0
 801007e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7fa faf4 	bl	800a670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2202      	movs	r2, #2
 801008c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801009e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	689b      	ldr	r3, [r3, #8]
 80100ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80100b0:	431a      	orrs	r2, r3
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80100ba:	431a      	orrs	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	691b      	ldr	r3, [r3, #16]
 80100c0:	f003 0302 	and.w	r3, r3, #2
 80100c4:	431a      	orrs	r2, r3
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	695b      	ldr	r3, [r3, #20]
 80100ca:	f003 0301 	and.w	r3, r3, #1
 80100ce:	431a      	orrs	r2, r3
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	699b      	ldr	r3, [r3, #24]
 80100d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80100d8:	431a      	orrs	r2, r3
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	69db      	ldr	r3, [r3, #28]
 80100de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80100e2:	431a      	orrs	r2, r3
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6a1b      	ldr	r3, [r3, #32]
 80100e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100ec:	ea42 0103 	orr.w	r1, r2, r3
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	430a      	orrs	r2, r1
 80100fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	699b      	ldr	r3, [r3, #24]
 8010104:	0c1b      	lsrs	r3, r3, #16
 8010106:	f003 0104 	and.w	r1, r3, #4
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801010e:	f003 0210 	and.w	r2, r3, #16
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	430a      	orrs	r2, r1
 8010118:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	69da      	ldr	r2, [r3, #28]
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010128:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2200      	movs	r2, #0
 801012e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2201      	movs	r2, #1
 8010134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010138:	2300      	movs	r3, #0
}
 801013a:	4618      	mov	r0, r3
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010142:	b580      	push	{r7, lr}
 8010144:	b08c      	sub	sp, #48	; 0x30
 8010146:	af00      	add	r7, sp, #0
 8010148:	60f8      	str	r0, [r7, #12]
 801014a:	60b9      	str	r1, [r7, #8]
 801014c:	607a      	str	r2, [r7, #4]
 801014e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010150:	2301      	movs	r3, #1
 8010152:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010154:	2300      	movs	r3, #0
 8010156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010160:	2b01      	cmp	r3, #1
 8010162:	d101      	bne.n	8010168 <HAL_SPI_TransmitReceive+0x26>
 8010164:	2302      	movs	r3, #2
 8010166:	e18a      	b.n	801047e <HAL_SPI_TransmitReceive+0x33c>
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2201      	movs	r2, #1
 801016c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010170:	f7fb fa3a 	bl	800b5e8 <HAL_GetTick>
 8010174:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801017c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010186:	887b      	ldrh	r3, [r7, #2]
 8010188:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801018a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801018e:	2b01      	cmp	r3, #1
 8010190:	d00f      	beq.n	80101b2 <HAL_SPI_TransmitReceive+0x70>
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010198:	d107      	bne.n	80101aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	689b      	ldr	r3, [r3, #8]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d103      	bne.n	80101aa <HAL_SPI_TransmitReceive+0x68>
 80101a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80101a6:	2b04      	cmp	r3, #4
 80101a8:	d003      	beq.n	80101b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80101aa:	2302      	movs	r3, #2
 80101ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80101b0:	e15b      	b.n	801046a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d005      	beq.n	80101c4 <HAL_SPI_TransmitReceive+0x82>
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d002      	beq.n	80101c4 <HAL_SPI_TransmitReceive+0x82>
 80101be:	887b      	ldrh	r3, [r7, #2]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d103      	bne.n	80101cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80101c4:	2301      	movs	r3, #1
 80101c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80101ca:	e14e      	b.n	801046a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	2b04      	cmp	r3, #4
 80101d6:	d003      	beq.n	80101e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2205      	movs	r2, #5
 80101dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2200      	movs	r2, #0
 80101e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	887a      	ldrh	r2, [r7, #2]
 80101f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	887a      	ldrh	r2, [r7, #2]
 80101f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	68ba      	ldr	r2, [r7, #8]
 80101fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	887a      	ldrh	r2, [r7, #2]
 8010202:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	887a      	ldrh	r2, [r7, #2]
 8010208:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2200      	movs	r2, #0
 801020e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2200      	movs	r2, #0
 8010214:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010220:	2b40      	cmp	r3, #64	; 0x40
 8010222:	d007      	beq.n	8010234 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010232:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801023c:	d178      	bne.n	8010330 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d002      	beq.n	801024c <HAL_SPI_TransmitReceive+0x10a>
 8010246:	8b7b      	ldrh	r3, [r7, #26]
 8010248:	2b01      	cmp	r3, #1
 801024a:	d166      	bne.n	801031a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010250:	881a      	ldrh	r2, [r3, #0]
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801025c:	1c9a      	adds	r2, r3, #2
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010266:	b29b      	uxth	r3, r3
 8010268:	3b01      	subs	r3, #1
 801026a:	b29a      	uxth	r2, r3
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010270:	e053      	b.n	801031a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	689b      	ldr	r3, [r3, #8]
 8010278:	f003 0302 	and.w	r3, r3, #2
 801027c:	2b02      	cmp	r3, #2
 801027e:	d11b      	bne.n	80102b8 <HAL_SPI_TransmitReceive+0x176>
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010284:	b29b      	uxth	r3, r3
 8010286:	2b00      	cmp	r3, #0
 8010288:	d016      	beq.n	80102b8 <HAL_SPI_TransmitReceive+0x176>
 801028a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801028c:	2b01      	cmp	r3, #1
 801028e:	d113      	bne.n	80102b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010294:	881a      	ldrh	r2, [r3, #0]
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102a0:	1c9a      	adds	r2, r3, #2
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	3b01      	subs	r3, #1
 80102ae:	b29a      	uxth	r2, r3
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80102b4:	2300      	movs	r3, #0
 80102b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	689b      	ldr	r3, [r3, #8]
 80102be:	f003 0301 	and.w	r3, r3, #1
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d119      	bne.n	80102fa <HAL_SPI_TransmitReceive+0x1b8>
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d014      	beq.n	80102fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	68da      	ldr	r2, [r3, #12]
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102da:	b292      	uxth	r2, r2
 80102dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102e2:	1c9a      	adds	r2, r3, #2
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	3b01      	subs	r3, #1
 80102f0:	b29a      	uxth	r2, r3
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80102f6:	2301      	movs	r3, #1
 80102f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80102fa:	f7fb f975 	bl	800b5e8 <HAL_GetTick>
 80102fe:	4602      	mov	r2, r0
 8010300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010302:	1ad3      	subs	r3, r2, r3
 8010304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010306:	429a      	cmp	r2, r3
 8010308:	d807      	bhi.n	801031a <HAL_SPI_TransmitReceive+0x1d8>
 801030a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010310:	d003      	beq.n	801031a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8010312:	2303      	movs	r3, #3
 8010314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010318:	e0a7      	b.n	801046a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801031e:	b29b      	uxth	r3, r3
 8010320:	2b00      	cmp	r3, #0
 8010322:	d1a6      	bne.n	8010272 <HAL_SPI_TransmitReceive+0x130>
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010328:	b29b      	uxth	r3, r3
 801032a:	2b00      	cmp	r3, #0
 801032c:	d1a1      	bne.n	8010272 <HAL_SPI_TransmitReceive+0x130>
 801032e:	e07c      	b.n	801042a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d002      	beq.n	801033e <HAL_SPI_TransmitReceive+0x1fc>
 8010338:	8b7b      	ldrh	r3, [r7, #26]
 801033a:	2b01      	cmp	r3, #1
 801033c:	d16b      	bne.n	8010416 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	330c      	adds	r3, #12
 8010348:	7812      	ldrb	r2, [r2, #0]
 801034a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010350:	1c5a      	adds	r2, r3, #1
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801035a:	b29b      	uxth	r3, r3
 801035c:	3b01      	subs	r3, #1
 801035e:	b29a      	uxth	r2, r3
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010364:	e057      	b.n	8010416 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	f003 0302 	and.w	r3, r3, #2
 8010370:	2b02      	cmp	r3, #2
 8010372:	d11c      	bne.n	80103ae <HAL_SPI_TransmitReceive+0x26c>
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010378:	b29b      	uxth	r3, r3
 801037a:	2b00      	cmp	r3, #0
 801037c:	d017      	beq.n	80103ae <HAL_SPI_TransmitReceive+0x26c>
 801037e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010380:	2b01      	cmp	r3, #1
 8010382:	d114      	bne.n	80103ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	330c      	adds	r3, #12
 801038e:	7812      	ldrb	r2, [r2, #0]
 8010390:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010396:	1c5a      	adds	r2, r3, #1
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	3b01      	subs	r3, #1
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80103aa:	2300      	movs	r3, #0
 80103ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	689b      	ldr	r3, [r3, #8]
 80103b4:	f003 0301 	and.w	r3, r3, #1
 80103b8:	2b01      	cmp	r3, #1
 80103ba:	d119      	bne.n	80103f0 <HAL_SPI_TransmitReceive+0x2ae>
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d014      	beq.n	80103f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	68da      	ldr	r2, [r3, #12]
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103d0:	b2d2      	uxtb	r2, r2
 80103d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103d8:	1c5a      	adds	r2, r3, #1
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	3b01      	subs	r3, #1
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80103ec:	2301      	movs	r3, #1
 80103ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80103f0:	f7fb f8fa 	bl	800b5e8 <HAL_GetTick>
 80103f4:	4602      	mov	r2, r0
 80103f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f8:	1ad3      	subs	r3, r2, r3
 80103fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d803      	bhi.n	8010408 <HAL_SPI_TransmitReceive+0x2c6>
 8010400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010406:	d102      	bne.n	801040e <HAL_SPI_TransmitReceive+0x2cc>
 8010408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040a:	2b00      	cmp	r3, #0
 801040c:	d103      	bne.n	8010416 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801040e:	2303      	movs	r3, #3
 8010410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010414:	e029      	b.n	801046a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801041a:	b29b      	uxth	r3, r3
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1a2      	bne.n	8010366 <HAL_SPI_TransmitReceive+0x224>
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010424:	b29b      	uxth	r3, r3
 8010426:	2b00      	cmp	r3, #0
 8010428:	d19d      	bne.n	8010366 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801042a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801042c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801042e:	68f8      	ldr	r0, [r7, #12]
 8010430:	f000 f9d0 	bl	80107d4 <SPI_EndRxTxTransaction>
 8010434:	4603      	mov	r3, r0
 8010436:	2b00      	cmp	r3, #0
 8010438:	d006      	beq.n	8010448 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801043a:	2301      	movs	r3, #1
 801043c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2220      	movs	r2, #32
 8010444:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010446:	e010      	b.n	801046a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	689b      	ldr	r3, [r3, #8]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d10b      	bne.n	8010468 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010450:	2300      	movs	r3, #0
 8010452:	617b      	str	r3, [r7, #20]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	68db      	ldr	r3, [r3, #12]
 801045a:	617b      	str	r3, [r7, #20]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	689b      	ldr	r3, [r3, #8]
 8010462:	617b      	str	r3, [r7, #20]
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	e000      	b.n	801046a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8010468:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2201      	movs	r2, #1
 801046e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2200      	movs	r2, #0
 8010476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801047a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801047e:	4618      	mov	r0, r3
 8010480:	3730      	adds	r7, #48	; 0x30
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
	...

08010488 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b088      	sub	sp, #32
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	689b      	ldr	r3, [r3, #8]
 801049e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80104a0:	69bb      	ldr	r3, [r7, #24]
 80104a2:	099b      	lsrs	r3, r3, #6
 80104a4:	f003 0301 	and.w	r3, r3, #1
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d10f      	bne.n	80104cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80104ac:	69bb      	ldr	r3, [r7, #24]
 80104ae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d00a      	beq.n	80104cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80104b6:	69fb      	ldr	r3, [r7, #28]
 80104b8:	099b      	lsrs	r3, r3, #6
 80104ba:	f003 0301 	and.w	r3, r3, #1
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d004      	beq.n	80104cc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	4798      	blx	r3
    return;
 80104ca:	e0d7      	b.n	801067c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80104cc:	69bb      	ldr	r3, [r7, #24]
 80104ce:	085b      	lsrs	r3, r3, #1
 80104d0:	f003 0301 	and.w	r3, r3, #1
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d00a      	beq.n	80104ee <HAL_SPI_IRQHandler+0x66>
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	09db      	lsrs	r3, r3, #7
 80104dc:	f003 0301 	and.w	r3, r3, #1
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d004      	beq.n	80104ee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	4798      	blx	r3
    return;
 80104ec:	e0c6      	b.n	801067c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	095b      	lsrs	r3, r3, #5
 80104f2:	f003 0301 	and.w	r3, r3, #1
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d10c      	bne.n	8010514 <HAL_SPI_IRQHandler+0x8c>
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	099b      	lsrs	r3, r3, #6
 80104fe:	f003 0301 	and.w	r3, r3, #1
 8010502:	2b00      	cmp	r3, #0
 8010504:	d106      	bne.n	8010514 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8010506:	69bb      	ldr	r3, [r7, #24]
 8010508:	0a1b      	lsrs	r3, r3, #8
 801050a:	f003 0301 	and.w	r3, r3, #1
 801050e:	2b00      	cmp	r3, #0
 8010510:	f000 80b4 	beq.w	801067c <HAL_SPI_IRQHandler+0x1f4>
 8010514:	69fb      	ldr	r3, [r7, #28]
 8010516:	095b      	lsrs	r3, r3, #5
 8010518:	f003 0301 	and.w	r3, r3, #1
 801051c:	2b00      	cmp	r3, #0
 801051e:	f000 80ad 	beq.w	801067c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8010522:	69bb      	ldr	r3, [r7, #24]
 8010524:	099b      	lsrs	r3, r3, #6
 8010526:	f003 0301 	and.w	r3, r3, #1
 801052a:	2b00      	cmp	r3, #0
 801052c:	d023      	beq.n	8010576 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010534:	b2db      	uxtb	r3, r3
 8010536:	2b03      	cmp	r3, #3
 8010538:	d011      	beq.n	801055e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801053e:	f043 0204 	orr.w	r2, r3, #4
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010546:	2300      	movs	r3, #0
 8010548:	617b      	str	r3, [r7, #20]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	68db      	ldr	r3, [r3, #12]
 8010550:	617b      	str	r3, [r7, #20]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	689b      	ldr	r3, [r3, #8]
 8010558:	617b      	str	r3, [r7, #20]
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	e00b      	b.n	8010576 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801055e:	2300      	movs	r3, #0
 8010560:	613b      	str	r3, [r7, #16]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	68db      	ldr	r3, [r3, #12]
 8010568:	613b      	str	r3, [r7, #16]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	613b      	str	r3, [r7, #16]
 8010572:	693b      	ldr	r3, [r7, #16]
        return;
 8010574:	e082      	b.n	801067c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8010576:	69bb      	ldr	r3, [r7, #24]
 8010578:	095b      	lsrs	r3, r3, #5
 801057a:	f003 0301 	and.w	r3, r3, #1
 801057e:	2b00      	cmp	r3, #0
 8010580:	d014      	beq.n	80105ac <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010586:	f043 0201 	orr.w	r2, r3, #1
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801058e:	2300      	movs	r3, #0
 8010590:	60fb      	str	r3, [r7, #12]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	689b      	ldr	r3, [r3, #8]
 8010598:	60fb      	str	r3, [r7, #12]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	681a      	ldr	r2, [r3, #0]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105a8:	601a      	str	r2, [r3, #0]
 80105aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	0a1b      	lsrs	r3, r3, #8
 80105b0:	f003 0301 	and.w	r3, r3, #1
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d00c      	beq.n	80105d2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105bc:	f043 0208 	orr.w	r2, r3, #8
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80105c4:	2300      	movs	r3, #0
 80105c6:	60bb      	str	r3, [r7, #8]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	689b      	ldr	r3, [r3, #8]
 80105ce:	60bb      	str	r3, [r7, #8]
 80105d0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d04f      	beq.n	801067a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	685a      	ldr	r2, [r3, #4]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80105e8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2201      	movs	r2, #1
 80105ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80105f2:	69fb      	ldr	r3, [r7, #28]
 80105f4:	f003 0302 	and.w	r3, r3, #2
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d104      	bne.n	8010606 <HAL_SPI_IRQHandler+0x17e>
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	f003 0301 	and.w	r3, r3, #1
 8010602:	2b00      	cmp	r3, #0
 8010604:	d034      	beq.n	8010670 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	685a      	ldr	r2, [r3, #4]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f022 0203 	bic.w	r2, r2, #3
 8010614:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801061a:	2b00      	cmp	r3, #0
 801061c:	d011      	beq.n	8010642 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010622:	4a18      	ldr	r2, [pc, #96]	; (8010684 <HAL_SPI_IRQHandler+0x1fc>)
 8010624:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801062a:	4618      	mov	r0, r3
 801062c:	f7fb fb22 	bl	800bc74 <HAL_DMA_Abort_IT>
 8010630:	4603      	mov	r3, r0
 8010632:	2b00      	cmp	r3, #0
 8010634:	d005      	beq.n	8010642 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801063a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010646:	2b00      	cmp	r3, #0
 8010648:	d016      	beq.n	8010678 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801064e:	4a0d      	ldr	r2, [pc, #52]	; (8010684 <HAL_SPI_IRQHandler+0x1fc>)
 8010650:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010656:	4618      	mov	r0, r3
 8010658:	f7fb fb0c 	bl	800bc74 <HAL_DMA_Abort_IT>
 801065c:	4603      	mov	r3, r0
 801065e:	2b00      	cmp	r3, #0
 8010660:	d00a      	beq.n	8010678 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010666:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801066e:	e003      	b.n	8010678 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f000 f809 	bl	8010688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010676:	e000      	b.n	801067a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8010678:	bf00      	nop
    return;
 801067a:	bf00      	nop
  }
}
 801067c:	3720      	adds	r7, #32
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	0801069d 	.word	0x0801069d

08010688 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010690:	bf00      	nop
 8010692:	370c      	adds	r7, #12
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr

0801069c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	2200      	movs	r2, #0
 80106ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	2200      	movs	r2, #0
 80106b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80106b6:	68f8      	ldr	r0, [r7, #12]
 80106b8:	f7ff ffe6 	bl	8010688 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80106bc:	bf00      	nop
 80106be:	3710      	adds	r7, #16
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b088      	sub	sp, #32
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	60f8      	str	r0, [r7, #12]
 80106cc:	60b9      	str	r1, [r7, #8]
 80106ce:	603b      	str	r3, [r7, #0]
 80106d0:	4613      	mov	r3, r2
 80106d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80106d4:	f7fa ff88 	bl	800b5e8 <HAL_GetTick>
 80106d8:	4602      	mov	r2, r0
 80106da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106dc:	1a9b      	subs	r3, r3, r2
 80106de:	683a      	ldr	r2, [r7, #0]
 80106e0:	4413      	add	r3, r2
 80106e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80106e4:	f7fa ff80 	bl	800b5e8 <HAL_GetTick>
 80106e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80106ea:	4b39      	ldr	r3, [pc, #228]	; (80107d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	015b      	lsls	r3, r3, #5
 80106f0:	0d1b      	lsrs	r3, r3, #20
 80106f2:	69fa      	ldr	r2, [r7, #28]
 80106f4:	fb02 f303 	mul.w	r3, r2, r3
 80106f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80106fa:	e054      	b.n	80107a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010702:	d050      	beq.n	80107a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010704:	f7fa ff70 	bl	800b5e8 <HAL_GetTick>
 8010708:	4602      	mov	r2, r0
 801070a:	69bb      	ldr	r3, [r7, #24]
 801070c:	1ad3      	subs	r3, r2, r3
 801070e:	69fa      	ldr	r2, [r7, #28]
 8010710:	429a      	cmp	r2, r3
 8010712:	d902      	bls.n	801071a <SPI_WaitFlagStateUntilTimeout+0x56>
 8010714:	69fb      	ldr	r3, [r7, #28]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d13d      	bne.n	8010796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	685a      	ldr	r2, [r3, #4]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010732:	d111      	bne.n	8010758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	689b      	ldr	r3, [r3, #8]
 8010738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801073c:	d004      	beq.n	8010748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010746:	d107      	bne.n	8010758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	681a      	ldr	r2, [r3, #0]
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801075c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010760:	d10f      	bne.n	8010782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010770:	601a      	str	r2, [r3, #0]
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2201      	movs	r2, #1
 8010786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2200      	movs	r2, #0
 801078e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8010792:	2303      	movs	r3, #3
 8010794:	e017      	b.n	80107c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d101      	bne.n	80107a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801079c:	2300      	movs	r3, #0
 801079e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	3b01      	subs	r3, #1
 80107a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	689a      	ldr	r2, [r3, #8]
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	4013      	ands	r3, r2
 80107b0:	68ba      	ldr	r2, [r7, #8]
 80107b2:	429a      	cmp	r2, r3
 80107b4:	bf0c      	ite	eq
 80107b6:	2301      	moveq	r3, #1
 80107b8:	2300      	movne	r3, #0
 80107ba:	b2db      	uxtb	r3, r3
 80107bc:	461a      	mov	r2, r3
 80107be:	79fb      	ldrb	r3, [r7, #7]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d19b      	bne.n	80106fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80107c4:	2300      	movs	r3, #0
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3720      	adds	r7, #32
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
 80107ce:	bf00      	nop
 80107d0:	20000038 	.word	0x20000038

080107d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b088      	sub	sp, #32
 80107d8:	af02      	add	r7, sp, #8
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80107e0:	4b1b      	ldr	r3, [pc, #108]	; (8010850 <SPI_EndRxTxTransaction+0x7c>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	4a1b      	ldr	r2, [pc, #108]	; (8010854 <SPI_EndRxTxTransaction+0x80>)
 80107e6:	fba2 2303 	umull	r2, r3, r2, r3
 80107ea:	0d5b      	lsrs	r3, r3, #21
 80107ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80107f0:	fb02 f303 	mul.w	r3, r2, r3
 80107f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80107fe:	d112      	bne.n	8010826 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	9300      	str	r3, [sp, #0]
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	2200      	movs	r2, #0
 8010808:	2180      	movs	r1, #128	; 0x80
 801080a:	68f8      	ldr	r0, [r7, #12]
 801080c:	f7ff ff5a 	bl	80106c4 <SPI_WaitFlagStateUntilTimeout>
 8010810:	4603      	mov	r3, r0
 8010812:	2b00      	cmp	r3, #0
 8010814:	d016      	beq.n	8010844 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801081a:	f043 0220 	orr.w	r2, r3, #32
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010822:	2303      	movs	r3, #3
 8010824:	e00f      	b.n	8010846 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d00a      	beq.n	8010842 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	3b01      	subs	r3, #1
 8010830:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	689b      	ldr	r3, [r3, #8]
 8010838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801083c:	2b80      	cmp	r3, #128	; 0x80
 801083e:	d0f2      	beq.n	8010826 <SPI_EndRxTxTransaction+0x52>
 8010840:	e000      	b.n	8010844 <SPI_EndRxTxTransaction+0x70>
        break;
 8010842:	bf00      	nop
  }

  return HAL_OK;
 8010844:	2300      	movs	r3, #0
}
 8010846:	4618      	mov	r0, r3
 8010848:	3718      	adds	r7, #24
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}
 801084e:	bf00      	nop
 8010850:	20000038 	.word	0x20000038
 8010854:	165e9f81 	.word	0x165e9f81

08010858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d101      	bne.n	801086a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010866:	2301      	movs	r3, #1
 8010868:	e041      	b.n	80108ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010870:	b2db      	uxtb	r3, r3
 8010872:	2b00      	cmp	r3, #0
 8010874:	d106      	bne.n	8010884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2200      	movs	r2, #0
 801087a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f7fa fa74 	bl	800ad6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2202      	movs	r2, #2
 8010888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	3304      	adds	r3, #4
 8010894:	4619      	mov	r1, r3
 8010896:	4610      	mov	r0, r2
 8010898:	f000 fb24 	bl	8010ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2201      	movs	r2, #1
 80108a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2201      	movs	r2, #1
 80108a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2201      	movs	r2, #1
 80108b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2201      	movs	r2, #1
 80108b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2201      	movs	r2, #1
 80108c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2201      	movs	r2, #1
 80108c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2201      	movs	r2, #1
 80108d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2201      	movs	r2, #1
 80108d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2201      	movs	r2, #1
 80108e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2201      	movs	r2, #1
 80108e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80108ec:	2300      	movs	r3, #0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3708      	adds	r7, #8
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
	...

080108f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b085      	sub	sp, #20
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010906:	b2db      	uxtb	r3, r3
 8010908:	2b01      	cmp	r3, #1
 801090a:	d001      	beq.n	8010910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801090c:	2301      	movs	r3, #1
 801090e:	e044      	b.n	801099a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2202      	movs	r2, #2
 8010914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	68da      	ldr	r2, [r3, #12]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f042 0201 	orr.w	r2, r2, #1
 8010926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4a1e      	ldr	r2, [pc, #120]	; (80109a8 <HAL_TIM_Base_Start_IT+0xb0>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d018      	beq.n	8010964 <HAL_TIM_Base_Start_IT+0x6c>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801093a:	d013      	beq.n	8010964 <HAL_TIM_Base_Start_IT+0x6c>
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4a1a      	ldr	r2, [pc, #104]	; (80109ac <HAL_TIM_Base_Start_IT+0xb4>)
 8010942:	4293      	cmp	r3, r2
 8010944:	d00e      	beq.n	8010964 <HAL_TIM_Base_Start_IT+0x6c>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4a19      	ldr	r2, [pc, #100]	; (80109b0 <HAL_TIM_Base_Start_IT+0xb8>)
 801094c:	4293      	cmp	r3, r2
 801094e:	d009      	beq.n	8010964 <HAL_TIM_Base_Start_IT+0x6c>
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	4a17      	ldr	r2, [pc, #92]	; (80109b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8010956:	4293      	cmp	r3, r2
 8010958:	d004      	beq.n	8010964 <HAL_TIM_Base_Start_IT+0x6c>
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	4a16      	ldr	r2, [pc, #88]	; (80109b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8010960:	4293      	cmp	r3, r2
 8010962:	d111      	bne.n	8010988 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	689b      	ldr	r3, [r3, #8]
 801096a:	f003 0307 	and.w	r3, r3, #7
 801096e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2b06      	cmp	r3, #6
 8010974:	d010      	beq.n	8010998 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	f042 0201 	orr.w	r2, r2, #1
 8010984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010986:	e007      	b.n	8010998 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f042 0201 	orr.w	r2, r2, #1
 8010996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010998:	2300      	movs	r3, #0
}
 801099a:	4618      	mov	r0, r3
 801099c:	3714      	adds	r7, #20
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr
 80109a6:	bf00      	nop
 80109a8:	40010000 	.word	0x40010000
 80109ac:	40000400 	.word	0x40000400
 80109b0:	40000800 	.word	0x40000800
 80109b4:	40000c00 	.word	0x40000c00
 80109b8:	40014000 	.word	0x40014000

080109bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	68da      	ldr	r2, [r3, #12]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f022 0201 	bic.w	r2, r2, #1
 80109d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	6a1a      	ldr	r2, [r3, #32]
 80109da:	f241 1311 	movw	r3, #4369	; 0x1111
 80109de:	4013      	ands	r3, r2
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d10f      	bne.n	8010a04 <HAL_TIM_Base_Stop_IT+0x48>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	6a1a      	ldr	r2, [r3, #32]
 80109ea:	f240 4344 	movw	r3, #1092	; 0x444
 80109ee:	4013      	ands	r3, r2
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d107      	bne.n	8010a04 <HAL_TIM_Base_Stop_IT+0x48>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f022 0201 	bic.w	r2, r2, #1
 8010a02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2201      	movs	r2, #1
 8010a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8010a0c:	2300      	movs	r3, #0
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	370c      	adds	r7, #12
 8010a12:	46bd      	mov	sp, r7
 8010a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a18:	4770      	bx	lr

08010a1a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010a1a:	b580      	push	{r7, lr}
 8010a1c:	b086      	sub	sp, #24
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	6078      	str	r0, [r7, #4]
 8010a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d101      	bne.n	8010a2e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	e097      	b.n	8010b5e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d106      	bne.n	8010a48 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8010a42:	6878      	ldr	r0, [r7, #4]
 8010a44:	f7fa f94c 	bl	800ace0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2202      	movs	r2, #2
 8010a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	689b      	ldr	r3, [r3, #8]
 8010a56:	687a      	ldr	r2, [r7, #4]
 8010a58:	6812      	ldr	r2, [r2, #0]
 8010a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a5e:	f023 0307 	bic.w	r3, r3, #7
 8010a62:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	3304      	adds	r3, #4
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	4610      	mov	r0, r2
 8010a70:	f000 fa38 	bl	8010ee4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	689b      	ldr	r3, [r3, #8]
 8010a7a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	699b      	ldr	r3, [r3, #24]
 8010a82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	6a1b      	ldr	r3, [r3, #32]
 8010a8a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	697a      	ldr	r2, [r7, #20]
 8010a92:	4313      	orrs	r3, r2
 8010a94:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a9c:	f023 0303 	bic.w	r3, r3, #3
 8010aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	689a      	ldr	r2, [r3, #8]
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	699b      	ldr	r3, [r3, #24]
 8010aaa:	021b      	lsls	r3, r3, #8
 8010aac:	4313      	orrs	r3, r2
 8010aae:	693a      	ldr	r2, [r7, #16]
 8010ab0:	4313      	orrs	r3, r2
 8010ab2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8010aba:	f023 030c 	bic.w	r3, r3, #12
 8010abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	68da      	ldr	r2, [r3, #12]
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	69db      	ldr	r3, [r3, #28]
 8010ad4:	021b      	lsls	r3, r3, #8
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	693a      	ldr	r2, [r7, #16]
 8010ada:	4313      	orrs	r3, r2
 8010adc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	691b      	ldr	r3, [r3, #16]
 8010ae2:	011a      	lsls	r2, r3, #4
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	6a1b      	ldr	r3, [r3, #32]
 8010ae8:	031b      	lsls	r3, r3, #12
 8010aea:	4313      	orrs	r3, r2
 8010aec:	693a      	ldr	r2, [r7, #16]
 8010aee:	4313      	orrs	r3, r2
 8010af0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8010af8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8010b00:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	685a      	ldr	r2, [r3, #4]
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	695b      	ldr	r3, [r3, #20]
 8010b0a:	011b      	lsls	r3, r3, #4
 8010b0c:	4313      	orrs	r3, r2
 8010b0e:	68fa      	ldr	r2, [r7, #12]
 8010b10:	4313      	orrs	r3, r2
 8010b12:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	697a      	ldr	r2, [r7, #20]
 8010b1a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	693a      	ldr	r2, [r7, #16]
 8010b22:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	68fa      	ldr	r2, [r7, #12]
 8010b2a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2201      	movs	r2, #1
 8010b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2201      	movs	r2, #1
 8010b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2201      	movs	r2, #1
 8010b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2201      	movs	r2, #1
 8010b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2201      	movs	r2, #1
 8010b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2201      	movs	r2, #1
 8010b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010b5c:	2300      	movs	r3, #0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3718      	adds	r7, #24
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b084      	sub	sp, #16
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
 8010b6e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010b76:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010b7e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b86:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b8e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d110      	bne.n	8010bb8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010b96:	7bfb      	ldrb	r3, [r7, #15]
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d102      	bne.n	8010ba2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8010b9c:	7b7b      	ldrb	r3, [r7, #13]
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	d001      	beq.n	8010ba6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	e069      	b.n	8010c7a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2202      	movs	r2, #2
 8010baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2202      	movs	r2, #2
 8010bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010bb6:	e031      	b.n	8010c1c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	2b04      	cmp	r3, #4
 8010bbc:	d110      	bne.n	8010be0 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8010bbe:	7bbb      	ldrb	r3, [r7, #14]
 8010bc0:	2b01      	cmp	r3, #1
 8010bc2:	d102      	bne.n	8010bca <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010bc4:	7b3b      	ldrb	r3, [r7, #12]
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d001      	beq.n	8010bce <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8010bca:	2301      	movs	r3, #1
 8010bcc:	e055      	b.n	8010c7a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2202      	movs	r2, #2
 8010bd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	2202      	movs	r2, #2
 8010bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010bde:	e01d      	b.n	8010c1c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010be0:	7bfb      	ldrb	r3, [r7, #15]
 8010be2:	2b01      	cmp	r3, #1
 8010be4:	d108      	bne.n	8010bf8 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8010be6:	7bbb      	ldrb	r3, [r7, #14]
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d105      	bne.n	8010bf8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8010bec:	7b7b      	ldrb	r3, [r7, #13]
 8010bee:	2b01      	cmp	r3, #1
 8010bf0:	d102      	bne.n	8010bf8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8010bf2:	7b3b      	ldrb	r3, [r7, #12]
 8010bf4:	2b01      	cmp	r3, #1
 8010bf6:	d001      	beq.n	8010bfc <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e03e      	b.n	8010c7a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2202      	movs	r2, #2
 8010c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2202      	movs	r2, #2
 8010c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2202      	movs	r2, #2
 8010c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2202      	movs	r2, #2
 8010c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d003      	beq.n	8010c2a <HAL_TIM_Encoder_Start+0xc4>
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	2b04      	cmp	r3, #4
 8010c26:	d008      	beq.n	8010c3a <HAL_TIM_Encoder_Start+0xd4>
 8010c28:	e00f      	b.n	8010c4a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	2100      	movs	r1, #0
 8010c32:	4618      	mov	r0, r3
 8010c34:	f000 f9d6 	bl	8010fe4 <TIM_CCxChannelCmd>
      break;
 8010c38:	e016      	b.n	8010c68 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	2201      	movs	r2, #1
 8010c40:	2104      	movs	r1, #4
 8010c42:	4618      	mov	r0, r3
 8010c44:	f000 f9ce 	bl	8010fe4 <TIM_CCxChannelCmd>
      break;
 8010c48:	e00e      	b.n	8010c68 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	2201      	movs	r2, #1
 8010c50:	2100      	movs	r1, #0
 8010c52:	4618      	mov	r0, r3
 8010c54:	f000 f9c6 	bl	8010fe4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	2104      	movs	r1, #4
 8010c60:	4618      	mov	r0, r3
 8010c62:	f000 f9bf 	bl	8010fe4 <TIM_CCxChannelCmd>
      break;
 8010c66:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	681a      	ldr	r2, [r3, #0]
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f042 0201 	orr.w	r2, r2, #1
 8010c76:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010c78:	2300      	movs	r3, #0
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3710      	adds	r7, #16
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010c82:	b580      	push	{r7, lr}
 8010c84:	b082      	sub	sp, #8
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	691b      	ldr	r3, [r3, #16]
 8010c90:	f003 0302 	and.w	r3, r3, #2
 8010c94:	2b02      	cmp	r3, #2
 8010c96:	d122      	bne.n	8010cde <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	f003 0302 	and.w	r3, r3, #2
 8010ca2:	2b02      	cmp	r3, #2
 8010ca4:	d11b      	bne.n	8010cde <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f06f 0202 	mvn.w	r2, #2
 8010cae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	699b      	ldr	r3, [r3, #24]
 8010cbc:	f003 0303 	and.w	r3, r3, #3
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d003      	beq.n	8010ccc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f000 f8ee 	bl	8010ea6 <HAL_TIM_IC_CaptureCallback>
 8010cca:	e005      	b.n	8010cd8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f000 f8e0 	bl	8010e92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f000 f8f1 	bl	8010eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	691b      	ldr	r3, [r3, #16]
 8010ce4:	f003 0304 	and.w	r3, r3, #4
 8010ce8:	2b04      	cmp	r3, #4
 8010cea:	d122      	bne.n	8010d32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	f003 0304 	and.w	r3, r3, #4
 8010cf6:	2b04      	cmp	r3, #4
 8010cf8:	d11b      	bne.n	8010d32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	f06f 0204 	mvn.w	r2, #4
 8010d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2202      	movs	r2, #2
 8010d08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	699b      	ldr	r3, [r3, #24]
 8010d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d003      	beq.n	8010d20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 f8c4 	bl	8010ea6 <HAL_TIM_IC_CaptureCallback>
 8010d1e:	e005      	b.n	8010d2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f000 f8b6 	bl	8010e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f000 f8c7 	bl	8010eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	691b      	ldr	r3, [r3, #16]
 8010d38:	f003 0308 	and.w	r3, r3, #8
 8010d3c:	2b08      	cmp	r3, #8
 8010d3e:	d122      	bne.n	8010d86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	f003 0308 	and.w	r3, r3, #8
 8010d4a:	2b08      	cmp	r3, #8
 8010d4c:	d11b      	bne.n	8010d86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f06f 0208 	mvn.w	r2, #8
 8010d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2204      	movs	r2, #4
 8010d5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	69db      	ldr	r3, [r3, #28]
 8010d64:	f003 0303 	and.w	r3, r3, #3
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d003      	beq.n	8010d74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f000 f89a 	bl	8010ea6 <HAL_TIM_IC_CaptureCallback>
 8010d72:	e005      	b.n	8010d80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 f88c 	bl	8010e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f000 f89d 	bl	8010eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2200      	movs	r2, #0
 8010d84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	691b      	ldr	r3, [r3, #16]
 8010d8c:	f003 0310 	and.w	r3, r3, #16
 8010d90:	2b10      	cmp	r3, #16
 8010d92:	d122      	bne.n	8010dda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	68db      	ldr	r3, [r3, #12]
 8010d9a:	f003 0310 	and.w	r3, r3, #16
 8010d9e:	2b10      	cmp	r3, #16
 8010da0:	d11b      	bne.n	8010dda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	f06f 0210 	mvn.w	r2, #16
 8010daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2208      	movs	r2, #8
 8010db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	69db      	ldr	r3, [r3, #28]
 8010db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d003      	beq.n	8010dc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f000 f870 	bl	8010ea6 <HAL_TIM_IC_CaptureCallback>
 8010dc6:	e005      	b.n	8010dd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f000 f862 	bl	8010e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f000 f873 	bl	8010eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	691b      	ldr	r3, [r3, #16]
 8010de0:	f003 0301 	and.w	r3, r3, #1
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d10e      	bne.n	8010e06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	f003 0301 	and.w	r3, r3, #1
 8010df2:	2b01      	cmp	r3, #1
 8010df4:	d107      	bne.n	8010e06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f06f 0201 	mvn.w	r2, #1
 8010dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7f5 f9f1 	bl	80061e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	691b      	ldr	r3, [r3, #16]
 8010e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e10:	2b80      	cmp	r3, #128	; 0x80
 8010e12:	d10e      	bne.n	8010e32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	68db      	ldr	r3, [r3, #12]
 8010e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e1e:	2b80      	cmp	r3, #128	; 0x80
 8010e20:	d107      	bne.n	8010e32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f000 f977 	bl	8011120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	691b      	ldr	r3, [r3, #16]
 8010e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e3c:	2b40      	cmp	r3, #64	; 0x40
 8010e3e:	d10e      	bne.n	8010e5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e4a:	2b40      	cmp	r3, #64	; 0x40
 8010e4c:	d107      	bne.n	8010e5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f000 f838 	bl	8010ece <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	691b      	ldr	r3, [r3, #16]
 8010e64:	f003 0320 	and.w	r3, r3, #32
 8010e68:	2b20      	cmp	r3, #32
 8010e6a:	d10e      	bne.n	8010e8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	f003 0320 	and.w	r3, r3, #32
 8010e76:	2b20      	cmp	r3, #32
 8010e78:	d107      	bne.n	8010e8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f06f 0220 	mvn.w	r2, #32
 8010e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f000 f941 	bl	801110c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010e8a:	bf00      	nop
 8010e8c:	3708      	adds	r7, #8
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}

08010e92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010e92:	b480      	push	{r7}
 8010e94:	b083      	sub	sp, #12
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010e9a:	bf00      	nop
 8010e9c:	370c      	adds	r7, #12
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea4:	4770      	bx	lr

08010ea6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010ea6:	b480      	push	{r7}
 8010ea8:	b083      	sub	sp, #12
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010eae:	bf00      	nop
 8010eb0:	370c      	adds	r7, #12
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr

08010eba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010eba:	b480      	push	{r7}
 8010ebc:	b083      	sub	sp, #12
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010ec2:	bf00      	nop
 8010ec4:	370c      	adds	r7, #12
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ecc:	4770      	bx	lr

08010ece <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010ece:	b480      	push	{r7}
 8010ed0:	b083      	sub	sp, #12
 8010ed2:	af00      	add	r7, sp, #0
 8010ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010ed6:	bf00      	nop
 8010ed8:	370c      	adds	r7, #12
 8010eda:	46bd      	mov	sp, r7
 8010edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee0:	4770      	bx	lr
	...

08010ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b085      	sub	sp, #20
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	4a34      	ldr	r2, [pc, #208]	; (8010fc8 <TIM_Base_SetConfig+0xe4>)
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	d00f      	beq.n	8010f1c <TIM_Base_SetConfig+0x38>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f02:	d00b      	beq.n	8010f1c <TIM_Base_SetConfig+0x38>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	4a31      	ldr	r2, [pc, #196]	; (8010fcc <TIM_Base_SetConfig+0xe8>)
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d007      	beq.n	8010f1c <TIM_Base_SetConfig+0x38>
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	4a30      	ldr	r2, [pc, #192]	; (8010fd0 <TIM_Base_SetConfig+0xec>)
 8010f10:	4293      	cmp	r3, r2
 8010f12:	d003      	beq.n	8010f1c <TIM_Base_SetConfig+0x38>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	4a2f      	ldr	r2, [pc, #188]	; (8010fd4 <TIM_Base_SetConfig+0xf0>)
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d108      	bne.n	8010f2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	68fa      	ldr	r2, [r7, #12]
 8010f2a:	4313      	orrs	r3, r2
 8010f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	4a25      	ldr	r2, [pc, #148]	; (8010fc8 <TIM_Base_SetConfig+0xe4>)
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d01b      	beq.n	8010f6e <TIM_Base_SetConfig+0x8a>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f3c:	d017      	beq.n	8010f6e <TIM_Base_SetConfig+0x8a>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	4a22      	ldr	r2, [pc, #136]	; (8010fcc <TIM_Base_SetConfig+0xe8>)
 8010f42:	4293      	cmp	r3, r2
 8010f44:	d013      	beq.n	8010f6e <TIM_Base_SetConfig+0x8a>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	4a21      	ldr	r2, [pc, #132]	; (8010fd0 <TIM_Base_SetConfig+0xec>)
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	d00f      	beq.n	8010f6e <TIM_Base_SetConfig+0x8a>
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	4a20      	ldr	r2, [pc, #128]	; (8010fd4 <TIM_Base_SetConfig+0xf0>)
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d00b      	beq.n	8010f6e <TIM_Base_SetConfig+0x8a>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	4a1f      	ldr	r2, [pc, #124]	; (8010fd8 <TIM_Base_SetConfig+0xf4>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d007      	beq.n	8010f6e <TIM_Base_SetConfig+0x8a>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4a1e      	ldr	r2, [pc, #120]	; (8010fdc <TIM_Base_SetConfig+0xf8>)
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d003      	beq.n	8010f6e <TIM_Base_SetConfig+0x8a>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	4a1d      	ldr	r2, [pc, #116]	; (8010fe0 <TIM_Base_SetConfig+0xfc>)
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	d108      	bne.n	8010f80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	68db      	ldr	r3, [r3, #12]
 8010f7a:	68fa      	ldr	r2, [r7, #12]
 8010f7c:	4313      	orrs	r3, r2
 8010f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	695b      	ldr	r3, [r3, #20]
 8010f8a:	4313      	orrs	r3, r2
 8010f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	68fa      	ldr	r2, [r7, #12]
 8010f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	689a      	ldr	r2, [r3, #8]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	681a      	ldr	r2, [r3, #0]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	4a08      	ldr	r2, [pc, #32]	; (8010fc8 <TIM_Base_SetConfig+0xe4>)
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d103      	bne.n	8010fb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	691a      	ldr	r2, [r3, #16]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2201      	movs	r2, #1
 8010fb8:	615a      	str	r2, [r3, #20]
}
 8010fba:	bf00      	nop
 8010fbc:	3714      	adds	r7, #20
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc4:	4770      	bx	lr
 8010fc6:	bf00      	nop
 8010fc8:	40010000 	.word	0x40010000
 8010fcc:	40000400 	.word	0x40000400
 8010fd0:	40000800 	.word	0x40000800
 8010fd4:	40000c00 	.word	0x40000c00
 8010fd8:	40014000 	.word	0x40014000
 8010fdc:	40014400 	.word	0x40014400
 8010fe0:	40014800 	.word	0x40014800

08010fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b087      	sub	sp, #28
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	f003 031f 	and.w	r3, r3, #31
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8010ffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	6a1a      	ldr	r2, [r3, #32]
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	43db      	mvns	r3, r3
 8011006:	401a      	ands	r2, r3
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	6a1a      	ldr	r2, [r3, #32]
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	f003 031f 	and.w	r3, r3, #31
 8011016:	6879      	ldr	r1, [r7, #4]
 8011018:	fa01 f303 	lsl.w	r3, r1, r3
 801101c:	431a      	orrs	r2, r3
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	621a      	str	r2, [r3, #32]
}
 8011022:	bf00      	nop
 8011024:	371c      	adds	r7, #28
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr
	...

08011030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011030:	b480      	push	{r7}
 8011032:	b085      	sub	sp, #20
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011040:	2b01      	cmp	r3, #1
 8011042:	d101      	bne.n	8011048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011044:	2302      	movs	r3, #2
 8011046:	e050      	b.n	80110ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2201      	movs	r2, #1
 801104c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2202      	movs	r2, #2
 8011054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	689b      	ldr	r3, [r3, #8]
 8011066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801106e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	4313      	orrs	r3, r2
 8011078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	68fa      	ldr	r2, [r7, #12]
 8011080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	4a1c      	ldr	r2, [pc, #112]	; (80110f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d018      	beq.n	80110be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011094:	d013      	beq.n	80110be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	4a18      	ldr	r2, [pc, #96]	; (80110fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801109c:	4293      	cmp	r3, r2
 801109e:	d00e      	beq.n	80110be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4a16      	ldr	r2, [pc, #88]	; (8011100 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d009      	beq.n	80110be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	4a15      	ldr	r2, [pc, #84]	; (8011104 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80110b0:	4293      	cmp	r3, r2
 80110b2:	d004      	beq.n	80110be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	4a13      	ldr	r2, [pc, #76]	; (8011108 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80110ba:	4293      	cmp	r3, r2
 80110bc:	d10c      	bne.n	80110d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	68ba      	ldr	r2, [r7, #8]
 80110cc:	4313      	orrs	r3, r2
 80110ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	68ba      	ldr	r2, [r7, #8]
 80110d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2201      	movs	r2, #1
 80110dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2200      	movs	r2, #0
 80110e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80110e8:	2300      	movs	r3, #0
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3714      	adds	r7, #20
 80110ee:	46bd      	mov	sp, r7
 80110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f4:	4770      	bx	lr
 80110f6:	bf00      	nop
 80110f8:	40010000 	.word	0x40010000
 80110fc:	40000400 	.word	0x40000400
 8011100:	40000800 	.word	0x40000800
 8011104:	40000c00 	.word	0x40000c00
 8011108:	40014000 	.word	0x40014000

0801110c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801110c:	b480      	push	{r7}
 801110e:	b083      	sub	sp, #12
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011114:	bf00      	nop
 8011116:	370c      	adds	r7, #12
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr

08011120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011120:	b480      	push	{r7}
 8011122:	b083      	sub	sp, #12
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011128:	bf00      	nop
 801112a:	370c      	adds	r7, #12
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr

08011134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b082      	sub	sp, #8
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d101      	bne.n	8011146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011142:	2301      	movs	r3, #1
 8011144:	e03f      	b.n	80111c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801114c:	b2db      	uxtb	r3, r3
 801114e:	2b00      	cmp	r3, #0
 8011150:	d106      	bne.n	8011160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2200      	movs	r2, #0
 8011156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	f7fa f842 	bl	800b1e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2224      	movs	r2, #36	; 0x24
 8011164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	68da      	ldr	r2, [r3, #12]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	f000 ff53 	bl	8012024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	691a      	ldr	r2, [r3, #16]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801118c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	695a      	ldr	r2, [r3, #20]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801119c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	68da      	ldr	r2, [r3, #12]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80111ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2200      	movs	r2, #0
 80111b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2220      	movs	r2, #32
 80111b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2220      	movs	r2, #32
 80111c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80111c4:	2300      	movs	r3, #0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3708      	adds	r7, #8
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
	...

080111d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b08c      	sub	sp, #48	; 0x30
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	60b9      	str	r1, [r7, #8]
 80111da:	4613      	mov	r3, r2
 80111dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	2b20      	cmp	r3, #32
 80111e8:	d165      	bne.n	80112b6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d002      	beq.n	80111f6 <HAL_UART_Transmit_DMA+0x26>
 80111f0:	88fb      	ldrh	r3, [r7, #6]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d101      	bne.n	80111fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80111f6:	2301      	movs	r3, #1
 80111f8:	e05e      	b.n	80112b8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011200:	2b01      	cmp	r3, #1
 8011202:	d101      	bne.n	8011208 <HAL_UART_Transmit_DMA+0x38>
 8011204:	2302      	movs	r3, #2
 8011206:	e057      	b.n	80112b8 <HAL_UART_Transmit_DMA+0xe8>
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2201      	movs	r2, #1
 801120c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8011210:	68ba      	ldr	r2, [r7, #8]
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	88fa      	ldrh	r2, [r7, #6]
 801121a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	88fa      	ldrh	r2, [r7, #6]
 8011220:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	2200      	movs	r2, #0
 8011226:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	2221      	movs	r2, #33	; 0x21
 801122c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011234:	4a22      	ldr	r2, [pc, #136]	; (80112c0 <HAL_UART_Transmit_DMA+0xf0>)
 8011236:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801123c:	4a21      	ldr	r2, [pc, #132]	; (80112c4 <HAL_UART_Transmit_DMA+0xf4>)
 801123e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011244:	4a20      	ldr	r2, [pc, #128]	; (80112c8 <HAL_UART_Transmit_DMA+0xf8>)
 8011246:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801124c:	2200      	movs	r2, #0
 801124e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8011250:	f107 0308 	add.w	r3, r7, #8
 8011254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125c:	6819      	ldr	r1, [r3, #0]
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	3304      	adds	r3, #4
 8011264:	461a      	mov	r2, r3
 8011266:	88fb      	ldrh	r3, [r7, #6]
 8011268:	f7fa fc3c 	bl	800bae4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011274:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	2200      	movs	r2, #0
 801127a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	3314      	adds	r3, #20
 8011284:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011286:	69bb      	ldr	r3, [r7, #24]
 8011288:	e853 3f00 	ldrex	r3, [r3]
 801128c:	617b      	str	r3, [r7, #20]
   return(result);
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011294:	62bb      	str	r3, [r7, #40]	; 0x28
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	3314      	adds	r3, #20
 801129c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801129e:	627a      	str	r2, [r7, #36]	; 0x24
 80112a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112a2:	6a39      	ldr	r1, [r7, #32]
 80112a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112a6:	e841 2300 	strex	r3, r2, [r1]
 80112aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d1e5      	bne.n	801127e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80112b2:	2300      	movs	r3, #0
 80112b4:	e000      	b.n	80112b8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80112b6:	2302      	movs	r3, #2
  }
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3730      	adds	r7, #48	; 0x30
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	080118c5 	.word	0x080118c5
 80112c4:	0801195f 	.word	0x0801195f
 80112c8:	08011ad7 	.word	0x08011ad7

080112cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	60f8      	str	r0, [r7, #12]
 80112d4:	60b9      	str	r1, [r7, #8]
 80112d6:	4613      	mov	r3, r2
 80112d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80112e0:	b2db      	uxtb	r3, r3
 80112e2:	2b20      	cmp	r3, #32
 80112e4:	d11d      	bne.n	8011322 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d002      	beq.n	80112f2 <HAL_UART_Receive_DMA+0x26>
 80112ec:	88fb      	ldrh	r3, [r7, #6]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d101      	bne.n	80112f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80112f2:	2301      	movs	r3, #1
 80112f4:	e016      	b.n	8011324 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112fc:	2b01      	cmp	r3, #1
 80112fe:	d101      	bne.n	8011304 <HAL_UART_Receive_DMA+0x38>
 8011300:	2302      	movs	r3, #2
 8011302:	e00f      	b.n	8011324 <HAL_UART_Receive_DMA+0x58>
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	2201      	movs	r2, #1
 8011308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2200      	movs	r2, #0
 8011310:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011312:	88fb      	ldrh	r3, [r7, #6]
 8011314:	461a      	mov	r2, r3
 8011316:	68b9      	ldr	r1, [r7, #8]
 8011318:	68f8      	ldr	r0, [r7, #12]
 801131a:	f000 fc27 	bl	8011b6c <UART_Start_Receive_DMA>
 801131e:	4603      	mov	r3, r0
 8011320:	e000      	b.n	8011324 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8011322:	2302      	movs	r3, #2
  }
}
 8011324:	4618      	mov	r0, r3
 8011326:	3710      	adds	r7, #16
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b0ba      	sub	sp, #232	; 0xe8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	68db      	ldr	r3, [r3, #12]
 8011344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	695b      	ldr	r3, [r3, #20]
 801134e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8011352:	2300      	movs	r3, #0
 8011354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8011358:	2300      	movs	r3, #0
 801135a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801135e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011362:	f003 030f 	and.w	r3, r3, #15
 8011366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801136a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801136e:	2b00      	cmp	r3, #0
 8011370:	d10f      	bne.n	8011392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011376:	f003 0320 	and.w	r3, r3, #32
 801137a:	2b00      	cmp	r3, #0
 801137c:	d009      	beq.n	8011392 <HAL_UART_IRQHandler+0x66>
 801137e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011382:	f003 0320 	and.w	r3, r3, #32
 8011386:	2b00      	cmp	r3, #0
 8011388:	d003      	beq.n	8011392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f000 fd8f 	bl	8011eae <UART_Receive_IT>
      return;
 8011390:	e256      	b.n	8011840 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8011392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011396:	2b00      	cmp	r3, #0
 8011398:	f000 80de 	beq.w	8011558 <HAL_UART_IRQHandler+0x22c>
 801139c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80113a0:	f003 0301 	and.w	r3, r3, #1
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d106      	bne.n	80113b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80113a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80113ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	f000 80d1 	beq.w	8011558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80113b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113ba:	f003 0301 	and.w	r3, r3, #1
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d00b      	beq.n	80113da <HAL_UART_IRQHandler+0xae>
 80113c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80113c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d005      	beq.n	80113da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113d2:	f043 0201 	orr.w	r2, r3, #1
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80113da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113de:	f003 0304 	and.w	r3, r3, #4
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d00b      	beq.n	80113fe <HAL_UART_IRQHandler+0xd2>
 80113e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80113ea:	f003 0301 	and.w	r3, r3, #1
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d005      	beq.n	80113fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113f6:	f043 0202 	orr.w	r2, r3, #2
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80113fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011402:	f003 0302 	and.w	r3, r3, #2
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00b      	beq.n	8011422 <HAL_UART_IRQHandler+0xf6>
 801140a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801140e:	f003 0301 	and.w	r3, r3, #1
 8011412:	2b00      	cmp	r3, #0
 8011414:	d005      	beq.n	8011422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801141a:	f043 0204 	orr.w	r2, r3, #4
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8011422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011426:	f003 0308 	and.w	r3, r3, #8
 801142a:	2b00      	cmp	r3, #0
 801142c:	d011      	beq.n	8011452 <HAL_UART_IRQHandler+0x126>
 801142e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011432:	f003 0320 	and.w	r3, r3, #32
 8011436:	2b00      	cmp	r3, #0
 8011438:	d105      	bne.n	8011446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801143a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801143e:	f003 0301 	and.w	r3, r3, #1
 8011442:	2b00      	cmp	r3, #0
 8011444:	d005      	beq.n	8011452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801144a:	f043 0208 	orr.w	r2, r3, #8
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011456:	2b00      	cmp	r3, #0
 8011458:	f000 81ed 	beq.w	8011836 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801145c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011460:	f003 0320 	and.w	r3, r3, #32
 8011464:	2b00      	cmp	r3, #0
 8011466:	d008      	beq.n	801147a <HAL_UART_IRQHandler+0x14e>
 8011468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801146c:	f003 0320 	and.w	r3, r3, #32
 8011470:	2b00      	cmp	r3, #0
 8011472:	d002      	beq.n	801147a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 fd1a 	bl	8011eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	695b      	ldr	r3, [r3, #20]
 8011480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011484:	2b40      	cmp	r3, #64	; 0x40
 8011486:	bf0c      	ite	eq
 8011488:	2301      	moveq	r3, #1
 801148a:	2300      	movne	r3, #0
 801148c:	b2db      	uxtb	r3, r3
 801148e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011496:	f003 0308 	and.w	r3, r3, #8
 801149a:	2b00      	cmp	r3, #0
 801149c:	d103      	bne.n	80114a6 <HAL_UART_IRQHandler+0x17a>
 801149e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d04f      	beq.n	8011546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f000 fc22 	bl	8011cf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	695b      	ldr	r3, [r3, #20]
 80114b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114b6:	2b40      	cmp	r3, #64	; 0x40
 80114b8:	d141      	bne.n	801153e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	3314      	adds	r3, #20
 80114c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80114c8:	e853 3f00 	ldrex	r3, [r3]
 80114cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80114d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80114d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	3314      	adds	r3, #20
 80114e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80114e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80114ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80114f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80114f6:	e841 2300 	strex	r3, r2, [r1]
 80114fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80114fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011502:	2b00      	cmp	r3, #0
 8011504:	d1d9      	bne.n	80114ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801150a:	2b00      	cmp	r3, #0
 801150c:	d013      	beq.n	8011536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011512:	4a7d      	ldr	r2, [pc, #500]	; (8011708 <HAL_UART_IRQHandler+0x3dc>)
 8011514:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801151a:	4618      	mov	r0, r3
 801151c:	f7fa fbaa 	bl	800bc74 <HAL_DMA_Abort_IT>
 8011520:	4603      	mov	r3, r0
 8011522:	2b00      	cmp	r3, #0
 8011524:	d016      	beq.n	8011554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801152a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011530:	4610      	mov	r0, r2
 8011532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011534:	e00e      	b.n	8011554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f000 f9ae 	bl	8011898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801153c:	e00a      	b.n	8011554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f000 f9aa 	bl	8011898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011544:	e006      	b.n	8011554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f000 f9a6 	bl	8011898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2200      	movs	r2, #0
 8011550:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8011552:	e170      	b.n	8011836 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011554:	bf00      	nop
    return;
 8011556:	e16e      	b.n	8011836 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801155c:	2b01      	cmp	r3, #1
 801155e:	f040 814a 	bne.w	80117f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8011562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011566:	f003 0310 	and.w	r3, r3, #16
 801156a:	2b00      	cmp	r3, #0
 801156c:	f000 8143 	beq.w	80117f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8011570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011574:	f003 0310 	and.w	r3, r3, #16
 8011578:	2b00      	cmp	r3, #0
 801157a:	f000 813c 	beq.w	80117f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801157e:	2300      	movs	r3, #0
 8011580:	60bb      	str	r3, [r7, #8]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	60bb      	str	r3, [r7, #8]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	685b      	ldr	r3, [r3, #4]
 8011590:	60bb      	str	r3, [r7, #8]
 8011592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	695b      	ldr	r3, [r3, #20]
 801159a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801159e:	2b40      	cmp	r3, #64	; 0x40
 80115a0:	f040 80b4 	bne.w	801170c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	685b      	ldr	r3, [r3, #4]
 80115ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80115b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	f000 8140 	beq.w	801183a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80115be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80115c2:	429a      	cmp	r2, r3
 80115c4:	f080 8139 	bcs.w	801183a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80115ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115d4:	69db      	ldr	r3, [r3, #28]
 80115d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80115da:	f000 8088 	beq.w	80116ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	330c      	adds	r3, #12
 80115e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80115ec:	e853 3f00 	ldrex	r3, [r3]
 80115f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80115f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80115f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80115fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	330c      	adds	r3, #12
 8011606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801160a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801160e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801161a:	e841 2300 	strex	r3, r2, [r1]
 801161e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011626:	2b00      	cmp	r3, #0
 8011628:	d1d9      	bne.n	80115de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	3314      	adds	r3, #20
 8011630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011634:	e853 3f00 	ldrex	r3, [r3]
 8011638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801163a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801163c:	f023 0301 	bic.w	r3, r3, #1
 8011640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	3314      	adds	r3, #20
 801164a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801164e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801165a:	e841 2300 	strex	r3, r2, [r1]
 801165e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011662:	2b00      	cmp	r3, #0
 8011664:	d1e1      	bne.n	801162a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	3314      	adds	r3, #20
 801166c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801166e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011670:	e853 3f00 	ldrex	r3, [r3]
 8011674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801167c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	3314      	adds	r3, #20
 8011686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801168a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801168c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801168e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011692:	e841 2300 	strex	r3, r2, [r1]
 8011696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801169a:	2b00      	cmp	r3, #0
 801169c:	d1e3      	bne.n	8011666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2220      	movs	r2, #32
 80116a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2200      	movs	r2, #0
 80116aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	330c      	adds	r3, #12
 80116b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116b6:	e853 3f00 	ldrex	r3, [r3]
 80116ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80116bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116be:	f023 0310 	bic.w	r3, r3, #16
 80116c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	330c      	adds	r3, #12
 80116cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80116d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80116d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80116d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80116d8:	e841 2300 	strex	r3, r2, [r1]
 80116dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80116de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d1e3      	bne.n	80116ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7fa fa53 	bl	800bb94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	1ad3      	subs	r3, r2, r3
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	4619      	mov	r1, r3
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 f8d4 	bl	80118ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011704:	e099      	b.n	801183a <HAL_UART_IRQHandler+0x50e>
 8011706:	bf00      	nop
 8011708:	08011db7 	.word	0x08011db7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011714:	b29b      	uxth	r3, r3
 8011716:	1ad3      	subs	r3, r2, r3
 8011718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011720:	b29b      	uxth	r3, r3
 8011722:	2b00      	cmp	r3, #0
 8011724:	f000 808b 	beq.w	801183e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8011728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801172c:	2b00      	cmp	r3, #0
 801172e:	f000 8086 	beq.w	801183e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	330c      	adds	r3, #12
 8011738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801173a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173c:	e853 3f00 	ldrex	r3, [r3]
 8011740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	330c      	adds	r3, #12
 8011752:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011756:	647a      	str	r2, [r7, #68]	; 0x44
 8011758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801175a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801175c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801175e:	e841 2300 	strex	r3, r2, [r1]
 8011762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011766:	2b00      	cmp	r3, #0
 8011768:	d1e3      	bne.n	8011732 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	3314      	adds	r3, #20
 8011770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011774:	e853 3f00 	ldrex	r3, [r3]
 8011778:	623b      	str	r3, [r7, #32]
   return(result);
 801177a:	6a3b      	ldr	r3, [r7, #32]
 801177c:	f023 0301 	bic.w	r3, r3, #1
 8011780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	3314      	adds	r3, #20
 801178a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801178e:	633a      	str	r2, [r7, #48]	; 0x30
 8011790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011796:	e841 2300 	strex	r3, r2, [r1]
 801179a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d1e3      	bne.n	801176a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2220      	movs	r2, #32
 80117a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	2200      	movs	r2, #0
 80117ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	330c      	adds	r3, #12
 80117b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117b8:	693b      	ldr	r3, [r7, #16]
 80117ba:	e853 3f00 	ldrex	r3, [r3]
 80117be:	60fb      	str	r3, [r7, #12]
   return(result);
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	f023 0310 	bic.w	r3, r3, #16
 80117c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	330c      	adds	r3, #12
 80117d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80117d4:	61fa      	str	r2, [r7, #28]
 80117d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117d8:	69b9      	ldr	r1, [r7, #24]
 80117da:	69fa      	ldr	r2, [r7, #28]
 80117dc:	e841 2300 	strex	r3, r2, [r1]
 80117e0:	617b      	str	r3, [r7, #20]
   return(result);
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d1e3      	bne.n	80117b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80117e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80117ec:	4619      	mov	r1, r3
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f000 f85c 	bl	80118ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80117f4:	e023      	b.n	801183e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80117f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d009      	beq.n	8011816 <HAL_UART_IRQHandler+0x4ea>
 8011802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801180a:	2b00      	cmp	r3, #0
 801180c:	d003      	beq.n	8011816 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f000 fae5 	bl	8011dde <UART_Transmit_IT>
    return;
 8011814:	e014      	b.n	8011840 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801181a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801181e:	2b00      	cmp	r3, #0
 8011820:	d00e      	beq.n	8011840 <HAL_UART_IRQHandler+0x514>
 8011822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801182a:	2b00      	cmp	r3, #0
 801182c:	d008      	beq.n	8011840 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f000 fb25 	bl	8011e7e <UART_EndTransmit_IT>
    return;
 8011834:	e004      	b.n	8011840 <HAL_UART_IRQHandler+0x514>
    return;
 8011836:	bf00      	nop
 8011838:	e002      	b.n	8011840 <HAL_UART_IRQHandler+0x514>
      return;
 801183a:	bf00      	nop
 801183c:	e000      	b.n	8011840 <HAL_UART_IRQHandler+0x514>
      return;
 801183e:	bf00      	nop
  }
}
 8011840:	37e8      	adds	r7, #232	; 0xe8
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
 8011846:	bf00      	nop

08011848 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011848:	b480      	push	{r7}
 801184a:	b083      	sub	sp, #12
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011850:	bf00      	nop
 8011852:	370c      	adds	r7, #12
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr

0801185c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801185c:	b480      	push	{r7}
 801185e:	b083      	sub	sp, #12
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8011864:	bf00      	nop
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr

08011870 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011870:	b480      	push	{r7}
 8011872:	b083      	sub	sp, #12
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8011878:	bf00      	nop
 801187a:	370c      	adds	r7, #12
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr

08011884 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011884:	b480      	push	{r7}
 8011886:	b083      	sub	sp, #12
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801188c:	bf00      	nop
 801188e:	370c      	adds	r7, #12
 8011890:	46bd      	mov	sp, r7
 8011892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011896:	4770      	bx	lr

08011898 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011898:	b480      	push	{r7}
 801189a:	b083      	sub	sp, #12
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80118a0:	bf00      	nop
 80118a2:	370c      	adds	r7, #12
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr

080118ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b083      	sub	sp, #12
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	460b      	mov	r3, r1
 80118b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80118b8:	bf00      	nop
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr

080118c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b090      	sub	sp, #64	; 0x40
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d137      	bne.n	8011950 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80118e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118e2:	2200      	movs	r2, #0
 80118e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80118e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	3314      	adds	r3, #20
 80118ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f0:	e853 3f00 	ldrex	r3, [r3]
 80118f4:	623b      	str	r3, [r7, #32]
   return(result);
 80118f6:	6a3b      	ldr	r3, [r7, #32]
 80118f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80118fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80118fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	3314      	adds	r3, #20
 8011904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011906:	633a      	str	r2, [r7, #48]	; 0x30
 8011908:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801190a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801190c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801190e:	e841 2300 	strex	r3, r2, [r1]
 8011912:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011916:	2b00      	cmp	r3, #0
 8011918:	d1e5      	bne.n	80118e6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801191a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	330c      	adds	r3, #12
 8011920:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	e853 3f00 	ldrex	r3, [r3]
 8011928:	60fb      	str	r3, [r7, #12]
   return(result);
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011930:	637b      	str	r3, [r7, #52]	; 0x34
 8011932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	330c      	adds	r3, #12
 8011938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801193a:	61fa      	str	r2, [r7, #28]
 801193c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801193e:	69b9      	ldr	r1, [r7, #24]
 8011940:	69fa      	ldr	r2, [r7, #28]
 8011942:	e841 2300 	strex	r3, r2, [r1]
 8011946:	617b      	str	r3, [r7, #20]
   return(result);
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d1e5      	bne.n	801191a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801194e:	e002      	b.n	8011956 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8011950:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011952:	f7ff ff79 	bl	8011848 <HAL_UART_TxCpltCallback>
}
 8011956:	bf00      	nop
 8011958:	3740      	adds	r7, #64	; 0x40
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}

0801195e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801195e:	b580      	push	{r7, lr}
 8011960:	b084      	sub	sp, #16
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801196a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801196c:	68f8      	ldr	r0, [r7, #12]
 801196e:	f7ff ff75 	bl	801185c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011972:	bf00      	nop
 8011974:	3710      	adds	r7, #16
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}

0801197a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801197a:	b580      	push	{r7, lr}
 801197c:	b09c      	sub	sp, #112	; 0x70
 801197e:	af00      	add	r7, sp, #0
 8011980:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011986:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011992:	2b00      	cmp	r3, #0
 8011994:	d172      	bne.n	8011a7c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8011996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011998:	2200      	movs	r2, #0
 801199a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801199c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	330c      	adds	r3, #12
 80119a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119a6:	e853 3f00 	ldrex	r3, [r3]
 80119aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80119ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80119b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80119b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	330c      	adds	r3, #12
 80119ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80119bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80119be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80119c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80119c4:	e841 2300 	strex	r3, r2, [r1]
 80119c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80119ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d1e5      	bne.n	801199c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	3314      	adds	r3, #20
 80119d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119da:	e853 3f00 	ldrex	r3, [r3]
 80119de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80119e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119e2:	f023 0301 	bic.w	r3, r3, #1
 80119e6:	667b      	str	r3, [r7, #100]	; 0x64
 80119e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	3314      	adds	r3, #20
 80119ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80119f0:	647a      	str	r2, [r7, #68]	; 0x44
 80119f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80119f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119f8:	e841 2300 	strex	r3, r2, [r1]
 80119fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80119fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d1e5      	bne.n	80119d0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	3314      	adds	r3, #20
 8011a0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0e:	e853 3f00 	ldrex	r3, [r3]
 8011a12:	623b      	str	r3, [r7, #32]
   return(result);
 8011a14:	6a3b      	ldr	r3, [r7, #32]
 8011a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a1a:	663b      	str	r3, [r7, #96]	; 0x60
 8011a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	3314      	adds	r3, #20
 8011a22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a24:	633a      	str	r2, [r7, #48]	; 0x30
 8011a26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a2c:	e841 2300 	strex	r3, r2, [r1]
 8011a30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d1e5      	bne.n	8011a04 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a3a:	2220      	movs	r2, #32
 8011a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a44:	2b01      	cmp	r3, #1
 8011a46:	d119      	bne.n	8011a7c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	330c      	adds	r3, #12
 8011a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	e853 3f00 	ldrex	r3, [r3]
 8011a56:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	f023 0310 	bic.w	r3, r3, #16
 8011a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	330c      	adds	r3, #12
 8011a66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011a68:	61fa      	str	r2, [r7, #28]
 8011a6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a6c:	69b9      	ldr	r1, [r7, #24]
 8011a6e:	69fa      	ldr	r2, [r7, #28]
 8011a70:	e841 2300 	strex	r3, r2, [r1]
 8011a74:	617b      	str	r3, [r7, #20]
   return(result);
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d1e5      	bne.n	8011a48 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a80:	2b01      	cmp	r3, #1
 8011a82:	d106      	bne.n	8011a92 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011a88:	4619      	mov	r1, r3
 8011a8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011a8c:	f7ff ff0e 	bl	80118ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011a90:	e002      	b.n	8011a98 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8011a92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011a94:	f7ff feec 	bl	8011870 <HAL_UART_RxCpltCallback>
}
 8011a98:	bf00      	nop
 8011a9a:	3770      	adds	r7, #112	; 0x70
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011aac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ab2:	2b01      	cmp	r3, #1
 8011ab4:	d108      	bne.n	8011ac8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011aba:	085b      	lsrs	r3, r3, #1
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	4619      	mov	r1, r3
 8011ac0:	68f8      	ldr	r0, [r7, #12]
 8011ac2:	f7ff fef3 	bl	80118ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011ac6:	e002      	b.n	8011ace <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8011ac8:	68f8      	ldr	r0, [r7, #12]
 8011aca:	f7ff fedb 	bl	8011884 <HAL_UART_RxHalfCpltCallback>
}
 8011ace:	bf00      	nop
 8011ad0:	3710      	adds	r7, #16
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}

08011ad6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011ad6:	b580      	push	{r7, lr}
 8011ad8:	b084      	sub	sp, #16
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ae6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	695b      	ldr	r3, [r3, #20]
 8011aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011af2:	2b80      	cmp	r3, #128	; 0x80
 8011af4:	bf0c      	ite	eq
 8011af6:	2301      	moveq	r3, #1
 8011af8:	2300      	movne	r3, #0
 8011afa:	b2db      	uxtb	r3, r3
 8011afc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b04:	b2db      	uxtb	r3, r3
 8011b06:	2b21      	cmp	r3, #33	; 0x21
 8011b08:	d108      	bne.n	8011b1c <UART_DMAError+0x46>
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d005      	beq.n	8011b1c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	2200      	movs	r2, #0
 8011b14:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8011b16:	68b8      	ldr	r0, [r7, #8]
 8011b18:	f000 f8c2 	bl	8011ca0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	695b      	ldr	r3, [r3, #20]
 8011b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b26:	2b40      	cmp	r3, #64	; 0x40
 8011b28:	bf0c      	ite	eq
 8011b2a:	2301      	moveq	r3, #1
 8011b2c:	2300      	movne	r3, #0
 8011b2e:	b2db      	uxtb	r3, r3
 8011b30:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8011b32:	68bb      	ldr	r3, [r7, #8]
 8011b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	2b22      	cmp	r3, #34	; 0x22
 8011b3c:	d108      	bne.n	8011b50 <UART_DMAError+0x7a>
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d005      	beq.n	8011b50 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	2200      	movs	r2, #0
 8011b48:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8011b4a:	68b8      	ldr	r0, [r7, #8]
 8011b4c:	f000 f8d0 	bl	8011cf0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b54:	f043 0210 	orr.w	r2, r3, #16
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011b5c:	68b8      	ldr	r0, [r7, #8]
 8011b5e:	f7ff fe9b 	bl	8011898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b62:	bf00      	nop
 8011b64:	3710      	adds	r7, #16
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
	...

08011b6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b098      	sub	sp, #96	; 0x60
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	4613      	mov	r3, r2
 8011b78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8011b7a:	68ba      	ldr	r2, [r7, #8]
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	88fa      	ldrh	r2, [r7, #6]
 8011b84:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	2222      	movs	r2, #34	; 0x22
 8011b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b98:	4a3e      	ldr	r2, [pc, #248]	; (8011c94 <UART_Start_Receive_DMA+0x128>)
 8011b9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ba0:	4a3d      	ldr	r2, [pc, #244]	; (8011c98 <UART_Start_Receive_DMA+0x12c>)
 8011ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ba8:	4a3c      	ldr	r2, [pc, #240]	; (8011c9c <UART_Start_Receive_DMA+0x130>)
 8011baa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8011bb4:	f107 0308 	add.w	r3, r7, #8
 8011bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	3304      	adds	r3, #4
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bc8:	681a      	ldr	r2, [r3, #0]
 8011bca:	88fb      	ldrh	r3, [r7, #6]
 8011bcc:	f7f9 ff8a 	bl	800bae4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	613b      	str	r3, [r7, #16]
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	613b      	str	r3, [r7, #16]
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	613b      	str	r3, [r7, #16]
 8011be4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2200      	movs	r2, #0
 8011bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	330c      	adds	r3, #12
 8011bf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bf8:	e853 3f00 	ldrex	r3, [r3]
 8011bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c04:	65bb      	str	r3, [r7, #88]	; 0x58
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	330c      	adds	r3, #12
 8011c0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c0e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011c10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011c14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c16:	e841 2300 	strex	r3, r2, [r1]
 8011c1a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d1e5      	bne.n	8011bee <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	3314      	adds	r3, #20
 8011c28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2c:	e853 3f00 	ldrex	r3, [r3]
 8011c30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c34:	f043 0301 	orr.w	r3, r3, #1
 8011c38:	657b      	str	r3, [r7, #84]	; 0x54
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	3314      	adds	r3, #20
 8011c40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c42:	63ba      	str	r2, [r7, #56]	; 0x38
 8011c44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c4a:	e841 2300 	strex	r3, r2, [r1]
 8011c4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d1e5      	bne.n	8011c22 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	3314      	adds	r3, #20
 8011c5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c5e:	69bb      	ldr	r3, [r7, #24]
 8011c60:	e853 3f00 	ldrex	r3, [r3]
 8011c64:	617b      	str	r3, [r7, #20]
   return(result);
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c6c:	653b      	str	r3, [r7, #80]	; 0x50
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	3314      	adds	r3, #20
 8011c74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011c76:	627a      	str	r2, [r7, #36]	; 0x24
 8011c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c7a:	6a39      	ldr	r1, [r7, #32]
 8011c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c7e:	e841 2300 	strex	r3, r2, [r1]
 8011c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c84:	69fb      	ldr	r3, [r7, #28]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d1e5      	bne.n	8011c56 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8011c8a:	2300      	movs	r3, #0
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3760      	adds	r7, #96	; 0x60
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	0801197b 	.word	0x0801197b
 8011c98:	08011aa1 	.word	0x08011aa1
 8011c9c:	08011ad7 	.word	0x08011ad7

08011ca0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b089      	sub	sp, #36	; 0x24
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	330c      	adds	r3, #12
 8011cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	e853 3f00 	ldrex	r3, [r3]
 8011cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011cbe:	61fb      	str	r3, [r7, #28]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	330c      	adds	r3, #12
 8011cc6:	69fa      	ldr	r2, [r7, #28]
 8011cc8:	61ba      	str	r2, [r7, #24]
 8011cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ccc:	6979      	ldr	r1, [r7, #20]
 8011cce:	69ba      	ldr	r2, [r7, #24]
 8011cd0:	e841 2300 	strex	r3, r2, [r1]
 8011cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d1e5      	bne.n	8011ca8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2220      	movs	r2, #32
 8011ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8011ce4:	bf00      	nop
 8011ce6:	3724      	adds	r7, #36	; 0x24
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b095      	sub	sp, #84	; 0x54
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	330c      	adds	r3, #12
 8011cfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d02:	e853 3f00 	ldrex	r3, [r3]
 8011d06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	330c      	adds	r3, #12
 8011d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011d18:	643a      	str	r2, [r7, #64]	; 0x40
 8011d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d20:	e841 2300 	strex	r3, r2, [r1]
 8011d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1e5      	bne.n	8011cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	3314      	adds	r3, #20
 8011d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d34:	6a3b      	ldr	r3, [r7, #32]
 8011d36:	e853 3f00 	ldrex	r3, [r3]
 8011d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	f023 0301 	bic.w	r3, r3, #1
 8011d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	3314      	adds	r3, #20
 8011d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d54:	e841 2300 	strex	r3, r2, [r1]
 8011d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d1e5      	bne.n	8011d2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d64:	2b01      	cmp	r3, #1
 8011d66:	d119      	bne.n	8011d9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	330c      	adds	r3, #12
 8011d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	e853 3f00 	ldrex	r3, [r3]
 8011d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	f023 0310 	bic.w	r3, r3, #16
 8011d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	330c      	adds	r3, #12
 8011d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d88:	61ba      	str	r2, [r7, #24]
 8011d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d8c:	6979      	ldr	r1, [r7, #20]
 8011d8e:	69ba      	ldr	r2, [r7, #24]
 8011d90:	e841 2300 	strex	r3, r2, [r1]
 8011d94:	613b      	str	r3, [r7, #16]
   return(result);
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d1e5      	bne.n	8011d68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2220      	movs	r2, #32
 8011da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2200      	movs	r2, #0
 8011da8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011daa:	bf00      	nop
 8011dac:	3754      	adds	r7, #84	; 0x54
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr

08011db6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011db6:	b580      	push	{r7, lr}
 8011db8:	b084      	sub	sp, #16
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011dd0:	68f8      	ldr	r0, [r7, #12]
 8011dd2:	f7ff fd61 	bl	8011898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011dd6:	bf00      	nop
 8011dd8:	3710      	adds	r7, #16
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}

08011dde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011dde:	b480      	push	{r7}
 8011de0:	b085      	sub	sp, #20
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011dec:	b2db      	uxtb	r3, r3
 8011dee:	2b21      	cmp	r3, #33	; 0x21
 8011df0:	d13e      	bne.n	8011e70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	689b      	ldr	r3, [r3, #8]
 8011df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011dfa:	d114      	bne.n	8011e26 <UART_Transmit_IT+0x48>
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	691b      	ldr	r3, [r3, #16]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d110      	bne.n	8011e26 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6a1b      	ldr	r3, [r3, #32]
 8011e08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	881b      	ldrh	r3, [r3, #0]
 8011e0e:	461a      	mov	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011e18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6a1b      	ldr	r3, [r3, #32]
 8011e1e:	1c9a      	adds	r2, r3, #2
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	621a      	str	r2, [r3, #32]
 8011e24:	e008      	b.n	8011e38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6a1b      	ldr	r3, [r3, #32]
 8011e2a:	1c59      	adds	r1, r3, #1
 8011e2c:	687a      	ldr	r2, [r7, #4]
 8011e2e:	6211      	str	r1, [r2, #32]
 8011e30:	781a      	ldrb	r2, [r3, #0]
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011e3c:	b29b      	uxth	r3, r3
 8011e3e:	3b01      	subs	r3, #1
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	687a      	ldr	r2, [r7, #4]
 8011e44:	4619      	mov	r1, r3
 8011e46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d10f      	bne.n	8011e6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	68da      	ldr	r2, [r3, #12]
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011e5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	68da      	ldr	r2, [r3, #12]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011e6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	e000      	b.n	8011e72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011e70:	2302      	movs	r3, #2
  }
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3714      	adds	r7, #20
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr

08011e7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b082      	sub	sp, #8
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	68da      	ldr	r2, [r3, #12]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011e94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2220      	movs	r2, #32
 8011e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f7ff fcd2 	bl	8011848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011ea4:	2300      	movs	r3, #0
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}

08011eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b08c      	sub	sp, #48	; 0x30
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	2b22      	cmp	r3, #34	; 0x22
 8011ec0:	f040 80ab 	bne.w	801201a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ecc:	d117      	bne.n	8011efe <UART_Receive_IT+0x50>
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	691b      	ldr	r3, [r3, #16]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d113      	bne.n	8011efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ede:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	b29b      	uxth	r3, r3
 8011ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ef6:	1c9a      	adds	r2, r3, #2
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	629a      	str	r2, [r3, #40]	; 0x28
 8011efc:	e026      	b.n	8011f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011f04:	2300      	movs	r3, #0
 8011f06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	689b      	ldr	r3, [r3, #8]
 8011f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f10:	d007      	beq.n	8011f22 <UART_Receive_IT+0x74>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	689b      	ldr	r3, [r3, #8]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d10a      	bne.n	8011f30 <UART_Receive_IT+0x82>
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	691b      	ldr	r3, [r3, #16]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d106      	bne.n	8011f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	b2da      	uxtb	r2, r3
 8011f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2c:	701a      	strb	r2, [r3, #0]
 8011f2e:	e008      	b.n	8011f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	685b      	ldr	r3, [r3, #4]
 8011f36:	b2db      	uxtb	r3, r3
 8011f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f3c:	b2da      	uxtb	r2, r3
 8011f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f46:	1c5a      	adds	r2, r3, #1
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	3b01      	subs	r3, #1
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	4619      	mov	r1, r3
 8011f5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d15a      	bne.n	8012016 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	68da      	ldr	r2, [r3, #12]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	f022 0220 	bic.w	r2, r2, #32
 8011f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	68da      	ldr	r2, [r3, #12]
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	695a      	ldr	r2, [r3, #20]
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f022 0201 	bic.w	r2, r2, #1
 8011f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2220      	movs	r2, #32
 8011f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f9c:	2b01      	cmp	r3, #1
 8011f9e:	d135      	bne.n	801200c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	330c      	adds	r3, #12
 8011fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	e853 3f00 	ldrex	r3, [r3]
 8011fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	f023 0310 	bic.w	r3, r3, #16
 8011fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	330c      	adds	r3, #12
 8011fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fc6:	623a      	str	r2, [r7, #32]
 8011fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fca:	69f9      	ldr	r1, [r7, #28]
 8011fcc:	6a3a      	ldr	r2, [r7, #32]
 8011fce:	e841 2300 	strex	r3, r2, [r1]
 8011fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8011fd4:	69bb      	ldr	r3, [r7, #24]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d1e5      	bne.n	8011fa6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	f003 0310 	and.w	r3, r3, #16
 8011fe4:	2b10      	cmp	r3, #16
 8011fe6:	d10a      	bne.n	8011ffe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011fe8:	2300      	movs	r3, #0
 8011fea:	60fb      	str	r3, [r7, #12]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	60fb      	str	r3, [r7, #12]
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	60fb      	str	r3, [r7, #12]
 8011ffc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8012002:	4619      	mov	r1, r3
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f7ff fc51 	bl	80118ac <HAL_UARTEx_RxEventCallback>
 801200a:	e002      	b.n	8012012 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f7ff fc2f 	bl	8011870 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8012012:	2300      	movs	r3, #0
 8012014:	e002      	b.n	801201c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8012016:	2300      	movs	r3, #0
 8012018:	e000      	b.n	801201c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801201a:	2302      	movs	r3, #2
  }
}
 801201c:	4618      	mov	r0, r3
 801201e:	3730      	adds	r7, #48	; 0x30
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012028:	b0c0      	sub	sp, #256	; 0x100
 801202a:	af00      	add	r7, sp, #0
 801202c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	691b      	ldr	r3, [r3, #16]
 8012038:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012040:	68d9      	ldr	r1, [r3, #12]
 8012042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	ea40 0301 	orr.w	r3, r0, r1
 801204c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012052:	689a      	ldr	r2, [r3, #8]
 8012054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012058:	691b      	ldr	r3, [r3, #16]
 801205a:	431a      	orrs	r2, r3
 801205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012060:	695b      	ldr	r3, [r3, #20]
 8012062:	431a      	orrs	r2, r3
 8012064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012068:	69db      	ldr	r3, [r3, #28]
 801206a:	4313      	orrs	r3, r2
 801206c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8012070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801207c:	f021 010c 	bic.w	r1, r1, #12
 8012080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801208a:	430b      	orrs	r3, r1
 801208c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801208e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	695b      	ldr	r3, [r3, #20]
 8012096:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801209a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801209e:	6999      	ldr	r1, [r3, #24]
 80120a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	ea40 0301 	orr.w	r3, r0, r1
 80120aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80120ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	4b8f      	ldr	r3, [pc, #572]	; (80122f0 <UART_SetConfig+0x2cc>)
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d005      	beq.n	80120c4 <UART_SetConfig+0xa0>
 80120b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120bc:	681a      	ldr	r2, [r3, #0]
 80120be:	4b8d      	ldr	r3, [pc, #564]	; (80122f4 <UART_SetConfig+0x2d0>)
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d104      	bne.n	80120ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80120c4:	f7fd ffa0 	bl	8010008 <HAL_RCC_GetPCLK2Freq>
 80120c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80120cc:	e003      	b.n	80120d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80120ce:	f7fd ff87 	bl	800ffe0 <HAL_RCC_GetPCLK1Freq>
 80120d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80120d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80120da:	69db      	ldr	r3, [r3, #28]
 80120dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80120e0:	f040 810c 	bne.w	80122fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80120e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80120e8:	2200      	movs	r2, #0
 80120ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80120ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80120f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80120f6:	4622      	mov	r2, r4
 80120f8:	462b      	mov	r3, r5
 80120fa:	1891      	adds	r1, r2, r2
 80120fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80120fe:	415b      	adcs	r3, r3
 8012100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012102:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012106:	4621      	mov	r1, r4
 8012108:	eb12 0801 	adds.w	r8, r2, r1
 801210c:	4629      	mov	r1, r5
 801210e:	eb43 0901 	adc.w	r9, r3, r1
 8012112:	f04f 0200 	mov.w	r2, #0
 8012116:	f04f 0300 	mov.w	r3, #0
 801211a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801211e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012126:	4690      	mov	r8, r2
 8012128:	4699      	mov	r9, r3
 801212a:	4623      	mov	r3, r4
 801212c:	eb18 0303 	adds.w	r3, r8, r3
 8012130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012134:	462b      	mov	r3, r5
 8012136:	eb49 0303 	adc.w	r3, r9, r3
 801213a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801213e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	2200      	movs	r2, #0
 8012146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801214a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801214e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8012152:	460b      	mov	r3, r1
 8012154:	18db      	adds	r3, r3, r3
 8012156:	653b      	str	r3, [r7, #80]	; 0x50
 8012158:	4613      	mov	r3, r2
 801215a:	eb42 0303 	adc.w	r3, r2, r3
 801215e:	657b      	str	r3, [r7, #84]	; 0x54
 8012160:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012164:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8012168:	f7ee fda6 	bl	8000cb8 <__aeabi_uldivmod>
 801216c:	4602      	mov	r2, r0
 801216e:	460b      	mov	r3, r1
 8012170:	4b61      	ldr	r3, [pc, #388]	; (80122f8 <UART_SetConfig+0x2d4>)
 8012172:	fba3 2302 	umull	r2, r3, r3, r2
 8012176:	095b      	lsrs	r3, r3, #5
 8012178:	011c      	lsls	r4, r3, #4
 801217a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801217e:	2200      	movs	r2, #0
 8012180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012184:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8012188:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801218c:	4642      	mov	r2, r8
 801218e:	464b      	mov	r3, r9
 8012190:	1891      	adds	r1, r2, r2
 8012192:	64b9      	str	r1, [r7, #72]	; 0x48
 8012194:	415b      	adcs	r3, r3
 8012196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012198:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801219c:	4641      	mov	r1, r8
 801219e:	eb12 0a01 	adds.w	sl, r2, r1
 80121a2:	4649      	mov	r1, r9
 80121a4:	eb43 0b01 	adc.w	fp, r3, r1
 80121a8:	f04f 0200 	mov.w	r2, #0
 80121ac:	f04f 0300 	mov.w	r3, #0
 80121b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80121b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80121b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80121bc:	4692      	mov	sl, r2
 80121be:	469b      	mov	fp, r3
 80121c0:	4643      	mov	r3, r8
 80121c2:	eb1a 0303 	adds.w	r3, sl, r3
 80121c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80121ca:	464b      	mov	r3, r9
 80121cc:	eb4b 0303 	adc.w	r3, fp, r3
 80121d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80121d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80121d8:	685b      	ldr	r3, [r3, #4]
 80121da:	2200      	movs	r2, #0
 80121dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80121e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80121e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80121e8:	460b      	mov	r3, r1
 80121ea:	18db      	adds	r3, r3, r3
 80121ec:	643b      	str	r3, [r7, #64]	; 0x40
 80121ee:	4613      	mov	r3, r2
 80121f0:	eb42 0303 	adc.w	r3, r2, r3
 80121f4:	647b      	str	r3, [r7, #68]	; 0x44
 80121f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80121fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80121fe:	f7ee fd5b 	bl	8000cb8 <__aeabi_uldivmod>
 8012202:	4602      	mov	r2, r0
 8012204:	460b      	mov	r3, r1
 8012206:	4611      	mov	r1, r2
 8012208:	4b3b      	ldr	r3, [pc, #236]	; (80122f8 <UART_SetConfig+0x2d4>)
 801220a:	fba3 2301 	umull	r2, r3, r3, r1
 801220e:	095b      	lsrs	r3, r3, #5
 8012210:	2264      	movs	r2, #100	; 0x64
 8012212:	fb02 f303 	mul.w	r3, r2, r3
 8012216:	1acb      	subs	r3, r1, r3
 8012218:	00db      	lsls	r3, r3, #3
 801221a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801221e:	4b36      	ldr	r3, [pc, #216]	; (80122f8 <UART_SetConfig+0x2d4>)
 8012220:	fba3 2302 	umull	r2, r3, r3, r2
 8012224:	095b      	lsrs	r3, r3, #5
 8012226:	005b      	lsls	r3, r3, #1
 8012228:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801222c:	441c      	add	r4, r3
 801222e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012232:	2200      	movs	r2, #0
 8012234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012238:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801223c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8012240:	4642      	mov	r2, r8
 8012242:	464b      	mov	r3, r9
 8012244:	1891      	adds	r1, r2, r2
 8012246:	63b9      	str	r1, [r7, #56]	; 0x38
 8012248:	415b      	adcs	r3, r3
 801224a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801224c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012250:	4641      	mov	r1, r8
 8012252:	1851      	adds	r1, r2, r1
 8012254:	6339      	str	r1, [r7, #48]	; 0x30
 8012256:	4649      	mov	r1, r9
 8012258:	414b      	adcs	r3, r1
 801225a:	637b      	str	r3, [r7, #52]	; 0x34
 801225c:	f04f 0200 	mov.w	r2, #0
 8012260:	f04f 0300 	mov.w	r3, #0
 8012264:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8012268:	4659      	mov	r1, fp
 801226a:	00cb      	lsls	r3, r1, #3
 801226c:	4651      	mov	r1, sl
 801226e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012272:	4651      	mov	r1, sl
 8012274:	00ca      	lsls	r2, r1, #3
 8012276:	4610      	mov	r0, r2
 8012278:	4619      	mov	r1, r3
 801227a:	4603      	mov	r3, r0
 801227c:	4642      	mov	r2, r8
 801227e:	189b      	adds	r3, r3, r2
 8012280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012284:	464b      	mov	r3, r9
 8012286:	460a      	mov	r2, r1
 8012288:	eb42 0303 	adc.w	r3, r2, r3
 801228c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012294:	685b      	ldr	r3, [r3, #4]
 8012296:	2200      	movs	r2, #0
 8012298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801229c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80122a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80122a4:	460b      	mov	r3, r1
 80122a6:	18db      	adds	r3, r3, r3
 80122a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80122aa:	4613      	mov	r3, r2
 80122ac:	eb42 0303 	adc.w	r3, r2, r3
 80122b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80122b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80122ba:	f7ee fcfd 	bl	8000cb8 <__aeabi_uldivmod>
 80122be:	4602      	mov	r2, r0
 80122c0:	460b      	mov	r3, r1
 80122c2:	4b0d      	ldr	r3, [pc, #52]	; (80122f8 <UART_SetConfig+0x2d4>)
 80122c4:	fba3 1302 	umull	r1, r3, r3, r2
 80122c8:	095b      	lsrs	r3, r3, #5
 80122ca:	2164      	movs	r1, #100	; 0x64
 80122cc:	fb01 f303 	mul.w	r3, r1, r3
 80122d0:	1ad3      	subs	r3, r2, r3
 80122d2:	00db      	lsls	r3, r3, #3
 80122d4:	3332      	adds	r3, #50	; 0x32
 80122d6:	4a08      	ldr	r2, [pc, #32]	; (80122f8 <UART_SetConfig+0x2d4>)
 80122d8:	fba2 2303 	umull	r2, r3, r2, r3
 80122dc:	095b      	lsrs	r3, r3, #5
 80122de:	f003 0207 	and.w	r2, r3, #7
 80122e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	4422      	add	r2, r4
 80122ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80122ec:	e105      	b.n	80124fa <UART_SetConfig+0x4d6>
 80122ee:	bf00      	nop
 80122f0:	40011000 	.word	0x40011000
 80122f4:	40011400 	.word	0x40011400
 80122f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80122fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012300:	2200      	movs	r2, #0
 8012302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012306:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801230a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801230e:	4642      	mov	r2, r8
 8012310:	464b      	mov	r3, r9
 8012312:	1891      	adds	r1, r2, r2
 8012314:	6239      	str	r1, [r7, #32]
 8012316:	415b      	adcs	r3, r3
 8012318:	627b      	str	r3, [r7, #36]	; 0x24
 801231a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801231e:	4641      	mov	r1, r8
 8012320:	1854      	adds	r4, r2, r1
 8012322:	4649      	mov	r1, r9
 8012324:	eb43 0501 	adc.w	r5, r3, r1
 8012328:	f04f 0200 	mov.w	r2, #0
 801232c:	f04f 0300 	mov.w	r3, #0
 8012330:	00eb      	lsls	r3, r5, #3
 8012332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012336:	00e2      	lsls	r2, r4, #3
 8012338:	4614      	mov	r4, r2
 801233a:	461d      	mov	r5, r3
 801233c:	4643      	mov	r3, r8
 801233e:	18e3      	adds	r3, r4, r3
 8012340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012344:	464b      	mov	r3, r9
 8012346:	eb45 0303 	adc.w	r3, r5, r3
 801234a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	2200      	movs	r2, #0
 8012356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801235a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801235e:	f04f 0200 	mov.w	r2, #0
 8012362:	f04f 0300 	mov.w	r3, #0
 8012366:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801236a:	4629      	mov	r1, r5
 801236c:	008b      	lsls	r3, r1, #2
 801236e:	4621      	mov	r1, r4
 8012370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012374:	4621      	mov	r1, r4
 8012376:	008a      	lsls	r2, r1, #2
 8012378:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801237c:	f7ee fc9c 	bl	8000cb8 <__aeabi_uldivmod>
 8012380:	4602      	mov	r2, r0
 8012382:	460b      	mov	r3, r1
 8012384:	4b60      	ldr	r3, [pc, #384]	; (8012508 <UART_SetConfig+0x4e4>)
 8012386:	fba3 2302 	umull	r2, r3, r3, r2
 801238a:	095b      	lsrs	r3, r3, #5
 801238c:	011c      	lsls	r4, r3, #4
 801238e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012392:	2200      	movs	r2, #0
 8012394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012398:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801239c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80123a0:	4642      	mov	r2, r8
 80123a2:	464b      	mov	r3, r9
 80123a4:	1891      	adds	r1, r2, r2
 80123a6:	61b9      	str	r1, [r7, #24]
 80123a8:	415b      	adcs	r3, r3
 80123aa:	61fb      	str	r3, [r7, #28]
 80123ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80123b0:	4641      	mov	r1, r8
 80123b2:	1851      	adds	r1, r2, r1
 80123b4:	6139      	str	r1, [r7, #16]
 80123b6:	4649      	mov	r1, r9
 80123b8:	414b      	adcs	r3, r1
 80123ba:	617b      	str	r3, [r7, #20]
 80123bc:	f04f 0200 	mov.w	r2, #0
 80123c0:	f04f 0300 	mov.w	r3, #0
 80123c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80123c8:	4659      	mov	r1, fp
 80123ca:	00cb      	lsls	r3, r1, #3
 80123cc:	4651      	mov	r1, sl
 80123ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80123d2:	4651      	mov	r1, sl
 80123d4:	00ca      	lsls	r2, r1, #3
 80123d6:	4610      	mov	r0, r2
 80123d8:	4619      	mov	r1, r3
 80123da:	4603      	mov	r3, r0
 80123dc:	4642      	mov	r2, r8
 80123de:	189b      	adds	r3, r3, r2
 80123e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80123e4:	464b      	mov	r3, r9
 80123e6:	460a      	mov	r2, r1
 80123e8:	eb42 0303 	adc.w	r3, r2, r3
 80123ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80123f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	2200      	movs	r2, #0
 80123f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80123fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80123fc:	f04f 0200 	mov.w	r2, #0
 8012400:	f04f 0300 	mov.w	r3, #0
 8012404:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8012408:	4649      	mov	r1, r9
 801240a:	008b      	lsls	r3, r1, #2
 801240c:	4641      	mov	r1, r8
 801240e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012412:	4641      	mov	r1, r8
 8012414:	008a      	lsls	r2, r1, #2
 8012416:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801241a:	f7ee fc4d 	bl	8000cb8 <__aeabi_uldivmod>
 801241e:	4602      	mov	r2, r0
 8012420:	460b      	mov	r3, r1
 8012422:	4b39      	ldr	r3, [pc, #228]	; (8012508 <UART_SetConfig+0x4e4>)
 8012424:	fba3 1302 	umull	r1, r3, r3, r2
 8012428:	095b      	lsrs	r3, r3, #5
 801242a:	2164      	movs	r1, #100	; 0x64
 801242c:	fb01 f303 	mul.w	r3, r1, r3
 8012430:	1ad3      	subs	r3, r2, r3
 8012432:	011b      	lsls	r3, r3, #4
 8012434:	3332      	adds	r3, #50	; 0x32
 8012436:	4a34      	ldr	r2, [pc, #208]	; (8012508 <UART_SetConfig+0x4e4>)
 8012438:	fba2 2303 	umull	r2, r3, r2, r3
 801243c:	095b      	lsrs	r3, r3, #5
 801243e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012442:	441c      	add	r4, r3
 8012444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012448:	2200      	movs	r2, #0
 801244a:	673b      	str	r3, [r7, #112]	; 0x70
 801244c:	677a      	str	r2, [r7, #116]	; 0x74
 801244e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8012452:	4642      	mov	r2, r8
 8012454:	464b      	mov	r3, r9
 8012456:	1891      	adds	r1, r2, r2
 8012458:	60b9      	str	r1, [r7, #8]
 801245a:	415b      	adcs	r3, r3
 801245c:	60fb      	str	r3, [r7, #12]
 801245e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012462:	4641      	mov	r1, r8
 8012464:	1851      	adds	r1, r2, r1
 8012466:	6039      	str	r1, [r7, #0]
 8012468:	4649      	mov	r1, r9
 801246a:	414b      	adcs	r3, r1
 801246c:	607b      	str	r3, [r7, #4]
 801246e:	f04f 0200 	mov.w	r2, #0
 8012472:	f04f 0300 	mov.w	r3, #0
 8012476:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801247a:	4659      	mov	r1, fp
 801247c:	00cb      	lsls	r3, r1, #3
 801247e:	4651      	mov	r1, sl
 8012480:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012484:	4651      	mov	r1, sl
 8012486:	00ca      	lsls	r2, r1, #3
 8012488:	4610      	mov	r0, r2
 801248a:	4619      	mov	r1, r3
 801248c:	4603      	mov	r3, r0
 801248e:	4642      	mov	r2, r8
 8012490:	189b      	adds	r3, r3, r2
 8012492:	66bb      	str	r3, [r7, #104]	; 0x68
 8012494:	464b      	mov	r3, r9
 8012496:	460a      	mov	r2, r1
 8012498:	eb42 0303 	adc.w	r3, r2, r3
 801249c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80124a2:	685b      	ldr	r3, [r3, #4]
 80124a4:	2200      	movs	r2, #0
 80124a6:	663b      	str	r3, [r7, #96]	; 0x60
 80124a8:	667a      	str	r2, [r7, #100]	; 0x64
 80124aa:	f04f 0200 	mov.w	r2, #0
 80124ae:	f04f 0300 	mov.w	r3, #0
 80124b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80124b6:	4649      	mov	r1, r9
 80124b8:	008b      	lsls	r3, r1, #2
 80124ba:	4641      	mov	r1, r8
 80124bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80124c0:	4641      	mov	r1, r8
 80124c2:	008a      	lsls	r2, r1, #2
 80124c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80124c8:	f7ee fbf6 	bl	8000cb8 <__aeabi_uldivmod>
 80124cc:	4602      	mov	r2, r0
 80124ce:	460b      	mov	r3, r1
 80124d0:	4b0d      	ldr	r3, [pc, #52]	; (8012508 <UART_SetConfig+0x4e4>)
 80124d2:	fba3 1302 	umull	r1, r3, r3, r2
 80124d6:	095b      	lsrs	r3, r3, #5
 80124d8:	2164      	movs	r1, #100	; 0x64
 80124da:	fb01 f303 	mul.w	r3, r1, r3
 80124de:	1ad3      	subs	r3, r2, r3
 80124e0:	011b      	lsls	r3, r3, #4
 80124e2:	3332      	adds	r3, #50	; 0x32
 80124e4:	4a08      	ldr	r2, [pc, #32]	; (8012508 <UART_SetConfig+0x4e4>)
 80124e6:	fba2 2303 	umull	r2, r3, r2, r3
 80124ea:	095b      	lsrs	r3, r3, #5
 80124ec:	f003 020f 	and.w	r2, r3, #15
 80124f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	4422      	add	r2, r4
 80124f8:	609a      	str	r2, [r3, #8]
}
 80124fa:	bf00      	nop
 80124fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8012500:	46bd      	mov	sp, r7
 8012502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012506:	bf00      	nop
 8012508:	51eb851f 	.word	0x51eb851f

0801250c <atof>:
 801250c:	2100      	movs	r1, #0
 801250e:	f001 bcff 	b.w	8013f10 <strtod>

08012512 <atoi>:
 8012512:	220a      	movs	r2, #10
 8012514:	2100      	movs	r1, #0
 8012516:	f001 bde7 	b.w	80140e8 <strtol>
	...

0801251c <__errno>:
 801251c:	4b01      	ldr	r3, [pc, #4]	; (8012524 <__errno+0x8>)
 801251e:	6818      	ldr	r0, [r3, #0]
 8012520:	4770      	bx	lr
 8012522:	bf00      	nop
 8012524:	20000044 	.word	0x20000044

08012528 <__libc_init_array>:
 8012528:	b570      	push	{r4, r5, r6, lr}
 801252a:	4d0d      	ldr	r5, [pc, #52]	; (8012560 <__libc_init_array+0x38>)
 801252c:	4c0d      	ldr	r4, [pc, #52]	; (8012564 <__libc_init_array+0x3c>)
 801252e:	1b64      	subs	r4, r4, r5
 8012530:	10a4      	asrs	r4, r4, #2
 8012532:	2600      	movs	r6, #0
 8012534:	42a6      	cmp	r6, r4
 8012536:	d109      	bne.n	801254c <__libc_init_array+0x24>
 8012538:	4d0b      	ldr	r5, [pc, #44]	; (8012568 <__libc_init_array+0x40>)
 801253a:	4c0c      	ldr	r4, [pc, #48]	; (801256c <__libc_init_array+0x44>)
 801253c:	f004 fd04 	bl	8016f48 <_init>
 8012540:	1b64      	subs	r4, r4, r5
 8012542:	10a4      	asrs	r4, r4, #2
 8012544:	2600      	movs	r6, #0
 8012546:	42a6      	cmp	r6, r4
 8012548:	d105      	bne.n	8012556 <__libc_init_array+0x2e>
 801254a:	bd70      	pop	{r4, r5, r6, pc}
 801254c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012550:	4798      	blx	r3
 8012552:	3601      	adds	r6, #1
 8012554:	e7ee      	b.n	8012534 <__libc_init_array+0xc>
 8012556:	f855 3b04 	ldr.w	r3, [r5], #4
 801255a:	4798      	blx	r3
 801255c:	3601      	adds	r6, #1
 801255e:	e7f2      	b.n	8012546 <__libc_init_array+0x1e>
 8012560:	0802b098 	.word	0x0802b098
 8012564:	0802b098 	.word	0x0802b098
 8012568:	0802b098 	.word	0x0802b098
 801256c:	0802b09c 	.word	0x0802b09c

08012570 <memset>:
 8012570:	4402      	add	r2, r0
 8012572:	4603      	mov	r3, r0
 8012574:	4293      	cmp	r3, r2
 8012576:	d100      	bne.n	801257a <memset+0xa>
 8012578:	4770      	bx	lr
 801257a:	f803 1b01 	strb.w	r1, [r3], #1
 801257e:	e7f9      	b.n	8012574 <memset+0x4>

08012580 <__cvt>:
 8012580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012584:	ec55 4b10 	vmov	r4, r5, d0
 8012588:	2d00      	cmp	r5, #0
 801258a:	460e      	mov	r6, r1
 801258c:	4619      	mov	r1, r3
 801258e:	462b      	mov	r3, r5
 8012590:	bfbb      	ittet	lt
 8012592:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012596:	461d      	movlt	r5, r3
 8012598:	2300      	movge	r3, #0
 801259a:	232d      	movlt	r3, #45	; 0x2d
 801259c:	700b      	strb	r3, [r1, #0]
 801259e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80125a4:	4691      	mov	r9, r2
 80125a6:	f023 0820 	bic.w	r8, r3, #32
 80125aa:	bfbc      	itt	lt
 80125ac:	4622      	movlt	r2, r4
 80125ae:	4614      	movlt	r4, r2
 80125b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80125b4:	d005      	beq.n	80125c2 <__cvt+0x42>
 80125b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80125ba:	d100      	bne.n	80125be <__cvt+0x3e>
 80125bc:	3601      	adds	r6, #1
 80125be:	2102      	movs	r1, #2
 80125c0:	e000      	b.n	80125c4 <__cvt+0x44>
 80125c2:	2103      	movs	r1, #3
 80125c4:	ab03      	add	r3, sp, #12
 80125c6:	9301      	str	r3, [sp, #4]
 80125c8:	ab02      	add	r3, sp, #8
 80125ca:	9300      	str	r3, [sp, #0]
 80125cc:	ec45 4b10 	vmov	d0, r4, r5
 80125d0:	4653      	mov	r3, sl
 80125d2:	4632      	mov	r2, r6
 80125d4:	f001 fe3c 	bl	8014250 <_dtoa_r>
 80125d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80125dc:	4607      	mov	r7, r0
 80125de:	d102      	bne.n	80125e6 <__cvt+0x66>
 80125e0:	f019 0f01 	tst.w	r9, #1
 80125e4:	d022      	beq.n	801262c <__cvt+0xac>
 80125e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80125ea:	eb07 0906 	add.w	r9, r7, r6
 80125ee:	d110      	bne.n	8012612 <__cvt+0x92>
 80125f0:	783b      	ldrb	r3, [r7, #0]
 80125f2:	2b30      	cmp	r3, #48	; 0x30
 80125f4:	d10a      	bne.n	801260c <__cvt+0x8c>
 80125f6:	2200      	movs	r2, #0
 80125f8:	2300      	movs	r3, #0
 80125fa:	4620      	mov	r0, r4
 80125fc:	4629      	mov	r1, r5
 80125fe:	f7ee fa7b 	bl	8000af8 <__aeabi_dcmpeq>
 8012602:	b918      	cbnz	r0, 801260c <__cvt+0x8c>
 8012604:	f1c6 0601 	rsb	r6, r6, #1
 8012608:	f8ca 6000 	str.w	r6, [sl]
 801260c:	f8da 3000 	ldr.w	r3, [sl]
 8012610:	4499      	add	r9, r3
 8012612:	2200      	movs	r2, #0
 8012614:	2300      	movs	r3, #0
 8012616:	4620      	mov	r0, r4
 8012618:	4629      	mov	r1, r5
 801261a:	f7ee fa6d 	bl	8000af8 <__aeabi_dcmpeq>
 801261e:	b108      	cbz	r0, 8012624 <__cvt+0xa4>
 8012620:	f8cd 900c 	str.w	r9, [sp, #12]
 8012624:	2230      	movs	r2, #48	; 0x30
 8012626:	9b03      	ldr	r3, [sp, #12]
 8012628:	454b      	cmp	r3, r9
 801262a:	d307      	bcc.n	801263c <__cvt+0xbc>
 801262c:	9b03      	ldr	r3, [sp, #12]
 801262e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012630:	1bdb      	subs	r3, r3, r7
 8012632:	4638      	mov	r0, r7
 8012634:	6013      	str	r3, [r2, #0]
 8012636:	b004      	add	sp, #16
 8012638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801263c:	1c59      	adds	r1, r3, #1
 801263e:	9103      	str	r1, [sp, #12]
 8012640:	701a      	strb	r2, [r3, #0]
 8012642:	e7f0      	b.n	8012626 <__cvt+0xa6>

08012644 <__exponent>:
 8012644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012646:	4603      	mov	r3, r0
 8012648:	2900      	cmp	r1, #0
 801264a:	bfb8      	it	lt
 801264c:	4249      	neglt	r1, r1
 801264e:	f803 2b02 	strb.w	r2, [r3], #2
 8012652:	bfb4      	ite	lt
 8012654:	222d      	movlt	r2, #45	; 0x2d
 8012656:	222b      	movge	r2, #43	; 0x2b
 8012658:	2909      	cmp	r1, #9
 801265a:	7042      	strb	r2, [r0, #1]
 801265c:	dd2a      	ble.n	80126b4 <__exponent+0x70>
 801265e:	f10d 0407 	add.w	r4, sp, #7
 8012662:	46a4      	mov	ip, r4
 8012664:	270a      	movs	r7, #10
 8012666:	46a6      	mov	lr, r4
 8012668:	460a      	mov	r2, r1
 801266a:	fb91 f6f7 	sdiv	r6, r1, r7
 801266e:	fb07 1516 	mls	r5, r7, r6, r1
 8012672:	3530      	adds	r5, #48	; 0x30
 8012674:	2a63      	cmp	r2, #99	; 0x63
 8012676:	f104 34ff 	add.w	r4, r4, #4294967295
 801267a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801267e:	4631      	mov	r1, r6
 8012680:	dcf1      	bgt.n	8012666 <__exponent+0x22>
 8012682:	3130      	adds	r1, #48	; 0x30
 8012684:	f1ae 0502 	sub.w	r5, lr, #2
 8012688:	f804 1c01 	strb.w	r1, [r4, #-1]
 801268c:	1c44      	adds	r4, r0, #1
 801268e:	4629      	mov	r1, r5
 8012690:	4561      	cmp	r1, ip
 8012692:	d30a      	bcc.n	80126aa <__exponent+0x66>
 8012694:	f10d 0209 	add.w	r2, sp, #9
 8012698:	eba2 020e 	sub.w	r2, r2, lr
 801269c:	4565      	cmp	r5, ip
 801269e:	bf88      	it	hi
 80126a0:	2200      	movhi	r2, #0
 80126a2:	4413      	add	r3, r2
 80126a4:	1a18      	subs	r0, r3, r0
 80126a6:	b003      	add	sp, #12
 80126a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80126b2:	e7ed      	b.n	8012690 <__exponent+0x4c>
 80126b4:	2330      	movs	r3, #48	; 0x30
 80126b6:	3130      	adds	r1, #48	; 0x30
 80126b8:	7083      	strb	r3, [r0, #2]
 80126ba:	70c1      	strb	r1, [r0, #3]
 80126bc:	1d03      	adds	r3, r0, #4
 80126be:	e7f1      	b.n	80126a4 <__exponent+0x60>

080126c0 <_printf_float>:
 80126c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c4:	ed2d 8b02 	vpush	{d8}
 80126c8:	b08d      	sub	sp, #52	; 0x34
 80126ca:	460c      	mov	r4, r1
 80126cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80126d0:	4616      	mov	r6, r2
 80126d2:	461f      	mov	r7, r3
 80126d4:	4605      	mov	r5, r0
 80126d6:	f002 ff2b 	bl	8015530 <_localeconv_r>
 80126da:	f8d0 a000 	ldr.w	sl, [r0]
 80126de:	4650      	mov	r0, sl
 80126e0:	f7ed fd88 	bl	80001f4 <strlen>
 80126e4:	2300      	movs	r3, #0
 80126e6:	930a      	str	r3, [sp, #40]	; 0x28
 80126e8:	6823      	ldr	r3, [r4, #0]
 80126ea:	9305      	str	r3, [sp, #20]
 80126ec:	f8d8 3000 	ldr.w	r3, [r8]
 80126f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80126f4:	3307      	adds	r3, #7
 80126f6:	f023 0307 	bic.w	r3, r3, #7
 80126fa:	f103 0208 	add.w	r2, r3, #8
 80126fe:	f8c8 2000 	str.w	r2, [r8]
 8012702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012706:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801270a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801270e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012712:	9307      	str	r3, [sp, #28]
 8012714:	f8cd 8018 	str.w	r8, [sp, #24]
 8012718:	ee08 0a10 	vmov	s16, r0
 801271c:	4b9f      	ldr	r3, [pc, #636]	; (801299c <_printf_float+0x2dc>)
 801271e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012722:	f04f 32ff 	mov.w	r2, #4294967295
 8012726:	f7ee fa19 	bl	8000b5c <__aeabi_dcmpun>
 801272a:	bb88      	cbnz	r0, 8012790 <_printf_float+0xd0>
 801272c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012730:	4b9a      	ldr	r3, [pc, #616]	; (801299c <_printf_float+0x2dc>)
 8012732:	f04f 32ff 	mov.w	r2, #4294967295
 8012736:	f7ee f9f3 	bl	8000b20 <__aeabi_dcmple>
 801273a:	bb48      	cbnz	r0, 8012790 <_printf_float+0xd0>
 801273c:	2200      	movs	r2, #0
 801273e:	2300      	movs	r3, #0
 8012740:	4640      	mov	r0, r8
 8012742:	4649      	mov	r1, r9
 8012744:	f7ee f9e2 	bl	8000b0c <__aeabi_dcmplt>
 8012748:	b110      	cbz	r0, 8012750 <_printf_float+0x90>
 801274a:	232d      	movs	r3, #45	; 0x2d
 801274c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012750:	4b93      	ldr	r3, [pc, #588]	; (80129a0 <_printf_float+0x2e0>)
 8012752:	4894      	ldr	r0, [pc, #592]	; (80129a4 <_printf_float+0x2e4>)
 8012754:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012758:	bf94      	ite	ls
 801275a:	4698      	movls	r8, r3
 801275c:	4680      	movhi	r8, r0
 801275e:	2303      	movs	r3, #3
 8012760:	6123      	str	r3, [r4, #16]
 8012762:	9b05      	ldr	r3, [sp, #20]
 8012764:	f023 0204 	bic.w	r2, r3, #4
 8012768:	6022      	str	r2, [r4, #0]
 801276a:	f04f 0900 	mov.w	r9, #0
 801276e:	9700      	str	r7, [sp, #0]
 8012770:	4633      	mov	r3, r6
 8012772:	aa0b      	add	r2, sp, #44	; 0x2c
 8012774:	4621      	mov	r1, r4
 8012776:	4628      	mov	r0, r5
 8012778:	f000 f9d8 	bl	8012b2c <_printf_common>
 801277c:	3001      	adds	r0, #1
 801277e:	f040 8090 	bne.w	80128a2 <_printf_float+0x1e2>
 8012782:	f04f 30ff 	mov.w	r0, #4294967295
 8012786:	b00d      	add	sp, #52	; 0x34
 8012788:	ecbd 8b02 	vpop	{d8}
 801278c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012790:	4642      	mov	r2, r8
 8012792:	464b      	mov	r3, r9
 8012794:	4640      	mov	r0, r8
 8012796:	4649      	mov	r1, r9
 8012798:	f7ee f9e0 	bl	8000b5c <__aeabi_dcmpun>
 801279c:	b140      	cbz	r0, 80127b0 <_printf_float+0xf0>
 801279e:	464b      	mov	r3, r9
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	bfbc      	itt	lt
 80127a4:	232d      	movlt	r3, #45	; 0x2d
 80127a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80127aa:	487f      	ldr	r0, [pc, #508]	; (80129a8 <_printf_float+0x2e8>)
 80127ac:	4b7f      	ldr	r3, [pc, #508]	; (80129ac <_printf_float+0x2ec>)
 80127ae:	e7d1      	b.n	8012754 <_printf_float+0x94>
 80127b0:	6863      	ldr	r3, [r4, #4]
 80127b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80127b6:	9206      	str	r2, [sp, #24]
 80127b8:	1c5a      	adds	r2, r3, #1
 80127ba:	d13f      	bne.n	801283c <_printf_float+0x17c>
 80127bc:	2306      	movs	r3, #6
 80127be:	6063      	str	r3, [r4, #4]
 80127c0:	9b05      	ldr	r3, [sp, #20]
 80127c2:	6861      	ldr	r1, [r4, #4]
 80127c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80127c8:	2300      	movs	r3, #0
 80127ca:	9303      	str	r3, [sp, #12]
 80127cc:	ab0a      	add	r3, sp, #40	; 0x28
 80127ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80127d2:	ab09      	add	r3, sp, #36	; 0x24
 80127d4:	ec49 8b10 	vmov	d0, r8, r9
 80127d8:	9300      	str	r3, [sp, #0]
 80127da:	6022      	str	r2, [r4, #0]
 80127dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80127e0:	4628      	mov	r0, r5
 80127e2:	f7ff fecd 	bl	8012580 <__cvt>
 80127e6:	9b06      	ldr	r3, [sp, #24]
 80127e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80127ea:	2b47      	cmp	r3, #71	; 0x47
 80127ec:	4680      	mov	r8, r0
 80127ee:	d108      	bne.n	8012802 <_printf_float+0x142>
 80127f0:	1cc8      	adds	r0, r1, #3
 80127f2:	db02      	blt.n	80127fa <_printf_float+0x13a>
 80127f4:	6863      	ldr	r3, [r4, #4]
 80127f6:	4299      	cmp	r1, r3
 80127f8:	dd41      	ble.n	801287e <_printf_float+0x1be>
 80127fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80127fe:	fa5f fb8b 	uxtb.w	fp, fp
 8012802:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012806:	d820      	bhi.n	801284a <_printf_float+0x18a>
 8012808:	3901      	subs	r1, #1
 801280a:	465a      	mov	r2, fp
 801280c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012810:	9109      	str	r1, [sp, #36]	; 0x24
 8012812:	f7ff ff17 	bl	8012644 <__exponent>
 8012816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012818:	1813      	adds	r3, r2, r0
 801281a:	2a01      	cmp	r2, #1
 801281c:	4681      	mov	r9, r0
 801281e:	6123      	str	r3, [r4, #16]
 8012820:	dc02      	bgt.n	8012828 <_printf_float+0x168>
 8012822:	6822      	ldr	r2, [r4, #0]
 8012824:	07d2      	lsls	r2, r2, #31
 8012826:	d501      	bpl.n	801282c <_printf_float+0x16c>
 8012828:	3301      	adds	r3, #1
 801282a:	6123      	str	r3, [r4, #16]
 801282c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012830:	2b00      	cmp	r3, #0
 8012832:	d09c      	beq.n	801276e <_printf_float+0xae>
 8012834:	232d      	movs	r3, #45	; 0x2d
 8012836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801283a:	e798      	b.n	801276e <_printf_float+0xae>
 801283c:	9a06      	ldr	r2, [sp, #24]
 801283e:	2a47      	cmp	r2, #71	; 0x47
 8012840:	d1be      	bne.n	80127c0 <_printf_float+0x100>
 8012842:	2b00      	cmp	r3, #0
 8012844:	d1bc      	bne.n	80127c0 <_printf_float+0x100>
 8012846:	2301      	movs	r3, #1
 8012848:	e7b9      	b.n	80127be <_printf_float+0xfe>
 801284a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801284e:	d118      	bne.n	8012882 <_printf_float+0x1c2>
 8012850:	2900      	cmp	r1, #0
 8012852:	6863      	ldr	r3, [r4, #4]
 8012854:	dd0b      	ble.n	801286e <_printf_float+0x1ae>
 8012856:	6121      	str	r1, [r4, #16]
 8012858:	b913      	cbnz	r3, 8012860 <_printf_float+0x1a0>
 801285a:	6822      	ldr	r2, [r4, #0]
 801285c:	07d0      	lsls	r0, r2, #31
 801285e:	d502      	bpl.n	8012866 <_printf_float+0x1a6>
 8012860:	3301      	adds	r3, #1
 8012862:	440b      	add	r3, r1
 8012864:	6123      	str	r3, [r4, #16]
 8012866:	65a1      	str	r1, [r4, #88]	; 0x58
 8012868:	f04f 0900 	mov.w	r9, #0
 801286c:	e7de      	b.n	801282c <_printf_float+0x16c>
 801286e:	b913      	cbnz	r3, 8012876 <_printf_float+0x1b6>
 8012870:	6822      	ldr	r2, [r4, #0]
 8012872:	07d2      	lsls	r2, r2, #31
 8012874:	d501      	bpl.n	801287a <_printf_float+0x1ba>
 8012876:	3302      	adds	r3, #2
 8012878:	e7f4      	b.n	8012864 <_printf_float+0x1a4>
 801287a:	2301      	movs	r3, #1
 801287c:	e7f2      	b.n	8012864 <_printf_float+0x1a4>
 801287e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012884:	4299      	cmp	r1, r3
 8012886:	db05      	blt.n	8012894 <_printf_float+0x1d4>
 8012888:	6823      	ldr	r3, [r4, #0]
 801288a:	6121      	str	r1, [r4, #16]
 801288c:	07d8      	lsls	r0, r3, #31
 801288e:	d5ea      	bpl.n	8012866 <_printf_float+0x1a6>
 8012890:	1c4b      	adds	r3, r1, #1
 8012892:	e7e7      	b.n	8012864 <_printf_float+0x1a4>
 8012894:	2900      	cmp	r1, #0
 8012896:	bfd4      	ite	le
 8012898:	f1c1 0202 	rsble	r2, r1, #2
 801289c:	2201      	movgt	r2, #1
 801289e:	4413      	add	r3, r2
 80128a0:	e7e0      	b.n	8012864 <_printf_float+0x1a4>
 80128a2:	6823      	ldr	r3, [r4, #0]
 80128a4:	055a      	lsls	r2, r3, #21
 80128a6:	d407      	bmi.n	80128b8 <_printf_float+0x1f8>
 80128a8:	6923      	ldr	r3, [r4, #16]
 80128aa:	4642      	mov	r2, r8
 80128ac:	4631      	mov	r1, r6
 80128ae:	4628      	mov	r0, r5
 80128b0:	47b8      	blx	r7
 80128b2:	3001      	adds	r0, #1
 80128b4:	d12c      	bne.n	8012910 <_printf_float+0x250>
 80128b6:	e764      	b.n	8012782 <_printf_float+0xc2>
 80128b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80128bc:	f240 80e0 	bls.w	8012a80 <_printf_float+0x3c0>
 80128c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80128c4:	2200      	movs	r2, #0
 80128c6:	2300      	movs	r3, #0
 80128c8:	f7ee f916 	bl	8000af8 <__aeabi_dcmpeq>
 80128cc:	2800      	cmp	r0, #0
 80128ce:	d034      	beq.n	801293a <_printf_float+0x27a>
 80128d0:	4a37      	ldr	r2, [pc, #220]	; (80129b0 <_printf_float+0x2f0>)
 80128d2:	2301      	movs	r3, #1
 80128d4:	4631      	mov	r1, r6
 80128d6:	4628      	mov	r0, r5
 80128d8:	47b8      	blx	r7
 80128da:	3001      	adds	r0, #1
 80128dc:	f43f af51 	beq.w	8012782 <_printf_float+0xc2>
 80128e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80128e4:	429a      	cmp	r2, r3
 80128e6:	db02      	blt.n	80128ee <_printf_float+0x22e>
 80128e8:	6823      	ldr	r3, [r4, #0]
 80128ea:	07d8      	lsls	r0, r3, #31
 80128ec:	d510      	bpl.n	8012910 <_printf_float+0x250>
 80128ee:	ee18 3a10 	vmov	r3, s16
 80128f2:	4652      	mov	r2, sl
 80128f4:	4631      	mov	r1, r6
 80128f6:	4628      	mov	r0, r5
 80128f8:	47b8      	blx	r7
 80128fa:	3001      	adds	r0, #1
 80128fc:	f43f af41 	beq.w	8012782 <_printf_float+0xc2>
 8012900:	f04f 0800 	mov.w	r8, #0
 8012904:	f104 091a 	add.w	r9, r4, #26
 8012908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801290a:	3b01      	subs	r3, #1
 801290c:	4543      	cmp	r3, r8
 801290e:	dc09      	bgt.n	8012924 <_printf_float+0x264>
 8012910:	6823      	ldr	r3, [r4, #0]
 8012912:	079b      	lsls	r3, r3, #30
 8012914:	f100 8105 	bmi.w	8012b22 <_printf_float+0x462>
 8012918:	68e0      	ldr	r0, [r4, #12]
 801291a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801291c:	4298      	cmp	r0, r3
 801291e:	bfb8      	it	lt
 8012920:	4618      	movlt	r0, r3
 8012922:	e730      	b.n	8012786 <_printf_float+0xc6>
 8012924:	2301      	movs	r3, #1
 8012926:	464a      	mov	r2, r9
 8012928:	4631      	mov	r1, r6
 801292a:	4628      	mov	r0, r5
 801292c:	47b8      	blx	r7
 801292e:	3001      	adds	r0, #1
 8012930:	f43f af27 	beq.w	8012782 <_printf_float+0xc2>
 8012934:	f108 0801 	add.w	r8, r8, #1
 8012938:	e7e6      	b.n	8012908 <_printf_float+0x248>
 801293a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801293c:	2b00      	cmp	r3, #0
 801293e:	dc39      	bgt.n	80129b4 <_printf_float+0x2f4>
 8012940:	4a1b      	ldr	r2, [pc, #108]	; (80129b0 <_printf_float+0x2f0>)
 8012942:	2301      	movs	r3, #1
 8012944:	4631      	mov	r1, r6
 8012946:	4628      	mov	r0, r5
 8012948:	47b8      	blx	r7
 801294a:	3001      	adds	r0, #1
 801294c:	f43f af19 	beq.w	8012782 <_printf_float+0xc2>
 8012950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012954:	4313      	orrs	r3, r2
 8012956:	d102      	bne.n	801295e <_printf_float+0x29e>
 8012958:	6823      	ldr	r3, [r4, #0]
 801295a:	07d9      	lsls	r1, r3, #31
 801295c:	d5d8      	bpl.n	8012910 <_printf_float+0x250>
 801295e:	ee18 3a10 	vmov	r3, s16
 8012962:	4652      	mov	r2, sl
 8012964:	4631      	mov	r1, r6
 8012966:	4628      	mov	r0, r5
 8012968:	47b8      	blx	r7
 801296a:	3001      	adds	r0, #1
 801296c:	f43f af09 	beq.w	8012782 <_printf_float+0xc2>
 8012970:	f04f 0900 	mov.w	r9, #0
 8012974:	f104 0a1a 	add.w	sl, r4, #26
 8012978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801297a:	425b      	negs	r3, r3
 801297c:	454b      	cmp	r3, r9
 801297e:	dc01      	bgt.n	8012984 <_printf_float+0x2c4>
 8012980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012982:	e792      	b.n	80128aa <_printf_float+0x1ea>
 8012984:	2301      	movs	r3, #1
 8012986:	4652      	mov	r2, sl
 8012988:	4631      	mov	r1, r6
 801298a:	4628      	mov	r0, r5
 801298c:	47b8      	blx	r7
 801298e:	3001      	adds	r0, #1
 8012990:	f43f aef7 	beq.w	8012782 <_printf_float+0xc2>
 8012994:	f109 0901 	add.w	r9, r9, #1
 8012998:	e7ee      	b.n	8012978 <_printf_float+0x2b8>
 801299a:	bf00      	nop
 801299c:	7fefffff 	.word	0x7fefffff
 80129a0:	0802ab94 	.word	0x0802ab94
 80129a4:	0802ab98 	.word	0x0802ab98
 80129a8:	0802aba0 	.word	0x0802aba0
 80129ac:	0802ab9c 	.word	0x0802ab9c
 80129b0:	0802aba4 	.word	0x0802aba4
 80129b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80129b8:	429a      	cmp	r2, r3
 80129ba:	bfa8      	it	ge
 80129bc:	461a      	movge	r2, r3
 80129be:	2a00      	cmp	r2, #0
 80129c0:	4691      	mov	r9, r2
 80129c2:	dc37      	bgt.n	8012a34 <_printf_float+0x374>
 80129c4:	f04f 0b00 	mov.w	fp, #0
 80129c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80129cc:	f104 021a 	add.w	r2, r4, #26
 80129d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80129d2:	9305      	str	r3, [sp, #20]
 80129d4:	eba3 0309 	sub.w	r3, r3, r9
 80129d8:	455b      	cmp	r3, fp
 80129da:	dc33      	bgt.n	8012a44 <_printf_float+0x384>
 80129dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80129e0:	429a      	cmp	r2, r3
 80129e2:	db3b      	blt.n	8012a5c <_printf_float+0x39c>
 80129e4:	6823      	ldr	r3, [r4, #0]
 80129e6:	07da      	lsls	r2, r3, #31
 80129e8:	d438      	bmi.n	8012a5c <_printf_float+0x39c>
 80129ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129ec:	9a05      	ldr	r2, [sp, #20]
 80129ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80129f0:	1a9a      	subs	r2, r3, r2
 80129f2:	eba3 0901 	sub.w	r9, r3, r1
 80129f6:	4591      	cmp	r9, r2
 80129f8:	bfa8      	it	ge
 80129fa:	4691      	movge	r9, r2
 80129fc:	f1b9 0f00 	cmp.w	r9, #0
 8012a00:	dc35      	bgt.n	8012a6e <_printf_float+0x3ae>
 8012a02:	f04f 0800 	mov.w	r8, #0
 8012a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a0a:	f104 0a1a 	add.w	sl, r4, #26
 8012a0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a12:	1a9b      	subs	r3, r3, r2
 8012a14:	eba3 0309 	sub.w	r3, r3, r9
 8012a18:	4543      	cmp	r3, r8
 8012a1a:	f77f af79 	ble.w	8012910 <_printf_float+0x250>
 8012a1e:	2301      	movs	r3, #1
 8012a20:	4652      	mov	r2, sl
 8012a22:	4631      	mov	r1, r6
 8012a24:	4628      	mov	r0, r5
 8012a26:	47b8      	blx	r7
 8012a28:	3001      	adds	r0, #1
 8012a2a:	f43f aeaa 	beq.w	8012782 <_printf_float+0xc2>
 8012a2e:	f108 0801 	add.w	r8, r8, #1
 8012a32:	e7ec      	b.n	8012a0e <_printf_float+0x34e>
 8012a34:	4613      	mov	r3, r2
 8012a36:	4631      	mov	r1, r6
 8012a38:	4642      	mov	r2, r8
 8012a3a:	4628      	mov	r0, r5
 8012a3c:	47b8      	blx	r7
 8012a3e:	3001      	adds	r0, #1
 8012a40:	d1c0      	bne.n	80129c4 <_printf_float+0x304>
 8012a42:	e69e      	b.n	8012782 <_printf_float+0xc2>
 8012a44:	2301      	movs	r3, #1
 8012a46:	4631      	mov	r1, r6
 8012a48:	4628      	mov	r0, r5
 8012a4a:	9205      	str	r2, [sp, #20]
 8012a4c:	47b8      	blx	r7
 8012a4e:	3001      	adds	r0, #1
 8012a50:	f43f ae97 	beq.w	8012782 <_printf_float+0xc2>
 8012a54:	9a05      	ldr	r2, [sp, #20]
 8012a56:	f10b 0b01 	add.w	fp, fp, #1
 8012a5a:	e7b9      	b.n	80129d0 <_printf_float+0x310>
 8012a5c:	ee18 3a10 	vmov	r3, s16
 8012a60:	4652      	mov	r2, sl
 8012a62:	4631      	mov	r1, r6
 8012a64:	4628      	mov	r0, r5
 8012a66:	47b8      	blx	r7
 8012a68:	3001      	adds	r0, #1
 8012a6a:	d1be      	bne.n	80129ea <_printf_float+0x32a>
 8012a6c:	e689      	b.n	8012782 <_printf_float+0xc2>
 8012a6e:	9a05      	ldr	r2, [sp, #20]
 8012a70:	464b      	mov	r3, r9
 8012a72:	4442      	add	r2, r8
 8012a74:	4631      	mov	r1, r6
 8012a76:	4628      	mov	r0, r5
 8012a78:	47b8      	blx	r7
 8012a7a:	3001      	adds	r0, #1
 8012a7c:	d1c1      	bne.n	8012a02 <_printf_float+0x342>
 8012a7e:	e680      	b.n	8012782 <_printf_float+0xc2>
 8012a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a82:	2a01      	cmp	r2, #1
 8012a84:	dc01      	bgt.n	8012a8a <_printf_float+0x3ca>
 8012a86:	07db      	lsls	r3, r3, #31
 8012a88:	d538      	bpl.n	8012afc <_printf_float+0x43c>
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	4642      	mov	r2, r8
 8012a8e:	4631      	mov	r1, r6
 8012a90:	4628      	mov	r0, r5
 8012a92:	47b8      	blx	r7
 8012a94:	3001      	adds	r0, #1
 8012a96:	f43f ae74 	beq.w	8012782 <_printf_float+0xc2>
 8012a9a:	ee18 3a10 	vmov	r3, s16
 8012a9e:	4652      	mov	r2, sl
 8012aa0:	4631      	mov	r1, r6
 8012aa2:	4628      	mov	r0, r5
 8012aa4:	47b8      	blx	r7
 8012aa6:	3001      	adds	r0, #1
 8012aa8:	f43f ae6b 	beq.w	8012782 <_printf_float+0xc2>
 8012aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	f7ee f820 	bl	8000af8 <__aeabi_dcmpeq>
 8012ab8:	b9d8      	cbnz	r0, 8012af2 <_printf_float+0x432>
 8012aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012abc:	f108 0201 	add.w	r2, r8, #1
 8012ac0:	3b01      	subs	r3, #1
 8012ac2:	4631      	mov	r1, r6
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	47b8      	blx	r7
 8012ac8:	3001      	adds	r0, #1
 8012aca:	d10e      	bne.n	8012aea <_printf_float+0x42a>
 8012acc:	e659      	b.n	8012782 <_printf_float+0xc2>
 8012ace:	2301      	movs	r3, #1
 8012ad0:	4652      	mov	r2, sl
 8012ad2:	4631      	mov	r1, r6
 8012ad4:	4628      	mov	r0, r5
 8012ad6:	47b8      	blx	r7
 8012ad8:	3001      	adds	r0, #1
 8012ada:	f43f ae52 	beq.w	8012782 <_printf_float+0xc2>
 8012ade:	f108 0801 	add.w	r8, r8, #1
 8012ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ae4:	3b01      	subs	r3, #1
 8012ae6:	4543      	cmp	r3, r8
 8012ae8:	dcf1      	bgt.n	8012ace <_printf_float+0x40e>
 8012aea:	464b      	mov	r3, r9
 8012aec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012af0:	e6dc      	b.n	80128ac <_printf_float+0x1ec>
 8012af2:	f04f 0800 	mov.w	r8, #0
 8012af6:	f104 0a1a 	add.w	sl, r4, #26
 8012afa:	e7f2      	b.n	8012ae2 <_printf_float+0x422>
 8012afc:	2301      	movs	r3, #1
 8012afe:	4642      	mov	r2, r8
 8012b00:	e7df      	b.n	8012ac2 <_printf_float+0x402>
 8012b02:	2301      	movs	r3, #1
 8012b04:	464a      	mov	r2, r9
 8012b06:	4631      	mov	r1, r6
 8012b08:	4628      	mov	r0, r5
 8012b0a:	47b8      	blx	r7
 8012b0c:	3001      	adds	r0, #1
 8012b0e:	f43f ae38 	beq.w	8012782 <_printf_float+0xc2>
 8012b12:	f108 0801 	add.w	r8, r8, #1
 8012b16:	68e3      	ldr	r3, [r4, #12]
 8012b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012b1a:	1a5b      	subs	r3, r3, r1
 8012b1c:	4543      	cmp	r3, r8
 8012b1e:	dcf0      	bgt.n	8012b02 <_printf_float+0x442>
 8012b20:	e6fa      	b.n	8012918 <_printf_float+0x258>
 8012b22:	f04f 0800 	mov.w	r8, #0
 8012b26:	f104 0919 	add.w	r9, r4, #25
 8012b2a:	e7f4      	b.n	8012b16 <_printf_float+0x456>

08012b2c <_printf_common>:
 8012b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b30:	4616      	mov	r6, r2
 8012b32:	4699      	mov	r9, r3
 8012b34:	688a      	ldr	r2, [r1, #8]
 8012b36:	690b      	ldr	r3, [r1, #16]
 8012b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b3c:	4293      	cmp	r3, r2
 8012b3e:	bfb8      	it	lt
 8012b40:	4613      	movlt	r3, r2
 8012b42:	6033      	str	r3, [r6, #0]
 8012b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b48:	4607      	mov	r7, r0
 8012b4a:	460c      	mov	r4, r1
 8012b4c:	b10a      	cbz	r2, 8012b52 <_printf_common+0x26>
 8012b4e:	3301      	adds	r3, #1
 8012b50:	6033      	str	r3, [r6, #0]
 8012b52:	6823      	ldr	r3, [r4, #0]
 8012b54:	0699      	lsls	r1, r3, #26
 8012b56:	bf42      	ittt	mi
 8012b58:	6833      	ldrmi	r3, [r6, #0]
 8012b5a:	3302      	addmi	r3, #2
 8012b5c:	6033      	strmi	r3, [r6, #0]
 8012b5e:	6825      	ldr	r5, [r4, #0]
 8012b60:	f015 0506 	ands.w	r5, r5, #6
 8012b64:	d106      	bne.n	8012b74 <_printf_common+0x48>
 8012b66:	f104 0a19 	add.w	sl, r4, #25
 8012b6a:	68e3      	ldr	r3, [r4, #12]
 8012b6c:	6832      	ldr	r2, [r6, #0]
 8012b6e:	1a9b      	subs	r3, r3, r2
 8012b70:	42ab      	cmp	r3, r5
 8012b72:	dc26      	bgt.n	8012bc2 <_printf_common+0x96>
 8012b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012b78:	1e13      	subs	r3, r2, #0
 8012b7a:	6822      	ldr	r2, [r4, #0]
 8012b7c:	bf18      	it	ne
 8012b7e:	2301      	movne	r3, #1
 8012b80:	0692      	lsls	r2, r2, #26
 8012b82:	d42b      	bmi.n	8012bdc <_printf_common+0xb0>
 8012b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012b88:	4649      	mov	r1, r9
 8012b8a:	4638      	mov	r0, r7
 8012b8c:	47c0      	blx	r8
 8012b8e:	3001      	adds	r0, #1
 8012b90:	d01e      	beq.n	8012bd0 <_printf_common+0xa4>
 8012b92:	6823      	ldr	r3, [r4, #0]
 8012b94:	68e5      	ldr	r5, [r4, #12]
 8012b96:	6832      	ldr	r2, [r6, #0]
 8012b98:	f003 0306 	and.w	r3, r3, #6
 8012b9c:	2b04      	cmp	r3, #4
 8012b9e:	bf08      	it	eq
 8012ba0:	1aad      	subeq	r5, r5, r2
 8012ba2:	68a3      	ldr	r3, [r4, #8]
 8012ba4:	6922      	ldr	r2, [r4, #16]
 8012ba6:	bf0c      	ite	eq
 8012ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012bac:	2500      	movne	r5, #0
 8012bae:	4293      	cmp	r3, r2
 8012bb0:	bfc4      	itt	gt
 8012bb2:	1a9b      	subgt	r3, r3, r2
 8012bb4:	18ed      	addgt	r5, r5, r3
 8012bb6:	2600      	movs	r6, #0
 8012bb8:	341a      	adds	r4, #26
 8012bba:	42b5      	cmp	r5, r6
 8012bbc:	d11a      	bne.n	8012bf4 <_printf_common+0xc8>
 8012bbe:	2000      	movs	r0, #0
 8012bc0:	e008      	b.n	8012bd4 <_printf_common+0xa8>
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	4652      	mov	r2, sl
 8012bc6:	4649      	mov	r1, r9
 8012bc8:	4638      	mov	r0, r7
 8012bca:	47c0      	blx	r8
 8012bcc:	3001      	adds	r0, #1
 8012bce:	d103      	bne.n	8012bd8 <_printf_common+0xac>
 8012bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bd8:	3501      	adds	r5, #1
 8012bda:	e7c6      	b.n	8012b6a <_printf_common+0x3e>
 8012bdc:	18e1      	adds	r1, r4, r3
 8012bde:	1c5a      	adds	r2, r3, #1
 8012be0:	2030      	movs	r0, #48	; 0x30
 8012be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012be6:	4422      	add	r2, r4
 8012be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012bec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012bf0:	3302      	adds	r3, #2
 8012bf2:	e7c7      	b.n	8012b84 <_printf_common+0x58>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	4622      	mov	r2, r4
 8012bf8:	4649      	mov	r1, r9
 8012bfa:	4638      	mov	r0, r7
 8012bfc:	47c0      	blx	r8
 8012bfe:	3001      	adds	r0, #1
 8012c00:	d0e6      	beq.n	8012bd0 <_printf_common+0xa4>
 8012c02:	3601      	adds	r6, #1
 8012c04:	e7d9      	b.n	8012bba <_printf_common+0x8e>
	...

08012c08 <_printf_i>:
 8012c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c0c:	7e0f      	ldrb	r7, [r1, #24]
 8012c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012c10:	2f78      	cmp	r7, #120	; 0x78
 8012c12:	4691      	mov	r9, r2
 8012c14:	4680      	mov	r8, r0
 8012c16:	460c      	mov	r4, r1
 8012c18:	469a      	mov	sl, r3
 8012c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012c1e:	d807      	bhi.n	8012c30 <_printf_i+0x28>
 8012c20:	2f62      	cmp	r7, #98	; 0x62
 8012c22:	d80a      	bhi.n	8012c3a <_printf_i+0x32>
 8012c24:	2f00      	cmp	r7, #0
 8012c26:	f000 80d8 	beq.w	8012dda <_printf_i+0x1d2>
 8012c2a:	2f58      	cmp	r7, #88	; 0x58
 8012c2c:	f000 80a3 	beq.w	8012d76 <_printf_i+0x16e>
 8012c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012c38:	e03a      	b.n	8012cb0 <_printf_i+0xa8>
 8012c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012c3e:	2b15      	cmp	r3, #21
 8012c40:	d8f6      	bhi.n	8012c30 <_printf_i+0x28>
 8012c42:	a101      	add	r1, pc, #4	; (adr r1, 8012c48 <_printf_i+0x40>)
 8012c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c48:	08012ca1 	.word	0x08012ca1
 8012c4c:	08012cb5 	.word	0x08012cb5
 8012c50:	08012c31 	.word	0x08012c31
 8012c54:	08012c31 	.word	0x08012c31
 8012c58:	08012c31 	.word	0x08012c31
 8012c5c:	08012c31 	.word	0x08012c31
 8012c60:	08012cb5 	.word	0x08012cb5
 8012c64:	08012c31 	.word	0x08012c31
 8012c68:	08012c31 	.word	0x08012c31
 8012c6c:	08012c31 	.word	0x08012c31
 8012c70:	08012c31 	.word	0x08012c31
 8012c74:	08012dc1 	.word	0x08012dc1
 8012c78:	08012ce5 	.word	0x08012ce5
 8012c7c:	08012da3 	.word	0x08012da3
 8012c80:	08012c31 	.word	0x08012c31
 8012c84:	08012c31 	.word	0x08012c31
 8012c88:	08012de3 	.word	0x08012de3
 8012c8c:	08012c31 	.word	0x08012c31
 8012c90:	08012ce5 	.word	0x08012ce5
 8012c94:	08012c31 	.word	0x08012c31
 8012c98:	08012c31 	.word	0x08012c31
 8012c9c:	08012dab 	.word	0x08012dab
 8012ca0:	682b      	ldr	r3, [r5, #0]
 8012ca2:	1d1a      	adds	r2, r3, #4
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	602a      	str	r2, [r5, #0]
 8012ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	e0a3      	b.n	8012dfc <_printf_i+0x1f4>
 8012cb4:	6820      	ldr	r0, [r4, #0]
 8012cb6:	6829      	ldr	r1, [r5, #0]
 8012cb8:	0606      	lsls	r6, r0, #24
 8012cba:	f101 0304 	add.w	r3, r1, #4
 8012cbe:	d50a      	bpl.n	8012cd6 <_printf_i+0xce>
 8012cc0:	680e      	ldr	r6, [r1, #0]
 8012cc2:	602b      	str	r3, [r5, #0]
 8012cc4:	2e00      	cmp	r6, #0
 8012cc6:	da03      	bge.n	8012cd0 <_printf_i+0xc8>
 8012cc8:	232d      	movs	r3, #45	; 0x2d
 8012cca:	4276      	negs	r6, r6
 8012ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cd0:	485e      	ldr	r0, [pc, #376]	; (8012e4c <_printf_i+0x244>)
 8012cd2:	230a      	movs	r3, #10
 8012cd4:	e019      	b.n	8012d0a <_printf_i+0x102>
 8012cd6:	680e      	ldr	r6, [r1, #0]
 8012cd8:	602b      	str	r3, [r5, #0]
 8012cda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012cde:	bf18      	it	ne
 8012ce0:	b236      	sxthne	r6, r6
 8012ce2:	e7ef      	b.n	8012cc4 <_printf_i+0xbc>
 8012ce4:	682b      	ldr	r3, [r5, #0]
 8012ce6:	6820      	ldr	r0, [r4, #0]
 8012ce8:	1d19      	adds	r1, r3, #4
 8012cea:	6029      	str	r1, [r5, #0]
 8012cec:	0601      	lsls	r1, r0, #24
 8012cee:	d501      	bpl.n	8012cf4 <_printf_i+0xec>
 8012cf0:	681e      	ldr	r6, [r3, #0]
 8012cf2:	e002      	b.n	8012cfa <_printf_i+0xf2>
 8012cf4:	0646      	lsls	r6, r0, #25
 8012cf6:	d5fb      	bpl.n	8012cf0 <_printf_i+0xe8>
 8012cf8:	881e      	ldrh	r6, [r3, #0]
 8012cfa:	4854      	ldr	r0, [pc, #336]	; (8012e4c <_printf_i+0x244>)
 8012cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8012cfe:	bf0c      	ite	eq
 8012d00:	2308      	moveq	r3, #8
 8012d02:	230a      	movne	r3, #10
 8012d04:	2100      	movs	r1, #0
 8012d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d0a:	6865      	ldr	r5, [r4, #4]
 8012d0c:	60a5      	str	r5, [r4, #8]
 8012d0e:	2d00      	cmp	r5, #0
 8012d10:	bfa2      	ittt	ge
 8012d12:	6821      	ldrge	r1, [r4, #0]
 8012d14:	f021 0104 	bicge.w	r1, r1, #4
 8012d18:	6021      	strge	r1, [r4, #0]
 8012d1a:	b90e      	cbnz	r6, 8012d20 <_printf_i+0x118>
 8012d1c:	2d00      	cmp	r5, #0
 8012d1e:	d04d      	beq.n	8012dbc <_printf_i+0x1b4>
 8012d20:	4615      	mov	r5, r2
 8012d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8012d26:	fb03 6711 	mls	r7, r3, r1, r6
 8012d2a:	5dc7      	ldrb	r7, [r0, r7]
 8012d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012d30:	4637      	mov	r7, r6
 8012d32:	42bb      	cmp	r3, r7
 8012d34:	460e      	mov	r6, r1
 8012d36:	d9f4      	bls.n	8012d22 <_printf_i+0x11a>
 8012d38:	2b08      	cmp	r3, #8
 8012d3a:	d10b      	bne.n	8012d54 <_printf_i+0x14c>
 8012d3c:	6823      	ldr	r3, [r4, #0]
 8012d3e:	07de      	lsls	r6, r3, #31
 8012d40:	d508      	bpl.n	8012d54 <_printf_i+0x14c>
 8012d42:	6923      	ldr	r3, [r4, #16]
 8012d44:	6861      	ldr	r1, [r4, #4]
 8012d46:	4299      	cmp	r1, r3
 8012d48:	bfde      	ittt	le
 8012d4a:	2330      	movle	r3, #48	; 0x30
 8012d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012d50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012d54:	1b52      	subs	r2, r2, r5
 8012d56:	6122      	str	r2, [r4, #16]
 8012d58:	f8cd a000 	str.w	sl, [sp]
 8012d5c:	464b      	mov	r3, r9
 8012d5e:	aa03      	add	r2, sp, #12
 8012d60:	4621      	mov	r1, r4
 8012d62:	4640      	mov	r0, r8
 8012d64:	f7ff fee2 	bl	8012b2c <_printf_common>
 8012d68:	3001      	adds	r0, #1
 8012d6a:	d14c      	bne.n	8012e06 <_printf_i+0x1fe>
 8012d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d70:	b004      	add	sp, #16
 8012d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d76:	4835      	ldr	r0, [pc, #212]	; (8012e4c <_printf_i+0x244>)
 8012d78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012d7c:	6829      	ldr	r1, [r5, #0]
 8012d7e:	6823      	ldr	r3, [r4, #0]
 8012d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8012d84:	6029      	str	r1, [r5, #0]
 8012d86:	061d      	lsls	r5, r3, #24
 8012d88:	d514      	bpl.n	8012db4 <_printf_i+0x1ac>
 8012d8a:	07df      	lsls	r7, r3, #31
 8012d8c:	bf44      	itt	mi
 8012d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8012d92:	6023      	strmi	r3, [r4, #0]
 8012d94:	b91e      	cbnz	r6, 8012d9e <_printf_i+0x196>
 8012d96:	6823      	ldr	r3, [r4, #0]
 8012d98:	f023 0320 	bic.w	r3, r3, #32
 8012d9c:	6023      	str	r3, [r4, #0]
 8012d9e:	2310      	movs	r3, #16
 8012da0:	e7b0      	b.n	8012d04 <_printf_i+0xfc>
 8012da2:	6823      	ldr	r3, [r4, #0]
 8012da4:	f043 0320 	orr.w	r3, r3, #32
 8012da8:	6023      	str	r3, [r4, #0]
 8012daa:	2378      	movs	r3, #120	; 0x78
 8012dac:	4828      	ldr	r0, [pc, #160]	; (8012e50 <_printf_i+0x248>)
 8012dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012db2:	e7e3      	b.n	8012d7c <_printf_i+0x174>
 8012db4:	0659      	lsls	r1, r3, #25
 8012db6:	bf48      	it	mi
 8012db8:	b2b6      	uxthmi	r6, r6
 8012dba:	e7e6      	b.n	8012d8a <_printf_i+0x182>
 8012dbc:	4615      	mov	r5, r2
 8012dbe:	e7bb      	b.n	8012d38 <_printf_i+0x130>
 8012dc0:	682b      	ldr	r3, [r5, #0]
 8012dc2:	6826      	ldr	r6, [r4, #0]
 8012dc4:	6961      	ldr	r1, [r4, #20]
 8012dc6:	1d18      	adds	r0, r3, #4
 8012dc8:	6028      	str	r0, [r5, #0]
 8012dca:	0635      	lsls	r5, r6, #24
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	d501      	bpl.n	8012dd4 <_printf_i+0x1cc>
 8012dd0:	6019      	str	r1, [r3, #0]
 8012dd2:	e002      	b.n	8012dda <_printf_i+0x1d2>
 8012dd4:	0670      	lsls	r0, r6, #25
 8012dd6:	d5fb      	bpl.n	8012dd0 <_printf_i+0x1c8>
 8012dd8:	8019      	strh	r1, [r3, #0]
 8012dda:	2300      	movs	r3, #0
 8012ddc:	6123      	str	r3, [r4, #16]
 8012dde:	4615      	mov	r5, r2
 8012de0:	e7ba      	b.n	8012d58 <_printf_i+0x150>
 8012de2:	682b      	ldr	r3, [r5, #0]
 8012de4:	1d1a      	adds	r2, r3, #4
 8012de6:	602a      	str	r2, [r5, #0]
 8012de8:	681d      	ldr	r5, [r3, #0]
 8012dea:	6862      	ldr	r2, [r4, #4]
 8012dec:	2100      	movs	r1, #0
 8012dee:	4628      	mov	r0, r5
 8012df0:	f7ed fa0e 	bl	8000210 <memchr>
 8012df4:	b108      	cbz	r0, 8012dfa <_printf_i+0x1f2>
 8012df6:	1b40      	subs	r0, r0, r5
 8012df8:	6060      	str	r0, [r4, #4]
 8012dfa:	6863      	ldr	r3, [r4, #4]
 8012dfc:	6123      	str	r3, [r4, #16]
 8012dfe:	2300      	movs	r3, #0
 8012e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e04:	e7a8      	b.n	8012d58 <_printf_i+0x150>
 8012e06:	6923      	ldr	r3, [r4, #16]
 8012e08:	462a      	mov	r2, r5
 8012e0a:	4649      	mov	r1, r9
 8012e0c:	4640      	mov	r0, r8
 8012e0e:	47d0      	blx	sl
 8012e10:	3001      	adds	r0, #1
 8012e12:	d0ab      	beq.n	8012d6c <_printf_i+0x164>
 8012e14:	6823      	ldr	r3, [r4, #0]
 8012e16:	079b      	lsls	r3, r3, #30
 8012e18:	d413      	bmi.n	8012e42 <_printf_i+0x23a>
 8012e1a:	68e0      	ldr	r0, [r4, #12]
 8012e1c:	9b03      	ldr	r3, [sp, #12]
 8012e1e:	4298      	cmp	r0, r3
 8012e20:	bfb8      	it	lt
 8012e22:	4618      	movlt	r0, r3
 8012e24:	e7a4      	b.n	8012d70 <_printf_i+0x168>
 8012e26:	2301      	movs	r3, #1
 8012e28:	4632      	mov	r2, r6
 8012e2a:	4649      	mov	r1, r9
 8012e2c:	4640      	mov	r0, r8
 8012e2e:	47d0      	blx	sl
 8012e30:	3001      	adds	r0, #1
 8012e32:	d09b      	beq.n	8012d6c <_printf_i+0x164>
 8012e34:	3501      	adds	r5, #1
 8012e36:	68e3      	ldr	r3, [r4, #12]
 8012e38:	9903      	ldr	r1, [sp, #12]
 8012e3a:	1a5b      	subs	r3, r3, r1
 8012e3c:	42ab      	cmp	r3, r5
 8012e3e:	dcf2      	bgt.n	8012e26 <_printf_i+0x21e>
 8012e40:	e7eb      	b.n	8012e1a <_printf_i+0x212>
 8012e42:	2500      	movs	r5, #0
 8012e44:	f104 0619 	add.w	r6, r4, #25
 8012e48:	e7f5      	b.n	8012e36 <_printf_i+0x22e>
 8012e4a:	bf00      	nop
 8012e4c:	0802aba6 	.word	0x0802aba6
 8012e50:	0802abb7 	.word	0x0802abb7

08012e54 <_scanf_float>:
 8012e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e58:	b087      	sub	sp, #28
 8012e5a:	4617      	mov	r7, r2
 8012e5c:	9303      	str	r3, [sp, #12]
 8012e5e:	688b      	ldr	r3, [r1, #8]
 8012e60:	1e5a      	subs	r2, r3, #1
 8012e62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012e66:	bf83      	ittte	hi
 8012e68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012e6c:	195b      	addhi	r3, r3, r5
 8012e6e:	9302      	strhi	r3, [sp, #8]
 8012e70:	2300      	movls	r3, #0
 8012e72:	bf86      	itte	hi
 8012e74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012e78:	608b      	strhi	r3, [r1, #8]
 8012e7a:	9302      	strls	r3, [sp, #8]
 8012e7c:	680b      	ldr	r3, [r1, #0]
 8012e7e:	468b      	mov	fp, r1
 8012e80:	2500      	movs	r5, #0
 8012e82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012e86:	f84b 3b1c 	str.w	r3, [fp], #28
 8012e8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012e8e:	4680      	mov	r8, r0
 8012e90:	460c      	mov	r4, r1
 8012e92:	465e      	mov	r6, fp
 8012e94:	46aa      	mov	sl, r5
 8012e96:	46a9      	mov	r9, r5
 8012e98:	9501      	str	r5, [sp, #4]
 8012e9a:	68a2      	ldr	r2, [r4, #8]
 8012e9c:	b152      	cbz	r2, 8012eb4 <_scanf_float+0x60>
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	2b4e      	cmp	r3, #78	; 0x4e
 8012ea4:	d864      	bhi.n	8012f70 <_scanf_float+0x11c>
 8012ea6:	2b40      	cmp	r3, #64	; 0x40
 8012ea8:	d83c      	bhi.n	8012f24 <_scanf_float+0xd0>
 8012eaa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012eae:	b2c8      	uxtb	r0, r1
 8012eb0:	280e      	cmp	r0, #14
 8012eb2:	d93a      	bls.n	8012f2a <_scanf_float+0xd6>
 8012eb4:	f1b9 0f00 	cmp.w	r9, #0
 8012eb8:	d003      	beq.n	8012ec2 <_scanf_float+0x6e>
 8012eba:	6823      	ldr	r3, [r4, #0]
 8012ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012ec0:	6023      	str	r3, [r4, #0]
 8012ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012ec6:	f1ba 0f01 	cmp.w	sl, #1
 8012eca:	f200 8113 	bhi.w	80130f4 <_scanf_float+0x2a0>
 8012ece:	455e      	cmp	r6, fp
 8012ed0:	f200 8105 	bhi.w	80130de <_scanf_float+0x28a>
 8012ed4:	2501      	movs	r5, #1
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	b007      	add	sp, #28
 8012eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ede:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012ee2:	2a0d      	cmp	r2, #13
 8012ee4:	d8e6      	bhi.n	8012eb4 <_scanf_float+0x60>
 8012ee6:	a101      	add	r1, pc, #4	; (adr r1, 8012eec <_scanf_float+0x98>)
 8012ee8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012eec:	0801302b 	.word	0x0801302b
 8012ef0:	08012eb5 	.word	0x08012eb5
 8012ef4:	08012eb5 	.word	0x08012eb5
 8012ef8:	08012eb5 	.word	0x08012eb5
 8012efc:	0801308b 	.word	0x0801308b
 8012f00:	08013063 	.word	0x08013063
 8012f04:	08012eb5 	.word	0x08012eb5
 8012f08:	08012eb5 	.word	0x08012eb5
 8012f0c:	08013039 	.word	0x08013039
 8012f10:	08012eb5 	.word	0x08012eb5
 8012f14:	08012eb5 	.word	0x08012eb5
 8012f18:	08012eb5 	.word	0x08012eb5
 8012f1c:	08012eb5 	.word	0x08012eb5
 8012f20:	08012ff1 	.word	0x08012ff1
 8012f24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012f28:	e7db      	b.n	8012ee2 <_scanf_float+0x8e>
 8012f2a:	290e      	cmp	r1, #14
 8012f2c:	d8c2      	bhi.n	8012eb4 <_scanf_float+0x60>
 8012f2e:	a001      	add	r0, pc, #4	; (adr r0, 8012f34 <_scanf_float+0xe0>)
 8012f30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012f34:	08012fe3 	.word	0x08012fe3
 8012f38:	08012eb5 	.word	0x08012eb5
 8012f3c:	08012fe3 	.word	0x08012fe3
 8012f40:	08013077 	.word	0x08013077
 8012f44:	08012eb5 	.word	0x08012eb5
 8012f48:	08012f91 	.word	0x08012f91
 8012f4c:	08012fcd 	.word	0x08012fcd
 8012f50:	08012fcd 	.word	0x08012fcd
 8012f54:	08012fcd 	.word	0x08012fcd
 8012f58:	08012fcd 	.word	0x08012fcd
 8012f5c:	08012fcd 	.word	0x08012fcd
 8012f60:	08012fcd 	.word	0x08012fcd
 8012f64:	08012fcd 	.word	0x08012fcd
 8012f68:	08012fcd 	.word	0x08012fcd
 8012f6c:	08012fcd 	.word	0x08012fcd
 8012f70:	2b6e      	cmp	r3, #110	; 0x6e
 8012f72:	d809      	bhi.n	8012f88 <_scanf_float+0x134>
 8012f74:	2b60      	cmp	r3, #96	; 0x60
 8012f76:	d8b2      	bhi.n	8012ede <_scanf_float+0x8a>
 8012f78:	2b54      	cmp	r3, #84	; 0x54
 8012f7a:	d077      	beq.n	801306c <_scanf_float+0x218>
 8012f7c:	2b59      	cmp	r3, #89	; 0x59
 8012f7e:	d199      	bne.n	8012eb4 <_scanf_float+0x60>
 8012f80:	2d07      	cmp	r5, #7
 8012f82:	d197      	bne.n	8012eb4 <_scanf_float+0x60>
 8012f84:	2508      	movs	r5, #8
 8012f86:	e029      	b.n	8012fdc <_scanf_float+0x188>
 8012f88:	2b74      	cmp	r3, #116	; 0x74
 8012f8a:	d06f      	beq.n	801306c <_scanf_float+0x218>
 8012f8c:	2b79      	cmp	r3, #121	; 0x79
 8012f8e:	e7f6      	b.n	8012f7e <_scanf_float+0x12a>
 8012f90:	6821      	ldr	r1, [r4, #0]
 8012f92:	05c8      	lsls	r0, r1, #23
 8012f94:	d51a      	bpl.n	8012fcc <_scanf_float+0x178>
 8012f96:	9b02      	ldr	r3, [sp, #8]
 8012f98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012f9c:	6021      	str	r1, [r4, #0]
 8012f9e:	f109 0901 	add.w	r9, r9, #1
 8012fa2:	b11b      	cbz	r3, 8012fac <_scanf_float+0x158>
 8012fa4:	3b01      	subs	r3, #1
 8012fa6:	3201      	adds	r2, #1
 8012fa8:	9302      	str	r3, [sp, #8]
 8012faa:	60a2      	str	r2, [r4, #8]
 8012fac:	68a3      	ldr	r3, [r4, #8]
 8012fae:	3b01      	subs	r3, #1
 8012fb0:	60a3      	str	r3, [r4, #8]
 8012fb2:	6923      	ldr	r3, [r4, #16]
 8012fb4:	3301      	adds	r3, #1
 8012fb6:	6123      	str	r3, [r4, #16]
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	3b01      	subs	r3, #1
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	607b      	str	r3, [r7, #4]
 8012fc0:	f340 8084 	ble.w	80130cc <_scanf_float+0x278>
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	603b      	str	r3, [r7, #0]
 8012fca:	e766      	b.n	8012e9a <_scanf_float+0x46>
 8012fcc:	eb1a 0f05 	cmn.w	sl, r5
 8012fd0:	f47f af70 	bne.w	8012eb4 <_scanf_float+0x60>
 8012fd4:	6822      	ldr	r2, [r4, #0]
 8012fd6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012fda:	6022      	str	r2, [r4, #0]
 8012fdc:	f806 3b01 	strb.w	r3, [r6], #1
 8012fe0:	e7e4      	b.n	8012fac <_scanf_float+0x158>
 8012fe2:	6822      	ldr	r2, [r4, #0]
 8012fe4:	0610      	lsls	r0, r2, #24
 8012fe6:	f57f af65 	bpl.w	8012eb4 <_scanf_float+0x60>
 8012fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012fee:	e7f4      	b.n	8012fda <_scanf_float+0x186>
 8012ff0:	f1ba 0f00 	cmp.w	sl, #0
 8012ff4:	d10e      	bne.n	8013014 <_scanf_float+0x1c0>
 8012ff6:	f1b9 0f00 	cmp.w	r9, #0
 8012ffa:	d10e      	bne.n	801301a <_scanf_float+0x1c6>
 8012ffc:	6822      	ldr	r2, [r4, #0]
 8012ffe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013002:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013006:	d108      	bne.n	801301a <_scanf_float+0x1c6>
 8013008:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801300c:	6022      	str	r2, [r4, #0]
 801300e:	f04f 0a01 	mov.w	sl, #1
 8013012:	e7e3      	b.n	8012fdc <_scanf_float+0x188>
 8013014:	f1ba 0f02 	cmp.w	sl, #2
 8013018:	d055      	beq.n	80130c6 <_scanf_float+0x272>
 801301a:	2d01      	cmp	r5, #1
 801301c:	d002      	beq.n	8013024 <_scanf_float+0x1d0>
 801301e:	2d04      	cmp	r5, #4
 8013020:	f47f af48 	bne.w	8012eb4 <_scanf_float+0x60>
 8013024:	3501      	adds	r5, #1
 8013026:	b2ed      	uxtb	r5, r5
 8013028:	e7d8      	b.n	8012fdc <_scanf_float+0x188>
 801302a:	f1ba 0f01 	cmp.w	sl, #1
 801302e:	f47f af41 	bne.w	8012eb4 <_scanf_float+0x60>
 8013032:	f04f 0a02 	mov.w	sl, #2
 8013036:	e7d1      	b.n	8012fdc <_scanf_float+0x188>
 8013038:	b97d      	cbnz	r5, 801305a <_scanf_float+0x206>
 801303a:	f1b9 0f00 	cmp.w	r9, #0
 801303e:	f47f af3c 	bne.w	8012eba <_scanf_float+0x66>
 8013042:	6822      	ldr	r2, [r4, #0]
 8013044:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013048:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801304c:	f47f af39 	bne.w	8012ec2 <_scanf_float+0x6e>
 8013050:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013054:	6022      	str	r2, [r4, #0]
 8013056:	2501      	movs	r5, #1
 8013058:	e7c0      	b.n	8012fdc <_scanf_float+0x188>
 801305a:	2d03      	cmp	r5, #3
 801305c:	d0e2      	beq.n	8013024 <_scanf_float+0x1d0>
 801305e:	2d05      	cmp	r5, #5
 8013060:	e7de      	b.n	8013020 <_scanf_float+0x1cc>
 8013062:	2d02      	cmp	r5, #2
 8013064:	f47f af26 	bne.w	8012eb4 <_scanf_float+0x60>
 8013068:	2503      	movs	r5, #3
 801306a:	e7b7      	b.n	8012fdc <_scanf_float+0x188>
 801306c:	2d06      	cmp	r5, #6
 801306e:	f47f af21 	bne.w	8012eb4 <_scanf_float+0x60>
 8013072:	2507      	movs	r5, #7
 8013074:	e7b2      	b.n	8012fdc <_scanf_float+0x188>
 8013076:	6822      	ldr	r2, [r4, #0]
 8013078:	0591      	lsls	r1, r2, #22
 801307a:	f57f af1b 	bpl.w	8012eb4 <_scanf_float+0x60>
 801307e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013082:	6022      	str	r2, [r4, #0]
 8013084:	f8cd 9004 	str.w	r9, [sp, #4]
 8013088:	e7a8      	b.n	8012fdc <_scanf_float+0x188>
 801308a:	6822      	ldr	r2, [r4, #0]
 801308c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013090:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013094:	d006      	beq.n	80130a4 <_scanf_float+0x250>
 8013096:	0550      	lsls	r0, r2, #21
 8013098:	f57f af0c 	bpl.w	8012eb4 <_scanf_float+0x60>
 801309c:	f1b9 0f00 	cmp.w	r9, #0
 80130a0:	f43f af0f 	beq.w	8012ec2 <_scanf_float+0x6e>
 80130a4:	0591      	lsls	r1, r2, #22
 80130a6:	bf58      	it	pl
 80130a8:	9901      	ldrpl	r1, [sp, #4]
 80130aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80130ae:	bf58      	it	pl
 80130b0:	eba9 0101 	subpl.w	r1, r9, r1
 80130b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80130b8:	bf58      	it	pl
 80130ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80130be:	6022      	str	r2, [r4, #0]
 80130c0:	f04f 0900 	mov.w	r9, #0
 80130c4:	e78a      	b.n	8012fdc <_scanf_float+0x188>
 80130c6:	f04f 0a03 	mov.w	sl, #3
 80130ca:	e787      	b.n	8012fdc <_scanf_float+0x188>
 80130cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80130d0:	4639      	mov	r1, r7
 80130d2:	4640      	mov	r0, r8
 80130d4:	4798      	blx	r3
 80130d6:	2800      	cmp	r0, #0
 80130d8:	f43f aedf 	beq.w	8012e9a <_scanf_float+0x46>
 80130dc:	e6ea      	b.n	8012eb4 <_scanf_float+0x60>
 80130de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80130e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80130e6:	463a      	mov	r2, r7
 80130e8:	4640      	mov	r0, r8
 80130ea:	4798      	blx	r3
 80130ec:	6923      	ldr	r3, [r4, #16]
 80130ee:	3b01      	subs	r3, #1
 80130f0:	6123      	str	r3, [r4, #16]
 80130f2:	e6ec      	b.n	8012ece <_scanf_float+0x7a>
 80130f4:	1e6b      	subs	r3, r5, #1
 80130f6:	2b06      	cmp	r3, #6
 80130f8:	d825      	bhi.n	8013146 <_scanf_float+0x2f2>
 80130fa:	2d02      	cmp	r5, #2
 80130fc:	d836      	bhi.n	801316c <_scanf_float+0x318>
 80130fe:	455e      	cmp	r6, fp
 8013100:	f67f aee8 	bls.w	8012ed4 <_scanf_float+0x80>
 8013104:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013108:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801310c:	463a      	mov	r2, r7
 801310e:	4640      	mov	r0, r8
 8013110:	4798      	blx	r3
 8013112:	6923      	ldr	r3, [r4, #16]
 8013114:	3b01      	subs	r3, #1
 8013116:	6123      	str	r3, [r4, #16]
 8013118:	e7f1      	b.n	80130fe <_scanf_float+0x2aa>
 801311a:	9802      	ldr	r0, [sp, #8]
 801311c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013120:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013124:	9002      	str	r0, [sp, #8]
 8013126:	463a      	mov	r2, r7
 8013128:	4640      	mov	r0, r8
 801312a:	4798      	blx	r3
 801312c:	6923      	ldr	r3, [r4, #16]
 801312e:	3b01      	subs	r3, #1
 8013130:	6123      	str	r3, [r4, #16]
 8013132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013136:	fa5f fa8a 	uxtb.w	sl, sl
 801313a:	f1ba 0f02 	cmp.w	sl, #2
 801313e:	d1ec      	bne.n	801311a <_scanf_float+0x2c6>
 8013140:	3d03      	subs	r5, #3
 8013142:	b2ed      	uxtb	r5, r5
 8013144:	1b76      	subs	r6, r6, r5
 8013146:	6823      	ldr	r3, [r4, #0]
 8013148:	05da      	lsls	r2, r3, #23
 801314a:	d52f      	bpl.n	80131ac <_scanf_float+0x358>
 801314c:	055b      	lsls	r3, r3, #21
 801314e:	d510      	bpl.n	8013172 <_scanf_float+0x31e>
 8013150:	455e      	cmp	r6, fp
 8013152:	f67f aebf 	bls.w	8012ed4 <_scanf_float+0x80>
 8013156:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801315a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801315e:	463a      	mov	r2, r7
 8013160:	4640      	mov	r0, r8
 8013162:	4798      	blx	r3
 8013164:	6923      	ldr	r3, [r4, #16]
 8013166:	3b01      	subs	r3, #1
 8013168:	6123      	str	r3, [r4, #16]
 801316a:	e7f1      	b.n	8013150 <_scanf_float+0x2fc>
 801316c:	46aa      	mov	sl, r5
 801316e:	9602      	str	r6, [sp, #8]
 8013170:	e7df      	b.n	8013132 <_scanf_float+0x2de>
 8013172:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013176:	6923      	ldr	r3, [r4, #16]
 8013178:	2965      	cmp	r1, #101	; 0x65
 801317a:	f103 33ff 	add.w	r3, r3, #4294967295
 801317e:	f106 35ff 	add.w	r5, r6, #4294967295
 8013182:	6123      	str	r3, [r4, #16]
 8013184:	d00c      	beq.n	80131a0 <_scanf_float+0x34c>
 8013186:	2945      	cmp	r1, #69	; 0x45
 8013188:	d00a      	beq.n	80131a0 <_scanf_float+0x34c>
 801318a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801318e:	463a      	mov	r2, r7
 8013190:	4640      	mov	r0, r8
 8013192:	4798      	blx	r3
 8013194:	6923      	ldr	r3, [r4, #16]
 8013196:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801319a:	3b01      	subs	r3, #1
 801319c:	1eb5      	subs	r5, r6, #2
 801319e:	6123      	str	r3, [r4, #16]
 80131a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80131a4:	463a      	mov	r2, r7
 80131a6:	4640      	mov	r0, r8
 80131a8:	4798      	blx	r3
 80131aa:	462e      	mov	r6, r5
 80131ac:	6825      	ldr	r5, [r4, #0]
 80131ae:	f015 0510 	ands.w	r5, r5, #16
 80131b2:	d159      	bne.n	8013268 <_scanf_float+0x414>
 80131b4:	7035      	strb	r5, [r6, #0]
 80131b6:	6823      	ldr	r3, [r4, #0]
 80131b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80131bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80131c0:	d11b      	bne.n	80131fa <_scanf_float+0x3a6>
 80131c2:	9b01      	ldr	r3, [sp, #4]
 80131c4:	454b      	cmp	r3, r9
 80131c6:	eba3 0209 	sub.w	r2, r3, r9
 80131ca:	d123      	bne.n	8013214 <_scanf_float+0x3c0>
 80131cc:	2200      	movs	r2, #0
 80131ce:	4659      	mov	r1, fp
 80131d0:	4640      	mov	r0, r8
 80131d2:	f000 fe97 	bl	8013f04 <_strtod_r>
 80131d6:	6822      	ldr	r2, [r4, #0]
 80131d8:	9b03      	ldr	r3, [sp, #12]
 80131da:	f012 0f02 	tst.w	r2, #2
 80131de:	ec57 6b10 	vmov	r6, r7, d0
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	d021      	beq.n	801322a <_scanf_float+0x3d6>
 80131e6:	9903      	ldr	r1, [sp, #12]
 80131e8:	1d1a      	adds	r2, r3, #4
 80131ea:	600a      	str	r2, [r1, #0]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	e9c3 6700 	strd	r6, r7, [r3]
 80131f2:	68e3      	ldr	r3, [r4, #12]
 80131f4:	3301      	adds	r3, #1
 80131f6:	60e3      	str	r3, [r4, #12]
 80131f8:	e66d      	b.n	8012ed6 <_scanf_float+0x82>
 80131fa:	9b04      	ldr	r3, [sp, #16]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d0e5      	beq.n	80131cc <_scanf_float+0x378>
 8013200:	9905      	ldr	r1, [sp, #20]
 8013202:	230a      	movs	r3, #10
 8013204:	462a      	mov	r2, r5
 8013206:	3101      	adds	r1, #1
 8013208:	4640      	mov	r0, r8
 801320a:	f000 ff6b 	bl	80140e4 <_strtol_r>
 801320e:	9b04      	ldr	r3, [sp, #16]
 8013210:	9e05      	ldr	r6, [sp, #20]
 8013212:	1ac2      	subs	r2, r0, r3
 8013214:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013218:	429e      	cmp	r6, r3
 801321a:	bf28      	it	cs
 801321c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013220:	4912      	ldr	r1, [pc, #72]	; (801326c <_scanf_float+0x418>)
 8013222:	4630      	mov	r0, r6
 8013224:	f000 f82c 	bl	8013280 <siprintf>
 8013228:	e7d0      	b.n	80131cc <_scanf_float+0x378>
 801322a:	9903      	ldr	r1, [sp, #12]
 801322c:	f012 0f04 	tst.w	r2, #4
 8013230:	f103 0204 	add.w	r2, r3, #4
 8013234:	600a      	str	r2, [r1, #0]
 8013236:	d1d9      	bne.n	80131ec <_scanf_float+0x398>
 8013238:	f8d3 8000 	ldr.w	r8, [r3]
 801323c:	ee10 2a10 	vmov	r2, s0
 8013240:	ee10 0a10 	vmov	r0, s0
 8013244:	463b      	mov	r3, r7
 8013246:	4639      	mov	r1, r7
 8013248:	f7ed fc88 	bl	8000b5c <__aeabi_dcmpun>
 801324c:	b128      	cbz	r0, 801325a <_scanf_float+0x406>
 801324e:	4808      	ldr	r0, [pc, #32]	; (8013270 <_scanf_float+0x41c>)
 8013250:	f000 f810 	bl	8013274 <nanf>
 8013254:	ed88 0a00 	vstr	s0, [r8]
 8013258:	e7cb      	b.n	80131f2 <_scanf_float+0x39e>
 801325a:	4630      	mov	r0, r6
 801325c:	4639      	mov	r1, r7
 801325e:	f7ed fcdb 	bl	8000c18 <__aeabi_d2f>
 8013262:	f8c8 0000 	str.w	r0, [r8]
 8013266:	e7c4      	b.n	80131f2 <_scanf_float+0x39e>
 8013268:	2500      	movs	r5, #0
 801326a:	e634      	b.n	8012ed6 <_scanf_float+0x82>
 801326c:	0802abc8 	.word	0x0802abc8
 8013270:	0802accf 	.word	0x0802accf

08013274 <nanf>:
 8013274:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801327c <nanf+0x8>
 8013278:	4770      	bx	lr
 801327a:	bf00      	nop
 801327c:	7fc00000 	.word	0x7fc00000

08013280 <siprintf>:
 8013280:	b40e      	push	{r1, r2, r3}
 8013282:	b500      	push	{lr}
 8013284:	b09c      	sub	sp, #112	; 0x70
 8013286:	ab1d      	add	r3, sp, #116	; 0x74
 8013288:	9002      	str	r0, [sp, #8]
 801328a:	9006      	str	r0, [sp, #24]
 801328c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013290:	4809      	ldr	r0, [pc, #36]	; (80132b8 <siprintf+0x38>)
 8013292:	9107      	str	r1, [sp, #28]
 8013294:	9104      	str	r1, [sp, #16]
 8013296:	4909      	ldr	r1, [pc, #36]	; (80132bc <siprintf+0x3c>)
 8013298:	f853 2b04 	ldr.w	r2, [r3], #4
 801329c:	9105      	str	r1, [sp, #20]
 801329e:	6800      	ldr	r0, [r0, #0]
 80132a0:	9301      	str	r3, [sp, #4]
 80132a2:	a902      	add	r1, sp, #8
 80132a4:	f002 ff84 	bl	80161b0 <_svfiprintf_r>
 80132a8:	9b02      	ldr	r3, [sp, #8]
 80132aa:	2200      	movs	r2, #0
 80132ac:	701a      	strb	r2, [r3, #0]
 80132ae:	b01c      	add	sp, #112	; 0x70
 80132b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80132b4:	b003      	add	sp, #12
 80132b6:	4770      	bx	lr
 80132b8:	20000044 	.word	0x20000044
 80132bc:	ffff0208 	.word	0xffff0208

080132c0 <sulp>:
 80132c0:	b570      	push	{r4, r5, r6, lr}
 80132c2:	4604      	mov	r4, r0
 80132c4:	460d      	mov	r5, r1
 80132c6:	ec45 4b10 	vmov	d0, r4, r5
 80132ca:	4616      	mov	r6, r2
 80132cc:	f002 fcce 	bl	8015c6c <__ulp>
 80132d0:	ec51 0b10 	vmov	r0, r1, d0
 80132d4:	b17e      	cbz	r6, 80132f6 <sulp+0x36>
 80132d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80132da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80132de:	2b00      	cmp	r3, #0
 80132e0:	dd09      	ble.n	80132f6 <sulp+0x36>
 80132e2:	051b      	lsls	r3, r3, #20
 80132e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80132e8:	2400      	movs	r4, #0
 80132ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80132ee:	4622      	mov	r2, r4
 80132f0:	462b      	mov	r3, r5
 80132f2:	f7ed f999 	bl	8000628 <__aeabi_dmul>
 80132f6:	bd70      	pop	{r4, r5, r6, pc}

080132f8 <_strtod_l>:
 80132f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132fc:	ed2d 8b02 	vpush	{d8}
 8013300:	b09d      	sub	sp, #116	; 0x74
 8013302:	461f      	mov	r7, r3
 8013304:	2300      	movs	r3, #0
 8013306:	9318      	str	r3, [sp, #96]	; 0x60
 8013308:	4ba2      	ldr	r3, [pc, #648]	; (8013594 <_strtod_l+0x29c>)
 801330a:	9213      	str	r2, [sp, #76]	; 0x4c
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	9305      	str	r3, [sp, #20]
 8013310:	4604      	mov	r4, r0
 8013312:	4618      	mov	r0, r3
 8013314:	4688      	mov	r8, r1
 8013316:	f7ec ff6d 	bl	80001f4 <strlen>
 801331a:	f04f 0a00 	mov.w	sl, #0
 801331e:	4605      	mov	r5, r0
 8013320:	f04f 0b00 	mov.w	fp, #0
 8013324:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801332a:	781a      	ldrb	r2, [r3, #0]
 801332c:	2a2b      	cmp	r2, #43	; 0x2b
 801332e:	d04e      	beq.n	80133ce <_strtod_l+0xd6>
 8013330:	d83b      	bhi.n	80133aa <_strtod_l+0xb2>
 8013332:	2a0d      	cmp	r2, #13
 8013334:	d834      	bhi.n	80133a0 <_strtod_l+0xa8>
 8013336:	2a08      	cmp	r2, #8
 8013338:	d834      	bhi.n	80133a4 <_strtod_l+0xac>
 801333a:	2a00      	cmp	r2, #0
 801333c:	d03e      	beq.n	80133bc <_strtod_l+0xc4>
 801333e:	2300      	movs	r3, #0
 8013340:	930a      	str	r3, [sp, #40]	; 0x28
 8013342:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013344:	7833      	ldrb	r3, [r6, #0]
 8013346:	2b30      	cmp	r3, #48	; 0x30
 8013348:	f040 80b0 	bne.w	80134ac <_strtod_l+0x1b4>
 801334c:	7873      	ldrb	r3, [r6, #1]
 801334e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013352:	2b58      	cmp	r3, #88	; 0x58
 8013354:	d168      	bne.n	8013428 <_strtod_l+0x130>
 8013356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013358:	9301      	str	r3, [sp, #4]
 801335a:	ab18      	add	r3, sp, #96	; 0x60
 801335c:	9702      	str	r7, [sp, #8]
 801335e:	9300      	str	r3, [sp, #0]
 8013360:	4a8d      	ldr	r2, [pc, #564]	; (8013598 <_strtod_l+0x2a0>)
 8013362:	ab19      	add	r3, sp, #100	; 0x64
 8013364:	a917      	add	r1, sp, #92	; 0x5c
 8013366:	4620      	mov	r0, r4
 8013368:	f001 fdda 	bl	8014f20 <__gethex>
 801336c:	f010 0707 	ands.w	r7, r0, #7
 8013370:	4605      	mov	r5, r0
 8013372:	d005      	beq.n	8013380 <_strtod_l+0x88>
 8013374:	2f06      	cmp	r7, #6
 8013376:	d12c      	bne.n	80133d2 <_strtod_l+0xda>
 8013378:	3601      	adds	r6, #1
 801337a:	2300      	movs	r3, #0
 801337c:	9617      	str	r6, [sp, #92]	; 0x5c
 801337e:	930a      	str	r3, [sp, #40]	; 0x28
 8013380:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013382:	2b00      	cmp	r3, #0
 8013384:	f040 8590 	bne.w	8013ea8 <_strtod_l+0xbb0>
 8013388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801338a:	b1eb      	cbz	r3, 80133c8 <_strtod_l+0xd0>
 801338c:	4652      	mov	r2, sl
 801338e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013392:	ec43 2b10 	vmov	d0, r2, r3
 8013396:	b01d      	add	sp, #116	; 0x74
 8013398:	ecbd 8b02 	vpop	{d8}
 801339c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133a0:	2a20      	cmp	r2, #32
 80133a2:	d1cc      	bne.n	801333e <_strtod_l+0x46>
 80133a4:	3301      	adds	r3, #1
 80133a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80133a8:	e7be      	b.n	8013328 <_strtod_l+0x30>
 80133aa:	2a2d      	cmp	r2, #45	; 0x2d
 80133ac:	d1c7      	bne.n	801333e <_strtod_l+0x46>
 80133ae:	2201      	movs	r2, #1
 80133b0:	920a      	str	r2, [sp, #40]	; 0x28
 80133b2:	1c5a      	adds	r2, r3, #1
 80133b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80133b6:	785b      	ldrb	r3, [r3, #1]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d1c2      	bne.n	8013342 <_strtod_l+0x4a>
 80133bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80133be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	f040 856e 	bne.w	8013ea4 <_strtod_l+0xbac>
 80133c8:	4652      	mov	r2, sl
 80133ca:	465b      	mov	r3, fp
 80133cc:	e7e1      	b.n	8013392 <_strtod_l+0x9a>
 80133ce:	2200      	movs	r2, #0
 80133d0:	e7ee      	b.n	80133b0 <_strtod_l+0xb8>
 80133d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80133d4:	b13a      	cbz	r2, 80133e6 <_strtod_l+0xee>
 80133d6:	2135      	movs	r1, #53	; 0x35
 80133d8:	a81a      	add	r0, sp, #104	; 0x68
 80133da:	f002 fd52 	bl	8015e82 <__copybits>
 80133de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80133e0:	4620      	mov	r0, r4
 80133e2:	f002 f911 	bl	8015608 <_Bfree>
 80133e6:	3f01      	subs	r7, #1
 80133e8:	2f04      	cmp	r7, #4
 80133ea:	d806      	bhi.n	80133fa <_strtod_l+0x102>
 80133ec:	e8df f007 	tbb	[pc, r7]
 80133f0:	1714030a 	.word	0x1714030a
 80133f4:	0a          	.byte	0x0a
 80133f5:	00          	.byte	0x00
 80133f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80133fa:	0728      	lsls	r0, r5, #28
 80133fc:	d5c0      	bpl.n	8013380 <_strtod_l+0x88>
 80133fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013402:	e7bd      	b.n	8013380 <_strtod_l+0x88>
 8013404:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8013408:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801340a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801340e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013412:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013416:	e7f0      	b.n	80133fa <_strtod_l+0x102>
 8013418:	f8df b180 	ldr.w	fp, [pc, #384]	; 801359c <_strtod_l+0x2a4>
 801341c:	e7ed      	b.n	80133fa <_strtod_l+0x102>
 801341e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013422:	f04f 3aff 	mov.w	sl, #4294967295
 8013426:	e7e8      	b.n	80133fa <_strtod_l+0x102>
 8013428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801342a:	1c5a      	adds	r2, r3, #1
 801342c:	9217      	str	r2, [sp, #92]	; 0x5c
 801342e:	785b      	ldrb	r3, [r3, #1]
 8013430:	2b30      	cmp	r3, #48	; 0x30
 8013432:	d0f9      	beq.n	8013428 <_strtod_l+0x130>
 8013434:	2b00      	cmp	r3, #0
 8013436:	d0a3      	beq.n	8013380 <_strtod_l+0x88>
 8013438:	2301      	movs	r3, #1
 801343a:	f04f 0900 	mov.w	r9, #0
 801343e:	9304      	str	r3, [sp, #16]
 8013440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013442:	9308      	str	r3, [sp, #32]
 8013444:	f8cd 901c 	str.w	r9, [sp, #28]
 8013448:	464f      	mov	r7, r9
 801344a:	220a      	movs	r2, #10
 801344c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801344e:	7806      	ldrb	r6, [r0, #0]
 8013450:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013454:	b2d9      	uxtb	r1, r3
 8013456:	2909      	cmp	r1, #9
 8013458:	d92a      	bls.n	80134b0 <_strtod_l+0x1b8>
 801345a:	9905      	ldr	r1, [sp, #20]
 801345c:	462a      	mov	r2, r5
 801345e:	f003 f91b 	bl	8016698 <strncmp>
 8013462:	b398      	cbz	r0, 80134cc <_strtod_l+0x1d4>
 8013464:	2000      	movs	r0, #0
 8013466:	4632      	mov	r2, r6
 8013468:	463d      	mov	r5, r7
 801346a:	9005      	str	r0, [sp, #20]
 801346c:	4603      	mov	r3, r0
 801346e:	2a65      	cmp	r2, #101	; 0x65
 8013470:	d001      	beq.n	8013476 <_strtod_l+0x17e>
 8013472:	2a45      	cmp	r2, #69	; 0x45
 8013474:	d118      	bne.n	80134a8 <_strtod_l+0x1b0>
 8013476:	b91d      	cbnz	r5, 8013480 <_strtod_l+0x188>
 8013478:	9a04      	ldr	r2, [sp, #16]
 801347a:	4302      	orrs	r2, r0
 801347c:	d09e      	beq.n	80133bc <_strtod_l+0xc4>
 801347e:	2500      	movs	r5, #0
 8013480:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8013484:	f108 0201 	add.w	r2, r8, #1
 8013488:	9217      	str	r2, [sp, #92]	; 0x5c
 801348a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801348e:	2a2b      	cmp	r2, #43	; 0x2b
 8013490:	d075      	beq.n	801357e <_strtod_l+0x286>
 8013492:	2a2d      	cmp	r2, #45	; 0x2d
 8013494:	d07b      	beq.n	801358e <_strtod_l+0x296>
 8013496:	f04f 0c00 	mov.w	ip, #0
 801349a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801349e:	2909      	cmp	r1, #9
 80134a0:	f240 8082 	bls.w	80135a8 <_strtod_l+0x2b0>
 80134a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80134a8:	2600      	movs	r6, #0
 80134aa:	e09d      	b.n	80135e8 <_strtod_l+0x2f0>
 80134ac:	2300      	movs	r3, #0
 80134ae:	e7c4      	b.n	801343a <_strtod_l+0x142>
 80134b0:	2f08      	cmp	r7, #8
 80134b2:	bfd8      	it	le
 80134b4:	9907      	ldrle	r1, [sp, #28]
 80134b6:	f100 0001 	add.w	r0, r0, #1
 80134ba:	bfda      	itte	le
 80134bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80134c0:	9307      	strle	r3, [sp, #28]
 80134c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80134c6:	3701      	adds	r7, #1
 80134c8:	9017      	str	r0, [sp, #92]	; 0x5c
 80134ca:	e7bf      	b.n	801344c <_strtod_l+0x154>
 80134cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80134ce:	195a      	adds	r2, r3, r5
 80134d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80134d2:	5d5a      	ldrb	r2, [r3, r5]
 80134d4:	2f00      	cmp	r7, #0
 80134d6:	d037      	beq.n	8013548 <_strtod_l+0x250>
 80134d8:	9005      	str	r0, [sp, #20]
 80134da:	463d      	mov	r5, r7
 80134dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80134e0:	2b09      	cmp	r3, #9
 80134e2:	d912      	bls.n	801350a <_strtod_l+0x212>
 80134e4:	2301      	movs	r3, #1
 80134e6:	e7c2      	b.n	801346e <_strtod_l+0x176>
 80134e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80134ea:	1c5a      	adds	r2, r3, #1
 80134ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80134ee:	785a      	ldrb	r2, [r3, #1]
 80134f0:	3001      	adds	r0, #1
 80134f2:	2a30      	cmp	r2, #48	; 0x30
 80134f4:	d0f8      	beq.n	80134e8 <_strtod_l+0x1f0>
 80134f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80134fa:	2b08      	cmp	r3, #8
 80134fc:	f200 84d9 	bhi.w	8013eb2 <_strtod_l+0xbba>
 8013500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013502:	9005      	str	r0, [sp, #20]
 8013504:	2000      	movs	r0, #0
 8013506:	9308      	str	r3, [sp, #32]
 8013508:	4605      	mov	r5, r0
 801350a:	3a30      	subs	r2, #48	; 0x30
 801350c:	f100 0301 	add.w	r3, r0, #1
 8013510:	d014      	beq.n	801353c <_strtod_l+0x244>
 8013512:	9905      	ldr	r1, [sp, #20]
 8013514:	4419      	add	r1, r3
 8013516:	9105      	str	r1, [sp, #20]
 8013518:	462b      	mov	r3, r5
 801351a:	eb00 0e05 	add.w	lr, r0, r5
 801351e:	210a      	movs	r1, #10
 8013520:	4573      	cmp	r3, lr
 8013522:	d113      	bne.n	801354c <_strtod_l+0x254>
 8013524:	182b      	adds	r3, r5, r0
 8013526:	2b08      	cmp	r3, #8
 8013528:	f105 0501 	add.w	r5, r5, #1
 801352c:	4405      	add	r5, r0
 801352e:	dc1c      	bgt.n	801356a <_strtod_l+0x272>
 8013530:	9907      	ldr	r1, [sp, #28]
 8013532:	230a      	movs	r3, #10
 8013534:	fb03 2301 	mla	r3, r3, r1, r2
 8013538:	9307      	str	r3, [sp, #28]
 801353a:	2300      	movs	r3, #0
 801353c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801353e:	1c51      	adds	r1, r2, #1
 8013540:	9117      	str	r1, [sp, #92]	; 0x5c
 8013542:	7852      	ldrb	r2, [r2, #1]
 8013544:	4618      	mov	r0, r3
 8013546:	e7c9      	b.n	80134dc <_strtod_l+0x1e4>
 8013548:	4638      	mov	r0, r7
 801354a:	e7d2      	b.n	80134f2 <_strtod_l+0x1fa>
 801354c:	2b08      	cmp	r3, #8
 801354e:	dc04      	bgt.n	801355a <_strtod_l+0x262>
 8013550:	9e07      	ldr	r6, [sp, #28]
 8013552:	434e      	muls	r6, r1
 8013554:	9607      	str	r6, [sp, #28]
 8013556:	3301      	adds	r3, #1
 8013558:	e7e2      	b.n	8013520 <_strtod_l+0x228>
 801355a:	f103 0c01 	add.w	ip, r3, #1
 801355e:	f1bc 0f10 	cmp.w	ip, #16
 8013562:	bfd8      	it	le
 8013564:	fb01 f909 	mulle.w	r9, r1, r9
 8013568:	e7f5      	b.n	8013556 <_strtod_l+0x25e>
 801356a:	2d10      	cmp	r5, #16
 801356c:	bfdc      	itt	le
 801356e:	230a      	movle	r3, #10
 8013570:	fb03 2909 	mlale	r9, r3, r9, r2
 8013574:	e7e1      	b.n	801353a <_strtod_l+0x242>
 8013576:	2300      	movs	r3, #0
 8013578:	9305      	str	r3, [sp, #20]
 801357a:	2301      	movs	r3, #1
 801357c:	e77c      	b.n	8013478 <_strtod_l+0x180>
 801357e:	f04f 0c00 	mov.w	ip, #0
 8013582:	f108 0202 	add.w	r2, r8, #2
 8013586:	9217      	str	r2, [sp, #92]	; 0x5c
 8013588:	f898 2002 	ldrb.w	r2, [r8, #2]
 801358c:	e785      	b.n	801349a <_strtod_l+0x1a2>
 801358e:	f04f 0c01 	mov.w	ip, #1
 8013592:	e7f6      	b.n	8013582 <_strtod_l+0x28a>
 8013594:	0802aeb0 	.word	0x0802aeb0
 8013598:	0802abd0 	.word	0x0802abd0
 801359c:	7ff00000 	.word	0x7ff00000
 80135a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80135a2:	1c51      	adds	r1, r2, #1
 80135a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80135a6:	7852      	ldrb	r2, [r2, #1]
 80135a8:	2a30      	cmp	r2, #48	; 0x30
 80135aa:	d0f9      	beq.n	80135a0 <_strtod_l+0x2a8>
 80135ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80135b0:	2908      	cmp	r1, #8
 80135b2:	f63f af79 	bhi.w	80134a8 <_strtod_l+0x1b0>
 80135b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80135ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80135bc:	9206      	str	r2, [sp, #24]
 80135be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80135c0:	1c51      	adds	r1, r2, #1
 80135c2:	9117      	str	r1, [sp, #92]	; 0x5c
 80135c4:	7852      	ldrb	r2, [r2, #1]
 80135c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80135ca:	2e09      	cmp	r6, #9
 80135cc:	d937      	bls.n	801363e <_strtod_l+0x346>
 80135ce:	9e06      	ldr	r6, [sp, #24]
 80135d0:	1b89      	subs	r1, r1, r6
 80135d2:	2908      	cmp	r1, #8
 80135d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80135d8:	dc02      	bgt.n	80135e0 <_strtod_l+0x2e8>
 80135da:	4576      	cmp	r6, lr
 80135dc:	bfa8      	it	ge
 80135de:	4676      	movge	r6, lr
 80135e0:	f1bc 0f00 	cmp.w	ip, #0
 80135e4:	d000      	beq.n	80135e8 <_strtod_l+0x2f0>
 80135e6:	4276      	negs	r6, r6
 80135e8:	2d00      	cmp	r5, #0
 80135ea:	d14d      	bne.n	8013688 <_strtod_l+0x390>
 80135ec:	9904      	ldr	r1, [sp, #16]
 80135ee:	4301      	orrs	r1, r0
 80135f0:	f47f aec6 	bne.w	8013380 <_strtod_l+0x88>
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	f47f aee1 	bne.w	80133bc <_strtod_l+0xc4>
 80135fa:	2a69      	cmp	r2, #105	; 0x69
 80135fc:	d027      	beq.n	801364e <_strtod_l+0x356>
 80135fe:	dc24      	bgt.n	801364a <_strtod_l+0x352>
 8013600:	2a49      	cmp	r2, #73	; 0x49
 8013602:	d024      	beq.n	801364e <_strtod_l+0x356>
 8013604:	2a4e      	cmp	r2, #78	; 0x4e
 8013606:	f47f aed9 	bne.w	80133bc <_strtod_l+0xc4>
 801360a:	499f      	ldr	r1, [pc, #636]	; (8013888 <_strtod_l+0x590>)
 801360c:	a817      	add	r0, sp, #92	; 0x5c
 801360e:	f001 fedf 	bl	80153d0 <__match>
 8013612:	2800      	cmp	r0, #0
 8013614:	f43f aed2 	beq.w	80133bc <_strtod_l+0xc4>
 8013618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	2b28      	cmp	r3, #40	; 0x28
 801361e:	d12d      	bne.n	801367c <_strtod_l+0x384>
 8013620:	499a      	ldr	r1, [pc, #616]	; (801388c <_strtod_l+0x594>)
 8013622:	aa1a      	add	r2, sp, #104	; 0x68
 8013624:	a817      	add	r0, sp, #92	; 0x5c
 8013626:	f001 fee7 	bl	80153f8 <__hexnan>
 801362a:	2805      	cmp	r0, #5
 801362c:	d126      	bne.n	801367c <_strtod_l+0x384>
 801362e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013630:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8013634:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013638:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801363c:	e6a0      	b.n	8013380 <_strtod_l+0x88>
 801363e:	210a      	movs	r1, #10
 8013640:	fb01 2e0e 	mla	lr, r1, lr, r2
 8013644:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013648:	e7b9      	b.n	80135be <_strtod_l+0x2c6>
 801364a:	2a6e      	cmp	r2, #110	; 0x6e
 801364c:	e7db      	b.n	8013606 <_strtod_l+0x30e>
 801364e:	4990      	ldr	r1, [pc, #576]	; (8013890 <_strtod_l+0x598>)
 8013650:	a817      	add	r0, sp, #92	; 0x5c
 8013652:	f001 febd 	bl	80153d0 <__match>
 8013656:	2800      	cmp	r0, #0
 8013658:	f43f aeb0 	beq.w	80133bc <_strtod_l+0xc4>
 801365c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801365e:	498d      	ldr	r1, [pc, #564]	; (8013894 <_strtod_l+0x59c>)
 8013660:	3b01      	subs	r3, #1
 8013662:	a817      	add	r0, sp, #92	; 0x5c
 8013664:	9317      	str	r3, [sp, #92]	; 0x5c
 8013666:	f001 feb3 	bl	80153d0 <__match>
 801366a:	b910      	cbnz	r0, 8013672 <_strtod_l+0x37a>
 801366c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801366e:	3301      	adds	r3, #1
 8013670:	9317      	str	r3, [sp, #92]	; 0x5c
 8013672:	f8df b230 	ldr.w	fp, [pc, #560]	; 80138a4 <_strtod_l+0x5ac>
 8013676:	f04f 0a00 	mov.w	sl, #0
 801367a:	e681      	b.n	8013380 <_strtod_l+0x88>
 801367c:	4886      	ldr	r0, [pc, #536]	; (8013898 <_strtod_l+0x5a0>)
 801367e:	f002 fff3 	bl	8016668 <nan>
 8013682:	ec5b ab10 	vmov	sl, fp, d0
 8013686:	e67b      	b.n	8013380 <_strtod_l+0x88>
 8013688:	9b05      	ldr	r3, [sp, #20]
 801368a:	9807      	ldr	r0, [sp, #28]
 801368c:	1af3      	subs	r3, r6, r3
 801368e:	2f00      	cmp	r7, #0
 8013690:	bf08      	it	eq
 8013692:	462f      	moveq	r7, r5
 8013694:	2d10      	cmp	r5, #16
 8013696:	9306      	str	r3, [sp, #24]
 8013698:	46a8      	mov	r8, r5
 801369a:	bfa8      	it	ge
 801369c:	f04f 0810 	movge.w	r8, #16
 80136a0:	f7ec ff48 	bl	8000534 <__aeabi_ui2d>
 80136a4:	2d09      	cmp	r5, #9
 80136a6:	4682      	mov	sl, r0
 80136a8:	468b      	mov	fp, r1
 80136aa:	dd13      	ble.n	80136d4 <_strtod_l+0x3dc>
 80136ac:	4b7b      	ldr	r3, [pc, #492]	; (801389c <_strtod_l+0x5a4>)
 80136ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80136b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80136b6:	f7ec ffb7 	bl	8000628 <__aeabi_dmul>
 80136ba:	4682      	mov	sl, r0
 80136bc:	4648      	mov	r0, r9
 80136be:	468b      	mov	fp, r1
 80136c0:	f7ec ff38 	bl	8000534 <__aeabi_ui2d>
 80136c4:	4602      	mov	r2, r0
 80136c6:	460b      	mov	r3, r1
 80136c8:	4650      	mov	r0, sl
 80136ca:	4659      	mov	r1, fp
 80136cc:	f7ec fdf6 	bl	80002bc <__adddf3>
 80136d0:	4682      	mov	sl, r0
 80136d2:	468b      	mov	fp, r1
 80136d4:	2d0f      	cmp	r5, #15
 80136d6:	dc38      	bgt.n	801374a <_strtod_l+0x452>
 80136d8:	9b06      	ldr	r3, [sp, #24]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	f43f ae50 	beq.w	8013380 <_strtod_l+0x88>
 80136e0:	dd24      	ble.n	801372c <_strtod_l+0x434>
 80136e2:	2b16      	cmp	r3, #22
 80136e4:	dc0b      	bgt.n	80136fe <_strtod_l+0x406>
 80136e6:	496d      	ldr	r1, [pc, #436]	; (801389c <_strtod_l+0x5a4>)
 80136e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80136ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136f0:	4652      	mov	r2, sl
 80136f2:	465b      	mov	r3, fp
 80136f4:	f7ec ff98 	bl	8000628 <__aeabi_dmul>
 80136f8:	4682      	mov	sl, r0
 80136fa:	468b      	mov	fp, r1
 80136fc:	e640      	b.n	8013380 <_strtod_l+0x88>
 80136fe:	9a06      	ldr	r2, [sp, #24]
 8013700:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013704:	4293      	cmp	r3, r2
 8013706:	db20      	blt.n	801374a <_strtod_l+0x452>
 8013708:	4c64      	ldr	r4, [pc, #400]	; (801389c <_strtod_l+0x5a4>)
 801370a:	f1c5 050f 	rsb	r5, r5, #15
 801370e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013712:	4652      	mov	r2, sl
 8013714:	465b      	mov	r3, fp
 8013716:	e9d1 0100 	ldrd	r0, r1, [r1]
 801371a:	f7ec ff85 	bl	8000628 <__aeabi_dmul>
 801371e:	9b06      	ldr	r3, [sp, #24]
 8013720:	1b5d      	subs	r5, r3, r5
 8013722:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013726:	e9d4 2300 	ldrd	r2, r3, [r4]
 801372a:	e7e3      	b.n	80136f4 <_strtod_l+0x3fc>
 801372c:	9b06      	ldr	r3, [sp, #24]
 801372e:	3316      	adds	r3, #22
 8013730:	db0b      	blt.n	801374a <_strtod_l+0x452>
 8013732:	9b05      	ldr	r3, [sp, #20]
 8013734:	1b9e      	subs	r6, r3, r6
 8013736:	4b59      	ldr	r3, [pc, #356]	; (801389c <_strtod_l+0x5a4>)
 8013738:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801373c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013740:	4650      	mov	r0, sl
 8013742:	4659      	mov	r1, fp
 8013744:	f7ed f89a 	bl	800087c <__aeabi_ddiv>
 8013748:	e7d6      	b.n	80136f8 <_strtod_l+0x400>
 801374a:	9b06      	ldr	r3, [sp, #24]
 801374c:	eba5 0808 	sub.w	r8, r5, r8
 8013750:	4498      	add	r8, r3
 8013752:	f1b8 0f00 	cmp.w	r8, #0
 8013756:	dd74      	ble.n	8013842 <_strtod_l+0x54a>
 8013758:	f018 030f 	ands.w	r3, r8, #15
 801375c:	d00a      	beq.n	8013774 <_strtod_l+0x47c>
 801375e:	494f      	ldr	r1, [pc, #316]	; (801389c <_strtod_l+0x5a4>)
 8013760:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013764:	4652      	mov	r2, sl
 8013766:	465b      	mov	r3, fp
 8013768:	e9d1 0100 	ldrd	r0, r1, [r1]
 801376c:	f7ec ff5c 	bl	8000628 <__aeabi_dmul>
 8013770:	4682      	mov	sl, r0
 8013772:	468b      	mov	fp, r1
 8013774:	f038 080f 	bics.w	r8, r8, #15
 8013778:	d04f      	beq.n	801381a <_strtod_l+0x522>
 801377a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801377e:	dd22      	ble.n	80137c6 <_strtod_l+0x4ce>
 8013780:	2500      	movs	r5, #0
 8013782:	462e      	mov	r6, r5
 8013784:	9507      	str	r5, [sp, #28]
 8013786:	9505      	str	r5, [sp, #20]
 8013788:	2322      	movs	r3, #34	; 0x22
 801378a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80138a4 <_strtod_l+0x5ac>
 801378e:	6023      	str	r3, [r4, #0]
 8013790:	f04f 0a00 	mov.w	sl, #0
 8013794:	9b07      	ldr	r3, [sp, #28]
 8013796:	2b00      	cmp	r3, #0
 8013798:	f43f adf2 	beq.w	8013380 <_strtod_l+0x88>
 801379c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801379e:	4620      	mov	r0, r4
 80137a0:	f001 ff32 	bl	8015608 <_Bfree>
 80137a4:	9905      	ldr	r1, [sp, #20]
 80137a6:	4620      	mov	r0, r4
 80137a8:	f001 ff2e 	bl	8015608 <_Bfree>
 80137ac:	4631      	mov	r1, r6
 80137ae:	4620      	mov	r0, r4
 80137b0:	f001 ff2a 	bl	8015608 <_Bfree>
 80137b4:	9907      	ldr	r1, [sp, #28]
 80137b6:	4620      	mov	r0, r4
 80137b8:	f001 ff26 	bl	8015608 <_Bfree>
 80137bc:	4629      	mov	r1, r5
 80137be:	4620      	mov	r0, r4
 80137c0:	f001 ff22 	bl	8015608 <_Bfree>
 80137c4:	e5dc      	b.n	8013380 <_strtod_l+0x88>
 80137c6:	4b36      	ldr	r3, [pc, #216]	; (80138a0 <_strtod_l+0x5a8>)
 80137c8:	9304      	str	r3, [sp, #16]
 80137ca:	2300      	movs	r3, #0
 80137cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80137d0:	4650      	mov	r0, sl
 80137d2:	4659      	mov	r1, fp
 80137d4:	4699      	mov	r9, r3
 80137d6:	f1b8 0f01 	cmp.w	r8, #1
 80137da:	dc21      	bgt.n	8013820 <_strtod_l+0x528>
 80137dc:	b10b      	cbz	r3, 80137e2 <_strtod_l+0x4ea>
 80137de:	4682      	mov	sl, r0
 80137e0:	468b      	mov	fp, r1
 80137e2:	4b2f      	ldr	r3, [pc, #188]	; (80138a0 <_strtod_l+0x5a8>)
 80137e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80137e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80137ec:	4652      	mov	r2, sl
 80137ee:	465b      	mov	r3, fp
 80137f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80137f4:	f7ec ff18 	bl	8000628 <__aeabi_dmul>
 80137f8:	4b2a      	ldr	r3, [pc, #168]	; (80138a4 <_strtod_l+0x5ac>)
 80137fa:	460a      	mov	r2, r1
 80137fc:	400b      	ands	r3, r1
 80137fe:	492a      	ldr	r1, [pc, #168]	; (80138a8 <_strtod_l+0x5b0>)
 8013800:	428b      	cmp	r3, r1
 8013802:	4682      	mov	sl, r0
 8013804:	d8bc      	bhi.n	8013780 <_strtod_l+0x488>
 8013806:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801380a:	428b      	cmp	r3, r1
 801380c:	bf86      	itte	hi
 801380e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80138ac <_strtod_l+0x5b4>
 8013812:	f04f 3aff 	movhi.w	sl, #4294967295
 8013816:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801381a:	2300      	movs	r3, #0
 801381c:	9304      	str	r3, [sp, #16]
 801381e:	e084      	b.n	801392a <_strtod_l+0x632>
 8013820:	f018 0f01 	tst.w	r8, #1
 8013824:	d005      	beq.n	8013832 <_strtod_l+0x53a>
 8013826:	9b04      	ldr	r3, [sp, #16]
 8013828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801382c:	f7ec fefc 	bl	8000628 <__aeabi_dmul>
 8013830:	2301      	movs	r3, #1
 8013832:	9a04      	ldr	r2, [sp, #16]
 8013834:	3208      	adds	r2, #8
 8013836:	f109 0901 	add.w	r9, r9, #1
 801383a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801383e:	9204      	str	r2, [sp, #16]
 8013840:	e7c9      	b.n	80137d6 <_strtod_l+0x4de>
 8013842:	d0ea      	beq.n	801381a <_strtod_l+0x522>
 8013844:	f1c8 0800 	rsb	r8, r8, #0
 8013848:	f018 020f 	ands.w	r2, r8, #15
 801384c:	d00a      	beq.n	8013864 <_strtod_l+0x56c>
 801384e:	4b13      	ldr	r3, [pc, #76]	; (801389c <_strtod_l+0x5a4>)
 8013850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013854:	4650      	mov	r0, sl
 8013856:	4659      	mov	r1, fp
 8013858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385c:	f7ed f80e 	bl	800087c <__aeabi_ddiv>
 8013860:	4682      	mov	sl, r0
 8013862:	468b      	mov	fp, r1
 8013864:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013868:	d0d7      	beq.n	801381a <_strtod_l+0x522>
 801386a:	f1b8 0f1f 	cmp.w	r8, #31
 801386e:	dd1f      	ble.n	80138b0 <_strtod_l+0x5b8>
 8013870:	2500      	movs	r5, #0
 8013872:	462e      	mov	r6, r5
 8013874:	9507      	str	r5, [sp, #28]
 8013876:	9505      	str	r5, [sp, #20]
 8013878:	2322      	movs	r3, #34	; 0x22
 801387a:	f04f 0a00 	mov.w	sl, #0
 801387e:	f04f 0b00 	mov.w	fp, #0
 8013882:	6023      	str	r3, [r4, #0]
 8013884:	e786      	b.n	8013794 <_strtod_l+0x49c>
 8013886:	bf00      	nop
 8013888:	0802aba1 	.word	0x0802aba1
 801388c:	0802abe4 	.word	0x0802abe4
 8013890:	0802ab99 	.word	0x0802ab99
 8013894:	0802add4 	.word	0x0802add4
 8013898:	0802accf 	.word	0x0802accf
 801389c:	0802af48 	.word	0x0802af48
 80138a0:	0802af20 	.word	0x0802af20
 80138a4:	7ff00000 	.word	0x7ff00000
 80138a8:	7ca00000 	.word	0x7ca00000
 80138ac:	7fefffff 	.word	0x7fefffff
 80138b0:	f018 0310 	ands.w	r3, r8, #16
 80138b4:	bf18      	it	ne
 80138b6:	236a      	movne	r3, #106	; 0x6a
 80138b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8013c68 <_strtod_l+0x970>
 80138bc:	9304      	str	r3, [sp, #16]
 80138be:	4650      	mov	r0, sl
 80138c0:	4659      	mov	r1, fp
 80138c2:	2300      	movs	r3, #0
 80138c4:	f018 0f01 	tst.w	r8, #1
 80138c8:	d004      	beq.n	80138d4 <_strtod_l+0x5dc>
 80138ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80138ce:	f7ec feab 	bl	8000628 <__aeabi_dmul>
 80138d2:	2301      	movs	r3, #1
 80138d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80138d8:	f109 0908 	add.w	r9, r9, #8
 80138dc:	d1f2      	bne.n	80138c4 <_strtod_l+0x5cc>
 80138de:	b10b      	cbz	r3, 80138e4 <_strtod_l+0x5ec>
 80138e0:	4682      	mov	sl, r0
 80138e2:	468b      	mov	fp, r1
 80138e4:	9b04      	ldr	r3, [sp, #16]
 80138e6:	b1c3      	cbz	r3, 801391a <_strtod_l+0x622>
 80138e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80138ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	4659      	mov	r1, fp
 80138f4:	dd11      	ble.n	801391a <_strtod_l+0x622>
 80138f6:	2b1f      	cmp	r3, #31
 80138f8:	f340 8124 	ble.w	8013b44 <_strtod_l+0x84c>
 80138fc:	2b34      	cmp	r3, #52	; 0x34
 80138fe:	bfde      	ittt	le
 8013900:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013904:	f04f 33ff 	movle.w	r3, #4294967295
 8013908:	fa03 f202 	lslle.w	r2, r3, r2
 801390c:	f04f 0a00 	mov.w	sl, #0
 8013910:	bfcc      	ite	gt
 8013912:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013916:	ea02 0b01 	andle.w	fp, r2, r1
 801391a:	2200      	movs	r2, #0
 801391c:	2300      	movs	r3, #0
 801391e:	4650      	mov	r0, sl
 8013920:	4659      	mov	r1, fp
 8013922:	f7ed f8e9 	bl	8000af8 <__aeabi_dcmpeq>
 8013926:	2800      	cmp	r0, #0
 8013928:	d1a2      	bne.n	8013870 <_strtod_l+0x578>
 801392a:	9b07      	ldr	r3, [sp, #28]
 801392c:	9300      	str	r3, [sp, #0]
 801392e:	9908      	ldr	r1, [sp, #32]
 8013930:	462b      	mov	r3, r5
 8013932:	463a      	mov	r2, r7
 8013934:	4620      	mov	r0, r4
 8013936:	f001 fecf 	bl	80156d8 <__s2b>
 801393a:	9007      	str	r0, [sp, #28]
 801393c:	2800      	cmp	r0, #0
 801393e:	f43f af1f 	beq.w	8013780 <_strtod_l+0x488>
 8013942:	9b05      	ldr	r3, [sp, #20]
 8013944:	1b9e      	subs	r6, r3, r6
 8013946:	9b06      	ldr	r3, [sp, #24]
 8013948:	2b00      	cmp	r3, #0
 801394a:	bfb4      	ite	lt
 801394c:	4633      	movlt	r3, r6
 801394e:	2300      	movge	r3, #0
 8013950:	930c      	str	r3, [sp, #48]	; 0x30
 8013952:	9b06      	ldr	r3, [sp, #24]
 8013954:	2500      	movs	r5, #0
 8013956:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801395a:	9312      	str	r3, [sp, #72]	; 0x48
 801395c:	462e      	mov	r6, r5
 801395e:	9b07      	ldr	r3, [sp, #28]
 8013960:	4620      	mov	r0, r4
 8013962:	6859      	ldr	r1, [r3, #4]
 8013964:	f001 fe10 	bl	8015588 <_Balloc>
 8013968:	9005      	str	r0, [sp, #20]
 801396a:	2800      	cmp	r0, #0
 801396c:	f43f af0c 	beq.w	8013788 <_strtod_l+0x490>
 8013970:	9b07      	ldr	r3, [sp, #28]
 8013972:	691a      	ldr	r2, [r3, #16]
 8013974:	3202      	adds	r2, #2
 8013976:	f103 010c 	add.w	r1, r3, #12
 801397a:	0092      	lsls	r2, r2, #2
 801397c:	300c      	adds	r0, #12
 801397e:	f001 fdf5 	bl	801556c <memcpy>
 8013982:	ec4b ab10 	vmov	d0, sl, fp
 8013986:	aa1a      	add	r2, sp, #104	; 0x68
 8013988:	a919      	add	r1, sp, #100	; 0x64
 801398a:	4620      	mov	r0, r4
 801398c:	f002 f9ea 	bl	8015d64 <__d2b>
 8013990:	ec4b ab18 	vmov	d8, sl, fp
 8013994:	9018      	str	r0, [sp, #96]	; 0x60
 8013996:	2800      	cmp	r0, #0
 8013998:	f43f aef6 	beq.w	8013788 <_strtod_l+0x490>
 801399c:	2101      	movs	r1, #1
 801399e:	4620      	mov	r0, r4
 80139a0:	f001 ff34 	bl	801580c <__i2b>
 80139a4:	4606      	mov	r6, r0
 80139a6:	2800      	cmp	r0, #0
 80139a8:	f43f aeee 	beq.w	8013788 <_strtod_l+0x490>
 80139ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80139ae:	9904      	ldr	r1, [sp, #16]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	bfab      	itete	ge
 80139b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80139b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80139b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80139ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80139be:	bfac      	ite	ge
 80139c0:	eb03 0902 	addge.w	r9, r3, r2
 80139c4:	1ad7      	sublt	r7, r2, r3
 80139c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80139c8:	eba3 0801 	sub.w	r8, r3, r1
 80139cc:	4490      	add	r8, r2
 80139ce:	4ba1      	ldr	r3, [pc, #644]	; (8013c54 <_strtod_l+0x95c>)
 80139d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80139d4:	4598      	cmp	r8, r3
 80139d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80139da:	f280 80c7 	bge.w	8013b6c <_strtod_l+0x874>
 80139de:	eba3 0308 	sub.w	r3, r3, r8
 80139e2:	2b1f      	cmp	r3, #31
 80139e4:	eba2 0203 	sub.w	r2, r2, r3
 80139e8:	f04f 0101 	mov.w	r1, #1
 80139ec:	f300 80b1 	bgt.w	8013b52 <_strtod_l+0x85a>
 80139f0:	fa01 f303 	lsl.w	r3, r1, r3
 80139f4:	930d      	str	r3, [sp, #52]	; 0x34
 80139f6:	2300      	movs	r3, #0
 80139f8:	9308      	str	r3, [sp, #32]
 80139fa:	eb09 0802 	add.w	r8, r9, r2
 80139fe:	9b04      	ldr	r3, [sp, #16]
 8013a00:	45c1      	cmp	r9, r8
 8013a02:	4417      	add	r7, r2
 8013a04:	441f      	add	r7, r3
 8013a06:	464b      	mov	r3, r9
 8013a08:	bfa8      	it	ge
 8013a0a:	4643      	movge	r3, r8
 8013a0c:	42bb      	cmp	r3, r7
 8013a0e:	bfa8      	it	ge
 8013a10:	463b      	movge	r3, r7
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	bfc2      	ittt	gt
 8013a16:	eba8 0803 	subgt.w	r8, r8, r3
 8013a1a:	1aff      	subgt	r7, r7, r3
 8013a1c:	eba9 0903 	subgt.w	r9, r9, r3
 8013a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	dd17      	ble.n	8013a56 <_strtod_l+0x75e>
 8013a26:	4631      	mov	r1, r6
 8013a28:	461a      	mov	r2, r3
 8013a2a:	4620      	mov	r0, r4
 8013a2c:	f001 ffae 	bl	801598c <__pow5mult>
 8013a30:	4606      	mov	r6, r0
 8013a32:	2800      	cmp	r0, #0
 8013a34:	f43f aea8 	beq.w	8013788 <_strtod_l+0x490>
 8013a38:	4601      	mov	r1, r0
 8013a3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	f001 fefb 	bl	8015838 <__multiply>
 8013a42:	900b      	str	r0, [sp, #44]	; 0x2c
 8013a44:	2800      	cmp	r0, #0
 8013a46:	f43f ae9f 	beq.w	8013788 <_strtod_l+0x490>
 8013a4a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f001 fddb 	bl	8015608 <_Bfree>
 8013a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a54:	9318      	str	r3, [sp, #96]	; 0x60
 8013a56:	f1b8 0f00 	cmp.w	r8, #0
 8013a5a:	f300 808c 	bgt.w	8013b76 <_strtod_l+0x87e>
 8013a5e:	9b06      	ldr	r3, [sp, #24]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	dd08      	ble.n	8013a76 <_strtod_l+0x77e>
 8013a64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a66:	9905      	ldr	r1, [sp, #20]
 8013a68:	4620      	mov	r0, r4
 8013a6a:	f001 ff8f 	bl	801598c <__pow5mult>
 8013a6e:	9005      	str	r0, [sp, #20]
 8013a70:	2800      	cmp	r0, #0
 8013a72:	f43f ae89 	beq.w	8013788 <_strtod_l+0x490>
 8013a76:	2f00      	cmp	r7, #0
 8013a78:	dd08      	ble.n	8013a8c <_strtod_l+0x794>
 8013a7a:	9905      	ldr	r1, [sp, #20]
 8013a7c:	463a      	mov	r2, r7
 8013a7e:	4620      	mov	r0, r4
 8013a80:	f001 ffde 	bl	8015a40 <__lshift>
 8013a84:	9005      	str	r0, [sp, #20]
 8013a86:	2800      	cmp	r0, #0
 8013a88:	f43f ae7e 	beq.w	8013788 <_strtod_l+0x490>
 8013a8c:	f1b9 0f00 	cmp.w	r9, #0
 8013a90:	dd08      	ble.n	8013aa4 <_strtod_l+0x7ac>
 8013a92:	4631      	mov	r1, r6
 8013a94:	464a      	mov	r2, r9
 8013a96:	4620      	mov	r0, r4
 8013a98:	f001 ffd2 	bl	8015a40 <__lshift>
 8013a9c:	4606      	mov	r6, r0
 8013a9e:	2800      	cmp	r0, #0
 8013aa0:	f43f ae72 	beq.w	8013788 <_strtod_l+0x490>
 8013aa4:	9a05      	ldr	r2, [sp, #20]
 8013aa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	f002 f855 	bl	8015b58 <__mdiff>
 8013aae:	4605      	mov	r5, r0
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	f43f ae69 	beq.w	8013788 <_strtod_l+0x490>
 8013ab6:	68c3      	ldr	r3, [r0, #12]
 8013ab8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013aba:	2300      	movs	r3, #0
 8013abc:	60c3      	str	r3, [r0, #12]
 8013abe:	4631      	mov	r1, r6
 8013ac0:	f002 f82e 	bl	8015b20 <__mcmp>
 8013ac4:	2800      	cmp	r0, #0
 8013ac6:	da60      	bge.n	8013b8a <_strtod_l+0x892>
 8013ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013aca:	ea53 030a 	orrs.w	r3, r3, sl
 8013ace:	f040 8082 	bne.w	8013bd6 <_strtod_l+0x8de>
 8013ad2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d17d      	bne.n	8013bd6 <_strtod_l+0x8de>
 8013ada:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013ade:	0d1b      	lsrs	r3, r3, #20
 8013ae0:	051b      	lsls	r3, r3, #20
 8013ae2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013ae6:	d976      	bls.n	8013bd6 <_strtod_l+0x8de>
 8013ae8:	696b      	ldr	r3, [r5, #20]
 8013aea:	b913      	cbnz	r3, 8013af2 <_strtod_l+0x7fa>
 8013aec:	692b      	ldr	r3, [r5, #16]
 8013aee:	2b01      	cmp	r3, #1
 8013af0:	dd71      	ble.n	8013bd6 <_strtod_l+0x8de>
 8013af2:	4629      	mov	r1, r5
 8013af4:	2201      	movs	r2, #1
 8013af6:	4620      	mov	r0, r4
 8013af8:	f001 ffa2 	bl	8015a40 <__lshift>
 8013afc:	4631      	mov	r1, r6
 8013afe:	4605      	mov	r5, r0
 8013b00:	f002 f80e 	bl	8015b20 <__mcmp>
 8013b04:	2800      	cmp	r0, #0
 8013b06:	dd66      	ble.n	8013bd6 <_strtod_l+0x8de>
 8013b08:	9904      	ldr	r1, [sp, #16]
 8013b0a:	4a53      	ldr	r2, [pc, #332]	; (8013c58 <_strtod_l+0x960>)
 8013b0c:	465b      	mov	r3, fp
 8013b0e:	2900      	cmp	r1, #0
 8013b10:	f000 8081 	beq.w	8013c16 <_strtod_l+0x91e>
 8013b14:	ea02 010b 	and.w	r1, r2, fp
 8013b18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013b1c:	dc7b      	bgt.n	8013c16 <_strtod_l+0x91e>
 8013b1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013b22:	f77f aea9 	ble.w	8013878 <_strtod_l+0x580>
 8013b26:	4b4d      	ldr	r3, [pc, #308]	; (8013c5c <_strtod_l+0x964>)
 8013b28:	4650      	mov	r0, sl
 8013b2a:	4659      	mov	r1, fp
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	f7ec fd7b 	bl	8000628 <__aeabi_dmul>
 8013b32:	460b      	mov	r3, r1
 8013b34:	4303      	orrs	r3, r0
 8013b36:	bf08      	it	eq
 8013b38:	2322      	moveq	r3, #34	; 0x22
 8013b3a:	4682      	mov	sl, r0
 8013b3c:	468b      	mov	fp, r1
 8013b3e:	bf08      	it	eq
 8013b40:	6023      	streq	r3, [r4, #0]
 8013b42:	e62b      	b.n	801379c <_strtod_l+0x4a4>
 8013b44:	f04f 32ff 	mov.w	r2, #4294967295
 8013b48:	fa02 f303 	lsl.w	r3, r2, r3
 8013b4c:	ea03 0a0a 	and.w	sl, r3, sl
 8013b50:	e6e3      	b.n	801391a <_strtod_l+0x622>
 8013b52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013b56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013b5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013b5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013b62:	fa01 f308 	lsl.w	r3, r1, r8
 8013b66:	9308      	str	r3, [sp, #32]
 8013b68:	910d      	str	r1, [sp, #52]	; 0x34
 8013b6a:	e746      	b.n	80139fa <_strtod_l+0x702>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	9308      	str	r3, [sp, #32]
 8013b70:	2301      	movs	r3, #1
 8013b72:	930d      	str	r3, [sp, #52]	; 0x34
 8013b74:	e741      	b.n	80139fa <_strtod_l+0x702>
 8013b76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013b78:	4642      	mov	r2, r8
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	f001 ff60 	bl	8015a40 <__lshift>
 8013b80:	9018      	str	r0, [sp, #96]	; 0x60
 8013b82:	2800      	cmp	r0, #0
 8013b84:	f47f af6b 	bne.w	8013a5e <_strtod_l+0x766>
 8013b88:	e5fe      	b.n	8013788 <_strtod_l+0x490>
 8013b8a:	465f      	mov	r7, fp
 8013b8c:	d16e      	bne.n	8013c6c <_strtod_l+0x974>
 8013b8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013b94:	b342      	cbz	r2, 8013be8 <_strtod_l+0x8f0>
 8013b96:	4a32      	ldr	r2, [pc, #200]	; (8013c60 <_strtod_l+0x968>)
 8013b98:	4293      	cmp	r3, r2
 8013b9a:	d128      	bne.n	8013bee <_strtod_l+0x8f6>
 8013b9c:	9b04      	ldr	r3, [sp, #16]
 8013b9e:	4651      	mov	r1, sl
 8013ba0:	b1eb      	cbz	r3, 8013bde <_strtod_l+0x8e6>
 8013ba2:	4b2d      	ldr	r3, [pc, #180]	; (8013c58 <_strtod_l+0x960>)
 8013ba4:	403b      	ands	r3, r7
 8013ba6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013baa:	f04f 32ff 	mov.w	r2, #4294967295
 8013bae:	d819      	bhi.n	8013be4 <_strtod_l+0x8ec>
 8013bb0:	0d1b      	lsrs	r3, r3, #20
 8013bb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8013bba:	4299      	cmp	r1, r3
 8013bbc:	d117      	bne.n	8013bee <_strtod_l+0x8f6>
 8013bbe:	4b29      	ldr	r3, [pc, #164]	; (8013c64 <_strtod_l+0x96c>)
 8013bc0:	429f      	cmp	r7, r3
 8013bc2:	d102      	bne.n	8013bca <_strtod_l+0x8d2>
 8013bc4:	3101      	adds	r1, #1
 8013bc6:	f43f addf 	beq.w	8013788 <_strtod_l+0x490>
 8013bca:	4b23      	ldr	r3, [pc, #140]	; (8013c58 <_strtod_l+0x960>)
 8013bcc:	403b      	ands	r3, r7
 8013bce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013bd2:	f04f 0a00 	mov.w	sl, #0
 8013bd6:	9b04      	ldr	r3, [sp, #16]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d1a4      	bne.n	8013b26 <_strtod_l+0x82e>
 8013bdc:	e5de      	b.n	801379c <_strtod_l+0x4a4>
 8013bde:	f04f 33ff 	mov.w	r3, #4294967295
 8013be2:	e7ea      	b.n	8013bba <_strtod_l+0x8c2>
 8013be4:	4613      	mov	r3, r2
 8013be6:	e7e8      	b.n	8013bba <_strtod_l+0x8c2>
 8013be8:	ea53 030a 	orrs.w	r3, r3, sl
 8013bec:	d08c      	beq.n	8013b08 <_strtod_l+0x810>
 8013bee:	9b08      	ldr	r3, [sp, #32]
 8013bf0:	b1db      	cbz	r3, 8013c2a <_strtod_l+0x932>
 8013bf2:	423b      	tst	r3, r7
 8013bf4:	d0ef      	beq.n	8013bd6 <_strtod_l+0x8de>
 8013bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bf8:	9a04      	ldr	r2, [sp, #16]
 8013bfa:	4650      	mov	r0, sl
 8013bfc:	4659      	mov	r1, fp
 8013bfe:	b1c3      	cbz	r3, 8013c32 <_strtod_l+0x93a>
 8013c00:	f7ff fb5e 	bl	80132c0 <sulp>
 8013c04:	4602      	mov	r2, r0
 8013c06:	460b      	mov	r3, r1
 8013c08:	ec51 0b18 	vmov	r0, r1, d8
 8013c0c:	f7ec fb56 	bl	80002bc <__adddf3>
 8013c10:	4682      	mov	sl, r0
 8013c12:	468b      	mov	fp, r1
 8013c14:	e7df      	b.n	8013bd6 <_strtod_l+0x8de>
 8013c16:	4013      	ands	r3, r2
 8013c18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013c1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013c20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013c24:	f04f 3aff 	mov.w	sl, #4294967295
 8013c28:	e7d5      	b.n	8013bd6 <_strtod_l+0x8de>
 8013c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c2c:	ea13 0f0a 	tst.w	r3, sl
 8013c30:	e7e0      	b.n	8013bf4 <_strtod_l+0x8fc>
 8013c32:	f7ff fb45 	bl	80132c0 <sulp>
 8013c36:	4602      	mov	r2, r0
 8013c38:	460b      	mov	r3, r1
 8013c3a:	ec51 0b18 	vmov	r0, r1, d8
 8013c3e:	f7ec fb3b 	bl	80002b8 <__aeabi_dsub>
 8013c42:	2200      	movs	r2, #0
 8013c44:	2300      	movs	r3, #0
 8013c46:	4682      	mov	sl, r0
 8013c48:	468b      	mov	fp, r1
 8013c4a:	f7ec ff55 	bl	8000af8 <__aeabi_dcmpeq>
 8013c4e:	2800      	cmp	r0, #0
 8013c50:	d0c1      	beq.n	8013bd6 <_strtod_l+0x8de>
 8013c52:	e611      	b.n	8013878 <_strtod_l+0x580>
 8013c54:	fffffc02 	.word	0xfffffc02
 8013c58:	7ff00000 	.word	0x7ff00000
 8013c5c:	39500000 	.word	0x39500000
 8013c60:	000fffff 	.word	0x000fffff
 8013c64:	7fefffff 	.word	0x7fefffff
 8013c68:	0802abf8 	.word	0x0802abf8
 8013c6c:	4631      	mov	r1, r6
 8013c6e:	4628      	mov	r0, r5
 8013c70:	f002 f8d4 	bl	8015e1c <__ratio>
 8013c74:	ec59 8b10 	vmov	r8, r9, d0
 8013c78:	ee10 0a10 	vmov	r0, s0
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013c82:	4649      	mov	r1, r9
 8013c84:	f7ec ff4c 	bl	8000b20 <__aeabi_dcmple>
 8013c88:	2800      	cmp	r0, #0
 8013c8a:	d07a      	beq.n	8013d82 <_strtod_l+0xa8a>
 8013c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d04a      	beq.n	8013d28 <_strtod_l+0xa30>
 8013c92:	4b95      	ldr	r3, [pc, #596]	; (8013ee8 <_strtod_l+0xbf0>)
 8013c94:	2200      	movs	r2, #0
 8013c96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013c9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013ee8 <_strtod_l+0xbf0>
 8013c9e:	f04f 0800 	mov.w	r8, #0
 8013ca2:	4b92      	ldr	r3, [pc, #584]	; (8013eec <_strtod_l+0xbf4>)
 8013ca4:	403b      	ands	r3, r7
 8013ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8013ca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013caa:	4b91      	ldr	r3, [pc, #580]	; (8013ef0 <_strtod_l+0xbf8>)
 8013cac:	429a      	cmp	r2, r3
 8013cae:	f040 80b0 	bne.w	8013e12 <_strtod_l+0xb1a>
 8013cb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013cb6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013cba:	ec4b ab10 	vmov	d0, sl, fp
 8013cbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013cc2:	f001 ffd3 	bl	8015c6c <__ulp>
 8013cc6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013cca:	ec53 2b10 	vmov	r2, r3, d0
 8013cce:	f7ec fcab 	bl	8000628 <__aeabi_dmul>
 8013cd2:	4652      	mov	r2, sl
 8013cd4:	465b      	mov	r3, fp
 8013cd6:	f7ec faf1 	bl	80002bc <__adddf3>
 8013cda:	460b      	mov	r3, r1
 8013cdc:	4983      	ldr	r1, [pc, #524]	; (8013eec <_strtod_l+0xbf4>)
 8013cde:	4a85      	ldr	r2, [pc, #532]	; (8013ef4 <_strtod_l+0xbfc>)
 8013ce0:	4019      	ands	r1, r3
 8013ce2:	4291      	cmp	r1, r2
 8013ce4:	4682      	mov	sl, r0
 8013ce6:	d960      	bls.n	8013daa <_strtod_l+0xab2>
 8013ce8:	ee18 3a90 	vmov	r3, s17
 8013cec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	d104      	bne.n	8013cfe <_strtod_l+0xa06>
 8013cf4:	ee18 3a10 	vmov	r3, s16
 8013cf8:	3301      	adds	r3, #1
 8013cfa:	f43f ad45 	beq.w	8013788 <_strtod_l+0x490>
 8013cfe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8013f00 <_strtod_l+0xc08>
 8013d02:	f04f 3aff 	mov.w	sl, #4294967295
 8013d06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013d08:	4620      	mov	r0, r4
 8013d0a:	f001 fc7d 	bl	8015608 <_Bfree>
 8013d0e:	9905      	ldr	r1, [sp, #20]
 8013d10:	4620      	mov	r0, r4
 8013d12:	f001 fc79 	bl	8015608 <_Bfree>
 8013d16:	4631      	mov	r1, r6
 8013d18:	4620      	mov	r0, r4
 8013d1a:	f001 fc75 	bl	8015608 <_Bfree>
 8013d1e:	4629      	mov	r1, r5
 8013d20:	4620      	mov	r0, r4
 8013d22:	f001 fc71 	bl	8015608 <_Bfree>
 8013d26:	e61a      	b.n	801395e <_strtod_l+0x666>
 8013d28:	f1ba 0f00 	cmp.w	sl, #0
 8013d2c:	d11b      	bne.n	8013d66 <_strtod_l+0xa6e>
 8013d2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d32:	b9f3      	cbnz	r3, 8013d72 <_strtod_l+0xa7a>
 8013d34:	4b6c      	ldr	r3, [pc, #432]	; (8013ee8 <_strtod_l+0xbf0>)
 8013d36:	2200      	movs	r2, #0
 8013d38:	4640      	mov	r0, r8
 8013d3a:	4649      	mov	r1, r9
 8013d3c:	f7ec fee6 	bl	8000b0c <__aeabi_dcmplt>
 8013d40:	b9d0      	cbnz	r0, 8013d78 <_strtod_l+0xa80>
 8013d42:	4640      	mov	r0, r8
 8013d44:	4649      	mov	r1, r9
 8013d46:	4b6c      	ldr	r3, [pc, #432]	; (8013ef8 <_strtod_l+0xc00>)
 8013d48:	2200      	movs	r2, #0
 8013d4a:	f7ec fc6d 	bl	8000628 <__aeabi_dmul>
 8013d4e:	4680      	mov	r8, r0
 8013d50:	4689      	mov	r9, r1
 8013d52:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013d56:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8013d5a:	9315      	str	r3, [sp, #84]	; 0x54
 8013d5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013d60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013d64:	e79d      	b.n	8013ca2 <_strtod_l+0x9aa>
 8013d66:	f1ba 0f01 	cmp.w	sl, #1
 8013d6a:	d102      	bne.n	8013d72 <_strtod_l+0xa7a>
 8013d6c:	2f00      	cmp	r7, #0
 8013d6e:	f43f ad83 	beq.w	8013878 <_strtod_l+0x580>
 8013d72:	4b62      	ldr	r3, [pc, #392]	; (8013efc <_strtod_l+0xc04>)
 8013d74:	2200      	movs	r2, #0
 8013d76:	e78e      	b.n	8013c96 <_strtod_l+0x99e>
 8013d78:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8013ef8 <_strtod_l+0xc00>
 8013d7c:	f04f 0800 	mov.w	r8, #0
 8013d80:	e7e7      	b.n	8013d52 <_strtod_l+0xa5a>
 8013d82:	4b5d      	ldr	r3, [pc, #372]	; (8013ef8 <_strtod_l+0xc00>)
 8013d84:	4640      	mov	r0, r8
 8013d86:	4649      	mov	r1, r9
 8013d88:	2200      	movs	r2, #0
 8013d8a:	f7ec fc4d 	bl	8000628 <__aeabi_dmul>
 8013d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d90:	4680      	mov	r8, r0
 8013d92:	4689      	mov	r9, r1
 8013d94:	b933      	cbnz	r3, 8013da4 <_strtod_l+0xaac>
 8013d96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d9a:	900e      	str	r0, [sp, #56]	; 0x38
 8013d9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013da2:	e7dd      	b.n	8013d60 <_strtod_l+0xa68>
 8013da4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8013da8:	e7f9      	b.n	8013d9e <_strtod_l+0xaa6>
 8013daa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013dae:	9b04      	ldr	r3, [sp, #16]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d1a8      	bne.n	8013d06 <_strtod_l+0xa0e>
 8013db4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013db8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013dba:	0d1b      	lsrs	r3, r3, #20
 8013dbc:	051b      	lsls	r3, r3, #20
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d1a1      	bne.n	8013d06 <_strtod_l+0xa0e>
 8013dc2:	4640      	mov	r0, r8
 8013dc4:	4649      	mov	r1, r9
 8013dc6:	f7ec ff8f 	bl	8000ce8 <__aeabi_d2lz>
 8013dca:	f7ec fbff 	bl	80005cc <__aeabi_l2d>
 8013dce:	4602      	mov	r2, r0
 8013dd0:	460b      	mov	r3, r1
 8013dd2:	4640      	mov	r0, r8
 8013dd4:	4649      	mov	r1, r9
 8013dd6:	f7ec fa6f 	bl	80002b8 <__aeabi_dsub>
 8013dda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013ddc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013de0:	ea43 030a 	orr.w	r3, r3, sl
 8013de4:	4313      	orrs	r3, r2
 8013de6:	4680      	mov	r8, r0
 8013de8:	4689      	mov	r9, r1
 8013dea:	d055      	beq.n	8013e98 <_strtod_l+0xba0>
 8013dec:	a336      	add	r3, pc, #216	; (adr r3, 8013ec8 <_strtod_l+0xbd0>)
 8013dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df2:	f7ec fe8b 	bl	8000b0c <__aeabi_dcmplt>
 8013df6:	2800      	cmp	r0, #0
 8013df8:	f47f acd0 	bne.w	801379c <_strtod_l+0x4a4>
 8013dfc:	a334      	add	r3, pc, #208	; (adr r3, 8013ed0 <_strtod_l+0xbd8>)
 8013dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e02:	4640      	mov	r0, r8
 8013e04:	4649      	mov	r1, r9
 8013e06:	f7ec fe9f 	bl	8000b48 <__aeabi_dcmpgt>
 8013e0a:	2800      	cmp	r0, #0
 8013e0c:	f43f af7b 	beq.w	8013d06 <_strtod_l+0xa0e>
 8013e10:	e4c4      	b.n	801379c <_strtod_l+0x4a4>
 8013e12:	9b04      	ldr	r3, [sp, #16]
 8013e14:	b333      	cbz	r3, 8013e64 <_strtod_l+0xb6c>
 8013e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e18:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013e1c:	d822      	bhi.n	8013e64 <_strtod_l+0xb6c>
 8013e1e:	a32e      	add	r3, pc, #184	; (adr r3, 8013ed8 <_strtod_l+0xbe0>)
 8013e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e24:	4640      	mov	r0, r8
 8013e26:	4649      	mov	r1, r9
 8013e28:	f7ec fe7a 	bl	8000b20 <__aeabi_dcmple>
 8013e2c:	b1a0      	cbz	r0, 8013e58 <_strtod_l+0xb60>
 8013e2e:	4649      	mov	r1, r9
 8013e30:	4640      	mov	r0, r8
 8013e32:	f7ec fed1 	bl	8000bd8 <__aeabi_d2uiz>
 8013e36:	2801      	cmp	r0, #1
 8013e38:	bf38      	it	cc
 8013e3a:	2001      	movcc	r0, #1
 8013e3c:	f7ec fb7a 	bl	8000534 <__aeabi_ui2d>
 8013e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e42:	4680      	mov	r8, r0
 8013e44:	4689      	mov	r9, r1
 8013e46:	bb23      	cbnz	r3, 8013e92 <_strtod_l+0xb9a>
 8013e48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e4c:	9010      	str	r0, [sp, #64]	; 0x40
 8013e4e:	9311      	str	r3, [sp, #68]	; 0x44
 8013e50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013e54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e5c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013e60:	1a9b      	subs	r3, r3, r2
 8013e62:	9309      	str	r3, [sp, #36]	; 0x24
 8013e64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e68:	eeb0 0a48 	vmov.f32	s0, s16
 8013e6c:	eef0 0a68 	vmov.f32	s1, s17
 8013e70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e74:	f001 fefa 	bl	8015c6c <__ulp>
 8013e78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e7c:	ec53 2b10 	vmov	r2, r3, d0
 8013e80:	f7ec fbd2 	bl	8000628 <__aeabi_dmul>
 8013e84:	ec53 2b18 	vmov	r2, r3, d8
 8013e88:	f7ec fa18 	bl	80002bc <__adddf3>
 8013e8c:	4682      	mov	sl, r0
 8013e8e:	468b      	mov	fp, r1
 8013e90:	e78d      	b.n	8013dae <_strtod_l+0xab6>
 8013e92:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8013e96:	e7db      	b.n	8013e50 <_strtod_l+0xb58>
 8013e98:	a311      	add	r3, pc, #68	; (adr r3, 8013ee0 <_strtod_l+0xbe8>)
 8013e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e9e:	f7ec fe35 	bl	8000b0c <__aeabi_dcmplt>
 8013ea2:	e7b2      	b.n	8013e0a <_strtod_l+0xb12>
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8013ea8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013eaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013eac:	6013      	str	r3, [r2, #0]
 8013eae:	f7ff ba6b 	b.w	8013388 <_strtod_l+0x90>
 8013eb2:	2a65      	cmp	r2, #101	; 0x65
 8013eb4:	f43f ab5f 	beq.w	8013576 <_strtod_l+0x27e>
 8013eb8:	2a45      	cmp	r2, #69	; 0x45
 8013eba:	f43f ab5c 	beq.w	8013576 <_strtod_l+0x27e>
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	f7ff bb94 	b.w	80135ec <_strtod_l+0x2f4>
 8013ec4:	f3af 8000 	nop.w
 8013ec8:	94a03595 	.word	0x94a03595
 8013ecc:	3fdfffff 	.word	0x3fdfffff
 8013ed0:	35afe535 	.word	0x35afe535
 8013ed4:	3fe00000 	.word	0x3fe00000
 8013ed8:	ffc00000 	.word	0xffc00000
 8013edc:	41dfffff 	.word	0x41dfffff
 8013ee0:	94a03595 	.word	0x94a03595
 8013ee4:	3fcfffff 	.word	0x3fcfffff
 8013ee8:	3ff00000 	.word	0x3ff00000
 8013eec:	7ff00000 	.word	0x7ff00000
 8013ef0:	7fe00000 	.word	0x7fe00000
 8013ef4:	7c9fffff 	.word	0x7c9fffff
 8013ef8:	3fe00000 	.word	0x3fe00000
 8013efc:	bff00000 	.word	0xbff00000
 8013f00:	7fefffff 	.word	0x7fefffff

08013f04 <_strtod_r>:
 8013f04:	4b01      	ldr	r3, [pc, #4]	; (8013f0c <_strtod_r+0x8>)
 8013f06:	f7ff b9f7 	b.w	80132f8 <_strtod_l>
 8013f0a:	bf00      	nop
 8013f0c:	200000ac 	.word	0x200000ac

08013f10 <strtod>:
 8013f10:	460a      	mov	r2, r1
 8013f12:	4601      	mov	r1, r0
 8013f14:	4802      	ldr	r0, [pc, #8]	; (8013f20 <strtod+0x10>)
 8013f16:	4b03      	ldr	r3, [pc, #12]	; (8013f24 <strtod+0x14>)
 8013f18:	6800      	ldr	r0, [r0, #0]
 8013f1a:	f7ff b9ed 	b.w	80132f8 <_strtod_l>
 8013f1e:	bf00      	nop
 8013f20:	20000044 	.word	0x20000044
 8013f24:	200000ac 	.word	0x200000ac

08013f28 <strtok>:
 8013f28:	4b16      	ldr	r3, [pc, #88]	; (8013f84 <strtok+0x5c>)
 8013f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f2c:	681e      	ldr	r6, [r3, #0]
 8013f2e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8013f30:	4605      	mov	r5, r0
 8013f32:	b9fc      	cbnz	r4, 8013f74 <strtok+0x4c>
 8013f34:	2050      	movs	r0, #80	; 0x50
 8013f36:	9101      	str	r1, [sp, #4]
 8013f38:	f001 fafe 	bl	8015538 <malloc>
 8013f3c:	9901      	ldr	r1, [sp, #4]
 8013f3e:	65b0      	str	r0, [r6, #88]	; 0x58
 8013f40:	4602      	mov	r2, r0
 8013f42:	b920      	cbnz	r0, 8013f4e <strtok+0x26>
 8013f44:	4b10      	ldr	r3, [pc, #64]	; (8013f88 <strtok+0x60>)
 8013f46:	4811      	ldr	r0, [pc, #68]	; (8013f8c <strtok+0x64>)
 8013f48:	2157      	movs	r1, #87	; 0x57
 8013f4a:	f000 f8d7 	bl	80140fc <__assert_func>
 8013f4e:	e9c0 4400 	strd	r4, r4, [r0]
 8013f52:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013f56:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013f5a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8013f5e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013f62:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8013f66:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8013f6a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8013f6e:	6184      	str	r4, [r0, #24]
 8013f70:	7704      	strb	r4, [r0, #28]
 8013f72:	6244      	str	r4, [r0, #36]	; 0x24
 8013f74:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8013f76:	2301      	movs	r3, #1
 8013f78:	4628      	mov	r0, r5
 8013f7a:	b002      	add	sp, #8
 8013f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f80:	f000 b806 	b.w	8013f90 <__strtok_r>
 8013f84:	20000044 	.word	0x20000044
 8013f88:	0802ac20 	.word	0x0802ac20
 8013f8c:	0802ac37 	.word	0x0802ac37

08013f90 <__strtok_r>:
 8013f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f92:	b908      	cbnz	r0, 8013f98 <__strtok_r+0x8>
 8013f94:	6810      	ldr	r0, [r2, #0]
 8013f96:	b188      	cbz	r0, 8013fbc <__strtok_r+0x2c>
 8013f98:	4604      	mov	r4, r0
 8013f9a:	4620      	mov	r0, r4
 8013f9c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013fa0:	460f      	mov	r7, r1
 8013fa2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013fa6:	b91e      	cbnz	r6, 8013fb0 <__strtok_r+0x20>
 8013fa8:	b965      	cbnz	r5, 8013fc4 <__strtok_r+0x34>
 8013faa:	6015      	str	r5, [r2, #0]
 8013fac:	4628      	mov	r0, r5
 8013fae:	e005      	b.n	8013fbc <__strtok_r+0x2c>
 8013fb0:	42b5      	cmp	r5, r6
 8013fb2:	d1f6      	bne.n	8013fa2 <__strtok_r+0x12>
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d1f0      	bne.n	8013f9a <__strtok_r+0xa>
 8013fb8:	6014      	str	r4, [r2, #0]
 8013fba:	7003      	strb	r3, [r0, #0]
 8013fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fbe:	461c      	mov	r4, r3
 8013fc0:	e00c      	b.n	8013fdc <__strtok_r+0x4c>
 8013fc2:	b915      	cbnz	r5, 8013fca <__strtok_r+0x3a>
 8013fc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013fc8:	460e      	mov	r6, r1
 8013fca:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013fce:	42ab      	cmp	r3, r5
 8013fd0:	d1f7      	bne.n	8013fc2 <__strtok_r+0x32>
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d0f3      	beq.n	8013fbe <__strtok_r+0x2e>
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013fdc:	6014      	str	r4, [r2, #0]
 8013fde:	e7ed      	b.n	8013fbc <__strtok_r+0x2c>

08013fe0 <_strtol_l.constprop.0>:
 8013fe0:	2b01      	cmp	r3, #1
 8013fe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fe6:	d001      	beq.n	8013fec <_strtol_l.constprop.0+0xc>
 8013fe8:	2b24      	cmp	r3, #36	; 0x24
 8013fea:	d906      	bls.n	8013ffa <_strtol_l.constprop.0+0x1a>
 8013fec:	f7fe fa96 	bl	801251c <__errno>
 8013ff0:	2316      	movs	r3, #22
 8013ff2:	6003      	str	r3, [r0, #0]
 8013ff4:	2000      	movs	r0, #0
 8013ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ffa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80140e0 <_strtol_l.constprop.0+0x100>
 8013ffe:	460d      	mov	r5, r1
 8014000:	462e      	mov	r6, r5
 8014002:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014006:	f814 700c 	ldrb.w	r7, [r4, ip]
 801400a:	f017 0708 	ands.w	r7, r7, #8
 801400e:	d1f7      	bne.n	8014000 <_strtol_l.constprop.0+0x20>
 8014010:	2c2d      	cmp	r4, #45	; 0x2d
 8014012:	d132      	bne.n	801407a <_strtol_l.constprop.0+0x9a>
 8014014:	782c      	ldrb	r4, [r5, #0]
 8014016:	2701      	movs	r7, #1
 8014018:	1cb5      	adds	r5, r6, #2
 801401a:	2b00      	cmp	r3, #0
 801401c:	d05b      	beq.n	80140d6 <_strtol_l.constprop.0+0xf6>
 801401e:	2b10      	cmp	r3, #16
 8014020:	d109      	bne.n	8014036 <_strtol_l.constprop.0+0x56>
 8014022:	2c30      	cmp	r4, #48	; 0x30
 8014024:	d107      	bne.n	8014036 <_strtol_l.constprop.0+0x56>
 8014026:	782c      	ldrb	r4, [r5, #0]
 8014028:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801402c:	2c58      	cmp	r4, #88	; 0x58
 801402e:	d14d      	bne.n	80140cc <_strtol_l.constprop.0+0xec>
 8014030:	786c      	ldrb	r4, [r5, #1]
 8014032:	2310      	movs	r3, #16
 8014034:	3502      	adds	r5, #2
 8014036:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801403a:	f108 38ff 	add.w	r8, r8, #4294967295
 801403e:	f04f 0c00 	mov.w	ip, #0
 8014042:	fbb8 f9f3 	udiv	r9, r8, r3
 8014046:	4666      	mov	r6, ip
 8014048:	fb03 8a19 	mls	sl, r3, r9, r8
 801404c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014050:	f1be 0f09 	cmp.w	lr, #9
 8014054:	d816      	bhi.n	8014084 <_strtol_l.constprop.0+0xa4>
 8014056:	4674      	mov	r4, lr
 8014058:	42a3      	cmp	r3, r4
 801405a:	dd24      	ble.n	80140a6 <_strtol_l.constprop.0+0xc6>
 801405c:	f1bc 0f00 	cmp.w	ip, #0
 8014060:	db1e      	blt.n	80140a0 <_strtol_l.constprop.0+0xc0>
 8014062:	45b1      	cmp	r9, r6
 8014064:	d31c      	bcc.n	80140a0 <_strtol_l.constprop.0+0xc0>
 8014066:	d101      	bne.n	801406c <_strtol_l.constprop.0+0x8c>
 8014068:	45a2      	cmp	sl, r4
 801406a:	db19      	blt.n	80140a0 <_strtol_l.constprop.0+0xc0>
 801406c:	fb06 4603 	mla	r6, r6, r3, r4
 8014070:	f04f 0c01 	mov.w	ip, #1
 8014074:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014078:	e7e8      	b.n	801404c <_strtol_l.constprop.0+0x6c>
 801407a:	2c2b      	cmp	r4, #43	; 0x2b
 801407c:	bf04      	itt	eq
 801407e:	782c      	ldrbeq	r4, [r5, #0]
 8014080:	1cb5      	addeq	r5, r6, #2
 8014082:	e7ca      	b.n	801401a <_strtol_l.constprop.0+0x3a>
 8014084:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014088:	f1be 0f19 	cmp.w	lr, #25
 801408c:	d801      	bhi.n	8014092 <_strtol_l.constprop.0+0xb2>
 801408e:	3c37      	subs	r4, #55	; 0x37
 8014090:	e7e2      	b.n	8014058 <_strtol_l.constprop.0+0x78>
 8014092:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014096:	f1be 0f19 	cmp.w	lr, #25
 801409a:	d804      	bhi.n	80140a6 <_strtol_l.constprop.0+0xc6>
 801409c:	3c57      	subs	r4, #87	; 0x57
 801409e:	e7db      	b.n	8014058 <_strtol_l.constprop.0+0x78>
 80140a0:	f04f 3cff 	mov.w	ip, #4294967295
 80140a4:	e7e6      	b.n	8014074 <_strtol_l.constprop.0+0x94>
 80140a6:	f1bc 0f00 	cmp.w	ip, #0
 80140aa:	da05      	bge.n	80140b8 <_strtol_l.constprop.0+0xd8>
 80140ac:	2322      	movs	r3, #34	; 0x22
 80140ae:	6003      	str	r3, [r0, #0]
 80140b0:	4646      	mov	r6, r8
 80140b2:	b942      	cbnz	r2, 80140c6 <_strtol_l.constprop.0+0xe6>
 80140b4:	4630      	mov	r0, r6
 80140b6:	e79e      	b.n	8013ff6 <_strtol_l.constprop.0+0x16>
 80140b8:	b107      	cbz	r7, 80140bc <_strtol_l.constprop.0+0xdc>
 80140ba:	4276      	negs	r6, r6
 80140bc:	2a00      	cmp	r2, #0
 80140be:	d0f9      	beq.n	80140b4 <_strtol_l.constprop.0+0xd4>
 80140c0:	f1bc 0f00 	cmp.w	ip, #0
 80140c4:	d000      	beq.n	80140c8 <_strtol_l.constprop.0+0xe8>
 80140c6:	1e69      	subs	r1, r5, #1
 80140c8:	6011      	str	r1, [r2, #0]
 80140ca:	e7f3      	b.n	80140b4 <_strtol_l.constprop.0+0xd4>
 80140cc:	2430      	movs	r4, #48	; 0x30
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d1b1      	bne.n	8014036 <_strtol_l.constprop.0+0x56>
 80140d2:	2308      	movs	r3, #8
 80140d4:	e7af      	b.n	8014036 <_strtol_l.constprop.0+0x56>
 80140d6:	2c30      	cmp	r4, #48	; 0x30
 80140d8:	d0a5      	beq.n	8014026 <_strtol_l.constprop.0+0x46>
 80140da:	230a      	movs	r3, #10
 80140dc:	e7ab      	b.n	8014036 <_strtol_l.constprop.0+0x56>
 80140de:	bf00      	nop
 80140e0:	0802acd1 	.word	0x0802acd1

080140e4 <_strtol_r>:
 80140e4:	f7ff bf7c 	b.w	8013fe0 <_strtol_l.constprop.0>

080140e8 <strtol>:
 80140e8:	4613      	mov	r3, r2
 80140ea:	460a      	mov	r2, r1
 80140ec:	4601      	mov	r1, r0
 80140ee:	4802      	ldr	r0, [pc, #8]	; (80140f8 <strtol+0x10>)
 80140f0:	6800      	ldr	r0, [r0, #0]
 80140f2:	f7ff bf75 	b.w	8013fe0 <_strtol_l.constprop.0>
 80140f6:	bf00      	nop
 80140f8:	20000044 	.word	0x20000044

080140fc <__assert_func>:
 80140fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80140fe:	4614      	mov	r4, r2
 8014100:	461a      	mov	r2, r3
 8014102:	4b09      	ldr	r3, [pc, #36]	; (8014128 <__assert_func+0x2c>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	4605      	mov	r5, r0
 8014108:	68d8      	ldr	r0, [r3, #12]
 801410a:	b14c      	cbz	r4, 8014120 <__assert_func+0x24>
 801410c:	4b07      	ldr	r3, [pc, #28]	; (801412c <__assert_func+0x30>)
 801410e:	9100      	str	r1, [sp, #0]
 8014110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014114:	4906      	ldr	r1, [pc, #24]	; (8014130 <__assert_func+0x34>)
 8014116:	462b      	mov	r3, r5
 8014118:	f000 fe88 	bl	8014e2c <fiprintf>
 801411c:	f002 fb9e 	bl	801685c <abort>
 8014120:	4b04      	ldr	r3, [pc, #16]	; (8014134 <__assert_func+0x38>)
 8014122:	461c      	mov	r4, r3
 8014124:	e7f3      	b.n	801410e <__assert_func+0x12>
 8014126:	bf00      	nop
 8014128:	20000044 	.word	0x20000044
 801412c:	0802ac94 	.word	0x0802ac94
 8014130:	0802aca1 	.word	0x0802aca1
 8014134:	0802accf 	.word	0x0802accf

08014138 <quorem>:
 8014138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801413c:	6903      	ldr	r3, [r0, #16]
 801413e:	690c      	ldr	r4, [r1, #16]
 8014140:	42a3      	cmp	r3, r4
 8014142:	4607      	mov	r7, r0
 8014144:	f2c0 8081 	blt.w	801424a <quorem+0x112>
 8014148:	3c01      	subs	r4, #1
 801414a:	f101 0814 	add.w	r8, r1, #20
 801414e:	f100 0514 	add.w	r5, r0, #20
 8014152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014156:	9301      	str	r3, [sp, #4]
 8014158:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801415c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014160:	3301      	adds	r3, #1
 8014162:	429a      	cmp	r2, r3
 8014164:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014168:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801416c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014170:	d331      	bcc.n	80141d6 <quorem+0x9e>
 8014172:	f04f 0e00 	mov.w	lr, #0
 8014176:	4640      	mov	r0, r8
 8014178:	46ac      	mov	ip, r5
 801417a:	46f2      	mov	sl, lr
 801417c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014180:	b293      	uxth	r3, r2
 8014182:	fb06 e303 	mla	r3, r6, r3, lr
 8014186:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801418a:	b29b      	uxth	r3, r3
 801418c:	ebaa 0303 	sub.w	r3, sl, r3
 8014190:	f8dc a000 	ldr.w	sl, [ip]
 8014194:	0c12      	lsrs	r2, r2, #16
 8014196:	fa13 f38a 	uxtah	r3, r3, sl
 801419a:	fb06 e202 	mla	r2, r6, r2, lr
 801419e:	9300      	str	r3, [sp, #0]
 80141a0:	9b00      	ldr	r3, [sp, #0]
 80141a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80141a6:	b292      	uxth	r2, r2
 80141a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80141ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80141b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80141b4:	4581      	cmp	r9, r0
 80141b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141ba:	f84c 3b04 	str.w	r3, [ip], #4
 80141be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80141c2:	d2db      	bcs.n	801417c <quorem+0x44>
 80141c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80141c8:	b92b      	cbnz	r3, 80141d6 <quorem+0x9e>
 80141ca:	9b01      	ldr	r3, [sp, #4]
 80141cc:	3b04      	subs	r3, #4
 80141ce:	429d      	cmp	r5, r3
 80141d0:	461a      	mov	r2, r3
 80141d2:	d32e      	bcc.n	8014232 <quorem+0xfa>
 80141d4:	613c      	str	r4, [r7, #16]
 80141d6:	4638      	mov	r0, r7
 80141d8:	f001 fca2 	bl	8015b20 <__mcmp>
 80141dc:	2800      	cmp	r0, #0
 80141de:	db24      	blt.n	801422a <quorem+0xf2>
 80141e0:	3601      	adds	r6, #1
 80141e2:	4628      	mov	r0, r5
 80141e4:	f04f 0c00 	mov.w	ip, #0
 80141e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80141ec:	f8d0 e000 	ldr.w	lr, [r0]
 80141f0:	b293      	uxth	r3, r2
 80141f2:	ebac 0303 	sub.w	r3, ip, r3
 80141f6:	0c12      	lsrs	r2, r2, #16
 80141f8:	fa13 f38e 	uxtah	r3, r3, lr
 80141fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014204:	b29b      	uxth	r3, r3
 8014206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801420a:	45c1      	cmp	r9, r8
 801420c:	f840 3b04 	str.w	r3, [r0], #4
 8014210:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014214:	d2e8      	bcs.n	80141e8 <quorem+0xb0>
 8014216:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801421a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801421e:	b922      	cbnz	r2, 801422a <quorem+0xf2>
 8014220:	3b04      	subs	r3, #4
 8014222:	429d      	cmp	r5, r3
 8014224:	461a      	mov	r2, r3
 8014226:	d30a      	bcc.n	801423e <quorem+0x106>
 8014228:	613c      	str	r4, [r7, #16]
 801422a:	4630      	mov	r0, r6
 801422c:	b003      	add	sp, #12
 801422e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014232:	6812      	ldr	r2, [r2, #0]
 8014234:	3b04      	subs	r3, #4
 8014236:	2a00      	cmp	r2, #0
 8014238:	d1cc      	bne.n	80141d4 <quorem+0x9c>
 801423a:	3c01      	subs	r4, #1
 801423c:	e7c7      	b.n	80141ce <quorem+0x96>
 801423e:	6812      	ldr	r2, [r2, #0]
 8014240:	3b04      	subs	r3, #4
 8014242:	2a00      	cmp	r2, #0
 8014244:	d1f0      	bne.n	8014228 <quorem+0xf0>
 8014246:	3c01      	subs	r4, #1
 8014248:	e7eb      	b.n	8014222 <quorem+0xea>
 801424a:	2000      	movs	r0, #0
 801424c:	e7ee      	b.n	801422c <quorem+0xf4>
	...

08014250 <_dtoa_r>:
 8014250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014254:	ed2d 8b04 	vpush	{d8-d9}
 8014258:	ec57 6b10 	vmov	r6, r7, d0
 801425c:	b093      	sub	sp, #76	; 0x4c
 801425e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014260:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014264:	9106      	str	r1, [sp, #24]
 8014266:	ee10 aa10 	vmov	sl, s0
 801426a:	4604      	mov	r4, r0
 801426c:	9209      	str	r2, [sp, #36]	; 0x24
 801426e:	930c      	str	r3, [sp, #48]	; 0x30
 8014270:	46bb      	mov	fp, r7
 8014272:	b975      	cbnz	r5, 8014292 <_dtoa_r+0x42>
 8014274:	2010      	movs	r0, #16
 8014276:	f001 f95f 	bl	8015538 <malloc>
 801427a:	4602      	mov	r2, r0
 801427c:	6260      	str	r0, [r4, #36]	; 0x24
 801427e:	b920      	cbnz	r0, 801428a <_dtoa_r+0x3a>
 8014280:	4ba7      	ldr	r3, [pc, #668]	; (8014520 <_dtoa_r+0x2d0>)
 8014282:	21ea      	movs	r1, #234	; 0xea
 8014284:	48a7      	ldr	r0, [pc, #668]	; (8014524 <_dtoa_r+0x2d4>)
 8014286:	f7ff ff39 	bl	80140fc <__assert_func>
 801428a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801428e:	6005      	str	r5, [r0, #0]
 8014290:	60c5      	str	r5, [r0, #12]
 8014292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014294:	6819      	ldr	r1, [r3, #0]
 8014296:	b151      	cbz	r1, 80142ae <_dtoa_r+0x5e>
 8014298:	685a      	ldr	r2, [r3, #4]
 801429a:	604a      	str	r2, [r1, #4]
 801429c:	2301      	movs	r3, #1
 801429e:	4093      	lsls	r3, r2
 80142a0:	608b      	str	r3, [r1, #8]
 80142a2:	4620      	mov	r0, r4
 80142a4:	f001 f9b0 	bl	8015608 <_Bfree>
 80142a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142aa:	2200      	movs	r2, #0
 80142ac:	601a      	str	r2, [r3, #0]
 80142ae:	1e3b      	subs	r3, r7, #0
 80142b0:	bfaa      	itet	ge
 80142b2:	2300      	movge	r3, #0
 80142b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80142b8:	f8c8 3000 	strge.w	r3, [r8]
 80142bc:	4b9a      	ldr	r3, [pc, #616]	; (8014528 <_dtoa_r+0x2d8>)
 80142be:	bfbc      	itt	lt
 80142c0:	2201      	movlt	r2, #1
 80142c2:	f8c8 2000 	strlt.w	r2, [r8]
 80142c6:	ea33 030b 	bics.w	r3, r3, fp
 80142ca:	d11b      	bne.n	8014304 <_dtoa_r+0xb4>
 80142cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80142ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80142d2:	6013      	str	r3, [r2, #0]
 80142d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80142d8:	4333      	orrs	r3, r6
 80142da:	f000 8592 	beq.w	8014e02 <_dtoa_r+0xbb2>
 80142de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80142e0:	b963      	cbnz	r3, 80142fc <_dtoa_r+0xac>
 80142e2:	4b92      	ldr	r3, [pc, #584]	; (801452c <_dtoa_r+0x2dc>)
 80142e4:	e022      	b.n	801432c <_dtoa_r+0xdc>
 80142e6:	4b92      	ldr	r3, [pc, #584]	; (8014530 <_dtoa_r+0x2e0>)
 80142e8:	9301      	str	r3, [sp, #4]
 80142ea:	3308      	adds	r3, #8
 80142ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80142ee:	6013      	str	r3, [r2, #0]
 80142f0:	9801      	ldr	r0, [sp, #4]
 80142f2:	b013      	add	sp, #76	; 0x4c
 80142f4:	ecbd 8b04 	vpop	{d8-d9}
 80142f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142fc:	4b8b      	ldr	r3, [pc, #556]	; (801452c <_dtoa_r+0x2dc>)
 80142fe:	9301      	str	r3, [sp, #4]
 8014300:	3303      	adds	r3, #3
 8014302:	e7f3      	b.n	80142ec <_dtoa_r+0x9c>
 8014304:	2200      	movs	r2, #0
 8014306:	2300      	movs	r3, #0
 8014308:	4650      	mov	r0, sl
 801430a:	4659      	mov	r1, fp
 801430c:	f7ec fbf4 	bl	8000af8 <__aeabi_dcmpeq>
 8014310:	ec4b ab19 	vmov	d9, sl, fp
 8014314:	4680      	mov	r8, r0
 8014316:	b158      	cbz	r0, 8014330 <_dtoa_r+0xe0>
 8014318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801431a:	2301      	movs	r3, #1
 801431c:	6013      	str	r3, [r2, #0]
 801431e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014320:	2b00      	cmp	r3, #0
 8014322:	f000 856b 	beq.w	8014dfc <_dtoa_r+0xbac>
 8014326:	4883      	ldr	r0, [pc, #524]	; (8014534 <_dtoa_r+0x2e4>)
 8014328:	6018      	str	r0, [r3, #0]
 801432a:	1e43      	subs	r3, r0, #1
 801432c:	9301      	str	r3, [sp, #4]
 801432e:	e7df      	b.n	80142f0 <_dtoa_r+0xa0>
 8014330:	ec4b ab10 	vmov	d0, sl, fp
 8014334:	aa10      	add	r2, sp, #64	; 0x40
 8014336:	a911      	add	r1, sp, #68	; 0x44
 8014338:	4620      	mov	r0, r4
 801433a:	f001 fd13 	bl	8015d64 <__d2b>
 801433e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014342:	ee08 0a10 	vmov	s16, r0
 8014346:	2d00      	cmp	r5, #0
 8014348:	f000 8084 	beq.w	8014454 <_dtoa_r+0x204>
 801434c:	ee19 3a90 	vmov	r3, s19
 8014350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014354:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014358:	4656      	mov	r6, sl
 801435a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801435e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014362:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014366:	4b74      	ldr	r3, [pc, #464]	; (8014538 <_dtoa_r+0x2e8>)
 8014368:	2200      	movs	r2, #0
 801436a:	4630      	mov	r0, r6
 801436c:	4639      	mov	r1, r7
 801436e:	f7eb ffa3 	bl	80002b8 <__aeabi_dsub>
 8014372:	a365      	add	r3, pc, #404	; (adr r3, 8014508 <_dtoa_r+0x2b8>)
 8014374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014378:	f7ec f956 	bl	8000628 <__aeabi_dmul>
 801437c:	a364      	add	r3, pc, #400	; (adr r3, 8014510 <_dtoa_r+0x2c0>)
 801437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014382:	f7eb ff9b 	bl	80002bc <__adddf3>
 8014386:	4606      	mov	r6, r0
 8014388:	4628      	mov	r0, r5
 801438a:	460f      	mov	r7, r1
 801438c:	f7ec f8e2 	bl	8000554 <__aeabi_i2d>
 8014390:	a361      	add	r3, pc, #388	; (adr r3, 8014518 <_dtoa_r+0x2c8>)
 8014392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014396:	f7ec f947 	bl	8000628 <__aeabi_dmul>
 801439a:	4602      	mov	r2, r0
 801439c:	460b      	mov	r3, r1
 801439e:	4630      	mov	r0, r6
 80143a0:	4639      	mov	r1, r7
 80143a2:	f7eb ff8b 	bl	80002bc <__adddf3>
 80143a6:	4606      	mov	r6, r0
 80143a8:	460f      	mov	r7, r1
 80143aa:	f7ec fbed 	bl	8000b88 <__aeabi_d2iz>
 80143ae:	2200      	movs	r2, #0
 80143b0:	9000      	str	r0, [sp, #0]
 80143b2:	2300      	movs	r3, #0
 80143b4:	4630      	mov	r0, r6
 80143b6:	4639      	mov	r1, r7
 80143b8:	f7ec fba8 	bl	8000b0c <__aeabi_dcmplt>
 80143bc:	b150      	cbz	r0, 80143d4 <_dtoa_r+0x184>
 80143be:	9800      	ldr	r0, [sp, #0]
 80143c0:	f7ec f8c8 	bl	8000554 <__aeabi_i2d>
 80143c4:	4632      	mov	r2, r6
 80143c6:	463b      	mov	r3, r7
 80143c8:	f7ec fb96 	bl	8000af8 <__aeabi_dcmpeq>
 80143cc:	b910      	cbnz	r0, 80143d4 <_dtoa_r+0x184>
 80143ce:	9b00      	ldr	r3, [sp, #0]
 80143d0:	3b01      	subs	r3, #1
 80143d2:	9300      	str	r3, [sp, #0]
 80143d4:	9b00      	ldr	r3, [sp, #0]
 80143d6:	2b16      	cmp	r3, #22
 80143d8:	d85a      	bhi.n	8014490 <_dtoa_r+0x240>
 80143da:	9a00      	ldr	r2, [sp, #0]
 80143dc:	4b57      	ldr	r3, [pc, #348]	; (801453c <_dtoa_r+0x2ec>)
 80143de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80143e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e6:	ec51 0b19 	vmov	r0, r1, d9
 80143ea:	f7ec fb8f 	bl	8000b0c <__aeabi_dcmplt>
 80143ee:	2800      	cmp	r0, #0
 80143f0:	d050      	beq.n	8014494 <_dtoa_r+0x244>
 80143f2:	9b00      	ldr	r3, [sp, #0]
 80143f4:	3b01      	subs	r3, #1
 80143f6:	9300      	str	r3, [sp, #0]
 80143f8:	2300      	movs	r3, #0
 80143fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80143fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80143fe:	1b5d      	subs	r5, r3, r5
 8014400:	1e6b      	subs	r3, r5, #1
 8014402:	9305      	str	r3, [sp, #20]
 8014404:	bf45      	ittet	mi
 8014406:	f1c5 0301 	rsbmi	r3, r5, #1
 801440a:	9304      	strmi	r3, [sp, #16]
 801440c:	2300      	movpl	r3, #0
 801440e:	2300      	movmi	r3, #0
 8014410:	bf4c      	ite	mi
 8014412:	9305      	strmi	r3, [sp, #20]
 8014414:	9304      	strpl	r3, [sp, #16]
 8014416:	9b00      	ldr	r3, [sp, #0]
 8014418:	2b00      	cmp	r3, #0
 801441a:	db3d      	blt.n	8014498 <_dtoa_r+0x248>
 801441c:	9b05      	ldr	r3, [sp, #20]
 801441e:	9a00      	ldr	r2, [sp, #0]
 8014420:	920a      	str	r2, [sp, #40]	; 0x28
 8014422:	4413      	add	r3, r2
 8014424:	9305      	str	r3, [sp, #20]
 8014426:	2300      	movs	r3, #0
 8014428:	9307      	str	r3, [sp, #28]
 801442a:	9b06      	ldr	r3, [sp, #24]
 801442c:	2b09      	cmp	r3, #9
 801442e:	f200 8089 	bhi.w	8014544 <_dtoa_r+0x2f4>
 8014432:	2b05      	cmp	r3, #5
 8014434:	bfc4      	itt	gt
 8014436:	3b04      	subgt	r3, #4
 8014438:	9306      	strgt	r3, [sp, #24]
 801443a:	9b06      	ldr	r3, [sp, #24]
 801443c:	f1a3 0302 	sub.w	r3, r3, #2
 8014440:	bfcc      	ite	gt
 8014442:	2500      	movgt	r5, #0
 8014444:	2501      	movle	r5, #1
 8014446:	2b03      	cmp	r3, #3
 8014448:	f200 8087 	bhi.w	801455a <_dtoa_r+0x30a>
 801444c:	e8df f003 	tbb	[pc, r3]
 8014450:	59383a2d 	.word	0x59383a2d
 8014454:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014458:	441d      	add	r5, r3
 801445a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801445e:	2b20      	cmp	r3, #32
 8014460:	bfc1      	itttt	gt
 8014462:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014466:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801446a:	fa0b f303 	lslgt.w	r3, fp, r3
 801446e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014472:	bfda      	itte	le
 8014474:	f1c3 0320 	rsble	r3, r3, #32
 8014478:	fa06 f003 	lslle.w	r0, r6, r3
 801447c:	4318      	orrgt	r0, r3
 801447e:	f7ec f859 	bl	8000534 <__aeabi_ui2d>
 8014482:	2301      	movs	r3, #1
 8014484:	4606      	mov	r6, r0
 8014486:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801448a:	3d01      	subs	r5, #1
 801448c:	930e      	str	r3, [sp, #56]	; 0x38
 801448e:	e76a      	b.n	8014366 <_dtoa_r+0x116>
 8014490:	2301      	movs	r3, #1
 8014492:	e7b2      	b.n	80143fa <_dtoa_r+0x1aa>
 8014494:	900b      	str	r0, [sp, #44]	; 0x2c
 8014496:	e7b1      	b.n	80143fc <_dtoa_r+0x1ac>
 8014498:	9b04      	ldr	r3, [sp, #16]
 801449a:	9a00      	ldr	r2, [sp, #0]
 801449c:	1a9b      	subs	r3, r3, r2
 801449e:	9304      	str	r3, [sp, #16]
 80144a0:	4253      	negs	r3, r2
 80144a2:	9307      	str	r3, [sp, #28]
 80144a4:	2300      	movs	r3, #0
 80144a6:	930a      	str	r3, [sp, #40]	; 0x28
 80144a8:	e7bf      	b.n	801442a <_dtoa_r+0x1da>
 80144aa:	2300      	movs	r3, #0
 80144ac:	9308      	str	r3, [sp, #32]
 80144ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	dc55      	bgt.n	8014560 <_dtoa_r+0x310>
 80144b4:	2301      	movs	r3, #1
 80144b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80144ba:	461a      	mov	r2, r3
 80144bc:	9209      	str	r2, [sp, #36]	; 0x24
 80144be:	e00c      	b.n	80144da <_dtoa_r+0x28a>
 80144c0:	2301      	movs	r3, #1
 80144c2:	e7f3      	b.n	80144ac <_dtoa_r+0x25c>
 80144c4:	2300      	movs	r3, #0
 80144c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144c8:	9308      	str	r3, [sp, #32]
 80144ca:	9b00      	ldr	r3, [sp, #0]
 80144cc:	4413      	add	r3, r2
 80144ce:	9302      	str	r3, [sp, #8]
 80144d0:	3301      	adds	r3, #1
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	9303      	str	r3, [sp, #12]
 80144d6:	bfb8      	it	lt
 80144d8:	2301      	movlt	r3, #1
 80144da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80144dc:	2200      	movs	r2, #0
 80144de:	6042      	str	r2, [r0, #4]
 80144e0:	2204      	movs	r2, #4
 80144e2:	f102 0614 	add.w	r6, r2, #20
 80144e6:	429e      	cmp	r6, r3
 80144e8:	6841      	ldr	r1, [r0, #4]
 80144ea:	d93d      	bls.n	8014568 <_dtoa_r+0x318>
 80144ec:	4620      	mov	r0, r4
 80144ee:	f001 f84b 	bl	8015588 <_Balloc>
 80144f2:	9001      	str	r0, [sp, #4]
 80144f4:	2800      	cmp	r0, #0
 80144f6:	d13b      	bne.n	8014570 <_dtoa_r+0x320>
 80144f8:	4b11      	ldr	r3, [pc, #68]	; (8014540 <_dtoa_r+0x2f0>)
 80144fa:	4602      	mov	r2, r0
 80144fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014500:	e6c0      	b.n	8014284 <_dtoa_r+0x34>
 8014502:	2301      	movs	r3, #1
 8014504:	e7df      	b.n	80144c6 <_dtoa_r+0x276>
 8014506:	bf00      	nop
 8014508:	636f4361 	.word	0x636f4361
 801450c:	3fd287a7 	.word	0x3fd287a7
 8014510:	8b60c8b3 	.word	0x8b60c8b3
 8014514:	3fc68a28 	.word	0x3fc68a28
 8014518:	509f79fb 	.word	0x509f79fb
 801451c:	3fd34413 	.word	0x3fd34413
 8014520:	0802ac20 	.word	0x0802ac20
 8014524:	0802adde 	.word	0x0802adde
 8014528:	7ff00000 	.word	0x7ff00000
 801452c:	0802adda 	.word	0x0802adda
 8014530:	0802add1 	.word	0x0802add1
 8014534:	0802aba5 	.word	0x0802aba5
 8014538:	3ff80000 	.word	0x3ff80000
 801453c:	0802af48 	.word	0x0802af48
 8014540:	0802ae39 	.word	0x0802ae39
 8014544:	2501      	movs	r5, #1
 8014546:	2300      	movs	r3, #0
 8014548:	9306      	str	r3, [sp, #24]
 801454a:	9508      	str	r5, [sp, #32]
 801454c:	f04f 33ff 	mov.w	r3, #4294967295
 8014550:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014554:	2200      	movs	r2, #0
 8014556:	2312      	movs	r3, #18
 8014558:	e7b0      	b.n	80144bc <_dtoa_r+0x26c>
 801455a:	2301      	movs	r3, #1
 801455c:	9308      	str	r3, [sp, #32]
 801455e:	e7f5      	b.n	801454c <_dtoa_r+0x2fc>
 8014560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014562:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014566:	e7b8      	b.n	80144da <_dtoa_r+0x28a>
 8014568:	3101      	adds	r1, #1
 801456a:	6041      	str	r1, [r0, #4]
 801456c:	0052      	lsls	r2, r2, #1
 801456e:	e7b8      	b.n	80144e2 <_dtoa_r+0x292>
 8014570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014572:	9a01      	ldr	r2, [sp, #4]
 8014574:	601a      	str	r2, [r3, #0]
 8014576:	9b03      	ldr	r3, [sp, #12]
 8014578:	2b0e      	cmp	r3, #14
 801457a:	f200 809d 	bhi.w	80146b8 <_dtoa_r+0x468>
 801457e:	2d00      	cmp	r5, #0
 8014580:	f000 809a 	beq.w	80146b8 <_dtoa_r+0x468>
 8014584:	9b00      	ldr	r3, [sp, #0]
 8014586:	2b00      	cmp	r3, #0
 8014588:	dd32      	ble.n	80145f0 <_dtoa_r+0x3a0>
 801458a:	4ab7      	ldr	r2, [pc, #732]	; (8014868 <_dtoa_r+0x618>)
 801458c:	f003 030f 	and.w	r3, r3, #15
 8014590:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014594:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014598:	9b00      	ldr	r3, [sp, #0]
 801459a:	05d8      	lsls	r0, r3, #23
 801459c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80145a0:	d516      	bpl.n	80145d0 <_dtoa_r+0x380>
 80145a2:	4bb2      	ldr	r3, [pc, #712]	; (801486c <_dtoa_r+0x61c>)
 80145a4:	ec51 0b19 	vmov	r0, r1, d9
 80145a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80145ac:	f7ec f966 	bl	800087c <__aeabi_ddiv>
 80145b0:	f007 070f 	and.w	r7, r7, #15
 80145b4:	4682      	mov	sl, r0
 80145b6:	468b      	mov	fp, r1
 80145b8:	2503      	movs	r5, #3
 80145ba:	4eac      	ldr	r6, [pc, #688]	; (801486c <_dtoa_r+0x61c>)
 80145bc:	b957      	cbnz	r7, 80145d4 <_dtoa_r+0x384>
 80145be:	4642      	mov	r2, r8
 80145c0:	464b      	mov	r3, r9
 80145c2:	4650      	mov	r0, sl
 80145c4:	4659      	mov	r1, fp
 80145c6:	f7ec f959 	bl	800087c <__aeabi_ddiv>
 80145ca:	4682      	mov	sl, r0
 80145cc:	468b      	mov	fp, r1
 80145ce:	e028      	b.n	8014622 <_dtoa_r+0x3d2>
 80145d0:	2502      	movs	r5, #2
 80145d2:	e7f2      	b.n	80145ba <_dtoa_r+0x36a>
 80145d4:	07f9      	lsls	r1, r7, #31
 80145d6:	d508      	bpl.n	80145ea <_dtoa_r+0x39a>
 80145d8:	4640      	mov	r0, r8
 80145da:	4649      	mov	r1, r9
 80145dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80145e0:	f7ec f822 	bl	8000628 <__aeabi_dmul>
 80145e4:	3501      	adds	r5, #1
 80145e6:	4680      	mov	r8, r0
 80145e8:	4689      	mov	r9, r1
 80145ea:	107f      	asrs	r7, r7, #1
 80145ec:	3608      	adds	r6, #8
 80145ee:	e7e5      	b.n	80145bc <_dtoa_r+0x36c>
 80145f0:	f000 809b 	beq.w	801472a <_dtoa_r+0x4da>
 80145f4:	9b00      	ldr	r3, [sp, #0]
 80145f6:	4f9d      	ldr	r7, [pc, #628]	; (801486c <_dtoa_r+0x61c>)
 80145f8:	425e      	negs	r6, r3
 80145fa:	4b9b      	ldr	r3, [pc, #620]	; (8014868 <_dtoa_r+0x618>)
 80145fc:	f006 020f 	and.w	r2, r6, #15
 8014600:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014608:	ec51 0b19 	vmov	r0, r1, d9
 801460c:	f7ec f80c 	bl	8000628 <__aeabi_dmul>
 8014610:	1136      	asrs	r6, r6, #4
 8014612:	4682      	mov	sl, r0
 8014614:	468b      	mov	fp, r1
 8014616:	2300      	movs	r3, #0
 8014618:	2502      	movs	r5, #2
 801461a:	2e00      	cmp	r6, #0
 801461c:	d17a      	bne.n	8014714 <_dtoa_r+0x4c4>
 801461e:	2b00      	cmp	r3, #0
 8014620:	d1d3      	bne.n	80145ca <_dtoa_r+0x37a>
 8014622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014624:	2b00      	cmp	r3, #0
 8014626:	f000 8082 	beq.w	801472e <_dtoa_r+0x4de>
 801462a:	4b91      	ldr	r3, [pc, #580]	; (8014870 <_dtoa_r+0x620>)
 801462c:	2200      	movs	r2, #0
 801462e:	4650      	mov	r0, sl
 8014630:	4659      	mov	r1, fp
 8014632:	f7ec fa6b 	bl	8000b0c <__aeabi_dcmplt>
 8014636:	2800      	cmp	r0, #0
 8014638:	d079      	beq.n	801472e <_dtoa_r+0x4de>
 801463a:	9b03      	ldr	r3, [sp, #12]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d076      	beq.n	801472e <_dtoa_r+0x4de>
 8014640:	9b02      	ldr	r3, [sp, #8]
 8014642:	2b00      	cmp	r3, #0
 8014644:	dd36      	ble.n	80146b4 <_dtoa_r+0x464>
 8014646:	9b00      	ldr	r3, [sp, #0]
 8014648:	4650      	mov	r0, sl
 801464a:	4659      	mov	r1, fp
 801464c:	1e5f      	subs	r7, r3, #1
 801464e:	2200      	movs	r2, #0
 8014650:	4b88      	ldr	r3, [pc, #544]	; (8014874 <_dtoa_r+0x624>)
 8014652:	f7eb ffe9 	bl	8000628 <__aeabi_dmul>
 8014656:	9e02      	ldr	r6, [sp, #8]
 8014658:	4682      	mov	sl, r0
 801465a:	468b      	mov	fp, r1
 801465c:	3501      	adds	r5, #1
 801465e:	4628      	mov	r0, r5
 8014660:	f7eb ff78 	bl	8000554 <__aeabi_i2d>
 8014664:	4652      	mov	r2, sl
 8014666:	465b      	mov	r3, fp
 8014668:	f7eb ffde 	bl	8000628 <__aeabi_dmul>
 801466c:	4b82      	ldr	r3, [pc, #520]	; (8014878 <_dtoa_r+0x628>)
 801466e:	2200      	movs	r2, #0
 8014670:	f7eb fe24 	bl	80002bc <__adddf3>
 8014674:	46d0      	mov	r8, sl
 8014676:	46d9      	mov	r9, fp
 8014678:	4682      	mov	sl, r0
 801467a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801467e:	2e00      	cmp	r6, #0
 8014680:	d158      	bne.n	8014734 <_dtoa_r+0x4e4>
 8014682:	4b7e      	ldr	r3, [pc, #504]	; (801487c <_dtoa_r+0x62c>)
 8014684:	2200      	movs	r2, #0
 8014686:	4640      	mov	r0, r8
 8014688:	4649      	mov	r1, r9
 801468a:	f7eb fe15 	bl	80002b8 <__aeabi_dsub>
 801468e:	4652      	mov	r2, sl
 8014690:	465b      	mov	r3, fp
 8014692:	4680      	mov	r8, r0
 8014694:	4689      	mov	r9, r1
 8014696:	f7ec fa57 	bl	8000b48 <__aeabi_dcmpgt>
 801469a:	2800      	cmp	r0, #0
 801469c:	f040 8295 	bne.w	8014bca <_dtoa_r+0x97a>
 80146a0:	4652      	mov	r2, sl
 80146a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80146a6:	4640      	mov	r0, r8
 80146a8:	4649      	mov	r1, r9
 80146aa:	f7ec fa2f 	bl	8000b0c <__aeabi_dcmplt>
 80146ae:	2800      	cmp	r0, #0
 80146b0:	f040 8289 	bne.w	8014bc6 <_dtoa_r+0x976>
 80146b4:	ec5b ab19 	vmov	sl, fp, d9
 80146b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	f2c0 8148 	blt.w	8014950 <_dtoa_r+0x700>
 80146c0:	9a00      	ldr	r2, [sp, #0]
 80146c2:	2a0e      	cmp	r2, #14
 80146c4:	f300 8144 	bgt.w	8014950 <_dtoa_r+0x700>
 80146c8:	4b67      	ldr	r3, [pc, #412]	; (8014868 <_dtoa_r+0x618>)
 80146ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80146ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80146d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	f280 80d5 	bge.w	8014884 <_dtoa_r+0x634>
 80146da:	9b03      	ldr	r3, [sp, #12]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	f300 80d1 	bgt.w	8014884 <_dtoa_r+0x634>
 80146e2:	f040 826f 	bne.w	8014bc4 <_dtoa_r+0x974>
 80146e6:	4b65      	ldr	r3, [pc, #404]	; (801487c <_dtoa_r+0x62c>)
 80146e8:	2200      	movs	r2, #0
 80146ea:	4640      	mov	r0, r8
 80146ec:	4649      	mov	r1, r9
 80146ee:	f7eb ff9b 	bl	8000628 <__aeabi_dmul>
 80146f2:	4652      	mov	r2, sl
 80146f4:	465b      	mov	r3, fp
 80146f6:	f7ec fa1d 	bl	8000b34 <__aeabi_dcmpge>
 80146fa:	9e03      	ldr	r6, [sp, #12]
 80146fc:	4637      	mov	r7, r6
 80146fe:	2800      	cmp	r0, #0
 8014700:	f040 8245 	bne.w	8014b8e <_dtoa_r+0x93e>
 8014704:	9d01      	ldr	r5, [sp, #4]
 8014706:	2331      	movs	r3, #49	; 0x31
 8014708:	f805 3b01 	strb.w	r3, [r5], #1
 801470c:	9b00      	ldr	r3, [sp, #0]
 801470e:	3301      	adds	r3, #1
 8014710:	9300      	str	r3, [sp, #0]
 8014712:	e240      	b.n	8014b96 <_dtoa_r+0x946>
 8014714:	07f2      	lsls	r2, r6, #31
 8014716:	d505      	bpl.n	8014724 <_dtoa_r+0x4d4>
 8014718:	e9d7 2300 	ldrd	r2, r3, [r7]
 801471c:	f7eb ff84 	bl	8000628 <__aeabi_dmul>
 8014720:	3501      	adds	r5, #1
 8014722:	2301      	movs	r3, #1
 8014724:	1076      	asrs	r6, r6, #1
 8014726:	3708      	adds	r7, #8
 8014728:	e777      	b.n	801461a <_dtoa_r+0x3ca>
 801472a:	2502      	movs	r5, #2
 801472c:	e779      	b.n	8014622 <_dtoa_r+0x3d2>
 801472e:	9f00      	ldr	r7, [sp, #0]
 8014730:	9e03      	ldr	r6, [sp, #12]
 8014732:	e794      	b.n	801465e <_dtoa_r+0x40e>
 8014734:	9901      	ldr	r1, [sp, #4]
 8014736:	4b4c      	ldr	r3, [pc, #304]	; (8014868 <_dtoa_r+0x618>)
 8014738:	4431      	add	r1, r6
 801473a:	910d      	str	r1, [sp, #52]	; 0x34
 801473c:	9908      	ldr	r1, [sp, #32]
 801473e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014742:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014746:	2900      	cmp	r1, #0
 8014748:	d043      	beq.n	80147d2 <_dtoa_r+0x582>
 801474a:	494d      	ldr	r1, [pc, #308]	; (8014880 <_dtoa_r+0x630>)
 801474c:	2000      	movs	r0, #0
 801474e:	f7ec f895 	bl	800087c <__aeabi_ddiv>
 8014752:	4652      	mov	r2, sl
 8014754:	465b      	mov	r3, fp
 8014756:	f7eb fdaf 	bl	80002b8 <__aeabi_dsub>
 801475a:	9d01      	ldr	r5, [sp, #4]
 801475c:	4682      	mov	sl, r0
 801475e:	468b      	mov	fp, r1
 8014760:	4649      	mov	r1, r9
 8014762:	4640      	mov	r0, r8
 8014764:	f7ec fa10 	bl	8000b88 <__aeabi_d2iz>
 8014768:	4606      	mov	r6, r0
 801476a:	f7eb fef3 	bl	8000554 <__aeabi_i2d>
 801476e:	4602      	mov	r2, r0
 8014770:	460b      	mov	r3, r1
 8014772:	4640      	mov	r0, r8
 8014774:	4649      	mov	r1, r9
 8014776:	f7eb fd9f 	bl	80002b8 <__aeabi_dsub>
 801477a:	3630      	adds	r6, #48	; 0x30
 801477c:	f805 6b01 	strb.w	r6, [r5], #1
 8014780:	4652      	mov	r2, sl
 8014782:	465b      	mov	r3, fp
 8014784:	4680      	mov	r8, r0
 8014786:	4689      	mov	r9, r1
 8014788:	f7ec f9c0 	bl	8000b0c <__aeabi_dcmplt>
 801478c:	2800      	cmp	r0, #0
 801478e:	d163      	bne.n	8014858 <_dtoa_r+0x608>
 8014790:	4642      	mov	r2, r8
 8014792:	464b      	mov	r3, r9
 8014794:	4936      	ldr	r1, [pc, #216]	; (8014870 <_dtoa_r+0x620>)
 8014796:	2000      	movs	r0, #0
 8014798:	f7eb fd8e 	bl	80002b8 <__aeabi_dsub>
 801479c:	4652      	mov	r2, sl
 801479e:	465b      	mov	r3, fp
 80147a0:	f7ec f9b4 	bl	8000b0c <__aeabi_dcmplt>
 80147a4:	2800      	cmp	r0, #0
 80147a6:	f040 80b5 	bne.w	8014914 <_dtoa_r+0x6c4>
 80147aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147ac:	429d      	cmp	r5, r3
 80147ae:	d081      	beq.n	80146b4 <_dtoa_r+0x464>
 80147b0:	4b30      	ldr	r3, [pc, #192]	; (8014874 <_dtoa_r+0x624>)
 80147b2:	2200      	movs	r2, #0
 80147b4:	4650      	mov	r0, sl
 80147b6:	4659      	mov	r1, fp
 80147b8:	f7eb ff36 	bl	8000628 <__aeabi_dmul>
 80147bc:	4b2d      	ldr	r3, [pc, #180]	; (8014874 <_dtoa_r+0x624>)
 80147be:	4682      	mov	sl, r0
 80147c0:	468b      	mov	fp, r1
 80147c2:	4640      	mov	r0, r8
 80147c4:	4649      	mov	r1, r9
 80147c6:	2200      	movs	r2, #0
 80147c8:	f7eb ff2e 	bl	8000628 <__aeabi_dmul>
 80147cc:	4680      	mov	r8, r0
 80147ce:	4689      	mov	r9, r1
 80147d0:	e7c6      	b.n	8014760 <_dtoa_r+0x510>
 80147d2:	4650      	mov	r0, sl
 80147d4:	4659      	mov	r1, fp
 80147d6:	f7eb ff27 	bl	8000628 <__aeabi_dmul>
 80147da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147dc:	9d01      	ldr	r5, [sp, #4]
 80147de:	930f      	str	r3, [sp, #60]	; 0x3c
 80147e0:	4682      	mov	sl, r0
 80147e2:	468b      	mov	fp, r1
 80147e4:	4649      	mov	r1, r9
 80147e6:	4640      	mov	r0, r8
 80147e8:	f7ec f9ce 	bl	8000b88 <__aeabi_d2iz>
 80147ec:	4606      	mov	r6, r0
 80147ee:	f7eb feb1 	bl	8000554 <__aeabi_i2d>
 80147f2:	3630      	adds	r6, #48	; 0x30
 80147f4:	4602      	mov	r2, r0
 80147f6:	460b      	mov	r3, r1
 80147f8:	4640      	mov	r0, r8
 80147fa:	4649      	mov	r1, r9
 80147fc:	f7eb fd5c 	bl	80002b8 <__aeabi_dsub>
 8014800:	f805 6b01 	strb.w	r6, [r5], #1
 8014804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014806:	429d      	cmp	r5, r3
 8014808:	4680      	mov	r8, r0
 801480a:	4689      	mov	r9, r1
 801480c:	f04f 0200 	mov.w	r2, #0
 8014810:	d124      	bne.n	801485c <_dtoa_r+0x60c>
 8014812:	4b1b      	ldr	r3, [pc, #108]	; (8014880 <_dtoa_r+0x630>)
 8014814:	4650      	mov	r0, sl
 8014816:	4659      	mov	r1, fp
 8014818:	f7eb fd50 	bl	80002bc <__adddf3>
 801481c:	4602      	mov	r2, r0
 801481e:	460b      	mov	r3, r1
 8014820:	4640      	mov	r0, r8
 8014822:	4649      	mov	r1, r9
 8014824:	f7ec f990 	bl	8000b48 <__aeabi_dcmpgt>
 8014828:	2800      	cmp	r0, #0
 801482a:	d173      	bne.n	8014914 <_dtoa_r+0x6c4>
 801482c:	4652      	mov	r2, sl
 801482e:	465b      	mov	r3, fp
 8014830:	4913      	ldr	r1, [pc, #76]	; (8014880 <_dtoa_r+0x630>)
 8014832:	2000      	movs	r0, #0
 8014834:	f7eb fd40 	bl	80002b8 <__aeabi_dsub>
 8014838:	4602      	mov	r2, r0
 801483a:	460b      	mov	r3, r1
 801483c:	4640      	mov	r0, r8
 801483e:	4649      	mov	r1, r9
 8014840:	f7ec f964 	bl	8000b0c <__aeabi_dcmplt>
 8014844:	2800      	cmp	r0, #0
 8014846:	f43f af35 	beq.w	80146b4 <_dtoa_r+0x464>
 801484a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801484c:	1e6b      	subs	r3, r5, #1
 801484e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014850:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014854:	2b30      	cmp	r3, #48	; 0x30
 8014856:	d0f8      	beq.n	801484a <_dtoa_r+0x5fa>
 8014858:	9700      	str	r7, [sp, #0]
 801485a:	e049      	b.n	80148f0 <_dtoa_r+0x6a0>
 801485c:	4b05      	ldr	r3, [pc, #20]	; (8014874 <_dtoa_r+0x624>)
 801485e:	f7eb fee3 	bl	8000628 <__aeabi_dmul>
 8014862:	4680      	mov	r8, r0
 8014864:	4689      	mov	r9, r1
 8014866:	e7bd      	b.n	80147e4 <_dtoa_r+0x594>
 8014868:	0802af48 	.word	0x0802af48
 801486c:	0802af20 	.word	0x0802af20
 8014870:	3ff00000 	.word	0x3ff00000
 8014874:	40240000 	.word	0x40240000
 8014878:	401c0000 	.word	0x401c0000
 801487c:	40140000 	.word	0x40140000
 8014880:	3fe00000 	.word	0x3fe00000
 8014884:	9d01      	ldr	r5, [sp, #4]
 8014886:	4656      	mov	r6, sl
 8014888:	465f      	mov	r7, fp
 801488a:	4642      	mov	r2, r8
 801488c:	464b      	mov	r3, r9
 801488e:	4630      	mov	r0, r6
 8014890:	4639      	mov	r1, r7
 8014892:	f7eb fff3 	bl	800087c <__aeabi_ddiv>
 8014896:	f7ec f977 	bl	8000b88 <__aeabi_d2iz>
 801489a:	4682      	mov	sl, r0
 801489c:	f7eb fe5a 	bl	8000554 <__aeabi_i2d>
 80148a0:	4642      	mov	r2, r8
 80148a2:	464b      	mov	r3, r9
 80148a4:	f7eb fec0 	bl	8000628 <__aeabi_dmul>
 80148a8:	4602      	mov	r2, r0
 80148aa:	460b      	mov	r3, r1
 80148ac:	4630      	mov	r0, r6
 80148ae:	4639      	mov	r1, r7
 80148b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80148b4:	f7eb fd00 	bl	80002b8 <__aeabi_dsub>
 80148b8:	f805 6b01 	strb.w	r6, [r5], #1
 80148bc:	9e01      	ldr	r6, [sp, #4]
 80148be:	9f03      	ldr	r7, [sp, #12]
 80148c0:	1bae      	subs	r6, r5, r6
 80148c2:	42b7      	cmp	r7, r6
 80148c4:	4602      	mov	r2, r0
 80148c6:	460b      	mov	r3, r1
 80148c8:	d135      	bne.n	8014936 <_dtoa_r+0x6e6>
 80148ca:	f7eb fcf7 	bl	80002bc <__adddf3>
 80148ce:	4642      	mov	r2, r8
 80148d0:	464b      	mov	r3, r9
 80148d2:	4606      	mov	r6, r0
 80148d4:	460f      	mov	r7, r1
 80148d6:	f7ec f937 	bl	8000b48 <__aeabi_dcmpgt>
 80148da:	b9d0      	cbnz	r0, 8014912 <_dtoa_r+0x6c2>
 80148dc:	4642      	mov	r2, r8
 80148de:	464b      	mov	r3, r9
 80148e0:	4630      	mov	r0, r6
 80148e2:	4639      	mov	r1, r7
 80148e4:	f7ec f908 	bl	8000af8 <__aeabi_dcmpeq>
 80148e8:	b110      	cbz	r0, 80148f0 <_dtoa_r+0x6a0>
 80148ea:	f01a 0f01 	tst.w	sl, #1
 80148ee:	d110      	bne.n	8014912 <_dtoa_r+0x6c2>
 80148f0:	4620      	mov	r0, r4
 80148f2:	ee18 1a10 	vmov	r1, s16
 80148f6:	f000 fe87 	bl	8015608 <_Bfree>
 80148fa:	2300      	movs	r3, #0
 80148fc:	9800      	ldr	r0, [sp, #0]
 80148fe:	702b      	strb	r3, [r5, #0]
 8014900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014902:	3001      	adds	r0, #1
 8014904:	6018      	str	r0, [r3, #0]
 8014906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014908:	2b00      	cmp	r3, #0
 801490a:	f43f acf1 	beq.w	80142f0 <_dtoa_r+0xa0>
 801490e:	601d      	str	r5, [r3, #0]
 8014910:	e4ee      	b.n	80142f0 <_dtoa_r+0xa0>
 8014912:	9f00      	ldr	r7, [sp, #0]
 8014914:	462b      	mov	r3, r5
 8014916:	461d      	mov	r5, r3
 8014918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801491c:	2a39      	cmp	r2, #57	; 0x39
 801491e:	d106      	bne.n	801492e <_dtoa_r+0x6de>
 8014920:	9a01      	ldr	r2, [sp, #4]
 8014922:	429a      	cmp	r2, r3
 8014924:	d1f7      	bne.n	8014916 <_dtoa_r+0x6c6>
 8014926:	9901      	ldr	r1, [sp, #4]
 8014928:	2230      	movs	r2, #48	; 0x30
 801492a:	3701      	adds	r7, #1
 801492c:	700a      	strb	r2, [r1, #0]
 801492e:	781a      	ldrb	r2, [r3, #0]
 8014930:	3201      	adds	r2, #1
 8014932:	701a      	strb	r2, [r3, #0]
 8014934:	e790      	b.n	8014858 <_dtoa_r+0x608>
 8014936:	4ba6      	ldr	r3, [pc, #664]	; (8014bd0 <_dtoa_r+0x980>)
 8014938:	2200      	movs	r2, #0
 801493a:	f7eb fe75 	bl	8000628 <__aeabi_dmul>
 801493e:	2200      	movs	r2, #0
 8014940:	2300      	movs	r3, #0
 8014942:	4606      	mov	r6, r0
 8014944:	460f      	mov	r7, r1
 8014946:	f7ec f8d7 	bl	8000af8 <__aeabi_dcmpeq>
 801494a:	2800      	cmp	r0, #0
 801494c:	d09d      	beq.n	801488a <_dtoa_r+0x63a>
 801494e:	e7cf      	b.n	80148f0 <_dtoa_r+0x6a0>
 8014950:	9a08      	ldr	r2, [sp, #32]
 8014952:	2a00      	cmp	r2, #0
 8014954:	f000 80d7 	beq.w	8014b06 <_dtoa_r+0x8b6>
 8014958:	9a06      	ldr	r2, [sp, #24]
 801495a:	2a01      	cmp	r2, #1
 801495c:	f300 80ba 	bgt.w	8014ad4 <_dtoa_r+0x884>
 8014960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014962:	2a00      	cmp	r2, #0
 8014964:	f000 80b2 	beq.w	8014acc <_dtoa_r+0x87c>
 8014968:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801496c:	9e07      	ldr	r6, [sp, #28]
 801496e:	9d04      	ldr	r5, [sp, #16]
 8014970:	9a04      	ldr	r2, [sp, #16]
 8014972:	441a      	add	r2, r3
 8014974:	9204      	str	r2, [sp, #16]
 8014976:	9a05      	ldr	r2, [sp, #20]
 8014978:	2101      	movs	r1, #1
 801497a:	441a      	add	r2, r3
 801497c:	4620      	mov	r0, r4
 801497e:	9205      	str	r2, [sp, #20]
 8014980:	f000 ff44 	bl	801580c <__i2b>
 8014984:	4607      	mov	r7, r0
 8014986:	2d00      	cmp	r5, #0
 8014988:	dd0c      	ble.n	80149a4 <_dtoa_r+0x754>
 801498a:	9b05      	ldr	r3, [sp, #20]
 801498c:	2b00      	cmp	r3, #0
 801498e:	dd09      	ble.n	80149a4 <_dtoa_r+0x754>
 8014990:	42ab      	cmp	r3, r5
 8014992:	9a04      	ldr	r2, [sp, #16]
 8014994:	bfa8      	it	ge
 8014996:	462b      	movge	r3, r5
 8014998:	1ad2      	subs	r2, r2, r3
 801499a:	9204      	str	r2, [sp, #16]
 801499c:	9a05      	ldr	r2, [sp, #20]
 801499e:	1aed      	subs	r5, r5, r3
 80149a0:	1ad3      	subs	r3, r2, r3
 80149a2:	9305      	str	r3, [sp, #20]
 80149a4:	9b07      	ldr	r3, [sp, #28]
 80149a6:	b31b      	cbz	r3, 80149f0 <_dtoa_r+0x7a0>
 80149a8:	9b08      	ldr	r3, [sp, #32]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	f000 80af 	beq.w	8014b0e <_dtoa_r+0x8be>
 80149b0:	2e00      	cmp	r6, #0
 80149b2:	dd13      	ble.n	80149dc <_dtoa_r+0x78c>
 80149b4:	4639      	mov	r1, r7
 80149b6:	4632      	mov	r2, r6
 80149b8:	4620      	mov	r0, r4
 80149ba:	f000 ffe7 	bl	801598c <__pow5mult>
 80149be:	ee18 2a10 	vmov	r2, s16
 80149c2:	4601      	mov	r1, r0
 80149c4:	4607      	mov	r7, r0
 80149c6:	4620      	mov	r0, r4
 80149c8:	f000 ff36 	bl	8015838 <__multiply>
 80149cc:	ee18 1a10 	vmov	r1, s16
 80149d0:	4680      	mov	r8, r0
 80149d2:	4620      	mov	r0, r4
 80149d4:	f000 fe18 	bl	8015608 <_Bfree>
 80149d8:	ee08 8a10 	vmov	s16, r8
 80149dc:	9b07      	ldr	r3, [sp, #28]
 80149de:	1b9a      	subs	r2, r3, r6
 80149e0:	d006      	beq.n	80149f0 <_dtoa_r+0x7a0>
 80149e2:	ee18 1a10 	vmov	r1, s16
 80149e6:	4620      	mov	r0, r4
 80149e8:	f000 ffd0 	bl	801598c <__pow5mult>
 80149ec:	ee08 0a10 	vmov	s16, r0
 80149f0:	2101      	movs	r1, #1
 80149f2:	4620      	mov	r0, r4
 80149f4:	f000 ff0a 	bl	801580c <__i2b>
 80149f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	4606      	mov	r6, r0
 80149fe:	f340 8088 	ble.w	8014b12 <_dtoa_r+0x8c2>
 8014a02:	461a      	mov	r2, r3
 8014a04:	4601      	mov	r1, r0
 8014a06:	4620      	mov	r0, r4
 8014a08:	f000 ffc0 	bl	801598c <__pow5mult>
 8014a0c:	9b06      	ldr	r3, [sp, #24]
 8014a0e:	2b01      	cmp	r3, #1
 8014a10:	4606      	mov	r6, r0
 8014a12:	f340 8081 	ble.w	8014b18 <_dtoa_r+0x8c8>
 8014a16:	f04f 0800 	mov.w	r8, #0
 8014a1a:	6933      	ldr	r3, [r6, #16]
 8014a1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014a20:	6918      	ldr	r0, [r3, #16]
 8014a22:	f000 fea3 	bl	801576c <__hi0bits>
 8014a26:	f1c0 0020 	rsb	r0, r0, #32
 8014a2a:	9b05      	ldr	r3, [sp, #20]
 8014a2c:	4418      	add	r0, r3
 8014a2e:	f010 001f 	ands.w	r0, r0, #31
 8014a32:	f000 8092 	beq.w	8014b5a <_dtoa_r+0x90a>
 8014a36:	f1c0 0320 	rsb	r3, r0, #32
 8014a3a:	2b04      	cmp	r3, #4
 8014a3c:	f340 808a 	ble.w	8014b54 <_dtoa_r+0x904>
 8014a40:	f1c0 001c 	rsb	r0, r0, #28
 8014a44:	9b04      	ldr	r3, [sp, #16]
 8014a46:	4403      	add	r3, r0
 8014a48:	9304      	str	r3, [sp, #16]
 8014a4a:	9b05      	ldr	r3, [sp, #20]
 8014a4c:	4403      	add	r3, r0
 8014a4e:	4405      	add	r5, r0
 8014a50:	9305      	str	r3, [sp, #20]
 8014a52:	9b04      	ldr	r3, [sp, #16]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	dd07      	ble.n	8014a68 <_dtoa_r+0x818>
 8014a58:	ee18 1a10 	vmov	r1, s16
 8014a5c:	461a      	mov	r2, r3
 8014a5e:	4620      	mov	r0, r4
 8014a60:	f000 ffee 	bl	8015a40 <__lshift>
 8014a64:	ee08 0a10 	vmov	s16, r0
 8014a68:	9b05      	ldr	r3, [sp, #20]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	dd05      	ble.n	8014a7a <_dtoa_r+0x82a>
 8014a6e:	4631      	mov	r1, r6
 8014a70:	461a      	mov	r2, r3
 8014a72:	4620      	mov	r0, r4
 8014a74:	f000 ffe4 	bl	8015a40 <__lshift>
 8014a78:	4606      	mov	r6, r0
 8014a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d06e      	beq.n	8014b5e <_dtoa_r+0x90e>
 8014a80:	ee18 0a10 	vmov	r0, s16
 8014a84:	4631      	mov	r1, r6
 8014a86:	f001 f84b 	bl	8015b20 <__mcmp>
 8014a8a:	2800      	cmp	r0, #0
 8014a8c:	da67      	bge.n	8014b5e <_dtoa_r+0x90e>
 8014a8e:	9b00      	ldr	r3, [sp, #0]
 8014a90:	3b01      	subs	r3, #1
 8014a92:	ee18 1a10 	vmov	r1, s16
 8014a96:	9300      	str	r3, [sp, #0]
 8014a98:	220a      	movs	r2, #10
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	f000 fdd5 	bl	801564c <__multadd>
 8014aa2:	9b08      	ldr	r3, [sp, #32]
 8014aa4:	ee08 0a10 	vmov	s16, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	f000 81b1 	beq.w	8014e10 <_dtoa_r+0xbc0>
 8014aae:	2300      	movs	r3, #0
 8014ab0:	4639      	mov	r1, r7
 8014ab2:	220a      	movs	r2, #10
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	f000 fdc9 	bl	801564c <__multadd>
 8014aba:	9b02      	ldr	r3, [sp, #8]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	4607      	mov	r7, r0
 8014ac0:	f300 808e 	bgt.w	8014be0 <_dtoa_r+0x990>
 8014ac4:	9b06      	ldr	r3, [sp, #24]
 8014ac6:	2b02      	cmp	r3, #2
 8014ac8:	dc51      	bgt.n	8014b6e <_dtoa_r+0x91e>
 8014aca:	e089      	b.n	8014be0 <_dtoa_r+0x990>
 8014acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014ad2:	e74b      	b.n	801496c <_dtoa_r+0x71c>
 8014ad4:	9b03      	ldr	r3, [sp, #12]
 8014ad6:	1e5e      	subs	r6, r3, #1
 8014ad8:	9b07      	ldr	r3, [sp, #28]
 8014ada:	42b3      	cmp	r3, r6
 8014adc:	bfbf      	itttt	lt
 8014ade:	9b07      	ldrlt	r3, [sp, #28]
 8014ae0:	9607      	strlt	r6, [sp, #28]
 8014ae2:	1af2      	sublt	r2, r6, r3
 8014ae4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014ae6:	bfb6      	itet	lt
 8014ae8:	189b      	addlt	r3, r3, r2
 8014aea:	1b9e      	subge	r6, r3, r6
 8014aec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014aee:	9b03      	ldr	r3, [sp, #12]
 8014af0:	bfb8      	it	lt
 8014af2:	2600      	movlt	r6, #0
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	bfb7      	itett	lt
 8014af8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014afc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014b00:	1a9d      	sublt	r5, r3, r2
 8014b02:	2300      	movlt	r3, #0
 8014b04:	e734      	b.n	8014970 <_dtoa_r+0x720>
 8014b06:	9e07      	ldr	r6, [sp, #28]
 8014b08:	9d04      	ldr	r5, [sp, #16]
 8014b0a:	9f08      	ldr	r7, [sp, #32]
 8014b0c:	e73b      	b.n	8014986 <_dtoa_r+0x736>
 8014b0e:	9a07      	ldr	r2, [sp, #28]
 8014b10:	e767      	b.n	80149e2 <_dtoa_r+0x792>
 8014b12:	9b06      	ldr	r3, [sp, #24]
 8014b14:	2b01      	cmp	r3, #1
 8014b16:	dc18      	bgt.n	8014b4a <_dtoa_r+0x8fa>
 8014b18:	f1ba 0f00 	cmp.w	sl, #0
 8014b1c:	d115      	bne.n	8014b4a <_dtoa_r+0x8fa>
 8014b1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b22:	b993      	cbnz	r3, 8014b4a <_dtoa_r+0x8fa>
 8014b24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014b28:	0d1b      	lsrs	r3, r3, #20
 8014b2a:	051b      	lsls	r3, r3, #20
 8014b2c:	b183      	cbz	r3, 8014b50 <_dtoa_r+0x900>
 8014b2e:	9b04      	ldr	r3, [sp, #16]
 8014b30:	3301      	adds	r3, #1
 8014b32:	9304      	str	r3, [sp, #16]
 8014b34:	9b05      	ldr	r3, [sp, #20]
 8014b36:	3301      	adds	r3, #1
 8014b38:	9305      	str	r3, [sp, #20]
 8014b3a:	f04f 0801 	mov.w	r8, #1
 8014b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	f47f af6a 	bne.w	8014a1a <_dtoa_r+0x7ca>
 8014b46:	2001      	movs	r0, #1
 8014b48:	e76f      	b.n	8014a2a <_dtoa_r+0x7da>
 8014b4a:	f04f 0800 	mov.w	r8, #0
 8014b4e:	e7f6      	b.n	8014b3e <_dtoa_r+0x8ee>
 8014b50:	4698      	mov	r8, r3
 8014b52:	e7f4      	b.n	8014b3e <_dtoa_r+0x8ee>
 8014b54:	f43f af7d 	beq.w	8014a52 <_dtoa_r+0x802>
 8014b58:	4618      	mov	r0, r3
 8014b5a:	301c      	adds	r0, #28
 8014b5c:	e772      	b.n	8014a44 <_dtoa_r+0x7f4>
 8014b5e:	9b03      	ldr	r3, [sp, #12]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	dc37      	bgt.n	8014bd4 <_dtoa_r+0x984>
 8014b64:	9b06      	ldr	r3, [sp, #24]
 8014b66:	2b02      	cmp	r3, #2
 8014b68:	dd34      	ble.n	8014bd4 <_dtoa_r+0x984>
 8014b6a:	9b03      	ldr	r3, [sp, #12]
 8014b6c:	9302      	str	r3, [sp, #8]
 8014b6e:	9b02      	ldr	r3, [sp, #8]
 8014b70:	b96b      	cbnz	r3, 8014b8e <_dtoa_r+0x93e>
 8014b72:	4631      	mov	r1, r6
 8014b74:	2205      	movs	r2, #5
 8014b76:	4620      	mov	r0, r4
 8014b78:	f000 fd68 	bl	801564c <__multadd>
 8014b7c:	4601      	mov	r1, r0
 8014b7e:	4606      	mov	r6, r0
 8014b80:	ee18 0a10 	vmov	r0, s16
 8014b84:	f000 ffcc 	bl	8015b20 <__mcmp>
 8014b88:	2800      	cmp	r0, #0
 8014b8a:	f73f adbb 	bgt.w	8014704 <_dtoa_r+0x4b4>
 8014b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b90:	9d01      	ldr	r5, [sp, #4]
 8014b92:	43db      	mvns	r3, r3
 8014b94:	9300      	str	r3, [sp, #0]
 8014b96:	f04f 0800 	mov.w	r8, #0
 8014b9a:	4631      	mov	r1, r6
 8014b9c:	4620      	mov	r0, r4
 8014b9e:	f000 fd33 	bl	8015608 <_Bfree>
 8014ba2:	2f00      	cmp	r7, #0
 8014ba4:	f43f aea4 	beq.w	80148f0 <_dtoa_r+0x6a0>
 8014ba8:	f1b8 0f00 	cmp.w	r8, #0
 8014bac:	d005      	beq.n	8014bba <_dtoa_r+0x96a>
 8014bae:	45b8      	cmp	r8, r7
 8014bb0:	d003      	beq.n	8014bba <_dtoa_r+0x96a>
 8014bb2:	4641      	mov	r1, r8
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	f000 fd27 	bl	8015608 <_Bfree>
 8014bba:	4639      	mov	r1, r7
 8014bbc:	4620      	mov	r0, r4
 8014bbe:	f000 fd23 	bl	8015608 <_Bfree>
 8014bc2:	e695      	b.n	80148f0 <_dtoa_r+0x6a0>
 8014bc4:	2600      	movs	r6, #0
 8014bc6:	4637      	mov	r7, r6
 8014bc8:	e7e1      	b.n	8014b8e <_dtoa_r+0x93e>
 8014bca:	9700      	str	r7, [sp, #0]
 8014bcc:	4637      	mov	r7, r6
 8014bce:	e599      	b.n	8014704 <_dtoa_r+0x4b4>
 8014bd0:	40240000 	.word	0x40240000
 8014bd4:	9b08      	ldr	r3, [sp, #32]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	f000 80ca 	beq.w	8014d70 <_dtoa_r+0xb20>
 8014bdc:	9b03      	ldr	r3, [sp, #12]
 8014bde:	9302      	str	r3, [sp, #8]
 8014be0:	2d00      	cmp	r5, #0
 8014be2:	dd05      	ble.n	8014bf0 <_dtoa_r+0x9a0>
 8014be4:	4639      	mov	r1, r7
 8014be6:	462a      	mov	r2, r5
 8014be8:	4620      	mov	r0, r4
 8014bea:	f000 ff29 	bl	8015a40 <__lshift>
 8014bee:	4607      	mov	r7, r0
 8014bf0:	f1b8 0f00 	cmp.w	r8, #0
 8014bf4:	d05b      	beq.n	8014cae <_dtoa_r+0xa5e>
 8014bf6:	6879      	ldr	r1, [r7, #4]
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	f000 fcc5 	bl	8015588 <_Balloc>
 8014bfe:	4605      	mov	r5, r0
 8014c00:	b928      	cbnz	r0, 8014c0e <_dtoa_r+0x9be>
 8014c02:	4b87      	ldr	r3, [pc, #540]	; (8014e20 <_dtoa_r+0xbd0>)
 8014c04:	4602      	mov	r2, r0
 8014c06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014c0a:	f7ff bb3b 	b.w	8014284 <_dtoa_r+0x34>
 8014c0e:	693a      	ldr	r2, [r7, #16]
 8014c10:	3202      	adds	r2, #2
 8014c12:	0092      	lsls	r2, r2, #2
 8014c14:	f107 010c 	add.w	r1, r7, #12
 8014c18:	300c      	adds	r0, #12
 8014c1a:	f000 fca7 	bl	801556c <memcpy>
 8014c1e:	2201      	movs	r2, #1
 8014c20:	4629      	mov	r1, r5
 8014c22:	4620      	mov	r0, r4
 8014c24:	f000 ff0c 	bl	8015a40 <__lshift>
 8014c28:	9b01      	ldr	r3, [sp, #4]
 8014c2a:	f103 0901 	add.w	r9, r3, #1
 8014c2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014c32:	4413      	add	r3, r2
 8014c34:	9305      	str	r3, [sp, #20]
 8014c36:	f00a 0301 	and.w	r3, sl, #1
 8014c3a:	46b8      	mov	r8, r7
 8014c3c:	9304      	str	r3, [sp, #16]
 8014c3e:	4607      	mov	r7, r0
 8014c40:	4631      	mov	r1, r6
 8014c42:	ee18 0a10 	vmov	r0, s16
 8014c46:	f7ff fa77 	bl	8014138 <quorem>
 8014c4a:	4641      	mov	r1, r8
 8014c4c:	9002      	str	r0, [sp, #8]
 8014c4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014c52:	ee18 0a10 	vmov	r0, s16
 8014c56:	f000 ff63 	bl	8015b20 <__mcmp>
 8014c5a:	463a      	mov	r2, r7
 8014c5c:	9003      	str	r0, [sp, #12]
 8014c5e:	4631      	mov	r1, r6
 8014c60:	4620      	mov	r0, r4
 8014c62:	f000 ff79 	bl	8015b58 <__mdiff>
 8014c66:	68c2      	ldr	r2, [r0, #12]
 8014c68:	f109 3bff 	add.w	fp, r9, #4294967295
 8014c6c:	4605      	mov	r5, r0
 8014c6e:	bb02      	cbnz	r2, 8014cb2 <_dtoa_r+0xa62>
 8014c70:	4601      	mov	r1, r0
 8014c72:	ee18 0a10 	vmov	r0, s16
 8014c76:	f000 ff53 	bl	8015b20 <__mcmp>
 8014c7a:	4602      	mov	r2, r0
 8014c7c:	4629      	mov	r1, r5
 8014c7e:	4620      	mov	r0, r4
 8014c80:	9207      	str	r2, [sp, #28]
 8014c82:	f000 fcc1 	bl	8015608 <_Bfree>
 8014c86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014c8a:	ea43 0102 	orr.w	r1, r3, r2
 8014c8e:	9b04      	ldr	r3, [sp, #16]
 8014c90:	430b      	orrs	r3, r1
 8014c92:	464d      	mov	r5, r9
 8014c94:	d10f      	bne.n	8014cb6 <_dtoa_r+0xa66>
 8014c96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014c9a:	d02a      	beq.n	8014cf2 <_dtoa_r+0xaa2>
 8014c9c:	9b03      	ldr	r3, [sp, #12]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	dd02      	ble.n	8014ca8 <_dtoa_r+0xa58>
 8014ca2:	9b02      	ldr	r3, [sp, #8]
 8014ca4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014ca8:	f88b a000 	strb.w	sl, [fp]
 8014cac:	e775      	b.n	8014b9a <_dtoa_r+0x94a>
 8014cae:	4638      	mov	r0, r7
 8014cb0:	e7ba      	b.n	8014c28 <_dtoa_r+0x9d8>
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	e7e2      	b.n	8014c7c <_dtoa_r+0xa2c>
 8014cb6:	9b03      	ldr	r3, [sp, #12]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	db04      	blt.n	8014cc6 <_dtoa_r+0xa76>
 8014cbc:	9906      	ldr	r1, [sp, #24]
 8014cbe:	430b      	orrs	r3, r1
 8014cc0:	9904      	ldr	r1, [sp, #16]
 8014cc2:	430b      	orrs	r3, r1
 8014cc4:	d122      	bne.n	8014d0c <_dtoa_r+0xabc>
 8014cc6:	2a00      	cmp	r2, #0
 8014cc8:	ddee      	ble.n	8014ca8 <_dtoa_r+0xa58>
 8014cca:	ee18 1a10 	vmov	r1, s16
 8014cce:	2201      	movs	r2, #1
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	f000 feb5 	bl	8015a40 <__lshift>
 8014cd6:	4631      	mov	r1, r6
 8014cd8:	ee08 0a10 	vmov	s16, r0
 8014cdc:	f000 ff20 	bl	8015b20 <__mcmp>
 8014ce0:	2800      	cmp	r0, #0
 8014ce2:	dc03      	bgt.n	8014cec <_dtoa_r+0xa9c>
 8014ce4:	d1e0      	bne.n	8014ca8 <_dtoa_r+0xa58>
 8014ce6:	f01a 0f01 	tst.w	sl, #1
 8014cea:	d0dd      	beq.n	8014ca8 <_dtoa_r+0xa58>
 8014cec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014cf0:	d1d7      	bne.n	8014ca2 <_dtoa_r+0xa52>
 8014cf2:	2339      	movs	r3, #57	; 0x39
 8014cf4:	f88b 3000 	strb.w	r3, [fp]
 8014cf8:	462b      	mov	r3, r5
 8014cfa:	461d      	mov	r5, r3
 8014cfc:	3b01      	subs	r3, #1
 8014cfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014d02:	2a39      	cmp	r2, #57	; 0x39
 8014d04:	d071      	beq.n	8014dea <_dtoa_r+0xb9a>
 8014d06:	3201      	adds	r2, #1
 8014d08:	701a      	strb	r2, [r3, #0]
 8014d0a:	e746      	b.n	8014b9a <_dtoa_r+0x94a>
 8014d0c:	2a00      	cmp	r2, #0
 8014d0e:	dd07      	ble.n	8014d20 <_dtoa_r+0xad0>
 8014d10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014d14:	d0ed      	beq.n	8014cf2 <_dtoa_r+0xaa2>
 8014d16:	f10a 0301 	add.w	r3, sl, #1
 8014d1a:	f88b 3000 	strb.w	r3, [fp]
 8014d1e:	e73c      	b.n	8014b9a <_dtoa_r+0x94a>
 8014d20:	9b05      	ldr	r3, [sp, #20]
 8014d22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014d26:	4599      	cmp	r9, r3
 8014d28:	d047      	beq.n	8014dba <_dtoa_r+0xb6a>
 8014d2a:	ee18 1a10 	vmov	r1, s16
 8014d2e:	2300      	movs	r3, #0
 8014d30:	220a      	movs	r2, #10
 8014d32:	4620      	mov	r0, r4
 8014d34:	f000 fc8a 	bl	801564c <__multadd>
 8014d38:	45b8      	cmp	r8, r7
 8014d3a:	ee08 0a10 	vmov	s16, r0
 8014d3e:	f04f 0300 	mov.w	r3, #0
 8014d42:	f04f 020a 	mov.w	r2, #10
 8014d46:	4641      	mov	r1, r8
 8014d48:	4620      	mov	r0, r4
 8014d4a:	d106      	bne.n	8014d5a <_dtoa_r+0xb0a>
 8014d4c:	f000 fc7e 	bl	801564c <__multadd>
 8014d50:	4680      	mov	r8, r0
 8014d52:	4607      	mov	r7, r0
 8014d54:	f109 0901 	add.w	r9, r9, #1
 8014d58:	e772      	b.n	8014c40 <_dtoa_r+0x9f0>
 8014d5a:	f000 fc77 	bl	801564c <__multadd>
 8014d5e:	4639      	mov	r1, r7
 8014d60:	4680      	mov	r8, r0
 8014d62:	2300      	movs	r3, #0
 8014d64:	220a      	movs	r2, #10
 8014d66:	4620      	mov	r0, r4
 8014d68:	f000 fc70 	bl	801564c <__multadd>
 8014d6c:	4607      	mov	r7, r0
 8014d6e:	e7f1      	b.n	8014d54 <_dtoa_r+0xb04>
 8014d70:	9b03      	ldr	r3, [sp, #12]
 8014d72:	9302      	str	r3, [sp, #8]
 8014d74:	9d01      	ldr	r5, [sp, #4]
 8014d76:	ee18 0a10 	vmov	r0, s16
 8014d7a:	4631      	mov	r1, r6
 8014d7c:	f7ff f9dc 	bl	8014138 <quorem>
 8014d80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014d84:	9b01      	ldr	r3, [sp, #4]
 8014d86:	f805 ab01 	strb.w	sl, [r5], #1
 8014d8a:	1aea      	subs	r2, r5, r3
 8014d8c:	9b02      	ldr	r3, [sp, #8]
 8014d8e:	4293      	cmp	r3, r2
 8014d90:	dd09      	ble.n	8014da6 <_dtoa_r+0xb56>
 8014d92:	ee18 1a10 	vmov	r1, s16
 8014d96:	2300      	movs	r3, #0
 8014d98:	220a      	movs	r2, #10
 8014d9a:	4620      	mov	r0, r4
 8014d9c:	f000 fc56 	bl	801564c <__multadd>
 8014da0:	ee08 0a10 	vmov	s16, r0
 8014da4:	e7e7      	b.n	8014d76 <_dtoa_r+0xb26>
 8014da6:	9b02      	ldr	r3, [sp, #8]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	bfc8      	it	gt
 8014dac:	461d      	movgt	r5, r3
 8014dae:	9b01      	ldr	r3, [sp, #4]
 8014db0:	bfd8      	it	le
 8014db2:	2501      	movle	r5, #1
 8014db4:	441d      	add	r5, r3
 8014db6:	f04f 0800 	mov.w	r8, #0
 8014dba:	ee18 1a10 	vmov	r1, s16
 8014dbe:	2201      	movs	r2, #1
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f000 fe3d 	bl	8015a40 <__lshift>
 8014dc6:	4631      	mov	r1, r6
 8014dc8:	ee08 0a10 	vmov	s16, r0
 8014dcc:	f000 fea8 	bl	8015b20 <__mcmp>
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	dc91      	bgt.n	8014cf8 <_dtoa_r+0xaa8>
 8014dd4:	d102      	bne.n	8014ddc <_dtoa_r+0xb8c>
 8014dd6:	f01a 0f01 	tst.w	sl, #1
 8014dda:	d18d      	bne.n	8014cf8 <_dtoa_r+0xaa8>
 8014ddc:	462b      	mov	r3, r5
 8014dde:	461d      	mov	r5, r3
 8014de0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014de4:	2a30      	cmp	r2, #48	; 0x30
 8014de6:	d0fa      	beq.n	8014dde <_dtoa_r+0xb8e>
 8014de8:	e6d7      	b.n	8014b9a <_dtoa_r+0x94a>
 8014dea:	9a01      	ldr	r2, [sp, #4]
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d184      	bne.n	8014cfa <_dtoa_r+0xaaa>
 8014df0:	9b00      	ldr	r3, [sp, #0]
 8014df2:	3301      	adds	r3, #1
 8014df4:	9300      	str	r3, [sp, #0]
 8014df6:	2331      	movs	r3, #49	; 0x31
 8014df8:	7013      	strb	r3, [r2, #0]
 8014dfa:	e6ce      	b.n	8014b9a <_dtoa_r+0x94a>
 8014dfc:	4b09      	ldr	r3, [pc, #36]	; (8014e24 <_dtoa_r+0xbd4>)
 8014dfe:	f7ff ba95 	b.w	801432c <_dtoa_r+0xdc>
 8014e02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	f47f aa6e 	bne.w	80142e6 <_dtoa_r+0x96>
 8014e0a:	4b07      	ldr	r3, [pc, #28]	; (8014e28 <_dtoa_r+0xbd8>)
 8014e0c:	f7ff ba8e 	b.w	801432c <_dtoa_r+0xdc>
 8014e10:	9b02      	ldr	r3, [sp, #8]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	dcae      	bgt.n	8014d74 <_dtoa_r+0xb24>
 8014e16:	9b06      	ldr	r3, [sp, #24]
 8014e18:	2b02      	cmp	r3, #2
 8014e1a:	f73f aea8 	bgt.w	8014b6e <_dtoa_r+0x91e>
 8014e1e:	e7a9      	b.n	8014d74 <_dtoa_r+0xb24>
 8014e20:	0802ae39 	.word	0x0802ae39
 8014e24:	0802aba4 	.word	0x0802aba4
 8014e28:	0802add1 	.word	0x0802add1

08014e2c <fiprintf>:
 8014e2c:	b40e      	push	{r1, r2, r3}
 8014e2e:	b503      	push	{r0, r1, lr}
 8014e30:	4601      	mov	r1, r0
 8014e32:	ab03      	add	r3, sp, #12
 8014e34:	4805      	ldr	r0, [pc, #20]	; (8014e4c <fiprintf+0x20>)
 8014e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e3a:	6800      	ldr	r0, [r0, #0]
 8014e3c:	9301      	str	r3, [sp, #4]
 8014e3e:	f001 fae1 	bl	8016404 <_vfiprintf_r>
 8014e42:	b002      	add	sp, #8
 8014e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e48:	b003      	add	sp, #12
 8014e4a:	4770      	bx	lr
 8014e4c:	20000044 	.word	0x20000044

08014e50 <rshift>:
 8014e50:	6903      	ldr	r3, [r0, #16]
 8014e52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014e56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014e5e:	f100 0414 	add.w	r4, r0, #20
 8014e62:	dd45      	ble.n	8014ef0 <rshift+0xa0>
 8014e64:	f011 011f 	ands.w	r1, r1, #31
 8014e68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014e6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014e70:	d10c      	bne.n	8014e8c <rshift+0x3c>
 8014e72:	f100 0710 	add.w	r7, r0, #16
 8014e76:	4629      	mov	r1, r5
 8014e78:	42b1      	cmp	r1, r6
 8014e7a:	d334      	bcc.n	8014ee6 <rshift+0x96>
 8014e7c:	1a9b      	subs	r3, r3, r2
 8014e7e:	009b      	lsls	r3, r3, #2
 8014e80:	1eea      	subs	r2, r5, #3
 8014e82:	4296      	cmp	r6, r2
 8014e84:	bf38      	it	cc
 8014e86:	2300      	movcc	r3, #0
 8014e88:	4423      	add	r3, r4
 8014e8a:	e015      	b.n	8014eb8 <rshift+0x68>
 8014e8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014e90:	f1c1 0820 	rsb	r8, r1, #32
 8014e94:	40cf      	lsrs	r7, r1
 8014e96:	f105 0e04 	add.w	lr, r5, #4
 8014e9a:	46a1      	mov	r9, r4
 8014e9c:	4576      	cmp	r6, lr
 8014e9e:	46f4      	mov	ip, lr
 8014ea0:	d815      	bhi.n	8014ece <rshift+0x7e>
 8014ea2:	1a9a      	subs	r2, r3, r2
 8014ea4:	0092      	lsls	r2, r2, #2
 8014ea6:	3a04      	subs	r2, #4
 8014ea8:	3501      	adds	r5, #1
 8014eaa:	42ae      	cmp	r6, r5
 8014eac:	bf38      	it	cc
 8014eae:	2200      	movcc	r2, #0
 8014eb0:	18a3      	adds	r3, r4, r2
 8014eb2:	50a7      	str	r7, [r4, r2]
 8014eb4:	b107      	cbz	r7, 8014eb8 <rshift+0x68>
 8014eb6:	3304      	adds	r3, #4
 8014eb8:	1b1a      	subs	r2, r3, r4
 8014eba:	42a3      	cmp	r3, r4
 8014ebc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014ec0:	bf08      	it	eq
 8014ec2:	2300      	moveq	r3, #0
 8014ec4:	6102      	str	r2, [r0, #16]
 8014ec6:	bf08      	it	eq
 8014ec8:	6143      	streq	r3, [r0, #20]
 8014eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ece:	f8dc c000 	ldr.w	ip, [ip]
 8014ed2:	fa0c fc08 	lsl.w	ip, ip, r8
 8014ed6:	ea4c 0707 	orr.w	r7, ip, r7
 8014eda:	f849 7b04 	str.w	r7, [r9], #4
 8014ede:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014ee2:	40cf      	lsrs	r7, r1
 8014ee4:	e7da      	b.n	8014e9c <rshift+0x4c>
 8014ee6:	f851 cb04 	ldr.w	ip, [r1], #4
 8014eea:	f847 cf04 	str.w	ip, [r7, #4]!
 8014eee:	e7c3      	b.n	8014e78 <rshift+0x28>
 8014ef0:	4623      	mov	r3, r4
 8014ef2:	e7e1      	b.n	8014eb8 <rshift+0x68>

08014ef4 <__hexdig_fun>:
 8014ef4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014ef8:	2b09      	cmp	r3, #9
 8014efa:	d802      	bhi.n	8014f02 <__hexdig_fun+0xe>
 8014efc:	3820      	subs	r0, #32
 8014efe:	b2c0      	uxtb	r0, r0
 8014f00:	4770      	bx	lr
 8014f02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014f06:	2b05      	cmp	r3, #5
 8014f08:	d801      	bhi.n	8014f0e <__hexdig_fun+0x1a>
 8014f0a:	3847      	subs	r0, #71	; 0x47
 8014f0c:	e7f7      	b.n	8014efe <__hexdig_fun+0xa>
 8014f0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014f12:	2b05      	cmp	r3, #5
 8014f14:	d801      	bhi.n	8014f1a <__hexdig_fun+0x26>
 8014f16:	3827      	subs	r0, #39	; 0x27
 8014f18:	e7f1      	b.n	8014efe <__hexdig_fun+0xa>
 8014f1a:	2000      	movs	r0, #0
 8014f1c:	4770      	bx	lr
	...

08014f20 <__gethex>:
 8014f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f24:	ed2d 8b02 	vpush	{d8}
 8014f28:	b089      	sub	sp, #36	; 0x24
 8014f2a:	ee08 0a10 	vmov	s16, r0
 8014f2e:	9304      	str	r3, [sp, #16]
 8014f30:	4bb4      	ldr	r3, [pc, #720]	; (8015204 <__gethex+0x2e4>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	9301      	str	r3, [sp, #4]
 8014f36:	4618      	mov	r0, r3
 8014f38:	468b      	mov	fp, r1
 8014f3a:	4690      	mov	r8, r2
 8014f3c:	f7eb f95a 	bl	80001f4 <strlen>
 8014f40:	9b01      	ldr	r3, [sp, #4]
 8014f42:	f8db 2000 	ldr.w	r2, [fp]
 8014f46:	4403      	add	r3, r0
 8014f48:	4682      	mov	sl, r0
 8014f4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014f4e:	9305      	str	r3, [sp, #20]
 8014f50:	1c93      	adds	r3, r2, #2
 8014f52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014f56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014f5a:	32fe      	adds	r2, #254	; 0xfe
 8014f5c:	18d1      	adds	r1, r2, r3
 8014f5e:	461f      	mov	r7, r3
 8014f60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014f64:	9100      	str	r1, [sp, #0]
 8014f66:	2830      	cmp	r0, #48	; 0x30
 8014f68:	d0f8      	beq.n	8014f5c <__gethex+0x3c>
 8014f6a:	f7ff ffc3 	bl	8014ef4 <__hexdig_fun>
 8014f6e:	4604      	mov	r4, r0
 8014f70:	2800      	cmp	r0, #0
 8014f72:	d13a      	bne.n	8014fea <__gethex+0xca>
 8014f74:	9901      	ldr	r1, [sp, #4]
 8014f76:	4652      	mov	r2, sl
 8014f78:	4638      	mov	r0, r7
 8014f7a:	f001 fb8d 	bl	8016698 <strncmp>
 8014f7e:	4605      	mov	r5, r0
 8014f80:	2800      	cmp	r0, #0
 8014f82:	d168      	bne.n	8015056 <__gethex+0x136>
 8014f84:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014f88:	eb07 060a 	add.w	r6, r7, sl
 8014f8c:	f7ff ffb2 	bl	8014ef4 <__hexdig_fun>
 8014f90:	2800      	cmp	r0, #0
 8014f92:	d062      	beq.n	801505a <__gethex+0x13a>
 8014f94:	4633      	mov	r3, r6
 8014f96:	7818      	ldrb	r0, [r3, #0]
 8014f98:	2830      	cmp	r0, #48	; 0x30
 8014f9a:	461f      	mov	r7, r3
 8014f9c:	f103 0301 	add.w	r3, r3, #1
 8014fa0:	d0f9      	beq.n	8014f96 <__gethex+0x76>
 8014fa2:	f7ff ffa7 	bl	8014ef4 <__hexdig_fun>
 8014fa6:	2301      	movs	r3, #1
 8014fa8:	fab0 f480 	clz	r4, r0
 8014fac:	0964      	lsrs	r4, r4, #5
 8014fae:	4635      	mov	r5, r6
 8014fb0:	9300      	str	r3, [sp, #0]
 8014fb2:	463a      	mov	r2, r7
 8014fb4:	4616      	mov	r6, r2
 8014fb6:	3201      	adds	r2, #1
 8014fb8:	7830      	ldrb	r0, [r6, #0]
 8014fba:	f7ff ff9b 	bl	8014ef4 <__hexdig_fun>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	d1f8      	bne.n	8014fb4 <__gethex+0x94>
 8014fc2:	9901      	ldr	r1, [sp, #4]
 8014fc4:	4652      	mov	r2, sl
 8014fc6:	4630      	mov	r0, r6
 8014fc8:	f001 fb66 	bl	8016698 <strncmp>
 8014fcc:	b980      	cbnz	r0, 8014ff0 <__gethex+0xd0>
 8014fce:	b94d      	cbnz	r5, 8014fe4 <__gethex+0xc4>
 8014fd0:	eb06 050a 	add.w	r5, r6, sl
 8014fd4:	462a      	mov	r2, r5
 8014fd6:	4616      	mov	r6, r2
 8014fd8:	3201      	adds	r2, #1
 8014fda:	7830      	ldrb	r0, [r6, #0]
 8014fdc:	f7ff ff8a 	bl	8014ef4 <__hexdig_fun>
 8014fe0:	2800      	cmp	r0, #0
 8014fe2:	d1f8      	bne.n	8014fd6 <__gethex+0xb6>
 8014fe4:	1bad      	subs	r5, r5, r6
 8014fe6:	00ad      	lsls	r5, r5, #2
 8014fe8:	e004      	b.n	8014ff4 <__gethex+0xd4>
 8014fea:	2400      	movs	r4, #0
 8014fec:	4625      	mov	r5, r4
 8014fee:	e7e0      	b.n	8014fb2 <__gethex+0x92>
 8014ff0:	2d00      	cmp	r5, #0
 8014ff2:	d1f7      	bne.n	8014fe4 <__gethex+0xc4>
 8014ff4:	7833      	ldrb	r3, [r6, #0]
 8014ff6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014ffa:	2b50      	cmp	r3, #80	; 0x50
 8014ffc:	d13b      	bne.n	8015076 <__gethex+0x156>
 8014ffe:	7873      	ldrb	r3, [r6, #1]
 8015000:	2b2b      	cmp	r3, #43	; 0x2b
 8015002:	d02c      	beq.n	801505e <__gethex+0x13e>
 8015004:	2b2d      	cmp	r3, #45	; 0x2d
 8015006:	d02e      	beq.n	8015066 <__gethex+0x146>
 8015008:	1c71      	adds	r1, r6, #1
 801500a:	f04f 0900 	mov.w	r9, #0
 801500e:	7808      	ldrb	r0, [r1, #0]
 8015010:	f7ff ff70 	bl	8014ef4 <__hexdig_fun>
 8015014:	1e43      	subs	r3, r0, #1
 8015016:	b2db      	uxtb	r3, r3
 8015018:	2b18      	cmp	r3, #24
 801501a:	d82c      	bhi.n	8015076 <__gethex+0x156>
 801501c:	f1a0 0210 	sub.w	r2, r0, #16
 8015020:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015024:	f7ff ff66 	bl	8014ef4 <__hexdig_fun>
 8015028:	1e43      	subs	r3, r0, #1
 801502a:	b2db      	uxtb	r3, r3
 801502c:	2b18      	cmp	r3, #24
 801502e:	d91d      	bls.n	801506c <__gethex+0x14c>
 8015030:	f1b9 0f00 	cmp.w	r9, #0
 8015034:	d000      	beq.n	8015038 <__gethex+0x118>
 8015036:	4252      	negs	r2, r2
 8015038:	4415      	add	r5, r2
 801503a:	f8cb 1000 	str.w	r1, [fp]
 801503e:	b1e4      	cbz	r4, 801507a <__gethex+0x15a>
 8015040:	9b00      	ldr	r3, [sp, #0]
 8015042:	2b00      	cmp	r3, #0
 8015044:	bf14      	ite	ne
 8015046:	2700      	movne	r7, #0
 8015048:	2706      	moveq	r7, #6
 801504a:	4638      	mov	r0, r7
 801504c:	b009      	add	sp, #36	; 0x24
 801504e:	ecbd 8b02 	vpop	{d8}
 8015052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015056:	463e      	mov	r6, r7
 8015058:	4625      	mov	r5, r4
 801505a:	2401      	movs	r4, #1
 801505c:	e7ca      	b.n	8014ff4 <__gethex+0xd4>
 801505e:	f04f 0900 	mov.w	r9, #0
 8015062:	1cb1      	adds	r1, r6, #2
 8015064:	e7d3      	b.n	801500e <__gethex+0xee>
 8015066:	f04f 0901 	mov.w	r9, #1
 801506a:	e7fa      	b.n	8015062 <__gethex+0x142>
 801506c:	230a      	movs	r3, #10
 801506e:	fb03 0202 	mla	r2, r3, r2, r0
 8015072:	3a10      	subs	r2, #16
 8015074:	e7d4      	b.n	8015020 <__gethex+0x100>
 8015076:	4631      	mov	r1, r6
 8015078:	e7df      	b.n	801503a <__gethex+0x11a>
 801507a:	1bf3      	subs	r3, r6, r7
 801507c:	3b01      	subs	r3, #1
 801507e:	4621      	mov	r1, r4
 8015080:	2b07      	cmp	r3, #7
 8015082:	dc0b      	bgt.n	801509c <__gethex+0x17c>
 8015084:	ee18 0a10 	vmov	r0, s16
 8015088:	f000 fa7e 	bl	8015588 <_Balloc>
 801508c:	4604      	mov	r4, r0
 801508e:	b940      	cbnz	r0, 80150a2 <__gethex+0x182>
 8015090:	4b5d      	ldr	r3, [pc, #372]	; (8015208 <__gethex+0x2e8>)
 8015092:	4602      	mov	r2, r0
 8015094:	21de      	movs	r1, #222	; 0xde
 8015096:	485d      	ldr	r0, [pc, #372]	; (801520c <__gethex+0x2ec>)
 8015098:	f7ff f830 	bl	80140fc <__assert_func>
 801509c:	3101      	adds	r1, #1
 801509e:	105b      	asrs	r3, r3, #1
 80150a0:	e7ee      	b.n	8015080 <__gethex+0x160>
 80150a2:	f100 0914 	add.w	r9, r0, #20
 80150a6:	f04f 0b00 	mov.w	fp, #0
 80150aa:	f1ca 0301 	rsb	r3, sl, #1
 80150ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80150b2:	f8cd b000 	str.w	fp, [sp]
 80150b6:	9306      	str	r3, [sp, #24]
 80150b8:	42b7      	cmp	r7, r6
 80150ba:	d340      	bcc.n	801513e <__gethex+0x21e>
 80150bc:	9802      	ldr	r0, [sp, #8]
 80150be:	9b00      	ldr	r3, [sp, #0]
 80150c0:	f840 3b04 	str.w	r3, [r0], #4
 80150c4:	eba0 0009 	sub.w	r0, r0, r9
 80150c8:	1080      	asrs	r0, r0, #2
 80150ca:	0146      	lsls	r6, r0, #5
 80150cc:	6120      	str	r0, [r4, #16]
 80150ce:	4618      	mov	r0, r3
 80150d0:	f000 fb4c 	bl	801576c <__hi0bits>
 80150d4:	1a30      	subs	r0, r6, r0
 80150d6:	f8d8 6000 	ldr.w	r6, [r8]
 80150da:	42b0      	cmp	r0, r6
 80150dc:	dd63      	ble.n	80151a6 <__gethex+0x286>
 80150de:	1b87      	subs	r7, r0, r6
 80150e0:	4639      	mov	r1, r7
 80150e2:	4620      	mov	r0, r4
 80150e4:	f000 fef0 	bl	8015ec8 <__any_on>
 80150e8:	4682      	mov	sl, r0
 80150ea:	b1a8      	cbz	r0, 8015118 <__gethex+0x1f8>
 80150ec:	1e7b      	subs	r3, r7, #1
 80150ee:	1159      	asrs	r1, r3, #5
 80150f0:	f003 021f 	and.w	r2, r3, #31
 80150f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80150f8:	f04f 0a01 	mov.w	sl, #1
 80150fc:	fa0a f202 	lsl.w	r2, sl, r2
 8015100:	420a      	tst	r2, r1
 8015102:	d009      	beq.n	8015118 <__gethex+0x1f8>
 8015104:	4553      	cmp	r3, sl
 8015106:	dd05      	ble.n	8015114 <__gethex+0x1f4>
 8015108:	1eb9      	subs	r1, r7, #2
 801510a:	4620      	mov	r0, r4
 801510c:	f000 fedc 	bl	8015ec8 <__any_on>
 8015110:	2800      	cmp	r0, #0
 8015112:	d145      	bne.n	80151a0 <__gethex+0x280>
 8015114:	f04f 0a02 	mov.w	sl, #2
 8015118:	4639      	mov	r1, r7
 801511a:	4620      	mov	r0, r4
 801511c:	f7ff fe98 	bl	8014e50 <rshift>
 8015120:	443d      	add	r5, r7
 8015122:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015126:	42ab      	cmp	r3, r5
 8015128:	da4c      	bge.n	80151c4 <__gethex+0x2a4>
 801512a:	ee18 0a10 	vmov	r0, s16
 801512e:	4621      	mov	r1, r4
 8015130:	f000 fa6a 	bl	8015608 <_Bfree>
 8015134:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015136:	2300      	movs	r3, #0
 8015138:	6013      	str	r3, [r2, #0]
 801513a:	27a3      	movs	r7, #163	; 0xa3
 801513c:	e785      	b.n	801504a <__gethex+0x12a>
 801513e:	1e73      	subs	r3, r6, #1
 8015140:	9a05      	ldr	r2, [sp, #20]
 8015142:	9303      	str	r3, [sp, #12]
 8015144:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015148:	4293      	cmp	r3, r2
 801514a:	d019      	beq.n	8015180 <__gethex+0x260>
 801514c:	f1bb 0f20 	cmp.w	fp, #32
 8015150:	d107      	bne.n	8015162 <__gethex+0x242>
 8015152:	9b02      	ldr	r3, [sp, #8]
 8015154:	9a00      	ldr	r2, [sp, #0]
 8015156:	f843 2b04 	str.w	r2, [r3], #4
 801515a:	9302      	str	r3, [sp, #8]
 801515c:	2300      	movs	r3, #0
 801515e:	9300      	str	r3, [sp, #0]
 8015160:	469b      	mov	fp, r3
 8015162:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015166:	f7ff fec5 	bl	8014ef4 <__hexdig_fun>
 801516a:	9b00      	ldr	r3, [sp, #0]
 801516c:	f000 000f 	and.w	r0, r0, #15
 8015170:	fa00 f00b 	lsl.w	r0, r0, fp
 8015174:	4303      	orrs	r3, r0
 8015176:	9300      	str	r3, [sp, #0]
 8015178:	f10b 0b04 	add.w	fp, fp, #4
 801517c:	9b03      	ldr	r3, [sp, #12]
 801517e:	e00d      	b.n	801519c <__gethex+0x27c>
 8015180:	9b03      	ldr	r3, [sp, #12]
 8015182:	9a06      	ldr	r2, [sp, #24]
 8015184:	4413      	add	r3, r2
 8015186:	42bb      	cmp	r3, r7
 8015188:	d3e0      	bcc.n	801514c <__gethex+0x22c>
 801518a:	4618      	mov	r0, r3
 801518c:	9901      	ldr	r1, [sp, #4]
 801518e:	9307      	str	r3, [sp, #28]
 8015190:	4652      	mov	r2, sl
 8015192:	f001 fa81 	bl	8016698 <strncmp>
 8015196:	9b07      	ldr	r3, [sp, #28]
 8015198:	2800      	cmp	r0, #0
 801519a:	d1d7      	bne.n	801514c <__gethex+0x22c>
 801519c:	461e      	mov	r6, r3
 801519e:	e78b      	b.n	80150b8 <__gethex+0x198>
 80151a0:	f04f 0a03 	mov.w	sl, #3
 80151a4:	e7b8      	b.n	8015118 <__gethex+0x1f8>
 80151a6:	da0a      	bge.n	80151be <__gethex+0x29e>
 80151a8:	1a37      	subs	r7, r6, r0
 80151aa:	4621      	mov	r1, r4
 80151ac:	ee18 0a10 	vmov	r0, s16
 80151b0:	463a      	mov	r2, r7
 80151b2:	f000 fc45 	bl	8015a40 <__lshift>
 80151b6:	1bed      	subs	r5, r5, r7
 80151b8:	4604      	mov	r4, r0
 80151ba:	f100 0914 	add.w	r9, r0, #20
 80151be:	f04f 0a00 	mov.w	sl, #0
 80151c2:	e7ae      	b.n	8015122 <__gethex+0x202>
 80151c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80151c8:	42a8      	cmp	r0, r5
 80151ca:	dd72      	ble.n	80152b2 <__gethex+0x392>
 80151cc:	1b45      	subs	r5, r0, r5
 80151ce:	42ae      	cmp	r6, r5
 80151d0:	dc36      	bgt.n	8015240 <__gethex+0x320>
 80151d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80151d6:	2b02      	cmp	r3, #2
 80151d8:	d02a      	beq.n	8015230 <__gethex+0x310>
 80151da:	2b03      	cmp	r3, #3
 80151dc:	d02c      	beq.n	8015238 <__gethex+0x318>
 80151de:	2b01      	cmp	r3, #1
 80151e0:	d11c      	bne.n	801521c <__gethex+0x2fc>
 80151e2:	42ae      	cmp	r6, r5
 80151e4:	d11a      	bne.n	801521c <__gethex+0x2fc>
 80151e6:	2e01      	cmp	r6, #1
 80151e8:	d112      	bne.n	8015210 <__gethex+0x2f0>
 80151ea:	9a04      	ldr	r2, [sp, #16]
 80151ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80151f0:	6013      	str	r3, [r2, #0]
 80151f2:	2301      	movs	r3, #1
 80151f4:	6123      	str	r3, [r4, #16]
 80151f6:	f8c9 3000 	str.w	r3, [r9]
 80151fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151fc:	2762      	movs	r7, #98	; 0x62
 80151fe:	601c      	str	r4, [r3, #0]
 8015200:	e723      	b.n	801504a <__gethex+0x12a>
 8015202:	bf00      	nop
 8015204:	0802aeb0 	.word	0x0802aeb0
 8015208:	0802ae39 	.word	0x0802ae39
 801520c:	0802ae4a 	.word	0x0802ae4a
 8015210:	1e71      	subs	r1, r6, #1
 8015212:	4620      	mov	r0, r4
 8015214:	f000 fe58 	bl	8015ec8 <__any_on>
 8015218:	2800      	cmp	r0, #0
 801521a:	d1e6      	bne.n	80151ea <__gethex+0x2ca>
 801521c:	ee18 0a10 	vmov	r0, s16
 8015220:	4621      	mov	r1, r4
 8015222:	f000 f9f1 	bl	8015608 <_Bfree>
 8015226:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015228:	2300      	movs	r3, #0
 801522a:	6013      	str	r3, [r2, #0]
 801522c:	2750      	movs	r7, #80	; 0x50
 801522e:	e70c      	b.n	801504a <__gethex+0x12a>
 8015230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015232:	2b00      	cmp	r3, #0
 8015234:	d1f2      	bne.n	801521c <__gethex+0x2fc>
 8015236:	e7d8      	b.n	80151ea <__gethex+0x2ca>
 8015238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801523a:	2b00      	cmp	r3, #0
 801523c:	d1d5      	bne.n	80151ea <__gethex+0x2ca>
 801523e:	e7ed      	b.n	801521c <__gethex+0x2fc>
 8015240:	1e6f      	subs	r7, r5, #1
 8015242:	f1ba 0f00 	cmp.w	sl, #0
 8015246:	d131      	bne.n	80152ac <__gethex+0x38c>
 8015248:	b127      	cbz	r7, 8015254 <__gethex+0x334>
 801524a:	4639      	mov	r1, r7
 801524c:	4620      	mov	r0, r4
 801524e:	f000 fe3b 	bl	8015ec8 <__any_on>
 8015252:	4682      	mov	sl, r0
 8015254:	117b      	asrs	r3, r7, #5
 8015256:	2101      	movs	r1, #1
 8015258:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801525c:	f007 071f 	and.w	r7, r7, #31
 8015260:	fa01 f707 	lsl.w	r7, r1, r7
 8015264:	421f      	tst	r7, r3
 8015266:	4629      	mov	r1, r5
 8015268:	4620      	mov	r0, r4
 801526a:	bf18      	it	ne
 801526c:	f04a 0a02 	orrne.w	sl, sl, #2
 8015270:	1b76      	subs	r6, r6, r5
 8015272:	f7ff fded 	bl	8014e50 <rshift>
 8015276:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801527a:	2702      	movs	r7, #2
 801527c:	f1ba 0f00 	cmp.w	sl, #0
 8015280:	d048      	beq.n	8015314 <__gethex+0x3f4>
 8015282:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015286:	2b02      	cmp	r3, #2
 8015288:	d015      	beq.n	80152b6 <__gethex+0x396>
 801528a:	2b03      	cmp	r3, #3
 801528c:	d017      	beq.n	80152be <__gethex+0x39e>
 801528e:	2b01      	cmp	r3, #1
 8015290:	d109      	bne.n	80152a6 <__gethex+0x386>
 8015292:	f01a 0f02 	tst.w	sl, #2
 8015296:	d006      	beq.n	80152a6 <__gethex+0x386>
 8015298:	f8d9 0000 	ldr.w	r0, [r9]
 801529c:	ea4a 0a00 	orr.w	sl, sl, r0
 80152a0:	f01a 0f01 	tst.w	sl, #1
 80152a4:	d10e      	bne.n	80152c4 <__gethex+0x3a4>
 80152a6:	f047 0710 	orr.w	r7, r7, #16
 80152aa:	e033      	b.n	8015314 <__gethex+0x3f4>
 80152ac:	f04f 0a01 	mov.w	sl, #1
 80152b0:	e7d0      	b.n	8015254 <__gethex+0x334>
 80152b2:	2701      	movs	r7, #1
 80152b4:	e7e2      	b.n	801527c <__gethex+0x35c>
 80152b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152b8:	f1c3 0301 	rsb	r3, r3, #1
 80152bc:	9315      	str	r3, [sp, #84]	; 0x54
 80152be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d0f0      	beq.n	80152a6 <__gethex+0x386>
 80152c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80152c8:	f104 0314 	add.w	r3, r4, #20
 80152cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80152d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80152d4:	f04f 0c00 	mov.w	ip, #0
 80152d8:	4618      	mov	r0, r3
 80152da:	f853 2b04 	ldr.w	r2, [r3], #4
 80152de:	f1b2 3fff 	cmp.w	r2, #4294967295
 80152e2:	d01c      	beq.n	801531e <__gethex+0x3fe>
 80152e4:	3201      	adds	r2, #1
 80152e6:	6002      	str	r2, [r0, #0]
 80152e8:	2f02      	cmp	r7, #2
 80152ea:	f104 0314 	add.w	r3, r4, #20
 80152ee:	d13f      	bne.n	8015370 <__gethex+0x450>
 80152f0:	f8d8 2000 	ldr.w	r2, [r8]
 80152f4:	3a01      	subs	r2, #1
 80152f6:	42b2      	cmp	r2, r6
 80152f8:	d10a      	bne.n	8015310 <__gethex+0x3f0>
 80152fa:	1171      	asrs	r1, r6, #5
 80152fc:	2201      	movs	r2, #1
 80152fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015302:	f006 061f 	and.w	r6, r6, #31
 8015306:	fa02 f606 	lsl.w	r6, r2, r6
 801530a:	421e      	tst	r6, r3
 801530c:	bf18      	it	ne
 801530e:	4617      	movne	r7, r2
 8015310:	f047 0720 	orr.w	r7, r7, #32
 8015314:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015316:	601c      	str	r4, [r3, #0]
 8015318:	9b04      	ldr	r3, [sp, #16]
 801531a:	601d      	str	r5, [r3, #0]
 801531c:	e695      	b.n	801504a <__gethex+0x12a>
 801531e:	4299      	cmp	r1, r3
 8015320:	f843 cc04 	str.w	ip, [r3, #-4]
 8015324:	d8d8      	bhi.n	80152d8 <__gethex+0x3b8>
 8015326:	68a3      	ldr	r3, [r4, #8]
 8015328:	459b      	cmp	fp, r3
 801532a:	db19      	blt.n	8015360 <__gethex+0x440>
 801532c:	6861      	ldr	r1, [r4, #4]
 801532e:	ee18 0a10 	vmov	r0, s16
 8015332:	3101      	adds	r1, #1
 8015334:	f000 f928 	bl	8015588 <_Balloc>
 8015338:	4681      	mov	r9, r0
 801533a:	b918      	cbnz	r0, 8015344 <__gethex+0x424>
 801533c:	4b1a      	ldr	r3, [pc, #104]	; (80153a8 <__gethex+0x488>)
 801533e:	4602      	mov	r2, r0
 8015340:	2184      	movs	r1, #132	; 0x84
 8015342:	e6a8      	b.n	8015096 <__gethex+0x176>
 8015344:	6922      	ldr	r2, [r4, #16]
 8015346:	3202      	adds	r2, #2
 8015348:	f104 010c 	add.w	r1, r4, #12
 801534c:	0092      	lsls	r2, r2, #2
 801534e:	300c      	adds	r0, #12
 8015350:	f000 f90c 	bl	801556c <memcpy>
 8015354:	4621      	mov	r1, r4
 8015356:	ee18 0a10 	vmov	r0, s16
 801535a:	f000 f955 	bl	8015608 <_Bfree>
 801535e:	464c      	mov	r4, r9
 8015360:	6923      	ldr	r3, [r4, #16]
 8015362:	1c5a      	adds	r2, r3, #1
 8015364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015368:	6122      	str	r2, [r4, #16]
 801536a:	2201      	movs	r2, #1
 801536c:	615a      	str	r2, [r3, #20]
 801536e:	e7bb      	b.n	80152e8 <__gethex+0x3c8>
 8015370:	6922      	ldr	r2, [r4, #16]
 8015372:	455a      	cmp	r2, fp
 8015374:	dd0b      	ble.n	801538e <__gethex+0x46e>
 8015376:	2101      	movs	r1, #1
 8015378:	4620      	mov	r0, r4
 801537a:	f7ff fd69 	bl	8014e50 <rshift>
 801537e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015382:	3501      	adds	r5, #1
 8015384:	42ab      	cmp	r3, r5
 8015386:	f6ff aed0 	blt.w	801512a <__gethex+0x20a>
 801538a:	2701      	movs	r7, #1
 801538c:	e7c0      	b.n	8015310 <__gethex+0x3f0>
 801538e:	f016 061f 	ands.w	r6, r6, #31
 8015392:	d0fa      	beq.n	801538a <__gethex+0x46a>
 8015394:	4453      	add	r3, sl
 8015396:	f1c6 0620 	rsb	r6, r6, #32
 801539a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801539e:	f000 f9e5 	bl	801576c <__hi0bits>
 80153a2:	42b0      	cmp	r0, r6
 80153a4:	dbe7      	blt.n	8015376 <__gethex+0x456>
 80153a6:	e7f0      	b.n	801538a <__gethex+0x46a>
 80153a8:	0802ae39 	.word	0x0802ae39

080153ac <L_shift>:
 80153ac:	f1c2 0208 	rsb	r2, r2, #8
 80153b0:	0092      	lsls	r2, r2, #2
 80153b2:	b570      	push	{r4, r5, r6, lr}
 80153b4:	f1c2 0620 	rsb	r6, r2, #32
 80153b8:	6843      	ldr	r3, [r0, #4]
 80153ba:	6804      	ldr	r4, [r0, #0]
 80153bc:	fa03 f506 	lsl.w	r5, r3, r6
 80153c0:	432c      	orrs	r4, r5
 80153c2:	40d3      	lsrs	r3, r2
 80153c4:	6004      	str	r4, [r0, #0]
 80153c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80153ca:	4288      	cmp	r0, r1
 80153cc:	d3f4      	bcc.n	80153b8 <L_shift+0xc>
 80153ce:	bd70      	pop	{r4, r5, r6, pc}

080153d0 <__match>:
 80153d0:	b530      	push	{r4, r5, lr}
 80153d2:	6803      	ldr	r3, [r0, #0]
 80153d4:	3301      	adds	r3, #1
 80153d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80153da:	b914      	cbnz	r4, 80153e2 <__match+0x12>
 80153dc:	6003      	str	r3, [r0, #0]
 80153de:	2001      	movs	r0, #1
 80153e0:	bd30      	pop	{r4, r5, pc}
 80153e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80153ea:	2d19      	cmp	r5, #25
 80153ec:	bf98      	it	ls
 80153ee:	3220      	addls	r2, #32
 80153f0:	42a2      	cmp	r2, r4
 80153f2:	d0f0      	beq.n	80153d6 <__match+0x6>
 80153f4:	2000      	movs	r0, #0
 80153f6:	e7f3      	b.n	80153e0 <__match+0x10>

080153f8 <__hexnan>:
 80153f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153fc:	680b      	ldr	r3, [r1, #0]
 80153fe:	115e      	asrs	r6, r3, #5
 8015400:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015404:	f013 031f 	ands.w	r3, r3, #31
 8015408:	b087      	sub	sp, #28
 801540a:	bf18      	it	ne
 801540c:	3604      	addne	r6, #4
 801540e:	2500      	movs	r5, #0
 8015410:	1f37      	subs	r7, r6, #4
 8015412:	4690      	mov	r8, r2
 8015414:	6802      	ldr	r2, [r0, #0]
 8015416:	9301      	str	r3, [sp, #4]
 8015418:	4682      	mov	sl, r0
 801541a:	f846 5c04 	str.w	r5, [r6, #-4]
 801541e:	46b9      	mov	r9, r7
 8015420:	463c      	mov	r4, r7
 8015422:	9502      	str	r5, [sp, #8]
 8015424:	46ab      	mov	fp, r5
 8015426:	7851      	ldrb	r1, [r2, #1]
 8015428:	1c53      	adds	r3, r2, #1
 801542a:	9303      	str	r3, [sp, #12]
 801542c:	b341      	cbz	r1, 8015480 <__hexnan+0x88>
 801542e:	4608      	mov	r0, r1
 8015430:	9205      	str	r2, [sp, #20]
 8015432:	9104      	str	r1, [sp, #16]
 8015434:	f7ff fd5e 	bl	8014ef4 <__hexdig_fun>
 8015438:	2800      	cmp	r0, #0
 801543a:	d14f      	bne.n	80154dc <__hexnan+0xe4>
 801543c:	9904      	ldr	r1, [sp, #16]
 801543e:	9a05      	ldr	r2, [sp, #20]
 8015440:	2920      	cmp	r1, #32
 8015442:	d818      	bhi.n	8015476 <__hexnan+0x7e>
 8015444:	9b02      	ldr	r3, [sp, #8]
 8015446:	459b      	cmp	fp, r3
 8015448:	dd13      	ble.n	8015472 <__hexnan+0x7a>
 801544a:	454c      	cmp	r4, r9
 801544c:	d206      	bcs.n	801545c <__hexnan+0x64>
 801544e:	2d07      	cmp	r5, #7
 8015450:	dc04      	bgt.n	801545c <__hexnan+0x64>
 8015452:	462a      	mov	r2, r5
 8015454:	4649      	mov	r1, r9
 8015456:	4620      	mov	r0, r4
 8015458:	f7ff ffa8 	bl	80153ac <L_shift>
 801545c:	4544      	cmp	r4, r8
 801545e:	d950      	bls.n	8015502 <__hexnan+0x10a>
 8015460:	2300      	movs	r3, #0
 8015462:	f1a4 0904 	sub.w	r9, r4, #4
 8015466:	f844 3c04 	str.w	r3, [r4, #-4]
 801546a:	f8cd b008 	str.w	fp, [sp, #8]
 801546e:	464c      	mov	r4, r9
 8015470:	461d      	mov	r5, r3
 8015472:	9a03      	ldr	r2, [sp, #12]
 8015474:	e7d7      	b.n	8015426 <__hexnan+0x2e>
 8015476:	2929      	cmp	r1, #41	; 0x29
 8015478:	d156      	bne.n	8015528 <__hexnan+0x130>
 801547a:	3202      	adds	r2, #2
 801547c:	f8ca 2000 	str.w	r2, [sl]
 8015480:	f1bb 0f00 	cmp.w	fp, #0
 8015484:	d050      	beq.n	8015528 <__hexnan+0x130>
 8015486:	454c      	cmp	r4, r9
 8015488:	d206      	bcs.n	8015498 <__hexnan+0xa0>
 801548a:	2d07      	cmp	r5, #7
 801548c:	dc04      	bgt.n	8015498 <__hexnan+0xa0>
 801548e:	462a      	mov	r2, r5
 8015490:	4649      	mov	r1, r9
 8015492:	4620      	mov	r0, r4
 8015494:	f7ff ff8a 	bl	80153ac <L_shift>
 8015498:	4544      	cmp	r4, r8
 801549a:	d934      	bls.n	8015506 <__hexnan+0x10e>
 801549c:	f1a8 0204 	sub.w	r2, r8, #4
 80154a0:	4623      	mov	r3, r4
 80154a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80154a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80154aa:	429f      	cmp	r7, r3
 80154ac:	d2f9      	bcs.n	80154a2 <__hexnan+0xaa>
 80154ae:	1b3b      	subs	r3, r7, r4
 80154b0:	f023 0303 	bic.w	r3, r3, #3
 80154b4:	3304      	adds	r3, #4
 80154b6:	3401      	adds	r4, #1
 80154b8:	3e03      	subs	r6, #3
 80154ba:	42b4      	cmp	r4, r6
 80154bc:	bf88      	it	hi
 80154be:	2304      	movhi	r3, #4
 80154c0:	4443      	add	r3, r8
 80154c2:	2200      	movs	r2, #0
 80154c4:	f843 2b04 	str.w	r2, [r3], #4
 80154c8:	429f      	cmp	r7, r3
 80154ca:	d2fb      	bcs.n	80154c4 <__hexnan+0xcc>
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	b91b      	cbnz	r3, 80154d8 <__hexnan+0xe0>
 80154d0:	4547      	cmp	r7, r8
 80154d2:	d127      	bne.n	8015524 <__hexnan+0x12c>
 80154d4:	2301      	movs	r3, #1
 80154d6:	603b      	str	r3, [r7, #0]
 80154d8:	2005      	movs	r0, #5
 80154da:	e026      	b.n	801552a <__hexnan+0x132>
 80154dc:	3501      	adds	r5, #1
 80154de:	2d08      	cmp	r5, #8
 80154e0:	f10b 0b01 	add.w	fp, fp, #1
 80154e4:	dd06      	ble.n	80154f4 <__hexnan+0xfc>
 80154e6:	4544      	cmp	r4, r8
 80154e8:	d9c3      	bls.n	8015472 <__hexnan+0x7a>
 80154ea:	2300      	movs	r3, #0
 80154ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80154f0:	2501      	movs	r5, #1
 80154f2:	3c04      	subs	r4, #4
 80154f4:	6822      	ldr	r2, [r4, #0]
 80154f6:	f000 000f 	and.w	r0, r0, #15
 80154fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80154fe:	6022      	str	r2, [r4, #0]
 8015500:	e7b7      	b.n	8015472 <__hexnan+0x7a>
 8015502:	2508      	movs	r5, #8
 8015504:	e7b5      	b.n	8015472 <__hexnan+0x7a>
 8015506:	9b01      	ldr	r3, [sp, #4]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d0df      	beq.n	80154cc <__hexnan+0xd4>
 801550c:	f04f 32ff 	mov.w	r2, #4294967295
 8015510:	f1c3 0320 	rsb	r3, r3, #32
 8015514:	fa22 f303 	lsr.w	r3, r2, r3
 8015518:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801551c:	401a      	ands	r2, r3
 801551e:	f846 2c04 	str.w	r2, [r6, #-4]
 8015522:	e7d3      	b.n	80154cc <__hexnan+0xd4>
 8015524:	3f04      	subs	r7, #4
 8015526:	e7d1      	b.n	80154cc <__hexnan+0xd4>
 8015528:	2004      	movs	r0, #4
 801552a:	b007      	add	sp, #28
 801552c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015530 <_localeconv_r>:
 8015530:	4800      	ldr	r0, [pc, #0]	; (8015534 <_localeconv_r+0x4>)
 8015532:	4770      	bx	lr
 8015534:	2000019c 	.word	0x2000019c

08015538 <malloc>:
 8015538:	4b02      	ldr	r3, [pc, #8]	; (8015544 <malloc+0xc>)
 801553a:	4601      	mov	r1, r0
 801553c:	6818      	ldr	r0, [r3, #0]
 801553e:	f000 bd67 	b.w	8016010 <_malloc_r>
 8015542:	bf00      	nop
 8015544:	20000044 	.word	0x20000044

08015548 <__ascii_mbtowc>:
 8015548:	b082      	sub	sp, #8
 801554a:	b901      	cbnz	r1, 801554e <__ascii_mbtowc+0x6>
 801554c:	a901      	add	r1, sp, #4
 801554e:	b142      	cbz	r2, 8015562 <__ascii_mbtowc+0x1a>
 8015550:	b14b      	cbz	r3, 8015566 <__ascii_mbtowc+0x1e>
 8015552:	7813      	ldrb	r3, [r2, #0]
 8015554:	600b      	str	r3, [r1, #0]
 8015556:	7812      	ldrb	r2, [r2, #0]
 8015558:	1e10      	subs	r0, r2, #0
 801555a:	bf18      	it	ne
 801555c:	2001      	movne	r0, #1
 801555e:	b002      	add	sp, #8
 8015560:	4770      	bx	lr
 8015562:	4610      	mov	r0, r2
 8015564:	e7fb      	b.n	801555e <__ascii_mbtowc+0x16>
 8015566:	f06f 0001 	mvn.w	r0, #1
 801556a:	e7f8      	b.n	801555e <__ascii_mbtowc+0x16>

0801556c <memcpy>:
 801556c:	440a      	add	r2, r1
 801556e:	4291      	cmp	r1, r2
 8015570:	f100 33ff 	add.w	r3, r0, #4294967295
 8015574:	d100      	bne.n	8015578 <memcpy+0xc>
 8015576:	4770      	bx	lr
 8015578:	b510      	push	{r4, lr}
 801557a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801557e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015582:	4291      	cmp	r1, r2
 8015584:	d1f9      	bne.n	801557a <memcpy+0xe>
 8015586:	bd10      	pop	{r4, pc}

08015588 <_Balloc>:
 8015588:	b570      	push	{r4, r5, r6, lr}
 801558a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801558c:	4604      	mov	r4, r0
 801558e:	460d      	mov	r5, r1
 8015590:	b976      	cbnz	r6, 80155b0 <_Balloc+0x28>
 8015592:	2010      	movs	r0, #16
 8015594:	f7ff ffd0 	bl	8015538 <malloc>
 8015598:	4602      	mov	r2, r0
 801559a:	6260      	str	r0, [r4, #36]	; 0x24
 801559c:	b920      	cbnz	r0, 80155a8 <_Balloc+0x20>
 801559e:	4b18      	ldr	r3, [pc, #96]	; (8015600 <_Balloc+0x78>)
 80155a0:	4818      	ldr	r0, [pc, #96]	; (8015604 <_Balloc+0x7c>)
 80155a2:	2166      	movs	r1, #102	; 0x66
 80155a4:	f7fe fdaa 	bl	80140fc <__assert_func>
 80155a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80155ac:	6006      	str	r6, [r0, #0]
 80155ae:	60c6      	str	r6, [r0, #12]
 80155b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80155b2:	68f3      	ldr	r3, [r6, #12]
 80155b4:	b183      	cbz	r3, 80155d8 <_Balloc+0x50>
 80155b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155b8:	68db      	ldr	r3, [r3, #12]
 80155ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80155be:	b9b8      	cbnz	r0, 80155f0 <_Balloc+0x68>
 80155c0:	2101      	movs	r1, #1
 80155c2:	fa01 f605 	lsl.w	r6, r1, r5
 80155c6:	1d72      	adds	r2, r6, #5
 80155c8:	0092      	lsls	r2, r2, #2
 80155ca:	4620      	mov	r0, r4
 80155cc:	f000 fc9d 	bl	8015f0a <_calloc_r>
 80155d0:	b160      	cbz	r0, 80155ec <_Balloc+0x64>
 80155d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80155d6:	e00e      	b.n	80155f6 <_Balloc+0x6e>
 80155d8:	2221      	movs	r2, #33	; 0x21
 80155da:	2104      	movs	r1, #4
 80155dc:	4620      	mov	r0, r4
 80155de:	f000 fc94 	bl	8015f0a <_calloc_r>
 80155e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155e4:	60f0      	str	r0, [r6, #12]
 80155e6:	68db      	ldr	r3, [r3, #12]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d1e4      	bne.n	80155b6 <_Balloc+0x2e>
 80155ec:	2000      	movs	r0, #0
 80155ee:	bd70      	pop	{r4, r5, r6, pc}
 80155f0:	6802      	ldr	r2, [r0, #0]
 80155f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80155f6:	2300      	movs	r3, #0
 80155f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80155fc:	e7f7      	b.n	80155ee <_Balloc+0x66>
 80155fe:	bf00      	nop
 8015600:	0802ac20 	.word	0x0802ac20
 8015604:	0802aec4 	.word	0x0802aec4

08015608 <_Bfree>:
 8015608:	b570      	push	{r4, r5, r6, lr}
 801560a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801560c:	4605      	mov	r5, r0
 801560e:	460c      	mov	r4, r1
 8015610:	b976      	cbnz	r6, 8015630 <_Bfree+0x28>
 8015612:	2010      	movs	r0, #16
 8015614:	f7ff ff90 	bl	8015538 <malloc>
 8015618:	4602      	mov	r2, r0
 801561a:	6268      	str	r0, [r5, #36]	; 0x24
 801561c:	b920      	cbnz	r0, 8015628 <_Bfree+0x20>
 801561e:	4b09      	ldr	r3, [pc, #36]	; (8015644 <_Bfree+0x3c>)
 8015620:	4809      	ldr	r0, [pc, #36]	; (8015648 <_Bfree+0x40>)
 8015622:	218a      	movs	r1, #138	; 0x8a
 8015624:	f7fe fd6a 	bl	80140fc <__assert_func>
 8015628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801562c:	6006      	str	r6, [r0, #0]
 801562e:	60c6      	str	r6, [r0, #12]
 8015630:	b13c      	cbz	r4, 8015642 <_Bfree+0x3a>
 8015632:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015634:	6862      	ldr	r2, [r4, #4]
 8015636:	68db      	ldr	r3, [r3, #12]
 8015638:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801563c:	6021      	str	r1, [r4, #0]
 801563e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015642:	bd70      	pop	{r4, r5, r6, pc}
 8015644:	0802ac20 	.word	0x0802ac20
 8015648:	0802aec4 	.word	0x0802aec4

0801564c <__multadd>:
 801564c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015650:	690d      	ldr	r5, [r1, #16]
 8015652:	4607      	mov	r7, r0
 8015654:	460c      	mov	r4, r1
 8015656:	461e      	mov	r6, r3
 8015658:	f101 0c14 	add.w	ip, r1, #20
 801565c:	2000      	movs	r0, #0
 801565e:	f8dc 3000 	ldr.w	r3, [ip]
 8015662:	b299      	uxth	r1, r3
 8015664:	fb02 6101 	mla	r1, r2, r1, r6
 8015668:	0c1e      	lsrs	r6, r3, #16
 801566a:	0c0b      	lsrs	r3, r1, #16
 801566c:	fb02 3306 	mla	r3, r2, r6, r3
 8015670:	b289      	uxth	r1, r1
 8015672:	3001      	adds	r0, #1
 8015674:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015678:	4285      	cmp	r5, r0
 801567a:	f84c 1b04 	str.w	r1, [ip], #4
 801567e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015682:	dcec      	bgt.n	801565e <__multadd+0x12>
 8015684:	b30e      	cbz	r6, 80156ca <__multadd+0x7e>
 8015686:	68a3      	ldr	r3, [r4, #8]
 8015688:	42ab      	cmp	r3, r5
 801568a:	dc19      	bgt.n	80156c0 <__multadd+0x74>
 801568c:	6861      	ldr	r1, [r4, #4]
 801568e:	4638      	mov	r0, r7
 8015690:	3101      	adds	r1, #1
 8015692:	f7ff ff79 	bl	8015588 <_Balloc>
 8015696:	4680      	mov	r8, r0
 8015698:	b928      	cbnz	r0, 80156a6 <__multadd+0x5a>
 801569a:	4602      	mov	r2, r0
 801569c:	4b0c      	ldr	r3, [pc, #48]	; (80156d0 <__multadd+0x84>)
 801569e:	480d      	ldr	r0, [pc, #52]	; (80156d4 <__multadd+0x88>)
 80156a0:	21b5      	movs	r1, #181	; 0xb5
 80156a2:	f7fe fd2b 	bl	80140fc <__assert_func>
 80156a6:	6922      	ldr	r2, [r4, #16]
 80156a8:	3202      	adds	r2, #2
 80156aa:	f104 010c 	add.w	r1, r4, #12
 80156ae:	0092      	lsls	r2, r2, #2
 80156b0:	300c      	adds	r0, #12
 80156b2:	f7ff ff5b 	bl	801556c <memcpy>
 80156b6:	4621      	mov	r1, r4
 80156b8:	4638      	mov	r0, r7
 80156ba:	f7ff ffa5 	bl	8015608 <_Bfree>
 80156be:	4644      	mov	r4, r8
 80156c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80156c4:	3501      	adds	r5, #1
 80156c6:	615e      	str	r6, [r3, #20]
 80156c8:	6125      	str	r5, [r4, #16]
 80156ca:	4620      	mov	r0, r4
 80156cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156d0:	0802ae39 	.word	0x0802ae39
 80156d4:	0802aec4 	.word	0x0802aec4

080156d8 <__s2b>:
 80156d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156dc:	460c      	mov	r4, r1
 80156de:	4615      	mov	r5, r2
 80156e0:	461f      	mov	r7, r3
 80156e2:	2209      	movs	r2, #9
 80156e4:	3308      	adds	r3, #8
 80156e6:	4606      	mov	r6, r0
 80156e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80156ec:	2100      	movs	r1, #0
 80156ee:	2201      	movs	r2, #1
 80156f0:	429a      	cmp	r2, r3
 80156f2:	db09      	blt.n	8015708 <__s2b+0x30>
 80156f4:	4630      	mov	r0, r6
 80156f6:	f7ff ff47 	bl	8015588 <_Balloc>
 80156fa:	b940      	cbnz	r0, 801570e <__s2b+0x36>
 80156fc:	4602      	mov	r2, r0
 80156fe:	4b19      	ldr	r3, [pc, #100]	; (8015764 <__s2b+0x8c>)
 8015700:	4819      	ldr	r0, [pc, #100]	; (8015768 <__s2b+0x90>)
 8015702:	21ce      	movs	r1, #206	; 0xce
 8015704:	f7fe fcfa 	bl	80140fc <__assert_func>
 8015708:	0052      	lsls	r2, r2, #1
 801570a:	3101      	adds	r1, #1
 801570c:	e7f0      	b.n	80156f0 <__s2b+0x18>
 801570e:	9b08      	ldr	r3, [sp, #32]
 8015710:	6143      	str	r3, [r0, #20]
 8015712:	2d09      	cmp	r5, #9
 8015714:	f04f 0301 	mov.w	r3, #1
 8015718:	6103      	str	r3, [r0, #16]
 801571a:	dd16      	ble.n	801574a <__s2b+0x72>
 801571c:	f104 0909 	add.w	r9, r4, #9
 8015720:	46c8      	mov	r8, r9
 8015722:	442c      	add	r4, r5
 8015724:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015728:	4601      	mov	r1, r0
 801572a:	3b30      	subs	r3, #48	; 0x30
 801572c:	220a      	movs	r2, #10
 801572e:	4630      	mov	r0, r6
 8015730:	f7ff ff8c 	bl	801564c <__multadd>
 8015734:	45a0      	cmp	r8, r4
 8015736:	d1f5      	bne.n	8015724 <__s2b+0x4c>
 8015738:	f1a5 0408 	sub.w	r4, r5, #8
 801573c:	444c      	add	r4, r9
 801573e:	1b2d      	subs	r5, r5, r4
 8015740:	1963      	adds	r3, r4, r5
 8015742:	42bb      	cmp	r3, r7
 8015744:	db04      	blt.n	8015750 <__s2b+0x78>
 8015746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801574a:	340a      	adds	r4, #10
 801574c:	2509      	movs	r5, #9
 801574e:	e7f6      	b.n	801573e <__s2b+0x66>
 8015750:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015754:	4601      	mov	r1, r0
 8015756:	3b30      	subs	r3, #48	; 0x30
 8015758:	220a      	movs	r2, #10
 801575a:	4630      	mov	r0, r6
 801575c:	f7ff ff76 	bl	801564c <__multadd>
 8015760:	e7ee      	b.n	8015740 <__s2b+0x68>
 8015762:	bf00      	nop
 8015764:	0802ae39 	.word	0x0802ae39
 8015768:	0802aec4 	.word	0x0802aec4

0801576c <__hi0bits>:
 801576c:	0c03      	lsrs	r3, r0, #16
 801576e:	041b      	lsls	r3, r3, #16
 8015770:	b9d3      	cbnz	r3, 80157a8 <__hi0bits+0x3c>
 8015772:	0400      	lsls	r0, r0, #16
 8015774:	2310      	movs	r3, #16
 8015776:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801577a:	bf04      	itt	eq
 801577c:	0200      	lsleq	r0, r0, #8
 801577e:	3308      	addeq	r3, #8
 8015780:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015784:	bf04      	itt	eq
 8015786:	0100      	lsleq	r0, r0, #4
 8015788:	3304      	addeq	r3, #4
 801578a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801578e:	bf04      	itt	eq
 8015790:	0080      	lsleq	r0, r0, #2
 8015792:	3302      	addeq	r3, #2
 8015794:	2800      	cmp	r0, #0
 8015796:	db05      	blt.n	80157a4 <__hi0bits+0x38>
 8015798:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801579c:	f103 0301 	add.w	r3, r3, #1
 80157a0:	bf08      	it	eq
 80157a2:	2320      	moveq	r3, #32
 80157a4:	4618      	mov	r0, r3
 80157a6:	4770      	bx	lr
 80157a8:	2300      	movs	r3, #0
 80157aa:	e7e4      	b.n	8015776 <__hi0bits+0xa>

080157ac <__lo0bits>:
 80157ac:	6803      	ldr	r3, [r0, #0]
 80157ae:	f013 0207 	ands.w	r2, r3, #7
 80157b2:	4601      	mov	r1, r0
 80157b4:	d00b      	beq.n	80157ce <__lo0bits+0x22>
 80157b6:	07da      	lsls	r2, r3, #31
 80157b8:	d423      	bmi.n	8015802 <__lo0bits+0x56>
 80157ba:	0798      	lsls	r0, r3, #30
 80157bc:	bf49      	itett	mi
 80157be:	085b      	lsrmi	r3, r3, #1
 80157c0:	089b      	lsrpl	r3, r3, #2
 80157c2:	2001      	movmi	r0, #1
 80157c4:	600b      	strmi	r3, [r1, #0]
 80157c6:	bf5c      	itt	pl
 80157c8:	600b      	strpl	r3, [r1, #0]
 80157ca:	2002      	movpl	r0, #2
 80157cc:	4770      	bx	lr
 80157ce:	b298      	uxth	r0, r3
 80157d0:	b9a8      	cbnz	r0, 80157fe <__lo0bits+0x52>
 80157d2:	0c1b      	lsrs	r3, r3, #16
 80157d4:	2010      	movs	r0, #16
 80157d6:	b2da      	uxtb	r2, r3
 80157d8:	b90a      	cbnz	r2, 80157de <__lo0bits+0x32>
 80157da:	3008      	adds	r0, #8
 80157dc:	0a1b      	lsrs	r3, r3, #8
 80157de:	071a      	lsls	r2, r3, #28
 80157e0:	bf04      	itt	eq
 80157e2:	091b      	lsreq	r3, r3, #4
 80157e4:	3004      	addeq	r0, #4
 80157e6:	079a      	lsls	r2, r3, #30
 80157e8:	bf04      	itt	eq
 80157ea:	089b      	lsreq	r3, r3, #2
 80157ec:	3002      	addeq	r0, #2
 80157ee:	07da      	lsls	r2, r3, #31
 80157f0:	d403      	bmi.n	80157fa <__lo0bits+0x4e>
 80157f2:	085b      	lsrs	r3, r3, #1
 80157f4:	f100 0001 	add.w	r0, r0, #1
 80157f8:	d005      	beq.n	8015806 <__lo0bits+0x5a>
 80157fa:	600b      	str	r3, [r1, #0]
 80157fc:	4770      	bx	lr
 80157fe:	4610      	mov	r0, r2
 8015800:	e7e9      	b.n	80157d6 <__lo0bits+0x2a>
 8015802:	2000      	movs	r0, #0
 8015804:	4770      	bx	lr
 8015806:	2020      	movs	r0, #32
 8015808:	4770      	bx	lr
	...

0801580c <__i2b>:
 801580c:	b510      	push	{r4, lr}
 801580e:	460c      	mov	r4, r1
 8015810:	2101      	movs	r1, #1
 8015812:	f7ff feb9 	bl	8015588 <_Balloc>
 8015816:	4602      	mov	r2, r0
 8015818:	b928      	cbnz	r0, 8015826 <__i2b+0x1a>
 801581a:	4b05      	ldr	r3, [pc, #20]	; (8015830 <__i2b+0x24>)
 801581c:	4805      	ldr	r0, [pc, #20]	; (8015834 <__i2b+0x28>)
 801581e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015822:	f7fe fc6b 	bl	80140fc <__assert_func>
 8015826:	2301      	movs	r3, #1
 8015828:	6144      	str	r4, [r0, #20]
 801582a:	6103      	str	r3, [r0, #16]
 801582c:	bd10      	pop	{r4, pc}
 801582e:	bf00      	nop
 8015830:	0802ae39 	.word	0x0802ae39
 8015834:	0802aec4 	.word	0x0802aec4

08015838 <__multiply>:
 8015838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801583c:	4691      	mov	r9, r2
 801583e:	690a      	ldr	r2, [r1, #16]
 8015840:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015844:	429a      	cmp	r2, r3
 8015846:	bfb8      	it	lt
 8015848:	460b      	movlt	r3, r1
 801584a:	460c      	mov	r4, r1
 801584c:	bfbc      	itt	lt
 801584e:	464c      	movlt	r4, r9
 8015850:	4699      	movlt	r9, r3
 8015852:	6927      	ldr	r7, [r4, #16]
 8015854:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015858:	68a3      	ldr	r3, [r4, #8]
 801585a:	6861      	ldr	r1, [r4, #4]
 801585c:	eb07 060a 	add.w	r6, r7, sl
 8015860:	42b3      	cmp	r3, r6
 8015862:	b085      	sub	sp, #20
 8015864:	bfb8      	it	lt
 8015866:	3101      	addlt	r1, #1
 8015868:	f7ff fe8e 	bl	8015588 <_Balloc>
 801586c:	b930      	cbnz	r0, 801587c <__multiply+0x44>
 801586e:	4602      	mov	r2, r0
 8015870:	4b44      	ldr	r3, [pc, #272]	; (8015984 <__multiply+0x14c>)
 8015872:	4845      	ldr	r0, [pc, #276]	; (8015988 <__multiply+0x150>)
 8015874:	f240 115d 	movw	r1, #349	; 0x15d
 8015878:	f7fe fc40 	bl	80140fc <__assert_func>
 801587c:	f100 0514 	add.w	r5, r0, #20
 8015880:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015884:	462b      	mov	r3, r5
 8015886:	2200      	movs	r2, #0
 8015888:	4543      	cmp	r3, r8
 801588a:	d321      	bcc.n	80158d0 <__multiply+0x98>
 801588c:	f104 0314 	add.w	r3, r4, #20
 8015890:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015894:	f109 0314 	add.w	r3, r9, #20
 8015898:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801589c:	9202      	str	r2, [sp, #8]
 801589e:	1b3a      	subs	r2, r7, r4
 80158a0:	3a15      	subs	r2, #21
 80158a2:	f022 0203 	bic.w	r2, r2, #3
 80158a6:	3204      	adds	r2, #4
 80158a8:	f104 0115 	add.w	r1, r4, #21
 80158ac:	428f      	cmp	r7, r1
 80158ae:	bf38      	it	cc
 80158b0:	2204      	movcc	r2, #4
 80158b2:	9201      	str	r2, [sp, #4]
 80158b4:	9a02      	ldr	r2, [sp, #8]
 80158b6:	9303      	str	r3, [sp, #12]
 80158b8:	429a      	cmp	r2, r3
 80158ba:	d80c      	bhi.n	80158d6 <__multiply+0x9e>
 80158bc:	2e00      	cmp	r6, #0
 80158be:	dd03      	ble.n	80158c8 <__multiply+0x90>
 80158c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d05a      	beq.n	801597e <__multiply+0x146>
 80158c8:	6106      	str	r6, [r0, #16]
 80158ca:	b005      	add	sp, #20
 80158cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158d0:	f843 2b04 	str.w	r2, [r3], #4
 80158d4:	e7d8      	b.n	8015888 <__multiply+0x50>
 80158d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80158da:	f1ba 0f00 	cmp.w	sl, #0
 80158de:	d024      	beq.n	801592a <__multiply+0xf2>
 80158e0:	f104 0e14 	add.w	lr, r4, #20
 80158e4:	46a9      	mov	r9, r5
 80158e6:	f04f 0c00 	mov.w	ip, #0
 80158ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80158ee:	f8d9 1000 	ldr.w	r1, [r9]
 80158f2:	fa1f fb82 	uxth.w	fp, r2
 80158f6:	b289      	uxth	r1, r1
 80158f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80158fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015900:	f8d9 2000 	ldr.w	r2, [r9]
 8015904:	4461      	add	r1, ip
 8015906:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801590a:	fb0a c20b 	mla	r2, sl, fp, ip
 801590e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015912:	b289      	uxth	r1, r1
 8015914:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015918:	4577      	cmp	r7, lr
 801591a:	f849 1b04 	str.w	r1, [r9], #4
 801591e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015922:	d8e2      	bhi.n	80158ea <__multiply+0xb2>
 8015924:	9a01      	ldr	r2, [sp, #4]
 8015926:	f845 c002 	str.w	ip, [r5, r2]
 801592a:	9a03      	ldr	r2, [sp, #12]
 801592c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015930:	3304      	adds	r3, #4
 8015932:	f1b9 0f00 	cmp.w	r9, #0
 8015936:	d020      	beq.n	801597a <__multiply+0x142>
 8015938:	6829      	ldr	r1, [r5, #0]
 801593a:	f104 0c14 	add.w	ip, r4, #20
 801593e:	46ae      	mov	lr, r5
 8015940:	f04f 0a00 	mov.w	sl, #0
 8015944:	f8bc b000 	ldrh.w	fp, [ip]
 8015948:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801594c:	fb09 220b 	mla	r2, r9, fp, r2
 8015950:	4492      	add	sl, r2
 8015952:	b289      	uxth	r1, r1
 8015954:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015958:	f84e 1b04 	str.w	r1, [lr], #4
 801595c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015960:	f8be 1000 	ldrh.w	r1, [lr]
 8015964:	0c12      	lsrs	r2, r2, #16
 8015966:	fb09 1102 	mla	r1, r9, r2, r1
 801596a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801596e:	4567      	cmp	r7, ip
 8015970:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015974:	d8e6      	bhi.n	8015944 <__multiply+0x10c>
 8015976:	9a01      	ldr	r2, [sp, #4]
 8015978:	50a9      	str	r1, [r5, r2]
 801597a:	3504      	adds	r5, #4
 801597c:	e79a      	b.n	80158b4 <__multiply+0x7c>
 801597e:	3e01      	subs	r6, #1
 8015980:	e79c      	b.n	80158bc <__multiply+0x84>
 8015982:	bf00      	nop
 8015984:	0802ae39 	.word	0x0802ae39
 8015988:	0802aec4 	.word	0x0802aec4

0801598c <__pow5mult>:
 801598c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015990:	4615      	mov	r5, r2
 8015992:	f012 0203 	ands.w	r2, r2, #3
 8015996:	4606      	mov	r6, r0
 8015998:	460f      	mov	r7, r1
 801599a:	d007      	beq.n	80159ac <__pow5mult+0x20>
 801599c:	4c25      	ldr	r4, [pc, #148]	; (8015a34 <__pow5mult+0xa8>)
 801599e:	3a01      	subs	r2, #1
 80159a0:	2300      	movs	r3, #0
 80159a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80159a6:	f7ff fe51 	bl	801564c <__multadd>
 80159aa:	4607      	mov	r7, r0
 80159ac:	10ad      	asrs	r5, r5, #2
 80159ae:	d03d      	beq.n	8015a2c <__pow5mult+0xa0>
 80159b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80159b2:	b97c      	cbnz	r4, 80159d4 <__pow5mult+0x48>
 80159b4:	2010      	movs	r0, #16
 80159b6:	f7ff fdbf 	bl	8015538 <malloc>
 80159ba:	4602      	mov	r2, r0
 80159bc:	6270      	str	r0, [r6, #36]	; 0x24
 80159be:	b928      	cbnz	r0, 80159cc <__pow5mult+0x40>
 80159c0:	4b1d      	ldr	r3, [pc, #116]	; (8015a38 <__pow5mult+0xac>)
 80159c2:	481e      	ldr	r0, [pc, #120]	; (8015a3c <__pow5mult+0xb0>)
 80159c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80159c8:	f7fe fb98 	bl	80140fc <__assert_func>
 80159cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80159d0:	6004      	str	r4, [r0, #0]
 80159d2:	60c4      	str	r4, [r0, #12]
 80159d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80159d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80159dc:	b94c      	cbnz	r4, 80159f2 <__pow5mult+0x66>
 80159de:	f240 2171 	movw	r1, #625	; 0x271
 80159e2:	4630      	mov	r0, r6
 80159e4:	f7ff ff12 	bl	801580c <__i2b>
 80159e8:	2300      	movs	r3, #0
 80159ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80159ee:	4604      	mov	r4, r0
 80159f0:	6003      	str	r3, [r0, #0]
 80159f2:	f04f 0900 	mov.w	r9, #0
 80159f6:	07eb      	lsls	r3, r5, #31
 80159f8:	d50a      	bpl.n	8015a10 <__pow5mult+0x84>
 80159fa:	4639      	mov	r1, r7
 80159fc:	4622      	mov	r2, r4
 80159fe:	4630      	mov	r0, r6
 8015a00:	f7ff ff1a 	bl	8015838 <__multiply>
 8015a04:	4639      	mov	r1, r7
 8015a06:	4680      	mov	r8, r0
 8015a08:	4630      	mov	r0, r6
 8015a0a:	f7ff fdfd 	bl	8015608 <_Bfree>
 8015a0e:	4647      	mov	r7, r8
 8015a10:	106d      	asrs	r5, r5, #1
 8015a12:	d00b      	beq.n	8015a2c <__pow5mult+0xa0>
 8015a14:	6820      	ldr	r0, [r4, #0]
 8015a16:	b938      	cbnz	r0, 8015a28 <__pow5mult+0x9c>
 8015a18:	4622      	mov	r2, r4
 8015a1a:	4621      	mov	r1, r4
 8015a1c:	4630      	mov	r0, r6
 8015a1e:	f7ff ff0b 	bl	8015838 <__multiply>
 8015a22:	6020      	str	r0, [r4, #0]
 8015a24:	f8c0 9000 	str.w	r9, [r0]
 8015a28:	4604      	mov	r4, r0
 8015a2a:	e7e4      	b.n	80159f6 <__pow5mult+0x6a>
 8015a2c:	4638      	mov	r0, r7
 8015a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a32:	bf00      	nop
 8015a34:	0802b010 	.word	0x0802b010
 8015a38:	0802ac20 	.word	0x0802ac20
 8015a3c:	0802aec4 	.word	0x0802aec4

08015a40 <__lshift>:
 8015a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a44:	460c      	mov	r4, r1
 8015a46:	6849      	ldr	r1, [r1, #4]
 8015a48:	6923      	ldr	r3, [r4, #16]
 8015a4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015a4e:	68a3      	ldr	r3, [r4, #8]
 8015a50:	4607      	mov	r7, r0
 8015a52:	4691      	mov	r9, r2
 8015a54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015a58:	f108 0601 	add.w	r6, r8, #1
 8015a5c:	42b3      	cmp	r3, r6
 8015a5e:	db0b      	blt.n	8015a78 <__lshift+0x38>
 8015a60:	4638      	mov	r0, r7
 8015a62:	f7ff fd91 	bl	8015588 <_Balloc>
 8015a66:	4605      	mov	r5, r0
 8015a68:	b948      	cbnz	r0, 8015a7e <__lshift+0x3e>
 8015a6a:	4602      	mov	r2, r0
 8015a6c:	4b2a      	ldr	r3, [pc, #168]	; (8015b18 <__lshift+0xd8>)
 8015a6e:	482b      	ldr	r0, [pc, #172]	; (8015b1c <__lshift+0xdc>)
 8015a70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015a74:	f7fe fb42 	bl	80140fc <__assert_func>
 8015a78:	3101      	adds	r1, #1
 8015a7a:	005b      	lsls	r3, r3, #1
 8015a7c:	e7ee      	b.n	8015a5c <__lshift+0x1c>
 8015a7e:	2300      	movs	r3, #0
 8015a80:	f100 0114 	add.w	r1, r0, #20
 8015a84:	f100 0210 	add.w	r2, r0, #16
 8015a88:	4618      	mov	r0, r3
 8015a8a:	4553      	cmp	r3, sl
 8015a8c:	db37      	blt.n	8015afe <__lshift+0xbe>
 8015a8e:	6920      	ldr	r0, [r4, #16]
 8015a90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015a94:	f104 0314 	add.w	r3, r4, #20
 8015a98:	f019 091f 	ands.w	r9, r9, #31
 8015a9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015aa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015aa4:	d02f      	beq.n	8015b06 <__lshift+0xc6>
 8015aa6:	f1c9 0e20 	rsb	lr, r9, #32
 8015aaa:	468a      	mov	sl, r1
 8015aac:	f04f 0c00 	mov.w	ip, #0
 8015ab0:	681a      	ldr	r2, [r3, #0]
 8015ab2:	fa02 f209 	lsl.w	r2, r2, r9
 8015ab6:	ea42 020c 	orr.w	r2, r2, ip
 8015aba:	f84a 2b04 	str.w	r2, [sl], #4
 8015abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ac2:	4298      	cmp	r0, r3
 8015ac4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015ac8:	d8f2      	bhi.n	8015ab0 <__lshift+0x70>
 8015aca:	1b03      	subs	r3, r0, r4
 8015acc:	3b15      	subs	r3, #21
 8015ace:	f023 0303 	bic.w	r3, r3, #3
 8015ad2:	3304      	adds	r3, #4
 8015ad4:	f104 0215 	add.w	r2, r4, #21
 8015ad8:	4290      	cmp	r0, r2
 8015ada:	bf38      	it	cc
 8015adc:	2304      	movcc	r3, #4
 8015ade:	f841 c003 	str.w	ip, [r1, r3]
 8015ae2:	f1bc 0f00 	cmp.w	ip, #0
 8015ae6:	d001      	beq.n	8015aec <__lshift+0xac>
 8015ae8:	f108 0602 	add.w	r6, r8, #2
 8015aec:	3e01      	subs	r6, #1
 8015aee:	4638      	mov	r0, r7
 8015af0:	612e      	str	r6, [r5, #16]
 8015af2:	4621      	mov	r1, r4
 8015af4:	f7ff fd88 	bl	8015608 <_Bfree>
 8015af8:	4628      	mov	r0, r5
 8015afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015afe:	f842 0f04 	str.w	r0, [r2, #4]!
 8015b02:	3301      	adds	r3, #1
 8015b04:	e7c1      	b.n	8015a8a <__lshift+0x4a>
 8015b06:	3904      	subs	r1, #4
 8015b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8015b10:	4298      	cmp	r0, r3
 8015b12:	d8f9      	bhi.n	8015b08 <__lshift+0xc8>
 8015b14:	e7ea      	b.n	8015aec <__lshift+0xac>
 8015b16:	bf00      	nop
 8015b18:	0802ae39 	.word	0x0802ae39
 8015b1c:	0802aec4 	.word	0x0802aec4

08015b20 <__mcmp>:
 8015b20:	b530      	push	{r4, r5, lr}
 8015b22:	6902      	ldr	r2, [r0, #16]
 8015b24:	690c      	ldr	r4, [r1, #16]
 8015b26:	1b12      	subs	r2, r2, r4
 8015b28:	d10e      	bne.n	8015b48 <__mcmp+0x28>
 8015b2a:	f100 0314 	add.w	r3, r0, #20
 8015b2e:	3114      	adds	r1, #20
 8015b30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015b34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015b38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015b3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015b40:	42a5      	cmp	r5, r4
 8015b42:	d003      	beq.n	8015b4c <__mcmp+0x2c>
 8015b44:	d305      	bcc.n	8015b52 <__mcmp+0x32>
 8015b46:	2201      	movs	r2, #1
 8015b48:	4610      	mov	r0, r2
 8015b4a:	bd30      	pop	{r4, r5, pc}
 8015b4c:	4283      	cmp	r3, r0
 8015b4e:	d3f3      	bcc.n	8015b38 <__mcmp+0x18>
 8015b50:	e7fa      	b.n	8015b48 <__mcmp+0x28>
 8015b52:	f04f 32ff 	mov.w	r2, #4294967295
 8015b56:	e7f7      	b.n	8015b48 <__mcmp+0x28>

08015b58 <__mdiff>:
 8015b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b5c:	460c      	mov	r4, r1
 8015b5e:	4606      	mov	r6, r0
 8015b60:	4611      	mov	r1, r2
 8015b62:	4620      	mov	r0, r4
 8015b64:	4690      	mov	r8, r2
 8015b66:	f7ff ffdb 	bl	8015b20 <__mcmp>
 8015b6a:	1e05      	subs	r5, r0, #0
 8015b6c:	d110      	bne.n	8015b90 <__mdiff+0x38>
 8015b6e:	4629      	mov	r1, r5
 8015b70:	4630      	mov	r0, r6
 8015b72:	f7ff fd09 	bl	8015588 <_Balloc>
 8015b76:	b930      	cbnz	r0, 8015b86 <__mdiff+0x2e>
 8015b78:	4b3a      	ldr	r3, [pc, #232]	; (8015c64 <__mdiff+0x10c>)
 8015b7a:	4602      	mov	r2, r0
 8015b7c:	f240 2132 	movw	r1, #562	; 0x232
 8015b80:	4839      	ldr	r0, [pc, #228]	; (8015c68 <__mdiff+0x110>)
 8015b82:	f7fe fabb 	bl	80140fc <__assert_func>
 8015b86:	2301      	movs	r3, #1
 8015b88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015b8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b90:	bfa4      	itt	ge
 8015b92:	4643      	movge	r3, r8
 8015b94:	46a0      	movge	r8, r4
 8015b96:	4630      	mov	r0, r6
 8015b98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015b9c:	bfa6      	itte	ge
 8015b9e:	461c      	movge	r4, r3
 8015ba0:	2500      	movge	r5, #0
 8015ba2:	2501      	movlt	r5, #1
 8015ba4:	f7ff fcf0 	bl	8015588 <_Balloc>
 8015ba8:	b920      	cbnz	r0, 8015bb4 <__mdiff+0x5c>
 8015baa:	4b2e      	ldr	r3, [pc, #184]	; (8015c64 <__mdiff+0x10c>)
 8015bac:	4602      	mov	r2, r0
 8015bae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015bb2:	e7e5      	b.n	8015b80 <__mdiff+0x28>
 8015bb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015bb8:	6926      	ldr	r6, [r4, #16]
 8015bba:	60c5      	str	r5, [r0, #12]
 8015bbc:	f104 0914 	add.w	r9, r4, #20
 8015bc0:	f108 0514 	add.w	r5, r8, #20
 8015bc4:	f100 0e14 	add.w	lr, r0, #20
 8015bc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015bcc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015bd0:	f108 0210 	add.w	r2, r8, #16
 8015bd4:	46f2      	mov	sl, lr
 8015bd6:	2100      	movs	r1, #0
 8015bd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8015bdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015be0:	fa1f f883 	uxth.w	r8, r3
 8015be4:	fa11 f18b 	uxtah	r1, r1, fp
 8015be8:	0c1b      	lsrs	r3, r3, #16
 8015bea:	eba1 0808 	sub.w	r8, r1, r8
 8015bee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015bf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015bf6:	fa1f f888 	uxth.w	r8, r8
 8015bfa:	1419      	asrs	r1, r3, #16
 8015bfc:	454e      	cmp	r6, r9
 8015bfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015c02:	f84a 3b04 	str.w	r3, [sl], #4
 8015c06:	d8e7      	bhi.n	8015bd8 <__mdiff+0x80>
 8015c08:	1b33      	subs	r3, r6, r4
 8015c0a:	3b15      	subs	r3, #21
 8015c0c:	f023 0303 	bic.w	r3, r3, #3
 8015c10:	3304      	adds	r3, #4
 8015c12:	3415      	adds	r4, #21
 8015c14:	42a6      	cmp	r6, r4
 8015c16:	bf38      	it	cc
 8015c18:	2304      	movcc	r3, #4
 8015c1a:	441d      	add	r5, r3
 8015c1c:	4473      	add	r3, lr
 8015c1e:	469e      	mov	lr, r3
 8015c20:	462e      	mov	r6, r5
 8015c22:	4566      	cmp	r6, ip
 8015c24:	d30e      	bcc.n	8015c44 <__mdiff+0xec>
 8015c26:	f10c 0203 	add.w	r2, ip, #3
 8015c2a:	1b52      	subs	r2, r2, r5
 8015c2c:	f022 0203 	bic.w	r2, r2, #3
 8015c30:	3d03      	subs	r5, #3
 8015c32:	45ac      	cmp	ip, r5
 8015c34:	bf38      	it	cc
 8015c36:	2200      	movcc	r2, #0
 8015c38:	441a      	add	r2, r3
 8015c3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015c3e:	b17b      	cbz	r3, 8015c60 <__mdiff+0x108>
 8015c40:	6107      	str	r7, [r0, #16]
 8015c42:	e7a3      	b.n	8015b8c <__mdiff+0x34>
 8015c44:	f856 8b04 	ldr.w	r8, [r6], #4
 8015c48:	fa11 f288 	uxtah	r2, r1, r8
 8015c4c:	1414      	asrs	r4, r2, #16
 8015c4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015c52:	b292      	uxth	r2, r2
 8015c54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015c58:	f84e 2b04 	str.w	r2, [lr], #4
 8015c5c:	1421      	asrs	r1, r4, #16
 8015c5e:	e7e0      	b.n	8015c22 <__mdiff+0xca>
 8015c60:	3f01      	subs	r7, #1
 8015c62:	e7ea      	b.n	8015c3a <__mdiff+0xe2>
 8015c64:	0802ae39 	.word	0x0802ae39
 8015c68:	0802aec4 	.word	0x0802aec4

08015c6c <__ulp>:
 8015c6c:	b082      	sub	sp, #8
 8015c6e:	ed8d 0b00 	vstr	d0, [sp]
 8015c72:	9b01      	ldr	r3, [sp, #4]
 8015c74:	4912      	ldr	r1, [pc, #72]	; (8015cc0 <__ulp+0x54>)
 8015c76:	4019      	ands	r1, r3
 8015c78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015c7c:	2900      	cmp	r1, #0
 8015c7e:	dd05      	ble.n	8015c8c <__ulp+0x20>
 8015c80:	2200      	movs	r2, #0
 8015c82:	460b      	mov	r3, r1
 8015c84:	ec43 2b10 	vmov	d0, r2, r3
 8015c88:	b002      	add	sp, #8
 8015c8a:	4770      	bx	lr
 8015c8c:	4249      	negs	r1, r1
 8015c8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015c92:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015c96:	f04f 0200 	mov.w	r2, #0
 8015c9a:	f04f 0300 	mov.w	r3, #0
 8015c9e:	da04      	bge.n	8015caa <__ulp+0x3e>
 8015ca0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015ca4:	fa41 f300 	asr.w	r3, r1, r0
 8015ca8:	e7ec      	b.n	8015c84 <__ulp+0x18>
 8015caa:	f1a0 0114 	sub.w	r1, r0, #20
 8015cae:	291e      	cmp	r1, #30
 8015cb0:	bfda      	itte	le
 8015cb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015cb6:	fa20 f101 	lsrle.w	r1, r0, r1
 8015cba:	2101      	movgt	r1, #1
 8015cbc:	460a      	mov	r2, r1
 8015cbe:	e7e1      	b.n	8015c84 <__ulp+0x18>
 8015cc0:	7ff00000 	.word	0x7ff00000

08015cc4 <__b2d>:
 8015cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cc6:	6905      	ldr	r5, [r0, #16]
 8015cc8:	f100 0714 	add.w	r7, r0, #20
 8015ccc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015cd0:	1f2e      	subs	r6, r5, #4
 8015cd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015cd6:	4620      	mov	r0, r4
 8015cd8:	f7ff fd48 	bl	801576c <__hi0bits>
 8015cdc:	f1c0 0320 	rsb	r3, r0, #32
 8015ce0:	280a      	cmp	r0, #10
 8015ce2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015d60 <__b2d+0x9c>
 8015ce6:	600b      	str	r3, [r1, #0]
 8015ce8:	dc14      	bgt.n	8015d14 <__b2d+0x50>
 8015cea:	f1c0 0e0b 	rsb	lr, r0, #11
 8015cee:	fa24 f10e 	lsr.w	r1, r4, lr
 8015cf2:	42b7      	cmp	r7, r6
 8015cf4:	ea41 030c 	orr.w	r3, r1, ip
 8015cf8:	bf34      	ite	cc
 8015cfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015cfe:	2100      	movcs	r1, #0
 8015d00:	3015      	adds	r0, #21
 8015d02:	fa04 f000 	lsl.w	r0, r4, r0
 8015d06:	fa21 f10e 	lsr.w	r1, r1, lr
 8015d0a:	ea40 0201 	orr.w	r2, r0, r1
 8015d0e:	ec43 2b10 	vmov	d0, r2, r3
 8015d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d14:	42b7      	cmp	r7, r6
 8015d16:	bf3a      	itte	cc
 8015d18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015d1c:	f1a5 0608 	subcc.w	r6, r5, #8
 8015d20:	2100      	movcs	r1, #0
 8015d22:	380b      	subs	r0, #11
 8015d24:	d017      	beq.n	8015d56 <__b2d+0x92>
 8015d26:	f1c0 0c20 	rsb	ip, r0, #32
 8015d2a:	fa04 f500 	lsl.w	r5, r4, r0
 8015d2e:	42be      	cmp	r6, r7
 8015d30:	fa21 f40c 	lsr.w	r4, r1, ip
 8015d34:	ea45 0504 	orr.w	r5, r5, r4
 8015d38:	bf8c      	ite	hi
 8015d3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015d3e:	2400      	movls	r4, #0
 8015d40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015d44:	fa01 f000 	lsl.w	r0, r1, r0
 8015d48:	fa24 f40c 	lsr.w	r4, r4, ip
 8015d4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015d50:	ea40 0204 	orr.w	r2, r0, r4
 8015d54:	e7db      	b.n	8015d0e <__b2d+0x4a>
 8015d56:	ea44 030c 	orr.w	r3, r4, ip
 8015d5a:	460a      	mov	r2, r1
 8015d5c:	e7d7      	b.n	8015d0e <__b2d+0x4a>
 8015d5e:	bf00      	nop
 8015d60:	3ff00000 	.word	0x3ff00000

08015d64 <__d2b>:
 8015d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015d68:	4689      	mov	r9, r1
 8015d6a:	2101      	movs	r1, #1
 8015d6c:	ec57 6b10 	vmov	r6, r7, d0
 8015d70:	4690      	mov	r8, r2
 8015d72:	f7ff fc09 	bl	8015588 <_Balloc>
 8015d76:	4604      	mov	r4, r0
 8015d78:	b930      	cbnz	r0, 8015d88 <__d2b+0x24>
 8015d7a:	4602      	mov	r2, r0
 8015d7c:	4b25      	ldr	r3, [pc, #148]	; (8015e14 <__d2b+0xb0>)
 8015d7e:	4826      	ldr	r0, [pc, #152]	; (8015e18 <__d2b+0xb4>)
 8015d80:	f240 310a 	movw	r1, #778	; 0x30a
 8015d84:	f7fe f9ba 	bl	80140fc <__assert_func>
 8015d88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015d8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015d90:	bb35      	cbnz	r5, 8015de0 <__d2b+0x7c>
 8015d92:	2e00      	cmp	r6, #0
 8015d94:	9301      	str	r3, [sp, #4]
 8015d96:	d028      	beq.n	8015dea <__d2b+0x86>
 8015d98:	4668      	mov	r0, sp
 8015d9a:	9600      	str	r6, [sp, #0]
 8015d9c:	f7ff fd06 	bl	80157ac <__lo0bits>
 8015da0:	9900      	ldr	r1, [sp, #0]
 8015da2:	b300      	cbz	r0, 8015de6 <__d2b+0x82>
 8015da4:	9a01      	ldr	r2, [sp, #4]
 8015da6:	f1c0 0320 	rsb	r3, r0, #32
 8015daa:	fa02 f303 	lsl.w	r3, r2, r3
 8015dae:	430b      	orrs	r3, r1
 8015db0:	40c2      	lsrs	r2, r0
 8015db2:	6163      	str	r3, [r4, #20]
 8015db4:	9201      	str	r2, [sp, #4]
 8015db6:	9b01      	ldr	r3, [sp, #4]
 8015db8:	61a3      	str	r3, [r4, #24]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	bf14      	ite	ne
 8015dbe:	2202      	movne	r2, #2
 8015dc0:	2201      	moveq	r2, #1
 8015dc2:	6122      	str	r2, [r4, #16]
 8015dc4:	b1d5      	cbz	r5, 8015dfc <__d2b+0x98>
 8015dc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015dca:	4405      	add	r5, r0
 8015dcc:	f8c9 5000 	str.w	r5, [r9]
 8015dd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015dd4:	f8c8 0000 	str.w	r0, [r8]
 8015dd8:	4620      	mov	r0, r4
 8015dda:	b003      	add	sp, #12
 8015ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015de0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015de4:	e7d5      	b.n	8015d92 <__d2b+0x2e>
 8015de6:	6161      	str	r1, [r4, #20]
 8015de8:	e7e5      	b.n	8015db6 <__d2b+0x52>
 8015dea:	a801      	add	r0, sp, #4
 8015dec:	f7ff fcde 	bl	80157ac <__lo0bits>
 8015df0:	9b01      	ldr	r3, [sp, #4]
 8015df2:	6163      	str	r3, [r4, #20]
 8015df4:	2201      	movs	r2, #1
 8015df6:	6122      	str	r2, [r4, #16]
 8015df8:	3020      	adds	r0, #32
 8015dfa:	e7e3      	b.n	8015dc4 <__d2b+0x60>
 8015dfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015e00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015e04:	f8c9 0000 	str.w	r0, [r9]
 8015e08:	6918      	ldr	r0, [r3, #16]
 8015e0a:	f7ff fcaf 	bl	801576c <__hi0bits>
 8015e0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015e12:	e7df      	b.n	8015dd4 <__d2b+0x70>
 8015e14:	0802ae39 	.word	0x0802ae39
 8015e18:	0802aec4 	.word	0x0802aec4

08015e1c <__ratio>:
 8015e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e20:	4688      	mov	r8, r1
 8015e22:	4669      	mov	r1, sp
 8015e24:	4681      	mov	r9, r0
 8015e26:	f7ff ff4d 	bl	8015cc4 <__b2d>
 8015e2a:	a901      	add	r1, sp, #4
 8015e2c:	4640      	mov	r0, r8
 8015e2e:	ec55 4b10 	vmov	r4, r5, d0
 8015e32:	f7ff ff47 	bl	8015cc4 <__b2d>
 8015e36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015e3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015e3e:	eba3 0c02 	sub.w	ip, r3, r2
 8015e42:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015e46:	1a9b      	subs	r3, r3, r2
 8015e48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015e4c:	ec51 0b10 	vmov	r0, r1, d0
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	bfd6      	itet	le
 8015e54:	460a      	movle	r2, r1
 8015e56:	462a      	movgt	r2, r5
 8015e58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015e5c:	468b      	mov	fp, r1
 8015e5e:	462f      	mov	r7, r5
 8015e60:	bfd4      	ite	le
 8015e62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015e66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015e6a:	4620      	mov	r0, r4
 8015e6c:	ee10 2a10 	vmov	r2, s0
 8015e70:	465b      	mov	r3, fp
 8015e72:	4639      	mov	r1, r7
 8015e74:	f7ea fd02 	bl	800087c <__aeabi_ddiv>
 8015e78:	ec41 0b10 	vmov	d0, r0, r1
 8015e7c:	b003      	add	sp, #12
 8015e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e82 <__copybits>:
 8015e82:	3901      	subs	r1, #1
 8015e84:	b570      	push	{r4, r5, r6, lr}
 8015e86:	1149      	asrs	r1, r1, #5
 8015e88:	6914      	ldr	r4, [r2, #16]
 8015e8a:	3101      	adds	r1, #1
 8015e8c:	f102 0314 	add.w	r3, r2, #20
 8015e90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015e94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015e98:	1f05      	subs	r5, r0, #4
 8015e9a:	42a3      	cmp	r3, r4
 8015e9c:	d30c      	bcc.n	8015eb8 <__copybits+0x36>
 8015e9e:	1aa3      	subs	r3, r4, r2
 8015ea0:	3b11      	subs	r3, #17
 8015ea2:	f023 0303 	bic.w	r3, r3, #3
 8015ea6:	3211      	adds	r2, #17
 8015ea8:	42a2      	cmp	r2, r4
 8015eaa:	bf88      	it	hi
 8015eac:	2300      	movhi	r3, #0
 8015eae:	4418      	add	r0, r3
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	4288      	cmp	r0, r1
 8015eb4:	d305      	bcc.n	8015ec2 <__copybits+0x40>
 8015eb6:	bd70      	pop	{r4, r5, r6, pc}
 8015eb8:	f853 6b04 	ldr.w	r6, [r3], #4
 8015ebc:	f845 6f04 	str.w	r6, [r5, #4]!
 8015ec0:	e7eb      	b.n	8015e9a <__copybits+0x18>
 8015ec2:	f840 3b04 	str.w	r3, [r0], #4
 8015ec6:	e7f4      	b.n	8015eb2 <__copybits+0x30>

08015ec8 <__any_on>:
 8015ec8:	f100 0214 	add.w	r2, r0, #20
 8015ecc:	6900      	ldr	r0, [r0, #16]
 8015ece:	114b      	asrs	r3, r1, #5
 8015ed0:	4298      	cmp	r0, r3
 8015ed2:	b510      	push	{r4, lr}
 8015ed4:	db11      	blt.n	8015efa <__any_on+0x32>
 8015ed6:	dd0a      	ble.n	8015eee <__any_on+0x26>
 8015ed8:	f011 011f 	ands.w	r1, r1, #31
 8015edc:	d007      	beq.n	8015eee <__any_on+0x26>
 8015ede:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015ee2:	fa24 f001 	lsr.w	r0, r4, r1
 8015ee6:	fa00 f101 	lsl.w	r1, r0, r1
 8015eea:	428c      	cmp	r4, r1
 8015eec:	d10b      	bne.n	8015f06 <__any_on+0x3e>
 8015eee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015ef2:	4293      	cmp	r3, r2
 8015ef4:	d803      	bhi.n	8015efe <__any_on+0x36>
 8015ef6:	2000      	movs	r0, #0
 8015ef8:	bd10      	pop	{r4, pc}
 8015efa:	4603      	mov	r3, r0
 8015efc:	e7f7      	b.n	8015eee <__any_on+0x26>
 8015efe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015f02:	2900      	cmp	r1, #0
 8015f04:	d0f5      	beq.n	8015ef2 <__any_on+0x2a>
 8015f06:	2001      	movs	r0, #1
 8015f08:	e7f6      	b.n	8015ef8 <__any_on+0x30>

08015f0a <_calloc_r>:
 8015f0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f0c:	fba1 2402 	umull	r2, r4, r1, r2
 8015f10:	b94c      	cbnz	r4, 8015f26 <_calloc_r+0x1c>
 8015f12:	4611      	mov	r1, r2
 8015f14:	9201      	str	r2, [sp, #4]
 8015f16:	f000 f87b 	bl	8016010 <_malloc_r>
 8015f1a:	9a01      	ldr	r2, [sp, #4]
 8015f1c:	4605      	mov	r5, r0
 8015f1e:	b930      	cbnz	r0, 8015f2e <_calloc_r+0x24>
 8015f20:	4628      	mov	r0, r5
 8015f22:	b003      	add	sp, #12
 8015f24:	bd30      	pop	{r4, r5, pc}
 8015f26:	220c      	movs	r2, #12
 8015f28:	6002      	str	r2, [r0, #0]
 8015f2a:	2500      	movs	r5, #0
 8015f2c:	e7f8      	b.n	8015f20 <_calloc_r+0x16>
 8015f2e:	4621      	mov	r1, r4
 8015f30:	f7fc fb1e 	bl	8012570 <memset>
 8015f34:	e7f4      	b.n	8015f20 <_calloc_r+0x16>
	...

08015f38 <_free_r>:
 8015f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f3a:	2900      	cmp	r1, #0
 8015f3c:	d044      	beq.n	8015fc8 <_free_r+0x90>
 8015f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f42:	9001      	str	r0, [sp, #4]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	f1a1 0404 	sub.w	r4, r1, #4
 8015f4a:	bfb8      	it	lt
 8015f4c:	18e4      	addlt	r4, r4, r3
 8015f4e:	f000 fec7 	bl	8016ce0 <__malloc_lock>
 8015f52:	4a1e      	ldr	r2, [pc, #120]	; (8015fcc <_free_r+0x94>)
 8015f54:	9801      	ldr	r0, [sp, #4]
 8015f56:	6813      	ldr	r3, [r2, #0]
 8015f58:	b933      	cbnz	r3, 8015f68 <_free_r+0x30>
 8015f5a:	6063      	str	r3, [r4, #4]
 8015f5c:	6014      	str	r4, [r2, #0]
 8015f5e:	b003      	add	sp, #12
 8015f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f64:	f000 bec2 	b.w	8016cec <__malloc_unlock>
 8015f68:	42a3      	cmp	r3, r4
 8015f6a:	d908      	bls.n	8015f7e <_free_r+0x46>
 8015f6c:	6825      	ldr	r5, [r4, #0]
 8015f6e:	1961      	adds	r1, r4, r5
 8015f70:	428b      	cmp	r3, r1
 8015f72:	bf01      	itttt	eq
 8015f74:	6819      	ldreq	r1, [r3, #0]
 8015f76:	685b      	ldreq	r3, [r3, #4]
 8015f78:	1949      	addeq	r1, r1, r5
 8015f7a:	6021      	streq	r1, [r4, #0]
 8015f7c:	e7ed      	b.n	8015f5a <_free_r+0x22>
 8015f7e:	461a      	mov	r2, r3
 8015f80:	685b      	ldr	r3, [r3, #4]
 8015f82:	b10b      	cbz	r3, 8015f88 <_free_r+0x50>
 8015f84:	42a3      	cmp	r3, r4
 8015f86:	d9fa      	bls.n	8015f7e <_free_r+0x46>
 8015f88:	6811      	ldr	r1, [r2, #0]
 8015f8a:	1855      	adds	r5, r2, r1
 8015f8c:	42a5      	cmp	r5, r4
 8015f8e:	d10b      	bne.n	8015fa8 <_free_r+0x70>
 8015f90:	6824      	ldr	r4, [r4, #0]
 8015f92:	4421      	add	r1, r4
 8015f94:	1854      	adds	r4, r2, r1
 8015f96:	42a3      	cmp	r3, r4
 8015f98:	6011      	str	r1, [r2, #0]
 8015f9a:	d1e0      	bne.n	8015f5e <_free_r+0x26>
 8015f9c:	681c      	ldr	r4, [r3, #0]
 8015f9e:	685b      	ldr	r3, [r3, #4]
 8015fa0:	6053      	str	r3, [r2, #4]
 8015fa2:	4421      	add	r1, r4
 8015fa4:	6011      	str	r1, [r2, #0]
 8015fa6:	e7da      	b.n	8015f5e <_free_r+0x26>
 8015fa8:	d902      	bls.n	8015fb0 <_free_r+0x78>
 8015faa:	230c      	movs	r3, #12
 8015fac:	6003      	str	r3, [r0, #0]
 8015fae:	e7d6      	b.n	8015f5e <_free_r+0x26>
 8015fb0:	6825      	ldr	r5, [r4, #0]
 8015fb2:	1961      	adds	r1, r4, r5
 8015fb4:	428b      	cmp	r3, r1
 8015fb6:	bf04      	itt	eq
 8015fb8:	6819      	ldreq	r1, [r3, #0]
 8015fba:	685b      	ldreq	r3, [r3, #4]
 8015fbc:	6063      	str	r3, [r4, #4]
 8015fbe:	bf04      	itt	eq
 8015fc0:	1949      	addeq	r1, r1, r5
 8015fc2:	6021      	streq	r1, [r4, #0]
 8015fc4:	6054      	str	r4, [r2, #4]
 8015fc6:	e7ca      	b.n	8015f5e <_free_r+0x26>
 8015fc8:	b003      	add	sp, #12
 8015fca:	bd30      	pop	{r4, r5, pc}
 8015fcc:	20000d7c 	.word	0x20000d7c

08015fd0 <sbrk_aligned>:
 8015fd0:	b570      	push	{r4, r5, r6, lr}
 8015fd2:	4e0e      	ldr	r6, [pc, #56]	; (801600c <sbrk_aligned+0x3c>)
 8015fd4:	460c      	mov	r4, r1
 8015fd6:	6831      	ldr	r1, [r6, #0]
 8015fd8:	4605      	mov	r5, r0
 8015fda:	b911      	cbnz	r1, 8015fe2 <sbrk_aligned+0x12>
 8015fdc:	f000 fb4c 	bl	8016678 <_sbrk_r>
 8015fe0:	6030      	str	r0, [r6, #0]
 8015fe2:	4621      	mov	r1, r4
 8015fe4:	4628      	mov	r0, r5
 8015fe6:	f000 fb47 	bl	8016678 <_sbrk_r>
 8015fea:	1c43      	adds	r3, r0, #1
 8015fec:	d00a      	beq.n	8016004 <sbrk_aligned+0x34>
 8015fee:	1cc4      	adds	r4, r0, #3
 8015ff0:	f024 0403 	bic.w	r4, r4, #3
 8015ff4:	42a0      	cmp	r0, r4
 8015ff6:	d007      	beq.n	8016008 <sbrk_aligned+0x38>
 8015ff8:	1a21      	subs	r1, r4, r0
 8015ffa:	4628      	mov	r0, r5
 8015ffc:	f000 fb3c 	bl	8016678 <_sbrk_r>
 8016000:	3001      	adds	r0, #1
 8016002:	d101      	bne.n	8016008 <sbrk_aligned+0x38>
 8016004:	f04f 34ff 	mov.w	r4, #4294967295
 8016008:	4620      	mov	r0, r4
 801600a:	bd70      	pop	{r4, r5, r6, pc}
 801600c:	20000d80 	.word	0x20000d80

08016010 <_malloc_r>:
 8016010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016014:	1ccd      	adds	r5, r1, #3
 8016016:	f025 0503 	bic.w	r5, r5, #3
 801601a:	3508      	adds	r5, #8
 801601c:	2d0c      	cmp	r5, #12
 801601e:	bf38      	it	cc
 8016020:	250c      	movcc	r5, #12
 8016022:	2d00      	cmp	r5, #0
 8016024:	4607      	mov	r7, r0
 8016026:	db01      	blt.n	801602c <_malloc_r+0x1c>
 8016028:	42a9      	cmp	r1, r5
 801602a:	d905      	bls.n	8016038 <_malloc_r+0x28>
 801602c:	230c      	movs	r3, #12
 801602e:	603b      	str	r3, [r7, #0]
 8016030:	2600      	movs	r6, #0
 8016032:	4630      	mov	r0, r6
 8016034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016038:	4e2e      	ldr	r6, [pc, #184]	; (80160f4 <_malloc_r+0xe4>)
 801603a:	f000 fe51 	bl	8016ce0 <__malloc_lock>
 801603e:	6833      	ldr	r3, [r6, #0]
 8016040:	461c      	mov	r4, r3
 8016042:	bb34      	cbnz	r4, 8016092 <_malloc_r+0x82>
 8016044:	4629      	mov	r1, r5
 8016046:	4638      	mov	r0, r7
 8016048:	f7ff ffc2 	bl	8015fd0 <sbrk_aligned>
 801604c:	1c43      	adds	r3, r0, #1
 801604e:	4604      	mov	r4, r0
 8016050:	d14d      	bne.n	80160ee <_malloc_r+0xde>
 8016052:	6834      	ldr	r4, [r6, #0]
 8016054:	4626      	mov	r6, r4
 8016056:	2e00      	cmp	r6, #0
 8016058:	d140      	bne.n	80160dc <_malloc_r+0xcc>
 801605a:	6823      	ldr	r3, [r4, #0]
 801605c:	4631      	mov	r1, r6
 801605e:	4638      	mov	r0, r7
 8016060:	eb04 0803 	add.w	r8, r4, r3
 8016064:	f000 fb08 	bl	8016678 <_sbrk_r>
 8016068:	4580      	cmp	r8, r0
 801606a:	d13a      	bne.n	80160e2 <_malloc_r+0xd2>
 801606c:	6821      	ldr	r1, [r4, #0]
 801606e:	3503      	adds	r5, #3
 8016070:	1a6d      	subs	r5, r5, r1
 8016072:	f025 0503 	bic.w	r5, r5, #3
 8016076:	3508      	adds	r5, #8
 8016078:	2d0c      	cmp	r5, #12
 801607a:	bf38      	it	cc
 801607c:	250c      	movcc	r5, #12
 801607e:	4629      	mov	r1, r5
 8016080:	4638      	mov	r0, r7
 8016082:	f7ff ffa5 	bl	8015fd0 <sbrk_aligned>
 8016086:	3001      	adds	r0, #1
 8016088:	d02b      	beq.n	80160e2 <_malloc_r+0xd2>
 801608a:	6823      	ldr	r3, [r4, #0]
 801608c:	442b      	add	r3, r5
 801608e:	6023      	str	r3, [r4, #0]
 8016090:	e00e      	b.n	80160b0 <_malloc_r+0xa0>
 8016092:	6822      	ldr	r2, [r4, #0]
 8016094:	1b52      	subs	r2, r2, r5
 8016096:	d41e      	bmi.n	80160d6 <_malloc_r+0xc6>
 8016098:	2a0b      	cmp	r2, #11
 801609a:	d916      	bls.n	80160ca <_malloc_r+0xba>
 801609c:	1961      	adds	r1, r4, r5
 801609e:	42a3      	cmp	r3, r4
 80160a0:	6025      	str	r5, [r4, #0]
 80160a2:	bf18      	it	ne
 80160a4:	6059      	strne	r1, [r3, #4]
 80160a6:	6863      	ldr	r3, [r4, #4]
 80160a8:	bf08      	it	eq
 80160aa:	6031      	streq	r1, [r6, #0]
 80160ac:	5162      	str	r2, [r4, r5]
 80160ae:	604b      	str	r3, [r1, #4]
 80160b0:	4638      	mov	r0, r7
 80160b2:	f104 060b 	add.w	r6, r4, #11
 80160b6:	f000 fe19 	bl	8016cec <__malloc_unlock>
 80160ba:	f026 0607 	bic.w	r6, r6, #7
 80160be:	1d23      	adds	r3, r4, #4
 80160c0:	1af2      	subs	r2, r6, r3
 80160c2:	d0b6      	beq.n	8016032 <_malloc_r+0x22>
 80160c4:	1b9b      	subs	r3, r3, r6
 80160c6:	50a3      	str	r3, [r4, r2]
 80160c8:	e7b3      	b.n	8016032 <_malloc_r+0x22>
 80160ca:	6862      	ldr	r2, [r4, #4]
 80160cc:	42a3      	cmp	r3, r4
 80160ce:	bf0c      	ite	eq
 80160d0:	6032      	streq	r2, [r6, #0]
 80160d2:	605a      	strne	r2, [r3, #4]
 80160d4:	e7ec      	b.n	80160b0 <_malloc_r+0xa0>
 80160d6:	4623      	mov	r3, r4
 80160d8:	6864      	ldr	r4, [r4, #4]
 80160da:	e7b2      	b.n	8016042 <_malloc_r+0x32>
 80160dc:	4634      	mov	r4, r6
 80160de:	6876      	ldr	r6, [r6, #4]
 80160e0:	e7b9      	b.n	8016056 <_malloc_r+0x46>
 80160e2:	230c      	movs	r3, #12
 80160e4:	603b      	str	r3, [r7, #0]
 80160e6:	4638      	mov	r0, r7
 80160e8:	f000 fe00 	bl	8016cec <__malloc_unlock>
 80160ec:	e7a1      	b.n	8016032 <_malloc_r+0x22>
 80160ee:	6025      	str	r5, [r4, #0]
 80160f0:	e7de      	b.n	80160b0 <_malloc_r+0xa0>
 80160f2:	bf00      	nop
 80160f4:	20000d7c 	.word	0x20000d7c

080160f8 <__ssputs_r>:
 80160f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160fc:	688e      	ldr	r6, [r1, #8]
 80160fe:	429e      	cmp	r6, r3
 8016100:	4682      	mov	sl, r0
 8016102:	460c      	mov	r4, r1
 8016104:	4690      	mov	r8, r2
 8016106:	461f      	mov	r7, r3
 8016108:	d838      	bhi.n	801617c <__ssputs_r+0x84>
 801610a:	898a      	ldrh	r2, [r1, #12]
 801610c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016110:	d032      	beq.n	8016178 <__ssputs_r+0x80>
 8016112:	6825      	ldr	r5, [r4, #0]
 8016114:	6909      	ldr	r1, [r1, #16]
 8016116:	eba5 0901 	sub.w	r9, r5, r1
 801611a:	6965      	ldr	r5, [r4, #20]
 801611c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016120:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016124:	3301      	adds	r3, #1
 8016126:	444b      	add	r3, r9
 8016128:	106d      	asrs	r5, r5, #1
 801612a:	429d      	cmp	r5, r3
 801612c:	bf38      	it	cc
 801612e:	461d      	movcc	r5, r3
 8016130:	0553      	lsls	r3, r2, #21
 8016132:	d531      	bpl.n	8016198 <__ssputs_r+0xa0>
 8016134:	4629      	mov	r1, r5
 8016136:	f7ff ff6b 	bl	8016010 <_malloc_r>
 801613a:	4606      	mov	r6, r0
 801613c:	b950      	cbnz	r0, 8016154 <__ssputs_r+0x5c>
 801613e:	230c      	movs	r3, #12
 8016140:	f8ca 3000 	str.w	r3, [sl]
 8016144:	89a3      	ldrh	r3, [r4, #12]
 8016146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801614a:	81a3      	strh	r3, [r4, #12]
 801614c:	f04f 30ff 	mov.w	r0, #4294967295
 8016150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016154:	6921      	ldr	r1, [r4, #16]
 8016156:	464a      	mov	r2, r9
 8016158:	f7ff fa08 	bl	801556c <memcpy>
 801615c:	89a3      	ldrh	r3, [r4, #12]
 801615e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016166:	81a3      	strh	r3, [r4, #12]
 8016168:	6126      	str	r6, [r4, #16]
 801616a:	6165      	str	r5, [r4, #20]
 801616c:	444e      	add	r6, r9
 801616e:	eba5 0509 	sub.w	r5, r5, r9
 8016172:	6026      	str	r6, [r4, #0]
 8016174:	60a5      	str	r5, [r4, #8]
 8016176:	463e      	mov	r6, r7
 8016178:	42be      	cmp	r6, r7
 801617a:	d900      	bls.n	801617e <__ssputs_r+0x86>
 801617c:	463e      	mov	r6, r7
 801617e:	6820      	ldr	r0, [r4, #0]
 8016180:	4632      	mov	r2, r6
 8016182:	4641      	mov	r1, r8
 8016184:	f000 fd92 	bl	8016cac <memmove>
 8016188:	68a3      	ldr	r3, [r4, #8]
 801618a:	1b9b      	subs	r3, r3, r6
 801618c:	60a3      	str	r3, [r4, #8]
 801618e:	6823      	ldr	r3, [r4, #0]
 8016190:	4433      	add	r3, r6
 8016192:	6023      	str	r3, [r4, #0]
 8016194:	2000      	movs	r0, #0
 8016196:	e7db      	b.n	8016150 <__ssputs_r+0x58>
 8016198:	462a      	mov	r2, r5
 801619a:	f000 fdad 	bl	8016cf8 <_realloc_r>
 801619e:	4606      	mov	r6, r0
 80161a0:	2800      	cmp	r0, #0
 80161a2:	d1e1      	bne.n	8016168 <__ssputs_r+0x70>
 80161a4:	6921      	ldr	r1, [r4, #16]
 80161a6:	4650      	mov	r0, sl
 80161a8:	f7ff fec6 	bl	8015f38 <_free_r>
 80161ac:	e7c7      	b.n	801613e <__ssputs_r+0x46>
	...

080161b0 <_svfiprintf_r>:
 80161b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161b4:	4698      	mov	r8, r3
 80161b6:	898b      	ldrh	r3, [r1, #12]
 80161b8:	061b      	lsls	r3, r3, #24
 80161ba:	b09d      	sub	sp, #116	; 0x74
 80161bc:	4607      	mov	r7, r0
 80161be:	460d      	mov	r5, r1
 80161c0:	4614      	mov	r4, r2
 80161c2:	d50e      	bpl.n	80161e2 <_svfiprintf_r+0x32>
 80161c4:	690b      	ldr	r3, [r1, #16]
 80161c6:	b963      	cbnz	r3, 80161e2 <_svfiprintf_r+0x32>
 80161c8:	2140      	movs	r1, #64	; 0x40
 80161ca:	f7ff ff21 	bl	8016010 <_malloc_r>
 80161ce:	6028      	str	r0, [r5, #0]
 80161d0:	6128      	str	r0, [r5, #16]
 80161d2:	b920      	cbnz	r0, 80161de <_svfiprintf_r+0x2e>
 80161d4:	230c      	movs	r3, #12
 80161d6:	603b      	str	r3, [r7, #0]
 80161d8:	f04f 30ff 	mov.w	r0, #4294967295
 80161dc:	e0d1      	b.n	8016382 <_svfiprintf_r+0x1d2>
 80161de:	2340      	movs	r3, #64	; 0x40
 80161e0:	616b      	str	r3, [r5, #20]
 80161e2:	2300      	movs	r3, #0
 80161e4:	9309      	str	r3, [sp, #36]	; 0x24
 80161e6:	2320      	movs	r3, #32
 80161e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80161ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80161f0:	2330      	movs	r3, #48	; 0x30
 80161f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801639c <_svfiprintf_r+0x1ec>
 80161f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80161fa:	f04f 0901 	mov.w	r9, #1
 80161fe:	4623      	mov	r3, r4
 8016200:	469a      	mov	sl, r3
 8016202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016206:	b10a      	cbz	r2, 801620c <_svfiprintf_r+0x5c>
 8016208:	2a25      	cmp	r2, #37	; 0x25
 801620a:	d1f9      	bne.n	8016200 <_svfiprintf_r+0x50>
 801620c:	ebba 0b04 	subs.w	fp, sl, r4
 8016210:	d00b      	beq.n	801622a <_svfiprintf_r+0x7a>
 8016212:	465b      	mov	r3, fp
 8016214:	4622      	mov	r2, r4
 8016216:	4629      	mov	r1, r5
 8016218:	4638      	mov	r0, r7
 801621a:	f7ff ff6d 	bl	80160f8 <__ssputs_r>
 801621e:	3001      	adds	r0, #1
 8016220:	f000 80aa 	beq.w	8016378 <_svfiprintf_r+0x1c8>
 8016224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016226:	445a      	add	r2, fp
 8016228:	9209      	str	r2, [sp, #36]	; 0x24
 801622a:	f89a 3000 	ldrb.w	r3, [sl]
 801622e:	2b00      	cmp	r3, #0
 8016230:	f000 80a2 	beq.w	8016378 <_svfiprintf_r+0x1c8>
 8016234:	2300      	movs	r3, #0
 8016236:	f04f 32ff 	mov.w	r2, #4294967295
 801623a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801623e:	f10a 0a01 	add.w	sl, sl, #1
 8016242:	9304      	str	r3, [sp, #16]
 8016244:	9307      	str	r3, [sp, #28]
 8016246:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801624a:	931a      	str	r3, [sp, #104]	; 0x68
 801624c:	4654      	mov	r4, sl
 801624e:	2205      	movs	r2, #5
 8016250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016254:	4851      	ldr	r0, [pc, #324]	; (801639c <_svfiprintf_r+0x1ec>)
 8016256:	f7e9 ffdb 	bl	8000210 <memchr>
 801625a:	9a04      	ldr	r2, [sp, #16]
 801625c:	b9d8      	cbnz	r0, 8016296 <_svfiprintf_r+0xe6>
 801625e:	06d0      	lsls	r0, r2, #27
 8016260:	bf44      	itt	mi
 8016262:	2320      	movmi	r3, #32
 8016264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016268:	0711      	lsls	r1, r2, #28
 801626a:	bf44      	itt	mi
 801626c:	232b      	movmi	r3, #43	; 0x2b
 801626e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016272:	f89a 3000 	ldrb.w	r3, [sl]
 8016276:	2b2a      	cmp	r3, #42	; 0x2a
 8016278:	d015      	beq.n	80162a6 <_svfiprintf_r+0xf6>
 801627a:	9a07      	ldr	r2, [sp, #28]
 801627c:	4654      	mov	r4, sl
 801627e:	2000      	movs	r0, #0
 8016280:	f04f 0c0a 	mov.w	ip, #10
 8016284:	4621      	mov	r1, r4
 8016286:	f811 3b01 	ldrb.w	r3, [r1], #1
 801628a:	3b30      	subs	r3, #48	; 0x30
 801628c:	2b09      	cmp	r3, #9
 801628e:	d94e      	bls.n	801632e <_svfiprintf_r+0x17e>
 8016290:	b1b0      	cbz	r0, 80162c0 <_svfiprintf_r+0x110>
 8016292:	9207      	str	r2, [sp, #28]
 8016294:	e014      	b.n	80162c0 <_svfiprintf_r+0x110>
 8016296:	eba0 0308 	sub.w	r3, r0, r8
 801629a:	fa09 f303 	lsl.w	r3, r9, r3
 801629e:	4313      	orrs	r3, r2
 80162a0:	9304      	str	r3, [sp, #16]
 80162a2:	46a2      	mov	sl, r4
 80162a4:	e7d2      	b.n	801624c <_svfiprintf_r+0x9c>
 80162a6:	9b03      	ldr	r3, [sp, #12]
 80162a8:	1d19      	adds	r1, r3, #4
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	9103      	str	r1, [sp, #12]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	bfbb      	ittet	lt
 80162b2:	425b      	neglt	r3, r3
 80162b4:	f042 0202 	orrlt.w	r2, r2, #2
 80162b8:	9307      	strge	r3, [sp, #28]
 80162ba:	9307      	strlt	r3, [sp, #28]
 80162bc:	bfb8      	it	lt
 80162be:	9204      	strlt	r2, [sp, #16]
 80162c0:	7823      	ldrb	r3, [r4, #0]
 80162c2:	2b2e      	cmp	r3, #46	; 0x2e
 80162c4:	d10c      	bne.n	80162e0 <_svfiprintf_r+0x130>
 80162c6:	7863      	ldrb	r3, [r4, #1]
 80162c8:	2b2a      	cmp	r3, #42	; 0x2a
 80162ca:	d135      	bne.n	8016338 <_svfiprintf_r+0x188>
 80162cc:	9b03      	ldr	r3, [sp, #12]
 80162ce:	1d1a      	adds	r2, r3, #4
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	9203      	str	r2, [sp, #12]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	bfb8      	it	lt
 80162d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80162dc:	3402      	adds	r4, #2
 80162de:	9305      	str	r3, [sp, #20]
 80162e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80163ac <_svfiprintf_r+0x1fc>
 80162e4:	7821      	ldrb	r1, [r4, #0]
 80162e6:	2203      	movs	r2, #3
 80162e8:	4650      	mov	r0, sl
 80162ea:	f7e9 ff91 	bl	8000210 <memchr>
 80162ee:	b140      	cbz	r0, 8016302 <_svfiprintf_r+0x152>
 80162f0:	2340      	movs	r3, #64	; 0x40
 80162f2:	eba0 000a 	sub.w	r0, r0, sl
 80162f6:	fa03 f000 	lsl.w	r0, r3, r0
 80162fa:	9b04      	ldr	r3, [sp, #16]
 80162fc:	4303      	orrs	r3, r0
 80162fe:	3401      	adds	r4, #1
 8016300:	9304      	str	r3, [sp, #16]
 8016302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016306:	4826      	ldr	r0, [pc, #152]	; (80163a0 <_svfiprintf_r+0x1f0>)
 8016308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801630c:	2206      	movs	r2, #6
 801630e:	f7e9 ff7f 	bl	8000210 <memchr>
 8016312:	2800      	cmp	r0, #0
 8016314:	d038      	beq.n	8016388 <_svfiprintf_r+0x1d8>
 8016316:	4b23      	ldr	r3, [pc, #140]	; (80163a4 <_svfiprintf_r+0x1f4>)
 8016318:	bb1b      	cbnz	r3, 8016362 <_svfiprintf_r+0x1b2>
 801631a:	9b03      	ldr	r3, [sp, #12]
 801631c:	3307      	adds	r3, #7
 801631e:	f023 0307 	bic.w	r3, r3, #7
 8016322:	3308      	adds	r3, #8
 8016324:	9303      	str	r3, [sp, #12]
 8016326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016328:	4433      	add	r3, r6
 801632a:	9309      	str	r3, [sp, #36]	; 0x24
 801632c:	e767      	b.n	80161fe <_svfiprintf_r+0x4e>
 801632e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016332:	460c      	mov	r4, r1
 8016334:	2001      	movs	r0, #1
 8016336:	e7a5      	b.n	8016284 <_svfiprintf_r+0xd4>
 8016338:	2300      	movs	r3, #0
 801633a:	3401      	adds	r4, #1
 801633c:	9305      	str	r3, [sp, #20]
 801633e:	4619      	mov	r1, r3
 8016340:	f04f 0c0a 	mov.w	ip, #10
 8016344:	4620      	mov	r0, r4
 8016346:	f810 2b01 	ldrb.w	r2, [r0], #1
 801634a:	3a30      	subs	r2, #48	; 0x30
 801634c:	2a09      	cmp	r2, #9
 801634e:	d903      	bls.n	8016358 <_svfiprintf_r+0x1a8>
 8016350:	2b00      	cmp	r3, #0
 8016352:	d0c5      	beq.n	80162e0 <_svfiprintf_r+0x130>
 8016354:	9105      	str	r1, [sp, #20]
 8016356:	e7c3      	b.n	80162e0 <_svfiprintf_r+0x130>
 8016358:	fb0c 2101 	mla	r1, ip, r1, r2
 801635c:	4604      	mov	r4, r0
 801635e:	2301      	movs	r3, #1
 8016360:	e7f0      	b.n	8016344 <_svfiprintf_r+0x194>
 8016362:	ab03      	add	r3, sp, #12
 8016364:	9300      	str	r3, [sp, #0]
 8016366:	462a      	mov	r2, r5
 8016368:	4b0f      	ldr	r3, [pc, #60]	; (80163a8 <_svfiprintf_r+0x1f8>)
 801636a:	a904      	add	r1, sp, #16
 801636c:	4638      	mov	r0, r7
 801636e:	f7fc f9a7 	bl	80126c0 <_printf_float>
 8016372:	1c42      	adds	r2, r0, #1
 8016374:	4606      	mov	r6, r0
 8016376:	d1d6      	bne.n	8016326 <_svfiprintf_r+0x176>
 8016378:	89ab      	ldrh	r3, [r5, #12]
 801637a:	065b      	lsls	r3, r3, #25
 801637c:	f53f af2c 	bmi.w	80161d8 <_svfiprintf_r+0x28>
 8016380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016382:	b01d      	add	sp, #116	; 0x74
 8016384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016388:	ab03      	add	r3, sp, #12
 801638a:	9300      	str	r3, [sp, #0]
 801638c:	462a      	mov	r2, r5
 801638e:	4b06      	ldr	r3, [pc, #24]	; (80163a8 <_svfiprintf_r+0x1f8>)
 8016390:	a904      	add	r1, sp, #16
 8016392:	4638      	mov	r0, r7
 8016394:	f7fc fc38 	bl	8012c08 <_printf_i>
 8016398:	e7eb      	b.n	8016372 <_svfiprintf_r+0x1c2>
 801639a:	bf00      	nop
 801639c:	0802b01c 	.word	0x0802b01c
 80163a0:	0802b026 	.word	0x0802b026
 80163a4:	080126c1 	.word	0x080126c1
 80163a8:	080160f9 	.word	0x080160f9
 80163ac:	0802b022 	.word	0x0802b022

080163b0 <__sfputc_r>:
 80163b0:	6893      	ldr	r3, [r2, #8]
 80163b2:	3b01      	subs	r3, #1
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	b410      	push	{r4}
 80163b8:	6093      	str	r3, [r2, #8]
 80163ba:	da08      	bge.n	80163ce <__sfputc_r+0x1e>
 80163bc:	6994      	ldr	r4, [r2, #24]
 80163be:	42a3      	cmp	r3, r4
 80163c0:	db01      	blt.n	80163c6 <__sfputc_r+0x16>
 80163c2:	290a      	cmp	r1, #10
 80163c4:	d103      	bne.n	80163ce <__sfputc_r+0x1e>
 80163c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163ca:	f000 b979 	b.w	80166c0 <__swbuf_r>
 80163ce:	6813      	ldr	r3, [r2, #0]
 80163d0:	1c58      	adds	r0, r3, #1
 80163d2:	6010      	str	r0, [r2, #0]
 80163d4:	7019      	strb	r1, [r3, #0]
 80163d6:	4608      	mov	r0, r1
 80163d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163dc:	4770      	bx	lr

080163de <__sfputs_r>:
 80163de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163e0:	4606      	mov	r6, r0
 80163e2:	460f      	mov	r7, r1
 80163e4:	4614      	mov	r4, r2
 80163e6:	18d5      	adds	r5, r2, r3
 80163e8:	42ac      	cmp	r4, r5
 80163ea:	d101      	bne.n	80163f0 <__sfputs_r+0x12>
 80163ec:	2000      	movs	r0, #0
 80163ee:	e007      	b.n	8016400 <__sfputs_r+0x22>
 80163f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163f4:	463a      	mov	r2, r7
 80163f6:	4630      	mov	r0, r6
 80163f8:	f7ff ffda 	bl	80163b0 <__sfputc_r>
 80163fc:	1c43      	adds	r3, r0, #1
 80163fe:	d1f3      	bne.n	80163e8 <__sfputs_r+0xa>
 8016400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016404 <_vfiprintf_r>:
 8016404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016408:	460d      	mov	r5, r1
 801640a:	b09d      	sub	sp, #116	; 0x74
 801640c:	4614      	mov	r4, r2
 801640e:	4698      	mov	r8, r3
 8016410:	4606      	mov	r6, r0
 8016412:	b118      	cbz	r0, 801641c <_vfiprintf_r+0x18>
 8016414:	6983      	ldr	r3, [r0, #24]
 8016416:	b90b      	cbnz	r3, 801641c <_vfiprintf_r+0x18>
 8016418:	f000 fb42 	bl	8016aa0 <__sinit>
 801641c:	4b89      	ldr	r3, [pc, #548]	; (8016644 <_vfiprintf_r+0x240>)
 801641e:	429d      	cmp	r5, r3
 8016420:	d11b      	bne.n	801645a <_vfiprintf_r+0x56>
 8016422:	6875      	ldr	r5, [r6, #4]
 8016424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016426:	07d9      	lsls	r1, r3, #31
 8016428:	d405      	bmi.n	8016436 <_vfiprintf_r+0x32>
 801642a:	89ab      	ldrh	r3, [r5, #12]
 801642c:	059a      	lsls	r2, r3, #22
 801642e:	d402      	bmi.n	8016436 <_vfiprintf_r+0x32>
 8016430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016432:	f000 fbd3 	bl	8016bdc <__retarget_lock_acquire_recursive>
 8016436:	89ab      	ldrh	r3, [r5, #12]
 8016438:	071b      	lsls	r3, r3, #28
 801643a:	d501      	bpl.n	8016440 <_vfiprintf_r+0x3c>
 801643c:	692b      	ldr	r3, [r5, #16]
 801643e:	b9eb      	cbnz	r3, 801647c <_vfiprintf_r+0x78>
 8016440:	4629      	mov	r1, r5
 8016442:	4630      	mov	r0, r6
 8016444:	f000 f99c 	bl	8016780 <__swsetup_r>
 8016448:	b1c0      	cbz	r0, 801647c <_vfiprintf_r+0x78>
 801644a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801644c:	07dc      	lsls	r4, r3, #31
 801644e:	d50e      	bpl.n	801646e <_vfiprintf_r+0x6a>
 8016450:	f04f 30ff 	mov.w	r0, #4294967295
 8016454:	b01d      	add	sp, #116	; 0x74
 8016456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801645a:	4b7b      	ldr	r3, [pc, #492]	; (8016648 <_vfiprintf_r+0x244>)
 801645c:	429d      	cmp	r5, r3
 801645e:	d101      	bne.n	8016464 <_vfiprintf_r+0x60>
 8016460:	68b5      	ldr	r5, [r6, #8]
 8016462:	e7df      	b.n	8016424 <_vfiprintf_r+0x20>
 8016464:	4b79      	ldr	r3, [pc, #484]	; (801664c <_vfiprintf_r+0x248>)
 8016466:	429d      	cmp	r5, r3
 8016468:	bf08      	it	eq
 801646a:	68f5      	ldreq	r5, [r6, #12]
 801646c:	e7da      	b.n	8016424 <_vfiprintf_r+0x20>
 801646e:	89ab      	ldrh	r3, [r5, #12]
 8016470:	0598      	lsls	r0, r3, #22
 8016472:	d4ed      	bmi.n	8016450 <_vfiprintf_r+0x4c>
 8016474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016476:	f000 fbb2 	bl	8016bde <__retarget_lock_release_recursive>
 801647a:	e7e9      	b.n	8016450 <_vfiprintf_r+0x4c>
 801647c:	2300      	movs	r3, #0
 801647e:	9309      	str	r3, [sp, #36]	; 0x24
 8016480:	2320      	movs	r3, #32
 8016482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016486:	f8cd 800c 	str.w	r8, [sp, #12]
 801648a:	2330      	movs	r3, #48	; 0x30
 801648c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016650 <_vfiprintf_r+0x24c>
 8016490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016494:	f04f 0901 	mov.w	r9, #1
 8016498:	4623      	mov	r3, r4
 801649a:	469a      	mov	sl, r3
 801649c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164a0:	b10a      	cbz	r2, 80164a6 <_vfiprintf_r+0xa2>
 80164a2:	2a25      	cmp	r2, #37	; 0x25
 80164a4:	d1f9      	bne.n	801649a <_vfiprintf_r+0x96>
 80164a6:	ebba 0b04 	subs.w	fp, sl, r4
 80164aa:	d00b      	beq.n	80164c4 <_vfiprintf_r+0xc0>
 80164ac:	465b      	mov	r3, fp
 80164ae:	4622      	mov	r2, r4
 80164b0:	4629      	mov	r1, r5
 80164b2:	4630      	mov	r0, r6
 80164b4:	f7ff ff93 	bl	80163de <__sfputs_r>
 80164b8:	3001      	adds	r0, #1
 80164ba:	f000 80aa 	beq.w	8016612 <_vfiprintf_r+0x20e>
 80164be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80164c0:	445a      	add	r2, fp
 80164c2:	9209      	str	r2, [sp, #36]	; 0x24
 80164c4:	f89a 3000 	ldrb.w	r3, [sl]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	f000 80a2 	beq.w	8016612 <_vfiprintf_r+0x20e>
 80164ce:	2300      	movs	r3, #0
 80164d0:	f04f 32ff 	mov.w	r2, #4294967295
 80164d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164d8:	f10a 0a01 	add.w	sl, sl, #1
 80164dc:	9304      	str	r3, [sp, #16]
 80164de:	9307      	str	r3, [sp, #28]
 80164e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80164e4:	931a      	str	r3, [sp, #104]	; 0x68
 80164e6:	4654      	mov	r4, sl
 80164e8:	2205      	movs	r2, #5
 80164ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164ee:	4858      	ldr	r0, [pc, #352]	; (8016650 <_vfiprintf_r+0x24c>)
 80164f0:	f7e9 fe8e 	bl	8000210 <memchr>
 80164f4:	9a04      	ldr	r2, [sp, #16]
 80164f6:	b9d8      	cbnz	r0, 8016530 <_vfiprintf_r+0x12c>
 80164f8:	06d1      	lsls	r1, r2, #27
 80164fa:	bf44      	itt	mi
 80164fc:	2320      	movmi	r3, #32
 80164fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016502:	0713      	lsls	r3, r2, #28
 8016504:	bf44      	itt	mi
 8016506:	232b      	movmi	r3, #43	; 0x2b
 8016508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801650c:	f89a 3000 	ldrb.w	r3, [sl]
 8016510:	2b2a      	cmp	r3, #42	; 0x2a
 8016512:	d015      	beq.n	8016540 <_vfiprintf_r+0x13c>
 8016514:	9a07      	ldr	r2, [sp, #28]
 8016516:	4654      	mov	r4, sl
 8016518:	2000      	movs	r0, #0
 801651a:	f04f 0c0a 	mov.w	ip, #10
 801651e:	4621      	mov	r1, r4
 8016520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016524:	3b30      	subs	r3, #48	; 0x30
 8016526:	2b09      	cmp	r3, #9
 8016528:	d94e      	bls.n	80165c8 <_vfiprintf_r+0x1c4>
 801652a:	b1b0      	cbz	r0, 801655a <_vfiprintf_r+0x156>
 801652c:	9207      	str	r2, [sp, #28]
 801652e:	e014      	b.n	801655a <_vfiprintf_r+0x156>
 8016530:	eba0 0308 	sub.w	r3, r0, r8
 8016534:	fa09 f303 	lsl.w	r3, r9, r3
 8016538:	4313      	orrs	r3, r2
 801653a:	9304      	str	r3, [sp, #16]
 801653c:	46a2      	mov	sl, r4
 801653e:	e7d2      	b.n	80164e6 <_vfiprintf_r+0xe2>
 8016540:	9b03      	ldr	r3, [sp, #12]
 8016542:	1d19      	adds	r1, r3, #4
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	9103      	str	r1, [sp, #12]
 8016548:	2b00      	cmp	r3, #0
 801654a:	bfbb      	ittet	lt
 801654c:	425b      	neglt	r3, r3
 801654e:	f042 0202 	orrlt.w	r2, r2, #2
 8016552:	9307      	strge	r3, [sp, #28]
 8016554:	9307      	strlt	r3, [sp, #28]
 8016556:	bfb8      	it	lt
 8016558:	9204      	strlt	r2, [sp, #16]
 801655a:	7823      	ldrb	r3, [r4, #0]
 801655c:	2b2e      	cmp	r3, #46	; 0x2e
 801655e:	d10c      	bne.n	801657a <_vfiprintf_r+0x176>
 8016560:	7863      	ldrb	r3, [r4, #1]
 8016562:	2b2a      	cmp	r3, #42	; 0x2a
 8016564:	d135      	bne.n	80165d2 <_vfiprintf_r+0x1ce>
 8016566:	9b03      	ldr	r3, [sp, #12]
 8016568:	1d1a      	adds	r2, r3, #4
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	9203      	str	r2, [sp, #12]
 801656e:	2b00      	cmp	r3, #0
 8016570:	bfb8      	it	lt
 8016572:	f04f 33ff 	movlt.w	r3, #4294967295
 8016576:	3402      	adds	r4, #2
 8016578:	9305      	str	r3, [sp, #20]
 801657a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016660 <_vfiprintf_r+0x25c>
 801657e:	7821      	ldrb	r1, [r4, #0]
 8016580:	2203      	movs	r2, #3
 8016582:	4650      	mov	r0, sl
 8016584:	f7e9 fe44 	bl	8000210 <memchr>
 8016588:	b140      	cbz	r0, 801659c <_vfiprintf_r+0x198>
 801658a:	2340      	movs	r3, #64	; 0x40
 801658c:	eba0 000a 	sub.w	r0, r0, sl
 8016590:	fa03 f000 	lsl.w	r0, r3, r0
 8016594:	9b04      	ldr	r3, [sp, #16]
 8016596:	4303      	orrs	r3, r0
 8016598:	3401      	adds	r4, #1
 801659a:	9304      	str	r3, [sp, #16]
 801659c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165a0:	482c      	ldr	r0, [pc, #176]	; (8016654 <_vfiprintf_r+0x250>)
 80165a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80165a6:	2206      	movs	r2, #6
 80165a8:	f7e9 fe32 	bl	8000210 <memchr>
 80165ac:	2800      	cmp	r0, #0
 80165ae:	d03f      	beq.n	8016630 <_vfiprintf_r+0x22c>
 80165b0:	4b29      	ldr	r3, [pc, #164]	; (8016658 <_vfiprintf_r+0x254>)
 80165b2:	bb1b      	cbnz	r3, 80165fc <_vfiprintf_r+0x1f8>
 80165b4:	9b03      	ldr	r3, [sp, #12]
 80165b6:	3307      	adds	r3, #7
 80165b8:	f023 0307 	bic.w	r3, r3, #7
 80165bc:	3308      	adds	r3, #8
 80165be:	9303      	str	r3, [sp, #12]
 80165c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165c2:	443b      	add	r3, r7
 80165c4:	9309      	str	r3, [sp, #36]	; 0x24
 80165c6:	e767      	b.n	8016498 <_vfiprintf_r+0x94>
 80165c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80165cc:	460c      	mov	r4, r1
 80165ce:	2001      	movs	r0, #1
 80165d0:	e7a5      	b.n	801651e <_vfiprintf_r+0x11a>
 80165d2:	2300      	movs	r3, #0
 80165d4:	3401      	adds	r4, #1
 80165d6:	9305      	str	r3, [sp, #20]
 80165d8:	4619      	mov	r1, r3
 80165da:	f04f 0c0a 	mov.w	ip, #10
 80165de:	4620      	mov	r0, r4
 80165e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165e4:	3a30      	subs	r2, #48	; 0x30
 80165e6:	2a09      	cmp	r2, #9
 80165e8:	d903      	bls.n	80165f2 <_vfiprintf_r+0x1ee>
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d0c5      	beq.n	801657a <_vfiprintf_r+0x176>
 80165ee:	9105      	str	r1, [sp, #20]
 80165f0:	e7c3      	b.n	801657a <_vfiprintf_r+0x176>
 80165f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80165f6:	4604      	mov	r4, r0
 80165f8:	2301      	movs	r3, #1
 80165fa:	e7f0      	b.n	80165de <_vfiprintf_r+0x1da>
 80165fc:	ab03      	add	r3, sp, #12
 80165fe:	9300      	str	r3, [sp, #0]
 8016600:	462a      	mov	r2, r5
 8016602:	4b16      	ldr	r3, [pc, #88]	; (801665c <_vfiprintf_r+0x258>)
 8016604:	a904      	add	r1, sp, #16
 8016606:	4630      	mov	r0, r6
 8016608:	f7fc f85a 	bl	80126c0 <_printf_float>
 801660c:	4607      	mov	r7, r0
 801660e:	1c78      	adds	r0, r7, #1
 8016610:	d1d6      	bne.n	80165c0 <_vfiprintf_r+0x1bc>
 8016612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016614:	07d9      	lsls	r1, r3, #31
 8016616:	d405      	bmi.n	8016624 <_vfiprintf_r+0x220>
 8016618:	89ab      	ldrh	r3, [r5, #12]
 801661a:	059a      	lsls	r2, r3, #22
 801661c:	d402      	bmi.n	8016624 <_vfiprintf_r+0x220>
 801661e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016620:	f000 fadd 	bl	8016bde <__retarget_lock_release_recursive>
 8016624:	89ab      	ldrh	r3, [r5, #12]
 8016626:	065b      	lsls	r3, r3, #25
 8016628:	f53f af12 	bmi.w	8016450 <_vfiprintf_r+0x4c>
 801662c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801662e:	e711      	b.n	8016454 <_vfiprintf_r+0x50>
 8016630:	ab03      	add	r3, sp, #12
 8016632:	9300      	str	r3, [sp, #0]
 8016634:	462a      	mov	r2, r5
 8016636:	4b09      	ldr	r3, [pc, #36]	; (801665c <_vfiprintf_r+0x258>)
 8016638:	a904      	add	r1, sp, #16
 801663a:	4630      	mov	r0, r6
 801663c:	f7fc fae4 	bl	8012c08 <_printf_i>
 8016640:	e7e4      	b.n	801660c <_vfiprintf_r+0x208>
 8016642:	bf00      	nop
 8016644:	0802b050 	.word	0x0802b050
 8016648:	0802b070 	.word	0x0802b070
 801664c:	0802b030 	.word	0x0802b030
 8016650:	0802b01c 	.word	0x0802b01c
 8016654:	0802b026 	.word	0x0802b026
 8016658:	080126c1 	.word	0x080126c1
 801665c:	080163df 	.word	0x080163df
 8016660:	0802b022 	.word	0x0802b022
 8016664:	00000000 	.word	0x00000000

08016668 <nan>:
 8016668:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016670 <nan+0x8>
 801666c:	4770      	bx	lr
 801666e:	bf00      	nop
 8016670:	00000000 	.word	0x00000000
 8016674:	7ff80000 	.word	0x7ff80000

08016678 <_sbrk_r>:
 8016678:	b538      	push	{r3, r4, r5, lr}
 801667a:	4d06      	ldr	r5, [pc, #24]	; (8016694 <_sbrk_r+0x1c>)
 801667c:	2300      	movs	r3, #0
 801667e:	4604      	mov	r4, r0
 8016680:	4608      	mov	r0, r1
 8016682:	602b      	str	r3, [r5, #0]
 8016684:	f7f4 fa46 	bl	800ab14 <_sbrk>
 8016688:	1c43      	adds	r3, r0, #1
 801668a:	d102      	bne.n	8016692 <_sbrk_r+0x1a>
 801668c:	682b      	ldr	r3, [r5, #0]
 801668e:	b103      	cbz	r3, 8016692 <_sbrk_r+0x1a>
 8016690:	6023      	str	r3, [r4, #0]
 8016692:	bd38      	pop	{r3, r4, r5, pc}
 8016694:	20000d88 	.word	0x20000d88

08016698 <strncmp>:
 8016698:	b510      	push	{r4, lr}
 801669a:	b17a      	cbz	r2, 80166bc <strncmp+0x24>
 801669c:	4603      	mov	r3, r0
 801669e:	3901      	subs	r1, #1
 80166a0:	1884      	adds	r4, r0, r2
 80166a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80166a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80166aa:	4290      	cmp	r0, r2
 80166ac:	d101      	bne.n	80166b2 <strncmp+0x1a>
 80166ae:	42a3      	cmp	r3, r4
 80166b0:	d101      	bne.n	80166b6 <strncmp+0x1e>
 80166b2:	1a80      	subs	r0, r0, r2
 80166b4:	bd10      	pop	{r4, pc}
 80166b6:	2800      	cmp	r0, #0
 80166b8:	d1f3      	bne.n	80166a2 <strncmp+0xa>
 80166ba:	e7fa      	b.n	80166b2 <strncmp+0x1a>
 80166bc:	4610      	mov	r0, r2
 80166be:	e7f9      	b.n	80166b4 <strncmp+0x1c>

080166c0 <__swbuf_r>:
 80166c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166c2:	460e      	mov	r6, r1
 80166c4:	4614      	mov	r4, r2
 80166c6:	4605      	mov	r5, r0
 80166c8:	b118      	cbz	r0, 80166d2 <__swbuf_r+0x12>
 80166ca:	6983      	ldr	r3, [r0, #24]
 80166cc:	b90b      	cbnz	r3, 80166d2 <__swbuf_r+0x12>
 80166ce:	f000 f9e7 	bl	8016aa0 <__sinit>
 80166d2:	4b21      	ldr	r3, [pc, #132]	; (8016758 <__swbuf_r+0x98>)
 80166d4:	429c      	cmp	r4, r3
 80166d6:	d12b      	bne.n	8016730 <__swbuf_r+0x70>
 80166d8:	686c      	ldr	r4, [r5, #4]
 80166da:	69a3      	ldr	r3, [r4, #24]
 80166dc:	60a3      	str	r3, [r4, #8]
 80166de:	89a3      	ldrh	r3, [r4, #12]
 80166e0:	071a      	lsls	r2, r3, #28
 80166e2:	d52f      	bpl.n	8016744 <__swbuf_r+0x84>
 80166e4:	6923      	ldr	r3, [r4, #16]
 80166e6:	b36b      	cbz	r3, 8016744 <__swbuf_r+0x84>
 80166e8:	6923      	ldr	r3, [r4, #16]
 80166ea:	6820      	ldr	r0, [r4, #0]
 80166ec:	1ac0      	subs	r0, r0, r3
 80166ee:	6963      	ldr	r3, [r4, #20]
 80166f0:	b2f6      	uxtb	r6, r6
 80166f2:	4283      	cmp	r3, r0
 80166f4:	4637      	mov	r7, r6
 80166f6:	dc04      	bgt.n	8016702 <__swbuf_r+0x42>
 80166f8:	4621      	mov	r1, r4
 80166fa:	4628      	mov	r0, r5
 80166fc:	f000 f93c 	bl	8016978 <_fflush_r>
 8016700:	bb30      	cbnz	r0, 8016750 <__swbuf_r+0x90>
 8016702:	68a3      	ldr	r3, [r4, #8]
 8016704:	3b01      	subs	r3, #1
 8016706:	60a3      	str	r3, [r4, #8]
 8016708:	6823      	ldr	r3, [r4, #0]
 801670a:	1c5a      	adds	r2, r3, #1
 801670c:	6022      	str	r2, [r4, #0]
 801670e:	701e      	strb	r6, [r3, #0]
 8016710:	6963      	ldr	r3, [r4, #20]
 8016712:	3001      	adds	r0, #1
 8016714:	4283      	cmp	r3, r0
 8016716:	d004      	beq.n	8016722 <__swbuf_r+0x62>
 8016718:	89a3      	ldrh	r3, [r4, #12]
 801671a:	07db      	lsls	r3, r3, #31
 801671c:	d506      	bpl.n	801672c <__swbuf_r+0x6c>
 801671e:	2e0a      	cmp	r6, #10
 8016720:	d104      	bne.n	801672c <__swbuf_r+0x6c>
 8016722:	4621      	mov	r1, r4
 8016724:	4628      	mov	r0, r5
 8016726:	f000 f927 	bl	8016978 <_fflush_r>
 801672a:	b988      	cbnz	r0, 8016750 <__swbuf_r+0x90>
 801672c:	4638      	mov	r0, r7
 801672e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016730:	4b0a      	ldr	r3, [pc, #40]	; (801675c <__swbuf_r+0x9c>)
 8016732:	429c      	cmp	r4, r3
 8016734:	d101      	bne.n	801673a <__swbuf_r+0x7a>
 8016736:	68ac      	ldr	r4, [r5, #8]
 8016738:	e7cf      	b.n	80166da <__swbuf_r+0x1a>
 801673a:	4b09      	ldr	r3, [pc, #36]	; (8016760 <__swbuf_r+0xa0>)
 801673c:	429c      	cmp	r4, r3
 801673e:	bf08      	it	eq
 8016740:	68ec      	ldreq	r4, [r5, #12]
 8016742:	e7ca      	b.n	80166da <__swbuf_r+0x1a>
 8016744:	4621      	mov	r1, r4
 8016746:	4628      	mov	r0, r5
 8016748:	f000 f81a 	bl	8016780 <__swsetup_r>
 801674c:	2800      	cmp	r0, #0
 801674e:	d0cb      	beq.n	80166e8 <__swbuf_r+0x28>
 8016750:	f04f 37ff 	mov.w	r7, #4294967295
 8016754:	e7ea      	b.n	801672c <__swbuf_r+0x6c>
 8016756:	bf00      	nop
 8016758:	0802b050 	.word	0x0802b050
 801675c:	0802b070 	.word	0x0802b070
 8016760:	0802b030 	.word	0x0802b030

08016764 <__ascii_wctomb>:
 8016764:	b149      	cbz	r1, 801677a <__ascii_wctomb+0x16>
 8016766:	2aff      	cmp	r2, #255	; 0xff
 8016768:	bf85      	ittet	hi
 801676a:	238a      	movhi	r3, #138	; 0x8a
 801676c:	6003      	strhi	r3, [r0, #0]
 801676e:	700a      	strbls	r2, [r1, #0]
 8016770:	f04f 30ff 	movhi.w	r0, #4294967295
 8016774:	bf98      	it	ls
 8016776:	2001      	movls	r0, #1
 8016778:	4770      	bx	lr
 801677a:	4608      	mov	r0, r1
 801677c:	4770      	bx	lr
	...

08016780 <__swsetup_r>:
 8016780:	4b32      	ldr	r3, [pc, #200]	; (801684c <__swsetup_r+0xcc>)
 8016782:	b570      	push	{r4, r5, r6, lr}
 8016784:	681d      	ldr	r5, [r3, #0]
 8016786:	4606      	mov	r6, r0
 8016788:	460c      	mov	r4, r1
 801678a:	b125      	cbz	r5, 8016796 <__swsetup_r+0x16>
 801678c:	69ab      	ldr	r3, [r5, #24]
 801678e:	b913      	cbnz	r3, 8016796 <__swsetup_r+0x16>
 8016790:	4628      	mov	r0, r5
 8016792:	f000 f985 	bl	8016aa0 <__sinit>
 8016796:	4b2e      	ldr	r3, [pc, #184]	; (8016850 <__swsetup_r+0xd0>)
 8016798:	429c      	cmp	r4, r3
 801679a:	d10f      	bne.n	80167bc <__swsetup_r+0x3c>
 801679c:	686c      	ldr	r4, [r5, #4]
 801679e:	89a3      	ldrh	r3, [r4, #12]
 80167a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80167a4:	0719      	lsls	r1, r3, #28
 80167a6:	d42c      	bmi.n	8016802 <__swsetup_r+0x82>
 80167a8:	06dd      	lsls	r5, r3, #27
 80167aa:	d411      	bmi.n	80167d0 <__swsetup_r+0x50>
 80167ac:	2309      	movs	r3, #9
 80167ae:	6033      	str	r3, [r6, #0]
 80167b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80167b4:	81a3      	strh	r3, [r4, #12]
 80167b6:	f04f 30ff 	mov.w	r0, #4294967295
 80167ba:	e03e      	b.n	801683a <__swsetup_r+0xba>
 80167bc:	4b25      	ldr	r3, [pc, #148]	; (8016854 <__swsetup_r+0xd4>)
 80167be:	429c      	cmp	r4, r3
 80167c0:	d101      	bne.n	80167c6 <__swsetup_r+0x46>
 80167c2:	68ac      	ldr	r4, [r5, #8]
 80167c4:	e7eb      	b.n	801679e <__swsetup_r+0x1e>
 80167c6:	4b24      	ldr	r3, [pc, #144]	; (8016858 <__swsetup_r+0xd8>)
 80167c8:	429c      	cmp	r4, r3
 80167ca:	bf08      	it	eq
 80167cc:	68ec      	ldreq	r4, [r5, #12]
 80167ce:	e7e6      	b.n	801679e <__swsetup_r+0x1e>
 80167d0:	0758      	lsls	r0, r3, #29
 80167d2:	d512      	bpl.n	80167fa <__swsetup_r+0x7a>
 80167d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167d6:	b141      	cbz	r1, 80167ea <__swsetup_r+0x6a>
 80167d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167dc:	4299      	cmp	r1, r3
 80167de:	d002      	beq.n	80167e6 <__swsetup_r+0x66>
 80167e0:	4630      	mov	r0, r6
 80167e2:	f7ff fba9 	bl	8015f38 <_free_r>
 80167e6:	2300      	movs	r3, #0
 80167e8:	6363      	str	r3, [r4, #52]	; 0x34
 80167ea:	89a3      	ldrh	r3, [r4, #12]
 80167ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80167f0:	81a3      	strh	r3, [r4, #12]
 80167f2:	2300      	movs	r3, #0
 80167f4:	6063      	str	r3, [r4, #4]
 80167f6:	6923      	ldr	r3, [r4, #16]
 80167f8:	6023      	str	r3, [r4, #0]
 80167fa:	89a3      	ldrh	r3, [r4, #12]
 80167fc:	f043 0308 	orr.w	r3, r3, #8
 8016800:	81a3      	strh	r3, [r4, #12]
 8016802:	6923      	ldr	r3, [r4, #16]
 8016804:	b94b      	cbnz	r3, 801681a <__swsetup_r+0x9a>
 8016806:	89a3      	ldrh	r3, [r4, #12]
 8016808:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801680c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016810:	d003      	beq.n	801681a <__swsetup_r+0x9a>
 8016812:	4621      	mov	r1, r4
 8016814:	4630      	mov	r0, r6
 8016816:	f000 fa09 	bl	8016c2c <__smakebuf_r>
 801681a:	89a0      	ldrh	r0, [r4, #12]
 801681c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016820:	f010 0301 	ands.w	r3, r0, #1
 8016824:	d00a      	beq.n	801683c <__swsetup_r+0xbc>
 8016826:	2300      	movs	r3, #0
 8016828:	60a3      	str	r3, [r4, #8]
 801682a:	6963      	ldr	r3, [r4, #20]
 801682c:	425b      	negs	r3, r3
 801682e:	61a3      	str	r3, [r4, #24]
 8016830:	6923      	ldr	r3, [r4, #16]
 8016832:	b943      	cbnz	r3, 8016846 <__swsetup_r+0xc6>
 8016834:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016838:	d1ba      	bne.n	80167b0 <__swsetup_r+0x30>
 801683a:	bd70      	pop	{r4, r5, r6, pc}
 801683c:	0781      	lsls	r1, r0, #30
 801683e:	bf58      	it	pl
 8016840:	6963      	ldrpl	r3, [r4, #20]
 8016842:	60a3      	str	r3, [r4, #8]
 8016844:	e7f4      	b.n	8016830 <__swsetup_r+0xb0>
 8016846:	2000      	movs	r0, #0
 8016848:	e7f7      	b.n	801683a <__swsetup_r+0xba>
 801684a:	bf00      	nop
 801684c:	20000044 	.word	0x20000044
 8016850:	0802b050 	.word	0x0802b050
 8016854:	0802b070 	.word	0x0802b070
 8016858:	0802b030 	.word	0x0802b030

0801685c <abort>:
 801685c:	b508      	push	{r3, lr}
 801685e:	2006      	movs	r0, #6
 8016860:	f000 faa2 	bl	8016da8 <raise>
 8016864:	2001      	movs	r0, #1
 8016866:	f7f4 f8dd 	bl	800aa24 <_exit>
	...

0801686c <__sflush_r>:
 801686c:	898a      	ldrh	r2, [r1, #12]
 801686e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016872:	4605      	mov	r5, r0
 8016874:	0710      	lsls	r0, r2, #28
 8016876:	460c      	mov	r4, r1
 8016878:	d458      	bmi.n	801692c <__sflush_r+0xc0>
 801687a:	684b      	ldr	r3, [r1, #4]
 801687c:	2b00      	cmp	r3, #0
 801687e:	dc05      	bgt.n	801688c <__sflush_r+0x20>
 8016880:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016882:	2b00      	cmp	r3, #0
 8016884:	dc02      	bgt.n	801688c <__sflush_r+0x20>
 8016886:	2000      	movs	r0, #0
 8016888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801688c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801688e:	2e00      	cmp	r6, #0
 8016890:	d0f9      	beq.n	8016886 <__sflush_r+0x1a>
 8016892:	2300      	movs	r3, #0
 8016894:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016898:	682f      	ldr	r7, [r5, #0]
 801689a:	602b      	str	r3, [r5, #0]
 801689c:	d032      	beq.n	8016904 <__sflush_r+0x98>
 801689e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80168a0:	89a3      	ldrh	r3, [r4, #12]
 80168a2:	075a      	lsls	r2, r3, #29
 80168a4:	d505      	bpl.n	80168b2 <__sflush_r+0x46>
 80168a6:	6863      	ldr	r3, [r4, #4]
 80168a8:	1ac0      	subs	r0, r0, r3
 80168aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80168ac:	b10b      	cbz	r3, 80168b2 <__sflush_r+0x46>
 80168ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80168b0:	1ac0      	subs	r0, r0, r3
 80168b2:	2300      	movs	r3, #0
 80168b4:	4602      	mov	r2, r0
 80168b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80168b8:	6a21      	ldr	r1, [r4, #32]
 80168ba:	4628      	mov	r0, r5
 80168bc:	47b0      	blx	r6
 80168be:	1c43      	adds	r3, r0, #1
 80168c0:	89a3      	ldrh	r3, [r4, #12]
 80168c2:	d106      	bne.n	80168d2 <__sflush_r+0x66>
 80168c4:	6829      	ldr	r1, [r5, #0]
 80168c6:	291d      	cmp	r1, #29
 80168c8:	d82c      	bhi.n	8016924 <__sflush_r+0xb8>
 80168ca:	4a2a      	ldr	r2, [pc, #168]	; (8016974 <__sflush_r+0x108>)
 80168cc:	40ca      	lsrs	r2, r1
 80168ce:	07d6      	lsls	r6, r2, #31
 80168d0:	d528      	bpl.n	8016924 <__sflush_r+0xb8>
 80168d2:	2200      	movs	r2, #0
 80168d4:	6062      	str	r2, [r4, #4]
 80168d6:	04d9      	lsls	r1, r3, #19
 80168d8:	6922      	ldr	r2, [r4, #16]
 80168da:	6022      	str	r2, [r4, #0]
 80168dc:	d504      	bpl.n	80168e8 <__sflush_r+0x7c>
 80168de:	1c42      	adds	r2, r0, #1
 80168e0:	d101      	bne.n	80168e6 <__sflush_r+0x7a>
 80168e2:	682b      	ldr	r3, [r5, #0]
 80168e4:	b903      	cbnz	r3, 80168e8 <__sflush_r+0x7c>
 80168e6:	6560      	str	r0, [r4, #84]	; 0x54
 80168e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80168ea:	602f      	str	r7, [r5, #0]
 80168ec:	2900      	cmp	r1, #0
 80168ee:	d0ca      	beq.n	8016886 <__sflush_r+0x1a>
 80168f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80168f4:	4299      	cmp	r1, r3
 80168f6:	d002      	beq.n	80168fe <__sflush_r+0x92>
 80168f8:	4628      	mov	r0, r5
 80168fa:	f7ff fb1d 	bl	8015f38 <_free_r>
 80168fe:	2000      	movs	r0, #0
 8016900:	6360      	str	r0, [r4, #52]	; 0x34
 8016902:	e7c1      	b.n	8016888 <__sflush_r+0x1c>
 8016904:	6a21      	ldr	r1, [r4, #32]
 8016906:	2301      	movs	r3, #1
 8016908:	4628      	mov	r0, r5
 801690a:	47b0      	blx	r6
 801690c:	1c41      	adds	r1, r0, #1
 801690e:	d1c7      	bne.n	80168a0 <__sflush_r+0x34>
 8016910:	682b      	ldr	r3, [r5, #0]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d0c4      	beq.n	80168a0 <__sflush_r+0x34>
 8016916:	2b1d      	cmp	r3, #29
 8016918:	d001      	beq.n	801691e <__sflush_r+0xb2>
 801691a:	2b16      	cmp	r3, #22
 801691c:	d101      	bne.n	8016922 <__sflush_r+0xb6>
 801691e:	602f      	str	r7, [r5, #0]
 8016920:	e7b1      	b.n	8016886 <__sflush_r+0x1a>
 8016922:	89a3      	ldrh	r3, [r4, #12]
 8016924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016928:	81a3      	strh	r3, [r4, #12]
 801692a:	e7ad      	b.n	8016888 <__sflush_r+0x1c>
 801692c:	690f      	ldr	r7, [r1, #16]
 801692e:	2f00      	cmp	r7, #0
 8016930:	d0a9      	beq.n	8016886 <__sflush_r+0x1a>
 8016932:	0793      	lsls	r3, r2, #30
 8016934:	680e      	ldr	r6, [r1, #0]
 8016936:	bf08      	it	eq
 8016938:	694b      	ldreq	r3, [r1, #20]
 801693a:	600f      	str	r7, [r1, #0]
 801693c:	bf18      	it	ne
 801693e:	2300      	movne	r3, #0
 8016940:	eba6 0807 	sub.w	r8, r6, r7
 8016944:	608b      	str	r3, [r1, #8]
 8016946:	f1b8 0f00 	cmp.w	r8, #0
 801694a:	dd9c      	ble.n	8016886 <__sflush_r+0x1a>
 801694c:	6a21      	ldr	r1, [r4, #32]
 801694e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016950:	4643      	mov	r3, r8
 8016952:	463a      	mov	r2, r7
 8016954:	4628      	mov	r0, r5
 8016956:	47b0      	blx	r6
 8016958:	2800      	cmp	r0, #0
 801695a:	dc06      	bgt.n	801696a <__sflush_r+0xfe>
 801695c:	89a3      	ldrh	r3, [r4, #12]
 801695e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016962:	81a3      	strh	r3, [r4, #12]
 8016964:	f04f 30ff 	mov.w	r0, #4294967295
 8016968:	e78e      	b.n	8016888 <__sflush_r+0x1c>
 801696a:	4407      	add	r7, r0
 801696c:	eba8 0800 	sub.w	r8, r8, r0
 8016970:	e7e9      	b.n	8016946 <__sflush_r+0xda>
 8016972:	bf00      	nop
 8016974:	20400001 	.word	0x20400001

08016978 <_fflush_r>:
 8016978:	b538      	push	{r3, r4, r5, lr}
 801697a:	690b      	ldr	r3, [r1, #16]
 801697c:	4605      	mov	r5, r0
 801697e:	460c      	mov	r4, r1
 8016980:	b913      	cbnz	r3, 8016988 <_fflush_r+0x10>
 8016982:	2500      	movs	r5, #0
 8016984:	4628      	mov	r0, r5
 8016986:	bd38      	pop	{r3, r4, r5, pc}
 8016988:	b118      	cbz	r0, 8016992 <_fflush_r+0x1a>
 801698a:	6983      	ldr	r3, [r0, #24]
 801698c:	b90b      	cbnz	r3, 8016992 <_fflush_r+0x1a>
 801698e:	f000 f887 	bl	8016aa0 <__sinit>
 8016992:	4b14      	ldr	r3, [pc, #80]	; (80169e4 <_fflush_r+0x6c>)
 8016994:	429c      	cmp	r4, r3
 8016996:	d11b      	bne.n	80169d0 <_fflush_r+0x58>
 8016998:	686c      	ldr	r4, [r5, #4]
 801699a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d0ef      	beq.n	8016982 <_fflush_r+0xa>
 80169a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80169a4:	07d0      	lsls	r0, r2, #31
 80169a6:	d404      	bmi.n	80169b2 <_fflush_r+0x3a>
 80169a8:	0599      	lsls	r1, r3, #22
 80169aa:	d402      	bmi.n	80169b2 <_fflush_r+0x3a>
 80169ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80169ae:	f000 f915 	bl	8016bdc <__retarget_lock_acquire_recursive>
 80169b2:	4628      	mov	r0, r5
 80169b4:	4621      	mov	r1, r4
 80169b6:	f7ff ff59 	bl	801686c <__sflush_r>
 80169ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80169bc:	07da      	lsls	r2, r3, #31
 80169be:	4605      	mov	r5, r0
 80169c0:	d4e0      	bmi.n	8016984 <_fflush_r+0xc>
 80169c2:	89a3      	ldrh	r3, [r4, #12]
 80169c4:	059b      	lsls	r3, r3, #22
 80169c6:	d4dd      	bmi.n	8016984 <_fflush_r+0xc>
 80169c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80169ca:	f000 f908 	bl	8016bde <__retarget_lock_release_recursive>
 80169ce:	e7d9      	b.n	8016984 <_fflush_r+0xc>
 80169d0:	4b05      	ldr	r3, [pc, #20]	; (80169e8 <_fflush_r+0x70>)
 80169d2:	429c      	cmp	r4, r3
 80169d4:	d101      	bne.n	80169da <_fflush_r+0x62>
 80169d6:	68ac      	ldr	r4, [r5, #8]
 80169d8:	e7df      	b.n	801699a <_fflush_r+0x22>
 80169da:	4b04      	ldr	r3, [pc, #16]	; (80169ec <_fflush_r+0x74>)
 80169dc:	429c      	cmp	r4, r3
 80169de:	bf08      	it	eq
 80169e0:	68ec      	ldreq	r4, [r5, #12]
 80169e2:	e7da      	b.n	801699a <_fflush_r+0x22>
 80169e4:	0802b050 	.word	0x0802b050
 80169e8:	0802b070 	.word	0x0802b070
 80169ec:	0802b030 	.word	0x0802b030

080169f0 <std>:
 80169f0:	2300      	movs	r3, #0
 80169f2:	b510      	push	{r4, lr}
 80169f4:	4604      	mov	r4, r0
 80169f6:	e9c0 3300 	strd	r3, r3, [r0]
 80169fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80169fe:	6083      	str	r3, [r0, #8]
 8016a00:	8181      	strh	r1, [r0, #12]
 8016a02:	6643      	str	r3, [r0, #100]	; 0x64
 8016a04:	81c2      	strh	r2, [r0, #14]
 8016a06:	6183      	str	r3, [r0, #24]
 8016a08:	4619      	mov	r1, r3
 8016a0a:	2208      	movs	r2, #8
 8016a0c:	305c      	adds	r0, #92	; 0x5c
 8016a0e:	f7fb fdaf 	bl	8012570 <memset>
 8016a12:	4b05      	ldr	r3, [pc, #20]	; (8016a28 <std+0x38>)
 8016a14:	6263      	str	r3, [r4, #36]	; 0x24
 8016a16:	4b05      	ldr	r3, [pc, #20]	; (8016a2c <std+0x3c>)
 8016a18:	62a3      	str	r3, [r4, #40]	; 0x28
 8016a1a:	4b05      	ldr	r3, [pc, #20]	; (8016a30 <std+0x40>)
 8016a1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016a1e:	4b05      	ldr	r3, [pc, #20]	; (8016a34 <std+0x44>)
 8016a20:	6224      	str	r4, [r4, #32]
 8016a22:	6323      	str	r3, [r4, #48]	; 0x30
 8016a24:	bd10      	pop	{r4, pc}
 8016a26:	bf00      	nop
 8016a28:	08016de1 	.word	0x08016de1
 8016a2c:	08016e03 	.word	0x08016e03
 8016a30:	08016e3b 	.word	0x08016e3b
 8016a34:	08016e5f 	.word	0x08016e5f

08016a38 <_cleanup_r>:
 8016a38:	4901      	ldr	r1, [pc, #4]	; (8016a40 <_cleanup_r+0x8>)
 8016a3a:	f000 b8af 	b.w	8016b9c <_fwalk_reent>
 8016a3e:	bf00      	nop
 8016a40:	08016979 	.word	0x08016979

08016a44 <__sfmoreglue>:
 8016a44:	b570      	push	{r4, r5, r6, lr}
 8016a46:	2268      	movs	r2, #104	; 0x68
 8016a48:	1e4d      	subs	r5, r1, #1
 8016a4a:	4355      	muls	r5, r2
 8016a4c:	460e      	mov	r6, r1
 8016a4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016a52:	f7ff fadd 	bl	8016010 <_malloc_r>
 8016a56:	4604      	mov	r4, r0
 8016a58:	b140      	cbz	r0, 8016a6c <__sfmoreglue+0x28>
 8016a5a:	2100      	movs	r1, #0
 8016a5c:	e9c0 1600 	strd	r1, r6, [r0]
 8016a60:	300c      	adds	r0, #12
 8016a62:	60a0      	str	r0, [r4, #8]
 8016a64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016a68:	f7fb fd82 	bl	8012570 <memset>
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	bd70      	pop	{r4, r5, r6, pc}

08016a70 <__sfp_lock_acquire>:
 8016a70:	4801      	ldr	r0, [pc, #4]	; (8016a78 <__sfp_lock_acquire+0x8>)
 8016a72:	f000 b8b3 	b.w	8016bdc <__retarget_lock_acquire_recursive>
 8016a76:	bf00      	nop
 8016a78:	20000d85 	.word	0x20000d85

08016a7c <__sfp_lock_release>:
 8016a7c:	4801      	ldr	r0, [pc, #4]	; (8016a84 <__sfp_lock_release+0x8>)
 8016a7e:	f000 b8ae 	b.w	8016bde <__retarget_lock_release_recursive>
 8016a82:	bf00      	nop
 8016a84:	20000d85 	.word	0x20000d85

08016a88 <__sinit_lock_acquire>:
 8016a88:	4801      	ldr	r0, [pc, #4]	; (8016a90 <__sinit_lock_acquire+0x8>)
 8016a8a:	f000 b8a7 	b.w	8016bdc <__retarget_lock_acquire_recursive>
 8016a8e:	bf00      	nop
 8016a90:	20000d86 	.word	0x20000d86

08016a94 <__sinit_lock_release>:
 8016a94:	4801      	ldr	r0, [pc, #4]	; (8016a9c <__sinit_lock_release+0x8>)
 8016a96:	f000 b8a2 	b.w	8016bde <__retarget_lock_release_recursive>
 8016a9a:	bf00      	nop
 8016a9c:	20000d86 	.word	0x20000d86

08016aa0 <__sinit>:
 8016aa0:	b510      	push	{r4, lr}
 8016aa2:	4604      	mov	r4, r0
 8016aa4:	f7ff fff0 	bl	8016a88 <__sinit_lock_acquire>
 8016aa8:	69a3      	ldr	r3, [r4, #24]
 8016aaa:	b11b      	cbz	r3, 8016ab4 <__sinit+0x14>
 8016aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ab0:	f7ff bff0 	b.w	8016a94 <__sinit_lock_release>
 8016ab4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016ab8:	6523      	str	r3, [r4, #80]	; 0x50
 8016aba:	4b13      	ldr	r3, [pc, #76]	; (8016b08 <__sinit+0x68>)
 8016abc:	4a13      	ldr	r2, [pc, #76]	; (8016b0c <__sinit+0x6c>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	62a2      	str	r2, [r4, #40]	; 0x28
 8016ac2:	42a3      	cmp	r3, r4
 8016ac4:	bf04      	itt	eq
 8016ac6:	2301      	moveq	r3, #1
 8016ac8:	61a3      	streq	r3, [r4, #24]
 8016aca:	4620      	mov	r0, r4
 8016acc:	f000 f820 	bl	8016b10 <__sfp>
 8016ad0:	6060      	str	r0, [r4, #4]
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	f000 f81c 	bl	8016b10 <__sfp>
 8016ad8:	60a0      	str	r0, [r4, #8]
 8016ada:	4620      	mov	r0, r4
 8016adc:	f000 f818 	bl	8016b10 <__sfp>
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	60e0      	str	r0, [r4, #12]
 8016ae4:	2104      	movs	r1, #4
 8016ae6:	6860      	ldr	r0, [r4, #4]
 8016ae8:	f7ff ff82 	bl	80169f0 <std>
 8016aec:	68a0      	ldr	r0, [r4, #8]
 8016aee:	2201      	movs	r2, #1
 8016af0:	2109      	movs	r1, #9
 8016af2:	f7ff ff7d 	bl	80169f0 <std>
 8016af6:	68e0      	ldr	r0, [r4, #12]
 8016af8:	2202      	movs	r2, #2
 8016afa:	2112      	movs	r1, #18
 8016afc:	f7ff ff78 	bl	80169f0 <std>
 8016b00:	2301      	movs	r3, #1
 8016b02:	61a3      	str	r3, [r4, #24]
 8016b04:	e7d2      	b.n	8016aac <__sinit+0xc>
 8016b06:	bf00      	nop
 8016b08:	0802ab90 	.word	0x0802ab90
 8016b0c:	08016a39 	.word	0x08016a39

08016b10 <__sfp>:
 8016b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b12:	4607      	mov	r7, r0
 8016b14:	f7ff ffac 	bl	8016a70 <__sfp_lock_acquire>
 8016b18:	4b1e      	ldr	r3, [pc, #120]	; (8016b94 <__sfp+0x84>)
 8016b1a:	681e      	ldr	r6, [r3, #0]
 8016b1c:	69b3      	ldr	r3, [r6, #24]
 8016b1e:	b913      	cbnz	r3, 8016b26 <__sfp+0x16>
 8016b20:	4630      	mov	r0, r6
 8016b22:	f7ff ffbd 	bl	8016aa0 <__sinit>
 8016b26:	3648      	adds	r6, #72	; 0x48
 8016b28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016b2c:	3b01      	subs	r3, #1
 8016b2e:	d503      	bpl.n	8016b38 <__sfp+0x28>
 8016b30:	6833      	ldr	r3, [r6, #0]
 8016b32:	b30b      	cbz	r3, 8016b78 <__sfp+0x68>
 8016b34:	6836      	ldr	r6, [r6, #0]
 8016b36:	e7f7      	b.n	8016b28 <__sfp+0x18>
 8016b38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016b3c:	b9d5      	cbnz	r5, 8016b74 <__sfp+0x64>
 8016b3e:	4b16      	ldr	r3, [pc, #88]	; (8016b98 <__sfp+0x88>)
 8016b40:	60e3      	str	r3, [r4, #12]
 8016b42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016b46:	6665      	str	r5, [r4, #100]	; 0x64
 8016b48:	f000 f847 	bl	8016bda <__retarget_lock_init_recursive>
 8016b4c:	f7ff ff96 	bl	8016a7c <__sfp_lock_release>
 8016b50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016b54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016b58:	6025      	str	r5, [r4, #0]
 8016b5a:	61a5      	str	r5, [r4, #24]
 8016b5c:	2208      	movs	r2, #8
 8016b5e:	4629      	mov	r1, r5
 8016b60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016b64:	f7fb fd04 	bl	8012570 <memset>
 8016b68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016b6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016b70:	4620      	mov	r0, r4
 8016b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b74:	3468      	adds	r4, #104	; 0x68
 8016b76:	e7d9      	b.n	8016b2c <__sfp+0x1c>
 8016b78:	2104      	movs	r1, #4
 8016b7a:	4638      	mov	r0, r7
 8016b7c:	f7ff ff62 	bl	8016a44 <__sfmoreglue>
 8016b80:	4604      	mov	r4, r0
 8016b82:	6030      	str	r0, [r6, #0]
 8016b84:	2800      	cmp	r0, #0
 8016b86:	d1d5      	bne.n	8016b34 <__sfp+0x24>
 8016b88:	f7ff ff78 	bl	8016a7c <__sfp_lock_release>
 8016b8c:	230c      	movs	r3, #12
 8016b8e:	603b      	str	r3, [r7, #0]
 8016b90:	e7ee      	b.n	8016b70 <__sfp+0x60>
 8016b92:	bf00      	nop
 8016b94:	0802ab90 	.word	0x0802ab90
 8016b98:	ffff0001 	.word	0xffff0001

08016b9c <_fwalk_reent>:
 8016b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ba0:	4606      	mov	r6, r0
 8016ba2:	4688      	mov	r8, r1
 8016ba4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016ba8:	2700      	movs	r7, #0
 8016baa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016bae:	f1b9 0901 	subs.w	r9, r9, #1
 8016bb2:	d505      	bpl.n	8016bc0 <_fwalk_reent+0x24>
 8016bb4:	6824      	ldr	r4, [r4, #0]
 8016bb6:	2c00      	cmp	r4, #0
 8016bb8:	d1f7      	bne.n	8016baa <_fwalk_reent+0xe>
 8016bba:	4638      	mov	r0, r7
 8016bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bc0:	89ab      	ldrh	r3, [r5, #12]
 8016bc2:	2b01      	cmp	r3, #1
 8016bc4:	d907      	bls.n	8016bd6 <_fwalk_reent+0x3a>
 8016bc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016bca:	3301      	adds	r3, #1
 8016bcc:	d003      	beq.n	8016bd6 <_fwalk_reent+0x3a>
 8016bce:	4629      	mov	r1, r5
 8016bd0:	4630      	mov	r0, r6
 8016bd2:	47c0      	blx	r8
 8016bd4:	4307      	orrs	r7, r0
 8016bd6:	3568      	adds	r5, #104	; 0x68
 8016bd8:	e7e9      	b.n	8016bae <_fwalk_reent+0x12>

08016bda <__retarget_lock_init_recursive>:
 8016bda:	4770      	bx	lr

08016bdc <__retarget_lock_acquire_recursive>:
 8016bdc:	4770      	bx	lr

08016bde <__retarget_lock_release_recursive>:
 8016bde:	4770      	bx	lr

08016be0 <__swhatbuf_r>:
 8016be0:	b570      	push	{r4, r5, r6, lr}
 8016be2:	460e      	mov	r6, r1
 8016be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016be8:	2900      	cmp	r1, #0
 8016bea:	b096      	sub	sp, #88	; 0x58
 8016bec:	4614      	mov	r4, r2
 8016bee:	461d      	mov	r5, r3
 8016bf0:	da08      	bge.n	8016c04 <__swhatbuf_r+0x24>
 8016bf2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	602a      	str	r2, [r5, #0]
 8016bfa:	061a      	lsls	r2, r3, #24
 8016bfc:	d410      	bmi.n	8016c20 <__swhatbuf_r+0x40>
 8016bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016c02:	e00e      	b.n	8016c22 <__swhatbuf_r+0x42>
 8016c04:	466a      	mov	r2, sp
 8016c06:	f000 f951 	bl	8016eac <_fstat_r>
 8016c0a:	2800      	cmp	r0, #0
 8016c0c:	dbf1      	blt.n	8016bf2 <__swhatbuf_r+0x12>
 8016c0e:	9a01      	ldr	r2, [sp, #4]
 8016c10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016c14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016c18:	425a      	negs	r2, r3
 8016c1a:	415a      	adcs	r2, r3
 8016c1c:	602a      	str	r2, [r5, #0]
 8016c1e:	e7ee      	b.n	8016bfe <__swhatbuf_r+0x1e>
 8016c20:	2340      	movs	r3, #64	; 0x40
 8016c22:	2000      	movs	r0, #0
 8016c24:	6023      	str	r3, [r4, #0]
 8016c26:	b016      	add	sp, #88	; 0x58
 8016c28:	bd70      	pop	{r4, r5, r6, pc}
	...

08016c2c <__smakebuf_r>:
 8016c2c:	898b      	ldrh	r3, [r1, #12]
 8016c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c30:	079d      	lsls	r5, r3, #30
 8016c32:	4606      	mov	r6, r0
 8016c34:	460c      	mov	r4, r1
 8016c36:	d507      	bpl.n	8016c48 <__smakebuf_r+0x1c>
 8016c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016c3c:	6023      	str	r3, [r4, #0]
 8016c3e:	6123      	str	r3, [r4, #16]
 8016c40:	2301      	movs	r3, #1
 8016c42:	6163      	str	r3, [r4, #20]
 8016c44:	b002      	add	sp, #8
 8016c46:	bd70      	pop	{r4, r5, r6, pc}
 8016c48:	ab01      	add	r3, sp, #4
 8016c4a:	466a      	mov	r2, sp
 8016c4c:	f7ff ffc8 	bl	8016be0 <__swhatbuf_r>
 8016c50:	9900      	ldr	r1, [sp, #0]
 8016c52:	4605      	mov	r5, r0
 8016c54:	4630      	mov	r0, r6
 8016c56:	f7ff f9db 	bl	8016010 <_malloc_r>
 8016c5a:	b948      	cbnz	r0, 8016c70 <__smakebuf_r+0x44>
 8016c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c60:	059a      	lsls	r2, r3, #22
 8016c62:	d4ef      	bmi.n	8016c44 <__smakebuf_r+0x18>
 8016c64:	f023 0303 	bic.w	r3, r3, #3
 8016c68:	f043 0302 	orr.w	r3, r3, #2
 8016c6c:	81a3      	strh	r3, [r4, #12]
 8016c6e:	e7e3      	b.n	8016c38 <__smakebuf_r+0xc>
 8016c70:	4b0d      	ldr	r3, [pc, #52]	; (8016ca8 <__smakebuf_r+0x7c>)
 8016c72:	62b3      	str	r3, [r6, #40]	; 0x28
 8016c74:	89a3      	ldrh	r3, [r4, #12]
 8016c76:	6020      	str	r0, [r4, #0]
 8016c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c7c:	81a3      	strh	r3, [r4, #12]
 8016c7e:	9b00      	ldr	r3, [sp, #0]
 8016c80:	6163      	str	r3, [r4, #20]
 8016c82:	9b01      	ldr	r3, [sp, #4]
 8016c84:	6120      	str	r0, [r4, #16]
 8016c86:	b15b      	cbz	r3, 8016ca0 <__smakebuf_r+0x74>
 8016c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c8c:	4630      	mov	r0, r6
 8016c8e:	f000 f91f 	bl	8016ed0 <_isatty_r>
 8016c92:	b128      	cbz	r0, 8016ca0 <__smakebuf_r+0x74>
 8016c94:	89a3      	ldrh	r3, [r4, #12]
 8016c96:	f023 0303 	bic.w	r3, r3, #3
 8016c9a:	f043 0301 	orr.w	r3, r3, #1
 8016c9e:	81a3      	strh	r3, [r4, #12]
 8016ca0:	89a0      	ldrh	r0, [r4, #12]
 8016ca2:	4305      	orrs	r5, r0
 8016ca4:	81a5      	strh	r5, [r4, #12]
 8016ca6:	e7cd      	b.n	8016c44 <__smakebuf_r+0x18>
 8016ca8:	08016a39 	.word	0x08016a39

08016cac <memmove>:
 8016cac:	4288      	cmp	r0, r1
 8016cae:	b510      	push	{r4, lr}
 8016cb0:	eb01 0402 	add.w	r4, r1, r2
 8016cb4:	d902      	bls.n	8016cbc <memmove+0x10>
 8016cb6:	4284      	cmp	r4, r0
 8016cb8:	4623      	mov	r3, r4
 8016cba:	d807      	bhi.n	8016ccc <memmove+0x20>
 8016cbc:	1e43      	subs	r3, r0, #1
 8016cbe:	42a1      	cmp	r1, r4
 8016cc0:	d008      	beq.n	8016cd4 <memmove+0x28>
 8016cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016cca:	e7f8      	b.n	8016cbe <memmove+0x12>
 8016ccc:	4402      	add	r2, r0
 8016cce:	4601      	mov	r1, r0
 8016cd0:	428a      	cmp	r2, r1
 8016cd2:	d100      	bne.n	8016cd6 <memmove+0x2a>
 8016cd4:	bd10      	pop	{r4, pc}
 8016cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016cde:	e7f7      	b.n	8016cd0 <memmove+0x24>

08016ce0 <__malloc_lock>:
 8016ce0:	4801      	ldr	r0, [pc, #4]	; (8016ce8 <__malloc_lock+0x8>)
 8016ce2:	f7ff bf7b 	b.w	8016bdc <__retarget_lock_acquire_recursive>
 8016ce6:	bf00      	nop
 8016ce8:	20000d84 	.word	0x20000d84

08016cec <__malloc_unlock>:
 8016cec:	4801      	ldr	r0, [pc, #4]	; (8016cf4 <__malloc_unlock+0x8>)
 8016cee:	f7ff bf76 	b.w	8016bde <__retarget_lock_release_recursive>
 8016cf2:	bf00      	nop
 8016cf4:	20000d84 	.word	0x20000d84

08016cf8 <_realloc_r>:
 8016cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cfc:	4680      	mov	r8, r0
 8016cfe:	4614      	mov	r4, r2
 8016d00:	460e      	mov	r6, r1
 8016d02:	b921      	cbnz	r1, 8016d0e <_realloc_r+0x16>
 8016d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d08:	4611      	mov	r1, r2
 8016d0a:	f7ff b981 	b.w	8016010 <_malloc_r>
 8016d0e:	b92a      	cbnz	r2, 8016d1c <_realloc_r+0x24>
 8016d10:	f7ff f912 	bl	8015f38 <_free_r>
 8016d14:	4625      	mov	r5, r4
 8016d16:	4628      	mov	r0, r5
 8016d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d1c:	f000 f8fa 	bl	8016f14 <_malloc_usable_size_r>
 8016d20:	4284      	cmp	r4, r0
 8016d22:	4607      	mov	r7, r0
 8016d24:	d802      	bhi.n	8016d2c <_realloc_r+0x34>
 8016d26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016d2a:	d812      	bhi.n	8016d52 <_realloc_r+0x5a>
 8016d2c:	4621      	mov	r1, r4
 8016d2e:	4640      	mov	r0, r8
 8016d30:	f7ff f96e 	bl	8016010 <_malloc_r>
 8016d34:	4605      	mov	r5, r0
 8016d36:	2800      	cmp	r0, #0
 8016d38:	d0ed      	beq.n	8016d16 <_realloc_r+0x1e>
 8016d3a:	42bc      	cmp	r4, r7
 8016d3c:	4622      	mov	r2, r4
 8016d3e:	4631      	mov	r1, r6
 8016d40:	bf28      	it	cs
 8016d42:	463a      	movcs	r2, r7
 8016d44:	f7fe fc12 	bl	801556c <memcpy>
 8016d48:	4631      	mov	r1, r6
 8016d4a:	4640      	mov	r0, r8
 8016d4c:	f7ff f8f4 	bl	8015f38 <_free_r>
 8016d50:	e7e1      	b.n	8016d16 <_realloc_r+0x1e>
 8016d52:	4635      	mov	r5, r6
 8016d54:	e7df      	b.n	8016d16 <_realloc_r+0x1e>

08016d56 <_raise_r>:
 8016d56:	291f      	cmp	r1, #31
 8016d58:	b538      	push	{r3, r4, r5, lr}
 8016d5a:	4604      	mov	r4, r0
 8016d5c:	460d      	mov	r5, r1
 8016d5e:	d904      	bls.n	8016d6a <_raise_r+0x14>
 8016d60:	2316      	movs	r3, #22
 8016d62:	6003      	str	r3, [r0, #0]
 8016d64:	f04f 30ff 	mov.w	r0, #4294967295
 8016d68:	bd38      	pop	{r3, r4, r5, pc}
 8016d6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016d6c:	b112      	cbz	r2, 8016d74 <_raise_r+0x1e>
 8016d6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016d72:	b94b      	cbnz	r3, 8016d88 <_raise_r+0x32>
 8016d74:	4620      	mov	r0, r4
 8016d76:	f000 f831 	bl	8016ddc <_getpid_r>
 8016d7a:	462a      	mov	r2, r5
 8016d7c:	4601      	mov	r1, r0
 8016d7e:	4620      	mov	r0, r4
 8016d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d84:	f000 b818 	b.w	8016db8 <_kill_r>
 8016d88:	2b01      	cmp	r3, #1
 8016d8a:	d00a      	beq.n	8016da2 <_raise_r+0x4c>
 8016d8c:	1c59      	adds	r1, r3, #1
 8016d8e:	d103      	bne.n	8016d98 <_raise_r+0x42>
 8016d90:	2316      	movs	r3, #22
 8016d92:	6003      	str	r3, [r0, #0]
 8016d94:	2001      	movs	r0, #1
 8016d96:	e7e7      	b.n	8016d68 <_raise_r+0x12>
 8016d98:	2400      	movs	r4, #0
 8016d9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016d9e:	4628      	mov	r0, r5
 8016da0:	4798      	blx	r3
 8016da2:	2000      	movs	r0, #0
 8016da4:	e7e0      	b.n	8016d68 <_raise_r+0x12>
	...

08016da8 <raise>:
 8016da8:	4b02      	ldr	r3, [pc, #8]	; (8016db4 <raise+0xc>)
 8016daa:	4601      	mov	r1, r0
 8016dac:	6818      	ldr	r0, [r3, #0]
 8016dae:	f7ff bfd2 	b.w	8016d56 <_raise_r>
 8016db2:	bf00      	nop
 8016db4:	20000044 	.word	0x20000044

08016db8 <_kill_r>:
 8016db8:	b538      	push	{r3, r4, r5, lr}
 8016dba:	4d07      	ldr	r5, [pc, #28]	; (8016dd8 <_kill_r+0x20>)
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	4604      	mov	r4, r0
 8016dc0:	4608      	mov	r0, r1
 8016dc2:	4611      	mov	r1, r2
 8016dc4:	602b      	str	r3, [r5, #0]
 8016dc6:	f7f3 fe1d 	bl	800aa04 <_kill>
 8016dca:	1c43      	adds	r3, r0, #1
 8016dcc:	d102      	bne.n	8016dd4 <_kill_r+0x1c>
 8016dce:	682b      	ldr	r3, [r5, #0]
 8016dd0:	b103      	cbz	r3, 8016dd4 <_kill_r+0x1c>
 8016dd2:	6023      	str	r3, [r4, #0]
 8016dd4:	bd38      	pop	{r3, r4, r5, pc}
 8016dd6:	bf00      	nop
 8016dd8:	20000d88 	.word	0x20000d88

08016ddc <_getpid_r>:
 8016ddc:	f7f3 be0a 	b.w	800a9f4 <_getpid>

08016de0 <__sread>:
 8016de0:	b510      	push	{r4, lr}
 8016de2:	460c      	mov	r4, r1
 8016de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016de8:	f000 f89c 	bl	8016f24 <_read_r>
 8016dec:	2800      	cmp	r0, #0
 8016dee:	bfab      	itete	ge
 8016df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016df2:	89a3      	ldrhlt	r3, [r4, #12]
 8016df4:	181b      	addge	r3, r3, r0
 8016df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016dfa:	bfac      	ite	ge
 8016dfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8016dfe:	81a3      	strhlt	r3, [r4, #12]
 8016e00:	bd10      	pop	{r4, pc}

08016e02 <__swrite>:
 8016e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e06:	461f      	mov	r7, r3
 8016e08:	898b      	ldrh	r3, [r1, #12]
 8016e0a:	05db      	lsls	r3, r3, #23
 8016e0c:	4605      	mov	r5, r0
 8016e0e:	460c      	mov	r4, r1
 8016e10:	4616      	mov	r6, r2
 8016e12:	d505      	bpl.n	8016e20 <__swrite+0x1e>
 8016e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e18:	2302      	movs	r3, #2
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	f000 f868 	bl	8016ef0 <_lseek_r>
 8016e20:	89a3      	ldrh	r3, [r4, #12]
 8016e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e2a:	81a3      	strh	r3, [r4, #12]
 8016e2c:	4632      	mov	r2, r6
 8016e2e:	463b      	mov	r3, r7
 8016e30:	4628      	mov	r0, r5
 8016e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e36:	f000 b817 	b.w	8016e68 <_write_r>

08016e3a <__sseek>:
 8016e3a:	b510      	push	{r4, lr}
 8016e3c:	460c      	mov	r4, r1
 8016e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e42:	f000 f855 	bl	8016ef0 <_lseek_r>
 8016e46:	1c43      	adds	r3, r0, #1
 8016e48:	89a3      	ldrh	r3, [r4, #12]
 8016e4a:	bf15      	itete	ne
 8016e4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016e56:	81a3      	strheq	r3, [r4, #12]
 8016e58:	bf18      	it	ne
 8016e5a:	81a3      	strhne	r3, [r4, #12]
 8016e5c:	bd10      	pop	{r4, pc}

08016e5e <__sclose>:
 8016e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e62:	f000 b813 	b.w	8016e8c <_close_r>
	...

08016e68 <_write_r>:
 8016e68:	b538      	push	{r3, r4, r5, lr}
 8016e6a:	4d07      	ldr	r5, [pc, #28]	; (8016e88 <_write_r+0x20>)
 8016e6c:	4604      	mov	r4, r0
 8016e6e:	4608      	mov	r0, r1
 8016e70:	4611      	mov	r1, r2
 8016e72:	2200      	movs	r2, #0
 8016e74:	602a      	str	r2, [r5, #0]
 8016e76:	461a      	mov	r2, r3
 8016e78:	f7f3 fdfb 	bl	800aa72 <_write>
 8016e7c:	1c43      	adds	r3, r0, #1
 8016e7e:	d102      	bne.n	8016e86 <_write_r+0x1e>
 8016e80:	682b      	ldr	r3, [r5, #0]
 8016e82:	b103      	cbz	r3, 8016e86 <_write_r+0x1e>
 8016e84:	6023      	str	r3, [r4, #0]
 8016e86:	bd38      	pop	{r3, r4, r5, pc}
 8016e88:	20000d88 	.word	0x20000d88

08016e8c <_close_r>:
 8016e8c:	b538      	push	{r3, r4, r5, lr}
 8016e8e:	4d06      	ldr	r5, [pc, #24]	; (8016ea8 <_close_r+0x1c>)
 8016e90:	2300      	movs	r3, #0
 8016e92:	4604      	mov	r4, r0
 8016e94:	4608      	mov	r0, r1
 8016e96:	602b      	str	r3, [r5, #0]
 8016e98:	f7f3 fe07 	bl	800aaaa <_close>
 8016e9c:	1c43      	adds	r3, r0, #1
 8016e9e:	d102      	bne.n	8016ea6 <_close_r+0x1a>
 8016ea0:	682b      	ldr	r3, [r5, #0]
 8016ea2:	b103      	cbz	r3, 8016ea6 <_close_r+0x1a>
 8016ea4:	6023      	str	r3, [r4, #0]
 8016ea6:	bd38      	pop	{r3, r4, r5, pc}
 8016ea8:	20000d88 	.word	0x20000d88

08016eac <_fstat_r>:
 8016eac:	b538      	push	{r3, r4, r5, lr}
 8016eae:	4d07      	ldr	r5, [pc, #28]	; (8016ecc <_fstat_r+0x20>)
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	4604      	mov	r4, r0
 8016eb4:	4608      	mov	r0, r1
 8016eb6:	4611      	mov	r1, r2
 8016eb8:	602b      	str	r3, [r5, #0]
 8016eba:	f7f3 fe02 	bl	800aac2 <_fstat>
 8016ebe:	1c43      	adds	r3, r0, #1
 8016ec0:	d102      	bne.n	8016ec8 <_fstat_r+0x1c>
 8016ec2:	682b      	ldr	r3, [r5, #0]
 8016ec4:	b103      	cbz	r3, 8016ec8 <_fstat_r+0x1c>
 8016ec6:	6023      	str	r3, [r4, #0]
 8016ec8:	bd38      	pop	{r3, r4, r5, pc}
 8016eca:	bf00      	nop
 8016ecc:	20000d88 	.word	0x20000d88

08016ed0 <_isatty_r>:
 8016ed0:	b538      	push	{r3, r4, r5, lr}
 8016ed2:	4d06      	ldr	r5, [pc, #24]	; (8016eec <_isatty_r+0x1c>)
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	4604      	mov	r4, r0
 8016ed8:	4608      	mov	r0, r1
 8016eda:	602b      	str	r3, [r5, #0]
 8016edc:	f7f3 fe01 	bl	800aae2 <_isatty>
 8016ee0:	1c43      	adds	r3, r0, #1
 8016ee2:	d102      	bne.n	8016eea <_isatty_r+0x1a>
 8016ee4:	682b      	ldr	r3, [r5, #0]
 8016ee6:	b103      	cbz	r3, 8016eea <_isatty_r+0x1a>
 8016ee8:	6023      	str	r3, [r4, #0]
 8016eea:	bd38      	pop	{r3, r4, r5, pc}
 8016eec:	20000d88 	.word	0x20000d88

08016ef0 <_lseek_r>:
 8016ef0:	b538      	push	{r3, r4, r5, lr}
 8016ef2:	4d07      	ldr	r5, [pc, #28]	; (8016f10 <_lseek_r+0x20>)
 8016ef4:	4604      	mov	r4, r0
 8016ef6:	4608      	mov	r0, r1
 8016ef8:	4611      	mov	r1, r2
 8016efa:	2200      	movs	r2, #0
 8016efc:	602a      	str	r2, [r5, #0]
 8016efe:	461a      	mov	r2, r3
 8016f00:	f7f3 fdfa 	bl	800aaf8 <_lseek>
 8016f04:	1c43      	adds	r3, r0, #1
 8016f06:	d102      	bne.n	8016f0e <_lseek_r+0x1e>
 8016f08:	682b      	ldr	r3, [r5, #0]
 8016f0a:	b103      	cbz	r3, 8016f0e <_lseek_r+0x1e>
 8016f0c:	6023      	str	r3, [r4, #0]
 8016f0e:	bd38      	pop	{r3, r4, r5, pc}
 8016f10:	20000d88 	.word	0x20000d88

08016f14 <_malloc_usable_size_r>:
 8016f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f18:	1f18      	subs	r0, r3, #4
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	bfbc      	itt	lt
 8016f1e:	580b      	ldrlt	r3, [r1, r0]
 8016f20:	18c0      	addlt	r0, r0, r3
 8016f22:	4770      	bx	lr

08016f24 <_read_r>:
 8016f24:	b538      	push	{r3, r4, r5, lr}
 8016f26:	4d07      	ldr	r5, [pc, #28]	; (8016f44 <_read_r+0x20>)
 8016f28:	4604      	mov	r4, r0
 8016f2a:	4608      	mov	r0, r1
 8016f2c:	4611      	mov	r1, r2
 8016f2e:	2200      	movs	r2, #0
 8016f30:	602a      	str	r2, [r5, #0]
 8016f32:	461a      	mov	r2, r3
 8016f34:	f7f3 fd80 	bl	800aa38 <_read>
 8016f38:	1c43      	adds	r3, r0, #1
 8016f3a:	d102      	bne.n	8016f42 <_read_r+0x1e>
 8016f3c:	682b      	ldr	r3, [r5, #0]
 8016f3e:	b103      	cbz	r3, 8016f42 <_read_r+0x1e>
 8016f40:	6023      	str	r3, [r4, #0]
 8016f42:	bd38      	pop	{r3, r4, r5, pc}
 8016f44:	20000d88 	.word	0x20000d88

08016f48 <_init>:
 8016f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f4a:	bf00      	nop
 8016f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f4e:	bc08      	pop	{r3}
 8016f50:	469e      	mov	lr, r3
 8016f52:	4770      	bx	lr

08016f54 <_fini>:
 8016f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f56:	bf00      	nop
 8016f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f5a:	bc08      	pop	{r3}
 8016f5c:	469e      	mov	lr, r3
 8016f5e:	4770      	bx	lr
