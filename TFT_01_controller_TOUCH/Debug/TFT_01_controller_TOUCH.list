
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015714  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014058  080158b8  080158b8  000258b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029910  08029910  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08029910  08029910  00039910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029918  08029918  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029918  08029918  00039918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802991c  0802991c  0003991c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08029920  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  20000214  08029b34  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c84  08029b34  00040c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025532  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d9b  00000000  00000000  00065776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  0006a518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a0  00000000  00000000  0006bf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5fc  00000000  00000000  0006d808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026bf0  00000000  00000000  00089e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000996f8  00000000  00000000  000b09f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a0ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081a8  00000000  00000000  0014a140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801589c 	.word	0x0801589c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	0801589c 	.word	0x0801589c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <ESP_SendCurrentTempInside>:

//
// Send info to Blynk Server
//
void ESP_SendCurrentTempInside(float CurrentTemp)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPINS=%f\n", CurrentTemp);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff faa6 	bl	8000578 <__aeabi_f2d>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4905      	ldr	r1, [pc, #20]	; (8001048 <ESP_SendCurrentTempInside+0x2c>)
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <ESP_SendCurrentTempInside+0x30>)
 8001034:	f010 fe1c 	bl	8011c70 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001038:	4904      	ldr	r1, [pc, #16]	; (800104c <ESP_SendCurrentTempInside+0x30>)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <ESP_SendCurrentTempInside+0x34>)
 800103c:	f008 fe24 	bl	8009c88 <UARTDMA_Print>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	080158c4 	.word	0x080158c4
 800104c:	20000300 	.word	0x20000300
 8001050:	200006bc 	.word	0x200006bc

08001054 <ESP_SendCurrentTempOutside>:

void ESP_SendCurrentTempOutside(float CurrentTemp)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "TEMPOUT=%f\n", CurrentTemp);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fa8a 	bl	8000578 <__aeabi_f2d>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4905      	ldr	r1, [pc, #20]	; (8001080 <ESP_SendCurrentTempOutside+0x2c>)
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <ESP_SendCurrentTempOutside+0x30>)
 800106c:	f010 fe00 	bl	8011c70 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 8001070:	4904      	ldr	r1, [pc, #16]	; (8001084 <ESP_SendCurrentTempOutside+0x30>)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <ESP_SendCurrentTempOutside+0x34>)
 8001074:	f008 fe08 	bl	8009c88 <UARTDMA_Print>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	080158d0 	.word	0x080158d0
 8001084:	20000300 	.word	0x20000300
 8001088:	200006bc 	.word	0x200006bc

0800108c <ESP_SendCurrentPressure>:

void ESP_SendCurrentPressure(float CurrentPress)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(Message, "PRES=%f\n", CurrentPress);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fa6e 	bl	8000578 <__aeabi_f2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4905      	ldr	r1, [pc, #20]	; (80010b8 <ESP_SendCurrentPressure+0x2c>)
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <ESP_SendCurrentPressure+0x30>)
 80010a4:	f010 fde4 	bl	8011c70 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 80010a8:	4904      	ldr	r1, [pc, #16]	; (80010bc <ESP_SendCurrentPressure+0x30>)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <ESP_SendCurrentPressure+0x34>)
 80010ac:	f008 fdec 	bl	8009c88 <UARTDMA_Print>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	080158dc 	.word	0x080158dc
 80010bc:	20000300 	.word	0x20000300
 80010c0:	200006bc 	.word	0x200006bc

080010c4 <ESP_SendCurrentWaterLvl>:

void ESP_SendCurrentWaterLvl(uint32_t CurrentWaterLvl)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	sprintf(Message, "WLVL=%ld\n", CurrentWaterLvl);
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4906      	ldr	r1, [pc, #24]	; (80010e8 <ESP_SendCurrentWaterLvl+0x24>)
 80010d0:	4806      	ldr	r0, [pc, #24]	; (80010ec <ESP_SendCurrentWaterLvl+0x28>)
 80010d2:	f010 fdcd 	bl	8011c70 <siprintf>
	UARTDMA_Print(&huartdma1, Message); // Print message
 80010d6:	4905      	ldr	r1, [pc, #20]	; (80010ec <ESP_SendCurrentWaterLvl+0x28>)
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <ESP_SendCurrentWaterLvl+0x2c>)
 80010da:	f008 fdd5 	bl	8009c88 <UARTDMA_Print>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	080158e8 	.word	0x080158e8
 80010ec:	20000300 	.word	0x20000300
 80010f0:	200006bc 	.word	0x200006bc

080010f4 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800110c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1acb      	subs	r3, r1, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	bfb8      	it	lt
 800111a:	425b      	neglt	r3, r3
 800111c:	429a      	cmp	r2, r3
 800111e:	bfcc      	ite	gt
 8001120:	2301      	movgt	r3, #1
 8001122:	2300      	movle	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001128:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00b      	beq.n	8001148 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	623b      	str	r3, [r7, #32]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dd0b      	ble.n	8001168 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	b29a      	uxth	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	b29b      	uxth	r3, r3
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	bfb8      	it	lt
 8001180:	425b      	neglt	r3, r3
 8001182:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001184:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001188:	0fda      	lsrs	r2, r3, #31
 800118a:	4413      	add	r3, r2
 800118c:	105b      	asrs	r3, r3, #1
 800118e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	da02      	bge.n	800119e <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800119c:	e02e      	b.n	80011fc <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 800119e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80011a4:	e02a      	b.n	80011fc <GFX_WriteLine+0x108>
	        if (steep) {
 80011a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d008      	beq.n	80011c0 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	b211      	sxth	r1, r2
 80011b6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 feab 	bl	8001f14 <ILI9341_WritePixel>
 80011be:	e007      	b.n	80011d0 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	b211      	sxth	r1, r2
 80011c8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fea2 	bl	8001f14 <ILI9341_WritePixel>
	        }
	        err -= dy;
 80011d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011d2:	8abb      	ldrh	r3, [r7, #20]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80011da:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da09      	bge.n	80011f6 <GFX_WriteLine+0x102>
	            y_start += ystep;
 80011e2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4413      	add	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80011ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011ee:	8afb      	ldrh	r3, [r7, #22]
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	ddd0      	ble.n	80011a6 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3730      	adds	r7, #48	; 0x30
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af02      	add	r7, sp, #8
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	4613      	mov	r3, r2
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff ff60 	bl	80010f4 <GFX_WriteLine>
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af02      	add	r7, sp, #8
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff ff4a 	bl	80010f4 <GFX_WriteLine>
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af02      	add	r7, sp, #8
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	429a      	cmp	r2, r3
 800127c:	d113      	bne.n	80012a6 <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	dd05      	ble.n	8001292 <GFX_DrawLine+0x2a>
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	8c3b      	ldrh	r3, [r7, #32]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f7ff ffb5 	bl	800120e <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80012a4:	e01f      	b.n	80012e6 <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d113      	bne.n	80012d6 <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	dd05      	ble.n	80012c2 <GFX_DrawLine+0x5a>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	8c3b      	ldrh	r3, [r7, #32]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff ffb4 	bl	800123c <GFX_DrawFastHLine>
}
 80012d4:	e007      	b.n	80012e6 <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80012d6:	8c3b      	ldrh	r3, [r7, #32]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7ff ff07 	bl	80010f4 <GFX_WriteLine>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	4611      	mov	r1, r2
 80012fa:	461a      	mov	r2, r3
 80012fc:	460b      	mov	r3, r1
 80012fe:	80fb      	strh	r3, [r7, #6]
 8001300:	4613      	mov	r3, r2
 8001302:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e008      	b.n	800131c <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 800130a:	88ba      	ldrh	r2, [r7, #4]
 800130c:	8c3b      	ldrh	r3, [r7, #32]
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	6978      	ldr	r0, [r7, #20]
 8001312:	f7ff ff7c 	bl	800120e <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	88fa      	ldrh	r2, [r7, #6]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf0      	blt.n	800130a <GFX_DrawFillRectangle+0x1c>
    }

}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b088      	sub	sp, #32
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	4611      	mov	r1, r2
 800133e:	461a      	mov	r2, r3
 8001340:	460b      	mov	r3, r1
 8001342:	80fb      	strh	r3, [r7, #6]
 8001344:	4613      	mov	r3, r2
 8001346:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	f1c3 0301 	rsb	r3, r3, #1
 800134e:	b29b      	uxth	r3, r3
 8001350:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	461a      	mov	r2, r3
 800135a:	03d2      	lsls	r2, r2, #15
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	b29b      	uxth	r3, r3
 8001362:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800136c:	e0b5      	b.n	80014da <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 800136e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0e      	blt.n	8001394 <GFX_DrawCircleHelper+0x62>
            y--;
 8001376:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800137a:	b29b      	uxth	r3, r3
 800137c:	3b01      	subs	r3, #1
 800137e:	b29b      	uxth	r3, r3
 8001380:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001382:	8b7b      	ldrh	r3, [r7, #26]
 8001384:	3302      	adds	r3, #2
 8001386:	b29b      	uxth	r3, r3
 8001388:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800138a:	8bfa      	ldrh	r2, [r7, #30]
 800138c:	8b7b      	ldrh	r3, [r7, #26]
 800138e:	4413      	add	r3, r2
 8001390:	b29b      	uxth	r3, r3
 8001392:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001394:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001398:	b29b      	uxth	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b29b      	uxth	r3, r3
 800139e:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80013a0:	8bbb      	ldrh	r3, [r7, #28]
 80013a2:	3302      	adds	r3, #2
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80013a8:	8bfa      	ldrh	r2, [r7, #30]
 80013aa:	8bbb      	ldrh	r3, [r7, #28]
 80013ac:	4413      	add	r3, r2
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80013b2:	797b      	ldrb	r3, [r7, #5]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01f      	beq.n	80013fc <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	8b3b      	ldrh	r3, [r7, #24]
 80013c2:	4413      	add	r3, r2
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b218      	sxth	r0, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	8afb      	ldrh	r3, [r7, #22]
 80013ce:	4413      	add	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013d6:	4619      	mov	r1, r3
 80013d8:	f000 fd9c 	bl	8001f14 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	8afb      	ldrh	r3, [r7, #22]
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b218      	sxth	r0, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	8b3b      	ldrh	r3, [r7, #24]
 80013ee:	4413      	add	r3, r2
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013f6:	4619      	mov	r1, r3
 80013f8:	f000 fd8c 	bl	8001f14 <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 80013fc:	797b      	ldrb	r3, [r7, #5]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d01f      	beq.n	8001446 <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	b29a      	uxth	r2, r3
 800140a:	8b3b      	ldrh	r3, [r7, #24]
 800140c:	4413      	add	r3, r2
 800140e:	b29b      	uxth	r3, r3
 8001410:	b218      	sxth	r0, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	b29a      	uxth	r2, r3
 8001416:	8afb      	ldrh	r3, [r7, #22]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b29b      	uxth	r3, r3
 800141c:	b21b      	sxth	r3, r3
 800141e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001420:	4619      	mov	r1, r3
 8001422:	f000 fd77 	bl	8001f14 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	b29a      	uxth	r2, r3
 800142a:	8afb      	ldrh	r3, [r7, #22]
 800142c:	4413      	add	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	b218      	sxth	r0, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	b29a      	uxth	r2, r3
 8001436:	8b3b      	ldrh	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	b29b      	uxth	r3, r3
 800143c:	b21b      	sxth	r3, r3
 800143e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001440:	4619      	mov	r1, r3
 8001442:	f000 fd67 	bl	8001f14 <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d01f      	beq.n	8001490 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	b29a      	uxth	r2, r3
 8001454:	8afb      	ldrh	r3, [r7, #22]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	b29b      	uxth	r3, r3
 800145a:	b218      	sxth	r0, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	b29a      	uxth	r2, r3
 8001460:	8b3b      	ldrh	r3, [r7, #24]
 8001462:	4413      	add	r3, r2
 8001464:	b29b      	uxth	r3, r3
 8001466:	b21b      	sxth	r3, r3
 8001468:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800146a:	4619      	mov	r1, r3
 800146c:	f000 fd52 	bl	8001f14 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	b29a      	uxth	r2, r3
 8001474:	8b3b      	ldrh	r3, [r7, #24]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	b29b      	uxth	r3, r3
 800147a:	b218      	sxth	r0, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	b29a      	uxth	r2, r3
 8001480:	8afb      	ldrh	r3, [r7, #22]
 8001482:	4413      	add	r3, r2
 8001484:	b29b      	uxth	r3, r3
 8001486:	b21b      	sxth	r3, r3
 8001488:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800148a:	4619      	mov	r1, r3
 800148c:	f000 fd42 	bl	8001f14 <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 8001490:	797b      	ldrb	r3, [r7, #5]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d01f      	beq.n	80014da <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	b29a      	uxth	r2, r3
 800149e:	8afb      	ldrh	r3, [r7, #22]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	b218      	sxth	r0, r3
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	8b3b      	ldrh	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014b4:	4619      	mov	r1, r3
 80014b6:	f000 fd2d 	bl	8001f14 <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	8b3b      	ldrh	r3, [r7, #24]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b218      	sxth	r0, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	8afb      	ldrh	r3, [r7, #22]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014d4:	4619      	mov	r1, r3
 80014d6:	f000 fd1d 	bl	8001f14 <ILI9341_WritePixel>
    while (x<y) {
 80014da:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	f6ff af43 	blt.w	800136e <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b088      	sub	sp, #32
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	4611      	mov	r1, r2
 80014fe:	461a      	mov	r2, r3
 8001500:	460b      	mov	r3, r1
 8001502:	80fb      	strh	r3, [r7, #6]
 8001504:	4613      	mov	r3, r2
 8001506:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	f1c3 0301 	rsb	r3, r3, #1
 800150e:	b29b      	uxth	r3, r3
 8001510:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001512:	2301      	movs	r3, #1
 8001514:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	461a      	mov	r2, r3
 800151a:	03d2      	lsls	r2, r2, #15
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	b29b      	uxth	r3, r3
 8001522:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800152c:	e073      	b.n	8001616 <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 800152e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0e      	blt.n	8001554 <GFX_DrawFillCircleHelper+0x62>
            y--;
 8001536:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800153a:	b29b      	uxth	r3, r3
 800153c:	3b01      	subs	r3, #1
 800153e:	b29b      	uxth	r3, r3
 8001540:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001542:	8b7b      	ldrh	r3, [r7, #26]
 8001544:	3302      	adds	r3, #2
 8001546:	b29b      	uxth	r3, r3
 8001548:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800154a:	8bfa      	ldrh	r2, [r7, #30]
 800154c:	8b7b      	ldrh	r3, [r7, #26]
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001554:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001558:	b29b      	uxth	r3, r3
 800155a:	3301      	adds	r3, #1
 800155c:	b29b      	uxth	r3, r3
 800155e:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001560:	8bbb      	ldrh	r3, [r7, #28]
 8001562:	3302      	adds	r3, #2
 8001564:	b29b      	uxth	r3, r3
 8001566:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001568:	8bfa      	ldrh	r2, [r7, #30]
 800156a:	8bbb      	ldrh	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	b29b      	uxth	r3, r3
 8001570:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001572:	797b      	ldrb	r3, [r7, #5]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d023      	beq.n	80015c4 <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800157c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	18d0      	adds	r0, r2, r3
 8001584:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	1ad1      	subs	r1, r2, r3
 800158c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001598:	441a      	add	r2, r3
 800159a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800159c:	f7ff fe37 	bl	800120e <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80015a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	18d0      	adds	r0, r2, r3
 80015a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	1ad1      	subs	r1, r2, r3
 80015b0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	1c5a      	adds	r2, r3, #1
 80015b8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80015bc:	441a      	add	r2, r3
 80015be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015c0:	f7ff fe25 	bl	800120e <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80015c4:	797b      	ldrb	r3, [r7, #5]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d023      	beq.n	8001616 <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80015ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	1ad0      	subs	r0, r2, r3
 80015d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	1ad1      	subs	r1, r2, r3
 80015de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80015ea:	441a      	add	r2, r3
 80015ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015ee:	f7ff fe0e 	bl	800120e <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 80015f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	1ad0      	subs	r0, r2, r3
 80015fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	1ad1      	subs	r1, r2, r3
 8001602:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800160e:	441a      	add	r2, r3
 8001610:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001612:	f7ff fdfc 	bl	800120e <GFX_DrawFastVLine>
    while (x<y) {
 8001616:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800161a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800161e:	429a      	cmp	r2, r3
 8001620:	db85      	blt.n	800152e <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3720      	adds	r7, #32
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af02      	add	r7, sp, #8
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4611      	mov	r1, r2
 8001638:	461a      	mov	r2, r3
 800163a:	460b      	mov	r3, r1
 800163c:	80fb      	strh	r3, [r7, #6]
 800163e:	4613      	mov	r3, r2
 8001640:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 8001642:	8b3a      	ldrh	r2, [r7, #24]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	18d0      	adds	r0, r2, r3
 8001648:	88fa      	ldrh	r2, [r7, #6]
 800164a:	8b3b      	ldrh	r3, [r7, #24]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	1ad2      	subs	r2, r2, r3
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	f7ff fdf2 	bl	800123c <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001658:	8b3a      	ldrh	r2, [r7, #24]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	18d0      	adds	r0, r2, r3
 800165e:	88ba      	ldrh	r2, [r7, #4]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4413      	add	r3, r2
 8001664:	1e59      	subs	r1, r3, #1
 8001666:	88fa      	ldrh	r2, [r7, #6]
 8001668:	8b3b      	ldrh	r3, [r7, #24]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	1ad2      	subs	r2, r2, r3
 800166e:	8bbb      	ldrh	r3, [r7, #28]
 8001670:	f7ff fde4 	bl	800123c <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 8001674:	8b3a      	ldrh	r2, [r7, #24]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	18d1      	adds	r1, r2, r3
 800167a:	88ba      	ldrh	r2, [r7, #4]
 800167c:	8b3b      	ldrh	r3, [r7, #24]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	1ad2      	subs	r2, r2, r3
 8001682:	8bbb      	ldrh	r3, [r7, #28]
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fdc2 	bl	800120e <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 800168a:	88fa      	ldrh	r2, [r7, #6]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	1e58      	subs	r0, r3, #1
 8001692:	8b3a      	ldrh	r2, [r7, #24]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	18d1      	adds	r1, r2, r3
 8001698:	88ba      	ldrh	r2, [r7, #4]
 800169a:	8b3b      	ldrh	r3, [r7, #24]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	1ad2      	subs	r2, r2, r3
 80016a0:	8bbb      	ldrh	r3, [r7, #28]
 80016a2:	f7ff fdb4 	bl	800120e <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80016a6:	8b3a      	ldrh	r2, [r7, #24]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	18d0      	adds	r0, r2, r3
 80016ac:	8b3a      	ldrh	r2, [r7, #24]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	18d1      	adds	r1, r2, r3
 80016b2:	8b3a      	ldrh	r2, [r7, #24]
 80016b4:	8bbb      	ldrh	r3, [r7, #28]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	f7ff fe3a 	bl	8001332 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80016be:	88fa      	ldrh	r2, [r7, #6]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	441a      	add	r2, r3
 80016c4:	8b3b      	ldrh	r3, [r7, #24]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	1e58      	subs	r0, r3, #1
 80016ca:	8b3a      	ldrh	r2, [r7, #24]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	18d1      	adds	r1, r2, r3
 80016d0:	8b3a      	ldrh	r2, [r7, #24]
 80016d2:	8bbb      	ldrh	r3, [r7, #28]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2302      	movs	r3, #2
 80016d8:	f7ff fe2b 	bl	8001332 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 80016dc:	88fa      	ldrh	r2, [r7, #6]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	441a      	add	r2, r3
 80016e2:	8b3b      	ldrh	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	1e58      	subs	r0, r3, #1
 80016e8:	88ba      	ldrh	r2, [r7, #4]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	441a      	add	r2, r3
 80016ee:	8b3b      	ldrh	r3, [r7, #24]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	1e59      	subs	r1, r3, #1
 80016f4:	8b3a      	ldrh	r2, [r7, #24]
 80016f6:	8bbb      	ldrh	r3, [r7, #28]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2304      	movs	r3, #4
 80016fc:	f7ff fe19 	bl	8001332 <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001700:	8b3a      	ldrh	r2, [r7, #24]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	18d0      	adds	r0, r2, r3
 8001706:	88ba      	ldrh	r2, [r7, #4]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	441a      	add	r2, r3
 800170c:	8b3b      	ldrh	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	1e59      	subs	r1, r3, #1
 8001712:	8b3a      	ldrh	r2, [r7, #24]
 8001714:	8bbb      	ldrh	r3, [r7, #28]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2308      	movs	r3, #8
 800171a:	f7ff fe0a 	bl	8001332 <GFX_DrawCircleHelper>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001726:	b590      	push	{r4, r7, lr}
 8001728:	b087      	sub	sp, #28
 800172a:	af02      	add	r7, sp, #8
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	4611      	mov	r1, r2
 8001732:	461a      	mov	r2, r3
 8001734:	460b      	mov	r3, r1
 8001736:	80fb      	strh	r3, [r7, #6]
 8001738:	4613      	mov	r3, r2
 800173a:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 800173c:	8c3a      	ldrh	r2, [r7, #32]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	18d0      	adds	r0, r2, r3
 8001742:	8c3b      	ldrh	r3, [r7, #32]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	b29b      	uxth	r3, r3
 8001748:	88fa      	ldrh	r2, [r7, #6]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	b29a      	uxth	r2, r3
 800174e:	88b9      	ldrh	r1, [r7, #4]
 8001750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	460b      	mov	r3, r1
 8001756:	68b9      	ldr	r1, [r7, #8]
 8001758:	f7ff fdc9 	bl	80012ee <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800175c:	88fa      	ldrh	r2, [r7, #6]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	441a      	add	r2, r3
 8001762:	8c3b      	ldrh	r3, [r7, #32]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	1e58      	subs	r0, r3, #1
 8001768:	8c3a      	ldrh	r2, [r7, #32]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	18d1      	adds	r1, r2, r3
 800176e:	8c3b      	ldrh	r3, [r7, #32]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	b29b      	uxth	r3, r3
 8001774:	88ba      	ldrh	r2, [r7, #4]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	b29b      	uxth	r3, r3
 800177a:	3b01      	subs	r3, #1
 800177c:	b29b      	uxth	r3, r3
 800177e:	b21b      	sxth	r3, r3
 8001780:	8c3c      	ldrh	r4, [r7, #32]
 8001782:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001784:	9201      	str	r2, [sp, #4]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	4622      	mov	r2, r4
 800178c:	f7ff feb1 	bl	80014f2 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8001790:	8c3a      	ldrh	r2, [r7, #32]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	18d0      	adds	r0, r2, r3
 8001796:	8c3a      	ldrh	r2, [r7, #32]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	18d1      	adds	r1, r2, r3
 800179c:	8c3b      	ldrh	r3, [r7, #32]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	88ba      	ldrh	r2, [r7, #4]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	8c3c      	ldrh	r4, [r7, #32]
 80017b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017b2:	9201      	str	r2, [sp, #4]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2302      	movs	r3, #2
 80017b8:	4622      	mov	r2, r4
 80017ba:	f7ff fe9a 	bl	80014f2 <GFX_DrawFillCircleHelper>
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
	...

080017c8 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <EF_SetFont+0x1c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2000034c 	.word	0x2000034c

080017e8 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <EF_GetFontHeight+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	781b      	ldrb	r3, [r3, #0]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	2000034c 	.word	0x2000034c

08001800 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <EF_GetFontStartChar+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	785b      	ldrb	r3, [r3, #1]
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	2000034c 	.word	0x2000034c

08001818 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <EF_GetFontEndChar+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	789b      	ldrb	r3, [r3, #2]
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	2000034c 	.word	0x2000034c

08001830 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <EF_GetFontSpaceWidth+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	78db      	ldrb	r3, [r3, #3]
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	2000034c 	.word	0x2000034c

08001848 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	460a      	mov	r2, r1
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2bc5      	cmp	r3, #197	; 0xc5
 800185c:	d052      	beq.n	8001904 <EF_DecodePolish+0xbc>
 800185e:	2bc5      	cmp	r3, #197	; 0xc5
 8001860:	f300 80e7 	bgt.w	8001a32 <EF_DecodePolish+0x1ea>
 8001864:	2bc3      	cmp	r3, #195	; 0xc3
 8001866:	d002      	beq.n	800186e <EF_DecodePolish+0x26>
 8001868:	2bc4      	cmp	r3, #196	; 0xc4
 800186a:	d00a      	beq.n	8001882 <EF_DecodePolish+0x3a>
 800186c:	e0e1      	b.n	8001a32 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	2b93      	cmp	r3, #147	; 0x93
 8001872:	d002      	beq.n	800187a <EF_DecodePolish+0x32>
 8001874:	2bb3      	cmp	r3, #179	; 0xb3
 8001876:	d002      	beq.n	800187e <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8001878:	e0db      	b.n	8001a32 <EF_DecodePolish+0x1ea>
			return 0x84;
 800187a:	2384      	movs	r3, #132	; 0x84
 800187c:	e0da      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			return 0x8D;
 800187e:	238d      	movs	r3, #141	; 0x8d
 8001880:	e0d8      	b.n	8001a34 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	3b84      	subs	r3, #132	; 0x84
 8001886:	2b15      	cmp	r3, #21
 8001888:	f200 80d0 	bhi.w	8001a2c <EF_DecodePolish+0x1e4>
 800188c:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <EF_DecodePolish+0x4c>)
 800188e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001892:	bf00      	nop
 8001894:	080018ed 	.word	0x080018ed
 8001898:	080018f9 	.word	0x080018f9
 800189c:	080018f5 	.word	0x080018f5
 80018a0:	08001901 	.word	0x08001901
 80018a4:	08001a2d 	.word	0x08001a2d
 80018a8:	08001a2d 	.word	0x08001a2d
 80018ac:	08001a2d 	.word	0x08001a2d
 80018b0:	08001a2d 	.word	0x08001a2d
 80018b4:	08001a2d 	.word	0x08001a2d
 80018b8:	08001a2d 	.word	0x08001a2d
 80018bc:	08001a2d 	.word	0x08001a2d
 80018c0:	08001a2d 	.word	0x08001a2d
 80018c4:	08001a2d 	.word	0x08001a2d
 80018c8:	08001a2d 	.word	0x08001a2d
 80018cc:	08001a2d 	.word	0x08001a2d
 80018d0:	08001a2d 	.word	0x08001a2d
 80018d4:	08001a2d 	.word	0x08001a2d
 80018d8:	08001a2d 	.word	0x08001a2d
 80018dc:	08001a2d 	.word	0x08001a2d
 80018e0:	08001a2d 	.word	0x08001a2d
 80018e4:	080018f1 	.word	0x080018f1
 80018e8:	080018fd 	.word	0x080018fd
		{
		case 0x84: // Ą
			return 0x7F;
 80018ec:	237f      	movs	r3, #127	; 0x7f
 80018ee:	e0a1      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 80018f0:	2381      	movs	r3, #129	; 0x81
 80018f2:	e09f      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	e09d      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 80018f8:	2388      	movs	r3, #136	; 0x88
 80018fa:	e09b      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 80018fc:	238a      	movs	r3, #138	; 0x8a
 80018fe:	e099      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001900:	2389      	movs	r3, #137	; 0x89
 8001902:	e097      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	3b81      	subs	r3, #129	; 0x81
 8001908:	2b3b      	cmp	r3, #59	; 0x3b
 800190a:	f200 8091 	bhi.w	8001a30 <EF_DecodePolish+0x1e8>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <EF_DecodePolish+0xcc>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001a05 	.word	0x08001a05
 8001918:	08001a19 	.word	0x08001a19
 800191c:	08001a09 	.word	0x08001a09
 8001920:	08001a1d 	.word	0x08001a1d
 8001924:	08001a31 	.word	0x08001a31
 8001928:	08001a31 	.word	0x08001a31
 800192c:	08001a31 	.word	0x08001a31
 8001930:	08001a31 	.word	0x08001a31
 8001934:	08001a31 	.word	0x08001a31
 8001938:	08001a31 	.word	0x08001a31
 800193c:	08001a31 	.word	0x08001a31
 8001940:	08001a31 	.word	0x08001a31
 8001944:	08001a31 	.word	0x08001a31
 8001948:	08001a31 	.word	0x08001a31
 800194c:	08001a31 	.word	0x08001a31
 8001950:	08001a31 	.word	0x08001a31
 8001954:	08001a31 	.word	0x08001a31
 8001958:	08001a31 	.word	0x08001a31
 800195c:	08001a31 	.word	0x08001a31
 8001960:	08001a31 	.word	0x08001a31
 8001964:	08001a31 	.word	0x08001a31
 8001968:	08001a31 	.word	0x08001a31
 800196c:	08001a31 	.word	0x08001a31
 8001970:	08001a31 	.word	0x08001a31
 8001974:	08001a31 	.word	0x08001a31
 8001978:	08001a0d 	.word	0x08001a0d
 800197c:	08001a21 	.word	0x08001a21
 8001980:	08001a31 	.word	0x08001a31
 8001984:	08001a31 	.word	0x08001a31
 8001988:	08001a31 	.word	0x08001a31
 800198c:	08001a31 	.word	0x08001a31
 8001990:	08001a31 	.word	0x08001a31
 8001994:	08001a31 	.word	0x08001a31
 8001998:	08001a31 	.word	0x08001a31
 800199c:	08001a31 	.word	0x08001a31
 80019a0:	08001a31 	.word	0x08001a31
 80019a4:	08001a31 	.word	0x08001a31
 80019a8:	08001a31 	.word	0x08001a31
 80019ac:	08001a31 	.word	0x08001a31
 80019b0:	08001a31 	.word	0x08001a31
 80019b4:	08001a31 	.word	0x08001a31
 80019b8:	08001a31 	.word	0x08001a31
 80019bc:	08001a31 	.word	0x08001a31
 80019c0:	08001a31 	.word	0x08001a31
 80019c4:	08001a31 	.word	0x08001a31
 80019c8:	08001a31 	.word	0x08001a31
 80019cc:	08001a31 	.word	0x08001a31
 80019d0:	08001a31 	.word	0x08001a31
 80019d4:	08001a31 	.word	0x08001a31
 80019d8:	08001a31 	.word	0x08001a31
 80019dc:	08001a31 	.word	0x08001a31
 80019e0:	08001a31 	.word	0x08001a31
 80019e4:	08001a31 	.word	0x08001a31
 80019e8:	08001a31 	.word	0x08001a31
 80019ec:	08001a31 	.word	0x08001a31
 80019f0:	08001a31 	.word	0x08001a31
 80019f4:	08001a11 	.word	0x08001a11
 80019f8:	08001a25 	.word	0x08001a25
 80019fc:	08001a15 	.word	0x08001a15
 8001a00:	08001a29 	.word	0x08001a29
		{
		case 0x81: // Ł
			return 0x82;
 8001a04:	2382      	movs	r3, #130	; 0x82
 8001a06:	e015      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001a08:	2383      	movs	r3, #131	; 0x83
 8001a0a:	e013      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001a0c:	2385      	movs	r3, #133	; 0x85
 8001a0e:	e011      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001a10:	2386      	movs	r3, #134	; 0x86
 8001a12:	e00f      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8001a14:	2387      	movs	r3, #135	; 0x87
 8001a16:	e00d      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001a18:	238b      	movs	r3, #139	; 0x8b
 8001a1a:	e00b      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001a1c:	238c      	movs	r3, #140	; 0x8c
 8001a1e:	e009      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001a20:	238e      	movs	r3, #142	; 0x8e
 8001a22:	e007      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8001a24:	238f      	movs	r3, #143	; 0x8f
 8001a26:	e005      	b.n	8001a34 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001a28:	2390      	movs	r3, #144	; 0x90
 8001a2a:	e003      	b.n	8001a34 <EF_DecodePolish+0x1ec>
		break;
 8001a2c:	bf00      	nop
 8001a2e:	e000      	b.n	8001a32 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001a30:	bf00      	nop
	}

	return 0;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	4604      	mov	r4, r0
 8001a48:	4608      	mov	r0, r1
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4623      	mov	r3, r4
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	4603      	mov	r3, r0
 8001a54:	80bb      	strh	r3, [r7, #4]
 8001a56:	460b      	mov	r3, r1
 8001a58:	807b      	strh	r3, [r7, #2]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001a5e:	f7ff fecf 	bl	8001800 <EF_GetFontStartChar>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	d120      	bne.n	8001ab4 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001a72:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d114      	bne.n	8001aa4 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 8001a7a:	88bc      	ldrh	r4, [r7, #4]
 8001a7c:	887d      	ldrh	r5, [r7, #2]
 8001a7e:	f7ff fed7 	bl	8001830 <EF_GetFontSpaceWidth>
 8001a82:	4603      	mov	r3, r0
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	0052      	lsls	r2, r2, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b5a      	ldr	r3, [pc, #360]	; (8001bf8 <EF_PutChar+0x1b8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b299      	uxth	r1, r3
 8001a96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff fc25 	bl	80012ee <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 8001aa4:	f7ff fec4 	bl	8001830 <EF_GetFontSpaceWidth>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	0052      	lsls	r2, r2, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e09c      	b.n	8001bee <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8001ab4:	f7ff fea4 	bl	8001800 <EF_GetFontStartChar>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d201      	bcs.n	8001ac6 <EF_PutChar+0x86>
	{
		return 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e093      	b.n	8001bee <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8001ac6:	f7ff fea7 	bl	8001818 <EF_GetFontEndChar>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	7c7b      	ldrb	r3, [r7, #17]
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <EF_PutChar+0x98>
	{
		return 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e08a      	b.n	8001bee <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001ad8:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <EF_PutChar+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	7c7b      	ldrb	r3, [r7, #17]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001ae6:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <EF_PutChar+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a42      	ldr	r2, [pc, #264]	; (8001bf8 <EF_PutChar+0x1b8>)
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	6851      	ldr	r1, [r2, #4]
 8001af2:	7c7a      	ldrb	r2, [r7, #17]
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	440a      	add	r2, r1
 8001af8:	8852      	ldrh	r2, [r2, #2]
 8001afa:	4413      	add	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	83fb      	strh	r3, [r7, #30]
 8001b02:	e066      	b.n	8001bd2 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	777b      	strb	r3, [r7, #29]
 8001b0e:	e053      	b.n	8001bb8 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001b16:	7efb      	ldrb	r3, [r7, #27]
 8001b18:	2b07      	cmp	r3, #7
 8001b1a:	d905      	bls.n	8001b28 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001b20:	7efb      	ldrb	r3, [r7, #27]
 8001b22:	3b08      	subs	r3, #8
 8001b24:	76fb      	strb	r3, [r7, #27]
 8001b26:	e001      	b.n	8001b2c <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001b28:	7efb      	ldrb	r3, [r7, #27]
 8001b2a:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	74bb      	strb	r3, [r7, #18]
 8001b30:	e038      	b.n	8001ba4 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001b32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da15      	bge.n	8001b66 <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001b3a:	7f7b      	ldrb	r3, [r7, #29]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	88bb      	ldrh	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	7cbb      	ldrb	r3, [r7, #18]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	b218      	sxth	r0, r3
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	8bfb      	ldrh	r3, [r7, #30]
 8001b56:	4413      	add	r3, r2
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	883a      	ldrh	r2, [r7, #0]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f000 f9d8 	bl	8001f14 <ILI9341_WritePixel>
 8001b64:	e018      	b.n	8001b98 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001b66:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d114      	bne.n	8001b98 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001b6e:	7f7b      	ldrb	r3, [r7, #29]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	88bb      	ldrh	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	7cbb      	ldrb	r3, [r7, #18]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4413      	add	r3, r2
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	b218      	sxth	r0, r3
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	8bfb      	ldrh	r3, [r7, #30]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b92:	4619      	mov	r1, r3
 8001b94:	f000 f9be 	bl	8001f14 <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001b98:	7cbb      	ldrb	r3, [r7, #18]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	74bb      	strb	r3, [r7, #18]
 8001b9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	74fb      	strb	r3, [r7, #19]
 8001ba4:	7cba      	ldrb	r2, [r7, #18]
 8001ba6:	7f3b      	ldrb	r3, [r7, #28]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d3c2      	bcc.n	8001b32 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001bb2:	7f7b      	ldrb	r3, [r7, #29]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	777b      	strb	r3, [r7, #29]
 8001bb8:	7f7a      	ldrb	r2, [r7, #29]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da00      	bge.n	8001bc6 <EF_PutChar+0x186>
 8001bc4:	3307      	adds	r3, #7
 8001bc6:	10db      	asrs	r3, r3, #3
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dda1      	ble.n	8001b10 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	83fb      	strh	r3, [r7, #30]
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <EF_PutChar+0x1b8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	8bfa      	ldrh	r2, [r7, #30]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d391      	bcc.n	8001b04 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <EF_PutChar+0x1b8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	7c7b      	ldrb	r3, [r7, #17]
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000034c 	.word	0x2000034c

08001bfc <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	817b      	strh	r3, [r7, #10]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	813b      	strh	r3, [r7, #8]
 8001c12:	4613      	mov	r3, r2
 8001c14:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7fe faec 	bl	80001f4 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001c20:	2300      	movs	r3, #0
 8001c22:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c24:	2300      	movs	r3, #0
 8001c26:	75fb      	strb	r3, [r7, #23]
 8001c28:	e05a      	b.n	8001ce0 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2bc5      	cmp	r3, #197	; 0xc5
 8001c34:	d817      	bhi.n	8001c66 <EF_PutString+0x6a>
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2bc2      	cmp	r3, #194	; 0xc2
 8001c40:	d911      	bls.n	8001c66 <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	7818      	ldrb	r0, [r3, #0]
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7ff fdf7 	bl	8001848 <EF_DecodePolish>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	3301      	adds	r3, #1
 8001c62:	75fb      	strb	r3, [r7, #23]
 8001c64:	e004      	b.n	8001c70 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001c70:	897a      	ldrh	r2, [r7, #10]
 8001c72:	8abb      	ldrh	r3, [r7, #20]
 8001c74:	4413      	add	r3, r2
 8001c76:	b299      	uxth	r1, r3
 8001c78:	88fc      	ldrh	r4, [r7, #6]
 8001c7a:	893a      	ldrh	r2, [r7, #8]
 8001c7c:	7cf8      	ldrb	r0, [r7, #19]
 8001c7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	4623      	mov	r3, r4
 8001c8a:	f7ff fed9 	bl	8001a40 <EF_PutChar>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001c92:	7c7b      	ldrb	r3, [r7, #17]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	8abb      	ldrh	r3, [r7, #20]
 8001c98:	4413      	add	r3, r2
 8001c9a:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001c9c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d113      	bne.n	8001ccc <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001ca4:	897a      	ldrh	r2, [r7, #10]
 8001ca6:	8abb      	ldrh	r3, [r7, #20]
 8001ca8:	18d4      	adds	r4, r2, r3
 8001caa:	893d      	ldrh	r5, [r7, #8]
 8001cac:	f7ff fdc0 	bl	8001830 <EF_GetFontSpaceWidth>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29e      	uxth	r6, r3
 8001cb4:	f7ff fd98 	bl	80017e8 <EF_GetFontHeight>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	4632      	mov	r2, r6
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f7ff fb11 	bl	80012ee <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001ccc:	f7ff fdb0 	bl	8001830 <EF_GetFontSpaceWidth>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	8abb      	ldrh	r3, [r7, #20]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	75fb      	strb	r3, [r7, #23]
 8001ce0:	7dfa      	ldrb	r2, [r7, #23]
 8001ce2:	7cbb      	ldrb	r3, [r7, #18]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d3a0      	bcc.n	8001c2a <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001ce8:	8abb      	ldrh	r3, [r7, #20]
 8001cea:	b2dc      	uxtb	r4, r3
 8001cec:	f7ff fda0 	bl	8001830 <EF_GetFontSpaceWidth>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	1ae3      	subs	r3, r4, r3
 8001cf4:	b2db      	uxtb	r3, r3
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cfe <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f008 fae2 	bl	800a2d0 <HAL_Delay>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001d1e:	e014      	b.n	8001d4a <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <ILI9341_SendToTFT+0x5c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d10c      	bne.n	8001d4a <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <ILI9341_SendToTFT+0x5c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	330c      	adds	r3, #12
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3301      	adds	r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1e7      	bne.n	8001d20 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001d50:	bf00      	nop
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <ILI9341_SendToTFT+0x5c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5e:	2b80      	cmp	r3, #128	; 0x80
 8001d60:	d0f7      	beq.n	8001d52 <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	20000350 	.word	0x20000350

08001d74 <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d84:	480b      	ldr	r0, [pc, #44]	; (8001db4 <ILI9341_SendComand+0x40>)
 8001d86:	f009 fa13 	bl	800b1b0 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d90:	4808      	ldr	r0, [pc, #32]	; (8001db4 <ILI9341_SendComand+0x40>)
 8001d92:	f009 fa0d 	bl	800b1b0 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	2101      	movs	r1, #1
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ffba 	bl	8001d14 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001da0:	2201      	movs	r2, #1
 8001da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <ILI9341_SendComand+0x40>)
 8001da8:	f009 fa02 	bl	800b1b0 <HAL_GPIO_WritePin>
#endif
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40020400 	.word	0x40020400

08001db8 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dcc:	4811      	ldr	r0, [pc, #68]	; (8001e14 <ILI9341_SendCommandAndData+0x5c>)
 8001dce:	f009 f9ef 	bl	800b1b0 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dd8:	480e      	ldr	r0, [pc, #56]	; (8001e14 <ILI9341_SendCommandAndData+0x5c>)
 8001dda:	f009 f9e9 	bl	800b1b0 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001dde:	f107 030f 	add.w	r3, r7, #15
 8001de2:	2101      	movs	r1, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff95 	bl	8001d14 <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001dea:	2201      	movs	r2, #1
 8001dec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001df0:	4808      	ldr	r0, [pc, #32]	; (8001e14 <ILI9341_SendCommandAndData+0x5c>)
 8001df2:	f009 f9dd 	bl	800b1b0 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	68b8      	ldr	r0, [r7, #8]
 8001dfa:	f7ff ff8b 	bl	8001d14 <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <ILI9341_SendCommandAndData+0x5c>)
 8001e06:	f009 f9d3 	bl	800b1b0 <HAL_GPIO_WritePin>
#endif

}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40020400 	.word	0x40020400

08001e18 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d820      	bhi.n	8001e6a <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d816      	bhi.n	8001e5c <ILI9341_SetRotation+0x44>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <ILI9341_SetRotation+0x1c>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001e45 	.word	0x08001e45
 8001e38:	08001e4b 	.word	0x08001e4b
 8001e3c:	08001e51 	.word	0x08001e51
 8001e40:	08001e57 	.word	0x08001e57
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001e44:	2348      	movs	r3, #72	; 0x48
 8001e46:	71fb      	strb	r3, [r7, #7]
		break;
 8001e48:	e008      	b.n	8001e5c <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001e4a:	2328      	movs	r3, #40	; 0x28
 8001e4c:	71fb      	strb	r3, [r7, #7]
		break;
 8001e4e:	e005      	b.n	8001e5c <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001e50:	2388      	movs	r3, #136	; 0x88
 8001e52:	71fb      	strb	r3, [r7, #7]
		break;
 8001e54:	e002      	b.n	8001e5c <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001e56:	23e8      	movs	r3, #232	; 0xe8
 8001e58:	71fb      	strb	r3, [r7, #7]
		break;
 8001e5a:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001e5c:	1dfb      	adds	r3, r7, #7
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4619      	mov	r1, r3
 8001e62:	2036      	movs	r0, #54	; 0x36
 8001e64:	f7ff ffa8 	bl	8001db8 <ILI9341_SendCommandAndData>
 8001e68:	e000      	b.n	8001e6c <ILI9341_SetRotation+0x54>
		return;
 8001e6a:	bf00      	nop
}
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop

08001e74 <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4611      	mov	r1, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	4623      	mov	r3, r4
 8001e84:	80fb      	strh	r3, [r7, #6]
 8001e86:	4603      	mov	r3, r0
 8001e88:	80bb      	strh	r3, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	807b      	strh	r3, [r7, #2]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	4413      	add	r3, r2
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	81fb      	strh	r3, [r7, #14]
 8001e9e:	88ba      	ldrh	r2, [r7, #4]
 8001ea0:	883b      	ldrh	r3, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001eba:	89fb      	ldrh	r3, [r7, #14]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	202a      	movs	r0, #42	; 0x2a
 8001ed4:	f7ff ff70 	bl	8001db8 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001ed8:	88bb      	ldrh	r3, [r7, #4]
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001ee2:	88bb      	ldrh	r3, [r7, #4]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001ee8:	89bb      	ldrh	r3, [r7, #12]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001ef2:	89bb      	ldrh	r3, [r7, #12]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	2204      	movs	r2, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	202b      	movs	r0, #43	; 0x2b
 8001f02:	f7ff ff59 	bl	8001db8 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001f06:	202c      	movs	r0, #44	; 0x2c
 8001f08:	f7ff ff34 	bl	8001d74 <ILI9341_SendComand>

}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd90      	pop	{r4, r7, pc}

08001f14 <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	80bb      	strh	r3, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db21      	blt.n	8001f72 <ILI9341_WritePixel+0x5e>
 8001f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f32:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f36:	da1c      	bge.n	8001f72 <ILI9341_WritePixel+0x5e>
 8001f38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db18      	blt.n	8001f72 <ILI9341_WritePixel+0x5e>
 8001f40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f44:	2bef      	cmp	r3, #239	; 0xef
 8001f46:	dc14      	bgt.n	8001f72 <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001f48:	88f8      	ldrh	r0, [r7, #6]
 8001f4a:	88b9      	ldrh	r1, [r7, #4]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f7ff ff90 	bl	8001e74 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2202      	movs	r2, #2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	202c      	movs	r0, #44	; 0x2c
 8001f6e:	f7ff ff23 	bl	8001db8 <ILI9341_SendCommandAndData>
	}

}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60ba      	str	r2, [r7, #8]
 8001f82:	461a      	mov	r2, r3
 8001f84:	4603      	mov	r3, r0
 8001f86:	81fb      	strh	r3, [r7, #14]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	81bb      	strh	r3, [r7, #12]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001f90:	89fa      	ldrh	r2, [r7, #14]
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	4413      	add	r3, r2
 8001f96:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f9a:	dc14      	bgt.n	8001fc6 <ILI9341_DrawImage+0x4c>
 8001f9c:	89ba      	ldrh	r2, [r7, #12]
 8001f9e:	8b3b      	ldrh	r3, [r7, #24]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	2bf0      	cmp	r3, #240	; 0xf0
 8001fa4:	dc0f      	bgt.n	8001fc6 <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001fa6:	8b3b      	ldrh	r3, [r7, #24]
 8001fa8:	88fa      	ldrh	r2, [r7, #6]
 8001faa:	89b9      	ldrh	r1, [r7, #12]
 8001fac:	89f8      	ldrh	r0, [r7, #14]
 8001fae:	f7ff ff61 	bl	8001e74 <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	8b3a      	ldrh	r2, [r7, #24]
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	202c      	movs	r0, #44	; 0x2c
 8001fc2:	f7ff fef9 	bl	8001db8 <ILI9341_SendCommandAndData>
	}
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001fda:	23f0      	movs	r3, #240	; 0xf0
 8001fdc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7ff ff46 	bl	8001e74 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001fe8:	202c      	movs	r0, #44	; 0x2c
 8001fea:	f7ff fec3 	bl	8001d74 <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001fee:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001ff2:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ffa:	4822      	ldr	r0, [pc, #136]	; (8002084 <ILI9341_ClearDisplay+0xb4>)
 8001ffc:	f009 f8d8 	bl	800b1b0 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8002000:	2201      	movs	r2, #1
 8002002:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002006:	481f      	ldr	r0, [pc, #124]	; (8002084 <ILI9341_ClearDisplay+0xb4>)
 8002008:	f009 f8d2 	bl	800b1b0 <HAL_GPIO_WritePin>

    while (Length > 0U)
 800200c:	e023      	b.n	8002056 <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 800200e:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <ILI9341_ClearDisplay+0xb8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d11b      	bne.n	8002056 <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <ILI9341_ClearDisplay+0xb8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	330c      	adds	r3, #12
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8002030:	bf00      	nop
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <ILI9341_ClearDisplay+0xb8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b02      	cmp	r3, #2
 8002040:	d1f7      	bne.n	8002032 <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <ILI9341_ClearDisplay+0xb8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	330c      	adds	r3, #12
 800204a:	88fa      	ldrh	r2, [r7, #6]
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3b01      	subs	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1d8      	bne.n	800200e <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 800205c:	bf00      	nop
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <ILI9341_ClearDisplay+0xb8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	2b80      	cmp	r3, #128	; 0x80
 800206c:	d0f7      	beq.n	800205e <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 800206e:	2201      	movs	r2, #1
 8002070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <ILI9341_ClearDisplay+0xb4>)
 8002076:	f009 f89b 	bl	800b1b0 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40020400 	.word	0x40020400
 8002088:	20000350 	.word	0x20000350

0800208c <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8002094:	4a24      	ldr	r2, [pc, #144]	; (8002128 <ILI9341_Init+0x9c>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <ILI9341_Init+0xa0>)
 800209c:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ac:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 80020ae:	2200      	movs	r2, #0
 80020b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020b4:	481e      	ldr	r0, [pc, #120]	; (8002130 <ILI9341_Init+0xa4>)
 80020b6:	f009 f87b 	bl	800b1b0 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 80020ba:	200a      	movs	r0, #10
 80020bc:	f7ff fe1f 	bl	8001cfe <ILI9341_Delay>
	ILI9341_RST_HIGH;
 80020c0:	2201      	movs	r2, #1
 80020c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c6:	481a      	ldr	r0, [pc, #104]	; (8002130 <ILI9341_Init+0xa4>)
 80020c8:	f009 f872 	bl	800b1b0 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 80020cc:	200a      	movs	r0, #10
 80020ce:	f7ff fe16 	bl	8001cfe <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 80020d2:	e019      	b.n	8002108 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60fa      	str	r2, [r7, #12]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 80020de:	7abb      	ldrb	r3, [r7, #10]
 80020e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e4:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 80020e6:	7a7a      	ldrb	r2, [r7, #9]
 80020e8:	7afb      	ldrb	r3, [r7, #11]
 80020ea:	68f9      	ldr	r1, [r7, #12]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fe63 	bl	8001db8 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 80020f2:	7a7b      	ldrb	r3, [r7, #9]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 80020fa:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da02      	bge.n	8002108 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 8002102:	2096      	movs	r0, #150	; 0x96
 8002104:	f7ff fdfb 	bl	8001cfe <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60fa      	str	r2, [r7, #12]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	72fb      	strb	r3, [r7, #11]
 8002112:	7afb      	ldrb	r3, [r7, #11]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1dd      	bne.n	80020d4 <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002118:	2003      	movs	r0, #3
 800211a:	f7ff fe7d 	bl	8001e18 <ILI9341_SetRotation>
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000350 	.word	0x20000350
 800212c:	080162b0 	.word	0x080162b0
 8002130:	40020400 	.word	0x40020400

08002134 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 800213a:	2200      	movs	r2, #0
 800213c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002140:	480a      	ldr	r0, [pc, #40]	; (800216c <XPT2046_GetRawData+0x38>)
 8002142:	f009 f835 	bl	800b1b0 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <XPT2046_GetRawData+0x3c>)
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2305      	movs	r3, #5
 8002152:	4a08      	ldr	r2, [pc, #32]	; (8002174 <XPT2046_GetRawData+0x40>)
 8002154:	4908      	ldr	r1, [pc, #32]	; (8002178 <XPT2046_GetRawData+0x44>)
 8002156:	f00c fe4c 	bl	800edf2 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 800215a:	2201      	movs	r2, #1
 800215c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <XPT2046_GetRawData+0x38>)
 8002162:	f009 f825 	bl	800b1b0 <HAL_GPIO_WritePin>
#endif
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40020400 	.word	0x40020400
 8002170:	20000230 	.word	0x20000230
 8002174:	20000240 	.word	0x20000240
 8002178:	20000238 	.word	0x20000238

0800217c <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <XPT2046_ReadRawData+0x48>)
 8002188:	785b      	ldrb	r3, [r3, #1]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	b21a      	sxth	r2, r3
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <XPT2046_ReadRawData+0x48>)
 8002190:	789b      	ldrb	r3, [r3, #2]
 8002192:	b21b      	sxth	r3, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	b21b      	sxth	r3, r3
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <XPT2046_ReadRawData+0x48>)
 80021a0:	78db      	ldrb	r3, [r3, #3]
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <XPT2046_ReadRawData+0x48>)
 80021a8:	791b      	ldrb	r3, [r3, #4]
 80021aa:	b21b      	sxth	r3, r3
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	801a      	strh	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000240 	.word	0x20000240

080021c8 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80021c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80021d4:	f107 020c 	add.w	r2, r7, #12
 80021d8:	f107 030e 	add.w	r3, r7, #14
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ffcc 	bl	800217c <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 80021e4:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <XPT2046_ReadTouchPoint+0x118>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d16e      	bne.n	80022ca <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 80021ec:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <XPT2046_ReadTouchPoint+0x11c>)
 80021ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021f2:	89fb      	ldrh	r3, [r7, #14]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f9ad 	bl	8000554 <__aeabi_i2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fe fa11 	bl	8000628 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4690      	mov	r8, r2
 800220c:	4699      	mov	r9, r3
 800220e:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <XPT2046_ReadTouchPoint+0x11c>)
 8002210:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002214:	89bb      	ldrh	r3, [r7, #12]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f99c 	bl	8000554 <__aeabi_i2d>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4620      	mov	r0, r4
 8002222:	4629      	mov	r1, r5
 8002224:	f7fe fa00 	bl	8000628 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4640      	mov	r0, r8
 800222e:	4649      	mov	r1, r9
 8002230:	f7fe f844 	bl	80002bc <__adddf3>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <XPT2046_ReadTouchPoint+0x11c>)
 800223e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002242:	f7fe f83b 	bl	80002bc <__adddf3>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	f7fe fcc3 	bl	8000bd8 <__aeabi_d2uiz>
 8002252:	4603      	mov	r3, r0
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <XPT2046_ReadTouchPoint+0x11c>)
 800225c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002260:	89fb      	ldrh	r3, [r7, #14]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f976 	bl	8000554 <__aeabi_i2d>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f7fe f9da 	bl	8000628 <__aeabi_dmul>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4690      	mov	r8, r2
 800227a:	4699      	mov	r9, r3
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <XPT2046_ReadTouchPoint+0x11c>)
 800227e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002282:	89bb      	ldrh	r3, [r7, #12]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f965 	bl	8000554 <__aeabi_i2d>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4620      	mov	r0, r4
 8002290:	4629      	mov	r1, r5
 8002292:	f7fe f9c9 	bl	8000628 <__aeabi_dmul>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4640      	mov	r0, r8
 800229c:	4649      	mov	r1, r9
 800229e:	f7fe f80d 	bl	80002bc <__adddf3>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <XPT2046_ReadTouchPoint+0x11c>)
 80022ac:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80022b0:	f7fe f804 	bl	80002bc <__adddf3>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7fe fc8c 	bl	8000bd8 <__aeabi_d2uiz>
 80022c0:	4603      	mov	r3, r0
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80022c8:	e005      	b.n	80022d6 <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80022ca:	89fa      	ldrh	r2, [r7, #14]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80022d0:	89ba      	ldrh	r2, [r7, #12]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	801a      	strh	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022e0:	20000245 	.word	0x20000245
 80022e4:	20000000 	.word	0x20000000

080022e8 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	e013      	b.n	8002328 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	4a16      	ldr	r2, [pc, #88]	; (800235c <XPT2046_GetTouchPoint+0x74>)
 8002304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002308:	461a      	mov	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	4413      	add	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <XPT2046_GetTouchPoint+0x74>)
 8002314:	330a      	adds	r3, #10
 8002316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800231a:	461a      	mov	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	3301      	adds	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2b09      	cmp	r3, #9
 800232c:	d9e8      	bls.n	8002300 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <XPT2046_GetTouchPoint+0x78>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	08db      	lsrs	r3, r3, #3
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <XPT2046_GetTouchPoint+0x78>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	08db      	lsrs	r3, r3, #3
 8002348:	b29a      	uxth	r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	801a      	strh	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000354 	.word	0x20000354
 8002360:	cccccccd 	.word	0xcccccccd

08002364 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <XPT2046_IsTouched+0x20>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d101      	bne.n	8002376 <XPT2046_IsTouched+0x12>
		return 1;
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <XPT2046_IsTouched+0x14>

	return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	2000037d 	.word	0x2000037d

08002388 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	  switch(TouchState)
 800238c:	4b59      	ldr	r3, [pc, #356]	; (80024f4 <XPT2046_Task+0x16c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b03      	cmp	r3, #3
 8002394:	f200 80ab 	bhi.w	80024ee <XPT2046_Task+0x166>
 8002398:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <XPT2046_Task+0x18>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080024e5 	.word	0x080024e5
 80023a4:	080023b1 	.word	0x080023b1
 80023a8:	08002427 	.word	0x08002427
 80023ac:	080024a3 	.word	0x080024a3
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80023b0:	f007 ff82 	bl	800a2b8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <XPT2046_Task+0x170>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b05      	cmp	r3, #5
 80023be:	f240 8093 	bls.w	80024e8 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80023c2:	f7ff feb7 	bl	8002134 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80023c6:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <XPT2046_Task+0x174>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4a4c      	ldr	r2, [pc, #304]	; (8002500 <XPT2046_Task+0x178>)
 80023ce:	441a      	add	r2, r3
 80023d0:	4b4a      	ldr	r3, [pc, #296]	; (80024fc <XPT2046_Task+0x174>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	330a      	adds	r3, #10
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4949      	ldr	r1, [pc, #292]	; (8002500 <XPT2046_Task+0x178>)
 80023da:	440b      	add	r3, r1
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7ff fef2 	bl	80021c8 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 80023e4:	4b45      	ldr	r3, [pc, #276]	; (80024fc <XPT2046_Task+0x174>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	4b43      	ldr	r3, [pc, #268]	; (80024fc <XPT2046_Task+0x174>)
 80023ee:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 80023f0:	4b42      	ldr	r3, [pc, #264]	; (80024fc <XPT2046_Task+0x174>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b0a      	cmp	r3, #10
 80023f6:	d105      	bne.n	8002404 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 80023f8:	4b40      	ldr	r3, [pc, #256]	; (80024fc <XPT2046_Task+0x174>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 80023fe:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <XPT2046_Task+0x16c>)
 8002400:	2202      	movs	r2, #2
 8002402:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002408:	483e      	ldr	r0, [pc, #248]	; (8002504 <XPT2046_Task+0x17c>)
 800240a:	f008 feb9 	bl	800b180 <HAL_GPIO_ReadPin>
 800240e:	4603      	mov	r3, r0
 8002410:	2b01      	cmp	r3, #1
 8002412:	d102      	bne.n	800241a <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002414:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <XPT2046_Task+0x16c>)
 8002416:	2203      	movs	r2, #3
 8002418:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 800241a:	f007 ff4d 	bl	800a2b8 <HAL_GetTick>
 800241e:	4603      	mov	r3, r0
 8002420:	4a35      	ldr	r2, [pc, #212]	; (80024f8 <XPT2046_Task+0x170>)
 8002422:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8002424:	e060      	b.n	80024e8 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8002426:	f007 ff47 	bl	800a2b8 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <XPT2046_Task+0x170>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b05      	cmp	r3, #5
 8002434:	d95a      	bls.n	80024ec <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8002436:	f7ff fe7d 	bl	8002134 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 800243a:	4b30      	ldr	r3, [pc, #192]	; (80024fc <XPT2046_Task+0x174>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4a2f      	ldr	r2, [pc, #188]	; (8002500 <XPT2046_Task+0x178>)
 8002442:	441a      	add	r2, r3
 8002444:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <XPT2046_Task+0x174>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	330a      	adds	r3, #10
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	492c      	ldr	r1, [pc, #176]	; (8002500 <XPT2046_Task+0x178>)
 800244e:	440b      	add	r3, r1
 8002450:	4619      	mov	r1, r3
 8002452:	4610      	mov	r0, r2
 8002454:	f7ff feb8 	bl	80021c8 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002458:	4b28      	ldr	r3, [pc, #160]	; (80024fc <XPT2046_Task+0x174>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	3301      	adds	r3, #1
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b26      	ldr	r3, [pc, #152]	; (80024fc <XPT2046_Task+0x174>)
 8002462:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <XPT2046_Task+0x174>)
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <XPT2046_Task+0x180>)
 800246a:	fba3 1302 	umull	r1, r3, r3, r2
 800246e:	08d9      	lsrs	r1, r3, #3
 8002470:	460b      	mov	r3, r1
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <XPT2046_Task+0x174>)
 800247e:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8002480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002484:	481f      	ldr	r0, [pc, #124]	; (8002504 <XPT2046_Task+0x17c>)
 8002486:	f008 fe7b 	bl	800b180 <HAL_GPIO_ReadPin>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d102      	bne.n	8002496 <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8002490:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <XPT2046_Task+0x16c>)
 8002492:	2203      	movs	r2, #3
 8002494:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002496:	f007 ff0f 	bl	800a2b8 <HAL_GetTick>
 800249a:	4603      	mov	r3, r0
 800249c:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <XPT2046_Task+0x170>)
 800249e:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80024a0:	e024      	b.n	80024ec <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <XPT2046_Task+0x16c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <XPT2046_Task+0x174>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80024ae:	e009      	b.n	80024c4 <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80024b0:	4b16      	ldr	r3, [pc, #88]	; (800250c <XPT2046_Task+0x184>)
 80024b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b6:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <XPT2046_Task+0x188>)
 80024ba:	f993 3000 	ldrsb.w	r3, [r3]
 80024be:	4618      	mov	r0, r3
 80024c0:	f008 f8bc 	bl	800a63c <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <XPT2046_Task+0x188>)
 80024c6:	f993 3000 	ldrsb.w	r3, [r3]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f008 f8a7 	bl	800a61e <HAL_NVIC_GetPendingIRQ>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ec      	bne.n	80024b0 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <XPT2046_Task+0x188>)
 80024d8:	f993 3000 	ldrsb.w	r3, [r3]
 80024dc:	4618      	mov	r0, r3
 80024de:	f008 f876 	bl	800a5ce <HAL_NVIC_EnableIRQ>
		  break;
 80024e2:	e004      	b.n	80024ee <XPT2046_Task+0x166>
		  break;
 80024e4:	bf00      	nop
 80024e6:	e002      	b.n	80024ee <XPT2046_Task+0x166>
		  break;
 80024e8:	bf00      	nop
 80024ea:	e000      	b.n	80024ee <XPT2046_Task+0x166>
		  break;
 80024ec:	bf00      	nop

	  }
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000037d 	.word	0x2000037d
 80024f8:	20000380 	.word	0x20000380
 80024fc:	2000037c 	.word	0x2000037c
 8002500:	20000354 	.word	0x20000354
 8002504:	40020000 	.word	0x40020000
 8002508:	cccccccd 	.word	0xcccccccd
 800250c:	40013c00 	.word	0x40013c00
 8002510:	20000234 	.word	0x20000234

08002514 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002518:	2017      	movs	r0, #23
 800251a:	f008 f866 	bl	800a5ea <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 800251e:	4b02      	ldr	r3, [pc, #8]	; (8002528 <XPT2046_IRQ+0x14>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000037d 	.word	0x2000037d

0800252c <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <XPT2046_Init+0x84>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 800253e:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <XPT2046_Init+0x88>)
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 8002544:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <XPT2046_Init+0x8c>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 800254a:	2201      	movs	r2, #1
 800254c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002550:	481a      	ldr	r0, [pc, #104]	; (80025bc <XPT2046_Init+0x90>)
 8002552:	f008 fe2d 	bl	800b1b0 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <XPT2046_Init+0x94>)
 8002558:	2290      	movs	r2, #144	; 0x90
 800255a:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <XPT2046_Init+0x98>)
 800255e:	22d0      	movs	r2, #208	; 0xd0
 8002560:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8002562:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <XPT2046_Init+0x9c>)
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002568:	f7ff fde4 	bl	8002134 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 800256c:	2001      	movs	r0, #1
 800256e:	f007 feaf 	bl	800a2d0 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <XPT2046_Init+0x94>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	08db      	lsrs	r3, r3, #3
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <XPT2046_Init+0x9c>)
 800257c:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <XPT2046_Init+0x94>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	015b      	lsls	r3, r3, #5
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <XPT2046_Init+0x9c>)
 8002588:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <XPT2046_Init+0x98>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	08db      	lsrs	r3, r3, #3
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <XPT2046_Init+0x9c>)
 8002594:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <XPT2046_Init+0x98>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	015b      	lsls	r3, r3, #5
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <XPT2046_Init+0x9c>)
 80025a0:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <XPT2046_Init+0x9c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	711a      	strb	r2, [r3, #4]
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000230 	.word	0x20000230
 80025b4:	20000234 	.word	0x20000234
 80025b8:	2000037d 	.word	0x2000037d
 80025bc:	40020400 	.word	0x40020400
 80025c0:	20000235 	.word	0x20000235
 80025c4:	20000236 	.word	0x20000236
 80025c8:	20000238 	.word	0x20000238

080025cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	4b27      	ldr	r3, [pc, #156]	; (8002674 <MX_DMA_Init+0xa8>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a26      	ldr	r2, [pc, #152]	; (8002674 <MX_DMA_Init+0xa8>)
 80025dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <MX_DMA_Init+0xa8>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <MX_DMA_Init+0xa8>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a1f      	ldr	r2, [pc, #124]	; (8002674 <MX_DMA_Init+0xa8>)
 80025f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <MX_DMA_Init+0xa8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	200b      	movs	r0, #11
 8002610:	f007 ffc1 	bl	800a596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002614:	200b      	movs	r0, #11
 8002616:	f007 ffda 	bl	800a5ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	200c      	movs	r0, #12
 8002620:	f007 ffb9 	bl	800a596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002624:	200c      	movs	r0, #12
 8002626:	f007 ffd2 	bl	800a5ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2010      	movs	r0, #16
 8002630:	f007 ffb1 	bl	800a596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002634:	2010      	movs	r0, #16
 8002636:	f007 ffca 	bl	800a5ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	2011      	movs	r0, #17
 8002640:	f007 ffa9 	bl	800a596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002644:	2011      	movs	r0, #17
 8002646:	f007 ffc2 	bl	800a5ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	203a      	movs	r0, #58	; 0x3a
 8002650:	f007 ffa1 	bl	800a596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002654:	203a      	movs	r0, #58	; 0x3a
 8002656:	f007 ffba 	bl	800a5ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2046      	movs	r0, #70	; 0x46
 8002660:	f007 ff99 	bl	800a596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002664:	2046      	movs	r0, #70	; 0x46
 8002666:	f007 ffb2 	bl	800a5ce <HAL_NVIC_EnableIRQ>

}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800

08002678 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002680:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <DS3231_Init+0x30>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002686:	2000      	movs	r0, #0
 8002688:	f000 f8ca 	bl	8002820 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 800268c:	2000      	movs	r0, #0
 800268e:	f000 f88e 	bl	80027ae <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8002692:	f000 f8e7 	bl	8002864 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002696:	f000 f8ad 	bl	80027f4 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800269a:	2001      	movs	r0, #1
 800269c:	f000 f846 	bl	800272c <DS3231_SetInterruptMode>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000384 	.word	0x20000384

080026ac <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	4603      	mov	r3, r0
 80026b4:	460a      	mov	r2, r1
 80026b6:	71fb      	strb	r3, [r7, #7]
 80026b8:	4613      	mov	r3, r2
 80026ba:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	733b      	strb	r3, [r7, #12]
 80026c0:	79bb      	ldrb	r3, [r7, #6]
 80026c2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <DS3231_SetRegByte+0x38>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	f107 020c 	add.w	r2, r7, #12
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2302      	movs	r3, #2
 80026d4:	21d0      	movs	r1, #208	; 0xd0
 80026d6:	f008 fefb 	bl	800b4d0 <HAL_I2C_Master_Transmit>
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000384 	.word	0x20000384

080026e8 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <DS3231_GetRegByte+0x40>)
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	1dfa      	adds	r2, r7, #7
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2301      	movs	r3, #1
 8002700:	21d0      	movs	r1, #208	; 0xd0
 8002702:	f008 fee5 	bl	800b4d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <DS3231_GetRegByte+0x40>)
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	f107 020f 	add.w	r2, r7, #15
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2301      	movs	r3, #1
 8002716:	21d0      	movs	r1, #208	; 0xd0
 8002718:	f008 ffd8 	bl	800b6cc <HAL_I2C_Master_Receive>
	return val;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000384 	.word	0x20000384

0800272c <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002736:	200e      	movs	r0, #14
 8002738:	f7ff ffd6 	bl	80026e8 <DS3231_GetRegByte>
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8002740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002744:	f023 0304 	bic.w	r3, r3, #4
 8002748:	b25a      	sxtb	r2, r3
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	b25b      	sxtb	r3, r3
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	b25b      	sxtb	r3, r3
 8002756:	4313      	orrs	r3, r2
 8002758:	b25b      	sxtb	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4619      	mov	r1, r3
 800275e:	200e      	movs	r0, #14
 8002760:	f7ff ffa4 	bl	80026ac <DS3231_SetRegByte>
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002776:	200e      	movs	r0, #14
 8002778:	f7ff ffb6 	bl	80026e8 <DS3231_GetRegByte>
 800277c:	4603      	mov	r3, r0
 800277e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 8002780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002788:	b25b      	sxtb	r3, r3
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	2a00      	cmp	r2, #0
 800278e:	d102      	bne.n	8002796 <DS3231_EnableOscillator+0x2a>
 8002790:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002794:	e000      	b.n	8002798 <DS3231_EnableOscillator+0x2c>
 8002796:	2200      	movs	r2, #0
 8002798:	4313      	orrs	r3, r2
 800279a:	b25b      	sxtb	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	4619      	mov	r1, r3
 80027a0:	200e      	movs	r0, #14
 80027a2:	f7ff ff83 	bl	80026ac <DS3231_SetRegByte>
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80027b8:	200e      	movs	r0, #14
 80027ba:	f7ff ff95 	bl	80026e8 <DS3231_GetRegByte>
 80027be:	4603      	mov	r3, r0
 80027c0:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	f023 0302 	bic.w	r3, r3, #2
 80027ca:	b25a      	sxtb	r2, r3
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	4313      	orrs	r3, r2
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4619      	mov	r1, r3
 80027e0:	200e      	movs	r0, #14
 80027e2:	f7ff ff63 	bl	80026ac <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80027e6:	2001      	movs	r0, #1
 80027e8:	f7ff ffa0 	bl	800272c <DS3231_SetInterruptMode>
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80027fa:	200f      	movs	r0, #15
 80027fc:	f7ff ff74 	bl	80026e8 <DS3231_GetRegByte>
 8002800:	4603      	mov	r3, r0
 8002802:	f023 0302 	bic.w	r3, r3, #2
 8002806:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f023 0302 	bic.w	r3, r3, #2
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4619      	mov	r1, r3
 8002812:	200f      	movs	r0, #15
 8002814:	f7ff ff4a 	bl	80026ac <DS3231_SetRegByte>
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 800282a:	200e      	movs	r0, #14
 800282c:	f7ff ff5c 	bl	80026e8 <DS3231_GetRegByte>
 8002830:	4603      	mov	r3, r0
 8002832:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	b25a      	sxtb	r2, r3
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	b25b      	sxtb	r3, r3
 8002848:	4313      	orrs	r3, r2
 800284a:	b25b      	sxtb	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	4619      	mov	r1, r3
 8002850:	200e      	movs	r0, #14
 8002852:	f7ff ff2b 	bl	80026ac <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002856:	2001      	movs	r0, #1
 8002858:	f7ff ff68 	bl	800272c <DS3231_SetInterruptMode>
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 800286a:	200f      	movs	r0, #15
 800286c:	f7ff ff3c 	bl	80026e8 <DS3231_GetRegByte>
 8002870:	4603      	mov	r3, r0
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4619      	mov	r1, r3
 8002882:	200f      	movs	r0, #15
 8002884:	f7ff ff12 	bl	80026ac <DS3231_SetRegByte>
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002894:	2003      	movs	r0, #3
 8002896:	f7ff ff27 	bl	80026e8 <DS3231_GetRegByte>
 800289a:	4603      	mov	r3, r0
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f866 	bl	800296e <DS3231_DecodeBCD>
 80028a2:	4603      	mov	r3, r0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 80028ac:	2002      	movs	r0, #2
 80028ae:	f7ff ff1b 	bl	80026e8 <DS3231_GetRegByte>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f85a 	bl	800296e <DS3231_DecodeBCD>
 80028ba:	4603      	mov	r3, r0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}

080028c0 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80028c4:	2001      	movs	r0, #1
 80028c6:	f7ff ff0f 	bl	80026e8 <DS3231_GetRegByte>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 f84e 	bl	800296e <DS3231_DecodeBCD>
 80028d2:	4603      	mov	r3, r0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 f85b 	bl	80029a0 <DS3231_EncodeBCD>
 80028ea:	4603      	mov	r3, r0
 80028ec:	4619      	mov	r1, r3
 80028ee:	2003      	movs	r0, #3
 80028f0:	f7ff fedc 	bl	80026ac <DS3231_SetRegByte>
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f846 	bl	80029a0 <DS3231_EncodeBCD>
 8002914:	4603      	mov	r3, r0
 8002916:	4619      	mov	r1, r3
 8002918:	2002      	movs	r0, #2
 800291a:	f7ff fec7 	bl	80026ac <DS3231_SetRegByte>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f834 	bl	80029a0 <DS3231_EncodeBCD>
 8002938:	4603      	mov	r3, r0
 800293a:	4619      	mov	r1, r3
 800293c:	2001      	movs	r0, #1
 800293e:	f7ff feb5 	bl	80026ac <DS3231_SetRegByte>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f822 	bl	80029a0 <DS3231_EncodeBCD>
 800295c:	4603      	mov	r3, r0
 800295e:	4619      	mov	r1, r3
 8002960:	2000      	movs	r0, #0
 8002962:	f7ff fea3 	bl	80026ac <DS3231_SetRegByte>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	0092      	lsls	r2, r2, #2
 8002982:	4413      	add	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	b2da      	uxtb	r2, r3
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	b2db      	uxtb	r3, r3
 8002990:	4413      	add	r3, r2
 8002992:	b2db      	uxtb	r3, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 80029aa:	79fa      	ldrb	r2, [r7, #7]
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <DS3231_EncodeBCD+0x40>)
 80029ae:	fba3 1302 	umull	r1, r3, r3, r2
 80029b2:	08d9      	lsrs	r1, r3, #3
 80029b4:	460b      	mov	r3, r1
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	4907      	ldr	r1, [pc, #28]	; (80029e0 <DS3231_EncodeBCD+0x40>)
 80029c4:	fba1 1303 	umull	r1, r3, r1, r3
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	b2db      	uxtb	r3, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	cccccccd 	.word	0xcccccccd

080029e4 <eeprom_wait>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Basic function to work with I2C EEPROM
//
void eeprom_wait(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 80029e8:	bf00      	nop
 80029ea:	f007 fc65 	bl	800a2b8 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <eeprom_wait+0x1c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d9f7      	bls.n	80029ea <eeprom_wait+0x6>
    {
    }
}
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000248 	.word	0x20000248

08002a04 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af04      	add	r7, sp, #16
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 8002a10:	f7ff ffe8 	bl	80029e4 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a20:	9102      	str	r1, [sp, #8]
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	21a0      	movs	r1, #160	; 0xa0
 8002a2c:	4803      	ldr	r0, [pc, #12]	; (8002a3c <eeprom_read+0x38>)
 8002a2e:	f009 f96d 	bl	800bd0c <HAL_I2C_Mem_Read>
 8002a32:	4603      	mov	r3, r0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000388 	.word	0x20000388

08002a40 <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af04      	add	r7, sp, #16
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002a4c:	f7ff ffca 	bl	80029e4 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	9102      	str	r1, [sp, #8]
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2301      	movs	r3, #1
 8002a66:	21a0      	movs	r1, #160	; 0xa0
 8002a68:	4807      	ldr	r0, [pc, #28]	; (8002a88 <eeprom_write+0x48>)
 8002a6a:	f009 f855 	bl	800bb18 <HAL_I2C_Mem_Write>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 8002a72:	f007 fc21 	bl	800a2b8 <HAL_GetTick>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <eeprom_write+0x4c>)
 8002a7a:	6013      	str	r3, [r2, #0]

    return rc;
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000388 	.word	0x20000388
 8002a8c:	20000248 	.word	0x20000248

08002a90 <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	460a      	mov	r2, r1
 8002a9a:	71fb      	strb	r3, [r7, #7]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002aa0:	79bb      	ldrb	r3, [r7, #6]
 8002aa2:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <EEPROM_RelayStateUpdate+0x2a>
 8002aaa:	f107 030f 	add.w	r3, r7, #15
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	202e      	movs	r0, #46	; 0x2e
 8002ab4:	f7ff ffc4 	bl	8002a40 <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 8002ab8:	e01f      	b.n	8002afa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d107      	bne.n	8002ad0 <EEPROM_RelayStateUpdate+0x40>
 8002ac0:	f107 030f 	add.w	r3, r7, #15
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	202f      	movs	r0, #47	; 0x2f
 8002aca:	f7ff ffb9 	bl	8002a40 <eeprom_write>
}
 8002ace:	e014      	b.n	8002afa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d107      	bne.n	8002ae6 <EEPROM_RelayStateUpdate+0x56>
 8002ad6:	f107 030f 	add.w	r3, r7, #15
 8002ada:	2201      	movs	r2, #1
 8002adc:	4619      	mov	r1, r3
 8002ade:	2030      	movs	r0, #48	; 0x30
 8002ae0:	f7ff ffae 	bl	8002a40 <eeprom_write>
}
 8002ae4:	e009      	b.n	8002afa <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d106      	bne.n	8002afa <EEPROM_RelayStateUpdate+0x6a>
 8002aec:	f107 030f 	add.w	r3, r7, #15
 8002af0:	2201      	movs	r2, #1
 8002af2:	4619      	mov	r1, r3
 8002af4:	2031      	movs	r0, #49	; 0x31
 8002af6:	f7ff ffa3 	bl	8002a40 <eeprom_write>
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	460a      	mov	r2, r1
 8002b0c:	71fb      	strb	r3, [r7, #7]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 8002b12:	79bb      	ldrb	r3, [r7, #6]
 8002b14:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <EEPROM_LightStateUpdate+0x2a>
 8002b1c:	f107 030f 	add.w	r3, r7, #15
 8002b20:	2201      	movs	r2, #1
 8002b22:	4619      	mov	r1, r3
 8002b24:	2033      	movs	r0, #51	; 0x33
 8002b26:	f7ff ff8b 	bl	8002a40 <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002b2a:	e01f      	b.n	8002b6c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d107      	bne.n	8002b42 <EEPROM_LightStateUpdate+0x40>
 8002b32:	f107 030f 	add.w	r3, r7, #15
 8002b36:	2201      	movs	r2, #1
 8002b38:	4619      	mov	r1, r3
 8002b3a:	2034      	movs	r0, #52	; 0x34
 8002b3c:	f7ff ff80 	bl	8002a40 <eeprom_write>
}
 8002b40:	e014      	b.n	8002b6c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d107      	bne.n	8002b58 <EEPROM_LightStateUpdate+0x56>
 8002b48:	f107 030f 	add.w	r3, r7, #15
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4619      	mov	r1, r3
 8002b50:	2035      	movs	r0, #53	; 0x35
 8002b52:	f7ff ff75 	bl	8002a40 <eeprom_write>
}
 8002b56:	e009      	b.n	8002b6c <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d106      	bne.n	8002b6c <EEPROM_LightStateUpdate+0x6a>
 8002b5e:	f107 030f 	add.w	r3, r7, #15
 8002b62:	2201      	movs	r2, #1
 8002b64:	4619      	mov	r1, r3
 8002b66:	2036      	movs	r0, #54	; 0x36
 8002b68:	f7ff ff6a 	bl	8002a40 <eeprom_write>
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d107      	bne.n	8002b98 <EEPROM_RelayStateRead+0x24>
 8002b88:	f107 030f 	add.w	r3, r7, #15
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	4619      	mov	r1, r3
 8002b90:	202e      	movs	r0, #46	; 0x2e
 8002b92:	f7ff ff37 	bl	8002a04 <eeprom_read>
 8002b96:	e01f      	b.n	8002bd8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d107      	bne.n	8002bae <EEPROM_RelayStateRead+0x3a>
 8002b9e:	f107 030f 	add.w	r3, r7, #15
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	202f      	movs	r0, #47	; 0x2f
 8002ba8:	f7ff ff2c 	bl	8002a04 <eeprom_read>
 8002bac:	e014      	b.n	8002bd8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d107      	bne.n	8002bc4 <EEPROM_RelayStateRead+0x50>
 8002bb4:	f107 030f 	add.w	r3, r7, #15
 8002bb8:	2201      	movs	r2, #1
 8002bba:	4619      	mov	r1, r3
 8002bbc:	2030      	movs	r0, #48	; 0x30
 8002bbe:	f7ff ff21 	bl	8002a04 <eeprom_read>
 8002bc2:	e009      	b.n	8002bd8 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d106      	bne.n	8002bd8 <EEPROM_RelayStateRead+0x64>
 8002bca:	f107 030f 	add.w	r3, r7, #15
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	2031      	movs	r0, #49	; 0x31
 8002bd4:	f7ff ff16 	bl	8002a04 <eeprom_read>

	return RelayStan;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d107      	bne.n	8002c06 <EEPROM_LightStateRead+0x24>
 8002bf6:	f107 030f 	add.w	r3, r7, #15
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	2033      	movs	r0, #51	; 0x33
 8002c00:	f7ff ff00 	bl	8002a04 <eeprom_read>
 8002c04:	e01f      	b.n	8002c46 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d107      	bne.n	8002c1c <EEPROM_LightStateRead+0x3a>
 8002c0c:	f107 030f 	add.w	r3, r7, #15
 8002c10:	2201      	movs	r2, #1
 8002c12:	4619      	mov	r1, r3
 8002c14:	2034      	movs	r0, #52	; 0x34
 8002c16:	f7ff fef5 	bl	8002a04 <eeprom_read>
 8002c1a:	e014      	b.n	8002c46 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d107      	bne.n	8002c32 <EEPROM_LightStateRead+0x50>
 8002c22:	f107 030f 	add.w	r3, r7, #15
 8002c26:	2201      	movs	r2, #1
 8002c28:	4619      	mov	r1, r3
 8002c2a:	2035      	movs	r0, #53	; 0x35
 8002c2c:	f7ff feea 	bl	8002a04 <eeprom_read>
 8002c30:	e009      	b.n	8002c46 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d106      	bne.n	8002c46 <EEPROM_LightStateRead+0x64>
 8002c38:	f107 030f 	add.w	r3, r7, #15
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4619      	mov	r1, r3
 8002c40:	2036      	movs	r0, #54	; 0x36
 8002c42:	f7ff fedf 	bl	8002a04 <eeprom_read>

	return AktualnyStan;
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002c54:	2001      	movs	r0, #1
 8002c56:	f7ff ff8d 	bl	8002b74 <EEPROM_RelayStateRead>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <EEPROM_RelayStateRestore+0x18>
 8002c60:	2005      	movs	r0, #5
 8002c62:	f006 f8e9 	bl	8008e38 <SendComand>
 8002c66:	e002      	b.n	8002c6e <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002c68:	2006      	movs	r0, #6
 8002c6a:	f006 f8e5 	bl	8008e38 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002c6e:	2002      	movs	r0, #2
 8002c70:	f7ff ff80 	bl	8002b74 <EEPROM_RelayStateRead>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <EEPROM_RelayStateRestore+0x32>
 8002c7a:	2007      	movs	r0, #7
 8002c7c:	f006 f8dc 	bl	8008e38 <SendComand>
 8002c80:	e002      	b.n	8002c88 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002c82:	2008      	movs	r0, #8
 8002c84:	f006 f8d8 	bl	8008e38 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002c88:	2003      	movs	r0, #3
 8002c8a:	f7ff ff73 	bl	8002b74 <EEPROM_RelayStateRead>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <EEPROM_RelayStateRestore+0x4c>
 8002c94:	2009      	movs	r0, #9
 8002c96:	f006 f8cf 	bl	8008e38 <SendComand>
 8002c9a:	e002      	b.n	8002ca2 <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002c9c:	200a      	movs	r0, #10
 8002c9e:	f006 f8cb 	bl	8008e38 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002ca2:	2004      	movs	r0, #4
 8002ca4:	f7ff ff66 	bl	8002b74 <EEPROM_RelayStateRead>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <EEPROM_RelayStateRestore+0x66>
 8002cae:	200b      	movs	r0, #11
 8002cb0:	f006 f8c2 	bl	8008e38 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002cb4:	e002      	b.n	8002cbc <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002cb6:	200c      	movs	r0, #12
 8002cb8:	f006 f8be 	bl	8008e38 <SendComand>
}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7ff ff8c 	bl	8002be2 <EEPROM_LightStateRead>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <EEPROM_LightStateRestore+0x18>
 8002cd0:	200d      	movs	r0, #13
 8002cd2:	f006 f8b1 	bl	8008e38 <SendComand>
 8002cd6:	e002      	b.n	8002cde <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002cd8:	200e      	movs	r0, #14
 8002cda:	f006 f8ad 	bl	8008e38 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002cde:	2002      	movs	r0, #2
 8002ce0:	f7ff ff7f 	bl	8002be2 <EEPROM_LightStateRead>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <EEPROM_LightStateRestore+0x32>
 8002cea:	200f      	movs	r0, #15
 8002cec:	f006 f8a4 	bl	8008e38 <SendComand>
 8002cf0:	e002      	b.n	8002cf8 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002cf2:	2010      	movs	r0, #16
 8002cf4:	f006 f8a0 	bl	8008e38 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	f7ff ff72 	bl	8002be2 <EEPROM_LightStateRead>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <EEPROM_LightStateRestore+0x4c>
 8002d04:	2011      	movs	r0, #17
 8002d06:	f006 f897 	bl	8008e38 <SendComand>
 8002d0a:	e002      	b.n	8002d12 <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002d0c:	2012      	movs	r0, #18
 8002d0e:	f006 f893 	bl	8008e38 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002d12:	2004      	movs	r0, #4
 8002d14:	f7ff ff65 	bl	8002be2 <EEPROM_LightStateRead>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <EEPROM_LightStateRestore+0x66>
 8002d1e:	2013      	movs	r0, #19
 8002d20:	f006 f88a 	bl	8008e38 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002d24:	e002      	b.n	8002d2c <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002d26:	2014      	movs	r0, #20
 8002d28:	f006 f886 	bl	8008e38 <SendComand>
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002d46:	f107 030a 	add.w	r3, r7, #10
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	2005      	movs	r0, #5
 8002d50:	f7ff fe58 	bl	8002a04 <eeprom_read>
 8002d54:	e009      	b.n	8002d6a <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d106      	bne.n	8002d6a <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002d5c:	f107 030a 	add.w	r3, r7, #10
 8002d60:	2201      	movs	r2, #1
 8002d62:	4619      	mov	r1, r3
 8002d64:	200c      	movs	r0, #12
 8002d66:	f7ff fe4d 	bl	8002a04 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	72fb      	strb	r3, [r7, #11]
 8002d72:	e016      	b.n	8002da2 <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002d74:	7abb      	ldrb	r3, [r7, #10]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002d80:	7afb      	ldrb	r3, [r7, #11]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	e004      	b.n	8002d96 <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002d8c:	7afb      	ldrb	r3, [r7, #11]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002d9c:	7afb      	ldrb	r3, [r7, #11]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	72fb      	strb	r3, [r7, #11]
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d9e5      	bls.n	8002d74 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	6039      	str	r1, [r7, #0]
 8002dbc:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	72fb      	strb	r3, [r7, #11]
 8002dca:	e011      	b.n	8002df0 <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002dcc:	7afb      	ldrb	r3, [r7, #11]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	7abb      	ldrb	r3, [r7, #10]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002dea:	7afb      	ldrb	r3, [r7, #11]
 8002dec:	3301      	adds	r3, #1
 8002dee:	72fb      	strb	r3, [r7, #11]
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d9ea      	bls.n	8002dcc <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d107      	bne.n	8002e0c <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002dfc:	f107 030a 	add.w	r3, r7, #10
 8002e00:	2201      	movs	r2, #1
 8002e02:	4619      	mov	r1, r3
 8002e04:	2005      	movs	r0, #5
 8002e06:	f7ff fe1b 	bl	8002a40 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002e0a:	e009      	b.n	8002e20 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d106      	bne.n	8002e20 <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002e12:	f107 030a 	add.w	r3, r7, #10
 8002e16:	2201      	movs	r2, #1
 8002e18:	4619      	mov	r1, r3
 8002e1a:	200c      	movs	r0, #12
 8002e1c:	f7ff fe10 	bl	8002a40 <eeprom_write>
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10e      	bne.n	8002e60 <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8002e42:	f107 0309 	add.w	r3, r7, #9
 8002e46:	2201      	movs	r2, #1
 8002e48:	4619      	mov	r1, r3
 8002e4a:	2006      	movs	r0, #6
 8002e4c:	f7ff fdda 	bl	8002a04 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8002e50:	f107 0308 	add.w	r3, r7, #8
 8002e54:	2201      	movs	r2, #1
 8002e56:	4619      	mov	r1, r3
 8002e58:	2007      	movs	r0, #7
 8002e5a:	f7ff fdd3 	bl	8002a04 <eeprom_read>
 8002e5e:	e010      	b.n	8002e82 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d10d      	bne.n	8002e82 <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 8002e66:	f107 0309 	add.w	r3, r7, #9
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	200d      	movs	r0, #13
 8002e70:	f7ff fdc8 	bl	8002a04 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8002e74:	f107 0308 	add.w	r3, r7, #8
 8002e78:	2201      	movs	r2, #1
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	200e      	movs	r0, #14
 8002e7e:	f7ff fdc1 	bl	8002a04 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8002e82:	2301      	movs	r3, #1
 8002e84:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	72fb      	strb	r3, [r7, #11]
 8002e8a:	e016      	b.n	8002eba <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8002e8c:	7a7b      	ldrb	r3, [r7, #9]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 8002e98:	7afb      	ldrb	r3, [r7, #11]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e004      	b.n	8002eae <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8002ea4:	7afb      	ldrb	r3, [r7, #11]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	72fb      	strb	r3, [r7, #11]
 8002eba:	7afb      	ldrb	r3, [r7, #11]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d9e5      	bls.n	8002e8c <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	72bb      	strb	r3, [r7, #10]
 8002ec8:	e016      	b.n	8002ef8 <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 8002eca:	7a3b      	ldrb	r3, [r7, #8]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 8002ed6:	7abb      	ldrb	r3, [r7, #10]
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e004      	b.n	8002eec <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 8002ee2:	7abb      	ldrb	r3, [r7, #10]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002ef2:	7abb      	ldrb	r3, [r7, #10]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	72bb      	strb	r3, [r7, #10]
 8002ef8:	7abb      	ldrb	r3, [r7, #10]
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d9e5      	bls.n	8002eca <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	6039      	str	r1, [r7, #0]
 8002f12:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002f20:	2300      	movs	r3, #0
 8002f22:	72fb      	strb	r3, [r7, #11]
 8002f24:	e011      	b.n	8002f4a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 8002f26:	7afb      	ldrb	r3, [r7, #11]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	7a7b      	ldrb	r3, [r7, #9]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002f44:	7afb      	ldrb	r3, [r7, #11]
 8002f46:	3301      	adds	r3, #1
 8002f48:	72fb      	strb	r3, [r7, #11]
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d9ea      	bls.n	8002f26 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8002f50:	2301      	movs	r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002f54:	2304      	movs	r3, #4
 8002f56:	72bb      	strb	r3, [r7, #10]
 8002f58:	e011      	b.n	8002f7e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 8002f5a:	7abb      	ldrb	r3, [r7, #10]
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	7a3b      	ldrb	r3, [r7, #8]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002f78:	7abb      	ldrb	r3, [r7, #10]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	72bb      	strb	r3, [r7, #10]
 8002f7e:	7abb      	ldrb	r3, [r7, #10]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d9ea      	bls.n	8002f5a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d10e      	bne.n	8002fa8 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 8002f8a:	f107 0309 	add.w	r3, r7, #9
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4619      	mov	r1, r3
 8002f92:	2006      	movs	r0, #6
 8002f94:	f7ff fd54 	bl	8002a40 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 8002f98:	f107 0308 	add.w	r3, r7, #8
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	2007      	movs	r0, #7
 8002fa2:	f7ff fd4d 	bl	8002a40 <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 8002fa6:	e010      	b.n	8002fca <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d10d      	bne.n	8002fca <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8002fae:	f107 0309 	add.w	r3, r7, #9
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	200d      	movs	r0, #13
 8002fb8:	f7ff fd42 	bl	8002a40 <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	200e      	movs	r0, #14
 8002fc6:	f7ff fd3b 	bl	8002a40 <eeprom_write>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	6039      	str	r1, [r7, #0]
 8002fdc:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d107      	bne.n	8002ff8 <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 8002fe8:	f107 030f 	add.w	r3, r7, #15
 8002fec:	2201      	movs	r2, #1
 8002fee:	4619      	mov	r1, r3
 8002ff0:	2008      	movs	r0, #8
 8002ff2:	f7ff fd07 	bl	8002a04 <eeprom_read>
 8002ff6:	e009      	b.n	800300c <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d106      	bne.n	800300c <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 8002ffe:	f107 030f 	add.w	r3, r7, #15
 8003002:	2201      	movs	r2, #1
 8003004:	4619      	mov	r1, r3
 8003006:	200f      	movs	r0, #15
 8003008:	f7ff fcfc 	bl	8002a04 <eeprom_read>
	}

	*hourOn = TempHour;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	701a      	strb	r2, [r3, #0]
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	6039      	str	r1, [r7, #0]
 8003024:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d107      	bne.n	8003040 <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003030:	f107 030f 	add.w	r3, r7, #15
 8003034:	2201      	movs	r2, #1
 8003036:	4619      	mov	r1, r3
 8003038:	2009      	movs	r0, #9
 800303a:	f7ff fce3 	bl	8002a04 <eeprom_read>
 800303e:	e009      	b.n	8003054 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d106      	bne.n	8003054 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8003046:	f107 030f 	add.w	r3, r7, #15
 800304a:	2201      	movs	r2, #1
 800304c:	4619      	mov	r1, r3
 800304e:	2010      	movs	r0, #16
 8003050:	f7ff fcd8 	bl	8002a04 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	701a      	strb	r2, [r3, #0]
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	6039      	str	r1, [r7, #0]
 800306c:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 8003078:	f107 030f 	add.w	r3, r7, #15
 800307c:	2201      	movs	r2, #1
 800307e:	4619      	mov	r1, r3
 8003080:	200a      	movs	r0, #10
 8003082:	f7ff fcbf 	bl	8002a04 <eeprom_read>
 8003086:	e009      	b.n	800309c <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d106      	bne.n	800309c <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 800308e:	f107 030f 	add.w	r3, r7, #15
 8003092:	2201      	movs	r2, #1
 8003094:	4619      	mov	r1, r3
 8003096:	2011      	movs	r0, #17
 8003098:	f7ff fcb4 	bl	8002a04 <eeprom_read>
	}

	*hourOff = TempHour;
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	701a      	strb	r2, [r3, #0]

}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	6039      	str	r1, [r7, #0]
 80030b4:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d107      	bne.n	80030d0 <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80030c0:	f107 030f 	add.w	r3, r7, #15
 80030c4:	2201      	movs	r2, #1
 80030c6:	4619      	mov	r1, r3
 80030c8:	200b      	movs	r0, #11
 80030ca:	f7ff fc9b 	bl	8002a04 <eeprom_read>
 80030ce:	e009      	b.n	80030e4 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d106      	bne.n	80030e4 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 80030d6:	f107 030f 	add.w	r3, r7, #15
 80030da:	2201      	movs	r2, #1
 80030dc:	4619      	mov	r1, r3
 80030de:	2012      	movs	r0, #18
 80030e0:	f7ff fc90 	bl	8002a04 <eeprom_read>
	}
	*minuteOff = TempMinute;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	701a      	strb	r2, [r3, #0]
}
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE IN EEPROM
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	460a      	mov	r2, r1
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	4613      	mov	r3, r2
 8003100:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 8003102:	79bb      	ldrb	r3, [r7, #6]
 8003104:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d107      	bne.n	800311c <EEPROM_ScheduleHourOnUpdate+0x2a>
 800310c:	f107 030f 	add.w	r3, r7, #15
 8003110:	2201      	movs	r2, #1
 8003112:	4619      	mov	r1, r3
 8003114:	2008      	movs	r0, #8
 8003116:	f7ff fc93 	bl	8002a40 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 800311a:	e009      	b.n	8003130 <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d106      	bne.n	8003130 <EEPROM_ScheduleHourOnUpdate+0x3e>
 8003122:	f107 030f 	add.w	r3, r7, #15
 8003126:	2201      	movs	r2, #1
 8003128:	4619      	mov	r1, r3
 800312a:	200f      	movs	r0, #15
 800312c:	f7ff fc88 	bl	8002a40 <eeprom_write>
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	460a      	mov	r2, r1
 8003142:	71fb      	strb	r3, [r7, #7]
 8003144:	4613      	mov	r3, r2
 8003146:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 8003148:	79bb      	ldrb	r3, [r7, #6]
 800314a:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 8003152:	f107 030f 	add.w	r3, r7, #15
 8003156:	2201      	movs	r2, #1
 8003158:	4619      	mov	r1, r3
 800315a:	2009      	movs	r0, #9
 800315c:	f7ff fc70 	bl	8002a40 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 8003160:	e009      	b.n	8003176 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d106      	bne.n	8003176 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 8003168:	f107 030f 	add.w	r3, r7, #15
 800316c:	2201      	movs	r2, #1
 800316e:	4619      	mov	r1, r3
 8003170:	2010      	movs	r0, #16
 8003172:	f7ff fc65 	bl	8002a40 <eeprom_write>
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE IN EEPROM
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	4603      	mov	r3, r0
 8003186:	460a      	mov	r2, r1
 8003188:	71fb      	strb	r3, [r7, #7]
 800318a:	4613      	mov	r3, r2
 800318c:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 800318e:	79bb      	ldrb	r3, [r7, #6]
 8003190:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d107      	bne.n	80031a8 <EEPROM_ScheduleHourOffUpdate+0x2a>
 8003198:	f107 030f 	add.w	r3, r7, #15
 800319c:	2201      	movs	r2, #1
 800319e:	4619      	mov	r1, r3
 80031a0:	200a      	movs	r0, #10
 80031a2:	f7ff fc4d 	bl	8002a40 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 80031a6:	e009      	b.n	80031bc <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d106      	bne.n	80031bc <EEPROM_ScheduleHourOffUpdate+0x3e>
 80031ae:	f107 030f 	add.w	r3, r7, #15
 80031b2:	2201      	movs	r2, #1
 80031b4:	4619      	mov	r1, r3
 80031b6:	2011      	movs	r0, #17
 80031b8:	f7ff fc42 	bl	8002a40 <eeprom_write>
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	460a      	mov	r2, r1
 80031ce:	71fb      	strb	r3, [r7, #7]
 80031d0:	4613      	mov	r3, r2
 80031d2:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80031d4:	79bb      	ldrb	r3, [r7, #6]
 80031d6:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d107      	bne.n	80031ee <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80031de:	f107 030f 	add.w	r3, r7, #15
 80031e2:	2201      	movs	r2, #1
 80031e4:	4619      	mov	r1, r3
 80031e6:	200b      	movs	r0, #11
 80031e8:	f7ff fc2a 	bl	8002a40 <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 80031ec:	e009      	b.n	8003202 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d106      	bne.n	8003202 <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 80031f4:	f107 030f 	add.w	r3, r7, #15
 80031f8:	2201      	movs	r2, #1
 80031fa:	4619      	mov	r1, r3
 80031fc:	2012      	movs	r0, #18
 80031fe:	f7ff fc1f 	bl	8002a40 <eeprom_write>
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003212:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003216:	f7fe fedb 	bl	8001fd0 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 800321a:	238c      	movs	r3, #140	; 0x8c
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	23f0      	movs	r3, #240	; 0xf0
 8003220:	4aae      	ldr	r2, [pc, #696]	; (80034dc <system_init+0x2d0>)
 8003222:	2132      	movs	r1, #50	; 0x32
 8003224:	201e      	movs	r0, #30
 8003226:	f7fe fea8 	bl	8001f7a <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 800322a:	48ad      	ldr	r0, [pc, #692]	; (80034e0 <system_init+0x2d4>)
 800322c:	f7fe facc 	bl	80017c8 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8003230:	49ac      	ldr	r1, [pc, #688]	; (80034e4 <system_init+0x2d8>)
 8003232:	48ad      	ldr	r0, [pc, #692]	; (80034e8 <system_init+0x2dc>)
 8003234:	f00e fd1c 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003238:	f24c 6318 	movw	r3, #50712	; 0xc618
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	2300      	movs	r3, #0
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	2300      	movs	r3, #0
 8003244:	220a      	movs	r2, #10
 8003246:	213c      	movs	r1, #60	; 0x3c
 8003248:	48a7      	ldr	r0, [pc, #668]	; (80034e8 <system_init+0x2dc>)
 800324a:	f7fe fcd7 	bl	8001bfc <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 800324e:	f007 f833 	bl	800a2b8 <HAL_GetTick>
 8003252:	4603      	mov	r3, r0
 8003254:	4aa5      	ldr	r2, [pc, #660]	; (80034ec <system_init+0x2e0>)
 8003256:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 8003258:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2305      	movs	r3, #5
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2314      	movs	r3, #20
 8003264:	2214      	movs	r2, #20
 8003266:	21be      	movs	r1, #190	; 0xbe
 8003268:	203c      	movs	r0, #60	; 0x3c
 800326a:	f7fe f9df 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 800326e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	2305      	movs	r3, #5
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2314      	movs	r3, #20
 800327a:	2214      	movs	r2, #20
 800327c:	21be      	movs	r1, #190	; 0xbe
 800327e:	205a      	movs	r0, #90	; 0x5a
 8003280:	f7fe f9d4 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8003284:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	2305      	movs	r3, #5
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2314      	movs	r3, #20
 8003290:	2214      	movs	r2, #20
 8003292:	21be      	movs	r1, #190	; 0xbe
 8003294:	2078      	movs	r0, #120	; 0x78
 8003296:	f7fe f9c9 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 800329a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	2305      	movs	r3, #5
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2314      	movs	r3, #20
 80032a6:	2214      	movs	r2, #20
 80032a8:	21be      	movs	r1, #190	; 0xbe
 80032aa:	2096      	movs	r0, #150	; 0x96
 80032ac:	f7fe f9be 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 80032b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	2305      	movs	r3, #5
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2314      	movs	r3, #20
 80032bc:	2214      	movs	r2, #20
 80032be:	21be      	movs	r1, #190	; 0xbe
 80032c0:	20b4      	movs	r0, #180	; 0xb4
 80032c2:	f7fe f9b3 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 80032c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	2305      	movs	r3, #5
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2314      	movs	r3, #20
 80032d2:	2214      	movs	r2, #20
 80032d4:	21be      	movs	r1, #190	; 0xbe
 80032d6:	20d2      	movs	r0, #210	; 0xd2
 80032d8:	f7fe f9a8 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 80032dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	2305      	movs	r3, #5
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	2314      	movs	r3, #20
 80032e8:	2214      	movs	r2, #20
 80032ea:	21be      	movs	r1, #190	; 0xbe
 80032ec:	20f0      	movs	r0, #240	; 0xf0
 80032ee:	f7fe f99d 	bl	800162c <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 80032f2:	f006 ffe1 	bl	800a2b8 <HAL_GetTick>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4a7c      	ldr	r2, [pc, #496]	; (80034ec <system_init+0x2e0>)
 80032fa:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 80032fc:	487c      	ldr	r0, [pc, #496]	; (80034f0 <system_init+0x2e4>)
 80032fe:	f7fe fa63 	bl	80017c8 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003302:	20c8      	movs	r0, #200	; 0xc8
 8003304:	f002 f8e6 	bl	80054d4 <initWait>
	  	  LastTime = HAL_GetTick();
 8003308:	f006 ffd6 	bl	800a2b8 <HAL_GetTick>
 800330c:	4603      	mov	r3, r0
 800330e:	4a77      	ldr	r2, [pc, #476]	; (80034ec <system_init+0x2e0>)
 8003310:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 8003312:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	2305      	movs	r3, #5
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2314      	movs	r3, #20
 800331e:	2214      	movs	r2, #20
 8003320:	21be      	movs	r1, #190	; 0xbe
 8003322:	203c      	movs	r0, #60	; 0x3c
 8003324:	f7fe f9ff 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 8003328:	2201      	movs	r2, #1
 800332a:	4972      	ldr	r1, [pc, #456]	; (80034f4 <system_init+0x2e8>)
 800332c:	2001      	movs	r0, #1
 800332e:	f7ff fb69 	bl	8002a04 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 8003332:	2025      	movs	r0, #37	; 0x25
 8003334:	f005 fd80 	bl	8008e38 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003338:	486f      	ldr	r0, [pc, #444]	; (80034f8 <system_init+0x2ec>)
 800333a:	f006 fcdd 	bl	8009cf8 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 800333e:	496f      	ldr	r1, [pc, #444]	; (80034fc <system_init+0x2f0>)
 8003340:	4869      	ldr	r0, [pc, #420]	; (80034e8 <system_init+0x2dc>)
 8003342:	f00e fc95 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003346:	f24c 6318 	movw	r3, #50712	; 0xc618
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	2301      	movs	r3, #1
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	2300      	movs	r3, #0
 8003352:	22dc      	movs	r2, #220	; 0xdc
 8003354:	2114      	movs	r1, #20
 8003356:	4864      	ldr	r0, [pc, #400]	; (80034e8 <system_init+0x2dc>)
 8003358:	f7fe fc50 	bl	8001bfc <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800335c:	20c8      	movs	r0, #200	; 0xc8
 800335e:	f002 f8b9 	bl	80054d4 <initWait>
	  	  	  LastTime = HAL_GetTick();
 8003362:	f006 ffa9 	bl	800a2b8 <HAL_GetTick>
 8003366:	4603      	mov	r3, r0
 8003368:	4a60      	ldr	r2, [pc, #384]	; (80034ec <system_init+0x2e0>)
 800336a:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 800336c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	2305      	movs	r3, #5
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2314      	movs	r3, #20
 8003378:	2214      	movs	r2, #20
 800337a:	21be      	movs	r1, #190	; 0xbe
 800337c:	205a      	movs	r0, #90	; 0x5a
 800337e:	f7fe f9d2 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 8003382:	201b      	movs	r0, #27
 8003384:	f005 fd58 	bl	8008e38 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 8003388:	f7ff fc62 	bl	8002c50 <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800338c:	485a      	ldr	r0, [pc, #360]	; (80034f8 <system_init+0x2ec>)
 800338e:	f006 fcb3 	bl	8009cf8 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 8003392:	495b      	ldr	r1, [pc, #364]	; (8003500 <system_init+0x2f4>)
 8003394:	4854      	ldr	r0, [pc, #336]	; (80034e8 <system_init+0x2dc>)
 8003396:	f00e fc6b 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800339a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	2301      	movs	r3, #1
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	22dc      	movs	r2, #220	; 0xdc
 80033a8:	2114      	movs	r1, #20
 80033aa:	484f      	ldr	r0, [pc, #316]	; (80034e8 <system_init+0x2dc>)
 80033ac:	f7fe fc26 	bl	8001bfc <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80033b0:	20c8      	movs	r0, #200	; 0xc8
 80033b2:	f002 f88f 	bl	80054d4 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 80033b6:	f006 ff7f 	bl	800a2b8 <HAL_GetTick>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4a4b      	ldr	r2, [pc, #300]	; (80034ec <system_init+0x2e0>)
 80033be:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 80033c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	2305      	movs	r3, #5
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2314      	movs	r3, #20
 80033cc:	2214      	movs	r2, #20
 80033ce:	21be      	movs	r1, #190	; 0xbe
 80033d0:	2078      	movs	r0, #120	; 0x78
 80033d2:	f7fe f9a8 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80033d6:	2004      	movs	r0, #4
 80033d8:	f005 fd2e 	bl	8008e38 <SendComand>
	  	  updateAllSchedulesInfo(1); // Read all info about schedule 1
 80033dc:	2001      	movs	r0, #1
 80033de:	f004 fab5 	bl	800794c <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80033e2:	20c8      	movs	r0, #200	; 0xc8
 80033e4:	f002 f876 	bl	80054d4 <initWait>
			  LastTime = HAL_GetTick();
 80033e8:	f006 ff66 	bl	800a2b8 <HAL_GetTick>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4a3f      	ldr	r2, [pc, #252]	; (80034ec <system_init+0x2e0>)
 80033f0:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 80033f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	2305      	movs	r3, #5
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2314      	movs	r3, #20
 80033fe:	2214      	movs	r2, #20
 8003400:	21be      	movs	r1, #190	; 0xbe
 8003402:	2096      	movs	r0, #150	; 0x96
 8003404:	f7fe f98f 	bl	8001726 <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 8003408:	f7ff fc5a 	bl	8002cc0 <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800340c:	483a      	ldr	r0, [pc, #232]	; (80034f8 <system_init+0x2ec>)
 800340e:	f006 fc73 	bl	8009cf8 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 8003412:	493c      	ldr	r1, [pc, #240]	; (8003504 <system_init+0x2f8>)
 8003414:	4834      	ldr	r0, [pc, #208]	; (80034e8 <system_init+0x2dc>)
 8003416:	f00e fc2b 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800341a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	2301      	movs	r3, #1
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	22dc      	movs	r2, #220	; 0xdc
 8003428:	2114      	movs	r1, #20
 800342a:	482f      	ldr	r0, [pc, #188]	; (80034e8 <system_init+0x2dc>)
 800342c:	f7fe fbe6 	bl	8001bfc <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003430:	20c8      	movs	r0, #200	; 0xc8
 8003432:	f002 f84f 	bl	80054d4 <initWait>
			  LastTime = HAL_GetTick();
 8003436:	f006 ff3f 	bl	800a2b8 <HAL_GetTick>
 800343a:	4603      	mov	r3, r0
 800343c:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <system_init+0x2e0>)
 800343e:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 8003440:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	2305      	movs	r3, #5
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2314      	movs	r3, #20
 800344c:	2214      	movs	r2, #20
 800344e:	21be      	movs	r1, #190	; 0xbe
 8003450:	20b4      	movs	r0, #180	; 0xb4
 8003452:	f7fe f968 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  	  	SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 8003456:	2003      	movs	r0, #3
 8003458:	f005 fcee 	bl	8008e38 <SendComand>
	  	  	updateAllSchedulesInfo(2); // Read all info about schedule 2
 800345c:	2002      	movs	r0, #2
 800345e:	f004 fa75 	bl	800794c <updateAllSchedulesInfo>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003462:	20c8      	movs	r0, #200	; 0xc8
 8003464:	f002 f836 	bl	80054d4 <initWait>
			  LastTime = HAL_GetTick();
 8003468:	f006 ff26 	bl	800a2b8 <HAL_GetTick>
 800346c:	4603      	mov	r3, r0
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <system_init+0x2e0>)
 8003470:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 8003472:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2305      	movs	r3, #5
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2314      	movs	r3, #20
 800347e:	2214      	movs	r2, #20
 8003480:	21be      	movs	r1, #190	; 0xbe
 8003482:	20d2      	movs	r0, #210	; 0xd2
 8003484:	f7fe f94f 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003488:	2015      	movs	r0, #21
 800348a:	f005 fcd5 	bl	8008e38 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800348e:	20c8      	movs	r0, #200	; 0xc8
 8003490:	f002 f820 	bl	80054d4 <initWait>
			  LastTime = HAL_GetTick();
 8003494:	f006 ff10 	bl	800a2b8 <HAL_GetTick>
 8003498:	4603      	mov	r3, r0
 800349a:	4a14      	ldr	r2, [pc, #80]	; (80034ec <system_init+0x2e0>)
 800349c:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 800349e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	2305      	movs	r3, #5
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	2314      	movs	r3, #20
 80034aa:	2214      	movs	r2, #20
 80034ac:	21be      	movs	r1, #190	; 0xbe
 80034ae:	20f0      	movs	r0, #240	; 0xf0
 80034b0:	f7fe f939 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 80034b4:	2016      	movs	r0, #22
 80034b6:	f005 fcbf 	bl	8008e38 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80034ba:	480f      	ldr	r0, [pc, #60]	; (80034f8 <system_init+0x2ec>)
 80034bc:	f006 fc1c 	bl	8009cf8 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 80034c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80034c4:	f002 f806 	bl	80054d4 <initWait>
			  LastTime = HAL_GetTick();
 80034c8:	f006 fef6 	bl	800a2b8 <HAL_GetTick>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4a07      	ldr	r2, [pc, #28]	; (80034ec <system_init+0x2e0>)
 80034d0:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 80034d2:	2301      	movs	r3, #1
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	08016320 	.word	0x08016320
 80034e0:	080293e8 	.word	0x080293e8
 80034e4:	080158f4 	.word	0x080158f4
 80034e8:	200002c0 	.word	0x200002c0
 80034ec:	20000250 	.word	0x20000250
 80034f0:	08027470 	.word	0x08027470
 80034f4:	20000033 	.word	0x20000033
 80034f8:	200004f0 	.word	0x200004f0
 80034fc:	08015908 	.word	0x08015908
 8003500:	08015924 	.word	0x08015924
 8003504:	08015944 	.word	0x08015944

08003508 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af02      	add	r7, sp, #8
 800350e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003512:	edc7 0a04 	vstr	s1, [r7, #16]
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	460b      	mov	r3, r1
 800351a:	ed87 1a01 	vstr	s2, [r7, #4]
 800351e:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003520:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003524:	f7fe fd54 	bl	8001fd0 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 8003528:	2003      	movs	r0, #3
 800352a:	f005 fc85 	bl	8008e38 <SendComand>
	  SendComand(UCMD_PRES_1);
 800352e:	2004      	movs	r0, #4
 8003530:	f005 fc82 	bl	8008e38 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8003534:	201b      	movs	r0, #27
 8003536:	f005 fc7f 	bl	8008e38 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 800353a:	f7ff f9b5 	bl	80028a8 <DS3231_GetHour>
 800353e:	4603      	mov	r3, r0
 8003540:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8003542:	f7ff f9bd 	bl	80028c0 <DS3231_GetMinute>
 8003546:	4603      	mov	r3, r0
 8003548:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 800354a:	4881      	ldr	r0, [pc, #516]	; (8003750 <showCurrentParameters+0x248>)
 800354c:	f7fe f93c 	bl	80017c8 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8003550:	4980      	ldr	r1, [pc, #512]	; (8003754 <showCurrentParameters+0x24c>)
 8003552:	4881      	ldr	r0, [pc, #516]	; (8003758 <showCurrentParameters+0x250>)
 8003554:	f00e fb8c 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003558:	f24c 6318 	movw	r3, #50712	; 0xc618
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	2300      	movs	r3, #0
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003566:	220a      	movs	r2, #10
 8003568:	212f      	movs	r1, #47	; 0x2f
 800356a:	487b      	ldr	r0, [pc, #492]	; (8003758 <showCurrentParameters+0x250>)
 800356c:	f7fe fb46 	bl	8001bfc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003570:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2329      	movs	r3, #41	; 0x29
 8003578:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800357c:	2129      	movs	r1, #41	; 0x29
 800357e:	2000      	movs	r0, #0
 8003580:	f7fd fe72 	bl	8001268 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003584:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	232b      	movs	r3, #43	; 0x2b
 800358c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003590:	212b      	movs	r1, #43	; 0x2b
 8003592:	2000      	movs	r0, #0
 8003594:	f7fd fe68 	bl	8001268 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8003598:	7ffb      	ldrb	r3, [r7, #31]
 800359a:	2b09      	cmp	r3, #9
 800359c:	d809      	bhi.n	80035b2 <showCurrentParameters+0xaa>
 800359e:	7fbb      	ldrb	r3, [r7, #30]
 80035a0:	2b09      	cmp	r3, #9
 80035a2:	d806      	bhi.n	80035b2 <showCurrentParameters+0xaa>
 80035a4:	7ffa      	ldrb	r2, [r7, #31]
 80035a6:	7fbb      	ldrb	r3, [r7, #30]
 80035a8:	496c      	ldr	r1, [pc, #432]	; (800375c <showCurrentParameters+0x254>)
 80035aa:	486b      	ldr	r0, [pc, #428]	; (8003758 <showCurrentParameters+0x250>)
 80035ac:	f00e fb60 	bl	8011c70 <siprintf>
 80035b0:	e019      	b.n	80035e6 <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 80035b2:	7ffb      	ldrb	r3, [r7, #31]
 80035b4:	2b09      	cmp	r3, #9
 80035b6:	d806      	bhi.n	80035c6 <showCurrentParameters+0xbe>
 80035b8:	7ffa      	ldrb	r2, [r7, #31]
 80035ba:	7fbb      	ldrb	r3, [r7, #30]
 80035bc:	4968      	ldr	r1, [pc, #416]	; (8003760 <showCurrentParameters+0x258>)
 80035be:	4866      	ldr	r0, [pc, #408]	; (8003758 <showCurrentParameters+0x250>)
 80035c0:	f00e fb56 	bl	8011c70 <siprintf>
 80035c4:	e00f      	b.n	80035e6 <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 80035c6:	7fbb      	ldrb	r3, [r7, #30]
 80035c8:	2b09      	cmp	r3, #9
 80035ca:	d806      	bhi.n	80035da <showCurrentParameters+0xd2>
 80035cc:	7ffa      	ldrb	r2, [r7, #31]
 80035ce:	7fbb      	ldrb	r3, [r7, #30]
 80035d0:	4964      	ldr	r1, [pc, #400]	; (8003764 <showCurrentParameters+0x25c>)
 80035d2:	4861      	ldr	r0, [pc, #388]	; (8003758 <showCurrentParameters+0x250>)
 80035d4:	f00e fb4c 	bl	8011c70 <siprintf>
 80035d8:	e005      	b.n	80035e6 <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 80035da:	7ffa      	ldrb	r2, [r7, #31]
 80035dc:	7fbb      	ldrb	r3, [r7, #30]
 80035de:	4962      	ldr	r1, [pc, #392]	; (8003768 <showCurrentParameters+0x260>)
 80035e0:	485d      	ldr	r0, [pc, #372]	; (8003758 <showCurrentParameters+0x250>)
 80035e2:	f00e fb45 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80035e6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	2300      	movs	r3, #0
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	2300      	movs	r3, #0
 80035f2:	2232      	movs	r2, #50	; 0x32
 80035f4:	2114      	movs	r1, #20
 80035f6:	4858      	ldr	r0, [pc, #352]	; (8003758 <showCurrentParameters+0x250>)
 80035f8:	f7fe fb00 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 80035fc:	4b5b      	ldr	r3, [pc, #364]	; (800376c <showCurrentParameters+0x264>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f7fc ffb9 	bl	8000578 <__aeabi_f2d>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4959      	ldr	r1, [pc, #356]	; (8003770 <showCurrentParameters+0x268>)
 800360c:	4852      	ldr	r0, [pc, #328]	; (8003758 <showCurrentParameters+0x250>)
 800360e:	f00e fb2f 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003612:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	2301      	movs	r3, #1
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2300      	movs	r3, #0
 800361e:	2250      	movs	r2, #80	; 0x50
 8003620:	2114      	movs	r1, #20
 8003622:	484d      	ldr	r0, [pc, #308]	; (8003758 <showCurrentParameters+0x250>)
 8003624:	f7fe faea 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8003628:	4b52      	ldr	r3, [pc, #328]	; (8003774 <showCurrentParameters+0x26c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fc ffa3 	bl	8000578 <__aeabi_f2d>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4950      	ldr	r1, [pc, #320]	; (8003778 <showCurrentParameters+0x270>)
 8003638:	4847      	ldr	r0, [pc, #284]	; (8003758 <showCurrentParameters+0x250>)
 800363a:	f00e fb19 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800363e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	2300      	movs	r3, #0
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2300      	movs	r3, #0
 800364a:	226e      	movs	r2, #110	; 0x6e
 800364c:	2114      	movs	r1, #20
 800364e:	4842      	ldr	r0, [pc, #264]	; (8003758 <showCurrentParameters+0x250>)
 8003650:	f7fe fad4 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 8003654:	4b49      	ldr	r3, [pc, #292]	; (800377c <showCurrentParameters+0x274>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	4949      	ldr	r1, [pc, #292]	; (8003780 <showCurrentParameters+0x278>)
 800365c:	483e      	ldr	r0, [pc, #248]	; (8003758 <showCurrentParameters+0x250>)
 800365e:	f00e fb07 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003662:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	2300      	movs	r3, #0
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2300      	movs	r3, #0
 800366e:	228c      	movs	r2, #140	; 0x8c
 8003670:	2114      	movs	r1, #20
 8003672:	4839      	ldr	r0, [pc, #228]	; (8003758 <showCurrentParameters+0x250>)
 8003674:	f7fe fac2 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8003678:	4b42      	ldr	r3, [pc, #264]	; (8003784 <showCurrentParameters+0x27c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7fc ff7b 	bl	8000578 <__aeabi_f2d>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4940      	ldr	r1, [pc, #256]	; (8003788 <showCurrentParameters+0x280>)
 8003688:	4833      	ldr	r0, [pc, #204]	; (8003758 <showCurrentParameters+0x250>)
 800368a:	f00e faf1 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800368e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	2300      	movs	r3, #0
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2300      	movs	r3, #0
 800369a:	22aa      	movs	r2, #170	; 0xaa
 800369c:	2114      	movs	r1, #20
 800369e:	482e      	ldr	r0, [pc, #184]	; (8003758 <showCurrentParameters+0x250>)
 80036a0:	f7fe faac 	bl	8001bfc <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 80036a4:	4839      	ldr	r0, [pc, #228]	; (800378c <showCurrentParameters+0x284>)
 80036a6:	f7fe f88f 	bl	80017c8 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80036aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	2305      	movs	r3, #5
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	2314      	movs	r3, #20
 80036b6:	225f      	movs	r2, #95	; 0x5f
 80036b8:	21d8      	movs	r1, #216	; 0xd8
 80036ba:	20dc      	movs	r0, #220	; 0xdc
 80036bc:	f7fe f833 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 80036c0:	4933      	ldr	r1, [pc, #204]	; (8003790 <showCurrentParameters+0x288>)
 80036c2:	4825      	ldr	r0, [pc, #148]	; (8003758 <showCurrentParameters+0x250>)
 80036c4:	f00e fad4 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80036c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2300      	movs	r3, #0
 80036d4:	22da      	movs	r2, #218	; 0xda
 80036d6:	21df      	movs	r1, #223	; 0xdf
 80036d8:	481f      	ldr	r0, [pc, #124]	; (8003758 <showCurrentParameters+0x250>)
 80036da:	f7fe fa8f 	bl	8001bfc <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80036de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	2305      	movs	r3, #5
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2314      	movs	r3, #20
 80036ea:	2264      	movs	r2, #100	; 0x64
 80036ec:	21d8      	movs	r1, #216	; 0xd8
 80036ee:	200a      	movs	r0, #10
 80036f0:	f7fe f819 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 80036f4:	4927      	ldr	r1, [pc, #156]	; (8003794 <showCurrentParameters+0x28c>)
 80036f6:	4818      	ldr	r0, [pc, #96]	; (8003758 <showCurrentParameters+0x250>)
 80036f8:	f00e faba 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80036fc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2300      	movs	r3, #0
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	2300      	movs	r3, #0
 8003708:	22da      	movs	r2, #218	; 0xda
 800370a:	2114      	movs	r1, #20
 800370c:	4812      	ldr	r0, [pc, #72]	; (8003758 <showCurrentParameters+0x250>)
 800370e:	f7fe fa75 	bl	8001bfc <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003712:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	2305      	movs	r3, #5
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2314      	movs	r3, #20
 800371e:	225a      	movs	r2, #90	; 0x5a
 8003720:	21d8      	movs	r1, #216	; 0xd8
 8003722:	2078      	movs	r0, #120	; 0x78
 8003724:	f7fd ffff 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8003728:	491b      	ldr	r1, [pc, #108]	; (8003798 <showCurrentParameters+0x290>)
 800372a:	480b      	ldr	r0, [pc, #44]	; (8003758 <showCurrentParameters+0x250>)
 800372c:	f00e faa0 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003730:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2300      	movs	r3, #0
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	2300      	movs	r3, #0
 800373c:	22da      	movs	r2, #218	; 0xda
 800373e:	2184      	movs	r1, #132	; 0x84
 8003740:	4805      	ldr	r0, [pc, #20]	; (8003758 <showCurrentParameters+0x250>)
 8003742:	f7fe fa5b 	bl	8001bfc <EF_PutString>
}
 8003746:	bf00      	nop
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	080293e8 	.word	0x080293e8
 8003754:	08015964 	.word	0x08015964
 8003758:	200002c0 	.word	0x200002c0
 800375c:	08015974 	.word	0x08015974
 8003760:	08015984 	.word	0x08015984
 8003764:	08015994 	.word	0x08015994
 8003768:	080159a4 	.word	0x080159a4
 800376c:	20000294 	.word	0x20000294
 8003770:	080159b4 	.word	0x080159b4
 8003774:	200002a0 	.word	0x200002a0
 8003778:	080159c8 	.word	0x080159c8
 800377c:	200002a4 	.word	0x200002a4
 8003780:	080159dc 	.word	0x080159dc
 8003784:	2000029c 	.word	0x2000029c
 8003788:	080159f0 	.word	0x080159f0
 800378c:	08027470 	.word	0x08027470
 8003790:	08015a08 	.word	0x08015a08
 8003794:	08015a14 	.word	0x08015a14
 8003798:	08015a20 	.word	0x08015a20

0800379c <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80037a2:	2015      	movs	r0, #21
 80037a4:	f005 fb48 	bl	8008e38 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80037a8:	f24c 6018 	movw	r0, #50712	; 0xc618
 80037ac:	f7fe fc10 	bl	8001fd0 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80037b0:	485c      	ldr	r0, [pc, #368]	; (8003924 <showControlPanel+0x188>)
 80037b2:	f7fe f809 	bl	80017c8 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 80037b6:	495c      	ldr	r1, [pc, #368]	; (8003928 <showControlPanel+0x18c>)
 80037b8:	485c      	ldr	r0, [pc, #368]	; (800392c <showControlPanel+0x190>)
 80037ba:	f00e fa59 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037be:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	2300      	movs	r3, #0
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	231f      	movs	r3, #31
 80037ca:	220a      	movs	r2, #10
 80037cc:	2123      	movs	r1, #35	; 0x23
 80037ce:	4857      	ldr	r0, [pc, #348]	; (800392c <showControlPanel+0x190>)
 80037d0:	f7fe fa14 	bl	8001bfc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80037d4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2329      	movs	r3, #41	; 0x29
 80037dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037e0:	2129      	movs	r1, #41	; 0x29
 80037e2:	2000      	movs	r0, #0
 80037e4:	f7fd fd40 	bl	8001268 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80037e8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	232b      	movs	r3, #43	; 0x2b
 80037f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037f4:	212b      	movs	r1, #43	; 0x2b
 80037f6:	2000      	movs	r0, #0
 80037f8:	f7fd fd36 	bl	8001268 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 80037fc:	494c      	ldr	r1, [pc, #304]	; (8003930 <showControlPanel+0x194>)
 80037fe:	484b      	ldr	r0, [pc, #300]	; (800392c <showControlPanel+0x190>)
 8003800:	f00e fa36 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003804:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	223c      	movs	r2, #60	; 0x3c
 8003812:	2114      	movs	r1, #20
 8003814:	4845      	ldr	r0, [pc, #276]	; (800392c <showControlPanel+0x190>)
 8003816:	f7fe f9f1 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 800381a:	4946      	ldr	r1, [pc, #280]	; (8003934 <showControlPanel+0x198>)
 800381c:	4843      	ldr	r0, [pc, #268]	; (800392c <showControlPanel+0x190>)
 800381e:	f00e fa27 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003822:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	2301      	movs	r3, #1
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	225a      	movs	r2, #90	; 0x5a
 8003830:	2114      	movs	r1, #20
 8003832:	483e      	ldr	r0, [pc, #248]	; (800392c <showControlPanel+0x190>)
 8003834:	f7fe f9e2 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8003838:	493f      	ldr	r1, [pc, #252]	; (8003938 <showControlPanel+0x19c>)
 800383a:	483c      	ldr	r0, [pc, #240]	; (800392c <showControlPanel+0x190>)
 800383c:	f00e fa18 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003840:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	2300      	movs	r3, #0
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2300      	movs	r3, #0
 800384c:	2278      	movs	r2, #120	; 0x78
 800384e:	2114      	movs	r1, #20
 8003850:	4836      	ldr	r0, [pc, #216]	; (800392c <showControlPanel+0x190>)
 8003852:	f7fe f9d3 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8003856:	4939      	ldr	r1, [pc, #228]	; (800393c <showControlPanel+0x1a0>)
 8003858:	4834      	ldr	r0, [pc, #208]	; (800392c <showControlPanel+0x190>)
 800385a:	f00e fa09 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800385e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	2300      	movs	r3, #0
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	2300      	movs	r3, #0
 800386a:	2296      	movs	r2, #150	; 0x96
 800386c:	2114      	movs	r1, #20
 800386e:	482f      	ldr	r0, [pc, #188]	; (800392c <showControlPanel+0x190>)
 8003870:	f7fe f9c4 	bl	8001bfc <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003874:	4832      	ldr	r0, [pc, #200]	; (8003940 <showControlPanel+0x1a4>)
 8003876:	f7fd ffa7 	bl	80017c8 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800387a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	2305      	movs	r3, #5
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2314      	movs	r3, #20
 8003886:	225f      	movs	r2, #95	; 0x5f
 8003888:	21d8      	movs	r1, #216	; 0xd8
 800388a:	20dc      	movs	r0, #220	; 0xdc
 800388c:	f7fd ff4b 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003890:	492c      	ldr	r1, [pc, #176]	; (8003944 <showControlPanel+0x1a8>)
 8003892:	4826      	ldr	r0, [pc, #152]	; (800392c <showControlPanel+0x190>)
 8003894:	f00e f9ec 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003898:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	2300      	movs	r3, #0
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	2300      	movs	r3, #0
 80038a4:	22da      	movs	r2, #218	; 0xda
 80038a6:	21df      	movs	r1, #223	; 0xdf
 80038a8:	4820      	ldr	r0, [pc, #128]	; (800392c <showControlPanel+0x190>)
 80038aa:	f7fe f9a7 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80038ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	2305      	movs	r3, #5
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2314      	movs	r3, #20
 80038ba:	2264      	movs	r2, #100	; 0x64
 80038bc:	21d8      	movs	r1, #216	; 0xd8
 80038be:	200a      	movs	r0, #10
 80038c0:	f7fd ff31 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 80038c4:	4920      	ldr	r1, [pc, #128]	; (8003948 <showControlPanel+0x1ac>)
 80038c6:	4819      	ldr	r0, [pc, #100]	; (800392c <showControlPanel+0x190>)
 80038c8:	f00e f9d2 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80038cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	2300      	movs	r3, #0
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	2300      	movs	r3, #0
 80038d8:	22da      	movs	r2, #218	; 0xda
 80038da:	2114      	movs	r1, #20
 80038dc:	4813      	ldr	r0, [pc, #76]	; (800392c <showControlPanel+0x190>)
 80038de:	f7fe f98d 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80038e2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	2305      	movs	r3, #5
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2314      	movs	r3, #20
 80038ee:	225a      	movs	r2, #90	; 0x5a
 80038f0:	21d8      	movs	r1, #216	; 0xd8
 80038f2:	2078      	movs	r0, #120	; 0x78
 80038f4:	f7fd ff17 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 80038f8:	4914      	ldr	r1, [pc, #80]	; (800394c <showControlPanel+0x1b0>)
 80038fa:	480c      	ldr	r0, [pc, #48]	; (800392c <showControlPanel+0x190>)
 80038fc:	f00e f9b8 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003900:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	22da      	movs	r2, #218	; 0xda
 800390e:	217e      	movs	r1, #126	; 0x7e
 8003910:	4806      	ldr	r0, [pc, #24]	; (800392c <showControlPanel+0x190>)
 8003912:	f7fe f973 	bl	8001bfc <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003916:	4803      	ldr	r0, [pc, #12]	; (8003924 <showControlPanel+0x188>)
 8003918:	f7fd ff56 	bl	80017c8 <EF_SetFont>


}
 800391c:	bf00      	nop
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	080293e8 	.word	0x080293e8
 8003928:	08015a28 	.word	0x08015a28
 800392c:	200002c0 	.word	0x200002c0
 8003930:	08015a3c 	.word	0x08015a3c
 8003934:	08015a50 	.word	0x08015a50
 8003938:	08015a64 	.word	0x08015a64
 800393c:	08015a78 	.word	0x08015a78
 8003940:	08027470 	.word	0x08027470
 8003944:	08015a8c 	.word	0x08015a8c
 8003948:	08015a98 	.word	0x08015a98
 800394c:	08015aa0 	.word	0x08015aa0

08003950 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003956:	2016      	movs	r0, #22
 8003958:	f005 fa6e 	bl	8008e38 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800395c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003960:	f7fe fb36 	bl	8001fd0 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003964:	485b      	ldr	r0, [pc, #364]	; (8003ad4 <showLightsControlPanel+0x184>)
 8003966:	f7fd ff2f 	bl	80017c8 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 800396a:	495b      	ldr	r1, [pc, #364]	; (8003ad8 <showLightsControlPanel+0x188>)
 800396c:	485b      	ldr	r0, [pc, #364]	; (8003adc <showLightsControlPanel+0x18c>)
 800396e:	f00e f97f 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003972:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	2300      	movs	r3, #0
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003980:	220a      	movs	r2, #10
 8003982:	2146      	movs	r1, #70	; 0x46
 8003984:	4855      	ldr	r0, [pc, #340]	; (8003adc <showLightsControlPanel+0x18c>)
 8003986:	f7fe f939 	bl	8001bfc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800398a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	2329      	movs	r3, #41	; 0x29
 8003992:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003996:	2129      	movs	r1, #41	; 0x29
 8003998:	2000      	movs	r0, #0
 800399a:	f7fd fc65 	bl	8001268 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800399e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	232b      	movs	r3, #43	; 0x2b
 80039a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039aa:	212b      	movs	r1, #43	; 0x2b
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7fd fc5b 	bl	8001268 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 80039b2:	494b      	ldr	r1, [pc, #300]	; (8003ae0 <showLightsControlPanel+0x190>)
 80039b4:	4849      	ldr	r0, [pc, #292]	; (8003adc <showLightsControlPanel+0x18c>)
 80039b6:	f00e f95b 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80039ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	2300      	movs	r3, #0
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	223c      	movs	r2, #60	; 0x3c
 80039c8:	2114      	movs	r1, #20
 80039ca:	4844      	ldr	r0, [pc, #272]	; (8003adc <showLightsControlPanel+0x18c>)
 80039cc:	f7fe f916 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 80039d0:	4944      	ldr	r1, [pc, #272]	; (8003ae4 <showLightsControlPanel+0x194>)
 80039d2:	4842      	ldr	r0, [pc, #264]	; (8003adc <showLightsControlPanel+0x18c>)
 80039d4:	f00e f94c 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80039d8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	2301      	movs	r3, #1
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2300      	movs	r3, #0
 80039e4:	225a      	movs	r2, #90	; 0x5a
 80039e6:	2114      	movs	r1, #20
 80039e8:	483c      	ldr	r0, [pc, #240]	; (8003adc <showLightsControlPanel+0x18c>)
 80039ea:	f7fe f907 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 80039ee:	493e      	ldr	r1, [pc, #248]	; (8003ae8 <showLightsControlPanel+0x198>)
 80039f0:	483a      	ldr	r0, [pc, #232]	; (8003adc <showLightsControlPanel+0x18c>)
 80039f2:	f00e f93d 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80039f6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	2300      	movs	r3, #0
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2300      	movs	r3, #0
 8003a02:	2278      	movs	r2, #120	; 0x78
 8003a04:	2114      	movs	r1, #20
 8003a06:	4835      	ldr	r0, [pc, #212]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a08:	f7fe f8f8 	bl	8001bfc <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8003a0c:	4937      	ldr	r1, [pc, #220]	; (8003aec <showLightsControlPanel+0x19c>)
 8003a0e:	4833      	ldr	r0, [pc, #204]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a10:	f00e f92e 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a14:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2296      	movs	r2, #150	; 0x96
 8003a22:	2114      	movs	r1, #20
 8003a24:	482d      	ldr	r0, [pc, #180]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a26:	f7fe f8e9 	bl	8001bfc <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003a2a:	4831      	ldr	r0, [pc, #196]	; (8003af0 <showLightsControlPanel+0x1a0>)
 8003a2c:	f7fd fecc 	bl	80017c8 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	2305      	movs	r3, #5
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	2314      	movs	r3, #20
 8003a3c:	225f      	movs	r2, #95	; 0x5f
 8003a3e:	21d8      	movs	r1, #216	; 0xd8
 8003a40:	20dc      	movs	r0, #220	; 0xdc
 8003a42:	f7fd fe70 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003a46:	492b      	ldr	r1, [pc, #172]	; (8003af4 <showLightsControlPanel+0x1a4>)
 8003a48:	4824      	ldr	r0, [pc, #144]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a4a:	f00e f911 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003a4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	2300      	movs	r3, #0
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	22da      	movs	r2, #218	; 0xda
 8003a5c:	21e6      	movs	r1, #230	; 0xe6
 8003a5e:	481f      	ldr	r0, [pc, #124]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a60:	f7fe f8cc 	bl	8001bfc <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003a64:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	2305      	movs	r3, #5
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	2314      	movs	r3, #20
 8003a70:	225a      	movs	r2, #90	; 0x5a
 8003a72:	21d8      	movs	r1, #216	; 0xd8
 8003a74:	2078      	movs	r0, #120	; 0x78
 8003a76:	f7fd fe56 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 8003a7a:	491f      	ldr	r1, [pc, #124]	; (8003af8 <showLightsControlPanel+0x1a8>)
 8003a7c:	4817      	ldr	r0, [pc, #92]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a7e:	f00e f8f7 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003a82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	22da      	movs	r2, #218	; 0xda
 8003a90:	217e      	movs	r1, #126	; 0x7e
 8003a92:	4812      	ldr	r0, [pc, #72]	; (8003adc <showLightsControlPanel+0x18c>)
 8003a94:	f7fe f8b2 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003a98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2314      	movs	r3, #20
 8003aa4:	2264      	movs	r2, #100	; 0x64
 8003aa6:	21d8      	movs	r1, #216	; 0xd8
 8003aa8:	200a      	movs	r0, #10
 8003aaa:	f7fd fe3c 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 8003aae:	4913      	ldr	r1, [pc, #76]	; (8003afc <showLightsControlPanel+0x1ac>)
 8003ab0:	480a      	ldr	r0, [pc, #40]	; (8003adc <showLightsControlPanel+0x18c>)
 8003ab2:	f00e f8dd 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003ab6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	2300      	movs	r3, #0
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	22da      	movs	r2, #218	; 0xda
 8003ac4:	210d      	movs	r1, #13
 8003ac6:	4805      	ldr	r0, [pc, #20]	; (8003adc <showLightsControlPanel+0x18c>)
 8003ac8:	f7fe f898 	bl	8001bfc <EF_PutString>


}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	080293e8 	.word	0x080293e8
 8003ad8:	08015aac 	.word	0x08015aac
 8003adc:	200002c0 	.word	0x200002c0
 8003ae0:	08015abc 	.word	0x08015abc
 8003ae4:	08015acc 	.word	0x08015acc
 8003ae8:	08015adc 	.word	0x08015adc
 8003aec:	08015aec 	.word	0x08015aec
 8003af0:	08027470 	.word	0x08027470
 8003af4:	08015afc 	.word	0x08015afc
 8003af8:	08015b04 	.word	0x08015b04
 8003afc:	08015b10 	.word	0x08015b10

08003b00 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003b06:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003b0a:	f7fe fa61 	bl	8001fd0 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003b0e:	48a2      	ldr	r0, [pc, #648]	; (8003d98 <showClockSetPanel+0x298>)
 8003b10:	f7fd fe5a 	bl	80017c8 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003b14:	f7fe fec8 	bl	80028a8 <DS3231_GetHour>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003b1c:	f7fe fed0 	bl	80028c0 <DS3231_GetMinute>
 8003b20:	4603      	mov	r3, r0
 8003b22:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003b24:	f7fe feb4 	bl	8002890 <DS3231_GetDayOfWeek>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003b2c:	499b      	ldr	r1, [pc, #620]	; (8003d9c <showClockSetPanel+0x29c>)
 8003b2e:	489c      	ldr	r0, [pc, #624]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003b30:	f00e f89e 	bl	8011c70 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b34:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b42:	220a      	movs	r2, #10
 8003b44:	212f      	movs	r1, #47	; 0x2f
 8003b46:	4896      	ldr	r0, [pc, #600]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003b48:	f7fe f858 	bl	8001bfc <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003b4c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2329      	movs	r3, #41	; 0x29
 8003b54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b58:	2129      	movs	r1, #41	; 0x29
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f7fd fb84 	bl	8001268 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003b60:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	232b      	movs	r3, #43	; 0x2b
 8003b68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b6c:	212b      	movs	r1, #43	; 0x2b
 8003b6e:	2000      	movs	r0, #0
 8003b70:	f7fd fb7a 	bl	8001268 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	461a      	mov	r2, r3
 8003b78:	498a      	ldr	r1, [pc, #552]	; (8003da4 <showClockSetPanel+0x2a4>)
 8003b7a:	4889      	ldr	r0, [pc, #548]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003b7c:	f00e f878 	bl	8011c70 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003b80:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	2300      	movs	r3, #0
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2246      	movs	r2, #70	; 0x46
 8003b8e:	2114      	movs	r1, #20
 8003b90:	4883      	ldr	r0, [pc, #524]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003b92:	f7fe f833 	bl	8001bfc <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003b96:	79bb      	ldrb	r3, [r7, #6]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4983      	ldr	r1, [pc, #524]	; (8003da8 <showClockSetPanel+0x2a8>)
 8003b9c:	4880      	ldr	r0, [pc, #512]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003b9e:	f00e f867 	bl	8011c70 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003ba2:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	2301      	movs	r3, #1
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2300      	movs	r3, #0
 8003bae:	226e      	movs	r2, #110	; 0x6e
 8003bb0:	2114      	movs	r1, #20
 8003bb2:	487b      	ldr	r0, [pc, #492]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003bb4:	f7fe f822 	bl	8001bfc <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003bb8:	797b      	ldrb	r3, [r7, #5]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	497b      	ldr	r1, [pc, #492]	; (8003dac <showClockSetPanel+0x2ac>)
 8003bbe:	4878      	ldr	r0, [pc, #480]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003bc0:	f00e f856 	bl	8011c70 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003bc4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	2301      	movs	r3, #1
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2296      	movs	r2, #150	; 0x96
 8003bd2:	2114      	movs	r1, #20
 8003bd4:	4872      	ldr	r0, [pc, #456]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003bd6:	f7fe f811 	bl	8001bfc <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003bda:	4875      	ldr	r0, [pc, #468]	; (8003db0 <showClockSetPanel+0x2b0>)
 8003bdc:	f7fd fdf4 	bl	80017c8 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003be0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	2305      	movs	r3, #5
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2315      	movs	r3, #21
 8003bec:	221e      	movs	r2, #30
 8003bee:	214b      	movs	r1, #75	; 0x4b
 8003bf0:	20f0      	movs	r0, #240	; 0xf0
 8003bf2:	f7fd fd98 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003bf6:	496f      	ldr	r1, [pc, #444]	; (8003db4 <showClockSetPanel+0x2b4>)
 8003bf8:	4869      	ldr	r0, [pc, #420]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003bfa:	f00e f839 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003bfe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	2300      	movs	r3, #0
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	224d      	movs	r2, #77	; 0x4d
 8003c0c:	21f3      	movs	r1, #243	; 0xf3
 8003c0e:	4864      	ldr	r0, [pc, #400]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003c10:	f7fd fff4 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003c14:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	2315      	movs	r3, #21
 8003c20:	221e      	movs	r2, #30
 8003c22:	214b      	movs	r1, #75	; 0x4b
 8003c24:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003c28:	f7fd fd7d 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003c2c:	4962      	ldr	r1, [pc, #392]	; (8003db8 <showClockSetPanel+0x2b8>)
 8003c2e:	485c      	ldr	r0, [pc, #368]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003c30:	f00e f81e 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003c34:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	224d      	movs	r2, #77	; 0x4d
 8003c42:	f240 111d 	movw	r1, #285	; 0x11d
 8003c46:	4856      	ldr	r0, [pc, #344]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003c48:	f7fd ffd8 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003c4c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	2305      	movs	r3, #5
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2315      	movs	r3, #21
 8003c58:	221e      	movs	r2, #30
 8003c5a:	2173      	movs	r1, #115	; 0x73
 8003c5c:	20f0      	movs	r0, #240	; 0xf0
 8003c5e:	f7fd fd62 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003c62:	4954      	ldr	r1, [pc, #336]	; (8003db4 <showClockSetPanel+0x2b4>)
 8003c64:	484e      	ldr	r0, [pc, #312]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003c66:	f00e f803 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003c6a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	2300      	movs	r3, #0
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	2300      	movs	r3, #0
 8003c76:	2275      	movs	r2, #117	; 0x75
 8003c78:	21f5      	movs	r1, #245	; 0xf5
 8003c7a:	4849      	ldr	r0, [pc, #292]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003c7c:	f7fd ffbe 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003c80:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	2305      	movs	r3, #5
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2315      	movs	r3, #21
 8003c8c:	221e      	movs	r2, #30
 8003c8e:	2173      	movs	r1, #115	; 0x73
 8003c90:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003c94:	f7fd fd47 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003c98:	4948      	ldr	r1, [pc, #288]	; (8003dbc <showClockSetPanel+0x2bc>)
 8003c9a:	4841      	ldr	r0, [pc, #260]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003c9c:	f00d ffe8 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ca0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	2300      	movs	r3, #0
 8003cac:	2275      	movs	r2, #117	; 0x75
 8003cae:	f240 111b 	movw	r1, #283	; 0x11b
 8003cb2:	483b      	ldr	r0, [pc, #236]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003cb4:	f7fd ffa2 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003cb8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	2305      	movs	r3, #5
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	2315      	movs	r3, #21
 8003cc4:	221e      	movs	r2, #30
 8003cc6:	219b      	movs	r1, #155	; 0x9b
 8003cc8:	20f0      	movs	r0, #240	; 0xf0
 8003cca:	f7fd fd2c 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003cce:	493c      	ldr	r1, [pc, #240]	; (8003dc0 <showClockSetPanel+0x2c0>)
 8003cd0:	4833      	ldr	r0, [pc, #204]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003cd2:	f00d ffcd 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003cd6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	229d      	movs	r2, #157	; 0x9d
 8003ce4:	21f3      	movs	r1, #243	; 0xf3
 8003ce6:	482e      	ldr	r0, [pc, #184]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003ce8:	f7fd ff88 	bl	8001bfc <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003cec:	4830      	ldr	r0, [pc, #192]	; (8003db0 <showClockSetPanel+0x2b0>)
 8003cee:	f7fd fd6b 	bl	80017c8 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003cf2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cf6:	9301      	str	r3, [sp, #4]
 8003cf8:	2305      	movs	r3, #5
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2314      	movs	r3, #20
 8003cfe:	225f      	movs	r2, #95	; 0x5f
 8003d00:	21d8      	movs	r1, #216	; 0xd8
 8003d02:	20dc      	movs	r0, #220	; 0xdc
 8003d04:	f7fd fd0f 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003d08:	492e      	ldr	r1, [pc, #184]	; (8003dc4 <showClockSetPanel+0x2c4>)
 8003d0a:	4825      	ldr	r0, [pc, #148]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003d0c:	f00d ffb0 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d10:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	2300      	movs	r3, #0
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	22da      	movs	r2, #218	; 0xda
 8003d1e:	21e6      	movs	r1, #230	; 0xe6
 8003d20:	481f      	ldr	r0, [pc, #124]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003d22:	f7fd ff6b 	bl	8001bfc <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003d26:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2316      	movs	r3, #22
 8003d32:	22aa      	movs	r2, #170	; 0xaa
 8003d34:	21be      	movs	r1, #190	; 0xbe
 8003d36:	2050      	movs	r0, #80	; 0x50
 8003d38:	f7fd fcf5 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003d3c:	4922      	ldr	r1, [pc, #136]	; (8003dc8 <showClockSetPanel+0x2c8>)
 8003d3e:	4818      	ldr	r0, [pc, #96]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003d40:	f00d ff96 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d44:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	22c1      	movs	r2, #193	; 0xc1
 8003d52:	2164      	movs	r1, #100	; 0x64
 8003d54:	4812      	ldr	r0, [pc, #72]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003d56:	f7fd ff51 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003d5a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	2305      	movs	r3, #5
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	2314      	movs	r3, #20
 8003d66:	2264      	movs	r2, #100	; 0x64
 8003d68:	21d8      	movs	r1, #216	; 0xd8
 8003d6a:	200a      	movs	r0, #10
 8003d6c:	f7fd fcdb 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003d70:	4916      	ldr	r1, [pc, #88]	; (8003dcc <showClockSetPanel+0x2cc>)
 8003d72:	480b      	ldr	r0, [pc, #44]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003d74:	f00d ff7c 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	22da      	movs	r2, #218	; 0xda
 8003d86:	210d      	movs	r1, #13
 8003d88:	4805      	ldr	r0, [pc, #20]	; (8003da0 <showClockSetPanel+0x2a0>)
 8003d8a:	f7fd ff37 	bl	8001bfc <EF_PutString>
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	080293e8 	.word	0x080293e8
 8003d9c:	08015b1c 	.word	0x08015b1c
 8003da0:	200002c0 	.word	0x200002c0
 8003da4:	08015b2c 	.word	0x08015b2c
 8003da8:	08015b38 	.word	0x08015b38
 8003dac:	08015b48 	.word	0x08015b48
 8003db0:	08027470 	.word	0x08027470
 8003db4:	08015b58 	.word	0x08015b58
 8003db8:	08015b5c 	.word	0x08015b5c
 8003dbc:	08015b60 	.word	0x08015b60
 8003dc0:	08015b64 	.word	0x08015b64
 8003dc4:	08015b68 	.word	0x08015b68
 8003dc8:	08015b70 	.word	0x08015b70
 8003dcc:	08015b80 	.word	0x08015b80

08003dd0 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003dd6:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003dda:	f7fe f8f9 	bl	8001fd0 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003dde:	487a      	ldr	r0, [pc, #488]	; (8003fc8 <showPreparedActivitiesPanel+0x1f8>)
 8003de0:	f7fd fcf2 	bl	80017c8 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003de4:	4979      	ldr	r1, [pc, #484]	; (8003fcc <showPreparedActivitiesPanel+0x1fc>)
 8003de6:	487a      	ldr	r0, [pc, #488]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003de8:	f00d ff42 	bl	8011c70 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003dec:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	2300      	movs	r3, #0
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	231f      	movs	r3, #31
 8003df8:	220a      	movs	r2, #10
 8003dfa:	212f      	movs	r1, #47	; 0x2f
 8003dfc:	4874      	ldr	r0, [pc, #464]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003dfe:	f7fd fefd 	bl	8001bfc <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003e02:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2329      	movs	r3, #41	; 0x29
 8003e0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003e0e:	2129      	movs	r1, #41	; 0x29
 8003e10:	2000      	movs	r0, #0
 8003e12:	f7fd fa29 	bl	8001268 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003e16:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	232b      	movs	r3, #43	; 0x2b
 8003e1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003e22:	212b      	movs	r1, #43	; 0x2b
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fd fa1f 	bl	8001268 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003e2a:	486a      	ldr	r0, [pc, #424]	; (8003fd4 <showPreparedActivitiesPanel+0x204>)
 8003e2c:	f7fd fccc 	bl	80017c8 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003e30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e34:	9301      	str	r3, [sp, #4]
 8003e36:	2305      	movs	r3, #5
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	2314      	movs	r3, #20
 8003e3c:	2264      	movs	r2, #100	; 0x64
 8003e3e:	21d8      	movs	r1, #216	; 0xd8
 8003e40:	200a      	movs	r0, #10
 8003e42:	f7fd fc70 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003e46:	4964      	ldr	r1, [pc, #400]	; (8003fd8 <showPreparedActivitiesPanel+0x208>)
 8003e48:	4861      	ldr	r0, [pc, #388]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003e4a:	f00d ff11 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003e4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	2300      	movs	r3, #0
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	22da      	movs	r2, #218	; 0xda
 8003e5c:	210d      	movs	r1, #13
 8003e5e:	485c      	ldr	r0, [pc, #368]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003e60:	f7fd fecc 	bl	8001bfc <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003e64:	4b5d      	ldr	r3, [pc, #372]	; (8003fdc <showPreparedActivitiesPanel+0x20c>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d029      	beq.n	8003ec0 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e6c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	230a      	movs	r3, #10
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2328      	movs	r3, #40	; 0x28
 8003e78:	2278      	movs	r2, #120	; 0x78
 8003e7a:	213c      	movs	r1, #60	; 0x3c
 8003e7c:	2064      	movs	r0, #100	; 0x64
 8003e7e:	f7fd fc52 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003e82:	4957      	ldr	r1, [pc, #348]	; (8003fe0 <showPreparedActivitiesPanel+0x210>)
 8003e84:	4852      	ldr	r0, [pc, #328]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003e86:	f00d fef3 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e8a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	2300      	movs	r3, #0
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	223e      	movs	r2, #62	; 0x3e
 8003e98:	2177      	movs	r1, #119	; 0x77
 8003e9a:	484d      	ldr	r0, [pc, #308]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003e9c:	f7fd feae 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003ea0:	4950      	ldr	r1, [pc, #320]	; (8003fe4 <showPreparedActivitiesPanel+0x214>)
 8003ea2:	484b      	ldr	r0, [pc, #300]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003ea4:	f00d fee4 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003ea8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2250      	movs	r2, #80	; 0x50
 8003eb6:	2193      	movs	r1, #147	; 0x93
 8003eb8:	4845      	ldr	r0, [pc, #276]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003eba:	f7fd fe9f 	bl	8001bfc <EF_PutString>
 8003ebe:	e028      	b.n	8003f12 <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003ec0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	230a      	movs	r3, #10
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	2328      	movs	r3, #40	; 0x28
 8003ecc:	2278      	movs	r2, #120	; 0x78
 8003ece:	213c      	movs	r1, #60	; 0x3c
 8003ed0:	2064      	movs	r0, #100	; 0x64
 8003ed2:	f7fd fc28 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003ed6:	4942      	ldr	r1, [pc, #264]	; (8003fe0 <showPreparedActivitiesPanel+0x210>)
 8003ed8:	483d      	ldr	r0, [pc, #244]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003eda:	f00d fec9 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003ede:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	223e      	movs	r2, #62	; 0x3e
 8003eec:	2177      	movs	r1, #119	; 0x77
 8003eee:	4838      	ldr	r0, [pc, #224]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003ef0:	f7fd fe84 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003ef4:	493c      	ldr	r1, [pc, #240]	; (8003fe8 <showPreparedActivitiesPanel+0x218>)
 8003ef6:	4836      	ldr	r0, [pc, #216]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003ef8:	f00d feba 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003efc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	2300      	movs	r3, #0
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	2300      	movs	r3, #0
 8003f08:	2250      	movs	r2, #80	; 0x50
 8003f0a:	2193      	movs	r1, #147	; 0x93
 8003f0c:	4830      	ldr	r0, [pc, #192]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f0e:	f7fd fe75 	bl	8001bfc <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 8003f12:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <showPreparedActivitiesPanel+0x20c>)
 8003f14:	785b      	ldrb	r3, [r3, #1]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d029      	beq.n	8003f6e <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003f1a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	230a      	movs	r3, #10
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	2328      	movs	r3, #40	; 0x28
 8003f26:	2278      	movs	r2, #120	; 0x78
 8003f28:	2178      	movs	r1, #120	; 0x78
 8003f2a:	2064      	movs	r0, #100	; 0x64
 8003f2c:	f7fd fbfb 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003f30:	492e      	ldr	r1, [pc, #184]	; (8003fec <showPreparedActivitiesPanel+0x21c>)
 8003f32:	4827      	ldr	r0, [pc, #156]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f34:	f00d fe9c 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003f38:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	2300      	movs	r3, #0
 8003f44:	227a      	movs	r2, #122	; 0x7a
 8003f46:	2169      	movs	r1, #105	; 0x69
 8003f48:	4821      	ldr	r0, [pc, #132]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f4a:	f7fd fe57 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003f4e:	4925      	ldr	r1, [pc, #148]	; (8003fe4 <showPreparedActivitiesPanel+0x214>)
 8003f50:	481f      	ldr	r0, [pc, #124]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f52:	f00d fe8d 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003f56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2300      	movs	r3, #0
 8003f62:	228c      	movs	r2, #140	; 0x8c
 8003f64:	2193      	movs	r1, #147	; 0x93
 8003f66:	481a      	ldr	r0, [pc, #104]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f68:	f7fd fe48 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003f6c:	e028      	b.n	8003fc0 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003f6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	230a      	movs	r3, #10
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2328      	movs	r3, #40	; 0x28
 8003f7a:	2278      	movs	r2, #120	; 0x78
 8003f7c:	2178      	movs	r1, #120	; 0x78
 8003f7e:	2064      	movs	r0, #100	; 0x64
 8003f80:	f7fd fbd1 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003f84:	4919      	ldr	r1, [pc, #100]	; (8003fec <showPreparedActivitiesPanel+0x21c>)
 8003f86:	4812      	ldr	r0, [pc, #72]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f88:	f00d fe72 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003f8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	2300      	movs	r3, #0
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	2300      	movs	r3, #0
 8003f98:	227a      	movs	r2, #122	; 0x7a
 8003f9a:	2169      	movs	r1, #105	; 0x69
 8003f9c:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003f9e:	f7fd fe2d 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003fa2:	4911      	ldr	r1, [pc, #68]	; (8003fe8 <showPreparedActivitiesPanel+0x218>)
 8003fa4:	480a      	ldr	r0, [pc, #40]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003fa6:	f00d fe63 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003faa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	228c      	movs	r2, #140	; 0x8c
 8003fb8:	2193      	movs	r1, #147	; 0x93
 8003fba:	4805      	ldr	r0, [pc, #20]	; (8003fd0 <showPreparedActivitiesPanel+0x200>)
 8003fbc:	f7fd fe1e 	bl	8001bfc <EF_PutString>
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	080293e8 	.word	0x080293e8
 8003fcc:	08015b88 	.word	0x08015b88
 8003fd0:	200002c0 	.word	0x200002c0
 8003fd4:	08027470 	.word	0x08027470
 8003fd8:	08015b80 	.word	0x08015b80
 8003fdc:	200002b0 	.word	0x200002b0
 8003fe0:	08015b98 	.word	0x08015b98
 8003fe4:	08015ba4 	.word	0x08015ba4
 8003fe8:	08015ba8 	.word	0x08015ba8
 8003fec:	08015bac 	.word	0x08015bac

08003ff0 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003ff6:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003ffa:	f7fd ffe9 	bl	8001fd0 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003ffe:	48c7      	ldr	r0, [pc, #796]	; (800431c <showWSLedPanel+0x32c>)
 8004000:	f7fd fbe2 	bl	80017c8 <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8004004:	49c6      	ldr	r1, [pc, #792]	; (8004320 <showWSLedPanel+0x330>)
 8004006:	48c7      	ldr	r0, [pc, #796]	; (8004324 <showWSLedPanel+0x334>)
 8004008:	f00d fe32 	bl	8011c70 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800400c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	2300      	movs	r3, #0
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	231f      	movs	r3, #31
 8004018:	220a      	movs	r2, #10
 800401a:	2146      	movs	r1, #70	; 0x46
 800401c:	48c1      	ldr	r0, [pc, #772]	; (8004324 <showWSLedPanel+0x334>)
 800401e:	f7fd fded 	bl	8001bfc <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004022:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	2329      	movs	r3, #41	; 0x29
 800402a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800402e:	2129      	movs	r1, #41	; 0x29
 8004030:	2000      	movs	r0, #0
 8004032:	f7fd f919 	bl	8001268 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004036:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	232b      	movs	r3, #43	; 0x2b
 800403e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004042:	212b      	movs	r1, #43	; 0x2b
 8004044:	2000      	movs	r0, #0
 8004046:	f7fd f90f 	bl	8001268 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 800404a:	4bb7      	ldr	r3, [pc, #732]	; (8004328 <showWSLedPanel+0x338>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	49b6      	ldr	r1, [pc, #728]	; (800432c <showWSLedPanel+0x33c>)
 8004052:	48b4      	ldr	r0, [pc, #720]	; (8004324 <showWSLedPanel+0x334>)
 8004054:	f00d fe0c 	bl	8011c70 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004058:	f24c 6318 	movw	r3, #50712	; 0xc618
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	2300      	movs	r3, #0
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	2300      	movs	r3, #0
 8004064:	223c      	movs	r2, #60	; 0x3c
 8004066:	2114      	movs	r1, #20
 8004068:	48ae      	ldr	r0, [pc, #696]	; (8004324 <showWSLedPanel+0x334>)
 800406a:	f7fd fdc7 	bl	8001bfc <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 800406e:	49b0      	ldr	r1, [pc, #704]	; (8004330 <showWSLedPanel+0x340>)
 8004070:	48ac      	ldr	r0, [pc, #688]	; (8004324 <showWSLedPanel+0x334>)
 8004072:	f00d fdfd 	bl	8011c70 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004076:	f24c 6318 	movw	r3, #50712	; 0xc618
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	2300      	movs	r3, #0
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2300      	movs	r3, #0
 8004082:	225a      	movs	r2, #90	; 0x5a
 8004084:	2114      	movs	r1, #20
 8004086:	48a7      	ldr	r0, [pc, #668]	; (8004324 <showWSLedPanel+0x334>)
 8004088:	f7fd fdb8 	bl	8001bfc <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 800408c:	49a9      	ldr	r1, [pc, #676]	; (8004334 <showWSLedPanel+0x344>)
 800408e:	48a5      	ldr	r0, [pc, #660]	; (8004324 <showWSLedPanel+0x334>)
 8004090:	f00d fdee 	bl	8011c70 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004094:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	2300      	movs	r3, #0
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	2300      	movs	r3, #0
 80040a0:	2278      	movs	r2, #120	; 0x78
 80040a2:	2114      	movs	r1, #20
 80040a4:	489f      	ldr	r0, [pc, #636]	; (8004324 <showWSLedPanel+0x334>)
 80040a6:	f7fd fda9 	bl	8001bfc <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 80040aa:	48a3      	ldr	r0, [pc, #652]	; (8004338 <showWSLedPanel+0x348>)
 80040ac:	f7fd fb8c 	bl	80017c8 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80040b0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	2305      	movs	r3, #5
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	2315      	movs	r3, #21
 80040bc:	221e      	movs	r2, #30
 80040be:	2141      	movs	r1, #65	; 0x41
 80040c0:	20d9      	movs	r0, #217	; 0xd9
 80040c2:	f7fd fb30 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80040c6:	499d      	ldr	r1, [pc, #628]	; (800433c <showWSLedPanel+0x34c>)
 80040c8:	4896      	ldr	r0, [pc, #600]	; (8004324 <showWSLedPanel+0x334>)
 80040ca:	f00d fdd1 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80040ce:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	2300      	movs	r3, #0
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	2300      	movs	r3, #0
 80040da:	2243      	movs	r2, #67	; 0x43
 80040dc:	21df      	movs	r1, #223	; 0xdf
 80040de:	4891      	ldr	r0, [pc, #580]	; (8004324 <showWSLedPanel+0x334>)
 80040e0:	f7fd fd8c 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80040e4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	2305      	movs	r3, #5
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2315      	movs	r3, #21
 80040f0:	221e      	movs	r2, #30
 80040f2:	2141      	movs	r1, #65	; 0x41
 80040f4:	20fc      	movs	r0, #252	; 0xfc
 80040f6:	f7fd fb16 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 80040fa:	4991      	ldr	r1, [pc, #580]	; (8004340 <showWSLedPanel+0x350>)
 80040fc:	4889      	ldr	r0, [pc, #548]	; (8004324 <showWSLedPanel+0x334>)
 80040fe:	f00d fdb7 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8004102:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	2300      	movs	r3, #0
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	2300      	movs	r3, #0
 800410e:	2243      	movs	r2, #67	; 0x43
 8004110:	f240 1101 	movw	r1, #257	; 0x101
 8004114:	4883      	ldr	r0, [pc, #524]	; (8004324 <showWSLedPanel+0x334>)
 8004116:	f7fd fd71 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800411a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	2305      	movs	r3, #5
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	2315      	movs	r3, #21
 8004126:	221e      	movs	r2, #30
 8004128:	2141      	movs	r1, #65	; 0x41
 800412a:	f240 101f 	movw	r0, #287	; 0x11f
 800412e:	f7fd fafa 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 8004132:	4984      	ldr	r1, [pc, #528]	; (8004344 <showWSLedPanel+0x354>)
 8004134:	487b      	ldr	r0, [pc, #492]	; (8004324 <showWSLedPanel+0x334>)
 8004136:	f00d fd9b 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800413a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	2300      	movs	r3, #0
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2300      	movs	r3, #0
 8004146:	2243      	movs	r2, #67	; 0x43
 8004148:	f44f 7192 	mov.w	r1, #292	; 0x124
 800414c:	4875      	ldr	r0, [pc, #468]	; (8004324 <showWSLedPanel+0x334>)
 800414e:	f7fd fd55 	bl	8001bfc <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	2305      	movs	r3, #5
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	2315      	movs	r3, #21
 800415e:	2228      	movs	r2, #40	; 0x28
 8004160:	215f      	movs	r1, #95	; 0x5f
 8004162:	2096      	movs	r0, #150	; 0x96
 8004164:	f7fd fadf 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8004168:	4977      	ldr	r1, [pc, #476]	; (8004348 <showWSLedPanel+0x358>)
 800416a:	486e      	ldr	r0, [pc, #440]	; (8004324 <showWSLedPanel+0x334>)
 800416c:	f00d fd80 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004170:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	2300      	movs	r3, #0
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	2300      	movs	r3, #0
 800417c:	2261      	movs	r2, #97	; 0x61
 800417e:	219b      	movs	r1, #155	; 0x9b
 8004180:	4868      	ldr	r0, [pc, #416]	; (8004324 <showWSLedPanel+0x334>)
 8004182:	f7fd fd3b 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	2305      	movs	r3, #5
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2315      	movs	r3, #21
 8004192:	2228      	movs	r2, #40	; 0x28
 8004194:	215f      	movs	r1, #95	; 0x5f
 8004196:	20ca      	movs	r0, #202	; 0xca
 8004198:	f7fd fac5 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 800419c:	496b      	ldr	r1, [pc, #428]	; (800434c <showWSLedPanel+0x35c>)
 800419e:	4861      	ldr	r0, [pc, #388]	; (8004324 <showWSLedPanel+0x334>)
 80041a0:	f00d fd66 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80041a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041a8:	9301      	str	r3, [sp, #4]
 80041aa:	2300      	movs	r3, #0
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2300      	movs	r3, #0
 80041b0:	2261      	movs	r2, #97	; 0x61
 80041b2:	21d2      	movs	r1, #210	; 0xd2
 80041b4:	485b      	ldr	r0, [pc, #364]	; (8004324 <showWSLedPanel+0x334>)
 80041b6:	f7fd fd21 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 80041ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	2305      	movs	r3, #5
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2315      	movs	r3, #21
 80041c6:	2228      	movs	r2, #40	; 0x28
 80041c8:	215f      	movs	r1, #95	; 0x5f
 80041ca:	20fe      	movs	r0, #254	; 0xfe
 80041cc:	f7fd faab 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80041d0:	495f      	ldr	r1, [pc, #380]	; (8004350 <showWSLedPanel+0x360>)
 80041d2:	4854      	ldr	r0, [pc, #336]	; (8004324 <showWSLedPanel+0x334>)
 80041d4:	f00d fd4c 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80041d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	2300      	movs	r3, #0
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	2300      	movs	r3, #0
 80041e4:	2261      	movs	r2, #97	; 0x61
 80041e6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80041ea:	484e      	ldr	r0, [pc, #312]	; (8004324 <showWSLedPanel+0x334>)
 80041ec:	f7fd fd06 	bl	8001bfc <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80041f0:	231f      	movs	r3, #31
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	2305      	movs	r3, #5
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2315      	movs	r3, #21
 80041fa:	2228      	movs	r2, #40	; 0x28
 80041fc:	217d      	movs	r1, #125	; 0x7d
 80041fe:	2096      	movs	r0, #150	; 0x96
 8004200:	f7fd fa91 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8004204:	4950      	ldr	r1, [pc, #320]	; (8004348 <showWSLedPanel+0x358>)
 8004206:	4847      	ldr	r0, [pc, #284]	; (8004324 <showWSLedPanel+0x334>)
 8004208:	f00d fd32 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800420c:	231f      	movs	r3, #31
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	2300      	movs	r3, #0
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2300      	movs	r3, #0
 8004216:	227f      	movs	r2, #127	; 0x7f
 8004218:	219b      	movs	r1, #155	; 0x9b
 800421a:	4842      	ldr	r0, [pc, #264]	; (8004324 <showWSLedPanel+0x334>)
 800421c:	f7fd fcee 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004220:	231f      	movs	r3, #31
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	2305      	movs	r3, #5
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2315      	movs	r3, #21
 800422a:	2228      	movs	r2, #40	; 0x28
 800422c:	217d      	movs	r1, #125	; 0x7d
 800422e:	20ca      	movs	r0, #202	; 0xca
 8004230:	f7fd fa79 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004234:	4945      	ldr	r1, [pc, #276]	; (800434c <showWSLedPanel+0x35c>)
 8004236:	483b      	ldr	r0, [pc, #236]	; (8004324 <showWSLedPanel+0x334>)
 8004238:	f00d fd1a 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800423c:	231f      	movs	r3, #31
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	2300      	movs	r3, #0
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2300      	movs	r3, #0
 8004246:	227f      	movs	r2, #127	; 0x7f
 8004248:	21d2      	movs	r1, #210	; 0xd2
 800424a:	4836      	ldr	r0, [pc, #216]	; (8004324 <showWSLedPanel+0x334>)
 800424c:	f7fd fcd6 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004250:	231f      	movs	r3, #31
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	2305      	movs	r3, #5
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2315      	movs	r3, #21
 800425a:	2228      	movs	r2, #40	; 0x28
 800425c:	217d      	movs	r1, #125	; 0x7d
 800425e:	20fe      	movs	r0, #254	; 0xfe
 8004260:	f7fd fa61 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004264:	493a      	ldr	r1, [pc, #232]	; (8004350 <showWSLedPanel+0x360>)
 8004266:	482f      	ldr	r0, [pc, #188]	; (8004324 <showWSLedPanel+0x334>)
 8004268:	f00d fd02 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800426c:	231f      	movs	r3, #31
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	2300      	movs	r3, #0
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2300      	movs	r3, #0
 8004276:	227f      	movs	r2, #127	; 0x7f
 8004278:	f44f 7183 	mov.w	r1, #262	; 0x106
 800427c:	4829      	ldr	r0, [pc, #164]	; (8004324 <showWSLedPanel+0x334>)
 800427e:	f7fd fcbd 	bl	8001bfc <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8004282:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	2305      	movs	r3, #5
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	2315      	movs	r3, #21
 800428e:	2250      	movs	r2, #80	; 0x50
 8004290:	219c      	movs	r1, #156	; 0x9c
 8004292:	2014      	movs	r0, #20
 8004294:	f7fd fa47 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 8004298:	492e      	ldr	r1, [pc, #184]	; (8004354 <showWSLedPanel+0x364>)
 800429a:	4822      	ldr	r0, [pc, #136]	; (8004324 <showWSLedPanel+0x334>)
 800429c:	f00d fce8 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 80042a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	2300      	movs	r3, #0
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	2300      	movs	r3, #0
 80042ac:	229e      	movs	r2, #158	; 0x9e
 80042ae:	211c      	movs	r1, #28
 80042b0:	481c      	ldr	r0, [pc, #112]	; (8004324 <showWSLedPanel+0x334>)
 80042b2:	f7fd fca3 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80042b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	2305      	movs	r3, #5
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	2315      	movs	r3, #21
 80042c2:	2250      	movs	r2, #80	; 0x50
 80042c4:	219c      	movs	r1, #156	; 0x9c
 80042c6:	2078      	movs	r0, #120	; 0x78
 80042c8:	f7fd fa2d 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 80042cc:	4922      	ldr	r1, [pc, #136]	; (8004358 <showWSLedPanel+0x368>)
 80042ce:	4815      	ldr	r0, [pc, #84]	; (8004324 <showWSLedPanel+0x334>)
 80042d0:	f00d fcce 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80042d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	2300      	movs	r3, #0
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	229e      	movs	r2, #158	; 0x9e
 80042e2:	2187      	movs	r1, #135	; 0x87
 80042e4:	480f      	ldr	r0, [pc, #60]	; (8004324 <showWSLedPanel+0x334>)
 80042e6:	f7fd fc89 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80042ea:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	2305      	movs	r3, #5
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2315      	movs	r3, #21
 80042f6:	2250      	movs	r2, #80	; 0x50
 80042f8:	219c      	movs	r1, #156	; 0x9c
 80042fa:	20dc      	movs	r0, #220	; 0xdc
 80042fc:	f7fd fa13 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 8004300:	4916      	ldr	r1, [pc, #88]	; (800435c <showWSLedPanel+0x36c>)
 8004302:	4808      	ldr	r0, [pc, #32]	; (8004324 <showWSLedPanel+0x334>)
 8004304:	f00d fcb4 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 8004308:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	2300      	movs	r3, #0
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2300      	movs	r3, #0
 8004314:	229e      	movs	r2, #158	; 0x9e
 8004316:	21e9      	movs	r1, #233	; 0xe9
 8004318:	e022      	b.n	8004360 <showWSLedPanel+0x370>
 800431a:	bf00      	nop
 800431c:	080293e8 	.word	0x080293e8
 8004320:	08015bb8 	.word	0x08015bb8
 8004324:	200002c0 	.word	0x200002c0
 8004328:	20000033 	.word	0x20000033
 800432c:	08015bc4 	.word	0x08015bc4
 8004330:	08015bd4 	.word	0x08015bd4
 8004334:	08015bdc 	.word	0x08015bdc
 8004338:	08027470 	.word	0x08027470
 800433c:	08015b58 	.word	0x08015b58
 8004340:	08015b60 	.word	0x08015b60
 8004344:	08015be4 	.word	0x08015be4
 8004348:	08015be8 	.word	0x08015be8
 800434c:	08015bec 	.word	0x08015bec
 8004350:	08015bf0 	.word	0x08015bf0
 8004354:	08015bf4 	.word	0x08015bf4
 8004358:	08015ba8 	.word	0x08015ba8
 800435c:	08015bfc 	.word	0x08015bfc
 8004360:	482b      	ldr	r0, [pc, #172]	; (8004410 <showWSLedPanel+0x420>)
 8004362:	f7fd fc4b 	bl	8001bfc <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004366:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	2305      	movs	r3, #5
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2315      	movs	r3, #21
 8004372:	2250      	movs	r2, #80	; 0x50
 8004374:	21bb      	movs	r1, #187	; 0xbb
 8004376:	2046      	movs	r0, #70	; 0x46
 8004378:	f7fd f9d5 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 800437c:	4925      	ldr	r1, [pc, #148]	; (8004414 <showWSLedPanel+0x424>)
 800437e:	4824      	ldr	r0, [pc, #144]	; (8004410 <showWSLedPanel+0x420>)
 8004380:	f00d fc76 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004384:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004388:	9301      	str	r3, [sp, #4]
 800438a:	2300      	movs	r3, #0
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	2300      	movs	r3, #0
 8004390:	22bd      	movs	r2, #189	; 0xbd
 8004392:	214e      	movs	r1, #78	; 0x4e
 8004394:	481e      	ldr	r0, [pc, #120]	; (8004410 <showWSLedPanel+0x420>)
 8004396:	f7fd fc31 	bl	8001bfc <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800439a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	2305      	movs	r3, #5
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2315      	movs	r3, #21
 80043a6:	2250      	movs	r2, #80	; 0x50
 80043a8:	21bb      	movs	r1, #187	; 0xbb
 80043aa:	20aa      	movs	r0, #170	; 0xaa
 80043ac:	f7fd f9bb 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 80043b0:	4919      	ldr	r1, [pc, #100]	; (8004418 <showWSLedPanel+0x428>)
 80043b2:	4817      	ldr	r0, [pc, #92]	; (8004410 <showWSLedPanel+0x420>)
 80043b4:	f00d fc5c 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 80043b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	2300      	movs	r3, #0
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	2300      	movs	r3, #0
 80043c4:	22bd      	movs	r2, #189	; 0xbd
 80043c6:	21b5      	movs	r1, #181	; 0xb5
 80043c8:	4811      	ldr	r0, [pc, #68]	; (8004410 <showWSLedPanel+0x420>)
 80043ca:	f7fd fc17 	bl	8001bfc <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80043ce:	4813      	ldr	r0, [pc, #76]	; (800441c <showWSLedPanel+0x42c>)
 80043d0:	f7fd f9fa 	bl	80017c8 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80043d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	2305      	movs	r3, #5
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	2314      	movs	r3, #20
 80043e0:	2264      	movs	r2, #100	; 0x64
 80043e2:	21d8      	movs	r1, #216	; 0xd8
 80043e4:	200a      	movs	r0, #10
 80043e6:	f7fd f99e 	bl	8001726 <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80043ea:	490d      	ldr	r1, [pc, #52]	; (8004420 <showWSLedPanel+0x430>)
 80043ec:	4808      	ldr	r0, [pc, #32]	; (8004410 <showWSLedPanel+0x420>)
 80043ee:	f00d fc3f 	bl	8011c70 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80043f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	2300      	movs	r3, #0
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	2300      	movs	r3, #0
 80043fe:	22da      	movs	r2, #218	; 0xda
 8004400:	210d      	movs	r1, #13
 8004402:	4803      	ldr	r0, [pc, #12]	; (8004410 <showWSLedPanel+0x420>)
 8004404:	f7fd fbfa 	bl	8001bfc <EF_PutString>


}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	200002c0 	.word	0x200002c0
 8004414:	08015c04 	.word	0x08015c04
 8004418:	08015c0c 	.word	0x08015c0c
 800441c:	08027470 	.word	0x08027470
 8004420:	08015b80 	.word	0x08015b80

08004424 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b090      	sub	sp, #64	; 0x40
 8004428:	af02      	add	r7, sp, #8
 800442a:	4603      	mov	r3, r0
 800442c:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 800445e:	2300      	movs	r3, #0
 8004460:	62bb      	str	r3, [r7, #40]	; 0x28
 8004462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004466:	2100      	movs	r1, #0
 8004468:	460a      	mov	r2, r1
 800446a:	801a      	strh	r2, [r3, #0]
 800446c:	460a      	mov	r2, r1
 800446e:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	f107 0320 	add.w	r3, r7, #32
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	f107 0318 	add.w	r3, r7, #24
 8004486:	2100      	movs	r1, #0
 8004488:	460a      	mov	r2, r1
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	460a      	mov	r2, r1
 800448e:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 8004490:	2300      	movs	r3, #0
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	f107 030c 	add.w	r3, r7, #12
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800449e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	2305      	movs	r3, #5
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2314      	movs	r3, #20
 80044aa:	2214      	movs	r2, #20
 80044ac:	2132      	movs	r1, #50	; 0x32
 80044ae:	203c      	movs	r0, #60	; 0x3c
 80044b0:	f7fd f8bc 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	2305      	movs	r3, #5
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2314      	movs	r3, #20
 80044c0:	2214      	movs	r2, #20
 80044c2:	2132      	movs	r1, #50	; 0x32
 80044c4:	205a      	movs	r0, #90	; 0x5a
 80044c6:	f7fd f8b1 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	2305      	movs	r3, #5
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2314      	movs	r3, #20
 80044d6:	2214      	movs	r2, #20
 80044d8:	2132      	movs	r1, #50	; 0x32
 80044da:	2078      	movs	r0, #120	; 0x78
 80044dc:	f7fd f8a6 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	2305      	movs	r3, #5
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	2314      	movs	r3, #20
 80044ec:	2214      	movs	r2, #20
 80044ee:	2132      	movs	r1, #50	; 0x32
 80044f0:	2096      	movs	r0, #150	; 0x96
 80044f2:	f7fd f89b 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	2305      	movs	r3, #5
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	2314      	movs	r3, #20
 8004502:	2214      	movs	r2, #20
 8004504:	2132      	movs	r1, #50	; 0x32
 8004506:	20b4      	movs	r0, #180	; 0xb4
 8004508:	f7fd f890 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800450c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	2305      	movs	r3, #5
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	2314      	movs	r3, #20
 8004518:	2214      	movs	r2, #20
 800451a:	2132      	movs	r1, #50	; 0x32
 800451c:	20d2      	movs	r0, #210	; 0xd2
 800451e:	f7fd f885 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004522:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	2305      	movs	r3, #5
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2314      	movs	r3, #20
 800452e:	2214      	movs	r2, #20
 8004530:	2132      	movs	r1, #50	; 0x32
 8004532:	20f0      	movs	r0, #240	; 0xf0
 8004534:	f7fd f87a 	bl	800162c <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 feda 	bl	80052f4 <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 ff43 	bl	80053ce <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 8004548:	48cc      	ldr	r0, [pc, #816]	; (800487c <drawschedulePanel+0x458>)
 800454a:	f7fd f93d 	bl	80017c8 <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 800454e:	49cc      	ldr	r1, [pc, #816]	; (8004880 <drawschedulePanel+0x45c>)
 8004550:	48cc      	ldr	r0, [pc, #816]	; (8004884 <drawschedulePanel+0x460>)
 8004552:	f00d fb8d 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004556:	f24c 6318 	movw	r3, #50712	; 0xc618
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	2301      	movs	r3, #1
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2300      	movs	r3, #0
 8004562:	224b      	movs	r2, #75	; 0x4b
 8004564:	213c      	movs	r1, #60	; 0x3c
 8004566:	48c7      	ldr	r0, [pc, #796]	; (8004884 <drawschedulePanel+0x460>)
 8004568:	f7fd fb48 	bl	8001bfc <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800456c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	2305      	movs	r3, #5
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	2314      	movs	r3, #20
 8004578:	2214      	movs	r2, #20
 800457a:	21aa      	movs	r1, #170	; 0xaa
 800457c:	2015      	movs	r0, #21
 800457e:	f7fd f855 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004582:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	2305      	movs	r3, #5
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2314      	movs	r3, #20
 800458e:	2214      	movs	r2, #20
 8004590:	21aa      	movs	r1, #170	; 0xaa
 8004592:	2035      	movs	r0, #53	; 0x35
 8004594:	f7fd f84a 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004598:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	2305      	movs	r3, #5
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	2314      	movs	r3, #20
 80045a4:	2214      	movs	r2, #20
 80045a6:	21aa      	movs	r1, #170	; 0xaa
 80045a8:	2055      	movs	r0, #85	; 0x55
 80045aa:	f7fd f83f 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80045ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	2305      	movs	r3, #5
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2314      	movs	r3, #20
 80045ba:	2214      	movs	r2, #20
 80045bc:	21aa      	movs	r1, #170	; 0xaa
 80045be:	2075      	movs	r0, #117	; 0x75
 80045c0:	f7fd f834 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80045c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	2305      	movs	r3, #5
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	2314      	movs	r3, #20
 80045d0:	2214      	movs	r2, #20
 80045d2:	21aa      	movs	r1, #170	; 0xaa
 80045d4:	2095      	movs	r0, #149	; 0x95
 80045d6:	f7fd f829 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80045da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	2305      	movs	r3, #5
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	2314      	movs	r3, #20
 80045e6:	2214      	movs	r2, #20
 80045e8:	21aa      	movs	r1, #170	; 0xaa
 80045ea:	20b5      	movs	r0, #181	; 0xb5
 80045ec:	f7fd f81e 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80045f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	2305      	movs	r3, #5
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	2314      	movs	r3, #20
 80045fc:	2214      	movs	r2, #20
 80045fe:	21aa      	movs	r1, #170	; 0xaa
 8004600:	20d5      	movs	r0, #213	; 0xd5
 8004602:	f7fd f813 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004606:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	2305      	movs	r3, #5
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2314      	movs	r3, #20
 8004612:	2214      	movs	r2, #20
 8004614:	21aa      	movs	r1, #170	; 0xaa
 8004616:	20f5      	movs	r0, #245	; 0xf5
 8004618:	f7fd f808 	bl	800162c <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800461c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	2305      	movs	r3, #5
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	2314      	movs	r3, #20
 8004628:	2214      	movs	r2, #20
 800462a:	21aa      	movs	r1, #170	; 0xaa
 800462c:	f240 1015 	movw	r0, #277	; 0x115
 8004630:	f7fc fffc 	bl	800162c <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004634:	4994      	ldr	r1, [pc, #592]	; (8004888 <drawschedulePanel+0x464>)
 8004636:	4893      	ldr	r0, [pc, #588]	; (8004884 <drawschedulePanel+0x460>)
 8004638:	f00d fb1a 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800463c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004640:	9301      	str	r3, [sp, #4]
 8004642:	2301      	movs	r3, #1
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	2300      	movs	r3, #0
 8004648:	22c3      	movs	r2, #195	; 0xc3
 800464a:	2115      	movs	r1, #21
 800464c:	488d      	ldr	r0, [pc, #564]	; (8004884 <drawschedulePanel+0x460>)
 800464e:	f7fd fad5 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004652:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	2305      	movs	r3, #5
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2314      	movs	r3, #20
 800465e:	2222      	movs	r2, #34	; 0x22
 8004660:	2165      	movs	r1, #101	; 0x65
 8004662:	20bb      	movs	r0, #187	; 0xbb
 8004664:	f7fd f85f 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 8004668:	4988      	ldr	r1, [pc, #544]	; (800488c <drawschedulePanel+0x468>)
 800466a:	4886      	ldr	r0, [pc, #536]	; (8004884 <drawschedulePanel+0x460>)
 800466c:	f00d fb00 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004670:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	2300      	movs	r3, #0
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	2300      	movs	r3, #0
 800467c:	2268      	movs	r2, #104	; 0x68
 800467e:	21c1      	movs	r1, #193	; 0xc1
 8004680:	4880      	ldr	r0, [pc, #512]	; (8004884 <drawschedulePanel+0x460>)
 8004682:	f7fd fabb 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004686:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	2305      	movs	r3, #5
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	2314      	movs	r3, #20
 8004692:	2222      	movs	r2, #34	; 0x22
 8004694:	2165      	movs	r1, #101	; 0x65
 8004696:	20e9      	movs	r0, #233	; 0xe9
 8004698:	f7fd f845 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 800469c:	497c      	ldr	r1, [pc, #496]	; (8004890 <drawschedulePanel+0x46c>)
 800469e:	4879      	ldr	r0, [pc, #484]	; (8004884 <drawschedulePanel+0x460>)
 80046a0:	f00d fae6 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	2300      	movs	r3, #0
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	2268      	movs	r2, #104	; 0x68
 80046b2:	21ec      	movs	r1, #236	; 0xec
 80046b4:	4873      	ldr	r0, [pc, #460]	; (8004884 <drawschedulePanel+0x460>)
 80046b6:	f7fd faa1 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	2305      	movs	r3, #5
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2314      	movs	r3, #20
 80046c6:	2222      	movs	r2, #34	; 0x22
 80046c8:	2165      	movs	r1, #101	; 0x65
 80046ca:	f240 1017 	movw	r0, #279	; 0x117
 80046ce:	f7fd f82a 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 80046d2:	4970      	ldr	r1, [pc, #448]	; (8004894 <drawschedulePanel+0x470>)
 80046d4:	486b      	ldr	r0, [pc, #428]	; (8004884 <drawschedulePanel+0x460>)
 80046d6:	f00d facb 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	2300      	movs	r3, #0
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	2300      	movs	r3, #0
 80046e6:	2268      	movs	r2, #104	; 0x68
 80046e8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80046ec:	4865      	ldr	r0, [pc, #404]	; (8004884 <drawschedulePanel+0x460>)
 80046ee:	f7fd fa85 	bl	8001bfc <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80046f2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	2305      	movs	r3, #5
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	2314      	movs	r3, #20
 80046fe:	2222      	movs	r2, #34	; 0x22
 8004700:	2188      	movs	r1, #136	; 0x88
 8004702:	20bb      	movs	r0, #187	; 0xbb
 8004704:	f7fd f80f 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 8004708:	4960      	ldr	r1, [pc, #384]	; (800488c <drawschedulePanel+0x468>)
 800470a:	485e      	ldr	r0, [pc, #376]	; (8004884 <drawschedulePanel+0x460>)
 800470c:	f00d fab0 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004710:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	2300      	movs	r3, #0
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	2300      	movs	r3, #0
 800471c:	228b      	movs	r2, #139	; 0x8b
 800471e:	21c1      	movs	r1, #193	; 0xc1
 8004720:	4858      	ldr	r0, [pc, #352]	; (8004884 <drawschedulePanel+0x460>)
 8004722:	f7fd fa6b 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004726:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800472a:	9301      	str	r3, [sp, #4]
 800472c:	2305      	movs	r3, #5
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2314      	movs	r3, #20
 8004732:	2222      	movs	r2, #34	; 0x22
 8004734:	2188      	movs	r1, #136	; 0x88
 8004736:	20e9      	movs	r0, #233	; 0xe9
 8004738:	f7fc fff5 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 800473c:	4954      	ldr	r1, [pc, #336]	; (8004890 <drawschedulePanel+0x46c>)
 800473e:	4851      	ldr	r0, [pc, #324]	; (8004884 <drawschedulePanel+0x460>)
 8004740:	f00d fa96 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004744:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	2300      	movs	r3, #0
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2300      	movs	r3, #0
 8004750:	228b      	movs	r2, #139	; 0x8b
 8004752:	21ec      	movs	r1, #236	; 0xec
 8004754:	484b      	ldr	r0, [pc, #300]	; (8004884 <drawschedulePanel+0x460>)
 8004756:	f7fd fa51 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800475a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	2305      	movs	r3, #5
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	2314      	movs	r3, #20
 8004766:	2222      	movs	r2, #34	; 0x22
 8004768:	2188      	movs	r1, #136	; 0x88
 800476a:	f240 1017 	movw	r0, #279	; 0x117
 800476e:	f7fc ffda 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004772:	4948      	ldr	r1, [pc, #288]	; (8004894 <drawschedulePanel+0x470>)
 8004774:	4843      	ldr	r0, [pc, #268]	; (8004884 <drawschedulePanel+0x460>)
 8004776:	f00d fa7b 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800477a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	2300      	movs	r3, #0
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	228b      	movs	r2, #139	; 0x8b
 8004788:	f44f 718c 	mov.w	r1, #280	; 0x118
 800478c:	483d      	ldr	r0, [pc, #244]	; (8004884 <drawschedulePanel+0x460>)
 800478e:	f7fd fa35 	bl	8001bfc <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004792:	4841      	ldr	r0, [pc, #260]	; (8004898 <drawschedulePanel+0x474>)
 8004794:	f7fd f818 	bl	80017c8 <EF_SetFont>
	  if(NrOfschedule == 1)
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	2b01      	cmp	r3, #1
 800479c:	f040 80db 	bne.w	8004956 <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 80047a0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80047a4:	4619      	mov	r1, r3
 80047a6:	2001      	movs	r0, #1
 80047a8:	f7fe fc13 	bl	8002fd2 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 80047ac:	f107 0335 	add.w	r3, r7, #53	; 0x35
 80047b0:	4619      	mov	r1, r3
 80047b2:	2001      	movs	r0, #1
 80047b4:	f7fe fc31 	bl	800301a <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 80047b8:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80047bc:	4619      	mov	r1, r3
 80047be:	2001      	movs	r0, #1
 80047c0:	f7fe fc4f 	bl	8003062 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 80047c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047c8:	4619      	mov	r1, r3
 80047ca:	2001      	movs	r0, #1
 80047cc:	f7fe fc6d 	bl	80030aa <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80047d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047d4:	4619      	mov	r1, r3
 80047d6:	2001      	movs	r0, #1
 80047d8:	f7fe faaa 	bl	8002d30 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80047dc:	f107 031c 	add.w	r3, r7, #28
 80047e0:	4619      	mov	r1, r3
 80047e2:	2001      	movs	r0, #1
 80047e4:	f7fe fb20 	bl	8002e28 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 80047e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80047ec:	2b17      	cmp	r3, #23
 80047ee:	d902      	bls.n	80047f6 <drawschedulePanel+0x3d2>
 80047f0:	2317      	movs	r3, #23
 80047f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 80047f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80047fa:	2b3b      	cmp	r3, #59	; 0x3b
 80047fc:	d902      	bls.n	8004804 <drawschedulePanel+0x3e0>
 80047fe:	233b      	movs	r3, #59	; 0x3b
 8004800:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 8004804:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004808:	2b17      	cmp	r3, #23
 800480a:	d902      	bls.n	8004812 <drawschedulePanel+0x3ee>
 800480c:	2317      	movs	r3, #23
 800480e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 8004812:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004816:	2b3b      	cmp	r3, #59	; 0x3b
 8004818:	d902      	bls.n	8004820 <drawschedulePanel+0x3fc>
 800481a:	233b      	movs	r3, #59	; 0x3b
 800481c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004824:	2b09      	cmp	r3, #9
 8004826:	d80d      	bhi.n	8004844 <drawschedulePanel+0x420>
 8004828:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800482c:	2b09      	cmp	r3, #9
 800482e:	d809      	bhi.n	8004844 <drawschedulePanel+0x420>
 8004830:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004834:	461a      	mov	r2, r3
 8004836:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800483a:	4918      	ldr	r1, [pc, #96]	; (800489c <drawschedulePanel+0x478>)
 800483c:	4811      	ldr	r0, [pc, #68]	; (8004884 <drawschedulePanel+0x460>)
 800483e:	f00d fa17 	bl	8011c70 <siprintf>
 8004842:	e03a      	b.n	80048ba <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004844:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004848:	2b09      	cmp	r3, #9
 800484a:	d809      	bhi.n	8004860 <drawschedulePanel+0x43c>
 800484c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004850:	461a      	mov	r2, r3
 8004852:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004856:	4912      	ldr	r1, [pc, #72]	; (80048a0 <drawschedulePanel+0x47c>)
 8004858:	480a      	ldr	r0, [pc, #40]	; (8004884 <drawschedulePanel+0x460>)
 800485a:	f00d fa09 	bl	8011c70 <siprintf>
 800485e:	e02c      	b.n	80048ba <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004860:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004864:	2b09      	cmp	r3, #9
 8004866:	d81f      	bhi.n	80048a8 <drawschedulePanel+0x484>
 8004868:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800486c:	461a      	mov	r2, r3
 800486e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004872:	490c      	ldr	r1, [pc, #48]	; (80048a4 <drawschedulePanel+0x480>)
 8004874:	4803      	ldr	r0, [pc, #12]	; (8004884 <drawschedulePanel+0x460>)
 8004876:	f00d f9fb 	bl	8011c70 <siprintf>
 800487a:	e01e      	b.n	80048ba <drawschedulePanel+0x496>
 800487c:	08027470 	.word	0x08027470
 8004880:	08015c14 	.word	0x08015c14
 8004884:	200002c0 	.word	0x200002c0
 8004888:	08015c2c 	.word	0x08015c2c
 800488c:	08015c50 	.word	0x08015c50
 8004890:	08015c54 	.word	0x08015c54
 8004894:	08015c58 	.word	0x08015c58
 8004898:	080293e8 	.word	0x080293e8
 800489c:	08015c60 	.word	0x08015c60
 80048a0:	08015c70 	.word	0x08015c70
 80048a4:	08015c80 	.word	0x08015c80
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 80048a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048ac:	461a      	mov	r2, r3
 80048ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80048b2:	498f      	ldr	r1, [pc, #572]	; (8004af0 <drawschedulePanel+0x6cc>)
 80048b4:	488f      	ldr	r0, [pc, #572]	; (8004af4 <drawschedulePanel+0x6d0>)
 80048b6:	f00d f9db 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80048ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	2301      	movs	r3, #1
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	2300      	movs	r3, #0
 80048c6:	2264      	movs	r2, #100	; 0x64
 80048c8:	210a      	movs	r1, #10
 80048ca:	488a      	ldr	r0, [pc, #552]	; (8004af4 <drawschedulePanel+0x6d0>)
 80048cc:	f7fd f996 	bl	8001bfc <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 80048d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80048d4:	2b09      	cmp	r3, #9
 80048d6:	d80d      	bhi.n	80048f4 <drawschedulePanel+0x4d0>
 80048d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048dc:	2b09      	cmp	r3, #9
 80048de:	d809      	bhi.n	80048f4 <drawschedulePanel+0x4d0>
 80048e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80048e4:	461a      	mov	r2, r3
 80048e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048ea:	4983      	ldr	r1, [pc, #524]	; (8004af8 <drawschedulePanel+0x6d4>)
 80048ec:	4881      	ldr	r0, [pc, #516]	; (8004af4 <drawschedulePanel+0x6d0>)
 80048ee:	f00d f9bf 	bl	8011c70 <siprintf>
 80048f2:	e024      	b.n	800493e <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 80048f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80048f8:	2b09      	cmp	r3, #9
 80048fa:	d809      	bhi.n	8004910 <drawschedulePanel+0x4ec>
 80048fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004900:	461a      	mov	r2, r3
 8004902:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004906:	497d      	ldr	r1, [pc, #500]	; (8004afc <drawschedulePanel+0x6d8>)
 8004908:	487a      	ldr	r0, [pc, #488]	; (8004af4 <drawschedulePanel+0x6d0>)
 800490a:	f00d f9b1 	bl	8011c70 <siprintf>
 800490e:	e016      	b.n	800493e <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 8004910:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004914:	2b09      	cmp	r3, #9
 8004916:	d809      	bhi.n	800492c <drawschedulePanel+0x508>
 8004918:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800491c:	461a      	mov	r2, r3
 800491e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004922:	4977      	ldr	r1, [pc, #476]	; (8004b00 <drawschedulePanel+0x6dc>)
 8004924:	4873      	ldr	r0, [pc, #460]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004926:	f00d f9a3 	bl	8011c70 <siprintf>
 800492a:	e008      	b.n	800493e <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 800492c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004930:	461a      	mov	r2, r3
 8004932:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004936:	4973      	ldr	r1, [pc, #460]	; (8004b04 <drawschedulePanel+0x6e0>)
 8004938:	486e      	ldr	r0, [pc, #440]	; (8004af4 <drawschedulePanel+0x6d0>)
 800493a:	f00d f999 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800493e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	2301      	movs	r3, #1
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2300      	movs	r3, #0
 800494a:	2287      	movs	r2, #135	; 0x87
 800494c:	210a      	movs	r1, #10
 800494e:	4869      	ldr	r0, [pc, #420]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004950:	f7fd f954 	bl	8001bfc <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004954:	e0c7      	b.n	8004ae6 <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	2b02      	cmp	r3, #2
 800495a:	f040 80c4 	bne.w	8004ae6 <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 800495e:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004962:	4619      	mov	r1, r3
 8004964:	2002      	movs	r0, #2
 8004966:	f7fe fb34 	bl	8002fd2 <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 800496a:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800496e:	4619      	mov	r1, r3
 8004970:	2002      	movs	r0, #2
 8004972:	f7fe fb52 	bl	800301a <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004976:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800497a:	4619      	mov	r1, r3
 800497c:	2002      	movs	r0, #2
 800497e:	f7fe fb70 	bl	8003062 <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 8004982:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004986:	4619      	mov	r1, r3
 8004988:	2002      	movs	r0, #2
 800498a:	f7fe fb8e 	bl	80030aa <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 800498e:	f107 0314 	add.w	r3, r7, #20
 8004992:	4619      	mov	r1, r3
 8004994:	2002      	movs	r0, #2
 8004996:	f7fe f9cb 	bl	8002d30 <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 800499a:	f107 0308 	add.w	r3, r7, #8
 800499e:	4619      	mov	r1, r3
 80049a0:	2002      	movs	r0, #2
 80049a2:	f7fe fa41 	bl	8002e28 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 80049a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049aa:	2b17      	cmp	r3, #23
 80049ac:	d902      	bls.n	80049b4 <drawschedulePanel+0x590>
 80049ae:	2317      	movs	r3, #23
 80049b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 80049b4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80049b8:	2b3b      	cmp	r3, #59	; 0x3b
 80049ba:	d902      	bls.n	80049c2 <drawschedulePanel+0x59e>
 80049bc:	233b      	movs	r3, #59	; 0x3b
 80049be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 80049c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80049c6:	2b17      	cmp	r3, #23
 80049c8:	d902      	bls.n	80049d0 <drawschedulePanel+0x5ac>
 80049ca:	2317      	movs	r3, #23
 80049cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 80049d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049d4:	2b3b      	cmp	r3, #59	; 0x3b
 80049d6:	d902      	bls.n	80049de <drawschedulePanel+0x5ba>
 80049d8:	233b      	movs	r3, #59	; 0x3b
 80049da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 80049de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049e2:	2b09      	cmp	r3, #9
 80049e4:	d80d      	bhi.n	8004a02 <drawschedulePanel+0x5de>
 80049e6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80049ea:	2b09      	cmp	r3, #9
 80049ec:	d809      	bhi.n	8004a02 <drawschedulePanel+0x5de>
 80049ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049f2:	461a      	mov	r2, r3
 80049f4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80049f8:	4943      	ldr	r1, [pc, #268]	; (8004b08 <drawschedulePanel+0x6e4>)
 80049fa:	483e      	ldr	r0, [pc, #248]	; (8004af4 <drawschedulePanel+0x6d0>)
 80049fc:	f00d f938 	bl	8011c70 <siprintf>
 8004a00:	e024      	b.n	8004a4c <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 8004a02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a06:	2b09      	cmp	r3, #9
 8004a08:	d809      	bhi.n	8004a1e <drawschedulePanel+0x5fa>
 8004a0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004a14:	493d      	ldr	r1, [pc, #244]	; (8004b0c <drawschedulePanel+0x6e8>)
 8004a16:	4837      	ldr	r0, [pc, #220]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004a18:	f00d f92a 	bl	8011c70 <siprintf>
 8004a1c:	e016      	b.n	8004a4c <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 8004a1e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004a22:	2b09      	cmp	r3, #9
 8004a24:	d809      	bhi.n	8004a3a <drawschedulePanel+0x616>
 8004a26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004a30:	4937      	ldr	r1, [pc, #220]	; (8004b10 <drawschedulePanel+0x6ec>)
 8004a32:	4830      	ldr	r0, [pc, #192]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004a34:	f00d f91c 	bl	8011c70 <siprintf>
 8004a38:	e008      	b.n	8004a4c <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 8004a3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004a44:	4933      	ldr	r1, [pc, #204]	; (8004b14 <drawschedulePanel+0x6f0>)
 8004a46:	482b      	ldr	r0, [pc, #172]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004a48:	f00d f912 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004a4c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	2301      	movs	r3, #1
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	2300      	movs	r3, #0
 8004a58:	2264      	movs	r2, #100	; 0x64
 8004a5a:	210a      	movs	r1, #10
 8004a5c:	4825      	ldr	r0, [pc, #148]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004a5e:	f7fd f8cd 	bl	8001bfc <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 8004a62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a66:	2b09      	cmp	r3, #9
 8004a68:	d80d      	bhi.n	8004a86 <drawschedulePanel+0x662>
 8004a6a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a6e:	2b09      	cmp	r3, #9
 8004a70:	d809      	bhi.n	8004a86 <drawschedulePanel+0x662>
 8004a72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a76:	461a      	mov	r2, r3
 8004a78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a7c:	4926      	ldr	r1, [pc, #152]	; (8004b18 <drawschedulePanel+0x6f4>)
 8004a7e:	481d      	ldr	r0, [pc, #116]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004a80:	f00d f8f6 	bl	8011c70 <siprintf>
 8004a84:	e024      	b.n	8004ad0 <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004a86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a8a:	2b09      	cmp	r3, #9
 8004a8c:	d809      	bhi.n	8004aa2 <drawschedulePanel+0x67e>
 8004a8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004a92:	461a      	mov	r2, r3
 8004a94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a98:	4920      	ldr	r1, [pc, #128]	; (8004b1c <drawschedulePanel+0x6f8>)
 8004a9a:	4816      	ldr	r0, [pc, #88]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004a9c:	f00d f8e8 	bl	8011c70 <siprintf>
 8004aa0:	e016      	b.n	8004ad0 <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 8004aa2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004aa6:	2b09      	cmp	r3, #9
 8004aa8:	d809      	bhi.n	8004abe <drawschedulePanel+0x69a>
 8004aaa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ab4:	491a      	ldr	r1, [pc, #104]	; (8004b20 <drawschedulePanel+0x6fc>)
 8004ab6:	480f      	ldr	r0, [pc, #60]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004ab8:	f00d f8da 	bl	8011c70 <siprintf>
 8004abc:	e008      	b.n	8004ad0 <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 8004abe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ac8:	4916      	ldr	r1, [pc, #88]	; (8004b24 <drawschedulePanel+0x700>)
 8004aca:	480a      	ldr	r0, [pc, #40]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004acc:	f00d f8d0 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004ad0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	2300      	movs	r3, #0
 8004adc:	2287      	movs	r2, #135	; 0x87
 8004ade:	210c      	movs	r1, #12
 8004ae0:	4804      	ldr	r0, [pc, #16]	; (8004af4 <drawschedulePanel+0x6d0>)
 8004ae2:	f7fd f88b 	bl	8001bfc <EF_PutString>
}
 8004ae6:	bf00      	nop
 8004ae8:	3738      	adds	r7, #56	; 0x38
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	08015c90 	.word	0x08015c90
 8004af4:	200002c0 	.word	0x200002c0
 8004af8:	08015ca0 	.word	0x08015ca0
 8004afc:	08015cb0 	.word	0x08015cb0
 8004b00:	08015cc0 	.word	0x08015cc0
 8004b04:	08015cd0 	.word	0x08015cd0
 8004b08:	08015ce0 	.word	0x08015ce0
 8004b0c:	08015cf0 	.word	0x08015cf0
 8004b10:	08015d00 	.word	0x08015d00
 8004b14:	08015d10 	.word	0x08015d10
 8004b18:	08015d20 	.word	0x08015d20
 8004b1c:	08015d30 	.word	0x08015d30
 8004b20:	08015d40 	.word	0x08015d40
 8004b24:	08015d50 	.word	0x08015d50

08004b28 <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004b2e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004b32:	f7fd fa4d 	bl	8001fd0 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004b36:	483f      	ldr	r0, [pc, #252]	; (8004c34 <showSchedule1Panel+0x10c>)
 8004b38:	f7fc fe46 	bl	80017c8 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004b3c:	493e      	ldr	r1, [pc, #248]	; (8004c38 <showSchedule1Panel+0x110>)
 8004b3e:	483f      	ldr	r0, [pc, #252]	; (8004c3c <showSchedule1Panel+0x114>)
 8004b40:	f00d f896 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004b44:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b52:	220a      	movs	r2, #10
 8004b54:	212a      	movs	r1, #42	; 0x2a
 8004b56:	4839      	ldr	r0, [pc, #228]	; (8004c3c <showSchedule1Panel+0x114>)
 8004b58:	f7fd f850 	bl	8001bfc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004b5c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2329      	movs	r3, #41	; 0x29
 8004b64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b68:	2129      	movs	r1, #41	; 0x29
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f7fc fb7c 	bl	8001268 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004b70:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	232b      	movs	r3, #43	; 0x2b
 8004b78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b7c:	212b      	movs	r1, #43	; 0x2b
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f7fc fb72 	bl	8001268 <GFX_DrawLine>

	  drawschedulePanel(1);
 8004b84:	2001      	movs	r0, #1
 8004b86:	f7ff fc4d 	bl	8004424 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004b8a:	482d      	ldr	r0, [pc, #180]	; (8004c40 <showSchedule1Panel+0x118>)
 8004b8c:	f7fc fe1c 	bl	80017c8 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004b90:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	2305      	movs	r3, #5
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2314      	movs	r3, #20
 8004b9c:	225f      	movs	r2, #95	; 0x5f
 8004b9e:	21d8      	movs	r1, #216	; 0xd8
 8004ba0:	20dc      	movs	r0, #220	; 0xdc
 8004ba2:	f7fc fdc0 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004ba6:	4927      	ldr	r1, [pc, #156]	; (8004c44 <showSchedule1Panel+0x11c>)
 8004ba8:	4824      	ldr	r0, [pc, #144]	; (8004c3c <showSchedule1Panel+0x114>)
 8004baa:	f00d f861 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004bae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	22da      	movs	r2, #218	; 0xda
 8004bbc:	21e6      	movs	r1, #230	; 0xe6
 8004bbe:	481f      	ldr	r0, [pc, #124]	; (8004c3c <showSchedule1Panel+0x114>)
 8004bc0:	f7fd f81c 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004bc4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	2305      	movs	r3, #5
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	2314      	movs	r3, #20
 8004bd0:	225a      	movs	r2, #90	; 0x5a
 8004bd2:	21d8      	movs	r1, #216	; 0xd8
 8004bd4:	2078      	movs	r0, #120	; 0x78
 8004bd6:	f7fc fda6 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004bda:	491b      	ldr	r1, [pc, #108]	; (8004c48 <showSchedule1Panel+0x120>)
 8004bdc:	4817      	ldr	r0, [pc, #92]	; (8004c3c <showSchedule1Panel+0x114>)
 8004bde:	f00d f847 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004be2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	2300      	movs	r3, #0
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	2300      	movs	r3, #0
 8004bee:	22da      	movs	r2, #218	; 0xda
 8004bf0:	217e      	movs	r1, #126	; 0x7e
 8004bf2:	4812      	ldr	r0, [pc, #72]	; (8004c3c <showSchedule1Panel+0x114>)
 8004bf4:	f7fd f802 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004bf8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bfc:	9301      	str	r3, [sp, #4]
 8004bfe:	2305      	movs	r3, #5
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	2314      	movs	r3, #20
 8004c04:	2264      	movs	r2, #100	; 0x64
 8004c06:	21d8      	movs	r1, #216	; 0xd8
 8004c08:	200a      	movs	r0, #10
 8004c0a:	f7fc fd8c 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004c0e:	490f      	ldr	r1, [pc, #60]	; (8004c4c <showSchedule1Panel+0x124>)
 8004c10:	480a      	ldr	r0, [pc, #40]	; (8004c3c <showSchedule1Panel+0x114>)
 8004c12:	f00d f82d 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004c16:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	2300      	movs	r3, #0
 8004c22:	22da      	movs	r2, #218	; 0xda
 8004c24:	210d      	movs	r1, #13
 8004c26:	4805      	ldr	r0, [pc, #20]	; (8004c3c <showSchedule1Panel+0x114>)
 8004c28:	f7fc ffe8 	bl	8001bfc <EF_PutString>
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	080293e8 	.word	0x080293e8
 8004c38:	08015d60 	.word	0x08015d60
 8004c3c:	200002c0 	.word	0x200002c0
 8004c40:	08027470 	.word	0x08027470
 8004c44:	08015d70 	.word	0x08015d70
 8004c48:	08015d7c 	.word	0x08015d7c
 8004c4c:	08015d84 	.word	0x08015d84

08004c50 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004c56:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004c5a:	f7fd f9b9 	bl	8001fd0 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004c5e:	4832      	ldr	r0, [pc, #200]	; (8004d28 <showSchedule2Panel+0xd8>)
 8004c60:	f7fc fdb2 	bl	80017c8 <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004c64:	4931      	ldr	r1, [pc, #196]	; (8004d2c <showSchedule2Panel+0xdc>)
 8004c66:	4832      	ldr	r0, [pc, #200]	; (8004d30 <showSchedule2Panel+0xe0>)
 8004c68:	f00d f802 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004c6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	2300      	movs	r3, #0
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c7a:	220a      	movs	r2, #10
 8004c7c:	212a      	movs	r1, #42	; 0x2a
 8004c7e:	482c      	ldr	r0, [pc, #176]	; (8004d30 <showSchedule2Panel+0xe0>)
 8004c80:	f7fc ffbc 	bl	8001bfc <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004c84:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	2329      	movs	r3, #41	; 0x29
 8004c8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c90:	2129      	movs	r1, #41	; 0x29
 8004c92:	2000      	movs	r0, #0
 8004c94:	f7fc fae8 	bl	8001268 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004c98:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	232b      	movs	r3, #43	; 0x2b
 8004ca0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ca4:	212b      	movs	r1, #43	; 0x2b
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f7fc fade 	bl	8001268 <GFX_DrawLine>

	  drawschedulePanel(2);
 8004cac:	2002      	movs	r0, #2
 8004cae:	f7ff fbb9 	bl	8004424 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004cb2:	4820      	ldr	r0, [pc, #128]	; (8004d34 <showSchedule2Panel+0xe4>)
 8004cb4:	f7fc fd88 	bl	80017c8 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004cb8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	2305      	movs	r3, #5
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	2314      	movs	r3, #20
 8004cc4:	225a      	movs	r2, #90	; 0x5a
 8004cc6:	21d8      	movs	r1, #216	; 0xd8
 8004cc8:	2078      	movs	r0, #120	; 0x78
 8004cca:	f7fc fd2c 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004cce:	491a      	ldr	r1, [pc, #104]	; (8004d38 <showSchedule2Panel+0xe8>)
 8004cd0:	4817      	ldr	r0, [pc, #92]	; (8004d30 <showSchedule2Panel+0xe0>)
 8004cd2:	f00c ffcd 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004cd6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	22da      	movs	r2, #218	; 0xda
 8004ce4:	217e      	movs	r1, #126	; 0x7e
 8004ce6:	4812      	ldr	r0, [pc, #72]	; (8004d30 <showSchedule2Panel+0xe0>)
 8004ce8:	f7fc ff88 	bl	8001bfc <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004cec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	2305      	movs	r3, #5
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	2314      	movs	r3, #20
 8004cf8:	2264      	movs	r2, #100	; 0x64
 8004cfa:	21d8      	movs	r1, #216	; 0xd8
 8004cfc:	200a      	movs	r0, #10
 8004cfe:	f7fc fd12 	bl	8001726 <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004d02:	490e      	ldr	r1, [pc, #56]	; (8004d3c <showSchedule2Panel+0xec>)
 8004d04:	480a      	ldr	r0, [pc, #40]	; (8004d30 <showSchedule2Panel+0xe0>)
 8004d06:	f00c ffb3 	bl	8011c70 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004d0a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	2300      	movs	r3, #0
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2300      	movs	r3, #0
 8004d16:	22da      	movs	r2, #218	; 0xda
 8004d18:	210d      	movs	r1, #13
 8004d1a:	4805      	ldr	r0, [pc, #20]	; (8004d30 <showSchedule2Panel+0xe0>)
 8004d1c:	f7fc ff6e 	bl	8001bfc <EF_PutString>
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	080293e8 	.word	0x080293e8
 8004d2c:	08015d90 	.word	0x08015d90
 8004d30:	200002c0 	.word	0x200002c0
 8004d34:	08027470 	.word	0x08027470
 8004d38:	08015d7c 	.word	0x08015d7c
 8004d3c:	08015d84 	.word	0x08015d84

08004d40 <ChangeHourOnScreen>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Change displayed time, if is other than current time
//
void ChangeHourOnScreen()
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8004d46:	f7fd fdaf 	bl	80028a8 <DS3231_GetHour>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004d4e:	f7fd fdb7 	bl	80028c0 <DS3231_GetMinute>
 8004d52:	4603      	mov	r3, r0
 8004d54:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004d56:	482a      	ldr	r0, [pc, #168]	; (8004e00 <ChangeHourOnScreen+0xc0>)
 8004d58:	f7fc fd36 	bl	80017c8 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004d5c:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <ChangeHourOnScreen+0xc4>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	79fa      	ldrb	r2, [r7, #7]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d021      	beq.n	8004daa <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004d66:	4b28      	ldr	r3, [pc, #160]	; (8004e08 <ChangeHourOnScreen+0xc8>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d11d      	bne.n	8004daa <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	2b09      	cmp	r3, #9
 8004d72:	d806      	bhi.n	8004d82 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	461a      	mov	r2, r3
 8004d78:	4924      	ldr	r1, [pc, #144]	; (8004e0c <ChangeHourOnScreen+0xcc>)
 8004d7a:	4825      	ldr	r0, [pc, #148]	; (8004e10 <ChangeHourOnScreen+0xd0>)
 8004d7c:	f00c ff78 	bl	8011c70 <siprintf>
 8004d80:	e005      	b.n	8004d8e <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	461a      	mov	r2, r3
 8004d86:	4923      	ldr	r1, [pc, #140]	; (8004e14 <ChangeHourOnScreen+0xd4>)
 8004d88:	4821      	ldr	r0, [pc, #132]	; (8004e10 <ChangeHourOnScreen+0xd0>)
 8004d8a:	f00c ff71 	bl	8011c70 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004d8e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	2301      	movs	r3, #1
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2232      	movs	r2, #50	; 0x32
 8004d9c:	2161      	movs	r1, #97	; 0x61
 8004d9e:	481c      	ldr	r0, [pc, #112]	; (8004e10 <ChangeHourOnScreen+0xd0>)
 8004da0:	f7fc ff2c 	bl	8001bfc <EF_PutString>
			  OldHours = CHour;
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <ChangeHourOnScreen+0xc4>)
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004daa:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <ChangeHourOnScreen+0xd8>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	79ba      	ldrb	r2, [r7, #6]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d021      	beq.n	8004df8 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004db4:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <ChangeHourOnScreen+0xc8>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d11d      	bne.n	8004df8 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8004dbc:	79bb      	ldrb	r3, [r7, #6]
 8004dbe:	2b09      	cmp	r3, #9
 8004dc0:	d806      	bhi.n	8004dd0 <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8004dc2:	79bb      	ldrb	r3, [r7, #6]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4915      	ldr	r1, [pc, #84]	; (8004e1c <ChangeHourOnScreen+0xdc>)
 8004dc8:	4811      	ldr	r0, [pc, #68]	; (8004e10 <ChangeHourOnScreen+0xd0>)
 8004dca:	f00c ff51 	bl	8011c70 <siprintf>
 8004dce:	e005      	b.n	8004ddc <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8004dd0:	79bb      	ldrb	r3, [r7, #6]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4912      	ldr	r1, [pc, #72]	; (8004e20 <ChangeHourOnScreen+0xe0>)
 8004dd6:	480e      	ldr	r0, [pc, #56]	; (8004e10 <ChangeHourOnScreen+0xd0>)
 8004dd8:	f00c ff4a 	bl	8011c70 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004ddc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	2301      	movs	r3, #1
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	2300      	movs	r3, #0
 8004de8:	2232      	movs	r2, #50	; 0x32
 8004dea:	2196      	movs	r1, #150	; 0x96
 8004dec:	4808      	ldr	r0, [pc, #32]	; (8004e10 <ChangeHourOnScreen+0xd0>)
 8004dee:	f7fc ff05 	bl	8001bfc <EF_PutString>
			  OldMinutes = CMinute;
 8004df2:	4a09      	ldr	r2, [pc, #36]	; (8004e18 <ChangeHourOnScreen+0xd8>)
 8004df4:	79bb      	ldrb	r3, [r7, #6]
 8004df6:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	080293e8 	.word	0x080293e8
 8004e04:	2000024c 	.word	0x2000024c
 8004e08:	20000290 	.word	0x20000290
 8004e0c:	08015da0 	.word	0x08015da0
 8004e10:	200002c0 	.word	0x200002c0
 8004e14:	08015da8 	.word	0x08015da8
 8004e18:	2000024d 	.word	0x2000024d
 8004e1c:	08015dac 	.word	0x08015dac
 8004e20:	08015db4 	.word	0x08015db4

08004e24 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8004e38:	f7fd ff0a 	bl	8002c50 <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8004e3c:	f7fd ff40 	bl	8002cc0 <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8004e40:	e005      	b.n	8004e4e <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004e42:	2018      	movs	r0, #24
 8004e44:	f003 fff8 	bl	8008e38 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8004e48:	2019      	movs	r0, #25
 8004e4a:	f003 fff5 	bl	8008e38 <SendComand>
}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	4603      	mov	r3, r0
 8004e60:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d12e      	bne.n	8004eca <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8004e6c:	f7fd fef0 	bl	8002c50 <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 8004e70:	481b      	ldr	r0, [pc, #108]	; (8004ee0 <predefinedActivityKarmienie+0x88>)
 8004e72:	f7fc fca9 	bl	80017c8 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	230a      	movs	r3, #10
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	2328      	movs	r3, #40	; 0x28
 8004e82:	2278      	movs	r2, #120	; 0x78
 8004e84:	213c      	movs	r1, #60	; 0x3c
 8004e86:	2064      	movs	r0, #100	; 0x64
 8004e88:	f7fc fc4d 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004e8c:	4915      	ldr	r1, [pc, #84]	; (8004ee4 <predefinedActivityKarmienie+0x8c>)
 8004e8e:	4816      	ldr	r0, [pc, #88]	; (8004ee8 <predefinedActivityKarmienie+0x90>)
 8004e90:	f00c feee 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	223e      	movs	r2, #62	; 0x3e
 8004ea2:	2177      	movs	r1, #119	; 0x77
 8004ea4:	4810      	ldr	r0, [pc, #64]	; (8004ee8 <predefinedActivityKarmienie+0x90>)
 8004ea6:	f7fc fea9 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004eaa:	4910      	ldr	r1, [pc, #64]	; (8004eec <predefinedActivityKarmienie+0x94>)
 8004eac:	480e      	ldr	r0, [pc, #56]	; (8004ee8 <predefinedActivityKarmienie+0x90>)
 8004eae:	f00c fedf 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004eb2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2250      	movs	r2, #80	; 0x50
 8004ec0:	2193      	movs	r1, #147	; 0x93
 8004ec2:	4809      	ldr	r0, [pc, #36]	; (8004ee8 <predefinedActivityKarmienie+0x90>)
 8004ec4:	f7fc fe9a 	bl	8001bfc <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8004ec8:	e005      	b.n	8004ed6 <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004eca:	2018      	movs	r0, #24
 8004ecc:	f003 ffb4 	bl	8008e38 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8004ed0:	4807      	ldr	r0, [pc, #28]	; (8004ef0 <predefinedActivityKarmienie+0x98>)
 8004ed2:	f00a fb69 	bl	800f5a8 <HAL_TIM_Base_Start_IT>
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	08027470 	.word	0x08027470
 8004ee4:	08015b98 	.word	0x08015b98
 8004ee8:	200002c0 	.word	0x200002c0
 8004eec:	08015ba8 	.word	0x08015ba8
 8004ef0:	20000990 	.word	0x20000990

08004ef4 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004efa:	487d      	ldr	r0, [pc, #500]	; (80050f0 <drawCurrentStateOfSwitches+0x1fc>)
 8004efc:	f7fc fc64 	bl	80017c8 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8004f00:	4b7c      	ldr	r3, [pc, #496]	; (80050f4 <drawCurrentStateOfSwitches+0x200>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01c      	beq.n	8004f42 <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f08:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	2305      	movs	r3, #5
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2315      	movs	r3, #21
 8004f14:	2221      	movs	r2, #33	; 0x21
 8004f16:	2141      	movs	r1, #65	; 0x41
 8004f18:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f1c:	f7fc fc03 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f20:	4975      	ldr	r1, [pc, #468]	; (80050f8 <drawCurrentStateOfSwitches+0x204>)
 8004f22:	4876      	ldr	r0, [pc, #472]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004f24:	f00c fea4 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004f28:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	2300      	movs	r3, #0
 8004f34:	2243      	movs	r2, #67	; 0x43
 8004f36:	f240 1111 	movw	r1, #273	; 0x111
 8004f3a:	4870      	ldr	r0, [pc, #448]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004f3c:	f7fc fe5e 	bl	8001bfc <EF_PutString>
 8004f40:	e01b      	b.n	8004f7a <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	2305      	movs	r3, #5
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2315      	movs	r3, #21
 8004f4e:	2221      	movs	r2, #33	; 0x21
 8004f50:	2141      	movs	r1, #65	; 0x41
 8004f52:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f56:	f7fc fbe6 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004f5a:	4969      	ldr	r1, [pc, #420]	; (8005100 <drawCurrentStateOfSwitches+0x20c>)
 8004f5c:	4867      	ldr	r0, [pc, #412]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004f5e:	f00c fe87 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2243      	movs	r2, #67	; 0x43
 8004f70:	f240 1111 	movw	r1, #273	; 0x111
 8004f74:	4861      	ldr	r0, [pc, #388]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004f76:	f7fc fe41 	bl	8001bfc <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8004f7a:	4b5e      	ldr	r3, [pc, #376]	; (80050f4 <drawCurrentStateOfSwitches+0x200>)
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01c      	beq.n	8004fbc <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f82:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	2305      	movs	r3, #5
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	2315      	movs	r3, #21
 8004f8e:	2221      	movs	r2, #33	; 0x21
 8004f90:	215f      	movs	r1, #95	; 0x5f
 8004f92:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f96:	f7fc fbc6 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f9a:	4957      	ldr	r1, [pc, #348]	; (80050f8 <drawCurrentStateOfSwitches+0x204>)
 8004f9c:	4857      	ldr	r0, [pc, #348]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004f9e:	f00c fe67 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004fa2:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	2300      	movs	r3, #0
 8004fae:	2261      	movs	r2, #97	; 0x61
 8004fb0:	f240 1111 	movw	r1, #273	; 0x111
 8004fb4:	4851      	ldr	r0, [pc, #324]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004fb6:	f7fc fe21 	bl	8001bfc <EF_PutString>
 8004fba:	e01b      	b.n	8004ff4 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004fbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	2305      	movs	r3, #5
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2315      	movs	r3, #21
 8004fc8:	2221      	movs	r2, #33	; 0x21
 8004fca:	215f      	movs	r1, #95	; 0x5f
 8004fcc:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004fd0:	f7fc fba9 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004fd4:	494a      	ldr	r1, [pc, #296]	; (8005100 <drawCurrentStateOfSwitches+0x20c>)
 8004fd6:	4849      	ldr	r0, [pc, #292]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004fd8:	f00c fe4a 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004fdc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2261      	movs	r2, #97	; 0x61
 8004fea:	f240 1111 	movw	r1, #273	; 0x111
 8004fee:	4843      	ldr	r0, [pc, #268]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8004ff0:	f7fc fe04 	bl	8001bfc <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8004ff4:	4b3f      	ldr	r3, [pc, #252]	; (80050f4 <drawCurrentStateOfSwitches+0x200>)
 8004ff6:	789b      	ldrb	r3, [r3, #2]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01c      	beq.n	8005036 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ffc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	2305      	movs	r3, #5
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	2315      	movs	r3, #21
 8005008:	2221      	movs	r2, #33	; 0x21
 800500a:	217d      	movs	r1, #125	; 0x7d
 800500c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005010:	f7fc fb89 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005014:	4938      	ldr	r1, [pc, #224]	; (80050f8 <drawCurrentStateOfSwitches+0x204>)
 8005016:	4839      	ldr	r0, [pc, #228]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8005018:	f00c fe2a 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800501c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	2300      	movs	r3, #0
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	2300      	movs	r3, #0
 8005028:	227f      	movs	r2, #127	; 0x7f
 800502a:	f240 1111 	movw	r1, #273	; 0x111
 800502e:	4833      	ldr	r0, [pc, #204]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8005030:	f7fc fde4 	bl	8001bfc <EF_PutString>
 8005034:	e01b      	b.n	800506e <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005036:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800503a:	9301      	str	r3, [sp, #4]
 800503c:	2305      	movs	r3, #5
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	2315      	movs	r3, #21
 8005042:	2221      	movs	r2, #33	; 0x21
 8005044:	217d      	movs	r1, #125	; 0x7d
 8005046:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800504a:	f7fc fb6c 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800504e:	492c      	ldr	r1, [pc, #176]	; (8005100 <drawCurrentStateOfSwitches+0x20c>)
 8005050:	482a      	ldr	r0, [pc, #168]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8005052:	f00c fe0d 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005056:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	2300      	movs	r3, #0
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	2300      	movs	r3, #0
 8005062:	227f      	movs	r2, #127	; 0x7f
 8005064:	f240 1111 	movw	r1, #273	; 0x111
 8005068:	4824      	ldr	r0, [pc, #144]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 800506a:	f7fc fdc7 	bl	8001bfc <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 800506e:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <drawCurrentStateOfSwitches+0x200>)
 8005070:	78db      	ldrb	r3, [r3, #3]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01c      	beq.n	80050b0 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005076:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	2305      	movs	r3, #5
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2315      	movs	r3, #21
 8005082:	2221      	movs	r2, #33	; 0x21
 8005084:	219b      	movs	r1, #155	; 0x9b
 8005086:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800508a:	f7fc fb4c 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800508e:	491a      	ldr	r1, [pc, #104]	; (80050f8 <drawCurrentStateOfSwitches+0x204>)
 8005090:	481a      	ldr	r0, [pc, #104]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 8005092:	f00c fded 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005096:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800509a:	9301      	str	r3, [sp, #4]
 800509c:	2300      	movs	r3, #0
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	2300      	movs	r3, #0
 80050a2:	229d      	movs	r2, #157	; 0x9d
 80050a4:	f240 1111 	movw	r1, #273	; 0x111
 80050a8:	4814      	ldr	r0, [pc, #80]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 80050aa:	f7fc fda7 	bl	8001bfc <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80050ae:	e01b      	b.n	80050e8 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80050b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	2305      	movs	r3, #5
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	2315      	movs	r3, #21
 80050bc:	2221      	movs	r2, #33	; 0x21
 80050be:	219b      	movs	r1, #155	; 0x9b
 80050c0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80050c4:	f7fc fb2f 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80050c8:	490d      	ldr	r1, [pc, #52]	; (8005100 <drawCurrentStateOfSwitches+0x20c>)
 80050ca:	480c      	ldr	r0, [pc, #48]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 80050cc:	f00c fdd0 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	2300      	movs	r3, #0
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2300      	movs	r3, #0
 80050dc:	229d      	movs	r2, #157	; 0x9d
 80050de:	f240 1111 	movw	r1, #273	; 0x111
 80050e2:	4806      	ldr	r0, [pc, #24]	; (80050fc <drawCurrentStateOfSwitches+0x208>)
 80050e4:	f7fc fd8a 	bl	8001bfc <EF_PutString>
}
 80050e8:	bf00      	nop
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	08027470 	.word	0x08027470
 80050f4:	200002a8 	.word	0x200002a8
 80050f8:	08015ba4 	.word	0x08015ba4
 80050fc:	200002c0 	.word	0x200002c0
 8005100:	08015ba8 	.word	0x08015ba8

08005104 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 800510a:	4875      	ldr	r0, [pc, #468]	; (80052e0 <drawCurrentStateOfLights+0x1dc>)
 800510c:	f7fc fb5c 	bl	80017c8 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8005110:	4b74      	ldr	r3, [pc, #464]	; (80052e4 <drawCurrentStateOfLights+0x1e0>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01a      	beq.n	800514e <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005118:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	2305      	movs	r3, #5
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	2315      	movs	r3, #21
 8005124:	2221      	movs	r2, #33	; 0x21
 8005126:	2141      	movs	r1, #65	; 0x41
 8005128:	20c8      	movs	r0, #200	; 0xc8
 800512a:	f7fc fafc 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800512e:	496e      	ldr	r1, [pc, #440]	; (80052e8 <drawCurrentStateOfLights+0x1e4>)
 8005130:	486e      	ldr	r0, [pc, #440]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 8005132:	f00c fd9d 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005136:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	2300      	movs	r3, #0
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2300      	movs	r3, #0
 8005142:	2243      	movs	r2, #67	; 0x43
 8005144:	21cb      	movs	r1, #203	; 0xcb
 8005146:	4869      	ldr	r0, [pc, #420]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 8005148:	f7fc fd58 	bl	8001bfc <EF_PutString>
 800514c:	e019      	b.n	8005182 <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800514e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	2305      	movs	r3, #5
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	2315      	movs	r3, #21
 800515a:	2221      	movs	r2, #33	; 0x21
 800515c:	2141      	movs	r1, #65	; 0x41
 800515e:	20c8      	movs	r0, #200	; 0xc8
 8005160:	f7fc fae1 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005164:	4962      	ldr	r1, [pc, #392]	; (80052f0 <drawCurrentStateOfLights+0x1ec>)
 8005166:	4861      	ldr	r0, [pc, #388]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 8005168:	f00c fd82 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800516c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	2300      	movs	r3, #0
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	2300      	movs	r3, #0
 8005178:	2243      	movs	r2, #67	; 0x43
 800517a:	21cb      	movs	r1, #203	; 0xcb
 800517c:	485b      	ldr	r0, [pc, #364]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 800517e:	f7fc fd3d 	bl	8001bfc <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8005182:	4b58      	ldr	r3, [pc, #352]	; (80052e4 <drawCurrentStateOfLights+0x1e0>)
 8005184:	785b      	ldrb	r3, [r3, #1]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01a      	beq.n	80051c0 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800518a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	2305      	movs	r3, #5
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2315      	movs	r3, #21
 8005196:	2221      	movs	r2, #33	; 0x21
 8005198:	215f      	movs	r1, #95	; 0x5f
 800519a:	20c8      	movs	r0, #200	; 0xc8
 800519c:	f7fc fac3 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80051a0:	4951      	ldr	r1, [pc, #324]	; (80052e8 <drawCurrentStateOfLights+0x1e4>)
 80051a2:	4852      	ldr	r0, [pc, #328]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 80051a4:	f00c fd64 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	2300      	movs	r3, #0
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	2300      	movs	r3, #0
 80051b4:	2261      	movs	r2, #97	; 0x61
 80051b6:	21cb      	movs	r1, #203	; 0xcb
 80051b8:	484c      	ldr	r0, [pc, #304]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 80051ba:	f7fc fd1f 	bl	8001bfc <EF_PutString>
 80051be:	e019      	b.n	80051f4 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80051c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	2305      	movs	r3, #5
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	2315      	movs	r3, #21
 80051cc:	2221      	movs	r2, #33	; 0x21
 80051ce:	215f      	movs	r1, #95	; 0x5f
 80051d0:	20c8      	movs	r0, #200	; 0xc8
 80051d2:	f7fc faa8 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80051d6:	4946      	ldr	r1, [pc, #280]	; (80052f0 <drawCurrentStateOfLights+0x1ec>)
 80051d8:	4844      	ldr	r0, [pc, #272]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 80051da:	f00c fd49 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051e2:	9301      	str	r3, [sp, #4]
 80051e4:	2300      	movs	r3, #0
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	2300      	movs	r3, #0
 80051ea:	2261      	movs	r2, #97	; 0x61
 80051ec:	21cb      	movs	r1, #203	; 0xcb
 80051ee:	483f      	ldr	r0, [pc, #252]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 80051f0:	f7fc fd04 	bl	8001bfc <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 80051f4:	4b3b      	ldr	r3, [pc, #236]	; (80052e4 <drawCurrentStateOfLights+0x1e0>)
 80051f6:	789b      	ldrb	r3, [r3, #2]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01a      	beq.n	8005232 <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80051fc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	2305      	movs	r3, #5
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	2315      	movs	r3, #21
 8005208:	2221      	movs	r2, #33	; 0x21
 800520a:	217d      	movs	r1, #125	; 0x7d
 800520c:	20c8      	movs	r0, #200	; 0xc8
 800520e:	f7fc fa8a 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005212:	4935      	ldr	r1, [pc, #212]	; (80052e8 <drawCurrentStateOfLights+0x1e4>)
 8005214:	4835      	ldr	r0, [pc, #212]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 8005216:	f00c fd2b 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800521a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	2300      	movs	r3, #0
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	227f      	movs	r2, #127	; 0x7f
 8005228:	21cb      	movs	r1, #203	; 0xcb
 800522a:	4830      	ldr	r0, [pc, #192]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 800522c:	f7fc fce6 	bl	8001bfc <EF_PutString>
 8005230:	e019      	b.n	8005266 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005232:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005236:	9301      	str	r3, [sp, #4]
 8005238:	2305      	movs	r3, #5
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	2315      	movs	r3, #21
 800523e:	2221      	movs	r2, #33	; 0x21
 8005240:	217d      	movs	r1, #125	; 0x7d
 8005242:	20c8      	movs	r0, #200	; 0xc8
 8005244:	f7fc fa6f 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005248:	4929      	ldr	r1, [pc, #164]	; (80052f0 <drawCurrentStateOfLights+0x1ec>)
 800524a:	4828      	ldr	r0, [pc, #160]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 800524c:	f00c fd10 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005250:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	2300      	movs	r3, #0
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	2300      	movs	r3, #0
 800525c:	227f      	movs	r2, #127	; 0x7f
 800525e:	21cb      	movs	r1, #203	; 0xcb
 8005260:	4822      	ldr	r0, [pc, #136]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 8005262:	f7fc fccb 	bl	8001bfc <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8005266:	4b1f      	ldr	r3, [pc, #124]	; (80052e4 <drawCurrentStateOfLights+0x1e0>)
 8005268:	78db      	ldrb	r3, [r3, #3]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01a      	beq.n	80052a4 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800526e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	2305      	movs	r3, #5
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	2315      	movs	r3, #21
 800527a:	2221      	movs	r2, #33	; 0x21
 800527c:	219b      	movs	r1, #155	; 0x9b
 800527e:	20c8      	movs	r0, #200	; 0xc8
 8005280:	f7fc fa51 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005284:	4918      	ldr	r1, [pc, #96]	; (80052e8 <drawCurrentStateOfLights+0x1e4>)
 8005286:	4819      	ldr	r0, [pc, #100]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 8005288:	f00c fcf2 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800528c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	2300      	movs	r3, #0
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	2300      	movs	r3, #0
 8005298:	229d      	movs	r2, #157	; 0x9d
 800529a:	21cb      	movs	r1, #203	; 0xcb
 800529c:	4813      	ldr	r0, [pc, #76]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 800529e:	f7fc fcad 	bl	8001bfc <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 80052a2:	e019      	b.n	80052d8 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80052a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	2305      	movs	r3, #5
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	2315      	movs	r3, #21
 80052b0:	2221      	movs	r2, #33	; 0x21
 80052b2:	219b      	movs	r1, #155	; 0x9b
 80052b4:	20c8      	movs	r0, #200	; 0xc8
 80052b6:	f7fc fa36 	bl	8001726 <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80052ba:	490d      	ldr	r1, [pc, #52]	; (80052f0 <drawCurrentStateOfLights+0x1ec>)
 80052bc:	480b      	ldr	r0, [pc, #44]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 80052be:	f00c fcd7 	bl	8011c70 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80052c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	2300      	movs	r3, #0
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	2300      	movs	r3, #0
 80052ce:	229d      	movs	r2, #157	; 0x9d
 80052d0:	21cb      	movs	r1, #203	; 0xcb
 80052d2:	4806      	ldr	r0, [pc, #24]	; (80052ec <drawCurrentStateOfLights+0x1e8>)
 80052d4:	f7fc fc92 	bl	8001bfc <EF_PutString>
}
 80052d8:	bf00      	nop
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	08027470 	.word	0x08027470
 80052e4:	200002ac 	.word	0x200002ac
 80052e8:	08015ba4 	.word	0x08015ba4
 80052ec:	200002c0 	.word	0x200002c0
 80052f0:	08015ba8 	.word	0x08015ba8

080052f4 <restoreTFTScheduleDayOfWeek>:


//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 80052fe:	2300      	movs	r3, #0
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	f107 030c 	add.w	r3, r7, #12
 8005306:	2100      	movs	r1, #0
 8005308:	460a      	mov	r2, r1
 800530a:	801a      	strh	r2, [r3, #0]
 800530c:	460a      	mov	r2, r1
 800530e:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 8005310:	f107 0208 	add.w	r2, r7, #8
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f7fd fd09 	bl	8002d30 <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 800531e:	7a3b      	ldrb	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <restoreTFTScheduleDayOfWeek+0x3a>
 8005324:	2101      	movs	r1, #1
 8005326:	2001      	movs	r0, #1
 8005328:	f001 fae2 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 800532c:	e003      	b.n	8005336 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 800532e:	2100      	movs	r1, #0
 8005330:	2001      	movs	r0, #1
 8005332:	f001 fadd 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 8005336:	7a7b      	ldrb	r3, [r7, #9]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d004      	beq.n	8005346 <restoreTFTScheduleDayOfWeek+0x52>
 800533c:	2101      	movs	r1, #1
 800533e:	2002      	movs	r0, #2
 8005340:	f001 fad6 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8005344:	e003      	b.n	800534e <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 8005346:	2100      	movs	r1, #0
 8005348:	2002      	movs	r0, #2
 800534a:	f001 fad1 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 800534e:	7abb      	ldrb	r3, [r7, #10]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <restoreTFTScheduleDayOfWeek+0x6a>
 8005354:	2101      	movs	r1, #1
 8005356:	2003      	movs	r0, #3
 8005358:	f001 faca 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 800535c:	e003      	b.n	8005366 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 800535e:	2100      	movs	r1, #0
 8005360:	2003      	movs	r0, #3
 8005362:	f001 fac5 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 8005366:	7afb      	ldrb	r3, [r7, #11]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <restoreTFTScheduleDayOfWeek+0x82>
 800536c:	2101      	movs	r1, #1
 800536e:	2004      	movs	r0, #4
 8005370:	f001 fabe 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8005374:	e003      	b.n	800537e <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 8005376:	2100      	movs	r1, #0
 8005378:	2004      	movs	r0, #4
 800537a:	f001 fab9 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 800537e:	7b3b      	ldrb	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d004      	beq.n	800538e <restoreTFTScheduleDayOfWeek+0x9a>
 8005384:	2101      	movs	r1, #1
 8005386:	2005      	movs	r0, #5
 8005388:	f001 fab2 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 800538c:	e003      	b.n	8005396 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 800538e:	2100      	movs	r1, #0
 8005390:	2005      	movs	r0, #5
 8005392:	f001 faad 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 8005396:	7b7b      	ldrb	r3, [r7, #13]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d004      	beq.n	80053a6 <restoreTFTScheduleDayOfWeek+0xb2>
 800539c:	2101      	movs	r1, #1
 800539e:	2006      	movs	r0, #6
 80053a0:	f001 faa6 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 80053a4:	e003      	b.n	80053ae <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 80053a6:	2100      	movs	r1, #0
 80053a8:	2006      	movs	r0, #6
 80053aa:	f001 faa1 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 80053ae:	7bbb      	ldrb	r3, [r7, #14]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <restoreTFTScheduleDayOfWeek+0xca>
 80053b4:	2101      	movs	r1, #1
 80053b6:	2007      	movs	r0, #7
 80053b8:	f001 fa9a 	bl	80068f0 <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 80053bc:	e003      	b.n	80053c6 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 80053be:	2100      	movs	r1, #0
 80053c0:	2007      	movs	r0, #7
 80053c2:	f001 fa95 	bl	80068f0 <changeTFTScheduleDayOfWeek>
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	4603      	mov	r3, r0
 80053d6:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	f107 0310 	add.w	r3, r7, #16
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 80053e6:	f107 020c 	add.w	r2, r7, #12
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	4611      	mov	r1, r2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fd fd1a 	bl	8002e28 <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 80053f4:	7b3b      	ldrb	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d004      	beq.n	8005404 <restoreTFTScheduleRelayLights+0x36>
 80053fa:	2101      	movs	r1, #1
 80053fc:	2001      	movs	r0, #1
 80053fe:	f001 fb54 	bl	8006aaa <changeTFTScheduleRelayLights>
 8005402:	e003      	b.n	800540c <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 8005404:	2100      	movs	r1, #0
 8005406:	2001      	movs	r0, #1
 8005408:	f001 fb4f 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 800540c:	7b7b      	ldrb	r3, [r7, #13]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d004      	beq.n	800541c <restoreTFTScheduleRelayLights+0x4e>
 8005412:	2101      	movs	r1, #1
 8005414:	2002      	movs	r0, #2
 8005416:	f001 fb48 	bl	8006aaa <changeTFTScheduleRelayLights>
 800541a:	e003      	b.n	8005424 <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 800541c:	2100      	movs	r1, #0
 800541e:	2002      	movs	r0, #2
 8005420:	f001 fb43 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 8005424:	7bbb      	ldrb	r3, [r7, #14]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <restoreTFTScheduleRelayLights+0x66>
 800542a:	2101      	movs	r1, #1
 800542c:	2003      	movs	r0, #3
 800542e:	f001 fb3c 	bl	8006aaa <changeTFTScheduleRelayLights>
 8005432:	e003      	b.n	800543c <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 8005434:	2100      	movs	r1, #0
 8005436:	2003      	movs	r0, #3
 8005438:	f001 fb37 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <restoreTFTScheduleRelayLights+0x7e>
 8005442:	2101      	movs	r1, #1
 8005444:	2004      	movs	r0, #4
 8005446:	f001 fb30 	bl	8006aaa <changeTFTScheduleRelayLights>
 800544a:	e003      	b.n	8005454 <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 800544c:	2100      	movs	r1, #0
 800544e:	2004      	movs	r0, #4
 8005450:	f001 fb2b 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 8005454:	7c3b      	ldrb	r3, [r7, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d004      	beq.n	8005464 <restoreTFTScheduleRelayLights+0x96>
 800545a:	2101      	movs	r1, #1
 800545c:	2005      	movs	r0, #5
 800545e:	f001 fb24 	bl	8006aaa <changeTFTScheduleRelayLights>
 8005462:	e003      	b.n	800546c <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 8005464:	2100      	movs	r1, #0
 8005466:	2005      	movs	r0, #5
 8005468:	f001 fb1f 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 800546c:	7c7b      	ldrb	r3, [r7, #17]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d004      	beq.n	800547c <restoreTFTScheduleRelayLights+0xae>
 8005472:	2101      	movs	r1, #1
 8005474:	2006      	movs	r0, #6
 8005476:	f001 fb18 	bl	8006aaa <changeTFTScheduleRelayLights>
 800547a:	e003      	b.n	8005484 <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 800547c:	2100      	movs	r1, #0
 800547e:	2006      	movs	r0, #6
 8005480:	f001 fb13 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 8005484:	7cbb      	ldrb	r3, [r7, #18]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <restoreTFTScheduleRelayLights+0xc6>
 800548a:	2101      	movs	r1, #1
 800548c:	2007      	movs	r0, #7
 800548e:	f001 fb0c 	bl	8006aaa <changeTFTScheduleRelayLights>
 8005492:	e003      	b.n	800549c <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 8005494:	2100      	movs	r1, #0
 8005496:	2007      	movs	r0, #7
 8005498:	f001 fb07 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 800549c:	7cfb      	ldrb	r3, [r7, #19]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <restoreTFTScheduleRelayLights+0xde>
 80054a2:	2101      	movs	r1, #1
 80054a4:	2008      	movs	r0, #8
 80054a6:	f001 fb00 	bl	8006aaa <changeTFTScheduleRelayLights>
 80054aa:	e003      	b.n	80054b4 <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 80054ac:	2100      	movs	r1, #0
 80054ae:	2008      	movs	r0, #8
 80054b0:	f001 fafb 	bl	8006aaa <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 80054b4:	7d3b      	ldrb	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d004      	beq.n	80054c4 <restoreTFTScheduleRelayLights+0xf6>
 80054ba:	2101      	movs	r1, #1
 80054bc:	2009      	movs	r0, #9
 80054be:	f001 faf4 	bl	8006aaa <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 80054c2:	e003      	b.n	80054cc <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 80054c4:	2100      	movs	r1, #0
 80054c6:	2009      	movs	r0, #9
 80054c8:	f001 faef 	bl	8006aaa <changeTFTScheduleRelayLights>
}
 80054cc:	bf00      	nop
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <initWait>:

//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 80054dc:	bf00      	nop
 80054de:	f004 feeb 	bl	800a2b8 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4b05      	ldr	r3, [pc, #20]	; (80054fc <initWait+0x28>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d2f6      	bcs.n	80054de <initWait+0xa>
    {
    }
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000250 	.word	0x20000250

08005500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005506:	f107 0314 	add.w	r3, r7, #20
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	609a      	str	r2, [r3, #8]
 8005512:	60da      	str	r2, [r3, #12]
 8005514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	4b5f      	ldr	r3, [pc, #380]	; (8005698 <MX_GPIO_Init+0x198>)
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	4a5e      	ldr	r2, [pc, #376]	; (8005698 <MX_GPIO_Init+0x198>)
 8005520:	f043 0304 	orr.w	r3, r3, #4
 8005524:	6313      	str	r3, [r2, #48]	; 0x30
 8005526:	4b5c      	ldr	r3, [pc, #368]	; (8005698 <MX_GPIO_Init+0x198>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	4b58      	ldr	r3, [pc, #352]	; (8005698 <MX_GPIO_Init+0x198>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	4a57      	ldr	r2, [pc, #348]	; (8005698 <MX_GPIO_Init+0x198>)
 800553c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005540:	6313      	str	r3, [r2, #48]	; 0x30
 8005542:	4b55      	ldr	r3, [pc, #340]	; (8005698 <MX_GPIO_Init+0x198>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	4b51      	ldr	r3, [pc, #324]	; (8005698 <MX_GPIO_Init+0x198>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	4a50      	ldr	r2, [pc, #320]	; (8005698 <MX_GPIO_Init+0x198>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6313      	str	r3, [r2, #48]	; 0x30
 800555e:	4b4e      	ldr	r3, [pc, #312]	; (8005698 <MX_GPIO_Init+0x198>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	60bb      	str	r3, [r7, #8]
 8005568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800556a:	2300      	movs	r3, #0
 800556c:	607b      	str	r3, [r7, #4]
 800556e:	4b4a      	ldr	r3, [pc, #296]	; (8005698 <MX_GPIO_Init+0x198>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	4a49      	ldr	r2, [pc, #292]	; (8005698 <MX_GPIO_Init+0x198>)
 8005574:	f043 0302 	orr.w	r3, r3, #2
 8005578:	6313      	str	r3, [r2, #48]	; 0x30
 800557a:	4b47      	ldr	r3, [pc, #284]	; (8005698 <MX_GPIO_Init+0x198>)
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	607b      	str	r3, [r7, #4]
 8005584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005586:	2200      	movs	r2, #0
 8005588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800558c:	4843      	ldr	r0, [pc, #268]	; (800569c <MX_GPIO_Init+0x19c>)
 800558e:	f005 fe0f 	bl	800b1b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 8005592:	2200      	movs	r2, #0
 8005594:	f247 4102 	movw	r1, #29698	; 0x7402
 8005598:	4841      	ldr	r0, [pc, #260]	; (80056a0 <MX_GPIO_Init+0x1a0>)
 800559a:	f005 fe09 	bl	800b1b0 <HAL_GPIO_WritePin>
                          |TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_nRF_GPIO_Port, CSN_nRF_Pin, GPIO_PIN_RESET);
 800559e:	2200      	movs	r2, #0
 80055a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055a4:	483f      	ldr	r0, [pc, #252]	; (80056a4 <MX_GPIO_Init+0x1a4>)
 80055a6:	f005 fe03 	bl	800b1b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80055aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055b0:	2301      	movs	r3, #1
 80055b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b8:	2300      	movs	r3, #0
 80055ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80055bc:	f107 0314 	add.w	r3, r7, #20
 80055c0:	4619      	mov	r1, r3
 80055c2:	4836      	ldr	r0, [pc, #216]	; (800569c <MX_GPIO_Init+0x19c>)
 80055c4:	f005 fc58 	bl	800ae78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_DS3231_RTC_Pin;
 80055c8:	2310      	movs	r3, #16
 80055ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80055cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80055d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055d2:	2301      	movs	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 80055d6:	f107 0314 	add.w	r3, r7, #20
 80055da:	4619      	mov	r1, r3
 80055dc:	4831      	ldr	r0, [pc, #196]	; (80056a4 <MX_GPIO_Init+0x1a4>)
 80055de:	f005 fc4b 	bl	800ae78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin
 80055e2:	f247 4302 	movw	r3, #29698	; 0x7402
 80055e6:	617b      	str	r3, [r7, #20]
                          |TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055e8:	2301      	movs	r3, #1
 80055ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055f0:	2300      	movs	r3, #0
 80055f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055f4:	f107 0314 	add.w	r3, r7, #20
 80055f8:	4619      	mov	r1, r3
 80055fa:	4829      	ldr	r0, [pc, #164]	; (80056a0 <MX_GPIO_Init+0x1a0>)
 80055fc:	f005 fc3c 	bl	800ae78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 8005600:	2304      	movs	r3, #4
 8005602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005604:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560a:	2300      	movs	r3, #0
 800560c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 800560e:	f107 0314 	add.w	r3, r7, #20
 8005612:	4619      	mov	r1, r3
 8005614:	4822      	ldr	r0, [pc, #136]	; (80056a0 <MX_GPIO_Init+0x1a0>)
 8005616:	f005 fc2f 	bl	800ae78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_DS3231_RTC_Pin;
 800561a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005620:	2300      	movs	r3, #0
 8005622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RST_DS3231_RTC_GPIO_Port, &GPIO_InitStruct);
 8005628:	f107 0314 	add.w	r3, r7, #20
 800562c:	4619      	mov	r1, r3
 800562e:	481c      	ldr	r0, [pc, #112]	; (80056a0 <MX_GPIO_Init+0x1a0>)
 8005630:	f005 fc22 	bl	800ae78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8005634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800563a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800563e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005640:	2300      	movs	r3, #0
 8005642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005644:	f107 0314 	add.w	r3, r7, #20
 8005648:	4619      	mov	r1, r3
 800564a:	4816      	ldr	r0, [pc, #88]	; (80056a4 <MX_GPIO_Init+0x1a4>)
 800564c:	f005 fc14 	bl	800ae78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_nRF_Pin;
 8005650:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005656:	2301      	movs	r3, #1
 8005658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800565e:	2300      	movs	r3, #0
 8005660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_nRF_GPIO_Port, &GPIO_InitStruct);
 8005662:	f107 0314 	add.w	r3, r7, #20
 8005666:	4619      	mov	r1, r3
 8005668:	480e      	ldr	r0, [pc, #56]	; (80056a4 <MX_GPIO_Init+0x1a4>)
 800566a:	f005 fc05 	bl	800ae78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800566e:	2200      	movs	r2, #0
 8005670:	2100      	movs	r1, #0
 8005672:	2008      	movs	r0, #8
 8005674:	f004 ff8f 	bl	800a596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005678:	2008      	movs	r0, #8
 800567a:	f004 ffa8 	bl	800a5ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800567e:	2200      	movs	r2, #0
 8005680:	2100      	movs	r1, #0
 8005682:	2017      	movs	r0, #23
 8005684:	f004 ff87 	bl	800a596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005688:	2017      	movs	r0, #23
 800568a:	f004 ffa0 	bl	800a5ce <HAL_NVIC_EnableIRQ>

}
 800568e:	bf00      	nop
 8005690:	3728      	adds	r7, #40	; 0x28
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40023800 	.word	0x40023800
 800569c:	40020800 	.word	0x40020800
 80056a0:	40020400 	.word	0x40020400
 80056a4:	40020000 	.word	0x40020000

080056a8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80056ac:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056ae:	4a13      	ldr	r2, [pc, #76]	; (80056fc <MX_I2C1_Init+0x54>)
 80056b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80056b2:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056b4:	4a12      	ldr	r2, [pc, #72]	; (8005700 <MX_I2C1_Init+0x58>)
 80056b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80056b8:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80056be:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80056d2:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80056d8:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056da:	2200      	movs	r2, #0
 80056dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80056de:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80056e4:	4804      	ldr	r0, [pc, #16]	; (80056f8 <MX_I2C1_Init+0x50>)
 80056e6:	f005 fdaf 	bl	800b248 <HAL_I2C_Init>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80056f0:	f000 fa82 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80056f4:	bf00      	nop
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	2000043c 	.word	0x2000043c
 80056fc:	40005400 	.word	0x40005400
 8005700:	00061a80 	.word	0x00061a80

08005704 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005708:	4b12      	ldr	r3, [pc, #72]	; (8005754 <MX_I2C3_Init+0x50>)
 800570a:	4a13      	ldr	r2, [pc, #76]	; (8005758 <MX_I2C3_Init+0x54>)
 800570c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <MX_I2C3_Init+0x50>)
 8005710:	4a12      	ldr	r2, [pc, #72]	; (800575c <MX_I2C3_Init+0x58>)
 8005712:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005714:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <MX_I2C3_Init+0x50>)
 8005716:	2200      	movs	r2, #0
 8005718:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800571a:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <MX_I2C3_Init+0x50>)
 800571c:	2200      	movs	r2, #0
 800571e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005720:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <MX_I2C3_Init+0x50>)
 8005722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005726:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <MX_I2C3_Init+0x50>)
 800572a:	2200      	movs	r2, #0
 800572c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800572e:	4b09      	ldr	r3, [pc, #36]	; (8005754 <MX_I2C3_Init+0x50>)
 8005730:	2200      	movs	r2, #0
 8005732:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005734:	4b07      	ldr	r3, [pc, #28]	; (8005754 <MX_I2C3_Init+0x50>)
 8005736:	2200      	movs	r2, #0
 8005738:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800573a:	4b06      	ldr	r3, [pc, #24]	; (8005754 <MX_I2C3_Init+0x50>)
 800573c:	2200      	movs	r2, #0
 800573e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005740:	4804      	ldr	r0, [pc, #16]	; (8005754 <MX_I2C3_Init+0x50>)
 8005742:	f005 fd81 	bl	800b248 <HAL_I2C_Init>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800574c:	f000 fa54 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005750:	bf00      	nop
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000388 	.word	0x20000388
 8005758:	40005c00 	.word	0x40005c00
 800575c:	000186a0 	.word	0x000186a0

08005760 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	; 0x30
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005768:	f107 031c 	add.w	r3, r7, #28
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	605a      	str	r2, [r3, #4]
 8005772:	609a      	str	r2, [r3, #8]
 8005774:	60da      	str	r2, [r3, #12]
 8005776:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a74      	ldr	r2, [pc, #464]	; (8005950 <HAL_I2C_MspInit+0x1f0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	f040 8091 	bne.w	80058a6 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005784:	2300      	movs	r3, #0
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	4b72      	ldr	r3, [pc, #456]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	4a71      	ldr	r2, [pc, #452]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 800578e:	f043 0302 	orr.w	r3, r3, #2
 8005792:	6313      	str	r3, [r2, #48]	; 0x30
 8005794:	4b6f      	ldr	r3, [pc, #444]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_DS3231_RTC_Pin|I2C1_SDA_DS3231_RTC_Pin;
 80057a0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80057a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057a6:	2312      	movs	r3, #18
 80057a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057ae:	2303      	movs	r3, #3
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057b2:	2304      	movs	r3, #4
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057b6:	f107 031c 	add.w	r3, r7, #28
 80057ba:	4619      	mov	r1, r3
 80057bc:	4866      	ldr	r0, [pc, #408]	; (8005958 <HAL_I2C_MspInit+0x1f8>)
 80057be:	f005 fb5b 	bl	800ae78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	4b63      	ldr	r3, [pc, #396]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	4a62      	ldr	r2, [pc, #392]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80057cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057d0:	6413      	str	r3, [r2, #64]	; 0x40
 80057d2:	4b60      	ldr	r3, [pc, #384]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80057de:	4b5f      	ldr	r3, [pc, #380]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 80057e0:	4a5f      	ldr	r2, [pc, #380]	; (8005960 <HAL_I2C_MspInit+0x200>)
 80057e2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80057e4:	4b5d      	ldr	r3, [pc, #372]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 80057e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057ea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057ec:	4b5b      	ldr	r3, [pc, #364]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057f2:	4b5a      	ldr	r3, [pc, #360]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057f8:	4b58      	ldr	r3, [pc, #352]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 80057fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057fe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005800:	4b56      	ldr	r3, [pc, #344]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 8005802:	2200      	movs	r2, #0
 8005804:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005806:	4b55      	ldr	r3, [pc, #340]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 8005808:	2200      	movs	r2, #0
 800580a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800580c:	4b53      	ldr	r3, [pc, #332]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 800580e:	2200      	movs	r2, #0
 8005810:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005812:	4b52      	ldr	r3, [pc, #328]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 8005814:	2200      	movs	r2, #0
 8005816:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005818:	4b50      	ldr	r3, [pc, #320]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 800581a:	2200      	movs	r2, #0
 800581c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800581e:	484f      	ldr	r0, [pc, #316]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 8005820:	f004 ff1a 	bl	800a658 <HAL_DMA_Init>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800582a:	f000 f9e5 	bl	8005bf8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a4a      	ldr	r2, [pc, #296]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 8005832:	639a      	str	r2, [r3, #56]	; 0x38
 8005834:	4a49      	ldr	r2, [pc, #292]	; (800595c <HAL_I2C_MspInit+0x1fc>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800583a:	4b4a      	ldr	r3, [pc, #296]	; (8005964 <HAL_I2C_MspInit+0x204>)
 800583c:	4a4a      	ldr	r2, [pc, #296]	; (8005968 <HAL_I2C_MspInit+0x208>)
 800583e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8005840:	4b48      	ldr	r3, [pc, #288]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005842:	2200      	movs	r2, #0
 8005844:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005846:	4b47      	ldr	r3, [pc, #284]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005848:	2240      	movs	r2, #64	; 0x40
 800584a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800584c:	4b45      	ldr	r3, [pc, #276]	; (8005964 <HAL_I2C_MspInit+0x204>)
 800584e:	2200      	movs	r2, #0
 8005850:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005852:	4b44      	ldr	r3, [pc, #272]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005858:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800585a:	4b42      	ldr	r3, [pc, #264]	; (8005964 <HAL_I2C_MspInit+0x204>)
 800585c:	2200      	movs	r2, #0
 800585e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005860:	4b40      	ldr	r3, [pc, #256]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005862:	2200      	movs	r2, #0
 8005864:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005866:	4b3f      	ldr	r3, [pc, #252]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005868:	2200      	movs	r2, #0
 800586a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800586c:	4b3d      	ldr	r3, [pc, #244]	; (8005964 <HAL_I2C_MspInit+0x204>)
 800586e:	2200      	movs	r2, #0
 8005870:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005872:	4b3c      	ldr	r3, [pc, #240]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005874:	2200      	movs	r2, #0
 8005876:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005878:	483a      	ldr	r0, [pc, #232]	; (8005964 <HAL_I2C_MspInit+0x204>)
 800587a:	f004 feed 	bl	800a658 <HAL_DMA_Init>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8005884:	f000 f9b8 	bl	8005bf8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a36      	ldr	r2, [pc, #216]	; (8005964 <HAL_I2C_MspInit+0x204>)
 800588c:	635a      	str	r2, [r3, #52]	; 0x34
 800588e:	4a35      	ldr	r2, [pc, #212]	; (8005964 <HAL_I2C_MspInit+0x204>)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005894:	2200      	movs	r2, #0
 8005896:	2100      	movs	r1, #0
 8005898:	2020      	movs	r0, #32
 800589a:	f004 fe7c 	bl	800a596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800589e:	2020      	movs	r0, #32
 80058a0:	f004 fe95 	bl	800a5ce <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80058a4:	e050      	b.n	8005948 <HAL_I2C_MspInit+0x1e8>
  else if(i2cHandle->Instance==I2C3)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a30      	ldr	r2, [pc, #192]	; (800596c <HAL_I2C_MspInit+0x20c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d14b      	bne.n	8005948 <HAL_I2C_MspInit+0x1e8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	4b27      	ldr	r3, [pc, #156]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80058b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b8:	4a26      	ldr	r2, [pc, #152]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	6313      	str	r3, [r2, #48]	; 0x30
 80058c0:	4b24      	ldr	r3, [pc, #144]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	4b20      	ldr	r3, [pc, #128]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80058d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d4:	4a1f      	ldr	r2, [pc, #124]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80058d6:	f043 0302 	orr.w	r3, r3, #2
 80058da:	6313      	str	r3, [r2, #48]	; 0x30
 80058dc:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_EEPROM_Pin;
 80058e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058ee:	2312      	movs	r3, #18
 80058f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058f6:	2303      	movs	r3, #3
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80058fa:	2304      	movs	r3, #4
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_EEPROM_GPIO_Port, &GPIO_InitStruct);
 80058fe:	f107 031c 	add.w	r3, r7, #28
 8005902:	4619      	mov	r1, r3
 8005904:	481a      	ldr	r0, [pc, #104]	; (8005970 <HAL_I2C_MspInit+0x210>)
 8005906:	f005 fab7 	bl	800ae78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_EEPROM_Pin;
 800590a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800590e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005910:	2312      	movs	r3, #18
 8005912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005914:	2300      	movs	r3, #0
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005918:	2303      	movs	r3, #3
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800591c:	2309      	movs	r3, #9
 800591e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8005920:	f107 031c 	add.w	r3, r7, #28
 8005924:	4619      	mov	r1, r3
 8005926:	480c      	ldr	r0, [pc, #48]	; (8005958 <HAL_I2C_MspInit+0x1f8>)
 8005928:	f005 faa6 	bl	800ae78 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800592c:	2300      	movs	r3, #0
 800592e:	60bb      	str	r3, [r7, #8]
 8005930:	4b08      	ldr	r3, [pc, #32]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	4a07      	ldr	r2, [pc, #28]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 8005936:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800593a:	6413      	str	r3, [r2, #64]	; 0x40
 800593c:	4b05      	ldr	r3, [pc, #20]	; (8005954 <HAL_I2C_MspInit+0x1f4>)
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	68bb      	ldr	r3, [r7, #8]
}
 8005948:	bf00      	nop
 800594a:	3730      	adds	r7, #48	; 0x30
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40005400 	.word	0x40005400
 8005954:	40023800 	.word	0x40023800
 8005958:	40020400 	.word	0x40020400
 800595c:	20000490 	.word	0x20000490
 8005960:	40026010 	.word	0x40026010
 8005964:	200003dc 	.word	0x200003dc
 8005968:	40026028 	.word	0x40026028
 800596c:	40005c00 	.word	0x40005c00
 8005970:	40020000 	.word	0x40020000

08005974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800597a:	f004 fc37 	bl	800a1ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800597e:	f000 f865 	bl	8005a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005982:	f7ff fdbd 	bl	8005500 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005986:	f003 fc39 	bl	80091fc <MX_SPI1_Init>
  MX_DMA_Init();
 800598a:	f7fc fe1f 	bl	80025cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800598e:	f004 fa67 	bl	8009e60 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8005992:	f003 fc69 	bl	8009268 <MX_SPI3_Init>
  MX_I2C1_Init();
 8005996:	f7ff fe87 	bl	80056a8 <MX_I2C1_Init>
  MX_TIM11_Init();
 800599a:	f003 ffe3 	bl	8009964 <MX_TIM11_Init>
  MX_TIM10_Init();
 800599e:	f003 ffbd 	bl	800991c <MX_TIM10_Init>
  MX_I2C3_Init();
 80059a2:	f7ff feaf 	bl	8005704 <MX_I2C3_Init>
  MX_SPI5_Init();
 80059a6:	f003 fc95 	bl	80092d4 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 80059aa:	f004 fa2f 	bl	8009e0c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80059ae:	f003 ff61 	bl	8009874 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80059b2:	f000 f8b3 	bl	8005b1c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 80059b6:	481d      	ldr	r0, [pc, #116]	; (8005a2c <main+0xb8>)
 80059b8:	f009 fdf6 	bl	800f5a8 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 80059bc:	481c      	ldr	r0, [pc, #112]	; (8005a30 <main+0xbc>)
 80059be:	f7fc fb65 	bl	800208c <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 80059c2:	491c      	ldr	r1, [pc, #112]	; (8005a34 <main+0xc0>)
 80059c4:	481c      	ldr	r0, [pc, #112]	; (8005a38 <main+0xc4>)
 80059c6:	f004 f9d2 	bl	8009d6e <UARTDMA_Init>
  UARTDMA_Init(&huartdma1, &huart1);
 80059ca:	491c      	ldr	r1, [pc, #112]	; (8005a3c <main+0xc8>)
 80059cc:	481c      	ldr	r0, [pc, #112]	; (8005a40 <main+0xcc>)
 80059ce:	f004 f9ce 	bl	8009d6e <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 80059d2:	2117      	movs	r1, #23
 80059d4:	481b      	ldr	r0, [pc, #108]	; (8005a44 <main+0xd0>)
 80059d6:	f7fc fda9 	bl	800252c <XPT2046_Init>
  // RTC Initialization - I2C1
  DS3231_Init(&hi2c1);
 80059da:	481b      	ldr	r0, [pc, #108]	; (8005a48 <main+0xd4>)
 80059dc:	f7fc fe4c 	bl	8002678 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80059e0:	2001      	movs	r0, #1
 80059e2:	f7fc fea3 	bl	800272c <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 80059e6:	2001      	movs	r0, #1
 80059e8:	f7fc fec0 	bl	800276c <DS3231_EnableOscillator>
  // EEPROM CHECK TODO! Add check of eeprom and informing on screen about results
  uint8_t result = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	71fb      	strb	r3, [r7, #7]
  eeprom_read(0x01, &result, sizeof(result));
 80059f0:	1dfb      	adds	r3, r7, #7
 80059f2:	2201      	movs	r2, #1
 80059f4:	4619      	mov	r1, r3
 80059f6:	2001      	movs	r0, #1
 80059f8:	f7fd f804 	bl	8002a04 <eeprom_read>
  {

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 80059fc:	480e      	ldr	r0, [pc, #56]	; (8005a38 <main+0xc4>)
 80059fe:	f004 f969 	bl	8009cd4 <UARTDMA_IsDataReceivedReady>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <main+0x9a>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8005a08:	480b      	ldr	r0, [pc, #44]	; (8005a38 <main+0xc4>)
 8005a0a:	f002 ff1f 	bl	800884c <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8005a0e:	480a      	ldr	r0, [pc, #40]	; (8005a38 <main+0xc4>)
 8005a10:	f004 f972 	bl	8009cf8 <UARTDMA_TransmitEvent>

	  //////////////////////////////////////////////////////
	  // RECEIVE DATA FROM ESP
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma1))
 8005a14:	480a      	ldr	r0, [pc, #40]	; (8005a40 <main+0xcc>)
 8005a16:	f004 f95d 	bl	8009cd4 <UARTDMA_IsDataReceivedReady>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO ESP
	  //
	  UARTDMA_TransmitEvent(&huartdma1);
 8005a1a:	4809      	ldr	r0, [pc, #36]	; (8005a40 <main+0xcc>)
 8005a1c:	f004 f96c 	bl	8009cf8 <UARTDMA_TransmitEvent>

	  ////////////////////////////////////////////////////////
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 8005a20:	f7fc fcb2 	bl	8002388 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 8005a24:	f000 f924 	bl	8005c70 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005a28:	e7e8      	b.n	80059fc <main+0x88>
 8005a2a:	bf00      	nop
 8005a2c:	200009d8 	.word	0x200009d8
 8005a30:	20000938 	.word	0x20000938
 8005a34:	20000c2c 	.word	0x20000c2c
 8005a38:	200004f0 	.word	0x200004f0
 8005a3c:	20000be8 	.word	0x20000be8
 8005a40:	200006bc 	.word	0x200006bc
 8005a44:	200008e0 	.word	0x200008e0
 8005a48:	2000043c 	.word	0x2000043c

08005a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b094      	sub	sp, #80	; 0x50
 8005a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a52:	f107 0320 	add.w	r3, r7, #32
 8005a56:	2230      	movs	r2, #48	; 0x30
 8005a58:	2100      	movs	r1, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f00b fa80 	bl	8010f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a60:	f107 030c 	add.w	r3, r7, #12
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	605a      	str	r2, [r3, #4]
 8005a6a:	609a      	str	r2, [r3, #8]
 8005a6c:	60da      	str	r2, [r3, #12]
 8005a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a70:	2300      	movs	r3, #0
 8005a72:	60bb      	str	r3, [r7, #8]
 8005a74:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <SystemClock_Config+0xc8>)
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	4a26      	ldr	r2, [pc, #152]	; (8005b14 <SystemClock_Config+0xc8>)
 8005a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8005a80:	4b24      	ldr	r3, [pc, #144]	; (8005b14 <SystemClock_Config+0xc8>)
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a88:	60bb      	str	r3, [r7, #8]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	607b      	str	r3, [r7, #4]
 8005a90:	4b21      	ldr	r3, [pc, #132]	; (8005b18 <SystemClock_Config+0xcc>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <SystemClock_Config+0xcc>)
 8005a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <SystemClock_Config+0xcc>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005aa4:	607b      	str	r3, [r7, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ab6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8005abc:	230c      	movs	r3, #12
 8005abe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005ac0:	2360      	movs	r3, #96	; 0x60
 8005ac2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005ac8:	2304      	movs	r3, #4
 8005aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005acc:	f107 0320 	add.w	r3, r7, #32
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f008 fcbd 	bl	800e450 <HAL_RCC_OscConfig>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005adc:	f000 f88c 	bl	8005bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ae0:	230f      	movs	r3, #15
 8005ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005af6:	f107 030c 	add.w	r3, r7, #12
 8005afa:	2103      	movs	r1, #3
 8005afc:	4618      	mov	r0, r3
 8005afe:	f008 ff1f 	bl	800e940 <HAL_RCC_ClockConfig>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005b08:	f000 f876 	bl	8005bf8 <Error_Handler>
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	3750      	adds	r7, #80	; 0x50
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40023800 	.word	0x40023800
 8005b18:	40007000 	.word	0x40007000

08005b1c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005b20:	2200      	movs	r2, #0
 8005b22:	2100      	movs	r1, #0
 8005b24:	200a      	movs	r0, #10
 8005b26:	f004 fd36 	bl	800a596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005b2a:	200a      	movs	r0, #10
 8005b2c:	f004 fd4f 	bl	800a5ce <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005b30:	2200      	movs	r2, #0
 8005b32:	2100      	movs	r1, #0
 8005b34:	201f      	movs	r0, #31
 8005b36:	f004 fd2e 	bl	800a596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005b3a:	201f      	movs	r0, #31
 8005b3c:	f004 fd47 	bl	800a5ce <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005b40:	2200      	movs	r2, #0
 8005b42:	2100      	movs	r1, #0
 8005b44:	2026      	movs	r0, #38	; 0x26
 8005b46:	f004 fd26 	bl	800a596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005b4a:	2026      	movs	r0, #38	; 0x26
 8005b4c:	f004 fd3f 	bl	800a5ce <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005b50:	2200      	movs	r2, #0
 8005b52:	2100      	movs	r1, #0
 8005b54:	2033      	movs	r0, #51	; 0x33
 8005b56:	f004 fd1e 	bl	800a596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005b5a:	2033      	movs	r0, #51	; 0x33
 8005b5c:	f004 fd37 	bl	800a5ce <HAL_NVIC_EnableIRQ>
}
 8005b60:	bf00      	nop
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a12      	ldr	r2, [pc, #72]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d101      	bne.n	8005b7a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 8005b76:	f7ff f8e3 	bl	8004d40 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d117      	bne.n	8005bb4 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S) // timer to count seconds from start feeding to turn off this activity
 8005b84:	4b0f      	ldr	r3, [pc, #60]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d90d      	bls.n	8005ba8 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8005b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b90:	480d      	ldr	r0, [pc, #52]	; (8005bc8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8005b92:	f005 fb26 	bl	800b1e2 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 8005b96:	2000      	movs	r0, #0
 8005b98:	f7ff f95e 	bl	8004e58 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 8005b9c:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8005ba2:	480a      	ldr	r0, [pc, #40]	; (8005bcc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8005ba4:	f009 fd62 	bl	800f66c <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	3301      	adds	r3, #1
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005bb2:	701a      	strb	r2, [r3, #0]
	}
}
 8005bb4:	bf00      	nop
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40014800 	.word	0x40014800
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	20000254 	.word	0x20000254
 8005bc8:	40020800 	.word	0x40020800
 8005bcc:	20000990 	.word	0x20000990

08005bd0 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be0:	d101      	bne.n	8005be6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8005be2:	f7fc fc97 	bl	8002514 <XPT2046_IRQ>
	}

	if(GPIO_Pin == IRQ_DS3231_RTC_Pin) // Interrupt from RTC - alarm one per minute
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d101      	bne.n	8005bf0 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8005bec:	f7fc fe02 	bl	80027f4 <DS3231_ClearAlarm2Flag>

	}
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8005bfe:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005c02:	f7fc f9e5 	bl	8001fd0 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 8005c06:	4814      	ldr	r0, [pc, #80]	; (8005c58 <Error_Handler+0x60>)
 8005c08:	f7fb fdde 	bl	80017c8 <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8005c0c:	4a13      	ldr	r2, [pc, #76]	; (8005c5c <Error_Handler+0x64>)
 8005c0e:	4914      	ldr	r1, [pc, #80]	; (8005c60 <Error_Handler+0x68>)
 8005c10:	4814      	ldr	r0, [pc, #80]	; (8005c64 <Error_Handler+0x6c>)
 8005c12:	f00c f82d 	bl	8011c70 <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005c16:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	2300      	movs	r3, #0
 8005c22:	2214      	movs	r2, #20
 8005c24:	210a      	movs	r1, #10
 8005c26:	480f      	ldr	r0, [pc, #60]	; (8005c64 <Error_Handler+0x6c>)
 8005c28:	f7fb ffe8 	bl	8001bfc <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 8005c2c:	f240 1345 	movw	r3, #325	; 0x145
 8005c30:	4a0d      	ldr	r2, [pc, #52]	; (8005c68 <Error_Handler+0x70>)
 8005c32:	490e      	ldr	r1, [pc, #56]	; (8005c6c <Error_Handler+0x74>)
 8005c34:	480b      	ldr	r0, [pc, #44]	; (8005c64 <Error_Handler+0x6c>)
 8005c36:	f00c f81b 	bl	8011c70 <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005c3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005c3e:	9301      	str	r3, [sp, #4]
 8005c40:	2301      	movs	r3, #1
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	2300      	movs	r3, #0
 8005c46:	2232      	movs	r2, #50	; 0x32
 8005c48:	210a      	movs	r1, #10
 8005c4a:	4806      	ldr	r0, [pc, #24]	; (8005c64 <Error_Handler+0x6c>)
 8005c4c:	f7fb ffd6 	bl	8001bfc <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c50:	b672      	cpsid	i
}
 8005c52:	bf00      	nop

  __disable_irq();

  while (1)
 8005c54:	e7fe      	b.n	8005c54 <Error_Handler+0x5c>
 8005c56:	bf00      	nop
 8005c58:	08027470 	.word	0x08027470
 8005c5c:	08015dbc 	.word	0x08015dbc
 8005c60:	08015dd0 	.word	0x08015dd0
 8005c64:	200002c0 	.word	0x200002c0
 8005c68:	080269a0 	.word	0x080269a0
 8005c6c:	08015de8 	.word	0x08015de8

08005c70 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
	switch(State)
 8005c74:	4b4f      	ldr	r3, [pc, #316]	; (8005db4 <MenuTFT+0x144>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	f200 8098 	bhi.w	8005dae <MenuTFT+0x13e>
 8005c7e:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <MenuTFT+0x14>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005cbb 	.word	0x08005cbb
 8005c8c:	08005cef 	.word	0x08005cef
 8005c90:	08005d1f 	.word	0x08005d1f
 8005c94:	08005d3d 	.word	0x08005d3d
 8005c98:	08005d07 	.word	0x08005d07
 8005c9c:	08005d55 	.word	0x08005d55
 8005ca0:	08005d73 	.word	0x08005d73
 8005ca4:	08005d91 	.word	0x08005d91
	{
	case MENUTFT_INIT:
		system_init();
 8005ca8:	f7fd fab0 	bl	800320c <system_init>
		State = MENUTFT_PARAMETERS;
 8005cac:	4b41      	ldr	r3, [pc, #260]	; (8005db4 <MenuTFT+0x144>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8005cb2:	4b41      	ldr	r3, [pc, #260]	; (8005db8 <MenuTFT+0x148>)
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	701a      	strb	r2, [r3, #0]
		break;
 8005cb8:	e079      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8005cba:	4b3f      	ldr	r3, [pc, #252]	; (8005db8 <MenuTFT+0x148>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d112      	bne.n	8005ce8 <MenuTFT+0x78>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8005cc2:	4b3e      	ldr	r3, [pc, #248]	; (8005dbc <MenuTFT+0x14c>)
 8005cc4:	edd3 7a00 	vldr	s15, [r3]
 8005cc8:	4b3d      	ldr	r3, [pc, #244]	; (8005dc0 <MenuTFT+0x150>)
 8005cca:	ed93 7a00 	vldr	s14, [r3]
 8005cce:	eeb0 1a47 	vmov.f32	s2, s14
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8005dc4 <MenuTFT+0x154>
 8005cda:	eeb0 0a67 	vmov.f32	s0, s15
 8005cde:	f7fd fc13 	bl	8003508 <showCurrentParameters>
			StateChangeFlag = 0;
 8005ce2:	4b35      	ldr	r3, [pc, #212]	; (8005db8 <MenuTFT+0x148>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8005ce8:	f000 f874 	bl	8005dd4 <TouchParametersActivity>
		break;
 8005cec:	e05f      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8005cee:	4b32      	ldr	r3, [pc, #200]	; (8005db8 <MenuTFT+0x148>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d104      	bne.n	8005d00 <MenuTFT+0x90>
		{
			showControlPanel();
 8005cf6:	f7fd fd51 	bl	800379c <showControlPanel>
			StateChangeFlag = 0;
 8005cfa:	4b2f      	ldr	r3, [pc, #188]	; (8005db8 <MenuTFT+0x148>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8005d00:	f000 f8c8 	bl	8005e94 <TouchSwitchActivity>
		break;
 8005d04:	e053      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8005d06:	4b2c      	ldr	r3, [pc, #176]	; (8005db8 <MenuTFT+0x148>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d104      	bne.n	8005d18 <MenuTFT+0xa8>
		{
			showLightsControlPanel();
 8005d0e:	f7fd fe1f 	bl	8003950 <showLightsControlPanel>
			StateChangeFlag = 0;
 8005d12:	4b29      	ldr	r3, [pc, #164]	; (8005db8 <MenuTFT+0x148>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8005d18:	f000 f92e 	bl	8005f78 <TouchLightsActivity>
		break;
 8005d1c:	e047      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8005d1e:	4b26      	ldr	r3, [pc, #152]	; (8005db8 <MenuTFT+0x148>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d107      	bne.n	8005d36 <MenuTFT+0xc6>
		{
			showClockSetPanel();
 8005d26:	f7fd feeb 	bl	8003b00 <showClockSetPanel>
			ClockChangeFlag = 1;
 8005d2a:	4b27      	ldr	r3, [pc, #156]	; (8005dc8 <MenuTFT+0x158>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005d30:	4b21      	ldr	r3, [pc, #132]	; (8005db8 <MenuTFT+0x148>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8005d36:	f000 f98f 	bl	8006058 <TouchClockActivity>
		break;
 8005d3a:	e038      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8005d3c:	4b1e      	ldr	r3, [pc, #120]	; (8005db8 <MenuTFT+0x148>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d104      	bne.n	8005d4e <MenuTFT+0xde>
		{
			showPreparedActivitiesPanel();
 8005d44:	f7fe f844 	bl	8003dd0 <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8005d48:	4b1b      	ldr	r3, [pc, #108]	; (8005db8 <MenuTFT+0x148>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 8005d4e:	f000 fa47 	bl	80061e0 <TouchPredefinedActivityActivity>
		break;
 8005d52:	e02c      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8005d54:	4b18      	ldr	r3, [pc, #96]	; (8005db8 <MenuTFT+0x148>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d107      	bne.n	8005d6c <MenuTFT+0xfc>
		{
			showWSLedPanel();
 8005d5c:	f7fe f948 	bl	8003ff0 <showWSLedPanel>
			WSLedChangeFlag = 1;
 8005d60:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <MenuTFT+0x15c>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005d66:	4b14      	ldr	r3, [pc, #80]	; (8005db8 <MenuTFT+0x148>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8005d6c:	f000 fa82 	bl	8006274 <TouchWSLedActivity>
		break;
 8005d70:	e01d      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8005d72:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <MenuTFT+0x148>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d107      	bne.n	8005d8a <MenuTFT+0x11a>
		{
			showSchedule1Panel();
 8005d7a:	f7fe fed5 	bl	8004b28 <showSchedule1Panel>
			ScheduleChangeFlag = 1;
 8005d7e:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <MenuTFT+0x160>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005d84:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <MenuTFT+0x148>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8005d8a:	f000 fadf 	bl	800634c <Schedule1Activity>
		break;
 8005d8e:	e00e      	b.n	8005dae <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 8005d90:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <MenuTFT+0x148>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d107      	bne.n	8005da8 <MenuTFT+0x138>
		{
			showSchedule2Panel();
 8005d98:	f7fe ff5a 	bl	8004c50 <showSchedule2Panel>
			ScheduleChangeFlag = 1;
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <MenuTFT+0x160>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005da2:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <MenuTFT+0x148>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8005da8:	f000 fbd2 	bl	8006550 <Schedule2Activity>
		break;
 8005dac:	bf00      	nop
	}
}
 8005dae:	bf00      	nop
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000290 	.word	0x20000290
 8005db8:	20000255 	.word	0x20000255
 8005dbc:	20000294 	.word	0x20000294
 8005dc0:	2000029c 	.word	0x2000029c
 8005dc4:	00000000 	.word	0x00000000
 8005dc8:	20000256 	.word	0x20000256
 8005dcc:	20000257 	.word	0x20000257
 8005dd0:	20000258 	.word	0x20000258

08005dd4 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005dda:	f7fc fac3 	bl	8002364 <XPT2046_IsTouched>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d04c      	beq.n	8005e7e <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005de4:	f004 fa68 	bl	800a2b8 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	4b27      	ldr	r3, [pc, #156]	; (8005e88 <TouchParametersActivity+0xb4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df4:	d343      	bcc.n	8005e7e <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005df6:	1d3a      	adds	r2, r7, #4
 8005df8:	1dbb      	adds	r3, r7, #6
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fc fa73 	bl	80022e8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	2b09      	cmp	r3, #9
 8005e06:	d90f      	bls.n	8005e28 <TouchParametersActivity+0x54>
 8005e08:	88fb      	ldrh	r3, [r7, #6]
 8005e0a:	2b6e      	cmp	r3, #110	; 0x6e
 8005e0c:	d80c      	bhi.n	8005e28 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e0e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005e10:	2bd7      	cmp	r3, #215	; 0xd7
 8005e12:	d909      	bls.n	8005e28 <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005e14:	88bb      	ldrh	r3, [r7, #4]
 8005e16:	2bec      	cmp	r3, #236	; 0xec
 8005e18:	d806      	bhi.n	8005e28 <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8005e1a:	4b1c      	ldr	r3, [pc, #112]	; (8005e8c <TouchParametersActivity+0xb8>)
 8005e1c:	2205      	movs	r2, #5
 8005e1e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <TouchParametersActivity+0xbc>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e025      	b.n	8005e74 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005e28:	88fb      	ldrh	r3, [r7, #6]
 8005e2a:	2bdb      	cmp	r3, #219	; 0xdb
 8005e2c:	d910      	bls.n	8005e50 <TouchParametersActivity+0x7c>
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005e34:	d20c      	bcs.n	8005e50 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005e36:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005e38:	2bd7      	cmp	r3, #215	; 0xd7
 8005e3a:	d909      	bls.n	8005e50 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005e3c:	88bb      	ldrh	r3, [r7, #4]
 8005e3e:	2bec      	cmp	r3, #236	; 0xec
 8005e40:	d806      	bhi.n	8005e50 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <TouchParametersActivity+0xb8>)
 8005e44:	2202      	movs	r2, #2
 8005e46:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e48:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <TouchParametersActivity+0xbc>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	e011      	b.n	8005e74 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	2b77      	cmp	r3, #119	; 0x77
 8005e54:	d90e      	bls.n	8005e74 <TouchParametersActivity+0xa0>
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	2bd2      	cmp	r3, #210	; 0xd2
 8005e5a:	d80b      	bhi.n	8005e74 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005e5c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005e5e:	2bd7      	cmp	r3, #215	; 0xd7
 8005e60:	d908      	bls.n	8005e74 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005e62:	88bb      	ldrh	r3, [r7, #4]
 8005e64:	2bec      	cmp	r3, #236	; 0xec
 8005e66:	d805      	bhi.n	8005e74 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8005e68:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <TouchParametersActivity+0xb8>)
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005e6e:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <TouchParametersActivity+0xbc>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8005e74:	f004 fa20 	bl	800a2b8 <HAL_GetTick>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4a03      	ldr	r2, [pc, #12]	; (8005e88 <TouchParametersActivity+0xb4>)
 8005e7c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005e7e:	bf00      	nop
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	2000028c 	.word	0x2000028c
 8005e8c:	20000290 	.word	0x20000290
 8005e90:	20000255 	.word	0x20000255

08005e94 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005e9a:	f7fc fa63 	bl	8002364 <XPT2046_IsTouched>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d05d      	beq.n	8005f60 <TouchSwitchActivity+0xcc>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005ea4:	f004 fa08 	bl	800a2b8 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	; (8005f68 <TouchSwitchActivity+0xd4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eb4:	d354      	bcc.n	8005f60 <TouchSwitchActivity+0xcc>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005eb6:	1d3a      	adds	r2, r7, #4
 8005eb8:	1dbb      	adds	r3, r7, #6
 8005eba:	4611      	mov	r1, r2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fc fa13 	bl	80022e8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	2b09      	cmp	r3, #9
 8005ec6:	d90f      	bls.n	8005ee8 <TouchSwitchActivity+0x54>
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	2b6e      	cmp	r3, #110	; 0x6e
 8005ecc:	d80c      	bhi.n	8005ee8 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005ece:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005ed0:	2bd7      	cmp	r3, #215	; 0xd7
 8005ed2:	d909      	bls.n	8005ee8 <TouchSwitchActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005ed4:	88bb      	ldrh	r3, [r7, #4]
 8005ed6:	2bec      	cmp	r3, #236	; 0xec
 8005ed8:	d806      	bhi.n	8005ee8 <TouchSwitchActivity+0x54>
			{
				State = MENUTFT_PARAMETERS;
 8005eda:	4b24      	ldr	r3, [pc, #144]	; (8005f6c <TouchSwitchActivity+0xd8>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005ee0:	4b23      	ldr	r3, [pc, #140]	; (8005f70 <TouchSwitchActivity+0xdc>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	e036      	b.n	8005f56 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005ee8:	88fb      	ldrh	r3, [r7, #6]
 8005eea:	2bdb      	cmp	r3, #219	; 0xdb
 8005eec:	d910      	bls.n	8005f10 <TouchSwitchActivity+0x7c>
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005ef4:	d20c      	bcs.n	8005f10 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005ef6:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005ef8:	2bd7      	cmp	r3, #215	; 0xd7
 8005efa:	d909      	bls.n	8005f10 <TouchSwitchActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005efc:	88bb      	ldrh	r3, [r7, #4]
 8005efe:	2bec      	cmp	r3, #236	; 0xec
 8005f00:	d806      	bhi.n	8005f10 <TouchSwitchActivity+0x7c>
			{
				State = MENUTFT_LIGHTS;
 8005f02:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <TouchSwitchActivity+0xd8>)
 8005f04:	2205      	movs	r2, #5
 8005f06:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005f08:	4b19      	ldr	r3, [pc, #100]	; (8005f70 <TouchSwitchActivity+0xdc>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	e022      	b.n	8005f56 <TouchSwitchActivity+0xc2>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	2b77      	cmp	r3, #119	; 0x77
 8005f14:	d90f      	bls.n	8005f36 <TouchSwitchActivity+0xa2>
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	2bd2      	cmp	r3, #210	; 0xd2
 8005f1a:	d80c      	bhi.n	8005f36 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005f1c:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005f1e:	2bd7      	cmp	r3, #215	; 0xd7
 8005f20:	d909      	bls.n	8005f36 <TouchSwitchActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005f22:	88bb      	ldrh	r3, [r7, #4]
 8005f24:	2bec      	cmp	r3, #236	; 0xec
 8005f26:	d806      	bhi.n	8005f36 <TouchSwitchActivity+0xa2>
			{
				State = MENUTFT_ACTIVITIES;
 8005f28:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <TouchSwitchActivity+0xd8>)
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005f2e:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <TouchSwitchActivity+0xdc>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	e00f      	b.n	8005f56 <TouchSwitchActivity+0xc2>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005f3c:	d30b      	bcc.n	8005f56 <TouchSwitchActivity+0xc2>
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8005f44:	d207      	bcs.n	8005f56 <TouchSwitchActivity+0xc2>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005f46:	480b      	ldr	r0, [pc, #44]	; (8005f74 <TouchSwitchActivity+0xe0>)
 8005f48:	f7fb fc3e 	bl	80017c8 <EF_SetFont>
				changeSwitchStatusTouch(y);
 8005f4c:	88bb      	ldrh	r3, [r7, #4]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 fe55 	bl	8007c00 <changeSwitchStatusTouch>
			}
			TimerTouch = HAL_GetTick();
 8005f56:	f004 f9af 	bl	800a2b8 <HAL_GetTick>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4a02      	ldr	r2, [pc, #8]	; (8005f68 <TouchSwitchActivity+0xd4>)
 8005f5e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	2000028c 	.word	0x2000028c
 8005f6c:	20000290 	.word	0x20000290
 8005f70:	20000255 	.word	0x20000255
 8005f74:	08027470 	.word	0x08027470

08005f78 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005f7e:	f7fc f9f1 	bl	8002364 <XPT2046_IsTouched>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d05b      	beq.n	8006040 <TouchLightsActivity+0xc8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005f88:	f004 f996 	bl	800a2b8 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	4b2e      	ldr	r3, [pc, #184]	; (8006048 <TouchLightsActivity+0xd0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f98:	d352      	bcc.n	8006040 <TouchLightsActivity+0xc8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005f9a:	1d3a      	adds	r2, r7, #4
 8005f9c:	1dbb      	adds	r3, r7, #6
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fc f9a1 	bl	80022e8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	2b09      	cmp	r3, #9
 8005faa:	d90f      	bls.n	8005fcc <TouchLightsActivity+0x54>
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	2b6e      	cmp	r3, #110	; 0x6e
 8005fb0:	d80c      	bhi.n	8005fcc <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005fb2:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005fb4:	2bd7      	cmp	r3, #215	; 0xd7
 8005fb6:	d909      	bls.n	8005fcc <TouchLightsActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005fb8:	88bb      	ldrh	r3, [r7, #4]
 8005fba:	2bec      	cmp	r3, #236	; 0xec
 8005fbc:	d806      	bhi.n	8005fcc <TouchLightsActivity+0x54>
			{
				State = MENUTFT_SWITCH;
 8005fbe:	4b23      	ldr	r3, [pc, #140]	; (800604c <TouchLightsActivity+0xd4>)
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005fc4:	4b22      	ldr	r3, [pc, #136]	; (8006050 <TouchLightsActivity+0xd8>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	e034      	b.n	8006036 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005fcc:	88fb      	ldrh	r3, [r7, #6]
 8005fce:	2bdb      	cmp	r3, #219	; 0xdb
 8005fd0:	d910      	bls.n	8005ff4 <TouchLightsActivity+0x7c>
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005fd8:	d20c      	bcs.n	8005ff4 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005fda:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005fdc:	2bd7      	cmp	r3, #215	; 0xd7
 8005fde:	d909      	bls.n	8005ff4 <TouchLightsActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005fe0:	88bb      	ldrh	r3, [r7, #4]
 8005fe2:	2bec      	cmp	r3, #236	; 0xec
 8005fe4:	d806      	bhi.n	8005ff4 <TouchLightsActivity+0x7c>
			{
				State = MENUTFT_PARAMETERS;
 8005fe6:	4b19      	ldr	r3, [pc, #100]	; (800604c <TouchLightsActivity+0xd4>)
 8005fe8:	2201      	movs	r2, #1
 8005fea:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005fec:	4b18      	ldr	r3, [pc, #96]	; (8006050 <TouchLightsActivity+0xd8>)
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	e020      	b.n	8006036 <TouchLightsActivity+0xbe>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	2b77      	cmp	r3, #119	; 0x77
 8005ff8:	d90f      	bls.n	800601a <TouchLightsActivity+0xa2>
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	2bd2      	cmp	r3, #210	; 0xd2
 8005ffe:	d80c      	bhi.n	800601a <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006000:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006002:	2bd7      	cmp	r3, #215	; 0xd7
 8006004:	d909      	bls.n	800601a <TouchLightsActivity+0xa2>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006006:	88bb      	ldrh	r3, [r7, #4]
 8006008:	2bec      	cmp	r3, #236	; 0xec
 800600a:	d806      	bhi.n	800601a <TouchLightsActivity+0xa2>
			{
				State = MENUTFT_WS_LED;
 800600c:	4b0f      	ldr	r3, [pc, #60]	; (800604c <TouchLightsActivity+0xd4>)
 800600e:	2206      	movs	r2, #6
 8006010:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006012:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <TouchLightsActivity+0xd8>)
 8006014:	2201      	movs	r2, #1
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	e00d      	b.n	8006036 <TouchLightsActivity+0xbe>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	2bc7      	cmp	r3, #199	; 0xc7
 800601e:	d90a      	bls.n	8006036 <TouchLightsActivity+0xbe>
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	2be9      	cmp	r3, #233	; 0xe9
 8006024:	d807      	bhi.n	8006036 <TouchLightsActivity+0xbe>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8006026:	480b      	ldr	r0, [pc, #44]	; (8006054 <TouchLightsActivity+0xdc>)
 8006028:	f7fb fbce 	bl	80017c8 <EF_SetFont>
				changeLightsStatusTouch(y);
 800602c:	88bb      	ldrh	r3, [r7, #4]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	4618      	mov	r0, r3
 8006032:	f001 fe3d 	bl	8007cb0 <changeLightsStatusTouch>
			}

			TimerTouch = HAL_GetTick();
 8006036:	f004 f93f 	bl	800a2b8 <HAL_GetTick>
 800603a:	4603      	mov	r3, r0
 800603c:	4a02      	ldr	r2, [pc, #8]	; (8006048 <TouchLightsActivity+0xd0>)
 800603e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	2000028c 	.word	0x2000028c
 800604c:	20000290 	.word	0x20000290
 8006050:	20000255 	.word	0x20000255
 8006054:	08027470 	.word	0x08027470

08006058 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800605e:	f7fc f981 	bl	8002364 <XPT2046_IsTouched>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 80a3 	beq.w	80061b0 <TouchClockActivity+0x158>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800606a:	4853      	ldr	r0, [pc, #332]	; (80061b8 <TouchClockActivity+0x160>)
 800606c:	f7fb fbac 	bl	80017c8 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006070:	f004 f922 	bl	800a2b8 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	4b51      	ldr	r3, [pc, #324]	; (80061bc <TouchClockActivity+0x164>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006080:	f0c0 8096 	bcc.w	80061b0 <TouchClockActivity+0x158>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006084:	1d3a      	adds	r2, r7, #4
 8006086:	1dbb      	adds	r3, r7, #6
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f7fc f92c 	bl	80022e8 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 8006090:	4b4b      	ldr	r3, [pc, #300]	; (80061c0 <TouchClockActivity+0x168>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d114      	bne.n	80060c2 <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 8006098:	f7fc fc06 	bl	80028a8 <DS3231_GetHour>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	4b48      	ldr	r3, [pc, #288]	; (80061c4 <TouchClockActivity+0x16c>)
 80060a2:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 80060a4:	f7fc fc0c 	bl	80028c0 <DS3231_GetMinute>
 80060a8:	4603      	mov	r3, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	4b46      	ldr	r3, [pc, #280]	; (80061c8 <TouchClockActivity+0x170>)
 80060ae:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 80060b0:	f7fc fbee 	bl	8002890 <DS3231_GetDayOfWeek>
 80060b4:	4603      	mov	r3, r0
 80060b6:	461a      	mov	r2, r3
 80060b8:	4b44      	ldr	r3, [pc, #272]	; (80061cc <TouchClockActivity+0x174>)
 80060ba:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 80060bc:	4b40      	ldr	r3, [pc, #256]	; (80061c0 <TouchClockActivity+0x168>)
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80060c2:	88fb      	ldrh	r3, [r7, #6]
 80060c4:	2b09      	cmp	r3, #9
 80060c6:	d90f      	bls.n	80060e8 <TouchClockActivity+0x90>
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	2b6e      	cmp	r3, #110	; 0x6e
 80060cc:	d80c      	bhi.n	80060e8 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80060ce:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80060d0:	2bd7      	cmp	r3, #215	; 0xd7
 80060d2:	d909      	bls.n	80060e8 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80060d4:	88bb      	ldrh	r3, [r7, #4]
 80060d6:	2bec      	cmp	r3, #236	; 0xec
 80060d8:	d806      	bhi.n	80060e8 <TouchClockActivity+0x90>
				{
					State = MENUTFT_PARAMETERS;
 80060da:	4b3d      	ldr	r3, [pc, #244]	; (80061d0 <TouchClockActivity+0x178>)
 80060dc:	2201      	movs	r2, #1
 80060de:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80060e0:	4b3c      	ldr	r3, [pc, #240]	; (80061d4 <TouchClockActivity+0x17c>)
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e05e      	b.n	80061a6 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	2bdb      	cmp	r3, #219	; 0xdb
 80060ec:	d92c      	bls.n	8006148 <TouchClockActivity+0xf0>
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80060f4:	d228      	bcs.n	8006148 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80060f6:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80060f8:	2bd7      	cmp	r3, #215	; 0xd7
 80060fa:	d925      	bls.n	8006148 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80060fc:	88bb      	ldrh	r3, [r7, #4]
 80060fe:	2bec      	cmp	r3, #236	; 0xec
 8006100:	d822      	bhi.n	8006148 <TouchClockActivity+0xf0>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 8006102:	4b32      	ldr	r3, [pc, #200]	; (80061cc <TouchClockActivity+0x174>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f7fc fbe6 	bl	80028d8 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 800610c:	4b2d      	ldr	r3, [pc, #180]	; (80061c4 <TouchClockActivity+0x16c>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	f7fc fbf3 	bl	80028fc <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8006116:	4b2c      	ldr	r3, [pc, #176]	; (80061c8 <TouchClockActivity+0x170>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f7fc fc03 	bl	8002926 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 8006120:	2032      	movs	r0, #50	; 0x32
 8006122:	f7fc fc12 	bl	800294a <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8006126:	492c      	ldr	r1, [pc, #176]	; (80061d8 <TouchClockActivity+0x180>)
 8006128:	482c      	ldr	r0, [pc, #176]	; (80061dc <TouchClockActivity+0x184>)
 800612a:	f00b fda1 	bl	8011c70 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 800612e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006132:	9301      	str	r3, [sp, #4]
 8006134:	2301      	movs	r3, #1
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800613c:	220a      	movs	r2, #10
 800613e:	212f      	movs	r1, #47	; 0x2f
 8006140:	4826      	ldr	r0, [pc, #152]	; (80061dc <TouchClockActivity+0x184>)
 8006142:	f7fb fd5b 	bl	8001bfc <EF_PutString>
 8006146:	e02e      	b.n	80061a6 <TouchClockActivity+0x14e>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006148:	88fb      	ldrh	r3, [r7, #6]
 800614a:	2b6d      	cmp	r3, #109	; 0x6d
 800614c:	d90f      	bls.n	800616e <TouchClockActivity+0x116>
 800614e:	88fb      	ldrh	r3, [r7, #6]
 8006150:	2bdc      	cmp	r3, #220	; 0xdc
 8006152:	d80c      	bhi.n	800616e <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006154:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006156:	2bbd      	cmp	r3, #189	; 0xbd
 8006158:	d909      	bls.n	800616e <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 800615a:	88bb      	ldrh	r3, [r7, #4]
 800615c:	2bd4      	cmp	r3, #212	; 0xd4
 800615e:	d806      	bhi.n	800616e <TouchClockActivity+0x116>
				{
					State = MENUTFT_SCHEDULE_1;
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <TouchClockActivity+0x178>)
 8006162:	2207      	movs	r2, #7
 8006164:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006166:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <TouchClockActivity+0x17c>)
 8006168:	2201      	movs	r2, #1
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	e01b      	b.n	80061a6 <TouchClockActivity+0x14e>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	2bef      	cmp	r3, #239	; 0xef
 8006172:	d90a      	bls.n	800618a <TouchClockActivity+0x132>
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800617a:	d806      	bhi.n	800618a <TouchClockActivity+0x132>
				{
					clockIncreaseOneHourAndMinute(x, y);
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	88ba      	ldrh	r2, [r7, #4]
 8006180:	4611      	mov	r1, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f001 fc36 	bl	80079f4 <clockIncreaseOneHourAndMinute>
 8006188:	e00d      	b.n	80061a6 <TouchClockActivity+0x14e>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006190:	d309      	bcc.n	80061a6 <TouchClockActivity+0x14e>
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006198:	d805      	bhi.n	80061a6 <TouchClockActivity+0x14e>
				{
					clockIncreaseSixHoursTenMinutes(x,y);
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	88ba      	ldrh	r2, [r7, #4]
 800619e:	4611      	mov	r1, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 fcb5 	bl	8007b10 <clockIncreaseSixHoursTenMinutes>
				}
				TimerTouch = HAL_GetTick();
 80061a6:	f004 f887 	bl	800a2b8 <HAL_GetTick>
 80061aa:	4603      	mov	r3, r0
 80061ac:	4a03      	ldr	r2, [pc, #12]	; (80061bc <TouchClockActivity+0x164>)
 80061ae:	6013      	str	r3, [r2, #0]
			}
		}
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	080293e8 	.word	0x080293e8
 80061bc:	2000028c 	.word	0x2000028c
 80061c0:	20000256 	.word	0x20000256
 80061c4:	20000031 	.word	0x20000031
 80061c8:	20000032 	.word	0x20000032
 80061cc:	20000030 	.word	0x20000030
 80061d0:	20000290 	.word	0x20000290
 80061d4:	20000255 	.word	0x20000255
 80061d8:	08015e00 	.word	0x08015e00
 80061dc:	200002c0 	.word	0x200002c0

080061e0 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
	if(XPT2046_IsTouched())
 80061e6:	f7fc f8bd 	bl	8002364 <XPT2046_IsTouched>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d034      	beq.n	800625a <TouchPredefinedActivityActivity+0x7a>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80061f0:	f004 f862 	bl	800a2b8 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <TouchPredefinedActivityActivity+0x84>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006200:	d32b      	bcc.n	800625a <TouchPredefinedActivityActivity+0x7a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006202:	1d3a      	adds	r2, r7, #4
 8006204:	1dbb      	adds	r3, r7, #6
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f7fc f86d 	bl	80022e8 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 800620e:	4816      	ldr	r0, [pc, #88]	; (8006268 <TouchPredefinedActivityActivity+0x88>)
 8006210:	f7fb fada 	bl	80017c8 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	2b09      	cmp	r3, #9
 8006218:	d90f      	bls.n	800623a <TouchPredefinedActivityActivity+0x5a>
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	2b6e      	cmp	r3, #110	; 0x6e
 800621e:	d80c      	bhi.n	800623a <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006220:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006222:	2bd7      	cmp	r3, #215	; 0xd7
 8006224:	d909      	bls.n	800623a <TouchPredefinedActivityActivity+0x5a>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006226:	88bb      	ldrh	r3, [r7, #4]
 8006228:	2bec      	cmp	r3, #236	; 0xec
 800622a:	d806      	bhi.n	800623a <TouchPredefinedActivityActivity+0x5a>
			{
				State = MENUTFT_SWITCH;
 800622c:	4b0f      	ldr	r3, [pc, #60]	; (800626c <TouchPredefinedActivityActivity+0x8c>)
 800622e:	2202      	movs	r2, #2
 8006230:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <TouchPredefinedActivityActivity+0x90>)
 8006234:	2201      	movs	r2, #1
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	e00a      	b.n	8006250 <TouchPredefinedActivityActivity+0x70>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	2b63      	cmp	r3, #99	; 0x63
 800623e:	d907      	bls.n	8006250 <TouchPredefinedActivityActivity+0x70>
 8006240:	88fb      	ldrh	r3, [r7, #6]
 8006242:	2bdc      	cmp	r3, #220	; 0xdc
 8006244:	d804      	bhi.n	8006250 <TouchPredefinedActivityActivity+0x70>
			{
				predefinedActivityTouchAction(y);
 8006246:	88bb      	ldrh	r3, [r7, #4]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	4618      	mov	r0, r3
 800624c:	f001 fd88 	bl	8007d60 <predefinedActivityTouchAction>
			}
			TimerTouch = HAL_GetTick();
 8006250:	f004 f832 	bl	800a2b8 <HAL_GetTick>
 8006254:	4603      	mov	r3, r0
 8006256:	4a03      	ldr	r2, [pc, #12]	; (8006264 <TouchPredefinedActivityActivity+0x84>)
 8006258:	6013      	str	r3, [r2, #0]
		}
	}
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	2000028c 	.word	0x2000028c
 8006268:	08027470 	.word	0x08027470
 800626c:	20000290 	.word	0x20000290
 8006270:	20000255 	.word	0x20000255

08006274 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800627a:	f7fc f873 	bl	8002364 <XPT2046_IsTouched>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d050      	beq.n	8006326 <TouchWSLedActivity+0xb2>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006284:	482a      	ldr	r0, [pc, #168]	; (8006330 <TouchWSLedActivity+0xbc>)
 8006286:	f7fb fa9f 	bl	80017c8 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800628a:	f004 f815 	bl	800a2b8 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	4b28      	ldr	r3, [pc, #160]	; (8006334 <TouchWSLedActivity+0xc0>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800629a:	d344      	bcc.n	8006326 <TouchWSLedActivity+0xb2>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800629c:	1d3a      	adds	r2, r7, #4
 800629e:	1dbb      	adds	r3, r7, #6
 80062a0:	4611      	mov	r1, r2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fc f820 	bl	80022e8 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 80062a8:	4b23      	ldr	r3, [pc, #140]	; (8006338 <TouchWSLedActivity+0xc4>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10b      	bne.n	80062c8 <TouchWSLedActivity+0x54>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 80062b0:	bf00      	nop
 80062b2:	2201      	movs	r2, #1
 80062b4:	4921      	ldr	r1, [pc, #132]	; (800633c <TouchWSLedActivity+0xc8>)
 80062b6:	2001      	movs	r0, #1
 80062b8:	f7fc fba4 	bl	8002a04 <eeprom_read>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f7      	bne.n	80062b2 <TouchWSLedActivity+0x3e>
					WSLedChangeFlag = 0;
 80062c2:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <TouchWSLedActivity+0xcc>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	2b09      	cmp	r3, #9
 80062cc:	d90f      	bls.n	80062ee <TouchWSLedActivity+0x7a>
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	2b6e      	cmp	r3, #110	; 0x6e
 80062d2:	d80c      	bhi.n	80062ee <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80062d4:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80062d6:	2bd7      	cmp	r3, #215	; 0xd7
 80062d8:	d909      	bls.n	80062ee <TouchWSLedActivity+0x7a>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80062da:	88bb      	ldrh	r3, [r7, #4]
 80062dc:	2bec      	cmp	r3, #236	; 0xec
 80062de:	d806      	bhi.n	80062ee <TouchWSLedActivity+0x7a>
				{
					State = MENUTFT_LIGHTS;
 80062e0:	4b18      	ldr	r3, [pc, #96]	; (8006344 <TouchWSLedActivity+0xd0>)
 80062e2:	2205      	movs	r2, #5
 80062e4:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80062e6:	4b18      	ldr	r3, [pc, #96]	; (8006348 <TouchWSLedActivity+0xd4>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	e016      	b.n	800631c <TouchWSLedActivity+0xa8>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 80062ee:	88bb      	ldrh	r3, [r7, #4]
 80062f0:	2b40      	cmp	r3, #64	; 0x40
 80062f2:	d90b      	bls.n	800630c <TouchWSLedActivity+0x98>
 80062f4:	88bb      	ldrh	r3, [r7, #4]
 80062f6:	2b56      	cmp	r3, #86	; 0x56
 80062f8:	d808      	bhi.n	800630c <TouchWSLedActivity+0x98>
				{
					increaseNumberOfWSLedOnTFT(x,y);
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	88ba      	ldrh	r2, [r7, #4]
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	4611      	mov	r1, r2
 8006304:	4618      	mov	r0, r3
 8006306:	f001 fe15 	bl	8007f34 <increaseNumberOfWSLedOnTFT>
 800630a:	e007      	b.n	800631c <TouchWSLedActivity+0xa8>
				//
				// Check if it is second line button to change LEDs to WHITE // BLUE // ETC
				//
				else
				{
					changeTypeOfWSLights(x, y);
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	88ba      	ldrh	r2, [r7, #4]
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	4611      	mov	r1, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f001 fe96 	bl	8008048 <changeTypeOfWSLights>
				}

				TimerTouch = HAL_GetTick();
 800631c:	f003 ffcc 	bl	800a2b8 <HAL_GetTick>
 8006320:	4603      	mov	r3, r0
 8006322:	4a04      	ldr	r2, [pc, #16]	; (8006334 <TouchWSLedActivity+0xc0>)
 8006324:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	080293e8 	.word	0x080293e8
 8006334:	2000028c 	.word	0x2000028c
 8006338:	20000256 	.word	0x20000256
 800633c:	20000033 	.word	0x20000033
 8006340:	20000257 	.word	0x20000257
 8006344:	20000290 	.word	0x20000290
 8006348:	20000255 	.word	0x20000255

0800634c <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006352:	4b70      	ldr	r3, [pc, #448]	; (8006514 <Schedule1Activity+0x1c8>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d105      	bne.n	8006366 <Schedule1Activity+0x1a>
	{
		updateAllSchedulesInfo(1);
 800635a:	2001      	movs	r0, #1
 800635c:	f001 faf6 	bl	800794c <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006360:	4b6c      	ldr	r3, [pc, #432]	; (8006514 <Schedule1Activity+0x1c8>)
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006366:	f7fb fffd 	bl	8002364 <XPT2046_IsTouched>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80cc 	beq.w	800650a <Schedule1Activity+0x1be>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006372:	f003 ffa1 	bl	800a2b8 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	4b67      	ldr	r3, [pc, #412]	; (8006518 <Schedule1Activity+0x1cc>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006382:	f0c0 80c2 	bcc.w	800650a <Schedule1Activity+0x1be>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006386:	1d3a      	adds	r2, r7, #4
 8006388:	1dbb      	adds	r3, r7, #6
 800638a:	4611      	mov	r1, r2
 800638c:	4618      	mov	r0, r3
 800638e:	f7fb ffab 	bl	80022e8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	2b09      	cmp	r3, #9
 8006396:	d90f      	bls.n	80063b8 <Schedule1Activity+0x6c>
 8006398:	88fb      	ldrh	r3, [r7, #6]
 800639a:	2b6e      	cmp	r3, #110	; 0x6e
 800639c:	d80c      	bhi.n	80063b8 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800639e:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80063a0:	2bd7      	cmp	r3, #215	; 0xd7
 80063a2:	d909      	bls.n	80063b8 <Schedule1Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80063a4:	88bb      	ldrh	r3, [r7, #4]
 80063a6:	2bec      	cmp	r3, #236	; 0xec
 80063a8:	d806      	bhi.n	80063b8 <Schedule1Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 80063aa:	4b5c      	ldr	r3, [pc, #368]	; (800651c <Schedule1Activity+0x1d0>)
 80063ac:	2203      	movs	r2, #3
 80063ae:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80063b0:	4b5b      	ldr	r3, [pc, #364]	; (8006520 <Schedule1Activity+0x1d4>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e0a3      	b.n	8006500 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	2bdb      	cmp	r3, #219	; 0xdb
 80063bc:	d910      	bls.n	80063e0 <Schedule1Activity+0x94>
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80063c4:	d20c      	bcs.n	80063e0 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80063c6:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 80063c8:	2bd7      	cmp	r3, #215	; 0xd7
 80063ca:	d909      	bls.n	80063e0 <Schedule1Activity+0x94>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 80063cc:	88bb      	ldrh	r3, [r7, #4]
 80063ce:	2bec      	cmp	r3, #236	; 0xec
 80063d0:	d806      	bhi.n	80063e0 <Schedule1Activity+0x94>
			{
				State = MENUTFT_SCHEDULE_2;
 80063d2:	4b52      	ldr	r3, [pc, #328]	; (800651c <Schedule1Activity+0x1d0>)
 80063d4:	2208      	movs	r2, #8
 80063d6:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80063d8:	4b51      	ldr	r3, [pc, #324]	; (8006520 <Schedule1Activity+0x1d4>)
 80063da:	2201      	movs	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	e08f      	b.n	8006500 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80063e0:	88bb      	ldrh	r3, [r7, #4]
 80063e2:	2b31      	cmp	r3, #49	; 0x31
 80063e4:	d909      	bls.n	80063fa <Schedule1Activity+0xae>
 80063e6:	88bb      	ldrh	r3, [r7, #4]
 80063e8:	2b46      	cmp	r3, #70	; 0x46
 80063ea:	d806      	bhi.n	80063fa <Schedule1Activity+0xae>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	88ba      	ldrh	r2, [r7, #4]
 80063f0:	4611      	mov	r1, r2
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 f99a 	bl	800672c <MenuTFTSchedule1ActivityDayOfWeekRow>
 80063f8:	e082      	b.n	8006500 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80063fa:	88bb      	ldrh	r3, [r7, #4]
 80063fc:	2b64      	cmp	r3, #100	; 0x64
 80063fe:	d909      	bls.n	8006414 <Schedule1Activity+0xc8>
 8006400:	88bb      	ldrh	r3, [r7, #4]
 8006402:	2b79      	cmp	r3, #121	; 0x79
 8006404:	d806      	bhi.n	8006414 <Schedule1Activity+0xc8>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 8006406:	88fb      	ldrh	r3, [r7, #6]
 8006408:	88ba      	ldrh	r2, [r7, #4]
 800640a:	4611      	mov	r1, r2
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fc67 	bl	8006ce0 <MenuTFTSchedule1ActivityHourMinuteONAdd>
 8006412:	e075      	b.n	8006500 <Schedule1Activity+0x1b4>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006414:	88bb      	ldrh	r3, [r7, #4]
 8006416:	2b87      	cmp	r3, #135	; 0x87
 8006418:	d909      	bls.n	800642e <Schedule1Activity+0xe2>
 800641a:	88bb      	ldrh	r3, [r7, #4]
 800641c:	2b9c      	cmp	r3, #156	; 0x9c
 800641e:	d806      	bhi.n	800642e <Schedule1Activity+0xe2>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	88ba      	ldrh	r2, [r7, #4]
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fd24 	bl	8006e74 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 800642c:	e068      	b.n	8006500 <Schedule1Activity+0x1b4>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 800642e:	88bb      	ldrh	r3, [r7, #4]
 8006430:	2ba9      	cmp	r3, #169	; 0xa9
 8006432:	d909      	bls.n	8006448 <Schedule1Activity+0xfc>
 8006434:	88bb      	ldrh	r3, [r7, #4]
 8006436:	2bbe      	cmp	r3, #190	; 0xbe
 8006438:	d806      	bhi.n	8006448 <Schedule1Activity+0xfc>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	88ba      	ldrh	r2, [r7, #4]
 800643e:	4611      	mov	r1, r2
 8006440:	4618      	mov	r0, r3
 8006442:	f001 f857 	bl	80074f4 <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 8006446:	e05b      	b.n	8006500 <Schedule1Activity+0x1b4>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006448:	88fb      	ldrh	r3, [r7, #6]
 800644a:	2b77      	cmp	r3, #119	; 0x77
 800644c:	d958      	bls.n	8006500 <Schedule1Activity+0x1b4>
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	2bd2      	cmp	r3, #210	; 0xd2
 8006452:	d855      	bhi.n	8006500 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006454:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006456:	2bd7      	cmp	r3, #215	; 0xd7
 8006458:	d952      	bls.n	8006500 <Schedule1Activity+0x1b4>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800645a:	88bb      	ldrh	r3, [r7, #4]
 800645c:	2bec      	cmp	r3, #236	; 0xec
 800645e:	d84f      	bhi.n	8006500 <Schedule1Activity+0x1b4>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 8006460:	4b30      	ldr	r3, [pc, #192]	; (8006524 <Schedule1Activity+0x1d8>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	4619      	mov	r1, r3
 8006466:	2001      	movs	r0, #1
 8006468:	f7fc fe43 	bl	80030f2 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 800646c:	4b2e      	ldr	r3, [pc, #184]	; (8006528 <Schedule1Activity+0x1dc>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	4619      	mov	r1, r3
 8006472:	2001      	movs	r0, #1
 8006474:	f7fc fe60 	bl	8003138 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006478:	4b2c      	ldr	r3, [pc, #176]	; (800652c <Schedule1Activity+0x1e0>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	2001      	movs	r0, #1
 8006480:	f7fc fe7d 	bl	800317e <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 8006484:	4b2a      	ldr	r3, [pc, #168]	; (8006530 <Schedule1Activity+0x1e4>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	4619      	mov	r1, r3
 800648a:	2001      	movs	r0, #1
 800648c:	f7fc fe9a 	bl	80031c4 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006490:	4928      	ldr	r1, [pc, #160]	; (8006534 <Schedule1Activity+0x1e8>)
 8006492:	2001      	movs	r0, #1
 8006494:	f7fc fc8d 	bl	8002db2 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006498:	4927      	ldr	r1, [pc, #156]	; (8006538 <Schedule1Activity+0x1ec>)
 800649a:	2001      	movs	r0, #1
 800649c:	f7fc fd34 	bl	8002f08 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 80064a0:	4826      	ldr	r0, [pc, #152]	; (800653c <Schedule1Activity+0x1f0>)
 80064a2:	f7fb f991 	bl	80017c8 <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 80064a6:	4926      	ldr	r1, [pc, #152]	; (8006540 <Schedule1Activity+0x1f4>)
 80064a8:	4826      	ldr	r0, [pc, #152]	; (8006544 <Schedule1Activity+0x1f8>)
 80064aa:	f00b fbe1 	bl	8011c70 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 80064ae:	f24c 6318 	movw	r3, #50712	; 0xc618
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	2301      	movs	r3, #1
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80064bc:	220a      	movs	r2, #10
 80064be:	2128      	movs	r1, #40	; 0x28
 80064c0:	4820      	ldr	r0, [pc, #128]	; (8006544 <Schedule1Activity+0x1f8>)
 80064c2:	f7fb fb9b 	bl	8001bfc <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 80064c6:	4820      	ldr	r0, [pc, #128]	; (8006548 <Schedule1Activity+0x1fc>)
 80064c8:	f7fb f97e 	bl	80017c8 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80064cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	2305      	movs	r3, #5
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	2314      	movs	r3, #20
 80064d8:	225a      	movs	r2, #90	; 0x5a
 80064da:	21d8      	movs	r1, #216	; 0xd8
 80064dc:	2078      	movs	r0, #120	; 0x78
 80064de:	f7fb f922 	bl	8001726 <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 80064e2:	491a      	ldr	r1, [pc, #104]	; (800654c <Schedule1Activity+0x200>)
 80064e4:	4817      	ldr	r0, [pc, #92]	; (8006544 <Schedule1Activity+0x1f8>)
 80064e6:	f00b fbc3 	bl	8011c70 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80064ea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	2300      	movs	r3, #0
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	2300      	movs	r3, #0
 80064f6:	22da      	movs	r2, #218	; 0xda
 80064f8:	217e      	movs	r1, #126	; 0x7e
 80064fa:	4812      	ldr	r0, [pc, #72]	; (8006544 <Schedule1Activity+0x1f8>)
 80064fc:	f7fb fb7e 	bl	8001bfc <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 8006500:	f003 feda 	bl	800a2b8 <HAL_GetTick>
 8006504:	4603      	mov	r3, r0
 8006506:	4a04      	ldr	r2, [pc, #16]	; (8006518 <Schedule1Activity+0x1cc>)
 8006508:	6013      	str	r3, [r2, #0]
		}
	}
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000258 	.word	0x20000258
 8006518:	2000028c 	.word	0x2000028c
 800651c:	20000290 	.word	0x20000290
 8006520:	20000255 	.word	0x20000255
 8006524:	20000281 	.word	0x20000281
 8006528:	20000283 	.word	0x20000283
 800652c:	20000282 	.word	0x20000282
 8006530:	20000284 	.word	0x20000284
 8006534:	2000025c 	.word	0x2000025c
 8006538:	20000264 	.word	0x20000264
 800653c:	080293e8 	.word	0x080293e8
 8006540:	08015e10 	.word	0x08015e10
 8006544:	200002c0 	.word	0x200002c0
 8006548:	08027470 	.word	0x08027470
 800654c:	08015e24 	.word	0x08015e24

08006550 <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006556:	4b66      	ldr	r3, [pc, #408]	; (80066f0 <Schedule2Activity+0x1a0>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d105      	bne.n	800656a <Schedule2Activity+0x1a>
	{
		updateAllSchedulesInfo(2);
 800655e:	2002      	movs	r0, #2
 8006560:	f001 f9f4 	bl	800794c <updateAllSchedulesInfo>
		ScheduleChangeFlag = 0;
 8006564:	4b62      	ldr	r3, [pc, #392]	; (80066f0 <Schedule2Activity+0x1a0>)
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 800656a:	f7fb fefb 	bl	8002364 <XPT2046_IsTouched>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80b8 	beq.w	80066e6 <Schedule2Activity+0x196>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006576:	f003 fe9f 	bl	800a2b8 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	4b5d      	ldr	r3, [pc, #372]	; (80066f4 <Schedule2Activity+0x1a4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006586:	f0c0 80ae 	bcc.w	80066e6 <Schedule2Activity+0x196>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 800658a:	1d3a      	adds	r2, r7, #4
 800658c:	1dbb      	adds	r3, r7, #6
 800658e:	4611      	mov	r1, r2
 8006590:	4618      	mov	r0, r3
 8006592:	f7fb fea9 	bl	80022e8 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	2b09      	cmp	r3, #9
 800659a:	d90f      	bls.n	80065bc <Schedule2Activity+0x6c>
 800659c:	88fb      	ldrh	r3, [r7, #6]
 800659e:	2b6e      	cmp	r3, #110	; 0x6e
 80065a0:	d80c      	bhi.n	80065bc <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80065a2:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80065a4:	2bd7      	cmp	r3, #215	; 0xd7
 80065a6:	d909      	bls.n	80065bc <Schedule2Activity+0x6c>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80065a8:	88bb      	ldrh	r3, [r7, #4]
 80065aa:	2bec      	cmp	r3, #236	; 0xec
 80065ac:	d806      	bhi.n	80065bc <Schedule2Activity+0x6c>
			{
				State = MENUTFT_CLOCK;
 80065ae:	4b52      	ldr	r3, [pc, #328]	; (80066f8 <Schedule2Activity+0x1a8>)
 80065b0:	2203      	movs	r2, #3
 80065b2:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80065b4:	4b51      	ldr	r3, [pc, #324]	; (80066fc <Schedule2Activity+0x1ac>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e08f      	b.n	80066dc <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 80065bc:	88bb      	ldrh	r3, [r7, #4]
 80065be:	2b31      	cmp	r3, #49	; 0x31
 80065c0:	d909      	bls.n	80065d6 <Schedule2Activity+0x86>
 80065c2:	88bb      	ldrh	r3, [r7, #4]
 80065c4:	2b46      	cmp	r3, #70	; 0x46
 80065c6:	d806      	bhi.n	80065d6 <Schedule2Activity+0x86>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	88ba      	ldrh	r2, [r7, #4]
 80065cc:	4611      	mov	r1, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fd1a 	bl	8007008 <MenuTFTSchedule2ActivityDayOfWeekRow>
 80065d4:	e082      	b.n	80066dc <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80065d6:	88bb      	ldrh	r3, [r7, #4]
 80065d8:	2b64      	cmp	r3, #100	; 0x64
 80065da:	d909      	bls.n	80065f0 <Schedule2Activity+0xa0>
 80065dc:	88bb      	ldrh	r3, [r7, #4]
 80065de:	2b79      	cmp	r3, #121	; 0x79
 80065e0:	d806      	bhi.n	80065f0 <Schedule2Activity+0xa0>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 80065e2:	88fb      	ldrh	r3, [r7, #6]
 80065e4:	88ba      	ldrh	r2, [r7, #4]
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fdef 	bl	80071cc <MenuTFTSchedule2ActivityHourMinuteONAdd>
 80065ee:	e075      	b.n	80066dc <Schedule2Activity+0x18c>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 80065f0:	88bb      	ldrh	r3, [r7, #4]
 80065f2:	2b87      	cmp	r3, #135	; 0x87
 80065f4:	d909      	bls.n	800660a <Schedule2Activity+0xba>
 80065f6:	88bb      	ldrh	r3, [r7, #4]
 80065f8:	2b9c      	cmp	r3, #156	; 0x9c
 80065fa:	d806      	bhi.n	800660a <Schedule2Activity+0xba>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 80065fc:	88fb      	ldrh	r3, [r7, #6]
 80065fe:	88ba      	ldrh	r2, [r7, #4]
 8006600:	4611      	mov	r1, r2
 8006602:	4618      	mov	r0, r3
 8006604:	f000 feac 	bl	8007360 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 8006608:	e068      	b.n	80066dc <Schedule2Activity+0x18c>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 800660a:	88bb      	ldrh	r3, [r7, #4]
 800660c:	2ba9      	cmp	r3, #169	; 0xa9
 800660e:	d909      	bls.n	8006624 <Schedule2Activity+0xd4>
 8006610:	88bb      	ldrh	r3, [r7, #4]
 8006612:	2bbe      	cmp	r3, #190	; 0xbe
 8006614:	d806      	bhi.n	8006624 <Schedule2Activity+0xd4>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 8006616:	88fb      	ldrh	r3, [r7, #6]
 8006618:	88ba      	ldrh	r2, [r7, #4]
 800661a:	4611      	mov	r1, r2
 800661c:	4618      	mov	r0, r3
 800661e:	f001 f87f 	bl	8007720 <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 8006622:	e05b      	b.n	80066dc <Schedule2Activity+0x18c>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006624:	88fb      	ldrh	r3, [r7, #6]
 8006626:	2b77      	cmp	r3, #119	; 0x77
 8006628:	d958      	bls.n	80066dc <Schedule2Activity+0x18c>
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	2bd2      	cmp	r3, #210	; 0xd2
 800662e:	d855      	bhi.n	80066dc <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006630:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006632:	2bd7      	cmp	r3, #215	; 0xd7
 8006634:	d952      	bls.n	80066dc <Schedule2Activity+0x18c>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006636:	88bb      	ldrh	r3, [r7, #4]
 8006638:	2bec      	cmp	r3, #236	; 0xec
 800663a:	d84f      	bhi.n	80066dc <Schedule2Activity+0x18c>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 800663c:	4b30      	ldr	r3, [pc, #192]	; (8006700 <Schedule2Activity+0x1b0>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	4619      	mov	r1, r3
 8006642:	2002      	movs	r0, #2
 8006644:	f7fc fd55 	bl	80030f2 <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 8006648:	4b2e      	ldr	r3, [pc, #184]	; (8006704 <Schedule2Activity+0x1b4>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	4619      	mov	r1, r3
 800664e:	2002      	movs	r0, #2
 8006650:	f7fc fd72 	bl	8003138 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 8006654:	4b2c      	ldr	r3, [pc, #176]	; (8006708 <Schedule2Activity+0x1b8>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	4619      	mov	r1, r3
 800665a:	2002      	movs	r0, #2
 800665c:	f7fc fd8f 	bl	800317e <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 8006660:	4b2a      	ldr	r3, [pc, #168]	; (800670c <Schedule2Activity+0x1bc>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	4619      	mov	r1, r3
 8006666:	2002      	movs	r0, #2
 8006668:	f7fc fdac 	bl	80031c4 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 800666c:	4928      	ldr	r1, [pc, #160]	; (8006710 <Schedule2Activity+0x1c0>)
 800666e:	2002      	movs	r0, #2
 8006670:	f7fc fb9f 	bl	8002db2 <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 8006674:	4927      	ldr	r1, [pc, #156]	; (8006714 <Schedule2Activity+0x1c4>)
 8006676:	2002      	movs	r0, #2
 8006678:	f7fc fc46 	bl	8002f08 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 800667c:	4826      	ldr	r0, [pc, #152]	; (8006718 <Schedule2Activity+0x1c8>)
 800667e:	f7fb f8a3 	bl	80017c8 <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 8006682:	4926      	ldr	r1, [pc, #152]	; (800671c <Schedule2Activity+0x1cc>)
 8006684:	4826      	ldr	r0, [pc, #152]	; (8006720 <Schedule2Activity+0x1d0>)
 8006686:	f00b faf3 	bl	8011c70 <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 800668a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	2301      	movs	r3, #1
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006698:	220a      	movs	r2, #10
 800669a:	2128      	movs	r1, #40	; 0x28
 800669c:	4820      	ldr	r0, [pc, #128]	; (8006720 <Schedule2Activity+0x1d0>)
 800669e:	f7fb faad 	bl	8001bfc <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 80066a2:	4820      	ldr	r0, [pc, #128]	; (8006724 <Schedule2Activity+0x1d4>)
 80066a4:	f7fb f890 	bl	80017c8 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80066a8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	2305      	movs	r3, #5
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	2314      	movs	r3, #20
 80066b4:	225a      	movs	r2, #90	; 0x5a
 80066b6:	21d8      	movs	r1, #216	; 0xd8
 80066b8:	2078      	movs	r0, #120	; 0x78
 80066ba:	f7fb f834 	bl	8001726 <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 80066be:	491a      	ldr	r1, [pc, #104]	; (8006728 <Schedule2Activity+0x1d8>)
 80066c0:	4817      	ldr	r0, [pc, #92]	; (8006720 <Schedule2Activity+0x1d0>)
 80066c2:	f00b fad5 	bl	8011c70 <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80066c6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	2300      	movs	r3, #0
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	2300      	movs	r3, #0
 80066d2:	22da      	movs	r2, #218	; 0xda
 80066d4:	217e      	movs	r1, #126	; 0x7e
 80066d6:	4812      	ldr	r0, [pc, #72]	; (8006720 <Schedule2Activity+0x1d0>)
 80066d8:	f7fb fa90 	bl	8001bfc <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 80066dc:	f003 fdec 	bl	800a2b8 <HAL_GetTick>
 80066e0:	4603      	mov	r3, r0
 80066e2:	4a04      	ldr	r2, [pc, #16]	; (80066f4 <Schedule2Activity+0x1a4>)
 80066e4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000258 	.word	0x20000258
 80066f4:	2000028c 	.word	0x2000028c
 80066f8:	20000290 	.word	0x20000290
 80066fc:	20000255 	.word	0x20000255
 8006700:	20000285 	.word	0x20000285
 8006704:	20000287 	.word	0x20000287
 8006708:	20000286 	.word	0x20000286
 800670c:	20000288 	.word	0x20000288
 8006710:	20000270 	.word	0x20000270
 8006714:	20000278 	.word	0x20000278
 8006718:	080293e8 	.word	0x080293e8
 800671c:	08015e2c 	.word	0x08015e2c
 8006720:	200002c0 	.word	0x200002c0
 8006724:	08027470 	.word	0x08027470
 8006728:	08015e24 	.word	0x08015e24

0800672c <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	4603      	mov	r3, r0
 8006734:	460a      	mov	r2, r1
 8006736:	80fb      	strh	r3, [r7, #6]
 8006738:	4613      	mov	r3, r2
 800673a:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	2b3b      	cmp	r3, #59	; 0x3b
 8006740:	d91a      	bls.n	8006778 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	2b50      	cmp	r3, #80	; 0x50
 8006746:	d817      	bhi.n	8006778 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8006748:	4b68      	ldr	r3, [pc, #416]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d004      	beq.n	800675a <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 8006750:	2100      	movs	r1, #0
 8006752:	2001      	movs	r0, #1
 8006754:	f000 f8cc 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8006758:	e003      	b.n	8006762 <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 800675a:	2101      	movs	r1, #1
 800675c:	2001      	movs	r0, #1
 800675e:	f000 f8c7 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 8006762:	4b62      	ldr	r3, [pc, #392]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	bf0c      	ite	eq
 800676a:	2301      	moveq	r3, #1
 800676c:	2300      	movne	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	4b5e      	ldr	r3, [pc, #376]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	e0b4      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8006778:	88fb      	ldrh	r3, [r7, #6]
 800677a:	2b59      	cmp	r3, #89	; 0x59
 800677c:	d91a      	bls.n	80067b4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	2b6e      	cmp	r3, #110	; 0x6e
 8006782:	d817      	bhi.n	80067b4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8006784:	4b59      	ldr	r3, [pc, #356]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006786:	785b      	ldrb	r3, [r3, #1]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 800678c:	2100      	movs	r1, #0
 800678e:	2002      	movs	r0, #2
 8006790:	f000 f8ae 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8006794:	e003      	b.n	800679e <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8006796:	2101      	movs	r1, #1
 8006798:	2002      	movs	r0, #2
 800679a:	f000 f8a9 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 800679e:	4b53      	ldr	r3, [pc, #332]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067a0:	785b      	ldrb	r3, [r3, #1]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bf0c      	ite	eq
 80067a6:	2301      	moveq	r3, #1
 80067a8:	2300      	movne	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	461a      	mov	r2, r3
 80067ae:	4b4f      	ldr	r3, [pc, #316]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067b0:	705a      	strb	r2, [r3, #1]
 80067b2:	e096      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	2b77      	cmp	r3, #119	; 0x77
 80067b8:	d91a      	bls.n	80067f0 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 80067ba:	88fb      	ldrh	r3, [r7, #6]
 80067bc:	2b8c      	cmp	r3, #140	; 0x8c
 80067be:	d817      	bhi.n	80067f0 <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 80067c0:	4b4a      	ldr	r3, [pc, #296]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067c2:	789b      	ldrb	r3, [r3, #2]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 80067c8:	2100      	movs	r1, #0
 80067ca:	2003      	movs	r0, #3
 80067cc:	f000 f890 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 80067d0:	e003      	b.n	80067da <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 80067d2:	2101      	movs	r1, #1
 80067d4:	2003      	movs	r0, #3
 80067d6:	f000 f88b 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 80067da:	4b44      	ldr	r3, [pc, #272]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067dc:	789b      	ldrb	r3, [r3, #2]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bf0c      	ite	eq
 80067e2:	2301      	moveq	r3, #1
 80067e4:	2300      	movne	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	4b40      	ldr	r3, [pc, #256]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067ec:	709a      	strb	r2, [r3, #2]
 80067ee:	e078      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	2b95      	cmp	r3, #149	; 0x95
 80067f4:	d91a      	bls.n	800682c <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	2baa      	cmp	r3, #170	; 0xaa
 80067fa:	d817      	bhi.n	800682c <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 80067fc:	4b3b      	ldr	r3, [pc, #236]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80067fe:	78db      	ldrb	r3, [r3, #3]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d004      	beq.n	800680e <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 8006804:	2100      	movs	r1, #0
 8006806:	2004      	movs	r0, #4
 8006808:	f000 f872 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 800680c:	e003      	b.n	8006816 <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 800680e:	2101      	movs	r1, #1
 8006810:	2004      	movs	r0, #4
 8006812:	f000 f86d 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 8006816:	4b35      	ldr	r3, [pc, #212]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006818:	78db      	ldrb	r3, [r3, #3]
 800681a:	2b00      	cmp	r3, #0
 800681c:	bf0c      	ite	eq
 800681e:	2301      	moveq	r3, #1
 8006820:	2300      	movne	r3, #0
 8006822:	b2db      	uxtb	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	4b31      	ldr	r3, [pc, #196]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006828:	70da      	strb	r2, [r3, #3]
 800682a:	e05a      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	2bb3      	cmp	r3, #179	; 0xb3
 8006830:	d91a      	bls.n	8006868 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	2bc8      	cmp	r3, #200	; 0xc8
 8006836:	d817      	bhi.n	8006868 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8006838:	4b2c      	ldr	r3, [pc, #176]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800683a:	791b      	ldrb	r3, [r3, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d004      	beq.n	800684a <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 8006840:	2100      	movs	r1, #0
 8006842:	2005      	movs	r0, #5
 8006844:	f000 f854 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8006848:	e003      	b.n	8006852 <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 800684a:	2101      	movs	r1, #1
 800684c:	2005      	movs	r0, #5
 800684e:	f000 f84f 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 8006852:	4b26      	ldr	r3, [pc, #152]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006854:	791b      	ldrb	r3, [r3, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	bf0c      	ite	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	2300      	movne	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	4b22      	ldr	r3, [pc, #136]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006864:	711a      	strb	r2, [r3, #4]
 8006866:	e03c      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	2bd1      	cmp	r3, #209	; 0xd1
 800686c:	d91a      	bls.n	80068a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	2be6      	cmp	r3, #230	; 0xe6
 8006872:	d817      	bhi.n	80068a4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8006874:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006876:	795b      	ldrb	r3, [r3, #5]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 800687c:	2100      	movs	r1, #0
 800687e:	2006      	movs	r0, #6
 8006880:	f000 f836 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8006884:	e003      	b.n	800688e <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8006886:	2101      	movs	r1, #1
 8006888:	2006      	movs	r0, #6
 800688a:	f000 f831 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 800688e:	4b17      	ldr	r3, [pc, #92]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8006890:	795b      	ldrb	r3, [r3, #5]
 8006892:	2b00      	cmp	r3, #0
 8006894:	bf0c      	ite	eq
 8006896:	2301      	moveq	r3, #1
 8006898:	2300      	movne	r3, #0
 800689a:	b2db      	uxtb	r3, r3
 800689c:	461a      	mov	r2, r3
 800689e:	4b13      	ldr	r3, [pc, #76]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80068a0:	715a      	strb	r2, [r3, #5]
 80068a2:	e01e      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	2bef      	cmp	r3, #239	; 0xef
 80068a8:	d91b      	bls.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068b0:	d817      	bhi.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 80068b2:	4b0e      	ldr	r3, [pc, #56]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80068b4:	799b      	ldrb	r3, [r3, #6]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 80068ba:	2100      	movs	r1, #0
 80068bc:	2007      	movs	r0, #7
 80068be:	f000 f817 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 80068c2:	e003      	b.n	80068cc <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 80068c4:	2101      	movs	r1, #1
 80068c6:	2007      	movs	r0, #7
 80068c8:	f000 f812 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 80068cc:	4b07      	ldr	r3, [pc, #28]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80068ce:	799b      	ldrb	r3, [r3, #6]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	bf0c      	ite	eq
 80068d4:	2301      	moveq	r3, #1
 80068d6:	2300      	movne	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	4b03      	ldr	r3, [pc, #12]	; (80068ec <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80068de:	719a      	strb	r2, [r3, #6]
	}
}
 80068e0:	e7ff      	b.n	80068e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	2000025c 	.word	0x2000025c

080068f0 <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	4603      	mov	r3, r0
 80068f8:	460a      	mov	r2, r1
 80068fa:	71fb      	strb	r3, [r7, #7]
 80068fc:	4613      	mov	r3, r2
 80068fe:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d11a      	bne.n	800693c <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 8006906:	79bb      	ldrb	r3, [r7, #6]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800690c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	2305      	movs	r3, #5
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	2312      	movs	r3, #18
 8006918:	2212      	movs	r2, #18
 800691a:	2133      	movs	r1, #51	; 0x33
 800691c:	203d      	movs	r0, #61	; 0x3d
 800691e:	f7fa ff02 	bl	8001726 <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8006922:	e0be      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006924:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	2305      	movs	r3, #5
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	2312      	movs	r3, #18
 8006930:	2212      	movs	r2, #18
 8006932:	2133      	movs	r1, #51	; 0x33
 8006934:	203d      	movs	r0, #61	; 0x3d
 8006936:	f7fa fef6 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 800693a:	e0b2      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d11a      	bne.n	8006978 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 8006942:	79bb      	ldrb	r3, [r7, #6]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10b      	bne.n	8006960 <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006948:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	2305      	movs	r3, #5
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	2312      	movs	r3, #18
 8006954:	2212      	movs	r2, #18
 8006956:	2133      	movs	r1, #51	; 0x33
 8006958:	205b      	movs	r0, #91	; 0x5b
 800695a:	f7fa fee4 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 800695e:	e0a0      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006960:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	2305      	movs	r3, #5
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	2312      	movs	r3, #18
 800696c:	2212      	movs	r2, #18
 800696e:	2133      	movs	r1, #51	; 0x33
 8006970:	205b      	movs	r0, #91	; 0x5b
 8006972:	f7fa fed8 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006976:	e094      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	2b03      	cmp	r3, #3
 800697c:	d11a      	bne.n	80069b4 <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 800697e:	79bb      	ldrb	r3, [r7, #6]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10b      	bne.n	800699c <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006984:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	2305      	movs	r3, #5
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	2312      	movs	r3, #18
 8006990:	2212      	movs	r2, #18
 8006992:	2133      	movs	r1, #51	; 0x33
 8006994:	2079      	movs	r0, #121	; 0x79
 8006996:	f7fa fec6 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 800699a:	e082      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800699c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	2305      	movs	r3, #5
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	2312      	movs	r3, #18
 80069a8:	2212      	movs	r2, #18
 80069aa:	2133      	movs	r1, #51	; 0x33
 80069ac:	2079      	movs	r0, #121	; 0x79
 80069ae:	f7fa feba 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 80069b2:	e076      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d11a      	bne.n	80069f0 <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 80069ba:	79bb      	ldrb	r3, [r7, #6]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10b      	bne.n	80069d8 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80069c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	2305      	movs	r3, #5
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	2312      	movs	r3, #18
 80069cc:	2212      	movs	r2, #18
 80069ce:	2133      	movs	r1, #51	; 0x33
 80069d0:	2097      	movs	r0, #151	; 0x97
 80069d2:	f7fa fea8 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 80069d6:	e064      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80069d8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	2305      	movs	r3, #5
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	2312      	movs	r3, #18
 80069e4:	2212      	movs	r2, #18
 80069e6:	2133      	movs	r1, #51	; 0x33
 80069e8:	2097      	movs	r0, #151	; 0x97
 80069ea:	f7fa fe9c 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 80069ee:	e058      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	d11a      	bne.n	8006a2c <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 80069f6:	79bb      	ldrb	r3, [r7, #6]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10b      	bne.n	8006a14 <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80069fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	2305      	movs	r3, #5
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	2312      	movs	r3, #18
 8006a08:	2212      	movs	r2, #18
 8006a0a:	2133      	movs	r1, #51	; 0x33
 8006a0c:	20b5      	movs	r0, #181	; 0xb5
 8006a0e:	f7fa fe8a 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006a12:	e046      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	2305      	movs	r3, #5
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	2312      	movs	r3, #18
 8006a20:	2212      	movs	r2, #18
 8006a22:	2133      	movs	r1, #51	; 0x33
 8006a24:	20b5      	movs	r0, #181	; 0xb5
 8006a26:	f7fa fe7e 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006a2a:	e03a      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	2b06      	cmp	r3, #6
 8006a30:	d11a      	bne.n	8006a68 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 8006a32:	79bb      	ldrb	r3, [r7, #6]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10b      	bne.n	8006a50 <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	2305      	movs	r3, #5
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	2312      	movs	r3, #18
 8006a44:	2212      	movs	r2, #18
 8006a46:	2133      	movs	r1, #51	; 0x33
 8006a48:	20d3      	movs	r0, #211	; 0xd3
 8006a4a:	f7fa fe6c 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006a4e:	e028      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a50:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	2305      	movs	r3, #5
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	2312      	movs	r3, #18
 8006a5c:	2212      	movs	r2, #18
 8006a5e:	2133      	movs	r1, #51	; 0x33
 8006a60:	20d3      	movs	r0, #211	; 0xd3
 8006a62:	f7fa fe60 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006a66:	e01c      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	2b07      	cmp	r3, #7
 8006a6c:	d119      	bne.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 8006a6e:	79bb      	ldrb	r3, [r7, #6]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10b      	bne.n	8006a8c <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006a74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	2305      	movs	r3, #5
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	2312      	movs	r3, #18
 8006a80:	2212      	movs	r2, #18
 8006a82:	2133      	movs	r1, #51	; 0x33
 8006a84:	20f1      	movs	r0, #241	; 0xf1
 8006a86:	f7fa fe4e 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006a8a:	e00a      	b.n	8006aa2 <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006a8c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	2305      	movs	r3, #5
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	2312      	movs	r3, #18
 8006a98:	2212      	movs	r2, #18
 8006a9a:	2133      	movs	r1, #51	; 0x33
 8006a9c:	20f1      	movs	r0, #241	; 0xf1
 8006a9e:	f7fa fe42 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006aa2:	bf00      	nop
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af02      	add	r7, sp, #8
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	460a      	mov	r2, r1
 8006ab4:	71fb      	strb	r3, [r7, #7]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d11a      	bne.n	8006af6 <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 8006ac0:	79bb      	ldrb	r3, [r7, #6]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10b      	bne.n	8006ade <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006ac6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	2305      	movs	r3, #5
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	2312      	movs	r3, #18
 8006ad2:	2212      	movs	r2, #18
 8006ad4:	21ab      	movs	r1, #171	; 0xab
 8006ad6:	2016      	movs	r0, #22
 8006ad8:	f7fa fe25 	bl	8001726 <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8006adc:	e0fc      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006ade:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006ae2:	9301      	str	r3, [sp, #4]
 8006ae4:	2305      	movs	r3, #5
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	2312      	movs	r3, #18
 8006aea:	2212      	movs	r2, #18
 8006aec:	21ab      	movs	r1, #171	; 0xab
 8006aee:	2016      	movs	r0, #22
 8006af0:	f7fa fe19 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006af4:	e0f0      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d11a      	bne.n	8006b32 <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 8006afc:	79bb      	ldrb	r3, [r7, #6]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10b      	bne.n	8006b1a <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b02:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	2305      	movs	r3, #5
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	2312      	movs	r3, #18
 8006b0e:	2212      	movs	r2, #18
 8006b10:	21ab      	movs	r1, #171	; 0xab
 8006b12:	2036      	movs	r0, #54	; 0x36
 8006b14:	f7fa fe07 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006b18:	e0de      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b1a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	2305      	movs	r3, #5
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	2312      	movs	r3, #18
 8006b26:	2212      	movs	r2, #18
 8006b28:	21ab      	movs	r1, #171	; 0xab
 8006b2a:	2036      	movs	r0, #54	; 0x36
 8006b2c:	f7fa fdfb 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006b30:	e0d2      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d11a      	bne.n	8006b6e <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 8006b38:	79bb      	ldrb	r3, [r7, #6]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10b      	bne.n	8006b56 <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b3e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b42:	9301      	str	r3, [sp, #4]
 8006b44:	2305      	movs	r3, #5
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	2312      	movs	r3, #18
 8006b4a:	2212      	movs	r2, #18
 8006b4c:	21ab      	movs	r1, #171	; 0xab
 8006b4e:	2056      	movs	r0, #86	; 0x56
 8006b50:	f7fa fde9 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006b54:	e0c0      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	2305      	movs	r3, #5
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	2312      	movs	r3, #18
 8006b62:	2212      	movs	r2, #18
 8006b64:	21ab      	movs	r1, #171	; 0xab
 8006b66:	2056      	movs	r0, #86	; 0x56
 8006b68:	f7fa fddd 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006b6c:	e0b4      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 8006b6e:	79fb      	ldrb	r3, [r7, #7]
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d11a      	bne.n	8006baa <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 8006b74:	79bb      	ldrb	r3, [r7, #6]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006b7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	2305      	movs	r3, #5
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	2312      	movs	r3, #18
 8006b86:	2212      	movs	r2, #18
 8006b88:	21ab      	movs	r1, #171	; 0xab
 8006b8a:	2076      	movs	r0, #118	; 0x76
 8006b8c:	f7fa fdcb 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006b90:	e0a2      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006b92:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	2305      	movs	r3, #5
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	2312      	movs	r3, #18
 8006b9e:	2212      	movs	r2, #18
 8006ba0:	21ab      	movs	r1, #171	; 0xab
 8006ba2:	2076      	movs	r0, #118	; 0x76
 8006ba4:	f7fa fdbf 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006ba8:	e096      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	d11a      	bne.n	8006be6 <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 8006bb0:	79bb      	ldrb	r3, [r7, #6]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006bb6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	2305      	movs	r3, #5
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	2312      	movs	r3, #18
 8006bc2:	2212      	movs	r2, #18
 8006bc4:	21ab      	movs	r1, #171	; 0xab
 8006bc6:	2096      	movs	r0, #150	; 0x96
 8006bc8:	f7fa fdad 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006bcc:	e084      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006bce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	2305      	movs	r3, #5
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	2312      	movs	r3, #18
 8006bda:	2212      	movs	r2, #18
 8006bdc:	21ab      	movs	r1, #171	; 0xab
 8006bde:	2096      	movs	r0, #150	; 0x96
 8006be0:	f7fa fda1 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006be4:	e078      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	2b06      	cmp	r3, #6
 8006bea:	d11a      	bne.n	8006c22 <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8006bec:	79bb      	ldrb	r3, [r7, #6]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006bf2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	2305      	movs	r3, #5
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	2312      	movs	r3, #18
 8006bfe:	2212      	movs	r2, #18
 8006c00:	21ab      	movs	r1, #171	; 0xab
 8006c02:	20b6      	movs	r0, #182	; 0xb6
 8006c04:	f7fa fd8f 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006c08:	e066      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006c0a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c0e:	9301      	str	r3, [sp, #4]
 8006c10:	2305      	movs	r3, #5
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	2312      	movs	r3, #18
 8006c16:	2212      	movs	r2, #18
 8006c18:	21ab      	movs	r1, #171	; 0xab
 8006c1a:	20b6      	movs	r0, #182	; 0xb6
 8006c1c:	f7fa fd83 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006c20:	e05a      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 8006c22:	79fb      	ldrb	r3, [r7, #7]
 8006c24:	2b07      	cmp	r3, #7
 8006c26:	d11a      	bne.n	8006c5e <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8006c28:	79bb      	ldrb	r3, [r7, #6]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10b      	bne.n	8006c46 <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006c2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	2305      	movs	r3, #5
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	2312      	movs	r3, #18
 8006c3a:	2212      	movs	r2, #18
 8006c3c:	21ab      	movs	r1, #171	; 0xab
 8006c3e:	20d6      	movs	r0, #214	; 0xd6
 8006c40:	f7fa fd71 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006c44:	e048      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006c46:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c4a:	9301      	str	r3, [sp, #4]
 8006c4c:	2305      	movs	r3, #5
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	2312      	movs	r3, #18
 8006c52:	2212      	movs	r2, #18
 8006c54:	21ab      	movs	r1, #171	; 0xab
 8006c56:	20d6      	movs	r0, #214	; 0xd6
 8006c58:	f7fa fd65 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006c5c:	e03c      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 8006c5e:	79fb      	ldrb	r3, [r7, #7]
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d11a      	bne.n	8006c9a <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 8006c64:	79bb      	ldrb	r3, [r7, #6]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10b      	bne.n	8006c82 <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006c6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	2305      	movs	r3, #5
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	2312      	movs	r3, #18
 8006c76:	2212      	movs	r2, #18
 8006c78:	21ab      	movs	r1, #171	; 0xab
 8006c7a:	20f6      	movs	r0, #246	; 0xf6
 8006c7c:	f7fa fd53 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006c80:	e02a      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006c82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	2305      	movs	r3, #5
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	2312      	movs	r3, #18
 8006c8e:	2212      	movs	r2, #18
 8006c90:	21ab      	movs	r1, #171	; 0xab
 8006c92:	20f6      	movs	r0, #246	; 0xf6
 8006c94:	f7fa fd47 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006c98:	e01e      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	2b09      	cmp	r3, #9
 8006c9e:	d11b      	bne.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 8006ca0:	79bb      	ldrb	r3, [r7, #6]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10c      	bne.n	8006cc0 <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8006ca6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006caa:	9301      	str	r3, [sp, #4]
 8006cac:	2305      	movs	r3, #5
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	2312      	movs	r3, #18
 8006cb2:	2212      	movs	r2, #18
 8006cb4:	21ab      	movs	r1, #171	; 0xab
 8006cb6:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006cba:	f7fa fd34 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006cbe:	e00b      	b.n	8006cd8 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8006cc0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	2305      	movs	r3, #5
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	2312      	movs	r3, #18
 8006ccc:	2212      	movs	r2, #18
 8006cce:	21ab      	movs	r1, #171	; 0xab
 8006cd0:	f44f 708b 	mov.w	r0, #278	; 0x116
 8006cd4:	f7fa fd27 	bl	8001726 <GFX_DrawFillRoundRectangle>
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <MenuTFTSchedule1ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	460a      	mov	r2, r1
 8006cea:	80fb      	strh	r3, [r7, #6]
 8006cec:	4613      	mov	r3, r2
 8006cee:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006cf0:	4859      	ldr	r0, [pc, #356]	; (8006e58 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x178>)
 8006cf2:	f7fa fd69 	bl	80017c8 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	2bba      	cmp	r3, #186	; 0xba
 8006cfa:	d92f      	bls.n	8006d5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	2bdd      	cmp	r3, #221	; 0xdd
 8006d00:	d82c      	bhi.n	8006d5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule1 < 24)
 8006d02:	4b56      	ldr	r3, [pc, #344]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b17      	cmp	r3, #23
 8006d08:	d806      	bhi.n	8006d18 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule1++;
 8006d0a:	4b54      	ldr	r3, [pc, #336]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	4b52      	ldr	r3, [pc, #328]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	e002      	b.n	8006d1e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule1 = 1;
 8006d18:	4b50      	ldr	r3, [pc, #320]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 8006d1e:	4b4f      	ldr	r3, [pc, #316]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b09      	cmp	r3, #9
 8006d24:	d907      	bls.n	8006d36 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x56>
 8006d26:	4b4d      	ldr	r3, [pc, #308]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	494c      	ldr	r1, [pc, #304]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006d2e:	484d      	ldr	r0, [pc, #308]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d30:	f00a ff9e 	bl	8011c70 <siprintf>
 8006d34:	e006      	b.n	8006d44 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 8006d36:	4b49      	ldr	r3, [pc, #292]	; (8006e5c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	494a      	ldr	r1, [pc, #296]	; (8006e68 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006d3e:	4849      	ldr	r0, [pc, #292]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d40:	f00a ff96 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006d44:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	2264      	movs	r2, #100	; 0x64
 8006d52:	2150      	movs	r1, #80	; 0x50
 8006d54:	4843      	ldr	r0, [pc, #268]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d56:	f7fa ff51 	bl	8001bfc <EF_PutString>
 8006d5a:	e078      	b.n	8006e4e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006d5c:	88fb      	ldrh	r3, [r7, #6]
 8006d5e:	2be8      	cmp	r3, #232	; 0xe8
 8006d60:	d930      	bls.n	8006dc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
 8006d62:	88fb      	ldrh	r3, [r7, #6]
 8006d64:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006d68:	d22c      	bcs.n	8006dc4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule1 < 59)
 8006d6a:	4b40      	ldr	r3, [pc, #256]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b3a      	cmp	r3, #58	; 0x3a
 8006d70:	d806      	bhi.n	8006d80 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule1++;
 8006d72:	4b3e      	ldr	r3, [pc, #248]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	3301      	adds	r3, #1
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	4b3c      	ldr	r3, [pc, #240]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e002      	b.n	8006d86 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule1 = 0;
 8006d80:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006d86:	4b39      	ldr	r3, [pc, #228]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b09      	cmp	r3, #9
 8006d8c:	d907      	bls.n	8006d9e <MenuTFTSchedule1ActivityHourMinuteONAdd+0xbe>
 8006d8e:	4b37      	ldr	r3, [pc, #220]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	4932      	ldr	r1, [pc, #200]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006d96:	4833      	ldr	r0, [pc, #204]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006d98:	f00a ff6a 	bl	8011c70 <siprintf>
 8006d9c:	e006      	b.n	8006dac <MenuTFTSchedule1ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006d9e:	4b33      	ldr	r3, [pc, #204]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	4930      	ldr	r1, [pc, #192]	; (8006e68 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006da6:	482f      	ldr	r0, [pc, #188]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006da8:	f00a ff62 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006dac:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	2301      	movs	r3, #1
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	2300      	movs	r3, #0
 8006db8:	2264      	movs	r2, #100	; 0x64
 8006dba:	218a      	movs	r1, #138	; 0x8a
 8006dbc:	4829      	ldr	r0, [pc, #164]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006dbe:	f7fa ff1d 	bl	8001bfc <EF_PutString>
 8006dc2:	e044      	b.n	8006e4e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006dc4:	88fb      	ldrh	r3, [r7, #6]
 8006dc6:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006dca:	d940      	bls.n	8006e4e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006dd2:	d23c      	bcs.n	8006e4e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule1 < 49)
 8006dd4:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b30      	cmp	r3, #48	; 0x30
 8006dda:	d806      	bhi.n	8006dea <MenuTFTSchedule1ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8006ddc:	4b23      	ldr	r3, [pc, #140]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	330a      	adds	r3, #10
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	4b21      	ldr	r3, [pc, #132]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	e012      	b.n	8006e10 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 8006dea:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	f103 020a 	add.w	r2, r3, #10
 8006df2:	4b1f      	ldr	r3, [pc, #124]	; (8006e70 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x190>)
 8006df4:	fb83 1302 	smull	r1, r3, r3, r2
 8006df8:	4413      	add	r3, r2
 8006dfa:	1159      	asrs	r1, r3, #5
 8006dfc:	17d3      	asrs	r3, r2, #31
 8006dfe:	1ac9      	subs	r1, r1, r3
 8006e00:	460b      	mov	r3, r1
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	1a5b      	subs	r3, r3, r1
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	1ad1      	subs	r1, r2, r3
 8006e0a:	b2ca      	uxtb	r2, r1
 8006e0c:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006e0e:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 8006e10:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b09      	cmp	r3, #9
 8006e16:	d907      	bls.n	8006e28 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x148>
 8006e18:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	4910      	ldr	r1, [pc, #64]	; (8006e60 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 8006e20:	4810      	ldr	r0, [pc, #64]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006e22:	f00a ff25 	bl	8011c70 <siprintf>
 8006e26:	e006      	b.n	8006e36 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8006e28:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	490e      	ldr	r1, [pc, #56]	; (8006e68 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8006e30:	480c      	ldr	r0, [pc, #48]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006e32:	f00a ff1d 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006e36:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	2300      	movs	r3, #0
 8006e42:	2264      	movs	r2, #100	; 0x64
 8006e44:	218a      	movs	r1, #138	; 0x8a
 8006e46:	4807      	ldr	r0, [pc, #28]	; (8006e64 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8006e48:	f7fa fed8 	bl	8001bfc <EF_PutString>
	}
}
 8006e4c:	e7ff      	b.n	8006e4e <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	080293e8 	.word	0x080293e8
 8006e5c:	20000281 	.word	0x20000281
 8006e60:	08015e44 	.word	0x08015e44
 8006e64:	200002c0 	.word	0x200002c0
 8006e68:	08015e4c 	.word	0x08015e4c
 8006e6c:	20000283 	.word	0x20000283
 8006e70:	88888889 	.word	0x88888889

08006e74 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	460a      	mov	r2, r1
 8006e7e:	80fb      	strh	r3, [r7, #6]
 8006e80:	4613      	mov	r3, r2
 8006e82:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8006e84:	4859      	ldr	r0, [pc, #356]	; (8006fec <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x178>)
 8006e86:	f7fa fc9f 	bl	80017c8 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	2bba      	cmp	r3, #186	; 0xba
 8006e8e:	d92f      	bls.n	8006ef0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
 8006e90:	88fb      	ldrh	r3, [r7, #6]
 8006e92:	2bdd      	cmp	r3, #221	; 0xdd
 8006e94:	d82c      	bhi.n	8006ef0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule1 < 24)
 8006e96:	4b56      	ldr	r3, [pc, #344]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b17      	cmp	r3, #23
 8006e9c:	d806      	bhi.n	8006eac <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule1++;
 8006e9e:	4b54      	ldr	r3, [pc, #336]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	4b52      	ldr	r3, [pc, #328]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e002      	b.n	8006eb2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule1 = 1;
 8006eac:	4b50      	ldr	r3, [pc, #320]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 8006eb2:	4b4f      	ldr	r3, [pc, #316]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b09      	cmp	r3, #9
 8006eb8:	d907      	bls.n	8006eca <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x56>
 8006eba:	4b4d      	ldr	r3, [pc, #308]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	494c      	ldr	r1, [pc, #304]	; (8006ff4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006ec2:	484d      	ldr	r0, [pc, #308]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006ec4:	f00a fed4 	bl	8011c70 <siprintf>
 8006ec8:	e006      	b.n	8006ed8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 8006eca:	4b49      	ldr	r3, [pc, #292]	; (8006ff0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	494a      	ldr	r1, [pc, #296]	; (8006ffc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006ed2:	4849      	ldr	r0, [pc, #292]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006ed4:	f00a fecc 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006ed8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	2301      	movs	r3, #1
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2287      	movs	r2, #135	; 0x87
 8006ee6:	214e      	movs	r1, #78	; 0x4e
 8006ee8:	4843      	ldr	r0, [pc, #268]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006eea:	f7fa fe87 	bl	8001bfc <EF_PutString>
 8006eee:	e078      	b.n	8006fe2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	2be8      	cmp	r3, #232	; 0xe8
 8006ef4:	d930      	bls.n	8006f58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8006efc:	d22c      	bcs.n	8006f58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule1 < 59)
 8006efe:	4b40      	ldr	r3, [pc, #256]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b3a      	cmp	r3, #58	; 0x3a
 8006f04:	d806      	bhi.n	8006f14 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule1++;
 8006f06:	4b3e      	ldr	r3, [pc, #248]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	4b3c      	ldr	r3, [pc, #240]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	e002      	b.n	8006f1a <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule1 = 0;
 8006f14:	4b3a      	ldr	r3, [pc, #232]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006f1a:	4b39      	ldr	r3, [pc, #228]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b09      	cmp	r3, #9
 8006f20:	d907      	bls.n	8006f32 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xbe>
 8006f22:	4b37      	ldr	r3, [pc, #220]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	4932      	ldr	r1, [pc, #200]	; (8006ff4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006f2a:	4833      	ldr	r0, [pc, #204]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006f2c:	f00a fea0 	bl	8011c70 <siprintf>
 8006f30:	e006      	b.n	8006f40 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006f32:	4b33      	ldr	r3, [pc, #204]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	4930      	ldr	r1, [pc, #192]	; (8006ffc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006f3a:	482f      	ldr	r0, [pc, #188]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006f3c:	f00a fe98 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006f40:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	2301      	movs	r3, #1
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2287      	movs	r2, #135	; 0x87
 8006f4e:	218a      	movs	r1, #138	; 0x8a
 8006f50:	4829      	ldr	r0, [pc, #164]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006f52:	f7fa fe53 	bl	8001bfc <EF_PutString>
 8006f56:	e044      	b.n	8006fe2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8006f58:	88fb      	ldrh	r3, [r7, #6]
 8006f5a:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8006f5e:	d940      	bls.n	8006fe2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006f60:	88fb      	ldrh	r3, [r7, #6]
 8006f62:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8006f66:	d23c      	bcs.n	8006fe2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule1 < 49)
 8006f68:	4b25      	ldr	r3, [pc, #148]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b30      	cmp	r3, #48	; 0x30
 8006f6e:	d806      	bhi.n	8006f7e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 8006f70:	4b23      	ldr	r3, [pc, #140]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	330a      	adds	r3, #10
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	4b21      	ldr	r3, [pc, #132]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e012      	b.n	8006fa4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 8006f7e:	4b20      	ldr	r3, [pc, #128]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	f103 020a 	add.w	r2, r3, #10
 8006f86:	4b1f      	ldr	r3, [pc, #124]	; (8007004 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x190>)
 8006f88:	fb83 1302 	smull	r1, r3, r3, r2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	1159      	asrs	r1, r3, #5
 8006f90:	17d3      	asrs	r3, r2, #31
 8006f92:	1ac9      	subs	r1, r1, r3
 8006f94:	460b      	mov	r3, r1
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	1a5b      	subs	r3, r3, r1
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	1ad1      	subs	r1, r2, r3
 8006f9e:	b2ca      	uxtb	r2, r1
 8006fa0:	4b17      	ldr	r3, [pc, #92]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006fa2:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8006fa4:	4b16      	ldr	r3, [pc, #88]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	2b09      	cmp	r3, #9
 8006faa:	d907      	bls.n	8006fbc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x148>
 8006fac:	4b14      	ldr	r3, [pc, #80]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4910      	ldr	r1, [pc, #64]	; (8006ff4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8006fb4:	4810      	ldr	r0, [pc, #64]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006fb6:	f00a fe5b 	bl	8011c70 <siprintf>
 8006fba:	e006      	b.n	8006fca <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8006fbc:	4b10      	ldr	r3, [pc, #64]	; (8007000 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	490e      	ldr	r1, [pc, #56]	; (8006ffc <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8006fc4:	480c      	ldr	r0, [pc, #48]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006fc6:	f00a fe53 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006fca:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	2287      	movs	r2, #135	; 0x87
 8006fd8:	218a      	movs	r1, #138	; 0x8a
 8006fda:	4807      	ldr	r0, [pc, #28]	; (8006ff8 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8006fdc:	f7fa fe0e 	bl	8001bfc <EF_PutString>
	}
}
 8006fe0:	e7ff      	b.n	8006fe2 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	080293e8 	.word	0x080293e8
 8006ff0:	20000282 	.word	0x20000282
 8006ff4:	08015e44 	.word	0x08015e44
 8006ff8:	200002c0 	.word	0x200002c0
 8006ffc:	08015e4c 	.word	0x08015e4c
 8007000:	20000284 	.word	0x20000284
 8007004:	88888889 	.word	0x88888889

08007008 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	460a      	mov	r2, r1
 8007012:	80fb      	strh	r3, [r7, #6]
 8007014:	4613      	mov	r3, r2
 8007016:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	2b3b      	cmp	r3, #59	; 0x3b
 800701c:	d91a      	bls.n	8007054 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 800701e:	88fb      	ldrh	r3, [r7, #6]
 8007020:	2b50      	cmp	r3, #80	; 0x50
 8007022:	d817      	bhi.n	8007054 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8007024:	4b68      	ldr	r3, [pc, #416]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 800702c:	2100      	movs	r1, #0
 800702e:	2001      	movs	r0, #1
 8007030:	f7ff fc5e 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8007034:	e003      	b.n	800703e <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8007036:	2101      	movs	r1, #1
 8007038:	2001      	movs	r0, #1
 800703a:	f7ff fc59 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 800703e:	4b62      	ldr	r3, [pc, #392]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	bf0c      	ite	eq
 8007046:	2301      	moveq	r3, #1
 8007048:	2300      	movne	r3, #0
 800704a:	b2db      	uxtb	r3, r3
 800704c:	461a      	mov	r2, r3
 800704e:	4b5e      	ldr	r3, [pc, #376]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e0b4      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	2b59      	cmp	r3, #89	; 0x59
 8007058:	d91a      	bls.n	8007090 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	2b6e      	cmp	r3, #110	; 0x6e
 800705e:	d817      	bhi.n	8007090 <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8007060:	4b59      	ldr	r3, [pc, #356]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8007068:	2100      	movs	r1, #0
 800706a:	2002      	movs	r0, #2
 800706c:	f7ff fc40 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8007070:	e003      	b.n	800707a <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8007072:	2101      	movs	r1, #1
 8007074:	2002      	movs	r0, #2
 8007076:	f7ff fc3b 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 800707a:	4b53      	ldr	r3, [pc, #332]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	2b00      	cmp	r3, #0
 8007080:	bf0c      	ite	eq
 8007082:	2301      	moveq	r3, #1
 8007084:	2300      	movne	r3, #0
 8007086:	b2db      	uxtb	r3, r3
 8007088:	461a      	mov	r2, r3
 800708a:	4b4f      	ldr	r3, [pc, #316]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800708c:	705a      	strb	r2, [r3, #1]
 800708e:	e096      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007090:	88fb      	ldrh	r3, [r7, #6]
 8007092:	2b77      	cmp	r3, #119	; 0x77
 8007094:	d91a      	bls.n	80070cc <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 8007096:	88fb      	ldrh	r3, [r7, #6]
 8007098:	2b8c      	cmp	r3, #140	; 0x8c
 800709a:	d817      	bhi.n	80070cc <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 800709c:	4b4a      	ldr	r3, [pc, #296]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800709e:	789b      	ldrb	r3, [r3, #2]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 80070a4:	2100      	movs	r1, #0
 80070a6:	2003      	movs	r0, #3
 80070a8:	f7ff fc22 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 80070ac:	e003      	b.n	80070b6 <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 80070ae:	2101      	movs	r1, #1
 80070b0:	2003      	movs	r0, #3
 80070b2:	f7ff fc1d 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 80070b6:	4b44      	ldr	r3, [pc, #272]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070b8:	789b      	ldrb	r3, [r3, #2]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	bf0c      	ite	eq
 80070be:	2301      	moveq	r3, #1
 80070c0:	2300      	movne	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	4b40      	ldr	r3, [pc, #256]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070c8:	709a      	strb	r2, [r3, #2]
 80070ca:	e078      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80070cc:	88fb      	ldrh	r3, [r7, #6]
 80070ce:	2b95      	cmp	r3, #149	; 0x95
 80070d0:	d91a      	bls.n	8007108 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	2baa      	cmp	r3, #170	; 0xaa
 80070d6:	d817      	bhi.n	8007108 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 80070d8:	4b3b      	ldr	r3, [pc, #236]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070da:	78db      	ldrb	r3, [r3, #3]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 80070e0:	2100      	movs	r1, #0
 80070e2:	2004      	movs	r0, #4
 80070e4:	f7ff fc04 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 80070e8:	e003      	b.n	80070f2 <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 80070ea:	2101      	movs	r1, #1
 80070ec:	2004      	movs	r0, #4
 80070ee:	f7ff fbff 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 80070f2:	4b35      	ldr	r3, [pc, #212]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80070f4:	78db      	ldrb	r3, [r3, #3]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bf0c      	ite	eq
 80070fa:	2301      	moveq	r3, #1
 80070fc:	2300      	movne	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	4b31      	ldr	r3, [pc, #196]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007104:	70da      	strb	r2, [r3, #3]
 8007106:	e05a      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	2bb3      	cmp	r3, #179	; 0xb3
 800710c:	d91a      	bls.n	8007144 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 800710e:	88fb      	ldrh	r3, [r7, #6]
 8007110:	2bc8      	cmp	r3, #200	; 0xc8
 8007112:	d817      	bhi.n	8007144 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8007114:	4b2c      	ldr	r3, [pc, #176]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007116:	791b      	ldrb	r3, [r3, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 800711c:	2100      	movs	r1, #0
 800711e:	2005      	movs	r0, #5
 8007120:	f7ff fbe6 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8007124:	e003      	b.n	800712e <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8007126:	2101      	movs	r1, #1
 8007128:	2005      	movs	r0, #5
 800712a:	f7ff fbe1 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 800712e:	4b26      	ldr	r3, [pc, #152]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007130:	791b      	ldrb	r3, [r3, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	bf0c      	ite	eq
 8007136:	2301      	moveq	r3, #1
 8007138:	2300      	movne	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	461a      	mov	r2, r3
 800713e:	4b22      	ldr	r3, [pc, #136]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007140:	711a      	strb	r2, [r3, #4]
 8007142:	e03c      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	2bd1      	cmp	r3, #209	; 0xd1
 8007148:	d91a      	bls.n	8007180 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 800714a:	88fb      	ldrh	r3, [r7, #6]
 800714c:	2be6      	cmp	r3, #230	; 0xe6
 800714e:	d817      	bhi.n	8007180 <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8007150:	4b1d      	ldr	r3, [pc, #116]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007152:	795b      	ldrb	r3, [r3, #5]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007158:	2100      	movs	r1, #0
 800715a:	2006      	movs	r0, #6
 800715c:	f7ff fbc8 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 8007160:	e003      	b.n	800716a <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8007162:	2101      	movs	r1, #1
 8007164:	2006      	movs	r0, #6
 8007166:	f7ff fbc3 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 800716a:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800716c:	795b      	ldrb	r3, [r3, #5]
 800716e:	2b00      	cmp	r3, #0
 8007170:	bf0c      	ite	eq
 8007172:	2301      	moveq	r3, #1
 8007174:	2300      	movne	r3, #0
 8007176:	b2db      	uxtb	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 800717c:	715a      	strb	r2, [r3, #5]
 800717e:	e01e      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007180:	88fb      	ldrh	r3, [r7, #6]
 8007182:	2bef      	cmp	r3, #239	; 0xef
 8007184:	d91b      	bls.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007186:	88fb      	ldrh	r3, [r7, #6]
 8007188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800718c:	d817      	bhi.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 800718e:	4b0e      	ldr	r3, [pc, #56]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007190:	799b      	ldrb	r3, [r3, #6]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 8007196:	2100      	movs	r1, #0
 8007198:	2007      	movs	r0, #7
 800719a:	f7ff fba9 	bl	80068f0 <changeTFTScheduleDayOfWeek>
 800719e:	e003      	b.n	80071a8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 80071a0:	2101      	movs	r1, #1
 80071a2:	2007      	movs	r0, #7
 80071a4:	f7ff fba4 	bl	80068f0 <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 80071a8:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80071aa:	799b      	ldrb	r3, [r3, #6]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf0c      	ite	eq
 80071b0:	2301      	moveq	r3, #1
 80071b2:	2300      	movne	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	461a      	mov	r2, r3
 80071b8:	4b03      	ldr	r3, [pc, #12]	; (80071c8 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 80071ba:	719a      	strb	r2, [r3, #6]
	}
}
 80071bc:	e7ff      	b.n	80071be <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000270 	.word	0x20000270

080071cc <MenuTFTSchedule2ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	4603      	mov	r3, r0
 80071d4:	460a      	mov	r2, r1
 80071d6:	80fb      	strh	r3, [r7, #6]
 80071d8:	4613      	mov	r3, r2
 80071da:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80071dc:	4859      	ldr	r0, [pc, #356]	; (8007344 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x178>)
 80071de:	f7fa faf3 	bl	80017c8 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80071e2:	88fb      	ldrh	r3, [r7, #6]
 80071e4:	2bba      	cmp	r3, #186	; 0xba
 80071e6:	d92f      	bls.n	8007248 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
 80071e8:	88fb      	ldrh	r3, [r7, #6]
 80071ea:	2bdd      	cmp	r3, #221	; 0xdd
 80071ec:	d82c      	bhi.n	8007248 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule2 < 24)
 80071ee:	4b56      	ldr	r3, [pc, #344]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	2b17      	cmp	r3, #23
 80071f4:	d806      	bhi.n	8007204 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule2++;
 80071f6:	4b54      	ldr	r3, [pc, #336]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	3301      	adds	r3, #1
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	4b52      	ldr	r3, [pc, #328]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	e002      	b.n	800720a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule2 = 1;
 8007204:	4b50      	ldr	r3, [pc, #320]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007206:	2201      	movs	r2, #1
 8007208:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 800720a:	4b4f      	ldr	r3, [pc, #316]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b09      	cmp	r3, #9
 8007210:	d907      	bls.n	8007222 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x56>
 8007212:	4b4d      	ldr	r3, [pc, #308]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	494c      	ldr	r1, [pc, #304]	; (800734c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 800721a:	484d      	ldr	r0, [pc, #308]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800721c:	f00a fd28 	bl	8011c70 <siprintf>
 8007220:	e006      	b.n	8007230 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 8007222:	4b49      	ldr	r3, [pc, #292]	; (8007348 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	494a      	ldr	r1, [pc, #296]	; (8007354 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 800722a:	4849      	ldr	r0, [pc, #292]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800722c:	f00a fd20 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007230:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	2301      	movs	r3, #1
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	2300      	movs	r3, #0
 800723c:	2264      	movs	r2, #100	; 0x64
 800723e:	214e      	movs	r1, #78	; 0x4e
 8007240:	4843      	ldr	r0, [pc, #268]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007242:	f7fa fcdb 	bl	8001bfc <EF_PutString>
 8007246:	e078      	b.n	800733a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	2be8      	cmp	r3, #232	; 0xe8
 800724c:	d930      	bls.n	80072b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007254:	d22c      	bcs.n	80072b0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule2 < 59)
 8007256:	4b40      	ldr	r3, [pc, #256]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	2b3a      	cmp	r3, #58	; 0x3a
 800725c:	d806      	bhi.n	800726c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule2++;
 800725e:	4b3e      	ldr	r3, [pc, #248]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	3301      	adds	r3, #1
 8007264:	b2da      	uxtb	r2, r3
 8007266:	4b3c      	ldr	r3, [pc, #240]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	e002      	b.n	8007272 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule2 = 0;
 800726c:	4b3a      	ldr	r3, [pc, #232]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007272:	4b39      	ldr	r3, [pc, #228]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b09      	cmp	r3, #9
 8007278:	d907      	bls.n	800728a <MenuTFTSchedule2ActivityHourMinuteONAdd+0xbe>
 800727a:	4b37      	ldr	r3, [pc, #220]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	4932      	ldr	r1, [pc, #200]	; (800734c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 8007282:	4833      	ldr	r0, [pc, #204]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007284:	f00a fcf4 	bl	8011c70 <siprintf>
 8007288:	e006      	b.n	8007298 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 800728a:	4b33      	ldr	r3, [pc, #204]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	4930      	ldr	r1, [pc, #192]	; (8007354 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 8007292:	482f      	ldr	r0, [pc, #188]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007294:	f00a fcec 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007298:	f24c 6318 	movw	r3, #50712	; 0xc618
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	2301      	movs	r3, #1
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	2300      	movs	r3, #0
 80072a4:	2264      	movs	r2, #100	; 0x64
 80072a6:	218a      	movs	r1, #138	; 0x8a
 80072a8:	4829      	ldr	r0, [pc, #164]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 80072aa:	f7fa fca7 	bl	8001bfc <EF_PutString>
 80072ae:	e044      	b.n	800733a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80072b0:	88fb      	ldrh	r3, [r7, #6]
 80072b2:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80072b6:	d940      	bls.n	800733a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 80072b8:	88fb      	ldrh	r3, [r7, #6]
 80072ba:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80072be:	d23c      	bcs.n	800733a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule2 < 49)
 80072c0:	4b25      	ldr	r3, [pc, #148]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b30      	cmp	r3, #48	; 0x30
 80072c6:	d806      	bhi.n	80072d6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 80072c8:	4b23      	ldr	r3, [pc, #140]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	330a      	adds	r3, #10
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	4b21      	ldr	r3, [pc, #132]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	e012      	b.n	80072fc <MenuTFTSchedule2ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 80072d6:	4b20      	ldr	r3, [pc, #128]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	f103 020a 	add.w	r2, r3, #10
 80072de:	4b1f      	ldr	r3, [pc, #124]	; (800735c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x190>)
 80072e0:	fb83 1302 	smull	r1, r3, r3, r2
 80072e4:	4413      	add	r3, r2
 80072e6:	1159      	asrs	r1, r3, #5
 80072e8:	17d3      	asrs	r3, r2, #31
 80072ea:	1ac9      	subs	r1, r1, r3
 80072ec:	460b      	mov	r3, r1
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	1a5b      	subs	r3, r3, r1
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	1ad1      	subs	r1, r2, r3
 80072f6:	b2ca      	uxtb	r2, r1
 80072f8:	4b17      	ldr	r3, [pc, #92]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072fa:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 80072fc:	4b16      	ldr	r3, [pc, #88]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b09      	cmp	r3, #9
 8007302:	d907      	bls.n	8007314 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x148>
 8007304:	4b14      	ldr	r3, [pc, #80]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	4910      	ldr	r1, [pc, #64]	; (800734c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 800730c:	4810      	ldr	r0, [pc, #64]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800730e:	f00a fcaf 	bl	8011c70 <siprintf>
 8007312:	e006      	b.n	8007322 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007314:	4b10      	ldr	r3, [pc, #64]	; (8007358 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	461a      	mov	r2, r3
 800731a:	490e      	ldr	r1, [pc, #56]	; (8007354 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 800731c:	480c      	ldr	r0, [pc, #48]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 800731e:	f00a fca7 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007322:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	2301      	movs	r3, #1
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	2300      	movs	r3, #0
 800732e:	2264      	movs	r2, #100	; 0x64
 8007330:	218a      	movs	r1, #138	; 0x8a
 8007332:	4807      	ldr	r0, [pc, #28]	; (8007350 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007334:	f7fa fc62 	bl	8001bfc <EF_PutString>
	}
}
 8007338:	e7ff      	b.n	800733a <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	080293e8 	.word	0x080293e8
 8007348:	20000285 	.word	0x20000285
 800734c:	08015e44 	.word	0x08015e44
 8007350:	200002c0 	.word	0x200002c0
 8007354:	08015e4c 	.word	0x08015e4c
 8007358:	20000287 	.word	0x20000287
 800735c:	88888889 	.word	0x88888889

08007360 <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af02      	add	r7, sp, #8
 8007366:	4603      	mov	r3, r0
 8007368:	460a      	mov	r2, r1
 800736a:	80fb      	strh	r3, [r7, #6]
 800736c:	4613      	mov	r3, r2
 800736e:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007370:	4859      	ldr	r0, [pc, #356]	; (80074d8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x178>)
 8007372:	f7fa fa29 	bl	80017c8 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	2bba      	cmp	r3, #186	; 0xba
 800737a:	d92f      	bls.n	80073dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	2bdd      	cmp	r3, #221	; 0xdd
 8007380:	d82c      	bhi.n	80073dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule2 < 24)
 8007382:	4b56      	ldr	r3, [pc, #344]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b17      	cmp	r3, #23
 8007388:	d806      	bhi.n	8007398 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule2++;
 800738a:	4b54      	ldr	r3, [pc, #336]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	3301      	adds	r3, #1
 8007390:	b2da      	uxtb	r2, r3
 8007392:	4b52      	ldr	r3, [pc, #328]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	e002      	b.n	800739e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule2 = 1;
 8007398:	4b50      	ldr	r3, [pc, #320]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 800739a:	2201      	movs	r2, #1
 800739c:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 800739e:	4b4f      	ldr	r3, [pc, #316]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	2b09      	cmp	r3, #9
 80073a4:	d907      	bls.n	80073b6 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x56>
 80073a6:	4b4d      	ldr	r3, [pc, #308]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	494c      	ldr	r1, [pc, #304]	; (80074e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 80073ae:	484d      	ldr	r0, [pc, #308]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80073b0:	f00a fc5e 	bl	8011c70 <siprintf>
 80073b4:	e006      	b.n	80073c4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 80073b6:	4b49      	ldr	r3, [pc, #292]	; (80074dc <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	494a      	ldr	r1, [pc, #296]	; (80074e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 80073be:	4849      	ldr	r0, [pc, #292]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80073c0:	f00a fc56 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80073c4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	2301      	movs	r3, #1
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	2300      	movs	r3, #0
 80073d0:	2287      	movs	r2, #135	; 0x87
 80073d2:	2150      	movs	r1, #80	; 0x50
 80073d4:	4843      	ldr	r0, [pc, #268]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80073d6:	f7fa fc11 	bl	8001bfc <EF_PutString>
 80073da:	e078      	b.n	80074ce <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80073dc:	88fb      	ldrh	r3, [r7, #6]
 80073de:	2be8      	cmp	r3, #232	; 0xe8
 80073e0:	d930      	bls.n	8007444 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80073e8:	d22c      	bcs.n	8007444 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule2 < 59)
 80073ea:	4b40      	ldr	r3, [pc, #256]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b3a      	cmp	r3, #58	; 0x3a
 80073f0:	d806      	bhi.n	8007400 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule2++;
 80073f2:	4b3e      	ldr	r3, [pc, #248]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	3301      	adds	r3, #1
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	4b3c      	ldr	r3, [pc, #240]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	e002      	b.n	8007406 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule2 = 0;
 8007400:	4b3a      	ldr	r3, [pc, #232]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007406:	4b39      	ldr	r3, [pc, #228]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	2b09      	cmp	r3, #9
 800740c:	d907      	bls.n	800741e <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xbe>
 800740e:	4b37      	ldr	r3, [pc, #220]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	4932      	ldr	r1, [pc, #200]	; (80074e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007416:	4833      	ldr	r0, [pc, #204]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007418:	f00a fc2a 	bl	8011c70 <siprintf>
 800741c:	e006      	b.n	800742c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 800741e:	4b33      	ldr	r3, [pc, #204]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	4930      	ldr	r1, [pc, #192]	; (80074e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007426:	482f      	ldr	r0, [pc, #188]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007428:	f00a fc22 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800742c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007430:	9301      	str	r3, [sp, #4]
 8007432:	2301      	movs	r3, #1
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	2300      	movs	r3, #0
 8007438:	2287      	movs	r2, #135	; 0x87
 800743a:	218a      	movs	r1, #138	; 0x8a
 800743c:	4829      	ldr	r0, [pc, #164]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 800743e:	f7fa fbdd 	bl	8001bfc <EF_PutString>
 8007442:	e044      	b.n	80074ce <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007444:	88fb      	ldrh	r3, [r7, #6]
 8007446:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800744a:	d940      	bls.n	80074ce <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007452:	d23c      	bcs.n	80074ce <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule2 < 49)
 8007454:	4b25      	ldr	r3, [pc, #148]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b30      	cmp	r3, #48	; 0x30
 800745a:	d806      	bhi.n	800746a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 800745c:	4b23      	ldr	r3, [pc, #140]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	330a      	adds	r3, #10
 8007462:	b2da      	uxtb	r2, r3
 8007464:	4b21      	ldr	r3, [pc, #132]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	e012      	b.n	8007490 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 800746a:	4b20      	ldr	r3, [pc, #128]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	f103 020a 	add.w	r2, r3, #10
 8007472:	4b1f      	ldr	r3, [pc, #124]	; (80074f0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x190>)
 8007474:	fb83 1302 	smull	r1, r3, r3, r2
 8007478:	4413      	add	r3, r2
 800747a:	1159      	asrs	r1, r3, #5
 800747c:	17d3      	asrs	r3, r2, #31
 800747e:	1ac9      	subs	r1, r1, r3
 8007480:	460b      	mov	r3, r1
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	1a5b      	subs	r3, r3, r1
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	1ad1      	subs	r1, r2, r3
 800748a:	b2ca      	uxtb	r2, r1
 800748c:	4b17      	ldr	r3, [pc, #92]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800748e:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007490:	4b16      	ldr	r3, [pc, #88]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	2b09      	cmp	r3, #9
 8007496:	d907      	bls.n	80074a8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x148>
 8007498:	4b14      	ldr	r3, [pc, #80]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	4910      	ldr	r1, [pc, #64]	; (80074e0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 80074a0:	4810      	ldr	r0, [pc, #64]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80074a2:	f00a fbe5 	bl	8011c70 <siprintf>
 80074a6:	e006      	b.n	80074b6 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 80074a8:	4b10      	ldr	r3, [pc, #64]	; (80074ec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	490e      	ldr	r1, [pc, #56]	; (80074e8 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 80074b0:	480c      	ldr	r0, [pc, #48]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80074b2:	f00a fbdd 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80074b6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	2301      	movs	r3, #1
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	2300      	movs	r3, #0
 80074c2:	2287      	movs	r2, #135	; 0x87
 80074c4:	218a      	movs	r1, #138	; 0x8a
 80074c6:	4807      	ldr	r0, [pc, #28]	; (80074e4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 80074c8:	f7fa fb98 	bl	8001bfc <EF_PutString>
	}
}
 80074cc:	e7ff      	b.n	80074ce <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	080293e8 	.word	0x080293e8
 80074dc:	20000286 	.word	0x20000286
 80074e0:	08015e44 	.word	0x08015e44
 80074e4:	200002c0 	.word	0x200002c0
 80074e8:	08015e4c 	.word	0x08015e4c
 80074ec:	20000288 	.word	0x20000288
 80074f0:	88888889 	.word	0x88888889

080074f4 <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4603      	mov	r3, r0
 80074fc:	460a      	mov	r2, r1
 80074fe:	80fb      	strh	r3, [r7, #6]
 8007500:	4613      	mov	r3, r2
 8007502:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007504:	88fb      	ldrh	r3, [r7, #6]
 8007506:	2b14      	cmp	r3, #20
 8007508:	d919      	bls.n	800753e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 800750a:	88fb      	ldrh	r3, [r7, #6]
 800750c:	2b29      	cmp	r3, #41	; 0x29
 800750e:	d816      	bhi.n	800753e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8007510:	4b82      	ldr	r3, [pc, #520]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d004      	beq.n	8007522 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 8007518:	2100      	movs	r1, #0
 800751a:	2001      	movs	r0, #1
 800751c:	f7ff fac5 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007520:	e003      	b.n	800752a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8007522:	2101      	movs	r1, #1
 8007524:	2001      	movs	r0, #1
 8007526:	f7ff fac0 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 800752a:	4b7c      	ldr	r3, [pc, #496]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	bf0c      	ite	eq
 8007532:	2301      	moveq	r3, #1
 8007534:	2300      	movne	r3, #0
 8007536:	b2db      	uxtb	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	4b78      	ldr	r3, [pc, #480]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800753c:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	2b34      	cmp	r3, #52	; 0x34
 8007542:	d919      	bls.n	8007578 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	2b49      	cmp	r3, #73	; 0x49
 8007548:	d816      	bhi.n	8007578 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 800754a:	4b74      	ldr	r3, [pc, #464]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d004      	beq.n	800755c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 8007552:	2100      	movs	r1, #0
 8007554:	2002      	movs	r0, #2
 8007556:	f7ff faa8 	bl	8006aaa <changeTFTScheduleRelayLights>
 800755a:	e003      	b.n	8007564 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 800755c:	2101      	movs	r1, #1
 800755e:	2002      	movs	r0, #2
 8007560:	f7ff faa3 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007564:	4b6d      	ldr	r3, [pc, #436]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	2b00      	cmp	r3, #0
 800756a:	bf0c      	ite	eq
 800756c:	2301      	moveq	r3, #1
 800756e:	2300      	movne	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	461a      	mov	r2, r3
 8007574:	4b69      	ldr	r3, [pc, #420]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007576:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007578:	88fb      	ldrh	r3, [r7, #6]
 800757a:	2b54      	cmp	r3, #84	; 0x54
 800757c:	d919      	bls.n	80075b2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	2b69      	cmp	r3, #105	; 0x69
 8007582:	d816      	bhi.n	80075b2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007584:	4b65      	ldr	r3, [pc, #404]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007586:	789b      	ldrb	r3, [r3, #2]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 800758c:	2100      	movs	r1, #0
 800758e:	2003      	movs	r0, #3
 8007590:	f7ff fa8b 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007594:	e003      	b.n	800759e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007596:	2101      	movs	r1, #1
 8007598:	2003      	movs	r0, #3
 800759a:	f7ff fa86 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 800759e:	4b5f      	ldr	r3, [pc, #380]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075a0:	789b      	ldrb	r3, [r3, #2]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bf0c      	ite	eq
 80075a6:	2301      	moveq	r3, #1
 80075a8:	2300      	movne	r3, #0
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	4b5b      	ldr	r3, [pc, #364]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075b0:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80075b2:	88fb      	ldrh	r3, [r7, #6]
 80075b4:	2b74      	cmp	r3, #116	; 0x74
 80075b6:	d919      	bls.n	80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 80075b8:	88fb      	ldrh	r3, [r7, #6]
 80075ba:	2b89      	cmp	r3, #137	; 0x89
 80075bc:	d816      	bhi.n	80075ec <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80075be:	4b57      	ldr	r3, [pc, #348]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075c0:	78db      	ldrb	r3, [r3, #3]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d004      	beq.n	80075d0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 80075c6:	2100      	movs	r1, #0
 80075c8:	2004      	movs	r0, #4
 80075ca:	f7ff fa6e 	bl	8006aaa <changeTFTScheduleRelayLights>
 80075ce:	e003      	b.n	80075d8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80075d0:	2101      	movs	r1, #1
 80075d2:	2004      	movs	r0, #4
 80075d4:	f7ff fa69 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 80075d8:	4b50      	ldr	r3, [pc, #320]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075da:	78db      	ldrb	r3, [r3, #3]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	bf0c      	ite	eq
 80075e0:	2301      	moveq	r3, #1
 80075e2:	2300      	movne	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	4b4c      	ldr	r3, [pc, #304]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075ea:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	2b94      	cmp	r3, #148	; 0x94
 80075f0:	d919      	bls.n	8007626 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 80075f2:	88fb      	ldrh	r3, [r7, #6]
 80075f4:	2ba9      	cmp	r3, #169	; 0xa9
 80075f6:	d816      	bhi.n	8007626 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 80075f8:	4b48      	ldr	r3, [pc, #288]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80075fa:	791b      	ldrb	r3, [r3, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d004      	beq.n	800760a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 8007600:	2100      	movs	r1, #0
 8007602:	2005      	movs	r0, #5
 8007604:	f7ff fa51 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007608:	e003      	b.n	8007612 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 800760a:	2101      	movs	r1, #1
 800760c:	2005      	movs	r0, #5
 800760e:	f7ff fa4c 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 8007612:	4b42      	ldr	r3, [pc, #264]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007614:	791b      	ldrb	r3, [r3, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	bf0c      	ite	eq
 800761a:	2301      	moveq	r3, #1
 800761c:	2300      	movne	r3, #0
 800761e:	b2db      	uxtb	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	4b3e      	ldr	r3, [pc, #248]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007624:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007626:	88fb      	ldrh	r3, [r7, #6]
 8007628:	2bb4      	cmp	r3, #180	; 0xb4
 800762a:	d919      	bls.n	8007660 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 800762c:	88fb      	ldrh	r3, [r7, #6]
 800762e:	2bc9      	cmp	r3, #201	; 0xc9
 8007630:	d816      	bhi.n	8007660 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 8007632:	4b3a      	ldr	r3, [pc, #232]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007634:	795b      	ldrb	r3, [r3, #5]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 800763a:	2100      	movs	r1, #0
 800763c:	2006      	movs	r0, #6
 800763e:	f7ff fa34 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007642:	e003      	b.n	800764c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007644:	2101      	movs	r1, #1
 8007646:	2006      	movs	r0, #6
 8007648:	f7ff fa2f 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 800764c:	4b33      	ldr	r3, [pc, #204]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800764e:	795b      	ldrb	r3, [r3, #5]
 8007650:	2b00      	cmp	r3, #0
 8007652:	bf0c      	ite	eq
 8007654:	2301      	moveq	r3, #1
 8007656:	2300      	movne	r3, #0
 8007658:	b2db      	uxtb	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	4b2f      	ldr	r3, [pc, #188]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800765e:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	2bd4      	cmp	r3, #212	; 0xd4
 8007664:	d919      	bls.n	800769a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 8007666:	88fb      	ldrh	r3, [r7, #6]
 8007668:	2be9      	cmp	r3, #233	; 0xe9
 800766a:	d816      	bhi.n	800769a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 800766c:	4b2b      	ldr	r3, [pc, #172]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800766e:	799b      	ldrb	r3, [r3, #6]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d004      	beq.n	800767e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 8007674:	2100      	movs	r1, #0
 8007676:	2007      	movs	r0, #7
 8007678:	f7ff fa17 	bl	8006aaa <changeTFTScheduleRelayLights>
 800767c:	e003      	b.n	8007686 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 800767e:	2101      	movs	r1, #1
 8007680:	2007      	movs	r0, #7
 8007682:	f7ff fa12 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 8007686:	4b25      	ldr	r3, [pc, #148]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007688:	799b      	ldrb	r3, [r3, #6]
 800768a:	2b00      	cmp	r3, #0
 800768c:	bf0c      	ite	eq
 800768e:	2301      	moveq	r3, #1
 8007690:	2300      	movne	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	4b21      	ldr	r3, [pc, #132]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007698:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	2bf4      	cmp	r3, #244	; 0xf4
 800769e:	d91a      	bls.n	80076d6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80076a6:	d216      	bcs.n	80076d6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80076a8:	4b1c      	ldr	r3, [pc, #112]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076aa:	79db      	ldrb	r3, [r3, #7]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d004      	beq.n	80076ba <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 80076b0:	2100      	movs	r1, #0
 80076b2:	2008      	movs	r0, #8
 80076b4:	f7ff f9f9 	bl	8006aaa <changeTFTScheduleRelayLights>
 80076b8:	e003      	b.n	80076c2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80076ba:	2101      	movs	r1, #1
 80076bc:	2008      	movs	r0, #8
 80076be:	f7ff f9f4 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 80076c2:	4b16      	ldr	r3, [pc, #88]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076c4:	79db      	ldrb	r3, [r3, #7]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bf0c      	ite	eq
 80076ca:	2301      	moveq	r3, #1
 80076cc:	2300      	movne	r3, #0
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	4b12      	ldr	r3, [pc, #72]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076d4:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 80076dc:	d91a      	bls.n	8007714 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80076e4:	d216      	bcs.n	8007714 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 80076e6:	4b0d      	ldr	r3, [pc, #52]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80076e8:	7a1b      	ldrb	r3, [r3, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d004      	beq.n	80076f8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 80076ee:	2100      	movs	r1, #0
 80076f0:	2009      	movs	r0, #9
 80076f2:	f7ff f9da 	bl	8006aaa <changeTFTScheduleRelayLights>
 80076f6:	e003      	b.n	8007700 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 80076f8:	2101      	movs	r1, #1
 80076fa:	2009      	movs	r0, #9
 80076fc:	f7ff f9d5 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8007700:	4b06      	ldr	r3, [pc, #24]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007702:	7a1b      	ldrb	r3, [r3, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	bf0c      	ite	eq
 8007708:	2301      	moveq	r3, #1
 800770a:	2300      	movne	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	461a      	mov	r2, r3
 8007710:	4b02      	ldr	r3, [pc, #8]	; (800771c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007712:	721a      	strb	r2, [r3, #8]
	}

}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000264 	.word	0x20000264

08007720 <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	460a      	mov	r2, r1
 800772a:	80fb      	strh	r3, [r7, #6]
 800772c:	4613      	mov	r3, r2
 800772e:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007730:	88fb      	ldrh	r3, [r7, #6]
 8007732:	2b14      	cmp	r3, #20
 8007734:	d919      	bls.n	800776a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 8007736:	88fb      	ldrh	r3, [r7, #6]
 8007738:	2b29      	cmp	r3, #41	; 0x29
 800773a:	d816      	bhi.n	800776a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 800773c:	4b82      	ldr	r3, [pc, #520]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d004      	beq.n	800774e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 8007744:	2100      	movs	r1, #0
 8007746:	2001      	movs	r0, #1
 8007748:	f7ff f9af 	bl	8006aaa <changeTFTScheduleRelayLights>
 800774c:	e003      	b.n	8007756 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 800774e:	2101      	movs	r1, #1
 8007750:	2001      	movs	r0, #1
 8007752:	f7ff f9aa 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007756:	4b7c      	ldr	r3, [pc, #496]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	bf0c      	ite	eq
 800775e:	2301      	moveq	r3, #1
 8007760:	2300      	movne	r3, #0
 8007762:	b2db      	uxtb	r3, r3
 8007764:	461a      	mov	r2, r3
 8007766:	4b78      	ldr	r3, [pc, #480]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007768:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	2b34      	cmp	r3, #52	; 0x34
 800776e:	d919      	bls.n	80077a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 8007770:	88fb      	ldrh	r3, [r7, #6]
 8007772:	2b49      	cmp	r3, #73	; 0x49
 8007774:	d816      	bhi.n	80077a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007776:	4b74      	ldr	r3, [pc, #464]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d004      	beq.n	8007788 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 800777e:	2100      	movs	r1, #0
 8007780:	2002      	movs	r0, #2
 8007782:	f7ff f992 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007786:	e003      	b.n	8007790 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007788:	2101      	movs	r1, #1
 800778a:	2002      	movs	r0, #2
 800778c:	f7ff f98d 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007790:	4b6d      	ldr	r3, [pc, #436]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	2b00      	cmp	r3, #0
 8007796:	bf0c      	ite	eq
 8007798:	2301      	moveq	r3, #1
 800779a:	2300      	movne	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	461a      	mov	r2, r3
 80077a0:	4b69      	ldr	r3, [pc, #420]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077a2:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	2b54      	cmp	r3, #84	; 0x54
 80077a8:	d919      	bls.n	80077de <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	2b69      	cmp	r3, #105	; 0x69
 80077ae:	d816      	bhi.n	80077de <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 80077b0:	4b65      	ldr	r3, [pc, #404]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077b2:	789b      	ldrb	r3, [r3, #2]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 80077b8:	2100      	movs	r1, #0
 80077ba:	2003      	movs	r0, #3
 80077bc:	f7ff f975 	bl	8006aaa <changeTFTScheduleRelayLights>
 80077c0:	e003      	b.n	80077ca <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 80077c2:	2101      	movs	r1, #1
 80077c4:	2003      	movs	r0, #3
 80077c6:	f7ff f970 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 80077ca:	4b5f      	ldr	r3, [pc, #380]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077cc:	789b      	ldrb	r3, [r3, #2]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	bf0c      	ite	eq
 80077d2:	2301      	moveq	r3, #1
 80077d4:	2300      	movne	r3, #0
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	4b5b      	ldr	r3, [pc, #364]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077dc:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	2b74      	cmp	r3, #116	; 0x74
 80077e2:	d919      	bls.n	8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 80077e4:	88fb      	ldrh	r3, [r7, #6]
 80077e6:	2b89      	cmp	r3, #137	; 0x89
 80077e8:	d816      	bhi.n	8007818 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 80077ea:	4b57      	ldr	r3, [pc, #348]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80077ec:	78db      	ldrb	r3, [r3, #3]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d004      	beq.n	80077fc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 80077f2:	2100      	movs	r1, #0
 80077f4:	2004      	movs	r0, #4
 80077f6:	f7ff f958 	bl	8006aaa <changeTFTScheduleRelayLights>
 80077fa:	e003      	b.n	8007804 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 80077fc:	2101      	movs	r1, #1
 80077fe:	2004      	movs	r0, #4
 8007800:	f7ff f953 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8007804:	4b50      	ldr	r3, [pc, #320]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007806:	78db      	ldrb	r3, [r3, #3]
 8007808:	2b00      	cmp	r3, #0
 800780a:	bf0c      	ite	eq
 800780c:	2301      	moveq	r3, #1
 800780e:	2300      	movne	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	4b4c      	ldr	r3, [pc, #304]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007816:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	2b94      	cmp	r3, #148	; 0x94
 800781c:	d919      	bls.n	8007852 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	2ba9      	cmp	r3, #169	; 0xa9
 8007822:	d816      	bhi.n	8007852 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8007824:	4b48      	ldr	r3, [pc, #288]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007826:	791b      	ldrb	r3, [r3, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 800782c:	2100      	movs	r1, #0
 800782e:	2005      	movs	r0, #5
 8007830:	f7ff f93b 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007834:	e003      	b.n	800783e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8007836:	2101      	movs	r1, #1
 8007838:	2005      	movs	r0, #5
 800783a:	f7ff f936 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 800783e:	4b42      	ldr	r3, [pc, #264]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007840:	791b      	ldrb	r3, [r3, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	bf0c      	ite	eq
 8007846:	2301      	moveq	r3, #1
 8007848:	2300      	movne	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	4b3e      	ldr	r3, [pc, #248]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007850:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	2bb4      	cmp	r3, #180	; 0xb4
 8007856:	d919      	bls.n	800788c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	2bc9      	cmp	r3, #201	; 0xc9
 800785c:	d816      	bhi.n	800788c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 800785e:	4b3a      	ldr	r3, [pc, #232]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007860:	795b      	ldrb	r3, [r3, #5]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 8007866:	2100      	movs	r1, #0
 8007868:	2006      	movs	r0, #6
 800786a:	f7ff f91e 	bl	8006aaa <changeTFTScheduleRelayLights>
 800786e:	e003      	b.n	8007878 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 8007870:	2101      	movs	r1, #1
 8007872:	2006      	movs	r0, #6
 8007874:	f7ff f919 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 8007878:	4b33      	ldr	r3, [pc, #204]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800787a:	795b      	ldrb	r3, [r3, #5]
 800787c:	2b00      	cmp	r3, #0
 800787e:	bf0c      	ite	eq
 8007880:	2301      	moveq	r3, #1
 8007882:	2300      	movne	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	4b2f      	ldr	r3, [pc, #188]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800788a:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	2bd4      	cmp	r3, #212	; 0xd4
 8007890:	d919      	bls.n	80078c6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	2be9      	cmp	r3, #233	; 0xe9
 8007896:	d816      	bhi.n	80078c6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 8007898:	4b2b      	ldr	r3, [pc, #172]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800789a:	799b      	ldrb	r3, [r3, #6]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d004      	beq.n	80078aa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 80078a0:	2100      	movs	r1, #0
 80078a2:	2007      	movs	r0, #7
 80078a4:	f7ff f901 	bl	8006aaa <changeTFTScheduleRelayLights>
 80078a8:	e003      	b.n	80078b2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 80078aa:	2101      	movs	r1, #1
 80078ac:	2007      	movs	r0, #7
 80078ae:	f7ff f8fc 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 80078b2:	4b25      	ldr	r3, [pc, #148]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078b4:	799b      	ldrb	r3, [r3, #6]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	bf0c      	ite	eq
 80078ba:	2301      	moveq	r3, #1
 80078bc:	2300      	movne	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	461a      	mov	r2, r3
 80078c2:	4b21      	ldr	r3, [pc, #132]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078c4:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 80078c6:	88fb      	ldrh	r3, [r7, #6]
 80078c8:	2bf4      	cmp	r3, #244	; 0xf4
 80078ca:	d91a      	bls.n	8007902 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 80078cc:	88fb      	ldrh	r3, [r7, #6]
 80078ce:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80078d2:	d216      	bcs.n	8007902 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 80078d4:	4b1c      	ldr	r3, [pc, #112]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078d6:	79db      	ldrb	r3, [r3, #7]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d004      	beq.n	80078e6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 80078dc:	2100      	movs	r1, #0
 80078de:	2008      	movs	r0, #8
 80078e0:	f7ff f8e3 	bl	8006aaa <changeTFTScheduleRelayLights>
 80078e4:	e003      	b.n	80078ee <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 80078e6:	2101      	movs	r1, #1
 80078e8:	2008      	movs	r0, #8
 80078ea:	f7ff f8de 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 80078ee:	4b16      	ldr	r3, [pc, #88]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80078f0:	79db      	ldrb	r3, [r3, #7]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	bf0c      	ite	eq
 80078f6:	2301      	moveq	r3, #1
 80078f8:	2300      	movne	r3, #0
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	4b12      	ldr	r3, [pc, #72]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007900:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8007908:	d91a      	bls.n	8007940 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007910:	d216      	bcs.n	8007940 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8007912:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8007914:	7a1b      	ldrb	r3, [r3, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d004      	beq.n	8007924 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 800791a:	2100      	movs	r1, #0
 800791c:	2009      	movs	r0, #9
 800791e:	f7ff f8c4 	bl	8006aaa <changeTFTScheduleRelayLights>
 8007922:	e003      	b.n	800792c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8007924:	2101      	movs	r1, #1
 8007926:	2009      	movs	r0, #9
 8007928:	f7ff f8bf 	bl	8006aaa <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800792e:	7a1b      	ldrb	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	bf0c      	ite	eq
 8007934:	2301      	moveq	r3, #1
 8007936:	2300      	movne	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	4b02      	ldr	r3, [pc, #8]	; (8007948 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800793e:	721a      	strb	r2, [r3, #8]
	}
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	20000278 	.word	0x20000278

0800794c <updateAllSchedulesInfo>:

//
//Read All info about schedules
void updateAllSchedulesInfo(uint8_t NrOfSchedule)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	71fb      	strb	r3, [r7, #7]
	if( 1 == NrOfSchedule)
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d118      	bne.n	800798e <updateAllSchedulesInfo+0x42>
	{
	  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 800795c:	491b      	ldr	r1, [pc, #108]	; (80079cc <updateAllSchedulesInfo+0x80>)
 800795e:	2001      	movs	r0, #1
 8007960:	f7fb fb37 	bl	8002fd2 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 8007964:	491a      	ldr	r1, [pc, #104]	; (80079d0 <updateAllSchedulesInfo+0x84>)
 8007966:	2001      	movs	r0, #1
 8007968:	f7fb fb57 	bl	800301a <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 800796c:	4919      	ldr	r1, [pc, #100]	; (80079d4 <updateAllSchedulesInfo+0x88>)
 800796e:	2001      	movs	r0, #1
 8007970:	f7fb fb77 	bl	8003062 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 8007974:	4918      	ldr	r1, [pc, #96]	; (80079d8 <updateAllSchedulesInfo+0x8c>)
 8007976:	2001      	movs	r0, #1
 8007978:	f7fb fb97 	bl	80030aa <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 800797c:	4917      	ldr	r1, [pc, #92]	; (80079dc <updateAllSchedulesInfo+0x90>)
 800797e:	2001      	movs	r0, #1
 8007980:	f7fb f9d6 	bl	8002d30 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8007984:	4916      	ldr	r1, [pc, #88]	; (80079e0 <updateAllSchedulesInfo+0x94>)
 8007986:	2001      	movs	r0, #1
 8007988:	f7fb fa4e 	bl	8002e28 <EEPROM_ScheduleRelayAndSwitchTabRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
	}

}
 800798c:	e01a      	b.n	80079c4 <updateAllSchedulesInfo+0x78>
	else if ( 2 == NrOfSchedule)
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	2b02      	cmp	r3, #2
 8007992:	d117      	bne.n	80079c4 <updateAllSchedulesInfo+0x78>
	  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 8007994:	4913      	ldr	r1, [pc, #76]	; (80079e4 <updateAllSchedulesInfo+0x98>)
 8007996:	2002      	movs	r0, #2
 8007998:	f7fb fb1b 	bl	8002fd2 <EEPROM_ScheduleHourOnRead>
	  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 800799c:	4912      	ldr	r1, [pc, #72]	; (80079e8 <updateAllSchedulesInfo+0x9c>)
 800799e:	2002      	movs	r0, #2
 80079a0:	f7fb fb3b 	bl	800301a <EEPROM_ScheduleMinuteOnRead>
	  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 80079a4:	4911      	ldr	r1, [pc, #68]	; (80079ec <updateAllSchedulesInfo+0xa0>)
 80079a6:	2002      	movs	r0, #2
 80079a8:	f7fb fb5b 	bl	8003062 <EEPROM_ScheduleHourOffRead>
	  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 80079ac:	4910      	ldr	r1, [pc, #64]	; (80079f0 <updateAllSchedulesInfo+0xa4>)
 80079ae:	2002      	movs	r0, #2
 80079b0:	f7fb fb7b 	bl	80030aa <EEPROM_ScheduleMinuteOffRead>
	  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 80079b4:	4909      	ldr	r1, [pc, #36]	; (80079dc <updateAllSchedulesInfo+0x90>)
 80079b6:	2002      	movs	r0, #2
 80079b8:	f7fb f9ba 	bl	8002d30 <EEPROM_ScheduleDayInWeekRead>
	  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 80079bc:	4908      	ldr	r1, [pc, #32]	; (80079e0 <updateAllSchedulesInfo+0x94>)
 80079be:	2002      	movs	r0, #2
 80079c0:	f7fb fa32 	bl	8002e28 <EEPROM_ScheduleRelayAndSwitchTabRead>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000281 	.word	0x20000281
 80079d0:	20000283 	.word	0x20000283
 80079d4:	20000282 	.word	0x20000282
 80079d8:	20000284 	.word	0x20000284
 80079dc:	2000025c 	.word	0x2000025c
 80079e0:	20000264 	.word	0x20000264
 80079e4:	20000285 	.word	0x20000285
 80079e8:	20000287 	.word	0x20000287
 80079ec:	20000286 	.word	0x20000286
 80079f0:	20000288 	.word	0x20000288

080079f4 <clockIncreaseOneHourAndMinute>:

//
// Functions to update Hour and Minute after touch
//
void clockIncreaseOneHourAndMinute(uint16_t x, uint16_t y)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	4603      	mov	r3, r0
 80079fc:	460a      	mov	r2, r1
 80079fe:	80fb      	strh	r3, [r7, #6]
 8007a00:	4613      	mov	r3, r2
 8007a02:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8007a04:	88bb      	ldrh	r3, [r7, #4]
 8007a06:	2b4a      	cmp	r3, #74	; 0x4a
 8007a08:	d923      	bls.n	8007a52 <clockIncreaseOneHourAndMinute+0x5e>
 8007a0a:	88bb      	ldrh	r3, [r7, #4]
 8007a0c:	2b60      	cmp	r3, #96	; 0x60
 8007a0e:	d820      	bhi.n	8007a52 <clockIncreaseOneHourAndMinute+0x5e>
	{
		if(Hours < 24)
 8007a10:	4b39      	ldr	r3, [pc, #228]	; (8007af8 <clockIncreaseOneHourAndMinute+0x104>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b17      	cmp	r3, #23
 8007a16:	d806      	bhi.n	8007a26 <clockIncreaseOneHourAndMinute+0x32>
		{
			Hours++;
 8007a18:	4b37      	ldr	r3, [pc, #220]	; (8007af8 <clockIncreaseOneHourAndMinute+0x104>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	4b35      	ldr	r3, [pc, #212]	; (8007af8 <clockIncreaseOneHourAndMinute+0x104>)
 8007a22:	701a      	strb	r2, [r3, #0]
 8007a24:	e002      	b.n	8007a2c <clockIncreaseOneHourAndMinute+0x38>
		}
		else
		{
			Hours = 1;
 8007a26:	4b34      	ldr	r3, [pc, #208]	; (8007af8 <clockIncreaseOneHourAndMinute+0x104>)
 8007a28:	2201      	movs	r2, #1
 8007a2a:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 8007a2c:	4b32      	ldr	r3, [pc, #200]	; (8007af8 <clockIncreaseOneHourAndMinute+0x104>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	4932      	ldr	r1, [pc, #200]	; (8007afc <clockIncreaseOneHourAndMinute+0x108>)
 8007a34:	4832      	ldr	r0, [pc, #200]	; (8007b00 <clockIncreaseOneHourAndMinute+0x10c>)
 8007a36:	f00a f91b 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a3a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	2301      	movs	r3, #1
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2300      	movs	r3, #0
 8007a46:	2246      	movs	r2, #70	; 0x46
 8007a48:	21a0      	movs	r1, #160	; 0xa0
 8007a4a:	482d      	ldr	r0, [pc, #180]	; (8007b00 <clockIncreaseOneHourAndMinute+0x10c>)
 8007a4c:	f7fa f8d6 	bl	8001bfc <EF_PutString>
 8007a50:	e04d      	b.n	8007aee <clockIncreaseOneHourAndMinute+0xfa>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 8007a52:	88bb      	ldrh	r3, [r7, #4]
 8007a54:	2b72      	cmp	r3, #114	; 0x72
 8007a56:	d923      	bls.n	8007aa0 <clockIncreaseOneHourAndMinute+0xac>
 8007a58:	88bb      	ldrh	r3, [r7, #4]
 8007a5a:	2b88      	cmp	r3, #136	; 0x88
 8007a5c:	d820      	bhi.n	8007aa0 <clockIncreaseOneHourAndMinute+0xac>
	{
		if(Minutes < 59)
 8007a5e:	4b29      	ldr	r3, [pc, #164]	; (8007b04 <clockIncreaseOneHourAndMinute+0x110>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b3a      	cmp	r3, #58	; 0x3a
 8007a64:	d806      	bhi.n	8007a74 <clockIncreaseOneHourAndMinute+0x80>
		{
			Minutes++;
 8007a66:	4b27      	ldr	r3, [pc, #156]	; (8007b04 <clockIncreaseOneHourAndMinute+0x110>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	4b25      	ldr	r3, [pc, #148]	; (8007b04 <clockIncreaseOneHourAndMinute+0x110>)
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	e002      	b.n	8007a7a <clockIncreaseOneHourAndMinute+0x86>
		}
		else
		{
			Minutes = 0;
 8007a74:	4b23      	ldr	r3, [pc, #140]	; (8007b04 <clockIncreaseOneHourAndMinute+0x110>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007a7a:	4b22      	ldr	r3, [pc, #136]	; (8007b04 <clockIncreaseOneHourAndMinute+0x110>)
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	491e      	ldr	r1, [pc, #120]	; (8007afc <clockIncreaseOneHourAndMinute+0x108>)
 8007a82:	481f      	ldr	r0, [pc, #124]	; (8007b00 <clockIncreaseOneHourAndMinute+0x10c>)
 8007a84:	f00a f8f4 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a88:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	2301      	movs	r3, #1
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	2300      	movs	r3, #0
 8007a94:	226e      	movs	r2, #110	; 0x6e
 8007a96:	21a0      	movs	r1, #160	; 0xa0
 8007a98:	4819      	ldr	r0, [pc, #100]	; (8007b00 <clockIncreaseOneHourAndMinute+0x10c>)
 8007a9a:	f7fa f8af 	bl	8001bfc <EF_PutString>
 8007a9e:	e026      	b.n	8007aee <clockIncreaseOneHourAndMinute+0xfa>
	}
	else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8007aa0:	88bb      	ldrh	r3, [r7, #4]
 8007aa2:	2b9a      	cmp	r3, #154	; 0x9a
 8007aa4:	d923      	bls.n	8007aee <clockIncreaseOneHourAndMinute+0xfa>
 8007aa6:	88bb      	ldrh	r3, [r7, #4]
 8007aa8:	2bb0      	cmp	r3, #176	; 0xb0
 8007aaa:	d820      	bhi.n	8007aee <clockIncreaseOneHourAndMinute+0xfa>
	{
		if(DayOfWeek < 7)
 8007aac:	4b16      	ldr	r3, [pc, #88]	; (8007b08 <clockIncreaseOneHourAndMinute+0x114>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b06      	cmp	r3, #6
 8007ab2:	d806      	bhi.n	8007ac2 <clockIncreaseOneHourAndMinute+0xce>
		{
			DayOfWeek++;
 8007ab4:	4b14      	ldr	r3, [pc, #80]	; (8007b08 <clockIncreaseOneHourAndMinute+0x114>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	4b12      	ldr	r3, [pc, #72]	; (8007b08 <clockIncreaseOneHourAndMinute+0x114>)
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	e002      	b.n	8007ac8 <clockIncreaseOneHourAndMinute+0xd4>
		}
		else
		{
			DayOfWeek = 1;
 8007ac2:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <clockIncreaseOneHourAndMinute+0x114>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8007ac8:	4b0f      	ldr	r3, [pc, #60]	; (8007b08 <clockIncreaseOneHourAndMinute+0x114>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	490f      	ldr	r1, [pc, #60]	; (8007b0c <clockIncreaseOneHourAndMinute+0x118>)
 8007ad0:	480b      	ldr	r0, [pc, #44]	; (8007b00 <clockIncreaseOneHourAndMinute+0x10c>)
 8007ad2:	f00a f8cd 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007ad6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007ada:	9301      	str	r3, [sp, #4]
 8007adc:	2301      	movs	r3, #1
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	2296      	movs	r2, #150	; 0x96
 8007ae4:	2114      	movs	r1, #20
 8007ae6:	4806      	ldr	r0, [pc, #24]	; (8007b00 <clockIncreaseOneHourAndMinute+0x10c>)
 8007ae8:	f7fa f888 	bl	8001bfc <EF_PutString>
	}
}
 8007aec:	e7ff      	b.n	8007aee <clockIncreaseOneHourAndMinute+0xfa>
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20000031 	.word	0x20000031
 8007afc:	08015e54 	.word	0x08015e54
 8007b00:	200002c0 	.word	0x200002c0
 8007b04:	20000032 	.word	0x20000032
 8007b08:	20000030 	.word	0x20000030
 8007b0c:	08015e5c 	.word	0x08015e5c

08007b10 <clockIncreaseSixHoursTenMinutes>:

void clockIncreaseSixHoursTenMinutes(uint16_t x, uint16_t y)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af02      	add	r7, sp, #8
 8007b16:	4603      	mov	r3, r0
 8007b18:	460a      	mov	r2, r1
 8007b1a:	80fb      	strh	r3, [r7, #6]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	80bb      	strh	r3, [r7, #4]
	if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8007b20:	88bb      	ldrh	r3, [r7, #4]
 8007b22:	2b4a      	cmp	r3, #74	; 0x4a
 8007b24:	d923      	bls.n	8007b6e <clockIncreaseSixHoursTenMinutes+0x5e>
 8007b26:	88bb      	ldrh	r3, [r7, #4]
 8007b28:	2b60      	cmp	r3, #96	; 0x60
 8007b2a:	d820      	bhi.n	8007b6e <clockIncreaseSixHoursTenMinutes+0x5e>
	{

		if(Hours < 19)
 8007b2c:	4b2e      	ldr	r3, [pc, #184]	; (8007be8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b12      	cmp	r3, #18
 8007b32:	d806      	bhi.n	8007b42 <clockIncreaseSixHoursTenMinutes+0x32>
		{
			Hours = Hours + 6;
 8007b34:	4b2c      	ldr	r3, [pc, #176]	; (8007be8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	3306      	adds	r3, #6
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	4b2a      	ldr	r3, [pc, #168]	; (8007be8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b3e:	701a      	strb	r2, [r3, #0]
 8007b40:	e002      	b.n	8007b48 <clockIncreaseSixHoursTenMinutes+0x38>
		}
		else
		{
			Hours = 1;
 8007b42:	4b29      	ldr	r3, [pc, #164]	; (8007be8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b44:	2201      	movs	r2, #1
 8007b46:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Hours);
 8007b48:	4b27      	ldr	r3, [pc, #156]	; (8007be8 <clockIncreaseSixHoursTenMinutes+0xd8>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	4927      	ldr	r1, [pc, #156]	; (8007bec <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007b50:	4827      	ldr	r0, [pc, #156]	; (8007bf0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007b52:	f00a f88d 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007b56:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007b5a:	9301      	str	r3, [sp, #4]
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	2300      	movs	r3, #0
 8007b62:	2246      	movs	r2, #70	; 0x46
 8007b64:	219d      	movs	r1, #157	; 0x9d
 8007b66:	4822      	ldr	r0, [pc, #136]	; (8007bf0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007b68:	f7fa f848 	bl	8001bfc <EF_PutString>
 8007b6c:	e035      	b.n	8007bda <clockIncreaseSixHoursTenMinutes+0xca>

	}
	else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 8007b6e:	88bb      	ldrh	r3, [r7, #4]
 8007b70:	2b72      	cmp	r3, #114	; 0x72
 8007b72:	d932      	bls.n	8007bda <clockIncreaseSixHoursTenMinutes+0xca>
 8007b74:	88bb      	ldrh	r3, [r7, #4]
 8007b76:	2b88      	cmp	r3, #136	; 0x88
 8007b78:	d82f      	bhi.n	8007bda <clockIncreaseSixHoursTenMinutes+0xca>
	{
		if(Minutes < 49)
 8007b7a:	4b1e      	ldr	r3, [pc, #120]	; (8007bf4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b30      	cmp	r3, #48	; 0x30
 8007b80:	d806      	bhi.n	8007b90 <clockIncreaseSixHoursTenMinutes+0x80>
		{
			Minutes = Minutes +10;
 8007b82:	4b1c      	ldr	r3, [pc, #112]	; (8007bf4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	330a      	adds	r3, #10
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e012      	b.n	8007bb6 <clockIncreaseSixHoursTenMinutes+0xa6>
		}
		else
		{
			Minutes = (Minutes + 10) % 60;
 8007b90:	4b18      	ldr	r3, [pc, #96]	; (8007bf4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	f103 020a 	add.w	r2, r3, #10
 8007b98:	4b17      	ldr	r3, [pc, #92]	; (8007bf8 <clockIncreaseSixHoursTenMinutes+0xe8>)
 8007b9a:	fb83 1302 	smull	r1, r3, r3, r2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	1159      	asrs	r1, r3, #5
 8007ba2:	17d3      	asrs	r3, r2, #31
 8007ba4:	1ac9      	subs	r1, r1, r3
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	011b      	lsls	r3, r3, #4
 8007baa:	1a5b      	subs	r3, r3, r1
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	1ad1      	subs	r1, r2, r3
 8007bb0:	b2ca      	uxtb	r2, r1
 8007bb2:	4b10      	ldr	r3, [pc, #64]	; (8007bf4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007bb4:	701a      	strb	r2, [r3, #0]
		}
		sprintf((char*)Msg, " %d  ", Minutes);
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <clockIncreaseSixHoursTenMinutes+0xe4>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	490b      	ldr	r1, [pc, #44]	; (8007bec <clockIncreaseSixHoursTenMinutes+0xdc>)
 8007bbe:	480c      	ldr	r0, [pc, #48]	; (8007bf0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007bc0:	f00a f856 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007bc4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	2301      	movs	r3, #1
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	226e      	movs	r2, #110	; 0x6e
 8007bd2:	219c      	movs	r1, #156	; 0x9c
 8007bd4:	4806      	ldr	r0, [pc, #24]	; (8007bf0 <clockIncreaseSixHoursTenMinutes+0xe0>)
 8007bd6:	f7fa f811 	bl	8001bfc <EF_PutString>

	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007bda:	4808      	ldr	r0, [pc, #32]	; (8007bfc <clockIncreaseSixHoursTenMinutes+0xec>)
 8007bdc:	f7f9 fdf4 	bl	80017c8 <EF_SetFont>
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000031 	.word	0x20000031
 8007bec:	08015e54 	.word	0x08015e54
 8007bf0:	200002c0 	.word	0x200002c0
 8007bf4:	20000032 	.word	0x20000032
 8007bf8:	88888889 	.word	0x88888889
 8007bfc:	080293e8 	.word	0x080293e8

08007c00 <changeSwitchStatusTouch>:

//
// Change status of Switch after touch them
//
void changeSwitchStatusTouch(uint8_t y)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST SWITCH
	if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	2b40      	cmp	r3, #64	; 0x40
 8007c0e:	d90e      	bls.n	8007c2e <changeSwitchStatusTouch+0x2e>
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	2b56      	cmp	r3, #86	; 0x56
 8007c14:	d80b      	bhi.n	8007c2e <changeSwitchStatusTouch+0x2e>
	{
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007c16:	4b24      	ldr	r3, [pc, #144]	; (8007ca8 <changeSwitchStatusTouch+0xa8>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <changeSwitchStatusTouch+0x26>
		{
			firstSwitchTurn(0);
 8007c1e:	2000      	movs	r0, #0
 8007c20:	f000 faa4 	bl	800816c <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007c24:	e038      	b.n	8007c98 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstSwitchTurn(1);
 8007c26:	2001      	movs	r0, #1
 8007c28:	f000 faa0 	bl	800816c <firstSwitchTurn>
		if(SwitchesButtonState[0] >= 1) // if is ON
 8007c2c:	e034      	b.n	8007c98 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// SECOND SWITCH
	else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	2b5e      	cmp	r3, #94	; 0x5e
 8007c32:	d90e      	bls.n	8007c52 <changeSwitchStatusTouch+0x52>
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	2b74      	cmp	r3, #116	; 0x74
 8007c38:	d80b      	bhi.n	8007c52 <changeSwitchStatusTouch+0x52>
	{
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007c3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ca8 <changeSwitchStatusTouch+0xa8>)
 8007c3c:	785b      	ldrb	r3, [r3, #1]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <changeSwitchStatusTouch+0x4a>
		{
			secondSwitchTurn(0);
 8007c42:	2000      	movs	r0, #0
 8007c44:	f000 fb02 	bl	800824c <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007c48:	e026      	b.n	8007c98 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondSwitchTurn(1);
 8007c4a:	2001      	movs	r0, #1
 8007c4c:	f000 fafe 	bl	800824c <secondSwitchTurn>
		if(SwitchesButtonState[1] >= 1) // if is ON
 8007c50:	e022      	b.n	8007c98 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// THIRD SWITCH
	else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	2b7c      	cmp	r3, #124	; 0x7c
 8007c56:	d90e      	bls.n	8007c76 <changeSwitchStatusTouch+0x76>
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	2b92      	cmp	r3, #146	; 0x92
 8007c5c:	d80b      	bhi.n	8007c76 <changeSwitchStatusTouch+0x76>
	{
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007c5e:	4b12      	ldr	r3, [pc, #72]	; (8007ca8 <changeSwitchStatusTouch+0xa8>)
 8007c60:	789b      	ldrb	r3, [r3, #2]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <changeSwitchStatusTouch+0x6e>
		{
			thirdSwitchTurn(0);
 8007c66:	2000      	movs	r0, #0
 8007c68:	f000 fb60 	bl	800832c <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007c6c:	e014      	b.n	8007c98 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdSwitchTurn(1);
 8007c6e:	2001      	movs	r0, #1
 8007c70:	f000 fb5c 	bl	800832c <thirdSwitchTurn>
		if(SwitchesButtonState[2] >= 1) // if is ON
 8007c74:	e010      	b.n	8007c98 <changeSwitchStatusTouch+0x98>
		}
	}
	//
	// FOURTH SWITCH
	else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8007c76:	79fb      	ldrb	r3, [r7, #7]
 8007c78:	2b9a      	cmp	r3, #154	; 0x9a
 8007c7a:	d90d      	bls.n	8007c98 <changeSwitchStatusTouch+0x98>
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	2bb0      	cmp	r3, #176	; 0xb0
 8007c80:	d80a      	bhi.n	8007c98 <changeSwitchStatusTouch+0x98>
	{
		if(SwitchesButtonState[3] >= 1) // if is ON
 8007c82:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <changeSwitchStatusTouch+0xa8>)
 8007c84:	78db      	ldrb	r3, [r3, #3]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <changeSwitchStatusTouch+0x92>
		{
			fourthSwitchTurn(0);
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	f000 fbbe 	bl	800840c <fourthSwitchTurn>
 8007c90:	e002      	b.n	8007c98 <changeSwitchStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthSwitchTurn(1);
 8007c92:	2001      	movs	r0, #1
 8007c94:	f000 fbba 	bl	800840c <fourthSwitchTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007c98:	4804      	ldr	r0, [pc, #16]	; (8007cac <changeSwitchStatusTouch+0xac>)
 8007c9a:	f7f9 fd95 	bl	80017c8 <EF_SetFont>
}
 8007c9e:	bf00      	nop
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	200002a8 	.word	0x200002a8
 8007cac:	080293e8 	.word	0x080293e8

08007cb0 <changeLightsStatusTouch>:

//
// Change status of Lights after touch them
//
void changeLightsStatusTouch(uint8_t y)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	71fb      	strb	r3, [r7, #7]
	//
	// FIRST LIGHT
	if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	2b40      	cmp	r3, #64	; 0x40
 8007cbe:	d90e      	bls.n	8007cde <changeLightsStatusTouch+0x2e>
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	2b56      	cmp	r3, #86	; 0x56
 8007cc4:	d80b      	bhi.n	8007cde <changeLightsStatusTouch+0x2e>
	{
		if(LightsButtonState[0] >= 1) // if is ON
 8007cc6:	4b24      	ldr	r3, [pc, #144]	; (8007d58 <changeLightsStatusTouch+0xa8>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <changeLightsStatusTouch+0x26>
		{
			firstLightTurn(0);
 8007cce:	2000      	movs	r0, #0
 8007cd0:	f000 fc0c 	bl	80084ec <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 8007cd4:	e038      	b.n	8007d48 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			firstLightTurn(1);
 8007cd6:	2001      	movs	r0, #1
 8007cd8:	f000 fc08 	bl	80084ec <firstLightTurn>
		if(LightsButtonState[0] >= 1) // if is ON
 8007cdc:	e034      	b.n	8007d48 <changeLightsStatusTouch+0x98>
		}
	}
	//
	// SECOND LIGHT
	else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	2b5e      	cmp	r3, #94	; 0x5e
 8007ce2:	d90e      	bls.n	8007d02 <changeLightsStatusTouch+0x52>
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	2b74      	cmp	r3, #116	; 0x74
 8007ce8:	d80b      	bhi.n	8007d02 <changeLightsStatusTouch+0x52>
	{
		if(LightsButtonState[1] >= 1) // if is ON
 8007cea:	4b1b      	ldr	r3, [pc, #108]	; (8007d58 <changeLightsStatusTouch+0xa8>)
 8007cec:	785b      	ldrb	r3, [r3, #1]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <changeLightsStatusTouch+0x4a>
		{
			secondLightTurn(0);
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	f000 fc66 	bl	80085c4 <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8007cf8:	e026      	b.n	8007d48 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			secondLightTurn(1);
 8007cfa:	2001      	movs	r0, #1
 8007cfc:	f000 fc62 	bl	80085c4 <secondLightTurn>
		if(LightsButtonState[1] >= 1) // if is ON
 8007d00:	e022      	b.n	8007d48 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// THIRD LIGHT
	else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	2b7c      	cmp	r3, #124	; 0x7c
 8007d06:	d90e      	bls.n	8007d26 <changeLightsStatusTouch+0x76>
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	2b92      	cmp	r3, #146	; 0x92
 8007d0c:	d80b      	bhi.n	8007d26 <changeLightsStatusTouch+0x76>
	{
		if(LightsButtonState[2] >= 1) // if is ON
 8007d0e:	4b12      	ldr	r3, [pc, #72]	; (8007d58 <changeLightsStatusTouch+0xa8>)
 8007d10:	789b      	ldrb	r3, [r3, #2]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <changeLightsStatusTouch+0x6e>
		{
			thirdLightTurn(0);
 8007d16:	2000      	movs	r0, #0
 8007d18:	f000 fcc0 	bl	800869c <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 8007d1c:	e014      	b.n	8007d48 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			thirdLightTurn(1);
 8007d1e:	2001      	movs	r0, #1
 8007d20:	f000 fcbc 	bl	800869c <thirdLightTurn>
		if(LightsButtonState[2] >= 1) // if is ON
 8007d24:	e010      	b.n	8007d48 <changeLightsStatusTouch+0x98>
		}
	}

	//
	// FOURTH LIGHT
	else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	2b9a      	cmp	r3, #154	; 0x9a
 8007d2a:	d90d      	bls.n	8007d48 <changeLightsStatusTouch+0x98>
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	2bb0      	cmp	r3, #176	; 0xb0
 8007d30:	d80a      	bhi.n	8007d48 <changeLightsStatusTouch+0x98>
	{
		if(LightsButtonState[3] >= 1) // if is ON
 8007d32:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <changeLightsStatusTouch+0xa8>)
 8007d34:	78db      	ldrb	r3, [r3, #3]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <changeLightsStatusTouch+0x92>
		{
			fourthLightTurn(0);
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	f000 fd1a 	bl	8008774 <fourthLightTurn>
 8007d40:	e002      	b.n	8007d48 <changeLightsStatusTouch+0x98>
		}
		else // if is OFF
		{
			fourthLightTurn(1);
 8007d42:	2001      	movs	r0, #1
 8007d44:	f000 fd16 	bl	8008774 <fourthLightTurn>
		}
	}
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007d48:	4804      	ldr	r0, [pc, #16]	; (8007d5c <changeLightsStatusTouch+0xac>)
 8007d4a:	f7f9 fd3d 	bl	80017c8 <EF_SetFont>
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	200002ac 	.word	0x200002ac
 8007d5c:	080293e8 	.word	0x080293e8

08007d60 <predefinedActivityTouchAction>:

//
// Handling touch button to ON/OFF predefined activity
//
void predefinedActivityTouchAction(uint8_t y)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af02      	add	r7, sp, #8
 8007d66:	4603      	mov	r3, r0
 8007d68:	71fb      	strb	r3, [r7, #7]
	if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	2b3b      	cmp	r3, #59	; 0x3b
 8007d6e:	d966      	bls.n	8007e3e <predefinedActivityTouchAction+0xde>
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	2b64      	cmp	r3, #100	; 0x64
 8007d74:	d863      	bhi.n	8007e3e <predefinedActivityTouchAction+0xde>
	{
		if(ActivityButtonState[0] >= 1) // if is ON
 8007d76:	4b69      	ldr	r3, [pc, #420]	; (8007f1c <predefinedActivityTouchAction+0x1bc>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d02f      	beq.n	8007dde <predefinedActivityTouchAction+0x7e>
		{
			ActivityButtonState[0] = 0;
 8007d7e:	4b67      	ldr	r3, [pc, #412]	; (8007f1c <predefinedActivityTouchAction+0x1bc>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007d84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	230a      	movs	r3, #10
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	2328      	movs	r3, #40	; 0x28
 8007d90:	2278      	movs	r2, #120	; 0x78
 8007d92:	213c      	movs	r1, #60	; 0x3c
 8007d94:	2064      	movs	r0, #100	; 0x64
 8007d96:	f7f9 fcc6 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 8007d9a:	4961      	ldr	r1, [pc, #388]	; (8007f20 <predefinedActivityTouchAction+0x1c0>)
 8007d9c:	4861      	ldr	r0, [pc, #388]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007d9e:	f009 ff67 	bl	8011c70 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007da2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	2300      	movs	r3, #0
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	2300      	movs	r3, #0
 8007dae:	223e      	movs	r2, #62	; 0x3e
 8007db0:	2177      	movs	r1, #119	; 0x77
 8007db2:	485c      	ldr	r0, [pc, #368]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007db4:	f7f9 ff22 	bl	8001bfc <EF_PutString>
			sprintf((char*)Msg, "OFF");
 8007db8:	495b      	ldr	r1, [pc, #364]	; (8007f28 <predefinedActivityTouchAction+0x1c8>)
 8007dba:	485a      	ldr	r0, [pc, #360]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007dbc:	f009 ff58 	bl	8011c70 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007dc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2250      	movs	r2, #80	; 0x50
 8007dce:	2193      	movs	r1, #147	; 0x93
 8007dd0:	4854      	ldr	r0, [pc, #336]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007dd2:	f7f9 ff13 	bl	8001bfc <EF_PutString>
			predefinedActivityKarmienie(0); // Turn Activity OFF
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	f7fd f83e 	bl	8004e58 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8007ddc:	e099      	b.n	8007f12 <predefinedActivityTouchAction+0x1b2>
		}
		else // if is OFF
		{
			ActivityButtonState[0] = 1;
 8007dde:	4b4f      	ldr	r3, [pc, #316]	; (8007f1c <predefinedActivityTouchAction+0x1bc>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	701a      	strb	r2, [r3, #0]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8007de4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	230a      	movs	r3, #10
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	2328      	movs	r3, #40	; 0x28
 8007df0:	2278      	movs	r2, #120	; 0x78
 8007df2:	213c      	movs	r1, #60	; 0x3c
 8007df4:	2064      	movs	r0, #100	; 0x64
 8007df6:	f7f9 fc96 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "KARMIENIE");
 8007dfa:	4949      	ldr	r1, [pc, #292]	; (8007f20 <predefinedActivityTouchAction+0x1c0>)
 8007dfc:	4849      	ldr	r0, [pc, #292]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007dfe:	f009 ff37 	bl	8011c70 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8007e02:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007e06:	9301      	str	r3, [sp, #4]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	223e      	movs	r2, #62	; 0x3e
 8007e10:	2177      	movs	r1, #119	; 0x77
 8007e12:	4844      	ldr	r0, [pc, #272]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007e14:	f7f9 fef2 	bl	8001bfc <EF_PutString>
			sprintf((char*)Msg, "ON");
 8007e18:	4944      	ldr	r1, [pc, #272]	; (8007f2c <predefinedActivityTouchAction+0x1cc>)
 8007e1a:	4842      	ldr	r0, [pc, #264]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007e1c:	f009 ff28 	bl	8011c70 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8007e20:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007e24:	9301      	str	r3, [sp, #4]
 8007e26:	2300      	movs	r3, #0
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2250      	movs	r2, #80	; 0x50
 8007e2e:	2193      	movs	r1, #147	; 0x93
 8007e30:	483c      	ldr	r0, [pc, #240]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007e32:	f7f9 fee3 	bl	8001bfc <EF_PutString>
			predefinedActivityKarmienie(1);
 8007e36:	2001      	movs	r0, #1
 8007e38:	f7fd f80e 	bl	8004e58 <predefinedActivityKarmienie>
		if(ActivityButtonState[0] >= 1) // if is ON
 8007e3c:	e069      	b.n	8007f12 <predefinedActivityTouchAction+0x1b2>
		}

	}

	else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	2b77      	cmp	r3, #119	; 0x77
 8007e42:	d966      	bls.n	8007f12 <predefinedActivityTouchAction+0x1b2>
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	2ba0      	cmp	r3, #160	; 0xa0
 8007e48:	d863      	bhi.n	8007f12 <predefinedActivityTouchAction+0x1b2>
	{
		if(ActivityButtonState[1] >= 1) // if is ON
 8007e4a:	4b34      	ldr	r3, [pc, #208]	; (8007f1c <predefinedActivityTouchAction+0x1bc>)
 8007e4c:	785b      	ldrb	r3, [r3, #1]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d02f      	beq.n	8007eb2 <predefinedActivityTouchAction+0x152>
		{
			ActivityButtonState[1] = 0;
 8007e52:	4b32      	ldr	r3, [pc, #200]	; (8007f1c <predefinedActivityTouchAction+0x1bc>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8007e58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	230a      	movs	r3, #10
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	2328      	movs	r3, #40	; 0x28
 8007e64:	2278      	movs	r2, #120	; 0x78
 8007e66:	2178      	movs	r1, #120	; 0x78
 8007e68:	2064      	movs	r0, #100	; 0x64
 8007e6a:	f7f9 fc5c 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8007e6e:	4930      	ldr	r1, [pc, #192]	; (8007f30 <predefinedActivityTouchAction+0x1d0>)
 8007e70:	482c      	ldr	r0, [pc, #176]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007e72:	f009 fefd 	bl	8011c70 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007e76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	2300      	movs	r3, #0
 8007e82:	227a      	movs	r2, #122	; 0x7a
 8007e84:	2169      	movs	r1, #105	; 0x69
 8007e86:	4827      	ldr	r0, [pc, #156]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007e88:	f7f9 feb8 	bl	8001bfc <EF_PutString>
			sprintf((char*)Msg, "OFF");
 8007e8c:	4926      	ldr	r1, [pc, #152]	; (8007f28 <predefinedActivityTouchAction+0x1c8>)
 8007e8e:	4825      	ldr	r0, [pc, #148]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007e90:	f009 feee 	bl	8011c70 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8007e94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	228c      	movs	r2, #140	; 0x8c
 8007ea2:	2193      	movs	r1, #147	; 0x93
 8007ea4:	481f      	ldr	r0, [pc, #124]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007ea6:	f7f9 fea9 	bl	8001bfc <EF_PutString>
			predefinedActivityCzyszczenie(0);
 8007eaa:	2000      	movs	r0, #0
 8007eac:	f7fc ffba 	bl	8004e24 <predefinedActivityCzyszczenie>
			sprintf((char*)Msg, "ON");
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
			predefinedActivityCzyszczenie(1);
		}
	}
}
 8007eb0:	e02f      	b.n	8007f12 <predefinedActivityTouchAction+0x1b2>
			ActivityButtonState[1] = 1;
 8007eb2:	4b1a      	ldr	r3, [pc, #104]	; (8007f1c <predefinedActivityTouchAction+0x1bc>)
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	705a      	strb	r2, [r3, #1]
			GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8007eb8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	230a      	movs	r3, #10
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	2328      	movs	r3, #40	; 0x28
 8007ec4:	2278      	movs	r2, #120	; 0x78
 8007ec6:	2178      	movs	r1, #120	; 0x78
 8007ec8:	2064      	movs	r0, #100	; 0x64
 8007eca:	f7f9 fc2c 	bl	8001726 <GFX_DrawFillRoundRectangle>
			sprintf((char*)Msg, "CZYSZCZENIE");
 8007ece:	4918      	ldr	r1, [pc, #96]	; (8007f30 <predefinedActivityTouchAction+0x1d0>)
 8007ed0:	4814      	ldr	r0, [pc, #80]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007ed2:	f009 fecd 	bl	8011c70 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8007ed6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007eda:	9301      	str	r3, [sp, #4]
 8007edc:	2300      	movs	r3, #0
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	227a      	movs	r2, #122	; 0x7a
 8007ee4:	2169      	movs	r1, #105	; 0x69
 8007ee6:	480f      	ldr	r0, [pc, #60]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007ee8:	f7f9 fe88 	bl	8001bfc <EF_PutString>
			sprintf((char*)Msg, "ON");
 8007eec:	490f      	ldr	r1, [pc, #60]	; (8007f2c <predefinedActivityTouchAction+0x1cc>)
 8007eee:	480d      	ldr	r0, [pc, #52]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007ef0:	f009 febe 	bl	8011c70 <siprintf>
			EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8007ef4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	2300      	movs	r3, #0
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	2300      	movs	r3, #0
 8007f00:	228c      	movs	r2, #140	; 0x8c
 8007f02:	2193      	movs	r1, #147	; 0x93
 8007f04:	4807      	ldr	r0, [pc, #28]	; (8007f24 <predefinedActivityTouchAction+0x1c4>)
 8007f06:	f7f9 fe79 	bl	8001bfc <EF_PutString>
			predefinedActivityCzyszczenie(1);
 8007f0a:	2001      	movs	r0, #1
 8007f0c:	f7fc ff8a 	bl	8004e24 <predefinedActivityCzyszczenie>
}
 8007f10:	e7ff      	b.n	8007f12 <predefinedActivityTouchAction+0x1b2>
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	200002b0 	.word	0x200002b0
 8007f20:	08015e70 	.word	0x08015e70
 8007f24:	200002c0 	.word	0x200002c0
 8007f28:	08015e7c 	.word	0x08015e7c
 8007f2c:	08015e80 	.word	0x08015e80
 8007f30:	08015e84 	.word	0x08015e84

08007f34 <increaseNumberOfWSLedOnTFT>:

//
// Handling Touch to increase number of WS LED
//
void increaseNumberOfWSLedOnTFT(uint8_t x, uint8_t y)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af02      	add	r7, sp, #8
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	460a      	mov	r2, r1
 8007f3e:	71fb      	strb	r3, [r7, #7]
 8007f40:	4613      	mov	r3, r2
 8007f42:	71bb      	strb	r3, [r7, #6]
	if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2bd8      	cmp	r3, #216	; 0xd8
 8007f48:	d92f      	bls.n	8007faa <increaseNumberOfWSLedOnTFT+0x76>
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	2bf7      	cmp	r3, #247	; 0xf7
 8007f4e:	d82c      	bhi.n	8007faa <increaseNumberOfWSLedOnTFT+0x76>
	{
		if(NrOfLeds < 98)
 8007f50:	4b38      	ldr	r3, [pc, #224]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b61      	cmp	r3, #97	; 0x61
 8007f56:	d806      	bhi.n	8007f66 <increaseNumberOfWSLedOnTFT+0x32>
		{
			NrOfLeds++;
 8007f58:	4b36      	ldr	r3, [pc, #216]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	4b34      	ldr	r3, [pc, #208]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007f62:	701a      	strb	r2, [r3, #0]
 8007f64:	e002      	b.n	8007f6c <increaseNumberOfWSLedOnTFT+0x38>
		}
		else
		{
			NrOfLeds = 1;
 8007f66:	4b33      	ldr	r3, [pc, #204]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007f68:	2201      	movs	r2, #1
 8007f6a:	701a      	strb	r2, [r3, #0]
		}
		if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8007f6c:	4b31      	ldr	r3, [pc, #196]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b09      	cmp	r3, #9
 8007f72:	d807      	bhi.n	8007f84 <increaseNumberOfWSLedOnTFT+0x50>
 8007f74:	4b2f      	ldr	r3, [pc, #188]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	492f      	ldr	r1, [pc, #188]	; (8008038 <increaseNumberOfWSLedOnTFT+0x104>)
 8007f7c:	482f      	ldr	r0, [pc, #188]	; (800803c <increaseNumberOfWSLedOnTFT+0x108>)
 8007f7e:	f009 fe77 	bl	8011c70 <siprintf>
 8007f82:	e006      	b.n	8007f92 <increaseNumberOfWSLedOnTFT+0x5e>
		else sprintf((char*)Msg, " %d", NrOfLeds);
 8007f84:	4b2b      	ldr	r3, [pc, #172]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	492d      	ldr	r1, [pc, #180]	; (8008040 <increaseNumberOfWSLedOnTFT+0x10c>)
 8007f8c:	482b      	ldr	r0, [pc, #172]	; (800803c <increaseNumberOfWSLedOnTFT+0x108>)
 8007f8e:	f009 fe6f 	bl	8011c70 <siprintf>
		EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007f92:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	223c      	movs	r2, #60	; 0x3c
 8007fa0:	21ac      	movs	r1, #172	; 0xac
 8007fa2:	4826      	ldr	r0, [pc, #152]	; (800803c <increaseNumberOfWSLedOnTFT+0x108>)
 8007fa4:	f7f9 fe2a 	bl	8001bfc <EF_PutString>
		sprintf((char*)Msg, "OK");
		EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		// Write chosen number of LEDs to EEPROM memory
		eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
	}
}
 8007fa8:	e03f      	b.n	800802a <increaseNumberOfWSLedOnTFT+0xf6>
	else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	2bfb      	cmp	r3, #251	; 0xfb
 8007fae:	d93c      	bls.n	800802a <increaseNumberOfWSLedOnTFT+0xf6>
		if(NrOfLeds < 90)
 8007fb0:	4b20      	ldr	r3, [pc, #128]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b59      	cmp	r3, #89	; 0x59
 8007fb6:	d806      	bhi.n	8007fc6 <increaseNumberOfWSLedOnTFT+0x92>
			NrOfLeds = NrOfLeds + 10;
 8007fb8:	4b1e      	ldr	r3, [pc, #120]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	330a      	adds	r3, #10
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	4b1c      	ldr	r3, [pc, #112]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007fc2:	701a      	strb	r2, [r3, #0]
 8007fc4:	e013      	b.n	8007fee <increaseNumberOfWSLedOnTFT+0xba>
			NrOfLeds = (NrOfLeds + 10) % 99;
 8007fc6:	4b1b      	ldr	r3, [pc, #108]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	f103 020a 	add.w	r2, r3, #10
 8007fce:	4b1d      	ldr	r3, [pc, #116]	; (8008044 <increaseNumberOfWSLedOnTFT+0x110>)
 8007fd0:	fb83 1302 	smull	r1, r3, r3, r2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	1199      	asrs	r1, r3, #6
 8007fd8:	17d3      	asrs	r3, r2, #31
 8007fda:	1ac9      	subs	r1, r1, r3
 8007fdc:	460b      	mov	r3, r1
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	440b      	add	r3, r1
 8007fe2:	0159      	lsls	r1, r3, #5
 8007fe4:	440b      	add	r3, r1
 8007fe6:	1ad1      	subs	r1, r2, r3
 8007fe8:	b2ca      	uxtb	r2, r1
 8007fea:	4b12      	ldr	r3, [pc, #72]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007fec:	701a      	strb	r2, [r3, #0]
	if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8007fee:	4b11      	ldr	r3, [pc, #68]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	2b09      	cmp	r3, #9
 8007ff4:	d807      	bhi.n	8008006 <increaseNumberOfWSLedOnTFT+0xd2>
 8007ff6:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	490e      	ldr	r1, [pc, #56]	; (8008038 <increaseNumberOfWSLedOnTFT+0x104>)
 8007ffe:	480f      	ldr	r0, [pc, #60]	; (800803c <increaseNumberOfWSLedOnTFT+0x108>)
 8008000:	f009 fe36 	bl	8011c70 <siprintf>
 8008004:	e006      	b.n	8008014 <increaseNumberOfWSLedOnTFT+0xe0>
	else sprintf((char*)Msg, " %d", NrOfLeds);
 8008006:	4b0b      	ldr	r3, [pc, #44]	; (8008034 <increaseNumberOfWSLedOnTFT+0x100>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	490c      	ldr	r1, [pc, #48]	; (8008040 <increaseNumberOfWSLedOnTFT+0x10c>)
 800800e:	480b      	ldr	r0, [pc, #44]	; (800803c <increaseNumberOfWSLedOnTFT+0x108>)
 8008010:	f009 fe2e 	bl	8011c70 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008014:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	2301      	movs	r3, #1
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	2300      	movs	r3, #0
 8008020:	223c      	movs	r2, #60	; 0x3c
 8008022:	21ac      	movs	r1, #172	; 0xac
 8008024:	4805      	ldr	r0, [pc, #20]	; (800803c <increaseNumberOfWSLedOnTFT+0x108>)
 8008026:	f7f9 fde9 	bl	8001bfc <EF_PutString>
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000033 	.word	0x20000033
 8008038:	08015e90 	.word	0x08015e90
 800803c:	200002c0 	.word	0x200002c0
 8008040:	08015e98 	.word	0x08015e98
 8008044:	a57eb503 	.word	0xa57eb503

08008048 <changeTypeOfWSLights>:

void changeTypeOfWSLights(uint8_t x, uint8_t y)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	460a      	mov	r2, r1
 8008052:	71fb      	strb	r3, [r7, #7]
 8008054:	4613      	mov	r3, r2
 8008056:	71bb      	strb	r3, [r7, #6]
	if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8008058:	79bb      	ldrb	r3, [r7, #6]
 800805a:	2b5e      	cmp	r3, #94	; 0x5e
 800805c:	d91e      	bls.n	800809c <changeTypeOfWSLights+0x54>
 800805e:	79bb      	ldrb	r3, [r7, #6]
 8008060:	2b74      	cmp	r3, #116	; 0x74
 8008062:	d81b      	bhi.n	800809c <changeTypeOfWSLights+0x54>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	2b95      	cmp	r3, #149	; 0x95
 8008068:	d906      	bls.n	8008078 <changeTypeOfWSLights+0x30>
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	2bbe      	cmp	r3, #190	; 0xbe
 800806e:	d803      	bhi.n	8008078 <changeTypeOfWSLights+0x30>
		{
			SendComand(UCMD_WS_LED_WHITE_MAX);
 8008070:	201d      	movs	r0, #29
 8008072:	f000 fee1 	bl	8008e38 <SendComand>
 8008076:	e010      	b.n	800809a <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	2bc9      	cmp	r3, #201	; 0xc9
 800807c:	d906      	bls.n	800808c <changeTypeOfWSLights+0x44>
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	2bf2      	cmp	r3, #242	; 0xf2
 8008082:	d803      	bhi.n	800808c <changeTypeOfWSLights+0x44>
		{
			SendComand(UCMD_WS_LED_WHITE_MID);
 8008084:	201e      	movs	r0, #30
 8008086:	f000 fed7 	bl	8008e38 <SendComand>
 800808a:	e006      	b.n	800809a <changeTypeOfWSLights+0x52>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	2bfd      	cmp	r3, #253	; 0xfd
 8008090:	d962      	bls.n	8008158 <changeTypeOfWSLights+0x110>
		{
			SendComand(UCMD_WS_LED_WHITE_MIN);
 8008092:	201f      	movs	r0, #31
 8008094:	f000 fed0 	bl	8008e38 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008098:	e05e      	b.n	8008158 <changeTypeOfWSLights+0x110>
 800809a:	e05d      	b.n	8008158 <changeTypeOfWSLights+0x110>
	}

	//
	// Check if it is third line button to change LEDs to BLUE
	//
	else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 800809c:	79bb      	ldrb	r3, [r7, #6]
 800809e:	2b7c      	cmp	r3, #124	; 0x7c
 80080a0:	d91e      	bls.n	80080e0 <changeTypeOfWSLights+0x98>
 80080a2:	79bb      	ldrb	r3, [r7, #6]
 80080a4:	2b92      	cmp	r3, #146	; 0x92
 80080a6:	d81b      	bhi.n	80080e0 <changeTypeOfWSLights+0x98>
	{
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	2b95      	cmp	r3, #149	; 0x95
 80080ac:	d906      	bls.n	80080bc <changeTypeOfWSLights+0x74>
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	2bbe      	cmp	r3, #190	; 0xbe
 80080b2:	d803      	bhi.n	80080bc <changeTypeOfWSLights+0x74>
		{
			SendComand(UCMD_WS_LED_BLUE_MAX);
 80080b4:	2020      	movs	r0, #32
 80080b6:	f000 febf 	bl	8008e38 <SendComand>
 80080ba:	e010      	b.n	80080de <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	2bc9      	cmp	r3, #201	; 0xc9
 80080c0:	d906      	bls.n	80080d0 <changeTypeOfWSLights+0x88>
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	2bf2      	cmp	r3, #242	; 0xf2
 80080c6:	d803      	bhi.n	80080d0 <changeTypeOfWSLights+0x88>
		{
			SendComand(UCMD_WS_LED_BLUE_MID);
 80080c8:	2021      	movs	r0, #33	; 0x21
 80080ca:	f000 feb5 	bl	8008e38 <SendComand>
 80080ce:	e006      	b.n	80080de <changeTypeOfWSLights+0x96>
		}
		else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	2bfd      	cmp	r3, #253	; 0xfd
 80080d4:	d942      	bls.n	800815c <changeTypeOfWSLights+0x114>
		{
			SendComand(UCMD_WS_LED_BLUE_MIN);
 80080d6:	2022      	movs	r0, #34	; 0x22
 80080d8:	f000 feae 	bl	8008e38 <SendComand>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 80080dc:	e03e      	b.n	800815c <changeTypeOfWSLights+0x114>
 80080de:	e03d      	b.n	800815c <changeTypeOfWSLights+0x114>
	}

	//
	// Check if it is fourth line button to change LEDs to Predefined
	//
	else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 80080e0:	79bb      	ldrb	r3, [r7, #6]
 80080e2:	2b9b      	cmp	r3, #155	; 0x9b
 80080e4:	d91e      	bls.n	8008124 <changeTypeOfWSLights+0xdc>
 80080e6:	79bb      	ldrb	r3, [r7, #6]
 80080e8:	2bb1      	cmp	r3, #177	; 0xb1
 80080ea:	d81b      	bhi.n	8008124 <changeTypeOfWSLights+0xdc>
	{
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 80080ec:	79fb      	ldrb	r3, [r7, #7]
 80080ee:	2b13      	cmp	r3, #19
 80080f0:	d906      	bls.n	8008100 <changeTypeOfWSLights+0xb8>
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	2b64      	cmp	r3, #100	; 0x64
 80080f6:	d803      	bhi.n	8008100 <changeTypeOfWSLights+0xb8>
		{
			SendComand(UCMD_WS_LED_DAILY);
 80080f8:	2023      	movs	r0, #35	; 0x23
 80080fa:	f000 fe9d 	bl	8008e38 <SendComand>
 80080fe:	e010      	b.n	8008122 <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	2b77      	cmp	r3, #119	; 0x77
 8008104:	d906      	bls.n	8008114 <changeTypeOfWSLights+0xcc>
 8008106:	79fb      	ldrb	r3, [r7, #7]
 8008108:	2bc8      	cmp	r3, #200	; 0xc8
 800810a:	d803      	bhi.n	8008114 <changeTypeOfWSLights+0xcc>
		{
			SendComand(UCMD_WS_LED_WHITE_OFF);
 800810c:	201c      	movs	r0, #28
 800810e:	f000 fe93 	bl	8008e38 <SendComand>
 8008112:	e006      	b.n	8008122 <changeTypeOfWSLights+0xda>
		}
		else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	2bdb      	cmp	r3, #219	; 0xdb
 8008118:	d922      	bls.n	8008160 <changeTypeOfWSLights+0x118>
		{
			SendComand(UCMD_WS_LED_NIGHT);
 800811a:	2024      	movs	r0, #36	; 0x24
 800811c:	f000 fe8c 	bl	8008e38 <SendComand>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008120:	e01e      	b.n	8008160 <changeTypeOfWSLights+0x118>
 8008122:	e01d      	b.n	8008160 <changeTypeOfWSLights+0x118>
	}

	//
	// Check if it is fifth line button to change LEDs to Predefined animations
	//
	else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8008124:	79bb      	ldrb	r3, [r7, #6]
 8008126:	2bba      	cmp	r3, #186	; 0xba
 8008128:	d91b      	bls.n	8008162 <changeTypeOfWSLights+0x11a>
 800812a:	79bb      	ldrb	r3, [r7, #6]
 800812c:	2bd0      	cmp	r3, #208	; 0xd0
 800812e:	d818      	bhi.n	8008162 <changeTypeOfWSLights+0x11a>
	{
		if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008130:	79fb      	ldrb	r3, [r7, #7]
 8008132:	2b45      	cmp	r3, #69	; 0x45
 8008134:	d906      	bls.n	8008144 <changeTypeOfWSLights+0xfc>
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	2b96      	cmp	r3, #150	; 0x96
 800813a:	d803      	bhi.n	8008144 <changeTypeOfWSLights+0xfc>
		{
			SendComand(UCMD_WS_ANIMATION_SUNRISE);
 800813c:	2026      	movs	r0, #38	; 0x26
 800813e:	f000 fe7b 	bl	8008e38 <SendComand>
 8008142:	e00e      	b.n	8008162 <changeTypeOfWSLights+0x11a>
		}
		else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8008144:	79fb      	ldrb	r3, [r7, #7]
 8008146:	2ba9      	cmp	r3, #169	; 0xa9
 8008148:	d90b      	bls.n	8008162 <changeTypeOfWSLights+0x11a>
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	2bfa      	cmp	r3, #250	; 0xfa
 800814e:	d808      	bhi.n	8008162 <changeTypeOfWSLights+0x11a>
		{
			SendComand(UCMD_WS_ANIMATION_SUNSET);
 8008150:	2027      	movs	r0, #39	; 0x27
 8008152:	f000 fe71 	bl	8008e38 <SendComand>
		}
	}
}
 8008156:	e004      	b.n	8008162 <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8008158:	bf00      	nop
 800815a:	e002      	b.n	8008162 <changeTypeOfWSLights+0x11a>
		if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 800815c:	bf00      	nop
 800815e:	e000      	b.n	8008162 <changeTypeOfWSLights+0x11a>
		if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8008160:	bf00      	nop
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
	...

0800816c <firstSwitchTurn>:
////////////////////////////////////////////////////////////////////
//
// Functions to change state of relays to manage switches and lights
//
void firstSwitchTurn(uint8_t NewState)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af02      	add	r7, sp, #8
 8008172:	4603      	mov	r3, r0
 8008174:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d12a      	bne.n	80081d2 <firstSwitchTurn+0x66>
	{
		SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 800817c:	2006      	movs	r0, #6
 800817e:	f000 fe5b 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=1\n"); // Print message to ESP
 8008182:	492b      	ldr	r1, [pc, #172]	; (8008230 <firstSwitchTurn+0xc4>)
 8008184:	482b      	ldr	r0, [pc, #172]	; (8008234 <firstSwitchTurn+0xc8>)
 8008186:	f001 fd7f 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800818a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	2305      	movs	r3, #5
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	2315      	movs	r3, #21
 8008196:	2221      	movs	r2, #33	; 0x21
 8008198:	2141      	movs	r1, #65	; 0x41
 800819a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800819e:	f7f9 fac2 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "OFF");
 80081a2:	4925      	ldr	r1, [pc, #148]	; (8008238 <firstSwitchTurn+0xcc>)
 80081a4:	4825      	ldr	r0, [pc, #148]	; (800823c <firstSwitchTurn+0xd0>)
 80081a6:	f009 fd63 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80081aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80081ae:	9301      	str	r3, [sp, #4]
 80081b0:	2300      	movs	r3, #0
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	2300      	movs	r3, #0
 80081b6:	2243      	movs	r2, #67	; 0x43
 80081b8:	f240 1111 	movw	r1, #273	; 0x111
 80081bc:	481f      	ldr	r0, [pc, #124]	; (800823c <firstSwitchTurn+0xd0>)
 80081be:	f7f9 fd1d 	bl	8001bfc <EF_PutString>
		SwitchesButtonState[0] = 0;
 80081c2:	4b1f      	ldr	r3, [pc, #124]	; (8008240 <firstSwitchTurn+0xd4>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 0);
 80081c8:	2100      	movs	r1, #0
 80081ca:	2001      	movs	r0, #1
 80081cc:	f7fa fc60 	bl	8002a90 <EEPROM_RelayStateUpdate>
		sprintf((char*)Msg, "ON");
		EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		SwitchesButtonState[0] = 1;
		EEPROM_RelayStateUpdate(1, 1);
	}
}
 80081d0:	e029      	b.n	8008226 <firstSwitchTurn+0xba>
		SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 80081d2:	2005      	movs	r0, #5
 80081d4:	f000 fe30 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=1\n"); // Print message to ESP
 80081d8:	491a      	ldr	r1, [pc, #104]	; (8008244 <firstSwitchTurn+0xd8>)
 80081da:	4816      	ldr	r0, [pc, #88]	; (8008234 <firstSwitchTurn+0xc8>)
 80081dc:	f001 fd54 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80081e0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80081e4:	9301      	str	r3, [sp, #4]
 80081e6:	2305      	movs	r3, #5
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	2315      	movs	r3, #21
 80081ec:	2221      	movs	r2, #33	; 0x21
 80081ee:	2141      	movs	r1, #65	; 0x41
 80081f0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80081f4:	f7f9 fa97 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "ON");
 80081f8:	4913      	ldr	r1, [pc, #76]	; (8008248 <firstSwitchTurn+0xdc>)
 80081fa:	4810      	ldr	r0, [pc, #64]	; (800823c <firstSwitchTurn+0xd0>)
 80081fc:	f009 fd38 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8008200:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	2300      	movs	r3, #0
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	2300      	movs	r3, #0
 800820c:	2243      	movs	r2, #67	; 0x43
 800820e:	f240 1111 	movw	r1, #273	; 0x111
 8008212:	480a      	ldr	r0, [pc, #40]	; (800823c <firstSwitchTurn+0xd0>)
 8008214:	f7f9 fcf2 	bl	8001bfc <EF_PutString>
		SwitchesButtonState[0] = 1;
 8008218:	4b09      	ldr	r3, [pc, #36]	; (8008240 <firstSwitchTurn+0xd4>)
 800821a:	2201      	movs	r2, #1
 800821c:	701a      	strb	r2, [r3, #0]
		EEPROM_RelayStateUpdate(1, 1);
 800821e:	2101      	movs	r1, #1
 8008220:	2001      	movs	r0, #1
 8008222:	f7fa fc35 	bl	8002a90 <EEPROM_RelayStateUpdate>
}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	08015e9c 	.word	0x08015e9c
 8008234:	200006bc 	.word	0x200006bc
 8008238:	08015e7c 	.word	0x08015e7c
 800823c:	200002c0 	.word	0x200002c0
 8008240:	200002a8 	.word	0x200002a8
 8008244:	08015ea8 	.word	0x08015ea8
 8008248:	08015e80 	.word	0x08015e80

0800824c <secondSwitchTurn>:
void secondSwitchTurn(uint8_t NewState)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af02      	add	r7, sp, #8
 8008252:	4603      	mov	r3, r0
 8008254:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008256:	79fb      	ldrb	r3, [r7, #7]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d12a      	bne.n	80082b2 <secondSwitchTurn+0x66>
	{
		SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 800825c:	2008      	movs	r0, #8
 800825e:	f000 fdeb 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=2\n"); // Print message to ESP
 8008262:	492b      	ldr	r1, [pc, #172]	; (8008310 <secondSwitchTurn+0xc4>)
 8008264:	482b      	ldr	r0, [pc, #172]	; (8008314 <secondSwitchTurn+0xc8>)
 8008266:	f001 fd0f 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800826a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	2305      	movs	r3, #5
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	2315      	movs	r3, #21
 8008276:	2221      	movs	r2, #33	; 0x21
 8008278:	215f      	movs	r1, #95	; 0x5f
 800827a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800827e:	f7f9 fa52 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "OFF");
 8008282:	4925      	ldr	r1, [pc, #148]	; (8008318 <secondSwitchTurn+0xcc>)
 8008284:	4825      	ldr	r0, [pc, #148]	; (800831c <secondSwitchTurn+0xd0>)
 8008286:	f009 fcf3 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800828a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	2300      	movs	r3, #0
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	2300      	movs	r3, #0
 8008296:	2261      	movs	r2, #97	; 0x61
 8008298:	f240 1111 	movw	r1, #273	; 0x111
 800829c:	481f      	ldr	r0, [pc, #124]	; (800831c <secondSwitchTurn+0xd0>)
 800829e:	f7f9 fcad 	bl	8001bfc <EF_PutString>
		SwitchesButtonState[1] = 0;
 80082a2:	4b1f      	ldr	r3, [pc, #124]	; (8008320 <secondSwitchTurn+0xd4>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 0);
 80082a8:	2100      	movs	r1, #0
 80082aa:	2002      	movs	r0, #2
 80082ac:	f7fa fbf0 	bl	8002a90 <EEPROM_RelayStateUpdate>
		sprintf((char*)Msg, "ON");
		EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		SwitchesButtonState[1] = 1;
		EEPROM_RelayStateUpdate(2, 1);
	}
}
 80082b0:	e029      	b.n	8008306 <secondSwitchTurn+0xba>
		SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 80082b2:	2007      	movs	r0, #7
 80082b4:	f000 fdc0 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=2\n"); // Print message to ESP
 80082b8:	491a      	ldr	r1, [pc, #104]	; (8008324 <secondSwitchTurn+0xd8>)
 80082ba:	4816      	ldr	r0, [pc, #88]	; (8008314 <secondSwitchTurn+0xc8>)
 80082bc:	f001 fce4 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80082c0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	2305      	movs	r3, #5
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	2315      	movs	r3, #21
 80082cc:	2221      	movs	r2, #33	; 0x21
 80082ce:	215f      	movs	r1, #95	; 0x5f
 80082d0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80082d4:	f7f9 fa27 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "ON");
 80082d8:	4913      	ldr	r1, [pc, #76]	; (8008328 <secondSwitchTurn+0xdc>)
 80082da:	4810      	ldr	r0, [pc, #64]	; (800831c <secondSwitchTurn+0xd0>)
 80082dc:	f009 fcc8 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80082e0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	2300      	movs	r3, #0
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	2300      	movs	r3, #0
 80082ec:	2261      	movs	r2, #97	; 0x61
 80082ee:	f240 1111 	movw	r1, #273	; 0x111
 80082f2:	480a      	ldr	r0, [pc, #40]	; (800831c <secondSwitchTurn+0xd0>)
 80082f4:	f7f9 fc82 	bl	8001bfc <EF_PutString>
		SwitchesButtonState[1] = 1;
 80082f8:	4b09      	ldr	r3, [pc, #36]	; (8008320 <secondSwitchTurn+0xd4>)
 80082fa:	2201      	movs	r2, #1
 80082fc:	705a      	strb	r2, [r3, #1]
		EEPROM_RelayStateUpdate(2, 1);
 80082fe:	2101      	movs	r1, #1
 8008300:	2002      	movs	r0, #2
 8008302:	f7fa fbc5 	bl	8002a90 <EEPROM_RelayStateUpdate>
}
 8008306:	bf00      	nop
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	08015eb4 	.word	0x08015eb4
 8008314:	200006bc 	.word	0x200006bc
 8008318:	08015e7c 	.word	0x08015e7c
 800831c:	200002c0 	.word	0x200002c0
 8008320:	200002a8 	.word	0x200002a8
 8008324:	08015ec0 	.word	0x08015ec0
 8008328:	08015e80 	.word	0x08015e80

0800832c <thirdSwitchTurn>:
void thirdSwitchTurn(uint8_t NewState)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af02      	add	r7, sp, #8
 8008332:	4603      	mov	r3, r0
 8008334:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d12a      	bne.n	8008392 <thirdSwitchTurn+0x66>
	{
		SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 800833c:	200a      	movs	r0, #10
 800833e:	f000 fd7b 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=3\n"); // Print message to ESP
 8008342:	492b      	ldr	r1, [pc, #172]	; (80083f0 <thirdSwitchTurn+0xc4>)
 8008344:	482b      	ldr	r0, [pc, #172]	; (80083f4 <thirdSwitchTurn+0xc8>)
 8008346:	f001 fc9f 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800834a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	2305      	movs	r3, #5
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	2315      	movs	r3, #21
 8008356:	2221      	movs	r2, #33	; 0x21
 8008358:	217d      	movs	r1, #125	; 0x7d
 800835a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800835e:	f7f9 f9e2 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "OFF");
 8008362:	4925      	ldr	r1, [pc, #148]	; (80083f8 <thirdSwitchTurn+0xcc>)
 8008364:	4825      	ldr	r0, [pc, #148]	; (80083fc <thirdSwitchTurn+0xd0>)
 8008366:	f009 fc83 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800836a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800836e:	9301      	str	r3, [sp, #4]
 8008370:	2300      	movs	r3, #0
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	227f      	movs	r2, #127	; 0x7f
 8008378:	f240 1111 	movw	r1, #273	; 0x111
 800837c:	481f      	ldr	r0, [pc, #124]	; (80083fc <thirdSwitchTurn+0xd0>)
 800837e:	f7f9 fc3d 	bl	8001bfc <EF_PutString>
		SwitchesButtonState[2] = 0;
 8008382:	4b1f      	ldr	r3, [pc, #124]	; (8008400 <thirdSwitchTurn+0xd4>)
 8008384:	2200      	movs	r2, #0
 8008386:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 0);
 8008388:	2100      	movs	r1, #0
 800838a:	2003      	movs	r0, #3
 800838c:	f7fa fb80 	bl	8002a90 <EEPROM_RelayStateUpdate>
		sprintf((char*)Msg, "ON");
		EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		SwitchesButtonState[2] = 1;
		EEPROM_RelayStateUpdate(3, 1);
	}
}
 8008390:	e029      	b.n	80083e6 <thirdSwitchTurn+0xba>
		SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8008392:	2009      	movs	r0, #9
 8008394:	f000 fd50 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=3\n"); // Print message to ESP
 8008398:	491a      	ldr	r1, [pc, #104]	; (8008404 <thirdSwitchTurn+0xd8>)
 800839a:	4816      	ldr	r0, [pc, #88]	; (80083f4 <thirdSwitchTurn+0xc8>)
 800839c:	f001 fc74 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80083a0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	2305      	movs	r3, #5
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	2315      	movs	r3, #21
 80083ac:	2221      	movs	r2, #33	; 0x21
 80083ae:	217d      	movs	r1, #125	; 0x7d
 80083b0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80083b4:	f7f9 f9b7 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "ON");
 80083b8:	4913      	ldr	r1, [pc, #76]	; (8008408 <thirdSwitchTurn+0xdc>)
 80083ba:	4810      	ldr	r0, [pc, #64]	; (80083fc <thirdSwitchTurn+0xd0>)
 80083bc:	f009 fc58 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80083c0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	2300      	movs	r3, #0
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	2300      	movs	r3, #0
 80083cc:	227f      	movs	r2, #127	; 0x7f
 80083ce:	f240 1111 	movw	r1, #273	; 0x111
 80083d2:	480a      	ldr	r0, [pc, #40]	; (80083fc <thirdSwitchTurn+0xd0>)
 80083d4:	f7f9 fc12 	bl	8001bfc <EF_PutString>
		SwitchesButtonState[2] = 1;
 80083d8:	4b09      	ldr	r3, [pc, #36]	; (8008400 <thirdSwitchTurn+0xd4>)
 80083da:	2201      	movs	r2, #1
 80083dc:	709a      	strb	r2, [r3, #2]
		EEPROM_RelayStateUpdate(3, 1);
 80083de:	2101      	movs	r1, #1
 80083e0:	2003      	movs	r0, #3
 80083e2:	f7fa fb55 	bl	8002a90 <EEPROM_RelayStateUpdate>
}
 80083e6:	bf00      	nop
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	08015ecc 	.word	0x08015ecc
 80083f4:	200006bc 	.word	0x200006bc
 80083f8:	08015e7c 	.word	0x08015e7c
 80083fc:	200002c0 	.word	0x200002c0
 8008400:	200002a8 	.word	0x200002a8
 8008404:	08015ed8 	.word	0x08015ed8
 8008408:	08015e80 	.word	0x08015e80

0800840c <fourthSwitchTurn>:
void fourthSwitchTurn(uint8_t NewState)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af02      	add	r7, sp, #8
 8008412:	4603      	mov	r3, r0
 8008414:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d12a      	bne.n	8008472 <fourthSwitchTurn+0x66>
	{
		SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 800841c:	200c      	movs	r0, #12
 800841e:	f000 fd0b 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=4\n"); // Print message to ESP
 8008422:	492b      	ldr	r1, [pc, #172]	; (80084d0 <fourthSwitchTurn+0xc4>)
 8008424:	482b      	ldr	r0, [pc, #172]	; (80084d4 <fourthSwitchTurn+0xc8>)
 8008426:	f001 fc2f 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800842a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	2305      	movs	r3, #5
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	2315      	movs	r3, #21
 8008436:	2221      	movs	r2, #33	; 0x21
 8008438:	219b      	movs	r1, #155	; 0x9b
 800843a:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800843e:	f7f9 f972 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "OFF");
 8008442:	4925      	ldr	r1, [pc, #148]	; (80084d8 <fourthSwitchTurn+0xcc>)
 8008444:	4825      	ldr	r0, [pc, #148]	; (80084dc <fourthSwitchTurn+0xd0>)
 8008446:	f009 fc13 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800844a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	2300      	movs	r3, #0
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	229d      	movs	r2, #157	; 0x9d
 8008458:	f240 1111 	movw	r1, #273	; 0x111
 800845c:	481f      	ldr	r0, [pc, #124]	; (80084dc <fourthSwitchTurn+0xd0>)
 800845e:	f7f9 fbcd 	bl	8001bfc <EF_PutString>
		SwitchesButtonState[3] = 0;
 8008462:	4b1f      	ldr	r3, [pc, #124]	; (80084e0 <fourthSwitchTurn+0xd4>)
 8008464:	2200      	movs	r2, #0
 8008466:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 0);
 8008468:	2100      	movs	r1, #0
 800846a:	2004      	movs	r0, #4
 800846c:	f7fa fb10 	bl	8002a90 <EEPROM_RelayStateUpdate>
		sprintf((char*)Msg, "ON");
		EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
		SwitchesButtonState[3] = 1;
		EEPROM_RelayStateUpdate(4, 1);
	}
}
 8008470:	e029      	b.n	80084c6 <fourthSwitchTurn+0xba>
		SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8008472:	200b      	movs	r0, #11
 8008474:	f000 fce0 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=4\n"); // Print message to ESP
 8008478:	491a      	ldr	r1, [pc, #104]	; (80084e4 <fourthSwitchTurn+0xd8>)
 800847a:	4816      	ldr	r0, [pc, #88]	; (80084d4 <fourthSwitchTurn+0xc8>)
 800847c:	f001 fc04 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008480:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	2305      	movs	r3, #5
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	2315      	movs	r3, #21
 800848c:	2221      	movs	r2, #33	; 0x21
 800848e:	219b      	movs	r1, #155	; 0x9b
 8008490:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008494:	f7f9 f947 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "ON");
 8008498:	4913      	ldr	r1, [pc, #76]	; (80084e8 <fourthSwitchTurn+0xdc>)
 800849a:	4810      	ldr	r0, [pc, #64]	; (80084dc <fourthSwitchTurn+0xd0>)
 800849c:	f009 fbe8 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 80084a0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	2300      	movs	r3, #0
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	2300      	movs	r3, #0
 80084ac:	229d      	movs	r2, #157	; 0x9d
 80084ae:	f240 1111 	movw	r1, #273	; 0x111
 80084b2:	480a      	ldr	r0, [pc, #40]	; (80084dc <fourthSwitchTurn+0xd0>)
 80084b4:	f7f9 fba2 	bl	8001bfc <EF_PutString>
		SwitchesButtonState[3] = 1;
 80084b8:	4b09      	ldr	r3, [pc, #36]	; (80084e0 <fourthSwitchTurn+0xd4>)
 80084ba:	2201      	movs	r2, #1
 80084bc:	70da      	strb	r2, [r3, #3]
		EEPROM_RelayStateUpdate(4, 1);
 80084be:	2101      	movs	r1, #1
 80084c0:	2004      	movs	r0, #4
 80084c2:	f7fa fae5 	bl	8002a90 <EEPROM_RelayStateUpdate>
}
 80084c6:	bf00      	nop
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	08015ee4 	.word	0x08015ee4
 80084d4:	200006bc 	.word	0x200006bc
 80084d8:	08015e7c 	.word	0x08015e7c
 80084dc:	200002c0 	.word	0x200002c0
 80084e0:	200002a8 	.word	0x200002a8
 80084e4:	08015ef0 	.word	0x08015ef0
 80084e8:	08015e80 	.word	0x08015e80

080084ec <firstLightTurn>:


void firstLightTurn(uint8_t NewState)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	4603      	mov	r3, r0
 80084f4:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d128      	bne.n	800854e <firstLightTurn+0x62>
	{
		SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 80084fc:	200e      	movs	r0, #14
 80084fe:	f000 fc9b 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=5\n"); // Print message to ESP
 8008502:	4929      	ldr	r1, [pc, #164]	; (80085a8 <firstLightTurn+0xbc>)
 8008504:	4829      	ldr	r0, [pc, #164]	; (80085ac <firstLightTurn+0xc0>)
 8008506:	f001 fbbf 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800850a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	2305      	movs	r3, #5
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	2315      	movs	r3, #21
 8008516:	2221      	movs	r2, #33	; 0x21
 8008518:	2141      	movs	r1, #65	; 0x41
 800851a:	20c8      	movs	r0, #200	; 0xc8
 800851c:	f7f9 f903 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "OFF");
 8008520:	4923      	ldr	r1, [pc, #140]	; (80085b0 <firstLightTurn+0xc4>)
 8008522:	4824      	ldr	r0, [pc, #144]	; (80085b4 <firstLightTurn+0xc8>)
 8008524:	f009 fba4 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008528:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	2300      	movs	r3, #0
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	2300      	movs	r3, #0
 8008534:	2243      	movs	r2, #67	; 0x43
 8008536:	21cb      	movs	r1, #203	; 0xcb
 8008538:	481e      	ldr	r0, [pc, #120]	; (80085b4 <firstLightTurn+0xc8>)
 800853a:	f7f9 fb5f 	bl	8001bfc <EF_PutString>
		LightsButtonState[0] = 0;
 800853e:	4b1e      	ldr	r3, [pc, #120]	; (80085b8 <firstLightTurn+0xcc>)
 8008540:	2200      	movs	r2, #0
 8008542:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 0);
 8008544:	2100      	movs	r1, #0
 8008546:	2001      	movs	r0, #1
 8008548:	f7fa fadb 	bl	8002b02 <EEPROM_LightStateUpdate>
		sprintf((char*)Msg, "ON");
		EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		LightsButtonState[0] = 1;
		EEPROM_LightStateUpdate(1, 1);
	}
}
 800854c:	e027      	b.n	800859e <firstLightTurn+0xb2>
		SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 800854e:	200d      	movs	r0, #13
 8008550:	f000 fc72 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=5\n"); // Print message to ESP
 8008554:	4919      	ldr	r1, [pc, #100]	; (80085bc <firstLightTurn+0xd0>)
 8008556:	4815      	ldr	r0, [pc, #84]	; (80085ac <firstLightTurn+0xc0>)
 8008558:	f001 fb96 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800855c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	2305      	movs	r3, #5
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	2315      	movs	r3, #21
 8008568:	2221      	movs	r2, #33	; 0x21
 800856a:	2141      	movs	r1, #65	; 0x41
 800856c:	20c8      	movs	r0, #200	; 0xc8
 800856e:	f7f9 f8da 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "ON");
 8008572:	4913      	ldr	r1, [pc, #76]	; (80085c0 <firstLightTurn+0xd4>)
 8008574:	480f      	ldr	r0, [pc, #60]	; (80085b4 <firstLightTurn+0xc8>)
 8008576:	f009 fb7b 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800857a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	2300      	movs	r3, #0
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	2300      	movs	r3, #0
 8008586:	2243      	movs	r2, #67	; 0x43
 8008588:	21cb      	movs	r1, #203	; 0xcb
 800858a:	480a      	ldr	r0, [pc, #40]	; (80085b4 <firstLightTurn+0xc8>)
 800858c:	f7f9 fb36 	bl	8001bfc <EF_PutString>
		LightsButtonState[0] = 1;
 8008590:	4b09      	ldr	r3, [pc, #36]	; (80085b8 <firstLightTurn+0xcc>)
 8008592:	2201      	movs	r2, #1
 8008594:	701a      	strb	r2, [r3, #0]
		EEPROM_LightStateUpdate(1, 1);
 8008596:	2101      	movs	r1, #1
 8008598:	2001      	movs	r0, #1
 800859a:	f7fa fab2 	bl	8002b02 <EEPROM_LightStateUpdate>
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	08015efc 	.word	0x08015efc
 80085ac:	200006bc 	.word	0x200006bc
 80085b0:	08015e7c 	.word	0x08015e7c
 80085b4:	200002c0 	.word	0x200002c0
 80085b8:	200002ac 	.word	0x200002ac
 80085bc:	08015f08 	.word	0x08015f08
 80085c0:	08015e80 	.word	0x08015e80

080085c4 <secondLightTurn>:
void secondLightTurn(uint8_t NewState)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af02      	add	r7, sp, #8
 80085ca:	4603      	mov	r3, r0
 80085cc:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 80085ce:	79fb      	ldrb	r3, [r7, #7]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d128      	bne.n	8008626 <secondLightTurn+0x62>
	{
		SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 80085d4:	2010      	movs	r0, #16
 80085d6:	f000 fc2f 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=6\n"); // Print message to ESP
 80085da:	4929      	ldr	r1, [pc, #164]	; (8008680 <secondLightTurn+0xbc>)
 80085dc:	4829      	ldr	r0, [pc, #164]	; (8008684 <secondLightTurn+0xc0>)
 80085de:	f001 fb53 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80085e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	2305      	movs	r3, #5
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2315      	movs	r3, #21
 80085ee:	2221      	movs	r2, #33	; 0x21
 80085f0:	215f      	movs	r1, #95	; 0x5f
 80085f2:	20c8      	movs	r0, #200	; 0xc8
 80085f4:	f7f9 f897 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "OFF");
 80085f8:	4923      	ldr	r1, [pc, #140]	; (8008688 <secondLightTurn+0xc4>)
 80085fa:	4824      	ldr	r0, [pc, #144]	; (800868c <secondLightTurn+0xc8>)
 80085fc:	f009 fb38 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008600:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	2300      	movs	r3, #0
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	2261      	movs	r2, #97	; 0x61
 800860e:	21cb      	movs	r1, #203	; 0xcb
 8008610:	481e      	ldr	r0, [pc, #120]	; (800868c <secondLightTurn+0xc8>)
 8008612:	f7f9 faf3 	bl	8001bfc <EF_PutString>
		LightsButtonState[1] = 0;
 8008616:	4b1e      	ldr	r3, [pc, #120]	; (8008690 <secondLightTurn+0xcc>)
 8008618:	2200      	movs	r2, #0
 800861a:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 0);
 800861c:	2100      	movs	r1, #0
 800861e:	2002      	movs	r0, #2
 8008620:	f7fa fa6f 	bl	8002b02 <EEPROM_LightStateUpdate>
		sprintf((char*)Msg, "ON");
		EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		LightsButtonState[1] = 1;
		EEPROM_LightStateUpdate(2, 1);
	}
}
 8008624:	e027      	b.n	8008676 <secondLightTurn+0xb2>
		SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 8008626:	200f      	movs	r0, #15
 8008628:	f000 fc06 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=6\n"); // Print message to ESP
 800862c:	4919      	ldr	r1, [pc, #100]	; (8008694 <secondLightTurn+0xd0>)
 800862e:	4815      	ldr	r0, [pc, #84]	; (8008684 <secondLightTurn+0xc0>)
 8008630:	f001 fb2a 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8008634:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	2305      	movs	r3, #5
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	2315      	movs	r3, #21
 8008640:	2221      	movs	r2, #33	; 0x21
 8008642:	215f      	movs	r1, #95	; 0x5f
 8008644:	20c8      	movs	r0, #200	; 0xc8
 8008646:	f7f9 f86e 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "ON");
 800864a:	4913      	ldr	r1, [pc, #76]	; (8008698 <secondLightTurn+0xd4>)
 800864c:	480f      	ldr	r0, [pc, #60]	; (800868c <secondLightTurn+0xc8>)
 800864e:	f009 fb0f 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008652:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	2300      	movs	r3, #0
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	2300      	movs	r3, #0
 800865e:	2261      	movs	r2, #97	; 0x61
 8008660:	21cb      	movs	r1, #203	; 0xcb
 8008662:	480a      	ldr	r0, [pc, #40]	; (800868c <secondLightTurn+0xc8>)
 8008664:	f7f9 faca 	bl	8001bfc <EF_PutString>
		LightsButtonState[1] = 1;
 8008668:	4b09      	ldr	r3, [pc, #36]	; (8008690 <secondLightTurn+0xcc>)
 800866a:	2201      	movs	r2, #1
 800866c:	705a      	strb	r2, [r3, #1]
		EEPROM_LightStateUpdate(2, 1);
 800866e:	2101      	movs	r1, #1
 8008670:	2002      	movs	r0, #2
 8008672:	f7fa fa46 	bl	8002b02 <EEPROM_LightStateUpdate>
}
 8008676:	bf00      	nop
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	08015f14 	.word	0x08015f14
 8008684:	200006bc 	.word	0x200006bc
 8008688:	08015e7c 	.word	0x08015e7c
 800868c:	200002c0 	.word	0x200002c0
 8008690:	200002ac 	.word	0x200002ac
 8008694:	08015f20 	.word	0x08015f20
 8008698:	08015e80 	.word	0x08015e80

0800869c <thirdLightTurn>:
void thirdLightTurn(uint8_t NewState)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	4603      	mov	r3, r0
 80086a4:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d128      	bne.n	80086fe <thirdLightTurn+0x62>
	{
		SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 80086ac:	2012      	movs	r0, #18
 80086ae:	f000 fbc3 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=7\n"); // Print message to ESP
 80086b2:	4929      	ldr	r1, [pc, #164]	; (8008758 <thirdLightTurn+0xbc>)
 80086b4:	4829      	ldr	r0, [pc, #164]	; (800875c <thirdLightTurn+0xc0>)
 80086b6:	f001 fae7 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80086ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80086be:	9301      	str	r3, [sp, #4]
 80086c0:	2305      	movs	r3, #5
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	2315      	movs	r3, #21
 80086c6:	2221      	movs	r2, #33	; 0x21
 80086c8:	217d      	movs	r1, #125	; 0x7d
 80086ca:	20c8      	movs	r0, #200	; 0xc8
 80086cc:	f7f9 f82b 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "OFF");
 80086d0:	4923      	ldr	r1, [pc, #140]	; (8008760 <thirdLightTurn+0xc4>)
 80086d2:	4824      	ldr	r0, [pc, #144]	; (8008764 <thirdLightTurn+0xc8>)
 80086d4:	f009 facc 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80086d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	2300      	movs	r3, #0
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	2300      	movs	r3, #0
 80086e4:	227f      	movs	r2, #127	; 0x7f
 80086e6:	21cb      	movs	r1, #203	; 0xcb
 80086e8:	481e      	ldr	r0, [pc, #120]	; (8008764 <thirdLightTurn+0xc8>)
 80086ea:	f7f9 fa87 	bl	8001bfc <EF_PutString>
		LightsButtonState[2] = 0;
 80086ee:	4b1e      	ldr	r3, [pc, #120]	; (8008768 <thirdLightTurn+0xcc>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 0);
 80086f4:	2100      	movs	r1, #0
 80086f6:	2003      	movs	r0, #3
 80086f8:	f7fa fa03 	bl	8002b02 <EEPROM_LightStateUpdate>
		sprintf((char*)Msg, "ON");
		EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		LightsButtonState[2] = 1;
		EEPROM_LightStateUpdate(3, 1);
	}
}
 80086fc:	e027      	b.n	800874e <thirdLightTurn+0xb2>
		SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 80086fe:	2011      	movs	r0, #17
 8008700:	f000 fb9a 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=7\n"); // Print message to ESP
 8008704:	4919      	ldr	r1, [pc, #100]	; (800876c <thirdLightTurn+0xd0>)
 8008706:	4815      	ldr	r0, [pc, #84]	; (800875c <thirdLightTurn+0xc0>)
 8008708:	f001 fabe 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800870c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	2305      	movs	r3, #5
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	2315      	movs	r3, #21
 8008718:	2221      	movs	r2, #33	; 0x21
 800871a:	217d      	movs	r1, #125	; 0x7d
 800871c:	20c8      	movs	r0, #200	; 0xc8
 800871e:	f7f9 f802 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "ON");
 8008722:	4913      	ldr	r1, [pc, #76]	; (8008770 <thirdLightTurn+0xd4>)
 8008724:	480f      	ldr	r0, [pc, #60]	; (8008764 <thirdLightTurn+0xc8>)
 8008726:	f009 faa3 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800872a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800872e:	9301      	str	r3, [sp, #4]
 8008730:	2300      	movs	r3, #0
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	2300      	movs	r3, #0
 8008736:	227f      	movs	r2, #127	; 0x7f
 8008738:	21cb      	movs	r1, #203	; 0xcb
 800873a:	480a      	ldr	r0, [pc, #40]	; (8008764 <thirdLightTurn+0xc8>)
 800873c:	f7f9 fa5e 	bl	8001bfc <EF_PutString>
		LightsButtonState[2] = 1;
 8008740:	4b09      	ldr	r3, [pc, #36]	; (8008768 <thirdLightTurn+0xcc>)
 8008742:	2201      	movs	r2, #1
 8008744:	709a      	strb	r2, [r3, #2]
		EEPROM_LightStateUpdate(3, 1);
 8008746:	2101      	movs	r1, #1
 8008748:	2003      	movs	r0, #3
 800874a:	f7fa f9da 	bl	8002b02 <EEPROM_LightStateUpdate>
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	08015f2c 	.word	0x08015f2c
 800875c:	200006bc 	.word	0x200006bc
 8008760:	08015e7c 	.word	0x08015e7c
 8008764:	200002c0 	.word	0x200002c0
 8008768:	200002ac 	.word	0x200002ac
 800876c:	08015f38 	.word	0x08015f38
 8008770:	08015e80 	.word	0x08015e80

08008774 <fourthLightTurn>:
void fourthLightTurn(uint8_t NewState)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af02      	add	r7, sp, #8
 800877a:	4603      	mov	r3, r0
 800877c:	71fb      	strb	r3, [r7, #7]
	if(0 == NewState) //Turn OFF
 800877e:	79fb      	ldrb	r3, [r7, #7]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d128      	bne.n	80087d6 <fourthLightTurn+0x62>
	{
		SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 8008784:	2014      	movs	r0, #20
 8008786:	f000 fb57 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYOFF=8\n"); // Print message to ESP
 800878a:	4929      	ldr	r1, [pc, #164]	; (8008830 <fourthLightTurn+0xbc>)
 800878c:	4829      	ldr	r0, [pc, #164]	; (8008834 <fourthLightTurn+0xc0>)
 800878e:	f001 fa7b 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8008792:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	2305      	movs	r3, #5
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	2315      	movs	r3, #21
 800879e:	2221      	movs	r2, #33	; 0x21
 80087a0:	219b      	movs	r1, #155	; 0x9b
 80087a2:	20c8      	movs	r0, #200	; 0xc8
 80087a4:	f7f8 ffbf 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "OFF");
 80087a8:	4923      	ldr	r1, [pc, #140]	; (8008838 <fourthLightTurn+0xc4>)
 80087aa:	4824      	ldr	r0, [pc, #144]	; (800883c <fourthLightTurn+0xc8>)
 80087ac:	f009 fa60 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80087b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80087b4:	9301      	str	r3, [sp, #4]
 80087b6:	2300      	movs	r3, #0
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	2300      	movs	r3, #0
 80087bc:	229d      	movs	r2, #157	; 0x9d
 80087be:	21cb      	movs	r1, #203	; 0xcb
 80087c0:	481e      	ldr	r0, [pc, #120]	; (800883c <fourthLightTurn+0xc8>)
 80087c2:	f7f9 fa1b 	bl	8001bfc <EF_PutString>
		LightsButtonState[3] = 0;
 80087c6:	4b1e      	ldr	r3, [pc, #120]	; (8008840 <fourthLightTurn+0xcc>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 0);
 80087cc:	2100      	movs	r1, #0
 80087ce:	2004      	movs	r0, #4
 80087d0:	f7fa f997 	bl	8002b02 <EEPROM_LightStateUpdate>
		sprintf((char*)Msg, "ON");
		EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		LightsButtonState[3] = 1;
		EEPROM_LightStateUpdate(4, 1);
	}
}
 80087d4:	e027      	b.n	8008826 <fourthLightTurn+0xb2>
		SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 80087d6:	2013      	movs	r0, #19
 80087d8:	f000 fb2e 	bl	8008e38 <SendComand>
		UARTDMA_Print(&huartdma1, "RELAYON=8\n"); // Print message to ESP
 80087dc:	4919      	ldr	r1, [pc, #100]	; (8008844 <fourthLightTurn+0xd0>)
 80087de:	4815      	ldr	r0, [pc, #84]	; (8008834 <fourthLightTurn+0xc0>)
 80087e0:	f001 fa52 	bl	8009c88 <UARTDMA_Print>
		GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80087e4:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	2305      	movs	r3, #5
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	2315      	movs	r3, #21
 80087f0:	2221      	movs	r2, #33	; 0x21
 80087f2:	219b      	movs	r1, #155	; 0x9b
 80087f4:	20c8      	movs	r0, #200	; 0xc8
 80087f6:	f7f8 ff96 	bl	8001726 <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "ON");
 80087fa:	4913      	ldr	r1, [pc, #76]	; (8008848 <fourthLightTurn+0xd4>)
 80087fc:	480f      	ldr	r0, [pc, #60]	; (800883c <fourthLightTurn+0xc8>)
 80087fe:	f009 fa37 	bl	8011c70 <siprintf>
		EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8008802:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	2300      	movs	r3, #0
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	2300      	movs	r3, #0
 800880e:	229d      	movs	r2, #157	; 0x9d
 8008810:	21cb      	movs	r1, #203	; 0xcb
 8008812:	480a      	ldr	r0, [pc, #40]	; (800883c <fourthLightTurn+0xc8>)
 8008814:	f7f9 f9f2 	bl	8001bfc <EF_PutString>
		LightsButtonState[3] = 1;
 8008818:	4b09      	ldr	r3, [pc, #36]	; (8008840 <fourthLightTurn+0xcc>)
 800881a:	2201      	movs	r2, #1
 800881c:	70da      	strb	r2, [r3, #3]
		EEPROM_LightStateUpdate(4, 1);
 800881e:	2101      	movs	r1, #1
 8008820:	2004      	movs	r0, #4
 8008822:	f7fa f96e 	bl	8002b02 <EEPROM_LightStateUpdate>
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	08015f44 	.word	0x08015f44
 8008834:	200006bc 	.word	0x200006bc
 8008838:	08015e7c 	.word	0x08015e7c
 800883c:	200002c0 	.word	0x200002c0
 8008840:	200002ac 	.word	0x200002ac
 8008844:	08015f50 	.word	0x08015f50
 8008848:	08015e80 	.word	0x08015e80

0800884c <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b094      	sub	sp, #80	; 0x50
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8008854:	f107 0308 	add.w	r3, r7, #8
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 f9e3 	bl	8009c26 <UARTDMA_GetLineFromReceiveBuffer>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d15f      	bne.n	8008926 <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8008866:	f107 0308 	add.w	r3, r7, #8
 800886a:	4931      	ldr	r1, [pc, #196]	; (8008930 <UART_ParseLine+0xe4>)
 800886c:	4618      	mov	r0, r3
 800886e:	f00a f857 	bl	8012920 <strtok>
 8008872:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8008874:	492f      	ldr	r1, [pc, #188]	; (8008934 <UART_ParseLine+0xe8>)
 8008876:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008878:	f7f7 fcb2 	bl	80001e0 <strcmp>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d102      	bne.n	8008888 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8008882:	f000 f869 	bl	8008958 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8008886:	e04e      	b.n	8008926 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8008888:	492b      	ldr	r1, [pc, #172]	; (8008938 <UART_ParseLine+0xec>)
 800888a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800888c:	f7f7 fca8 	bl	80001e0 <strcmp>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d102      	bne.n	800889c <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8008896:	f000 f8ad 	bl	80089f4 <UART_ParseAnswStatus>
}
 800889a:	e044      	b.n	8008926 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 800889c:	4927      	ldr	r1, [pc, #156]	; (800893c <UART_ParseLine+0xf0>)
 800889e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80088a0:	f7f7 fc9e 	bl	80001e0 <strcmp>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d102      	bne.n	80088b0 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 80088aa:	f000 f8ab 	bl	8008a04 <UART_ParseAnswTemp>
}
 80088ae:	e03a      	b.n	8008926 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 80088b0:	4923      	ldr	r1, [pc, #140]	; (8008940 <UART_ParseLine+0xf4>)
 80088b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80088b4:	f7f7 fc94 	bl	80001e0 <strcmp>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d102      	bne.n	80088c4 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 80088be:	f000 f953 	bl	8008b68 <UART_ParseAnswPres>
}
 80088c2:	e030      	b.n	8008926 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 80088c4:	491f      	ldr	r1, [pc, #124]	; (8008944 <UART_ParseLine+0xf8>)
 80088c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80088c8:	f7f7 fc8a 	bl	80001e0 <strcmp>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d102      	bne.n	80088d8 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 80088d2:	f000 f9d7 	bl	8008c84 <UART_ParseAnswChangeRelayState>
}
 80088d6:	e026      	b.n	8008926 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 80088d8:	491b      	ldr	r1, [pc, #108]	; (8008948 <UART_ParseLine+0xfc>)
 80088da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80088dc:	f7f7 fc80 	bl	80001e0 <strcmp>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d102      	bne.n	80088ec <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 80088e6:	f000 f9d4 	bl	8008c92 <UART_ParseAnswChangeLightState>
}
 80088ea:	e01c      	b.n	8008926 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 80088ec:	4917      	ldr	r1, [pc, #92]	; (800894c <UART_ParseLine+0x100>)
 80088ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80088f0:	f7f7 fc76 	bl	80001e0 <strcmp>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d102      	bne.n	8008900 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 80088fa:	f000 f9d1 	bl	8008ca0 <UART_ParseAnswRelayStateStatus>
}
 80088fe:	e012      	b.n	8008926 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8008900:	4913      	ldr	r1, [pc, #76]	; (8008950 <UART_ParseLine+0x104>)
 8008902:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008904:	f7f7 fc6c 	bl	80001e0 <strcmp>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d102      	bne.n	8008914 <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 800890e:	f000 fa2d 	bl	8008d6c <UART_ParseAnswLightsStateStatus>
}
 8008912:	e008      	b.n	8008926 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 8008914:	490f      	ldr	r1, [pc, #60]	; (8008954 <UART_ParseLine+0x108>)
 8008916:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008918:	f7f7 fc62 	bl	80001e0 <strcmp>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 8008922:	f000 f96d 	bl	8008c00 <UART_ParseAnswDist>
}
 8008926:	bf00      	nop
 8008928:	3750      	adds	r7, #80	; 0x50
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	08015f5c 	.word	0x08015f5c
 8008934:	08015f60 	.word	0x08015f60
 8008938:	08015f64 	.word	0x08015f64
 800893c:	08015f6c 	.word	0x08015f6c
 8008940:	08015f74 	.word	0x08015f74
 8008944:	08015f7c 	.word	0x08015f7c
 8008948:	08015f88 	.word	0x08015f88
 800894c:	08015f94 	.word	0x08015f94
 8008950:	08015fa0 	.word	0x08015fa0
 8008954:	08015fac 	.word	0x08015fac

08008958 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800895e:	491f      	ldr	r1, [pc, #124]	; (80089dc <UART_ParseLED+0x84>)
 8008960:	2000      	movs	r0, #0
 8008962:	f009 ffdd 	bl	8012920 <strtok>
 8008966:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d031      	beq.n	80089d4 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b2f      	cmp	r3, #47	; 0x2f
 8008976:	d903      	bls.n	8008980 <UART_ParseLED+0x28>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	2b39      	cmp	r3, #57	; 0x39
 800897e:	d904      	bls.n	800898a <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8008980:	4917      	ldr	r1, [pc, #92]	; (80089e0 <UART_ParseLED+0x88>)
 8008982:	4818      	ldr	r0, [pc, #96]	; (80089e4 <UART_ParseLED+0x8c>)
 8008984:	f001 f980 	bl	8009c88 <UARTDMA_Print>
			return;	// And exit parsing
 8008988:	e024      	b.n	80089d4 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f008 fab9 	bl	8010f02 <atoi>
 8008990:	4603      	mov	r3, r0
 8008992:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d10a      	bne.n	80089b0 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800899a:	2200      	movs	r2, #0
 800899c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80089a0:	4811      	ldr	r0, [pc, #68]	; (80089e8 <UART_ParseLED+0x90>)
 80089a2:	f002 fc05 	bl	800b1b0 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 80089a6:	4911      	ldr	r1, [pc, #68]	; (80089ec <UART_ParseLED+0x94>)
 80089a8:	480e      	ldr	r0, [pc, #56]	; (80089e4 <UART_ParseLED+0x8c>)
 80089aa:	f001 f96d 	bl	8009c88 <UARTDMA_Print>
 80089ae:	e011      	b.n	80089d4 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10a      	bne.n	80089cc <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80089b6:	2201      	movs	r2, #1
 80089b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80089bc:	480a      	ldr	r0, [pc, #40]	; (80089e8 <UART_ParseLED+0x90>)
 80089be:	f002 fbf7 	bl	800b1b0 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 80089c2:	490b      	ldr	r1, [pc, #44]	; (80089f0 <UART_ParseLED+0x98>)
 80089c4:	4807      	ldr	r0, [pc, #28]	; (80089e4 <UART_ParseLED+0x8c>)
 80089c6:	f001 f95f 	bl	8009c88 <UARTDMA_Print>
 80089ca:	e003      	b.n	80089d4 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 80089cc:	4904      	ldr	r1, [pc, #16]	; (80089e0 <UART_ParseLED+0x88>)
 80089ce:	4805      	ldr	r0, [pc, #20]	; (80089e4 <UART_ParseLED+0x8c>)
 80089d0:	f001 f95a 	bl	8009c88 <UARTDMA_Print>
		}
	}
}
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	08015fb4 	.word	0x08015fb4
 80089e0:	08015fb8 	.word	0x08015fb8
 80089e4:	200004f0 	.word	0x200004f0
 80089e8:	40020800 	.word	0x40020800
 80089ec:	08015fc8 	.word	0x08015fc8
 80089f0:	08015fd4 	.word	0x08015fd4

080089f4 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 80089f4:	b480      	push	{r7}
 80089f6:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 80089f8:	bf00      	nop
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
	...

08008a04 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8008a0e:	494e      	ldr	r1, [pc, #312]	; (8008b48 <UART_ParseAnswTemp+0x144>)
 8008a10:	2000      	movs	r0, #0
 8008a12:	f009 ff85 	bl	8012920 <strtok>
 8008a16:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 808f 	beq.w	8008b40 <UART_ParseAnswTemp+0x13c>
	{
			NrCzujnika = atoi(ParsePointer);
 8008a22:	68b8      	ldr	r0, [r7, #8]
 8008a24:	f008 fa6d 	bl	8010f02 <atoi>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d010      	beq.n	8008a56 <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008a34:	4944      	ldr	r1, [pc, #272]	; (8008b48 <UART_ParseAnswTemp+0x144>)
 8008a36:	2000      	movs	r0, #0
 8008a38:	f009 ff72 	bl	8012920 <strtok>
 8008a3c:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f008 fa5c 	bl	8010efc <atof>
 8008a44:	ec53 2b10 	vmov	r2, r3, d0
 8008a48:	4610      	mov	r0, r2
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	f7f8 f8e4 	bl	8000c18 <__aeabi_d2f>
 8008a50:	4603      	mov	r3, r0
 8008a52:	4a3e      	ldr	r2, [pc, #248]	; (8008b4c <UART_ParseAnswTemp+0x148>)
 8008a54:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8008a56:	4b3e      	ldr	r3, [pc, #248]	; (8008b50 <UART_ParseAnswTemp+0x14c>)
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d170      	bne.n	8008b40 <UART_ParseAnswTemp+0x13c>
			{
				if(NrCzujnika == 1)
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d120      	bne.n	8008aa6 <UART_ParseAnswTemp+0xa2>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8008a64:	483b      	ldr	r0, [pc, #236]	; (8008b54 <UART_ParseAnswTemp+0x150>)
 8008a66:	f7f8 feaf 	bl	80017c8 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8008a6a:	4b38      	ldr	r3, [pc, #224]	; (8008b4c <UART_ParseAnswTemp+0x148>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7f7 fd82 	bl	8000578 <__aeabi_f2d>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4937      	ldr	r1, [pc, #220]	; (8008b58 <UART_ParseAnswTemp+0x154>)
 8008a7a:	4838      	ldr	r0, [pc, #224]	; (8008b5c <UART_ParseAnswTemp+0x158>)
 8008a7c:	f009 f8f8 	bl	8011c70 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008a80:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	2301      	movs	r3, #1
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	2250      	movs	r2, #80	; 0x50
 8008a8e:	2114      	movs	r1, #20
 8008a90:	4832      	ldr	r0, [pc, #200]	; (8008b5c <UART_ParseAnswTemp+0x158>)
 8008a92:	f7f9 f8b3 	bl	8001bfc <EF_PutString>
						ESP_SendCurrentTempOutside(CTemp);
 8008a96:	4b2d      	ldr	r3, [pc, #180]	; (8008b4c <UART_ParseAnswTemp+0x148>)
 8008a98:	edd3 7a00 	vldr	s15, [r3]
 8008a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8008aa0:	f7f8 fad8 	bl	8001054 <ESP_SendCurrentTempOutside>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8008aa4:	e04c      	b.n	8008b40 <UART_ParseAnswTemp+0x13c>
				else if(NrCzujnika == 2)
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d149      	bne.n	8008b40 <UART_ParseAnswTemp+0x13c>
						if (CTemp == 0.0) // Error in connection to ds18b20 - TODO! Send information about error in connection
 8008aac:	4b27      	ldr	r3, [pc, #156]	; (8008b4c <UART_ParseAnswTemp+0x148>)
 8008aae:	edd3 7a00 	vldr	s15, [r3]
 8008ab2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aba:	d11d      	bne.n	8008af8 <UART_ParseAnswTemp+0xf4>
							CTemp = LCTemp;
 8008abc:	4b28      	ldr	r3, [pc, #160]	; (8008b60 <UART_ParseAnswTemp+0x15c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a22      	ldr	r2, [pc, #136]	; (8008b4c <UART_ParseAnswTemp+0x148>)
 8008ac2:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8008ac4:	4823      	ldr	r0, [pc, #140]	; (8008b54 <UART_ParseAnswTemp+0x150>)
 8008ac6:	f7f8 fe7f 	bl	80017c8 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008aca:	4b20      	ldr	r3, [pc, #128]	; (8008b4c <UART_ParseAnswTemp+0x148>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7f7 fd52 	bl	8000578 <__aeabi_f2d>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4922      	ldr	r1, [pc, #136]	; (8008b64 <UART_ParseAnswTemp+0x160>)
 8008ada:	4820      	ldr	r0, [pc, #128]	; (8008b5c <UART_ParseAnswTemp+0x158>)
 8008adc:	f009 f8c8 	bl	8011c70 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008ae0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	2300      	movs	r3, #0
 8008aec:	226e      	movs	r2, #110	; 0x6e
 8008aee:	2114      	movs	r1, #20
 8008af0:	481a      	ldr	r0, [pc, #104]	; (8008b5c <UART_ParseAnswTemp+0x158>)
 8008af2:	f7f9 f883 	bl	8001bfc <EF_PutString>
	}
 8008af6:	e023      	b.n	8008b40 <UART_ParseAnswTemp+0x13c>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8008af8:	4816      	ldr	r0, [pc, #88]	; (8008b54 <UART_ParseAnswTemp+0x150>)
 8008afa:	f7f8 fe65 	bl	80017c8 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008afe:	4b13      	ldr	r3, [pc, #76]	; (8008b4c <UART_ParseAnswTemp+0x148>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7f7 fd38 	bl	8000578 <__aeabi_f2d>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	4915      	ldr	r1, [pc, #84]	; (8008b64 <UART_ParseAnswTemp+0x160>)
 8008b0e:	4813      	ldr	r0, [pc, #76]	; (8008b5c <UART_ParseAnswTemp+0x158>)
 8008b10:	f009 f8ae 	bl	8011c70 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008b14:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	226e      	movs	r2, #110	; 0x6e
 8008b22:	2114      	movs	r1, #20
 8008b24:	480d      	ldr	r0, [pc, #52]	; (8008b5c <UART_ParseAnswTemp+0x158>)
 8008b26:	f7f9 f869 	bl	8001bfc <EF_PutString>
							LCTemp = CTemp;
 8008b2a:	4b08      	ldr	r3, [pc, #32]	; (8008b4c <UART_ParseAnswTemp+0x148>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a0c      	ldr	r2, [pc, #48]	; (8008b60 <UART_ParseAnswTemp+0x15c>)
 8008b30:	6013      	str	r3, [r2, #0]
							ESP_SendCurrentTempInside(CTemp);
 8008b32:	4b06      	ldr	r3, [pc, #24]	; (8008b4c <UART_ParseAnswTemp+0x148>)
 8008b34:	edd3 7a00 	vldr	s15, [r3]
 8008b38:	eeb0 0a67 	vmov.f32	s0, s15
 8008b3c:	f7f8 fa6e 	bl	800101c <ESP_SendCurrentTempInside>
	}
 8008b40:	bf00      	nop
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	08015fb4 	.word	0x08015fb4
 8008b4c:	20000294 	.word	0x20000294
 8008b50:	20000290 	.word	0x20000290
 8008b54:	080293e8 	.word	0x080293e8
 8008b58:	08015fe0 	.word	0x08015fe0
 8008b5c:	200002c0 	.word	0x200002c0
 8008b60:	20000298 	.word	0x20000298
 8008b64:	08015ff4 	.word	0x08015ff4

08008b68 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8008b6e:	491e      	ldr	r1, [pc, #120]	; (8008be8 <UART_ParseAnswPres+0x80>)
 8008b70:	2000      	movs	r0, #0
 8008b72:	f009 fed5 	bl	8012920 <strtok>
 8008b76:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d02f      	beq.n	8008be0 <UART_ParseAnswPres+0x78>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f008 f9bb 	bl	8010efc <atof>
 8008b86:	ec53 2b10 	vmov	r2, r3, d0
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	f7f8 f843 	bl	8000c18 <__aeabi_d2f>
 8008b92:	4603      	mov	r3, r0
 8008b94:	4a15      	ldr	r2, [pc, #84]	; (8008bec <UART_ParseAnswPres+0x84>)
 8008b96:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8008b98:	4b15      	ldr	r3, [pc, #84]	; (8008bf0 <UART_ParseAnswPres+0x88>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d11f      	bne.n	8008be0 <UART_ParseAnswPres+0x78>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8008ba0:	4814      	ldr	r0, [pc, #80]	; (8008bf4 <UART_ParseAnswPres+0x8c>)
 8008ba2:	f7f8 fe11 	bl	80017c8 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8008ba6:	4b11      	ldr	r3, [pc, #68]	; (8008bec <UART_ParseAnswPres+0x84>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7f7 fce4 	bl	8000578 <__aeabi_f2d>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4910      	ldr	r1, [pc, #64]	; (8008bf8 <UART_ParseAnswPres+0x90>)
 8008bb6:	4811      	ldr	r0, [pc, #68]	; (8008bfc <UART_ParseAnswPres+0x94>)
 8008bb8:	f009 f85a 	bl	8011c70 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008bbc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	22aa      	movs	r2, #170	; 0xaa
 8008bca:	2114      	movs	r1, #20
 8008bcc:	480b      	ldr	r0, [pc, #44]	; (8008bfc <UART_ParseAnswPres+0x94>)
 8008bce:	f7f9 f815 	bl	8001bfc <EF_PutString>
			ESP_SendCurrentPressure(CPres);
 8008bd2:	4b06      	ldr	r3, [pc, #24]	; (8008bec <UART_ParseAnswPres+0x84>)
 8008bd4:	edd3 7a00 	vldr	s15, [r3]
 8008bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8008bdc:	f7f8 fa56 	bl	800108c <ESP_SendCurrentPressure>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	08015fb4 	.word	0x08015fb4
 8008bec:	2000029c 	.word	0x2000029c
 8008bf0:	20000290 	.word	0x20000290
 8008bf4:	080293e8 	.word	0x080293e8
 8008bf8:	08016008 	.word	0x08016008
 8008bfc:	200002c0 	.word	0x200002c0

08008c00 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8008c06:	4919      	ldr	r1, [pc, #100]	; (8008c6c <UART_ParseAnswDist+0x6c>)
 8008c08:	2000      	movs	r0, #0
 8008c0a:	f009 fe89 	bl	8012920 <strtok>
 8008c0e:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d024      	beq.n	8008c62 <UART_ParseAnswDist+0x62>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f008 f972 	bl	8010f02 <atoi>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	461a      	mov	r2, r3
 8008c22:	4b13      	ldr	r3, [pc, #76]	; (8008c70 <UART_ParseAnswDist+0x70>)
 8008c24:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8008c26:	4b13      	ldr	r3, [pc, #76]	; (8008c74 <UART_ParseAnswDist+0x74>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d119      	bne.n	8008c62 <UART_ParseAnswDist+0x62>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8008c2e:	4812      	ldr	r0, [pc, #72]	; (8008c78 <UART_ParseAnswDist+0x78>)
 8008c30:	f7f8 fdca 	bl	80017c8 <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 8008c34:	4b0e      	ldr	r3, [pc, #56]	; (8008c70 <UART_ParseAnswDist+0x70>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	4910      	ldr	r1, [pc, #64]	; (8008c7c <UART_ParseAnswDist+0x7c>)
 8008c3c:	4810      	ldr	r0, [pc, #64]	; (8008c80 <UART_ParseAnswDist+0x80>)
 8008c3e:	f009 f817 	bl	8011c70 <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008c42:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	2301      	movs	r3, #1
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	228c      	movs	r2, #140	; 0x8c
 8008c50:	21ad      	movs	r1, #173	; 0xad
 8008c52:	480b      	ldr	r0, [pc, #44]	; (8008c80 <UART_ParseAnswDist+0x80>)
 8008c54:	f7f8 ffd2 	bl	8001bfc <EF_PutString>
			ESP_SendCurrentWaterLvl(CDist2water);
 8008c58:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <UART_ParseAnswDist+0x70>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7f8 fa31 	bl	80010c4 <ESP_SendCurrentWaterLvl>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	08015fb4 	.word	0x08015fb4
 8008c70:	200002a4 	.word	0x200002a4
 8008c74:	20000290 	.word	0x20000290
 8008c78:	080293e8 	.word	0x080293e8
 8008c7c:	08016020 	.word	0x08016020
 8008c80:	200002c0 	.word	0x200002c0

08008c84 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
	//TODO!
}
 8008c88:	bf00      	nop
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8008c92:	b480      	push	{r7}
 8008c94:	af00      	add	r7, sp, #0
	//TODO!
}
 8008c96:	bf00      	nop
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	71fb      	strb	r3, [r7, #7]
 8008caa:	e04a      	b.n	8008d42 <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008cac:	4928      	ldr	r1, [pc, #160]	; (8008d50 <UART_ParseAnswRelayStateStatus+0xb0>)
 8008cae:	2000      	movs	r0, #0
 8008cb0:	f009 fe36 	bl	8012920 <strtok>
 8008cb4:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d02f      	beq.n	8008d1e <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	71bb      	strb	r3, [r7, #6]
 8008cc2:	e025      	b.n	8008d10 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8008cc4:	79bb      	ldrb	r3, [r7, #6]
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	4413      	add	r3, r2
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	2b2f      	cmp	r3, #47	; 0x2f
 8008cce:	d905      	bls.n	8008cdc <UART_ParseAnswRelayStateStatus+0x3c>
 8008cd0:	79bb      	ldrb	r3, [r7, #6]
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2b39      	cmp	r3, #57	; 0x39
 8008cda:	d90e      	bls.n	8008cfa <UART_ParseAnswRelayStateStatus+0x5a>
 8008cdc:	79bb      	ldrb	r3, [r7, #6]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ce6:	d008      	beq.n	8008cfa <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8008ce8:	491a      	ldr	r1, [pc, #104]	; (8008d54 <UART_ParseAnswRelayStateStatus+0xb4>)
 8008cea:	481b      	ldr	r0, [pc, #108]	; (8008d58 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008cec:	f008 ffc0 	bl	8011c70 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008cf0:	4919      	ldr	r1, [pc, #100]	; (8008d58 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008cf2:	481a      	ldr	r0, [pc, #104]	; (8008d5c <UART_ParseAnswRelayStateStatus+0xbc>)
 8008cf4:	f000 ffc8 	bl	8009c88 <UARTDMA_Print>
					return;	// And exit parsing
 8008cf8:	e026      	b.n	8008d48 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8008cfa:	6838      	ldr	r0, [r7, #0]
 8008cfc:	f008 f901 	bl	8010f02 <atoi>
 8008d00:	4602      	mov	r2, r0
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	b2d1      	uxtb	r1, r2
 8008d06:	4a16      	ldr	r2, [pc, #88]	; (8008d60 <UART_ParseAnswRelayStateStatus+0xc0>)
 8008d08:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008d0a:	79bb      	ldrb	r3, [r7, #6]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	71bb      	strb	r3, [r7, #6]
 8008d10:	79bb      	ldrb	r3, [r7, #6]
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	4413      	add	r3, r2
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1d3      	bne.n	8008cc4 <UART_ParseAnswRelayStateStatus+0x24>
 8008d1c:	e008      	b.n	8008d30 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8008d1e:	4911      	ldr	r1, [pc, #68]	; (8008d64 <UART_ParseAnswRelayStateStatus+0xc4>)
 8008d20:	480d      	ldr	r0, [pc, #52]	; (8008d58 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008d22:	f008 ffa5 	bl	8011c70 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008d26:	490c      	ldr	r1, [pc, #48]	; (8008d58 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008d28:	480c      	ldr	r0, [pc, #48]	; (8008d5c <UART_ParseAnswRelayStateStatus+0xbc>)
 8008d2a:	f000 ffad 	bl	8009c88 <UARTDMA_Print>
			return;	// And exit parsing
 8008d2e:	e00b      	b.n	8008d48 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8008d30:	4b0d      	ldr	r3, [pc, #52]	; (8008d68 <UART_ParseAnswRelayStateStatus+0xc8>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d101      	bne.n	8008d3c <UART_ParseAnswRelayStateStatus+0x9c>
 8008d38:	f7fc f8dc 	bl	8004ef4 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008d3c:	79fb      	ldrb	r3, [r7, #7]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	71fb      	strb	r3, [r7, #7]
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d9b1      	bls.n	8008cac <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	08015fb4 	.word	0x08015fb4
 8008d54:	0801602c 	.word	0x0801602c
 8008d58:	20000300 	.word	0x20000300
 8008d5c:	200004f0 	.word	0x200004f0
 8008d60:	200002a8 	.word	0x200002a8
 8008d64:	08016040 	.word	0x08016040
 8008d68:	20000290 	.word	0x20000290

08008d6c <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8008d72:	2300      	movs	r3, #0
 8008d74:	71fb      	strb	r3, [r7, #7]
 8008d76:	e04a      	b.n	8008e0e <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008d78:	4928      	ldr	r1, [pc, #160]	; (8008e1c <UART_ParseAnswLightsStateStatus+0xb0>)
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	f009 fdd0 	bl	8012920 <strtok>
 8008d80:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d02f      	beq.n	8008dea <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	71bb      	strb	r3, [r7, #6]
 8008d8e:	e025      	b.n	8008ddc <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8008d90:	79bb      	ldrb	r3, [r7, #6]
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	4413      	add	r3, r2
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	2b2f      	cmp	r3, #47	; 0x2f
 8008d9a:	d905      	bls.n	8008da8 <UART_ParseAnswLightsStateStatus+0x3c>
 8008d9c:	79bb      	ldrb	r3, [r7, #6]
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	4413      	add	r3, r2
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	2b39      	cmp	r3, #57	; 0x39
 8008da6:	d90e      	bls.n	8008dc6 <UART_ParseAnswLightsStateStatus+0x5a>
 8008da8:	79bb      	ldrb	r3, [r7, #6]
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	4413      	add	r3, r2
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b2e      	cmp	r3, #46	; 0x2e
 8008db2:	d008      	beq.n	8008dc6 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8008db4:	491a      	ldr	r1, [pc, #104]	; (8008e20 <UART_ParseAnswLightsStateStatus+0xb4>)
 8008db6:	481b      	ldr	r0, [pc, #108]	; (8008e24 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008db8:	f008 ff5a 	bl	8011c70 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008dbc:	4919      	ldr	r1, [pc, #100]	; (8008e24 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008dbe:	481a      	ldr	r0, [pc, #104]	; (8008e28 <UART_ParseAnswLightsStateStatus+0xbc>)
 8008dc0:	f000 ff62 	bl	8009c88 <UARTDMA_Print>
					return;	// And exit parsing
 8008dc4:	e026      	b.n	8008e14 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8008dc6:	6838      	ldr	r0, [r7, #0]
 8008dc8:	f008 f89b 	bl	8010f02 <atoi>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	b2d1      	uxtb	r1, r2
 8008dd2:	4a16      	ldr	r2, [pc, #88]	; (8008e2c <UART_ParseAnswLightsStateStatus+0xc0>)
 8008dd4:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008dd6:	79bb      	ldrb	r3, [r7, #6]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	71bb      	strb	r3, [r7, #6]
 8008ddc:	79bb      	ldrb	r3, [r7, #6]
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	4413      	add	r3, r2
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1d3      	bne.n	8008d90 <UART_ParseAnswLightsStateStatus+0x24>
 8008de8:	e008      	b.n	8008dfc <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8008dea:	4911      	ldr	r1, [pc, #68]	; (8008e30 <UART_ParseAnswLightsStateStatus+0xc4>)
 8008dec:	480d      	ldr	r0, [pc, #52]	; (8008e24 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008dee:	f008 ff3f 	bl	8011c70 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008df2:	490c      	ldr	r1, [pc, #48]	; (8008e24 <UART_ParseAnswLightsStateStatus+0xb8>)
 8008df4:	480c      	ldr	r0, [pc, #48]	; (8008e28 <UART_ParseAnswLightsStateStatus+0xbc>)
 8008df6:	f000 ff47 	bl	8009c88 <UARTDMA_Print>
			return;	// And exit parsing
 8008dfa:	e00b      	b.n	8008e14 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 8008dfc:	4b0d      	ldr	r3, [pc, #52]	; (8008e34 <UART_ParseAnswLightsStateStatus+0xc8>)
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b05      	cmp	r3, #5
 8008e02:	d101      	bne.n	8008e08 <UART_ParseAnswLightsStateStatus+0x9c>
 8008e04:	f7fc f97e 	bl	8005104 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	71fb      	strb	r3, [r7, #7]
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d9b1      	bls.n	8008d78 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	08015fb4 	.word	0x08015fb4
 8008e20:	0801602c 	.word	0x0801602c
 8008e24:	20000300 	.word	0x20000300
 8008e28:	200004f0 	.word	0x200004f0
 8008e2c:	200002ac 	.word	0x200002ac
 8008e30:	08016040 	.word	0x08016040
 8008e34:	20000290 	.word	0x20000290

08008e38 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 8008e42:	79fb      	ldrb	r3, [r7, #7]
 8008e44:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
 8008e48:	2b27      	cmp	r3, #39	; 0x27
 8008e4a:	f200 8129 	bhi.w	80090a0 <SendComand+0x268>
 8008e4e:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <SendComand+0x1c>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008ef5 	.word	0x08008ef5
 8008e58:	08008eff 	.word	0x08008eff
 8008e5c:	08008f09 	.word	0x08008f09
 8008e60:	08008f13 	.word	0x08008f13
 8008e64:	08008f27 	.word	0x08008f27
 8008e68:	08008f31 	.word	0x08008f31
 8008e6c:	08008f3b 	.word	0x08008f3b
 8008e70:	08008f45 	.word	0x08008f45
 8008e74:	08008f4f 	.word	0x08008f4f
 8008e78:	08008f59 	.word	0x08008f59
 8008e7c:	08008f63 	.word	0x08008f63
 8008e80:	08008f6d 	.word	0x08008f6d
 8008e84:	08008f77 	.word	0x08008f77
 8008e88:	08008f9f 	.word	0x08008f9f
 8008e8c:	08008fa9 	.word	0x08008fa9
 8008e90:	08008fb3 	.word	0x08008fb3
 8008e94:	08008fbd 	.word	0x08008fbd
 8008e98:	08008fc7 	.word	0x08008fc7
 8008e9c:	08008fd1 	.word	0x08008fd1
 8008ea0:	08008fdb 	.word	0x08008fdb
 8008ea4:	08008fe5 	.word	0x08008fe5
 8008ea8:	08008f95 	.word	0x08008f95
 8008eac:	08009003 	.word	0x08009003
 8008eb0:	08008f81 	.word	0x08008f81
 8008eb4:	08008f8b 	.word	0x08008f8b
 8008eb8:	08008fef 	.word	0x08008fef
 8008ebc:	08008ff9 	.word	0x08008ff9
 8008ec0:	08008f1d 	.word	0x08008f1d
 8008ec4:	0800900d 	.word	0x0800900d
 8008ec8:	08009017 	.word	0x08009017
 8008ecc:	08009021 	.word	0x08009021
 8008ed0:	0800902b 	.word	0x0800902b
 8008ed4:	08009035 	.word	0x08009035
 8008ed8:	0800903f 	.word	0x0800903f
 8008edc:	08009049 	.word	0x08009049
 8008ee0:	08009053 	.word	0x08009053
 8008ee4:	0800905d 	.word	0x0800905d
 8008ee8:	08009067 	.word	0x08009067
 8008eec:	0800908d 	.word	0x0800908d
 8008ef0:	08009097 	.word	0x08009097
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8008ef4:	496d      	ldr	r1, [pc, #436]	; (80090ac <SendComand+0x274>)
 8008ef6:	486e      	ldr	r0, [pc, #440]	; (80090b0 <SendComand+0x278>)
 8008ef8:	f000 fec6 	bl	8009c88 <UARTDMA_Print>
			break;
 8008efc:	e0d0      	b.n	80090a0 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8008efe:	496d      	ldr	r1, [pc, #436]	; (80090b4 <SendComand+0x27c>)
 8008f00:	486b      	ldr	r0, [pc, #428]	; (80090b0 <SendComand+0x278>)
 8008f02:	f000 fec1 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f06:	e0cb      	b.n	80090a0 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8008f08:	496b      	ldr	r1, [pc, #428]	; (80090b8 <SendComand+0x280>)
 8008f0a:	4869      	ldr	r0, [pc, #420]	; (80090b0 <SendComand+0x278>)
 8008f0c:	f000 febc 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f10:	e0c6      	b.n	80090a0 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8008f12:	496a      	ldr	r1, [pc, #424]	; (80090bc <SendComand+0x284>)
 8008f14:	4866      	ldr	r0, [pc, #408]	; (80090b0 <SendComand+0x278>)
 8008f16:	f000 feb7 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f1a:	e0c1      	b.n	80090a0 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8008f1c:	4968      	ldr	r1, [pc, #416]	; (80090c0 <SendComand+0x288>)
 8008f1e:	4864      	ldr	r0, [pc, #400]	; (80090b0 <SendComand+0x278>)
 8008f20:	f000 feb2 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f24:	e0bc      	b.n	80090a0 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8008f26:	4967      	ldr	r1, [pc, #412]	; (80090c4 <SendComand+0x28c>)
 8008f28:	4861      	ldr	r0, [pc, #388]	; (80090b0 <SendComand+0x278>)
 8008f2a:	f000 fead 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f2e:	e0b7      	b.n	80090a0 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8008f30:	4965      	ldr	r1, [pc, #404]	; (80090c8 <SendComand+0x290>)
 8008f32:	485f      	ldr	r0, [pc, #380]	; (80090b0 <SendComand+0x278>)
 8008f34:	f000 fea8 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f38:	e0b2      	b.n	80090a0 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8008f3a:	4964      	ldr	r1, [pc, #400]	; (80090cc <SendComand+0x294>)
 8008f3c:	485c      	ldr	r0, [pc, #368]	; (80090b0 <SendComand+0x278>)
 8008f3e:	f000 fea3 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f42:	e0ad      	b.n	80090a0 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8008f44:	4962      	ldr	r1, [pc, #392]	; (80090d0 <SendComand+0x298>)
 8008f46:	485a      	ldr	r0, [pc, #360]	; (80090b0 <SendComand+0x278>)
 8008f48:	f000 fe9e 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f4c:	e0a8      	b.n	80090a0 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8008f4e:	4961      	ldr	r1, [pc, #388]	; (80090d4 <SendComand+0x29c>)
 8008f50:	4857      	ldr	r0, [pc, #348]	; (80090b0 <SendComand+0x278>)
 8008f52:	f000 fe99 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f56:	e0a3      	b.n	80090a0 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8008f58:	495f      	ldr	r1, [pc, #380]	; (80090d8 <SendComand+0x2a0>)
 8008f5a:	4855      	ldr	r0, [pc, #340]	; (80090b0 <SendComand+0x278>)
 8008f5c:	f000 fe94 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f60:	e09e      	b.n	80090a0 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8008f62:	495e      	ldr	r1, [pc, #376]	; (80090dc <SendComand+0x2a4>)
 8008f64:	4852      	ldr	r0, [pc, #328]	; (80090b0 <SendComand+0x278>)
 8008f66:	f000 fe8f 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f6a:	e099      	b.n	80090a0 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8008f6c:	495c      	ldr	r1, [pc, #368]	; (80090e0 <SendComand+0x2a8>)
 8008f6e:	4850      	ldr	r0, [pc, #320]	; (80090b0 <SendComand+0x278>)
 8008f70:	f000 fe8a 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f74:	e094      	b.n	80090a0 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8008f76:	495b      	ldr	r1, [pc, #364]	; (80090e4 <SendComand+0x2ac>)
 8008f78:	484d      	ldr	r0, [pc, #308]	; (80090b0 <SendComand+0x278>)
 8008f7a:	f000 fe85 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f7e:	e08f      	b.n	80090a0 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8008f80:	4959      	ldr	r1, [pc, #356]	; (80090e8 <SendComand+0x2b0>)
 8008f82:	484b      	ldr	r0, [pc, #300]	; (80090b0 <SendComand+0x278>)
 8008f84:	f000 fe80 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f88:	e08a      	b.n	80090a0 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8008f8a:	4958      	ldr	r1, [pc, #352]	; (80090ec <SendComand+0x2b4>)
 8008f8c:	4848      	ldr	r0, [pc, #288]	; (80090b0 <SendComand+0x278>)
 8008f8e:	f000 fe7b 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f92:	e085      	b.n	80090a0 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8008f94:	4956      	ldr	r1, [pc, #344]	; (80090f0 <SendComand+0x2b8>)
 8008f96:	4846      	ldr	r0, [pc, #280]	; (80090b0 <SendComand+0x278>)
 8008f98:	f000 fe76 	bl	8009c88 <UARTDMA_Print>
			break;
 8008f9c:	e080      	b.n	80090a0 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8008f9e:	4955      	ldr	r1, [pc, #340]	; (80090f4 <SendComand+0x2bc>)
 8008fa0:	4843      	ldr	r0, [pc, #268]	; (80090b0 <SendComand+0x278>)
 8008fa2:	f000 fe71 	bl	8009c88 <UARTDMA_Print>
			break;
 8008fa6:	e07b      	b.n	80090a0 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8008fa8:	4953      	ldr	r1, [pc, #332]	; (80090f8 <SendComand+0x2c0>)
 8008faa:	4841      	ldr	r0, [pc, #260]	; (80090b0 <SendComand+0x278>)
 8008fac:	f000 fe6c 	bl	8009c88 <UARTDMA_Print>
			break;
 8008fb0:	e076      	b.n	80090a0 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8008fb2:	4952      	ldr	r1, [pc, #328]	; (80090fc <SendComand+0x2c4>)
 8008fb4:	483e      	ldr	r0, [pc, #248]	; (80090b0 <SendComand+0x278>)
 8008fb6:	f000 fe67 	bl	8009c88 <UARTDMA_Print>
			break;
 8008fba:	e071      	b.n	80090a0 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8008fbc:	4950      	ldr	r1, [pc, #320]	; (8009100 <SendComand+0x2c8>)
 8008fbe:	483c      	ldr	r0, [pc, #240]	; (80090b0 <SendComand+0x278>)
 8008fc0:	f000 fe62 	bl	8009c88 <UARTDMA_Print>
			break;
 8008fc4:	e06c      	b.n	80090a0 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8008fc6:	494f      	ldr	r1, [pc, #316]	; (8009104 <SendComand+0x2cc>)
 8008fc8:	4839      	ldr	r0, [pc, #228]	; (80090b0 <SendComand+0x278>)
 8008fca:	f000 fe5d 	bl	8009c88 <UARTDMA_Print>
			break;
 8008fce:	e067      	b.n	80090a0 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8008fd0:	494d      	ldr	r1, [pc, #308]	; (8009108 <SendComand+0x2d0>)
 8008fd2:	4837      	ldr	r0, [pc, #220]	; (80090b0 <SendComand+0x278>)
 8008fd4:	f000 fe58 	bl	8009c88 <UARTDMA_Print>
			break;
 8008fd8:	e062      	b.n	80090a0 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8008fda:	494c      	ldr	r1, [pc, #304]	; (800910c <SendComand+0x2d4>)
 8008fdc:	4834      	ldr	r0, [pc, #208]	; (80090b0 <SendComand+0x278>)
 8008fde:	f000 fe53 	bl	8009c88 <UARTDMA_Print>
			break;
 8008fe2:	e05d      	b.n	80090a0 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8008fe4:	494a      	ldr	r1, [pc, #296]	; (8009110 <SendComand+0x2d8>)
 8008fe6:	4832      	ldr	r0, [pc, #200]	; (80090b0 <SendComand+0x278>)
 8008fe8:	f000 fe4e 	bl	8009c88 <UARTDMA_Print>
			break;
 8008fec:	e058      	b.n	80090a0 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8008fee:	4949      	ldr	r1, [pc, #292]	; (8009114 <SendComand+0x2dc>)
 8008ff0:	482f      	ldr	r0, [pc, #188]	; (80090b0 <SendComand+0x278>)
 8008ff2:	f000 fe49 	bl	8009c88 <UARTDMA_Print>
			break;
 8008ff6:	e053      	b.n	80090a0 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8008ff8:	4947      	ldr	r1, [pc, #284]	; (8009118 <SendComand+0x2e0>)
 8008ffa:	482d      	ldr	r0, [pc, #180]	; (80090b0 <SendComand+0x278>)
 8008ffc:	f000 fe44 	bl	8009c88 <UARTDMA_Print>
			break;
 8009000:	e04e      	b.n	80090a0 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8009002:	4946      	ldr	r1, [pc, #280]	; (800911c <SendComand+0x2e4>)
 8009004:	482a      	ldr	r0, [pc, #168]	; (80090b0 <SendComand+0x278>)
 8009006:	f000 fe3f 	bl	8009c88 <UARTDMA_Print>
			break;
 800900a:	e049      	b.n	80090a0 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 800900c:	4944      	ldr	r1, [pc, #272]	; (8009120 <SendComand+0x2e8>)
 800900e:	4828      	ldr	r0, [pc, #160]	; (80090b0 <SendComand+0x278>)
 8009010:	f000 fe3a 	bl	8009c88 <UARTDMA_Print>
			break;
 8009014:	e044      	b.n	80090a0 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8009016:	4943      	ldr	r1, [pc, #268]	; (8009124 <SendComand+0x2ec>)
 8009018:	4825      	ldr	r0, [pc, #148]	; (80090b0 <SendComand+0x278>)
 800901a:	f000 fe35 	bl	8009c88 <UARTDMA_Print>
			break;
 800901e:	e03f      	b.n	80090a0 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8009020:	4941      	ldr	r1, [pc, #260]	; (8009128 <SendComand+0x2f0>)
 8009022:	4823      	ldr	r0, [pc, #140]	; (80090b0 <SendComand+0x278>)
 8009024:	f000 fe30 	bl	8009c88 <UARTDMA_Print>
			break;
 8009028:	e03a      	b.n	80090a0 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 800902a:	4940      	ldr	r1, [pc, #256]	; (800912c <SendComand+0x2f4>)
 800902c:	4820      	ldr	r0, [pc, #128]	; (80090b0 <SendComand+0x278>)
 800902e:	f000 fe2b 	bl	8009c88 <UARTDMA_Print>
			break;
 8009032:	e035      	b.n	80090a0 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8009034:	493e      	ldr	r1, [pc, #248]	; (8009130 <SendComand+0x2f8>)
 8009036:	481e      	ldr	r0, [pc, #120]	; (80090b0 <SendComand+0x278>)
 8009038:	f000 fe26 	bl	8009c88 <UARTDMA_Print>
			break;
 800903c:	e030      	b.n	80090a0 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 800903e:	493d      	ldr	r1, [pc, #244]	; (8009134 <SendComand+0x2fc>)
 8009040:	481b      	ldr	r0, [pc, #108]	; (80090b0 <SendComand+0x278>)
 8009042:	f000 fe21 	bl	8009c88 <UARTDMA_Print>
			break;
 8009046:	e02b      	b.n	80090a0 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8009048:	493b      	ldr	r1, [pc, #236]	; (8009138 <SendComand+0x300>)
 800904a:	4819      	ldr	r0, [pc, #100]	; (80090b0 <SendComand+0x278>)
 800904c:	f000 fe1c 	bl	8009c88 <UARTDMA_Print>
			break;
 8009050:	e026      	b.n	80090a0 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8009052:	493a      	ldr	r1, [pc, #232]	; (800913c <SendComand+0x304>)
 8009054:	4816      	ldr	r0, [pc, #88]	; (80090b0 <SendComand+0x278>)
 8009056:	f000 fe17 	bl	8009c88 <UARTDMA_Print>
			break;
 800905a:	e021      	b.n	80090a0 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 800905c:	4938      	ldr	r1, [pc, #224]	; (8009140 <SendComand+0x308>)
 800905e:	4814      	ldr	r0, [pc, #80]	; (80090b0 <SendComand+0x278>)
 8009060:	f000 fe12 	bl	8009c88 <UARTDMA_Print>
			break;
 8009064:	e01c      	b.n	80090a0 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8009066:	4b37      	ldr	r3, [pc, #220]	; (8009144 <SendComand+0x30c>)
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	2b08      	cmp	r3, #8
 800906c:	d802      	bhi.n	8009074 <SendComand+0x23c>
 800906e:	4b35      	ldr	r3, [pc, #212]	; (8009144 <SendComand+0x30c>)
 8009070:	2209      	movs	r2, #9
 8009072:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8009074:	4b33      	ldr	r3, [pc, #204]	; (8009144 <SendComand+0x30c>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	461a      	mov	r2, r3
 800907a:	4933      	ldr	r1, [pc, #204]	; (8009148 <SendComand+0x310>)
 800907c:	4833      	ldr	r0, [pc, #204]	; (800914c <SendComand+0x314>)
 800907e:	f008 fdf7 	bl	8011c70 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8009082:	4932      	ldr	r1, [pc, #200]	; (800914c <SendComand+0x314>)
 8009084:	480a      	ldr	r0, [pc, #40]	; (80090b0 <SendComand+0x278>)
 8009086:	f000 fdff 	bl	8009c88 <UARTDMA_Print>
			break;
 800908a:	e009      	b.n	80090a0 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 800908c:	4930      	ldr	r1, [pc, #192]	; (8009150 <SendComand+0x318>)
 800908e:	4808      	ldr	r0, [pc, #32]	; (80090b0 <SendComand+0x278>)
 8009090:	f000 fdfa 	bl	8009c88 <UARTDMA_Print>
			break;
 8009094:	e004      	b.n	80090a0 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8009096:	492f      	ldr	r1, [pc, #188]	; (8009154 <SendComand+0x31c>)
 8009098:	4805      	ldr	r0, [pc, #20]	; (80090b0 <SendComand+0x278>)
 800909a:	f000 fdf5 	bl	8009c88 <UARTDMA_Print>
			break;
 800909e:	bf00      	nop
		}
	return 1;
 80090a0:	2301      	movs	r3, #1
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	0801605c 	.word	0x0801605c
 80090b0:	200004f0 	.word	0x200004f0
 80090b4:	08016064 	.word	0x08016064
 80090b8:	0801606c 	.word	0x0801606c
 80090bc:	08016078 	.word	0x08016078
 80090c0:	08016080 	.word	0x08016080
 80090c4:	08016088 	.word	0x08016088
 80090c8:	08016090 	.word	0x08016090
 80090cc:	080160a0 	.word	0x080160a0
 80090d0:	080160b0 	.word	0x080160b0
 80090d4:	080160c0 	.word	0x080160c0
 80090d8:	080160d0 	.word	0x080160d0
 80090dc:	080160e0 	.word	0x080160e0
 80090e0:	080160f0 	.word	0x080160f0
 80090e4:	08016100 	.word	0x08016100
 80090e8:	08016110 	.word	0x08016110
 80090ec:	08016120 	.word	0x08016120
 80090f0:	08016130 	.word	0x08016130
 80090f4:	08016140 	.word	0x08016140
 80090f8:	08016150 	.word	0x08016150
 80090fc:	08016160 	.word	0x08016160
 8009100:	08016170 	.word	0x08016170
 8009104:	08016180 	.word	0x08016180
 8009108:	08016190 	.word	0x08016190
 800910c:	080161a0 	.word	0x080161a0
 8009110:	080161b0 	.word	0x080161b0
 8009114:	080161c0 	.word	0x080161c0
 8009118:	080161d0 	.word	0x080161d0
 800911c:	080161e0 	.word	0x080161e0
 8009120:	080161f0 	.word	0x080161f0
 8009124:	08016200 	.word	0x08016200
 8009128:	08016210 	.word	0x08016210
 800912c:	08016220 	.word	0x08016220
 8009130:	08016230 	.word	0x08016230
 8009134:	08016240 	.word	0x08016240
 8009138:	08016250 	.word	0x08016250
 800913c:	08016260 	.word	0x08016260
 8009140:	08016270 	.word	0x08016270
 8009144:	20000033 	.word	0x20000033
 8009148:	08016280 	.word	0x08016280
 800914c:	20000300 	.word	0x20000300
 8009150:	08016290 	.word	0x08016290
 8009154:	080162a0 	.word	0x080162a0

08009158 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	781a      	ldrb	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	785b      	ldrb	r3, [r3, #1]
 800916a:	429a      	cmp	r2, r3
 800916c:	d101      	bne.n	8009172 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 800916e:	2301      	movs	r3, #1
 8009170:	e015      	b.n	800919e <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	785b      	ldrb	r3, [r3, #1]
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4413      	add	r3, r2
 800917c:	789a      	ldrb	r2, [r3, #2]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	785b      	ldrb	r3, [r3, #1]
 8009186:	3301      	adds	r3, #1
 8009188:	425a      	negs	r2, r3
 800918a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009192:	bf58      	it	pl
 8009194:	4253      	negpl	r3, r2
 8009196:	b2da      	uxtb	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b085      	sub	sp, #20
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	3301      	adds	r3, #1
 80091bc:	425a      	negs	r2, r3
 80091be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80091c6:	bf58      	it	pl
 80091c8:	4253      	negpl	r3, r2
 80091ca:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	785b      	ldrb	r3, [r3, #1]
 80091d0:	7bfa      	ldrb	r2, [r7, #15]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d101      	bne.n	80091da <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 80091d6:	2301      	movs	r3, #1
 80091d8:	e00a      	b.n	80091f0 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4413      	add	r3, r2
 80091e4:	78fa      	ldrb	r2, [r7, #3]
 80091e6:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	7bfa      	ldrb	r2, [r7, #15]
 80091ec:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8009200:	4b17      	ldr	r3, [pc, #92]	; (8009260 <MX_SPI1_Init+0x64>)
 8009202:	4a18      	ldr	r2, [pc, #96]	; (8009264 <MX_SPI1_Init+0x68>)
 8009204:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009206:	4b16      	ldr	r3, [pc, #88]	; (8009260 <MX_SPI1_Init+0x64>)
 8009208:	f44f 7282 	mov.w	r2, #260	; 0x104
 800920c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800920e:	4b14      	ldr	r3, [pc, #80]	; (8009260 <MX_SPI1_Init+0x64>)
 8009210:	2200      	movs	r2, #0
 8009212:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009214:	4b12      	ldr	r3, [pc, #72]	; (8009260 <MX_SPI1_Init+0x64>)
 8009216:	2200      	movs	r2, #0
 8009218:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800921a:	4b11      	ldr	r3, [pc, #68]	; (8009260 <MX_SPI1_Init+0x64>)
 800921c:	2200      	movs	r2, #0
 800921e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009220:	4b0f      	ldr	r3, [pc, #60]	; (8009260 <MX_SPI1_Init+0x64>)
 8009222:	2200      	movs	r2, #0
 8009224:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009226:	4b0e      	ldr	r3, [pc, #56]	; (8009260 <MX_SPI1_Init+0x64>)
 8009228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800922c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800922e:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <MX_SPI1_Init+0x64>)
 8009230:	2210      	movs	r2, #16
 8009232:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009234:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <MX_SPI1_Init+0x64>)
 8009236:	2200      	movs	r2, #0
 8009238:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800923a:	4b09      	ldr	r3, [pc, #36]	; (8009260 <MX_SPI1_Init+0x64>)
 800923c:	2200      	movs	r2, #0
 800923e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009240:	4b07      	ldr	r3, [pc, #28]	; (8009260 <MX_SPI1_Init+0x64>)
 8009242:	2200      	movs	r2, #0
 8009244:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009246:	4b06      	ldr	r3, [pc, #24]	; (8009260 <MX_SPI1_Init+0x64>)
 8009248:	220a      	movs	r2, #10
 800924a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800924c:	4804      	ldr	r0, [pc, #16]	; (8009260 <MX_SPI1_Init+0x64>)
 800924e:	f005 fd47 	bl	800ece0 <HAL_SPI_Init>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009258:	f7fc fcce 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800925c:	bf00      	nop
 800925e:	bd80      	pop	{r7, pc}
 8009260:	20000938 	.word	0x20000938
 8009264:	40013000 	.word	0x40013000

08009268 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800926c:	4b17      	ldr	r3, [pc, #92]	; (80092cc <MX_SPI3_Init+0x64>)
 800926e:	4a18      	ldr	r2, [pc, #96]	; (80092d0 <MX_SPI3_Init+0x68>)
 8009270:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009272:	4b16      	ldr	r3, [pc, #88]	; (80092cc <MX_SPI3_Init+0x64>)
 8009274:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009278:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800927a:	4b14      	ldr	r3, [pc, #80]	; (80092cc <MX_SPI3_Init+0x64>)
 800927c:	2200      	movs	r2, #0
 800927e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009280:	4b12      	ldr	r3, [pc, #72]	; (80092cc <MX_SPI3_Init+0x64>)
 8009282:	2200      	movs	r2, #0
 8009284:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009286:	4b11      	ldr	r3, [pc, #68]	; (80092cc <MX_SPI3_Init+0x64>)
 8009288:	2200      	movs	r2, #0
 800928a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800928c:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <MX_SPI3_Init+0x64>)
 800928e:	2200      	movs	r2, #0
 8009290:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009292:	4b0e      	ldr	r3, [pc, #56]	; (80092cc <MX_SPI3_Init+0x64>)
 8009294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009298:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800929a:	4b0c      	ldr	r3, [pc, #48]	; (80092cc <MX_SPI3_Init+0x64>)
 800929c:	2220      	movs	r2, #32
 800929e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80092a0:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <MX_SPI3_Init+0x64>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80092a6:	4b09      	ldr	r3, [pc, #36]	; (80092cc <MX_SPI3_Init+0x64>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092ac:	4b07      	ldr	r3, [pc, #28]	; (80092cc <MX_SPI3_Init+0x64>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80092b2:	4b06      	ldr	r3, [pc, #24]	; (80092cc <MX_SPI3_Init+0x64>)
 80092b4:	220a      	movs	r2, #10
 80092b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80092b8:	4804      	ldr	r0, [pc, #16]	; (80092cc <MX_SPI3_Init+0x64>)
 80092ba:	f005 fd11 	bl	800ece0 <HAL_SPI_Init>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80092c4:	f7fc fc98 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80092c8:	bf00      	nop
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	200008e0 	.word	0x200008e0
 80092d0:	40003c00 	.word	0x40003c00

080092d4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80092d8:	4b17      	ldr	r3, [pc, #92]	; (8009338 <MX_SPI5_Init+0x64>)
 80092da:	4a18      	ldr	r2, [pc, #96]	; (800933c <MX_SPI5_Init+0x68>)
 80092dc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80092de:	4b16      	ldr	r3, [pc, #88]	; (8009338 <MX_SPI5_Init+0x64>)
 80092e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80092e4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80092e6:	4b14      	ldr	r3, [pc, #80]	; (8009338 <MX_SPI5_Init+0x64>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80092ec:	4b12      	ldr	r3, [pc, #72]	; (8009338 <MX_SPI5_Init+0x64>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80092f2:	4b11      	ldr	r3, [pc, #68]	; (8009338 <MX_SPI5_Init+0x64>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80092f8:	4b0f      	ldr	r3, [pc, #60]	; (8009338 <MX_SPI5_Init+0x64>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80092fe:	4b0e      	ldr	r3, [pc, #56]	; (8009338 <MX_SPI5_Init+0x64>)
 8009300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009304:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009306:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <MX_SPI5_Init+0x64>)
 8009308:	2200      	movs	r2, #0
 800930a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800930c:	4b0a      	ldr	r3, [pc, #40]	; (8009338 <MX_SPI5_Init+0x64>)
 800930e:	2200      	movs	r2, #0
 8009310:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8009312:	4b09      	ldr	r3, [pc, #36]	; (8009338 <MX_SPI5_Init+0x64>)
 8009314:	2200      	movs	r2, #0
 8009316:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009318:	4b07      	ldr	r3, [pc, #28]	; (8009338 <MX_SPI5_Init+0x64>)
 800931a:	2200      	movs	r2, #0
 800931c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800931e:	4b06      	ldr	r3, [pc, #24]	; (8009338 <MX_SPI5_Init+0x64>)
 8009320:	220a      	movs	r2, #10
 8009322:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8009324:	4804      	ldr	r0, [pc, #16]	; (8009338 <MX_SPI5_Init+0x64>)
 8009326:	f005 fcdb 	bl	800ece0 <HAL_SPI_Init>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8009330:	f7fc fc62 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8009334:	bf00      	nop
 8009336:	bd80      	pop	{r7, pc}
 8009338:	20000888 	.word	0x20000888
 800933c:	40015000 	.word	0x40015000

08009340 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b08e      	sub	sp, #56	; 0x38
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	605a      	str	r2, [r3, #4]
 8009352:	609a      	str	r2, [r3, #8]
 8009354:	60da      	str	r2, [r3, #12]
 8009356:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a5a      	ldr	r2, [pc, #360]	; (80094c8 <HAL_SPI_MspInit+0x188>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d12c      	bne.n	80093bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009362:	2300      	movs	r3, #0
 8009364:	623b      	str	r3, [r7, #32]
 8009366:	4b59      	ldr	r3, [pc, #356]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 8009368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936a:	4a58      	ldr	r2, [pc, #352]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 800936c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009370:	6453      	str	r3, [r2, #68]	; 0x44
 8009372:	4b56      	ldr	r3, [pc, #344]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 8009374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800937a:	623b      	str	r3, [r7, #32]
 800937c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800937e:	2300      	movs	r3, #0
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	4b52      	ldr	r3, [pc, #328]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 8009384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009386:	4a51      	ldr	r2, [pc, #324]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 8009388:	f043 0301 	orr.w	r3, r3, #1
 800938c:	6313      	str	r3, [r2, #48]	; 0x30
 800938e:	4b4f      	ldr	r3, [pc, #316]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 8009390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	61fb      	str	r3, [r7, #28]
 8009398:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_ILI9341_Pin|SPI1_MISO_ILI9341_Pin|SPI1_MOSI_ILI9341_Pin;
 800939a:	23e0      	movs	r3, #224	; 0xe0
 800939c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800939e:	2302      	movs	r3, #2
 80093a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093a6:	2303      	movs	r3, #3
 80093a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80093aa:	2305      	movs	r3, #5
 80093ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093b2:	4619      	mov	r1, r3
 80093b4:	4846      	ldr	r0, [pc, #280]	; (80094d0 <HAL_SPI_MspInit+0x190>)
 80093b6:	f001 fd5f 	bl	800ae78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80093ba:	e081      	b.n	80094c0 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI3)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a44      	ldr	r2, [pc, #272]	; (80094d4 <HAL_SPI_MspInit+0x194>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d12c      	bne.n	8009420 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80093c6:	2300      	movs	r3, #0
 80093c8:	61bb      	str	r3, [r7, #24]
 80093ca:	4b40      	ldr	r3, [pc, #256]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 80093cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ce:	4a3f      	ldr	r2, [pc, #252]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 80093d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093d4:	6413      	str	r3, [r2, #64]	; 0x40
 80093d6:	4b3d      	ldr	r3, [pc, #244]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093de:	61bb      	str	r3, [r7, #24]
 80093e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093e2:	2300      	movs	r3, #0
 80093e4:	617b      	str	r3, [r7, #20]
 80093e6:	4b39      	ldr	r3, [pc, #228]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 80093e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ea:	4a38      	ldr	r2, [pc, #224]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 80093ec:	f043 0302 	orr.w	r3, r3, #2
 80093f0:	6313      	str	r3, [r2, #48]	; 0x30
 80093f2:	4b36      	ldr	r3, [pc, #216]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 80093f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f6:	f003 0302 	and.w	r3, r3, #2
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI3_SCK_XPT2046_Pin|SPI3_MISO_XPT_2046_Pin|SPI3_MOSI_XPT2046_Pin;
 80093fe:	2338      	movs	r3, #56	; 0x38
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009402:	2302      	movs	r3, #2
 8009404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009406:	2300      	movs	r3, #0
 8009408:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800940a:	2303      	movs	r3, #3
 800940c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800940e:	2306      	movs	r3, #6
 8009410:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009416:	4619      	mov	r1, r3
 8009418:	482f      	ldr	r0, [pc, #188]	; (80094d8 <HAL_SPI_MspInit+0x198>)
 800941a:	f001 fd2d 	bl	800ae78 <HAL_GPIO_Init>
}
 800941e:	e04f      	b.n	80094c0 <HAL_SPI_MspInit+0x180>
  else if(spiHandle->Instance==SPI5)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a2d      	ldr	r2, [pc, #180]	; (80094dc <HAL_SPI_MspInit+0x19c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d14a      	bne.n	80094c0 <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800942a:	2300      	movs	r3, #0
 800942c:	613b      	str	r3, [r7, #16]
 800942e:	4b27      	ldr	r3, [pc, #156]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 8009430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009432:	4a26      	ldr	r2, [pc, #152]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 8009434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009438:	6453      	str	r3, [r2, #68]	; 0x44
 800943a:	4b24      	ldr	r3, [pc, #144]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 800943c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009442:	613b      	str	r3, [r7, #16]
 8009444:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
 800944a:	4b20      	ldr	r3, [pc, #128]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 800944c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944e:	4a1f      	ldr	r2, [pc, #124]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 8009450:	f043 0302 	orr.w	r3, r3, #2
 8009454:	6313      	str	r3, [r2, #48]	; 0x30
 8009456:	4b1d      	ldr	r3, [pc, #116]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 8009458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945a:	f003 0302 	and.w	r3, r3, #2
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009462:	2300      	movs	r3, #0
 8009464:	60bb      	str	r3, [r7, #8]
 8009466:	4b19      	ldr	r3, [pc, #100]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 8009468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946a:	4a18      	ldr	r2, [pc, #96]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 800946c:	f043 0301 	orr.w	r3, r3, #1
 8009470:	6313      	str	r3, [r2, #48]	; 0x30
 8009472:	4b16      	ldr	r3, [pc, #88]	; (80094cc <HAL_SPI_MspInit+0x18c>)
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	60bb      	str	r3, [r7, #8]
 800947c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_nRF_Pin;
 800947e:	2301      	movs	r3, #1
 8009480:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009482:	2302      	movs	r3, #2
 8009484:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009486:	2300      	movs	r3, #0
 8009488:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800948a:	2303      	movs	r3, #3
 800948c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800948e:	2306      	movs	r3, #6
 8009490:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI5_SCK_nRF_GPIO_Port, &GPIO_InitStruct);
 8009492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009496:	4619      	mov	r1, r3
 8009498:	480f      	ldr	r0, [pc, #60]	; (80094d8 <HAL_SPI_MspInit+0x198>)
 800949a:	f001 fced 	bl	800ae78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI5_MOSI_nRF_Pin|SPI5_MISO_nRF_Pin;
 800949e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80094a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094a4:	2302      	movs	r3, #2
 80094a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094a8:	2300      	movs	r3, #0
 80094aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094ac:	2303      	movs	r3, #3
 80094ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 80094b0:	2306      	movs	r3, #6
 80094b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094b8:	4619      	mov	r1, r3
 80094ba:	4805      	ldr	r0, [pc, #20]	; (80094d0 <HAL_SPI_MspInit+0x190>)
 80094bc:	f001 fcdc 	bl	800ae78 <HAL_GPIO_Init>
}
 80094c0:	bf00      	nop
 80094c2:	3738      	adds	r7, #56	; 0x38
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	40013000 	.word	0x40013000
 80094cc:	40023800 	.word	0x40023800
 80094d0:	40020000 	.word	0x40020000
 80094d4:	40003c00 	.word	0x40003c00
 80094d8:	40020400 	.word	0x40020400
 80094dc:	40015000 	.word	0x40015000

080094e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094e6:	2300      	movs	r3, #0
 80094e8:	607b      	str	r3, [r7, #4]
 80094ea:	4b10      	ldr	r3, [pc, #64]	; (800952c <HAL_MspInit+0x4c>)
 80094ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ee:	4a0f      	ldr	r2, [pc, #60]	; (800952c <HAL_MspInit+0x4c>)
 80094f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094f4:	6453      	str	r3, [r2, #68]	; 0x44
 80094f6:	4b0d      	ldr	r3, [pc, #52]	; (800952c <HAL_MspInit+0x4c>)
 80094f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094fe:	607b      	str	r3, [r7, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009502:	2300      	movs	r3, #0
 8009504:	603b      	str	r3, [r7, #0]
 8009506:	4b09      	ldr	r3, [pc, #36]	; (800952c <HAL_MspInit+0x4c>)
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	4a08      	ldr	r2, [pc, #32]	; (800952c <HAL_MspInit+0x4c>)
 800950c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009510:	6413      	str	r3, [r2, #64]	; 0x40
 8009512:	4b06      	ldr	r3, [pc, #24]	; (800952c <HAL_MspInit+0x4c>)
 8009514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800951a:	603b      	str	r3, [r7, #0]
 800951c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800951e:	bf00      	nop
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	40023800 	.word	0x40023800

08009530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009534:	e7fe      	b.n	8009534 <NMI_Handler+0x4>

08009536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009536:	b480      	push	{r7}
 8009538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800953a:	e7fe      	b.n	800953a <HardFault_Handler+0x4>

0800953c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009540:	e7fe      	b.n	8009540 <MemManage_Handler+0x4>

08009542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009542:	b480      	push	{r7}
 8009544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009546:	e7fe      	b.n	8009546 <BusFault_Handler+0x4>

08009548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009548:	b480      	push	{r7}
 800954a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800954c:	e7fe      	b.n	800954c <UsageFault_Handler+0x4>

0800954e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800954e:	b480      	push	{r7}
 8009550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009552:	bf00      	nop
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009560:	bf00      	nop
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800956a:	b480      	push	{r7}
 800956c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800956e:	bf00      	nop
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800957c:	f000 fe88 	bl	800a290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009580:	bf00      	nop
 8009582:	bd80      	pop	{r7, pc}

08009584 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART2_TX_2uC_Pin);
 8009588:	2004      	movs	r0, #4
 800958a:	f001 fe45 	bl	800b218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800958e:	bf00      	nop
 8009590:	bd80      	pop	{r7, pc}

08009592 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_DS3231_RTC_Pin);
 8009596:	2010      	movs	r0, #16
 8009598:	f001 fe3e 	bl	800b218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800959c:	bf00      	nop
 800959e:	bd80      	pop	{r7, pc}

080095a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80095a4:	4802      	ldr	r0, [pc, #8]	; (80095b0 <DMA1_Stream0_IRQHandler+0x10>)
 80095a6:	f001 f9ef 	bl	800a988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80095aa:	bf00      	nop
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000490 	.word	0x20000490

080095b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80095b8:	4802      	ldr	r0, [pc, #8]	; (80095c4 <DMA1_Stream1_IRQHandler+0x10>)
 80095ba:	f001 f9e5 	bl	800a988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80095be:	bf00      	nop
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	200003dc 	.word	0x200003dc

080095c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 80095cc:	4802      	ldr	r0, [pc, #8]	; (80095d8 <DMA1_Stream5_IRQHandler+0x10>)
 80095ce:	f000 faa5 	bl	8009b1c <UARTDMA_DmaReceiveIrqHandler>
	return;
 80095d2:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	200004f0 	.word	0x200004f0

080095dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80095e0:	4802      	ldr	r0, [pc, #8]	; (80095ec <DMA1_Stream6_IRQHandler+0x10>)
 80095e2:	f001 f9d1 	bl	800a988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80095e6:	bf00      	nop
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20000b88 	.word	0x20000b88

080095f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 80095f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80095f8:	f001 fe0e 	bl	800b218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80095fc:	bf00      	nop
 80095fe:	bd80      	pop	{r7, pc}

08009600 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8009604:	4802      	ldr	r0, [pc, #8]	; (8009610 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009606:	f006 f906 	bl	800f816 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800960a:	bf00      	nop
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20000990 	.word	0x20000990

08009614 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8009618:	4802      	ldr	r0, [pc, #8]	; (8009624 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800961a:	f006 f8fc 	bl	800f816 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800961e:	bf00      	nop
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	200009d8 	.word	0x200009d8

08009628 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800962c:	4802      	ldr	r0, [pc, #8]	; (8009638 <I2C1_EV_IRQHandler+0x10>)
 800962e:	f002 fd93 	bl	800c158 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009632:	bf00      	nop
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	2000043c 	.word	0x2000043c

0800963c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8009640:	4802      	ldr	r0, [pc, #8]	; (800964c <I2C1_ER_IRQHandler+0x10>)
 8009642:	f002 fefa 	bl	800c43a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8009646:	bf00      	nop
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	2000043c 	.word	0x2000043c

08009650 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma1);
 8009654:	4803      	ldr	r0, [pc, #12]	; (8009664 <USART1_IRQHandler+0x14>)
 8009656:	f000 fa37 	bl	8009ac8 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800965a:	4803      	ldr	r0, [pc, #12]	; (8009668 <USART1_IRQHandler+0x18>)
 800965c:	f006 fc0a 	bl	800fe74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009660:	bf00      	nop
 8009662:	bd80      	pop	{r7, pc}
 8009664:	200006bc 	.word	0x200006bc
 8009668:	20000be8 	.word	0x20000be8

0800966c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 8009670:	4803      	ldr	r0, [pc, #12]	; (8009680 <USART2_IRQHandler+0x14>)
 8009672:	f000 fa29 	bl	8009ac8 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009676:	4803      	ldr	r0, [pc, #12]	; (8009684 <USART2_IRQHandler+0x18>)
 8009678:	f006 fbfc 	bl	800fe74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800967c:	bf00      	nop
 800967e:	bd80      	pop	{r7, pc}
 8009680:	200004f0 	.word	0x200004f0
 8009684:	20000c2c 	.word	0x20000c2c

08009688 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800968c:	4802      	ldr	r0, [pc, #8]	; (8009698 <SPI3_IRQHandler+0x10>)
 800968e:	f005 fd53 	bl	800f138 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8009692:	bf00      	nop
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	200008e0 	.word	0x200008e0

0800969c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma1);
 80096a0:	4802      	ldr	r0, [pc, #8]	; (80096ac <DMA2_Stream2_IRQHandler+0x10>)
 80096a2:	f000 fa3b 	bl	8009b1c <UARTDMA_DmaReceiveIrqHandler>
	return;
 80096a6:	bf00      	nop
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	200006bc 	.word	0x200006bc

080096b0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80096b4:	4802      	ldr	r0, [pc, #8]	; (80096c0 <DMA2_Stream7_IRQHandler+0x10>)
 80096b6:	f001 f967 	bl	800a988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80096ba:	bf00      	nop
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000ac8 	.word	0x20000ac8

080096c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80096c4:	b480      	push	{r7}
 80096c6:	af00      	add	r7, sp, #0
	return 1;
 80096c8:	2301      	movs	r3, #1
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <_kill>:

int _kill(int pid, int sig)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80096de:	f007 fc15 	bl	8010f0c <__errno>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2216      	movs	r2, #22
 80096e6:	601a      	str	r2, [r3, #0]
	return -1;
 80096e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <_exit>:

void _exit (int status)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80096fc:	f04f 31ff 	mov.w	r1, #4294967295
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff ffe7 	bl	80096d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009706:	e7fe      	b.n	8009706 <_exit+0x12>

08009708 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009714:	2300      	movs	r3, #0
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	e00a      	b.n	8009730 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800971a:	f3af 8000 	nop.w
 800971e:	4601      	mov	r1, r0
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	60ba      	str	r2, [r7, #8]
 8009726:	b2ca      	uxtb	r2, r1
 8009728:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	3301      	adds	r3, #1
 800972e:	617b      	str	r3, [r7, #20]
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	429a      	cmp	r2, r3
 8009736:	dbf0      	blt.n	800971a <_read+0x12>
	}

return len;
 8009738:	687b      	ldr	r3, [r7, #4]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b086      	sub	sp, #24
 8009746:	af00      	add	r7, sp, #0
 8009748:	60f8      	str	r0, [r7, #12]
 800974a:	60b9      	str	r1, [r7, #8]
 800974c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]
 8009752:	e009      	b.n	8009768 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	60ba      	str	r2, [r7, #8]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	4618      	mov	r0, r3
 800975e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	3301      	adds	r3, #1
 8009766:	617b      	str	r3, [r7, #20]
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	429a      	cmp	r2, r3
 800976e:	dbf1      	blt.n	8009754 <_write+0x12>
	}
	return len;
 8009770:	687b      	ldr	r3, [r7, #4]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <_close>:

int _close(int file)
{
 800977a:	b480      	push	{r7}
 800977c:	b083      	sub	sp, #12
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
	return -1;
 8009782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009786:	4618      	mov	r0, r3
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009792:	b480      	push	{r7}
 8009794:	b083      	sub	sp, #12
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80097a2:	605a      	str	r2, [r3, #4]
	return 0;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <_isatty>:

int _isatty(int file)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
	return 1;
 80097ba:	2301      	movs	r3, #1
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
	return 0;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
	...

080097e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80097ec:	4a14      	ldr	r2, [pc, #80]	; (8009840 <_sbrk+0x5c>)
 80097ee:	4b15      	ldr	r3, [pc, #84]	; (8009844 <_sbrk+0x60>)
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80097f8:	4b13      	ldr	r3, [pc, #76]	; (8009848 <_sbrk+0x64>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d102      	bne.n	8009806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009800:	4b11      	ldr	r3, [pc, #68]	; (8009848 <_sbrk+0x64>)
 8009802:	4a12      	ldr	r2, [pc, #72]	; (800984c <_sbrk+0x68>)
 8009804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009806:	4b10      	ldr	r3, [pc, #64]	; (8009848 <_sbrk+0x64>)
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4413      	add	r3, r2
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	429a      	cmp	r2, r3
 8009812:	d207      	bcs.n	8009824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009814:	f007 fb7a 	bl	8010f0c <__errno>
 8009818:	4603      	mov	r3, r0
 800981a:	220c      	movs	r2, #12
 800981c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800981e:	f04f 33ff 	mov.w	r3, #4294967295
 8009822:	e009      	b.n	8009838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009824:	4b08      	ldr	r3, [pc, #32]	; (8009848 <_sbrk+0x64>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800982a:	4b07      	ldr	r3, [pc, #28]	; (8009848 <_sbrk+0x64>)
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4413      	add	r3, r2
 8009832:	4a05      	ldr	r2, [pc, #20]	; (8009848 <_sbrk+0x64>)
 8009834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009836:	68fb      	ldr	r3, [r7, #12]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	20020000 	.word	0x20020000
 8009844:	00000400 	.word	0x00000400
 8009848:	200002b4 	.word	0x200002b4
 800984c:	20000c88 	.word	0x20000c88

08009850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009854:	4b06      	ldr	r3, [pc, #24]	; (8009870 <SystemInit+0x20>)
 8009856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800985a:	4a05      	ldr	r2, [pc, #20]	; (8009870 <SystemInit+0x20>)
 800985c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009864:	bf00      	nop
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	e000ed00 	.word	0xe000ed00

08009874 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08c      	sub	sp, #48	; 0x30
 8009878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800987a:	f107 030c 	add.w	r3, r7, #12
 800987e:	2224      	movs	r2, #36	; 0x24
 8009880:	2100      	movs	r1, #0
 8009882:	4618      	mov	r0, r3
 8009884:	f007 fb6c 	bl	8010f60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009888:	1d3b      	adds	r3, r7, #4
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009890:	4b21      	ldr	r3, [pc, #132]	; (8009918 <MX_TIM2_Init+0xa4>)
 8009892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009896:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009898:	4b1f      	ldr	r3, [pc, #124]	; (8009918 <MX_TIM2_Init+0xa4>)
 800989a:	2200      	movs	r2, #0
 800989c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800989e:	4b1e      	ldr	r3, [pc, #120]	; (8009918 <MX_TIM2_Init+0xa4>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80098a4:	4b1c      	ldr	r3, [pc, #112]	; (8009918 <MX_TIM2_Init+0xa4>)
 80098a6:	f04f 32ff 	mov.w	r2, #4294967295
 80098aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098ac:	4b1a      	ldr	r3, [pc, #104]	; (8009918 <MX_TIM2_Init+0xa4>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098b2:	4b19      	ldr	r3, [pc, #100]	; (8009918 <MX_TIM2_Init+0xa4>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80098b8:	2301      	movs	r3, #1
 80098ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80098bc:	2300      	movs	r3, #0
 80098be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80098c0:	2301      	movs	r3, #1
 80098c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80098c4:	2300      	movs	r3, #0
 80098c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80098cc:	2300      	movs	r3, #0
 80098ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80098d0:	2301      	movs	r3, #1
 80098d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80098d4:	2300      	movs	r3, #0
 80098d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80098dc:	f107 030c 	add.w	r3, r7, #12
 80098e0:	4619      	mov	r1, r3
 80098e2:	480d      	ldr	r0, [pc, #52]	; (8009918 <MX_TIM2_Init+0xa4>)
 80098e4:	f005 fef1 	bl	800f6ca <HAL_TIM_Encoder_Init>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80098ee:	f7fc f983 	bl	8005bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80098f2:	2300      	movs	r3, #0
 80098f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80098f6:	2300      	movs	r3, #0
 80098f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80098fa:	1d3b      	adds	r3, r7, #4
 80098fc:	4619      	mov	r1, r3
 80098fe:	4806      	ldr	r0, [pc, #24]	; (8009918 <MX_TIM2_Init+0xa4>)
 8009900:	f006 f93a 	bl	800fb78 <HAL_TIMEx_MasterConfigSynchronization>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800990a:	f7fc f975 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800990e:	bf00      	nop
 8009910:	3730      	adds	r7, #48	; 0x30
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	20000a20 	.word	0x20000a20

0800991c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8009920:	4b0e      	ldr	r3, [pc, #56]	; (800995c <MX_TIM10_Init+0x40>)
 8009922:	4a0f      	ldr	r2, [pc, #60]	; (8009960 <MX_TIM10_Init+0x44>)
 8009924:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8009926:	4b0d      	ldr	r3, [pc, #52]	; (800995c <MX_TIM10_Init+0x40>)
 8009928:	f242 720f 	movw	r2, #9999	; 0x270f
 800992c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800992e:	4b0b      	ldr	r3, [pc, #44]	; (800995c <MX_TIM10_Init+0x40>)
 8009930:	2200      	movs	r2, #0
 8009932:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8009934:	4b09      	ldr	r3, [pc, #36]	; (800995c <MX_TIM10_Init+0x40>)
 8009936:	f242 720f 	movw	r2, #9999	; 0x270f
 800993a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800993c:	4b07      	ldr	r3, [pc, #28]	; (800995c <MX_TIM10_Init+0x40>)
 800993e:	2200      	movs	r2, #0
 8009940:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009942:	4b06      	ldr	r3, [pc, #24]	; (800995c <MX_TIM10_Init+0x40>)
 8009944:	2200      	movs	r2, #0
 8009946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009948:	4804      	ldr	r0, [pc, #16]	; (800995c <MX_TIM10_Init+0x40>)
 800994a:	f005 fddd 	bl	800f508 <HAL_TIM_Base_Init>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8009954:	f7fc f950 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8009958:	bf00      	nop
 800995a:	bd80      	pop	{r7, pc}
 800995c:	20000990 	.word	0x20000990
 8009960:	40014400 	.word	0x40014400

08009964 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8009968:	4b0f      	ldr	r3, [pc, #60]	; (80099a8 <MX_TIM11_Init+0x44>)
 800996a:	4a10      	ldr	r2, [pc, #64]	; (80099ac <MX_TIM11_Init+0x48>)
 800996c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800996e:	4b0e      	ldr	r3, [pc, #56]	; (80099a8 <MX_TIM11_Init+0x44>)
 8009970:	f643 2297 	movw	r2, #14999	; 0x3a97
 8009974:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009976:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <MX_TIM11_Init+0x44>)
 8009978:	2200      	movs	r2, #0
 800997a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 800997c:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <MX_TIM11_Init+0x44>)
 800997e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009982:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8009984:	4b08      	ldr	r3, [pc, #32]	; (80099a8 <MX_TIM11_Init+0x44>)
 8009986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800998a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <MX_TIM11_Init+0x44>)
 800998e:	2200      	movs	r2, #0
 8009990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8009992:	4805      	ldr	r0, [pc, #20]	; (80099a8 <MX_TIM11_Init+0x44>)
 8009994:	f005 fdb8 	bl	800f508 <HAL_TIM_Base_Init>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 800999e:	f7fc f92b 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80099a2:	bf00      	nop
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	200009d8 	.word	0x200009d8
 80099ac:	40014800 	.word	0x40014800

080099b0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b08a      	sub	sp, #40	; 0x28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099b8:	f107 0314 	add.w	r3, r7, #20
 80099bc:	2200      	movs	r2, #0
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	605a      	str	r2, [r3, #4]
 80099c2:	609a      	str	r2, [r3, #8]
 80099c4:	60da      	str	r2, [r3, #12]
 80099c6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d0:	d12b      	bne.n	8009a2a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80099d2:	2300      	movs	r3, #0
 80099d4:	613b      	str	r3, [r7, #16]
 80099d6:	4b17      	ldr	r3, [pc, #92]	; (8009a34 <HAL_TIM_Encoder_MspInit+0x84>)
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	4a16      	ldr	r2, [pc, #88]	; (8009a34 <HAL_TIM_Encoder_MspInit+0x84>)
 80099dc:	f043 0301 	orr.w	r3, r3, #1
 80099e0:	6413      	str	r3, [r2, #64]	; 0x40
 80099e2:	4b14      	ldr	r3, [pc, #80]	; (8009a34 <HAL_TIM_Encoder_MspInit+0x84>)
 80099e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	613b      	str	r3, [r7, #16]
 80099ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099ee:	2300      	movs	r3, #0
 80099f0:	60fb      	str	r3, [r7, #12]
 80099f2:	4b10      	ldr	r3, [pc, #64]	; (8009a34 <HAL_TIM_Encoder_MspInit+0x84>)
 80099f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f6:	4a0f      	ldr	r2, [pc, #60]	; (8009a34 <HAL_TIM_Encoder_MspInit+0x84>)
 80099f8:	f043 0301 	orr.w	r3, r3, #1
 80099fc:	6313      	str	r3, [r2, #48]	; 0x30
 80099fe:	4b0d      	ldr	r3, [pc, #52]	; (8009a34 <HAL_TIM_Encoder_MspInit+0x84>)
 8009a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	60fb      	str	r3, [r7, #12]
 8009a08:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENC_DT_Pin|TIM2_ENC_CLK_Pin;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a0e:	2302      	movs	r3, #2
 8009a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a16:	2300      	movs	r3, #0
 8009a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a1e:	f107 0314 	add.w	r3, r7, #20
 8009a22:	4619      	mov	r1, r3
 8009a24:	4804      	ldr	r0, [pc, #16]	; (8009a38 <HAL_TIM_Encoder_MspInit+0x88>)
 8009a26:	f001 fa27 	bl	800ae78 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8009a2a:	bf00      	nop
 8009a2c:	3728      	adds	r7, #40	; 0x28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	40023800 	.word	0x40023800
 8009a38:	40020000 	.word	0x40020000

08009a3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a1c      	ldr	r2, [pc, #112]	; (8009abc <HAL_TIM_Base_MspInit+0x80>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d116      	bne.n	8009a7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60fb      	str	r3, [r7, #12]
 8009a52:	4b1b      	ldr	r3, [pc, #108]	; (8009ac0 <HAL_TIM_Base_MspInit+0x84>)
 8009a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a56:	4a1a      	ldr	r2, [pc, #104]	; (8009ac0 <HAL_TIM_Base_MspInit+0x84>)
 8009a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8009a5e:	4b18      	ldr	r3, [pc, #96]	; (8009ac0 <HAL_TIM_Base_MspInit+0x84>)
 8009a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	2019      	movs	r0, #25
 8009a70:	f000 fd91 	bl	800a596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009a74:	2019      	movs	r0, #25
 8009a76:	f000 fdaa 	bl	800a5ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8009a7a:	e01a      	b.n	8009ab2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a10      	ldr	r2, [pc, #64]	; (8009ac4 <HAL_TIM_Base_MspInit+0x88>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d115      	bne.n	8009ab2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8009a86:	2300      	movs	r3, #0
 8009a88:	60bb      	str	r3, [r7, #8]
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	; (8009ac0 <HAL_TIM_Base_MspInit+0x84>)
 8009a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8e:	4a0c      	ldr	r2, [pc, #48]	; (8009ac0 <HAL_TIM_Base_MspInit+0x84>)
 8009a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a94:	6453      	str	r3, [r2, #68]	; 0x44
 8009a96:	4b0a      	ldr	r3, [pc, #40]	; (8009ac0 <HAL_TIM_Base_MspInit+0x84>)
 8009a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a9e:	60bb      	str	r3, [r7, #8]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	201a      	movs	r0, #26
 8009aa8:	f000 fd75 	bl	800a596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8009aac:	201a      	movs	r0, #26
 8009aae:	f000 fd8e 	bl	800a5ce <HAL_NVIC_EnableIRQ>
}
 8009ab2:	bf00      	nop
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	40014400 	.word	0x40014400
 8009ac0:	40023800 	.word	0x40023800
 8009ac4:	40014800 	.word	0x40014800

08009ac8 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0310 	and.w	r3, r3, #16
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d017      	beq.n	8009b10 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f022 0201 	bic.w	r2, r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	60fb      	str	r3, [r7, #12]
	}
}
 8009b10:	bf00      	nop
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b2c:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0310 	and.w	r3, r3, #16
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d056      	beq.n	8009bee <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b48:	2220      	movs	r2, #32
 8009b4a:	409a      	lsls	r2, r3
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009b60:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	3304      	adds	r3, #4
 8009b66:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8009b68:	2300      	movs	r3, #0
 8009b6a:	82fb      	strh	r3, [r7, #22]
 8009b6c:	e01a      	b.n	8009ba4 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8009b74:	8afb      	ldrh	r3, [r7, #22]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	4413      	add	r3, r2
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	f7ff fb14 	bl	80091aa <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8009b82:	8afb      	ldrh	r3, [r7, #22]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	4413      	add	r3, r2
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	2b0a      	cmp	r3, #10
 8009b8c:	d107      	bne.n	8009b9e <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009b94:	3301      	adds	r3, #1
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8009b9e:	8afb      	ldrh	r3, [r7, #22]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	82fb      	strh	r3, [r7, #22]
 8009ba4:	8afa      	ldrh	r2, [r7, #22]
 8009ba6:	89fb      	ldrh	r3, [r7, #14]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d3e0      	bcc.n	8009b6e <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bb4:	223f      	movs	r2, #63	; 0x3f
 8009bb6:	409a      	lsls	r2, r3
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	1d1a      	adds	r2, r3, #4
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2240      	movs	r2, #64	; 0x40
 8009bd4:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f042 0201 	orr.w	r2, r2, #1
 8009bec:	601a      	str	r2, [r3, #0]
	}
}
 8009bee:	bf00      	nop
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f203 1347 	addw	r3, r3, #327	; 0x147
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7ff facc 	bl	80091aa <RB_Write>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e000      	b.n	8009c1e <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d01f      	beq.n	8009c7e <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8009c3e:	e013      	b.n	8009c68 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	2b0a      	cmp	r3, #10
 8009c46:	d10c      	bne.n	8009c62 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009c54:	3b01      	subs	r3, #1
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e00e      	b.n	8009c80 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3301      	adds	r3, #1
 8009c66:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	3344      	adds	r3, #68	; 0x44
 8009c6c:	68f9      	ldr	r1, [r7, #12]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7ff fa72 	bl	8009158 <RB_Read>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d0e2      	beq.n	8009c40 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e000      	b.n	8009c80 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8009c7e:	2301      	movs	r3, #1
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8009c96:	e012      	b.n	8009cbe <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8009c98:	7afb      	ldrb	r3, [r7, #11]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff ffaa 	bl	8009bf6 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8009ca8:	7afb      	ldrb	r3, [r7, #11]
 8009caa:	2b0a      	cmp	r3, #10
 8009cac:	d107      	bne.n	8009cbe <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	72fb      	strb	r3, [r7, #11]
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1e6      	bne.n	8009c98 <UARTDMA_Print+0x10>
		}
	}
}
 8009cca:	bf00      	nop
 8009ccc:	bf00      	nop
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e000      	b.n	8009cec <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8009d00:	2300      	movs	r3, #0
 8009d02:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d028      	beq.n	8009d66 <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8009d14:	e013      	b.n	8009d3e <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8009d16:	7b7b      	ldrb	r3, [r7, #13]
 8009d18:	2b0a      	cmp	r3, #10
 8009d1a:	d107      	bne.n	8009d2c <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8009d2c:	89fb      	ldrh	r3, [r7, #14]
 8009d2e:	1c5a      	adds	r2, r3, #1
 8009d30:	81fa      	strh	r2, [r7, #14]
 8009d32:	4619      	mov	r1, r3
 8009d34:	7b7a      	ldrb	r2, [r7, #13]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	440b      	add	r3, r1
 8009d3a:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f203 1347 	addw	r3, r3, #327	; 0x147
 8009d44:	f107 020d 	add.w	r2, r7, #13
 8009d48:	4611      	mov	r1, r2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7ff fa04 	bl	8009158 <RB_Read>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0df      	beq.n	8009d16 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6818      	ldr	r0, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	33c7      	adds	r3, #199	; 0xc7
 8009d5e:	89fa      	ldrh	r2, [r7, #14]
 8009d60:	4619      	mov	r1, r3
 8009d62:	f005 ffd9 	bl	800fd18 <HAL_UART_Transmit_DMA>
	}
}
 8009d66:	bf00      	nop
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f042 0210 	orr.w	r2, r2, #16
 8009d90:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f042 0210 	orr.w	r2, r2, #16
 8009da8:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f042 0210 	orr.w	r2, r2, #16
 8009dc0:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6818      	ldr	r0, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	3304      	adds	r3, #4
 8009dca:	2240      	movs	r2, #64	; 0x40
 8009dcc:	4619      	mov	r1, r3
 8009dce:	f006 f821 	bl	800fe14 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0208 	bic.w	r2, r2, #8
 8009de8:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f022 0208 	bic.w	r2, r2, #8
 8009e00:	601a      	str	r2, [r3, #0]
}
 8009e02:	bf00      	nop
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
	...

08009e0c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009e10:	4b11      	ldr	r3, [pc, #68]	; (8009e58 <MX_USART1_UART_Init+0x4c>)
 8009e12:	4a12      	ldr	r2, [pc, #72]	; (8009e5c <MX_USART1_UART_Init+0x50>)
 8009e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009e16:	4b10      	ldr	r3, [pc, #64]	; (8009e58 <MX_USART1_UART_Init+0x4c>)
 8009e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009e1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009e1e:	4b0e      	ldr	r3, [pc, #56]	; (8009e58 <MX_USART1_UART_Init+0x4c>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009e24:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <MX_USART1_UART_Init+0x4c>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009e2a:	4b0b      	ldr	r3, [pc, #44]	; (8009e58 <MX_USART1_UART_Init+0x4c>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009e30:	4b09      	ldr	r3, [pc, #36]	; (8009e58 <MX_USART1_UART_Init+0x4c>)
 8009e32:	220c      	movs	r2, #12
 8009e34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e36:	4b08      	ldr	r3, [pc, #32]	; (8009e58 <MX_USART1_UART_Init+0x4c>)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009e3c:	4b06      	ldr	r3, [pc, #24]	; (8009e58 <MX_USART1_UART_Init+0x4c>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009e42:	4805      	ldr	r0, [pc, #20]	; (8009e58 <MX_USART1_UART_Init+0x4c>)
 8009e44:	f005 ff1a 	bl	800fc7c <HAL_UART_Init>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009e4e:	f7fb fed3 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009e52:	bf00      	nop
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20000be8 	.word	0x20000be8
 8009e5c:	40011000 	.word	0x40011000

08009e60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009e64:	4b11      	ldr	r3, [pc, #68]	; (8009eac <MX_USART2_UART_Init+0x4c>)
 8009e66:	4a12      	ldr	r2, [pc, #72]	; (8009eb0 <MX_USART2_UART_Init+0x50>)
 8009e68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009e6a:	4b10      	ldr	r3, [pc, #64]	; (8009eac <MX_USART2_UART_Init+0x4c>)
 8009e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009e70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009e72:	4b0e      	ldr	r3, [pc, #56]	; (8009eac <MX_USART2_UART_Init+0x4c>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009e78:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <MX_USART2_UART_Init+0x4c>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009e7e:	4b0b      	ldr	r3, [pc, #44]	; (8009eac <MX_USART2_UART_Init+0x4c>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009e84:	4b09      	ldr	r3, [pc, #36]	; (8009eac <MX_USART2_UART_Init+0x4c>)
 8009e86:	220c      	movs	r2, #12
 8009e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e8a:	4b08      	ldr	r3, [pc, #32]	; (8009eac <MX_USART2_UART_Init+0x4c>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009e90:	4b06      	ldr	r3, [pc, #24]	; (8009eac <MX_USART2_UART_Init+0x4c>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009e96:	4805      	ldr	r0, [pc, #20]	; (8009eac <MX_USART2_UART_Init+0x4c>)
 8009e98:	f005 fef0 	bl	800fc7c <HAL_UART_Init>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d001      	beq.n	8009ea6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8009ea2:	f7fb fea9 	bl	8005bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009ea6:	bf00      	nop
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	20000c2c 	.word	0x20000c2c
 8009eb0:	40004400 	.word	0x40004400

08009eb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08c      	sub	sp, #48	; 0x30
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ebc:	f107 031c 	add.w	r3, r7, #28
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	605a      	str	r2, [r3, #4]
 8009ec6:	609a      	str	r2, [r3, #8]
 8009ec8:	60da      	str	r2, [r3, #12]
 8009eca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a59      	ldr	r2, [pc, #356]	; (800a038 <HAL_UART_MspInit+0x184>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	f040 80c0 	bne.w	800a058 <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009ed8:	2300      	movs	r3, #0
 8009eda:	61bb      	str	r3, [r7, #24]
 8009edc:	4b57      	ldr	r3, [pc, #348]	; (800a03c <HAL_UART_MspInit+0x188>)
 8009ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee0:	4a56      	ldr	r2, [pc, #344]	; (800a03c <HAL_UART_MspInit+0x188>)
 8009ee2:	f043 0310 	orr.w	r3, r3, #16
 8009ee6:	6453      	str	r3, [r2, #68]	; 0x44
 8009ee8:	4b54      	ldr	r3, [pc, #336]	; (800a03c <HAL_UART_MspInit+0x188>)
 8009eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eec:	f003 0310 	and.w	r3, r3, #16
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	4b50      	ldr	r3, [pc, #320]	; (800a03c <HAL_UART_MspInit+0x188>)
 8009efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efc:	4a4f      	ldr	r2, [pc, #316]	; (800a03c <HAL_UART_MspInit+0x188>)
 8009efe:	f043 0301 	orr.w	r3, r3, #1
 8009f02:	6313      	str	r3, [r2, #48]	; 0x30
 8009f04:	4b4d      	ldr	r3, [pc, #308]	; (800a03c <HAL_UART_MspInit+0x188>)
 8009f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f10:	2300      	movs	r3, #0
 8009f12:	613b      	str	r3, [r7, #16]
 8009f14:	4b49      	ldr	r3, [pc, #292]	; (800a03c <HAL_UART_MspInit+0x188>)
 8009f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f18:	4a48      	ldr	r2, [pc, #288]	; (800a03c <HAL_UART_MspInit+0x188>)
 8009f1a:	f043 0302 	orr.w	r3, r3, #2
 8009f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8009f20:	4b46      	ldr	r3, [pc, #280]	; (800a03c <HAL_UART_MspInit+0x188>)
 8009f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f24:	f003 0302 	and.w	r3, r3, #2
 8009f28:	613b      	str	r3, [r7, #16]
 8009f2a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_ESP_Pin;
 8009f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f32:	2302      	movs	r3, #2
 8009f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009f3e:	2307      	movs	r3, #7
 8009f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_ESP_GPIO_Port, &GPIO_InitStruct);
 8009f42:	f107 031c 	add.w	r3, r7, #28
 8009f46:	4619      	mov	r1, r3
 8009f48:	483d      	ldr	r0, [pc, #244]	; (800a040 <HAL_UART_MspInit+0x18c>)
 8009f4a:	f000 ff95 	bl	800ae78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX_ESP_Pin;
 8009f4e:	2380      	movs	r3, #128	; 0x80
 8009f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f52:	2302      	movs	r3, #2
 8009f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f56:	2300      	movs	r3, #0
 8009f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009f5e:	2307      	movs	r3, #7
 8009f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_ESP_GPIO_Port, &GPIO_InitStruct);
 8009f62:	f107 031c 	add.w	r3, r7, #28
 8009f66:	4619      	mov	r1, r3
 8009f68:	4836      	ldr	r0, [pc, #216]	; (800a044 <HAL_UART_MspInit+0x190>)
 8009f6a:	f000 ff85 	bl	800ae78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009f6e:	4b36      	ldr	r3, [pc, #216]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009f70:	4a36      	ldr	r2, [pc, #216]	; (800a04c <HAL_UART_MspInit+0x198>)
 8009f72:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009f74:	4b34      	ldr	r3, [pc, #208]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009f76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009f7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009f7c:	4b32      	ldr	r3, [pc, #200]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f82:	4b31      	ldr	r3, [pc, #196]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009f88:	4b2f      	ldr	r3, [pc, #188]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f8e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009f90:	4b2d      	ldr	r3, [pc, #180]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009f96:	4b2c      	ldr	r3, [pc, #176]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8009f9c:	4b2a      	ldr	r3, [pc, #168]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009fa2:	4b29      	ldr	r3, [pc, #164]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009fa8:	4b27      	ldr	r3, [pc, #156]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009fae:	4826      	ldr	r0, [pc, #152]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009fb0:	f000 fb52 	bl	800a658 <HAL_DMA_Init>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8009fba:	f7fb fe1d 	bl	8005bf8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a21      	ldr	r2, [pc, #132]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009fc2:	639a      	str	r2, [r3, #56]	; 0x38
 8009fc4:	4a20      	ldr	r2, [pc, #128]	; (800a048 <HAL_UART_MspInit+0x194>)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8009fca:	4b21      	ldr	r3, [pc, #132]	; (800a050 <HAL_UART_MspInit+0x19c>)
 8009fcc:	4a21      	ldr	r2, [pc, #132]	; (800a054 <HAL_UART_MspInit+0x1a0>)
 8009fce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8009fd0:	4b1f      	ldr	r3, [pc, #124]	; (800a050 <HAL_UART_MspInit+0x19c>)
 8009fd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009fd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009fd8:	4b1d      	ldr	r3, [pc, #116]	; (800a050 <HAL_UART_MspInit+0x19c>)
 8009fda:	2240      	movs	r2, #64	; 0x40
 8009fdc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009fde:	4b1c      	ldr	r3, [pc, #112]	; (800a050 <HAL_UART_MspInit+0x19c>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009fe4:	4b1a      	ldr	r3, [pc, #104]	; (800a050 <HAL_UART_MspInit+0x19c>)
 8009fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009fea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009fec:	4b18      	ldr	r3, [pc, #96]	; (800a050 <HAL_UART_MspInit+0x19c>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009ff2:	4b17      	ldr	r3, [pc, #92]	; (800a050 <HAL_UART_MspInit+0x19c>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009ff8:	4b15      	ldr	r3, [pc, #84]	; (800a050 <HAL_UART_MspInit+0x19c>)
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009ffe:	4b14      	ldr	r3, [pc, #80]	; (800a050 <HAL_UART_MspInit+0x19c>)
 800a000:	2200      	movs	r2, #0
 800a002:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a004:	4b12      	ldr	r3, [pc, #72]	; (800a050 <HAL_UART_MspInit+0x19c>)
 800a006:	2200      	movs	r2, #0
 800a008:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a00a:	4811      	ldr	r0, [pc, #68]	; (800a050 <HAL_UART_MspInit+0x19c>)
 800a00c:	f000 fb24 	bl	800a658 <HAL_DMA_Init>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800a016:	f7fb fdef 	bl	8005bf8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a0c      	ldr	r2, [pc, #48]	; (800a050 <HAL_UART_MspInit+0x19c>)
 800a01e:	635a      	str	r2, [r3, #52]	; 0x34
 800a020:	4a0b      	ldr	r2, [pc, #44]	; (800a050 <HAL_UART_MspInit+0x19c>)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a026:	2200      	movs	r2, #0
 800a028:	2100      	movs	r1, #0
 800a02a:	2025      	movs	r0, #37	; 0x25
 800a02c:	f000 fab3 	bl	800a596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a030:	2025      	movs	r0, #37	; 0x25
 800a032:	f000 facc 	bl	800a5ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a036:	e09d      	b.n	800a174 <HAL_UART_MspInit+0x2c0>
 800a038:	40011000 	.word	0x40011000
 800a03c:	40023800 	.word	0x40023800
 800a040:	40020000 	.word	0x40020000
 800a044:	40020400 	.word	0x40020400
 800a048:	20000b28 	.word	0x20000b28
 800a04c:	40026440 	.word	0x40026440
 800a050:	20000ac8 	.word	0x20000ac8
 800a054:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a47      	ldr	r2, [pc, #284]	; (800a17c <HAL_UART_MspInit+0x2c8>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	f040 8088 	bne.w	800a174 <HAL_UART_MspInit+0x2c0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a064:	2300      	movs	r3, #0
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	4b45      	ldr	r3, [pc, #276]	; (800a180 <HAL_UART_MspInit+0x2cc>)
 800a06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06c:	4a44      	ldr	r2, [pc, #272]	; (800a180 <HAL_UART_MspInit+0x2cc>)
 800a06e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a072:	6413      	str	r3, [r2, #64]	; 0x40
 800a074:	4b42      	ldr	r3, [pc, #264]	; (800a180 <HAL_UART_MspInit+0x2cc>)
 800a076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a07c:	60fb      	str	r3, [r7, #12]
 800a07e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a080:	2300      	movs	r3, #0
 800a082:	60bb      	str	r3, [r7, #8]
 800a084:	4b3e      	ldr	r3, [pc, #248]	; (800a180 <HAL_UART_MspInit+0x2cc>)
 800a086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a088:	4a3d      	ldr	r2, [pc, #244]	; (800a180 <HAL_UART_MspInit+0x2cc>)
 800a08a:	f043 0301 	orr.w	r3, r3, #1
 800a08e:	6313      	str	r3, [r2, #48]	; 0x30
 800a090:	4b3b      	ldr	r3, [pc, #236]	; (800a180 <HAL_UART_MspInit+0x2cc>)
 800a092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	60bb      	str	r3, [r7, #8]
 800a09a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_2uC_Pin|USART2_RX_2uC_Pin;
 800a09c:	230c      	movs	r3, #12
 800a09e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a0ac:	2307      	movs	r3, #7
 800a0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0b0:	f107 031c 	add.w	r3, r7, #28
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4833      	ldr	r0, [pc, #204]	; (800a184 <HAL_UART_MspInit+0x2d0>)
 800a0b8:	f000 fede 	bl	800ae78 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800a0bc:	4b32      	ldr	r3, [pc, #200]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a0be:	4a33      	ldr	r2, [pc, #204]	; (800a18c <HAL_UART_MspInit+0x2d8>)
 800a0c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800a0c2:	4b31      	ldr	r3, [pc, #196]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a0c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a0c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a0ca:	4b2f      	ldr	r3, [pc, #188]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a0d0:	4b2d      	ldr	r3, [pc, #180]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a0d6:	4b2c      	ldr	r3, [pc, #176]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a0d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a0de:	4b2a      	ldr	r3, [pc, #168]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a0e4:	4b28      	ldr	r3, [pc, #160]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800a0ea:	4b27      	ldr	r3, [pc, #156]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a0f0:	4b25      	ldr	r3, [pc, #148]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a0f6:	4b24      	ldr	r3, [pc, #144]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a0fc:	4822      	ldr	r0, [pc, #136]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a0fe:	f000 faab 	bl	800a658 <HAL_DMA_Init>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <HAL_UART_MspInit+0x258>
      Error_Handler();
 800a108:	f7fb fd76 	bl	8005bf8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a1e      	ldr	r2, [pc, #120]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a110:	639a      	str	r2, [r3, #56]	; 0x38
 800a112:	4a1d      	ldr	r2, [pc, #116]	; (800a188 <HAL_UART_MspInit+0x2d4>)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800a118:	4b1d      	ldr	r3, [pc, #116]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a11a:	4a1e      	ldr	r2, [pc, #120]	; (800a194 <HAL_UART_MspInit+0x2e0>)
 800a11c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800a11e:	4b1c      	ldr	r3, [pc, #112]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a120:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a124:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a126:	4b1a      	ldr	r3, [pc, #104]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a128:	2240      	movs	r2, #64	; 0x40
 800a12a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a12c:	4b18      	ldr	r3, [pc, #96]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a12e:	2200      	movs	r2, #0
 800a130:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a132:	4b17      	ldr	r3, [pc, #92]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a138:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a13a:	4b15      	ldr	r3, [pc, #84]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a140:	4b13      	ldr	r3, [pc, #76]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a142:	2200      	movs	r2, #0
 800a144:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800a146:	4b12      	ldr	r3, [pc, #72]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a148:	2200      	movs	r2, #0
 800a14a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a14c:	4b10      	ldr	r3, [pc, #64]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a14e:	2200      	movs	r2, #0
 800a150:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a152:	4b0f      	ldr	r3, [pc, #60]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a154:	2200      	movs	r2, #0
 800a156:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800a158:	480d      	ldr	r0, [pc, #52]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a15a:	f000 fa7d 	bl	800a658 <HAL_DMA_Init>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 800a164:	f7fb fd48 	bl	8005bf8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a09      	ldr	r2, [pc, #36]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a16c:	635a      	str	r2, [r3, #52]	; 0x34
 800a16e:	4a08      	ldr	r2, [pc, #32]	; (800a190 <HAL_UART_MspInit+0x2dc>)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a174:	bf00      	nop
 800a176:	3730      	adds	r7, #48	; 0x30
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	40004400 	.word	0x40004400
 800a180:	40023800 	.word	0x40023800
 800a184:	40020000 	.word	0x40020000
 800a188:	20000a68 	.word	0x20000a68
 800a18c:	40026088 	.word	0x40026088
 800a190:	20000b88 	.word	0x20000b88
 800a194:	400260a0 	.word	0x400260a0

0800a198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800a198:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a1d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a19c:	480d      	ldr	r0, [pc, #52]	; (800a1d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a19e:	490e      	ldr	r1, [pc, #56]	; (800a1d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a1a0:	4a0e      	ldr	r2, [pc, #56]	; (800a1dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a1a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a1a4:	e002      	b.n	800a1ac <LoopCopyDataInit>

0800a1a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a1a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a1a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a1aa:	3304      	adds	r3, #4

0800a1ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a1ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a1ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a1b0:	d3f9      	bcc.n	800a1a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a1b2:	4a0b      	ldr	r2, [pc, #44]	; (800a1e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a1b4:	4c0b      	ldr	r4, [pc, #44]	; (800a1e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a1b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a1b8:	e001      	b.n	800a1be <LoopFillZerobss>

0800a1ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a1ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a1bc:	3204      	adds	r2, #4

0800a1be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a1be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a1c0:	d3fb      	bcc.n	800a1ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a1c2:	f7ff fb45 	bl	8009850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a1c6:	f006 fea7 	bl	8010f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a1ca:	f7fb fbd3 	bl	8005974 <main>
  bx  lr    
 800a1ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800a1d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a1d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a1d8:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 800a1dc:	08029920 	.word	0x08029920
  ldr r2, =_sbss
 800a1e0:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 800a1e4:	20000c84 	.word	0x20000c84

0800a1e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a1e8:	e7fe      	b.n	800a1e8 <ADC_IRQHandler>
	...

0800a1ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a1f0:	4b0e      	ldr	r3, [pc, #56]	; (800a22c <HAL_Init+0x40>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a0d      	ldr	r2, [pc, #52]	; (800a22c <HAL_Init+0x40>)
 800a1f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a1fc:	4b0b      	ldr	r3, [pc, #44]	; (800a22c <HAL_Init+0x40>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a0a      	ldr	r2, [pc, #40]	; (800a22c <HAL_Init+0x40>)
 800a202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a208:	4b08      	ldr	r3, [pc, #32]	; (800a22c <HAL_Init+0x40>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a07      	ldr	r2, [pc, #28]	; (800a22c <HAL_Init+0x40>)
 800a20e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a214:	2003      	movs	r0, #3
 800a216:	f000 f9b3 	bl	800a580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a21a:	2000      	movs	r0, #0
 800a21c:	f000 f808 	bl	800a230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a220:	f7ff f95e 	bl	80094e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	40023c00 	.word	0x40023c00

0800a230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a238:	4b12      	ldr	r3, [pc, #72]	; (800a284 <HAL_InitTick+0x54>)
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	4b12      	ldr	r3, [pc, #72]	; (800a288 <HAL_InitTick+0x58>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	4619      	mov	r1, r3
 800a242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a246:	fbb3 f3f1 	udiv	r3, r3, r1
 800a24a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f9d9 	bl	800a606 <HAL_SYSTICK_Config>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e00e      	b.n	800a27c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b0f      	cmp	r3, #15
 800a262:	d80a      	bhi.n	800a27a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a264:	2200      	movs	r2, #0
 800a266:	6879      	ldr	r1, [r7, #4]
 800a268:	f04f 30ff 	mov.w	r0, #4294967295
 800a26c:	f000 f993 	bl	800a596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a270:	4a06      	ldr	r2, [pc, #24]	; (800a28c <HAL_InitTick+0x5c>)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	e000      	b.n	800a27c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	20000034 	.word	0x20000034
 800a288:	2000003c 	.word	0x2000003c
 800a28c:	20000038 	.word	0x20000038

0800a290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a290:	b480      	push	{r7}
 800a292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a294:	4b06      	ldr	r3, [pc, #24]	; (800a2b0 <HAL_IncTick+0x20>)
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	461a      	mov	r2, r3
 800a29a:	4b06      	ldr	r3, [pc, #24]	; (800a2b4 <HAL_IncTick+0x24>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4413      	add	r3, r2
 800a2a0:	4a04      	ldr	r2, [pc, #16]	; (800a2b4 <HAL_IncTick+0x24>)
 800a2a2:	6013      	str	r3, [r2, #0]
}
 800a2a4:	bf00      	nop
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	2000003c 	.word	0x2000003c
 800a2b4:	20000c70 	.word	0x20000c70

0800a2b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	af00      	add	r7, sp, #0
  return uwTick;
 800a2bc:	4b03      	ldr	r3, [pc, #12]	; (800a2cc <HAL_GetTick+0x14>)
 800a2be:	681b      	ldr	r3, [r3, #0]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	20000c70 	.word	0x20000c70

0800a2d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a2d8:	f7ff ffee 	bl	800a2b8 <HAL_GetTick>
 800a2dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e8:	d005      	beq.n	800a2f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a2ea:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <HAL_Delay+0x44>)
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a2f6:	bf00      	nop
 800a2f8:	f7ff ffde 	bl	800a2b8 <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	429a      	cmp	r2, r3
 800a306:	d8f7      	bhi.n	800a2f8 <HAL_Delay+0x28>
  {
  }
}
 800a308:	bf00      	nop
 800a30a:	bf00      	nop
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	2000003c 	.word	0x2000003c

0800a318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a328:	4b0c      	ldr	r3, [pc, #48]	; (800a35c <__NVIC_SetPriorityGrouping+0x44>)
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a334:	4013      	ands	r3, r2
 800a336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a34a:	4a04      	ldr	r2, [pc, #16]	; (800a35c <__NVIC_SetPriorityGrouping+0x44>)
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	60d3      	str	r3, [r2, #12]
}
 800a350:	bf00      	nop
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	e000ed00 	.word	0xe000ed00

0800a360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a360:	b480      	push	{r7}
 800a362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a364:	4b04      	ldr	r3, [pc, #16]	; (800a378 <__NVIC_GetPriorityGrouping+0x18>)
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	0a1b      	lsrs	r3, r3, #8
 800a36a:	f003 0307 	and.w	r3, r3, #7
}
 800a36e:	4618      	mov	r0, r3
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr
 800a378:	e000ed00 	.word	0xe000ed00

0800a37c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	db0b      	blt.n	800a3a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a38e:	79fb      	ldrb	r3, [r7, #7]
 800a390:	f003 021f 	and.w	r2, r3, #31
 800a394:	4907      	ldr	r1, [pc, #28]	; (800a3b4 <__NVIC_EnableIRQ+0x38>)
 800a396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a39a:	095b      	lsrs	r3, r3, #5
 800a39c:	2001      	movs	r0, #1
 800a39e:	fa00 f202 	lsl.w	r2, r0, r2
 800a3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a3a6:	bf00      	nop
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	e000e100 	.word	0xe000e100

0800a3b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	db12      	blt.n	800a3f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a3ca:	79fb      	ldrb	r3, [r7, #7]
 800a3cc:	f003 021f 	and.w	r2, r3, #31
 800a3d0:	490a      	ldr	r1, [pc, #40]	; (800a3fc <__NVIC_DisableIRQ+0x44>)
 800a3d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3d6:	095b      	lsrs	r3, r3, #5
 800a3d8:	2001      	movs	r0, #1
 800a3da:	fa00 f202 	lsl.w	r2, r0, r2
 800a3de:	3320      	adds	r3, #32
 800a3e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a3e4:	f3bf 8f4f 	dsb	sy
}
 800a3e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a3ea:	f3bf 8f6f 	isb	sy
}
 800a3ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	e000e100 	.word	0xe000e100

0800a400 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	4603      	mov	r3, r0
 800a408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a40a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	db0e      	blt.n	800a430 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800a412:	4a0b      	ldr	r2, [pc, #44]	; (800a440 <__NVIC_GetPendingIRQ+0x40>)
 800a414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a418:	095b      	lsrs	r3, r3, #5
 800a41a:	3340      	adds	r3, #64	; 0x40
 800a41c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	f003 031f 	and.w	r3, r3, #31
 800a426:	fa22 f303 	lsr.w	r3, r2, r3
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	e000      	b.n	800a432 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800a430:	2300      	movs	r3, #0
  }
}
 800a432:	4618      	mov	r0, r3
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	e000e100 	.word	0xe000e100

0800a444 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a44e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a452:	2b00      	cmp	r3, #0
 800a454:	db0c      	blt.n	800a470 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a456:	79fb      	ldrb	r3, [r7, #7]
 800a458:	f003 021f 	and.w	r2, r3, #31
 800a45c:	4907      	ldr	r1, [pc, #28]	; (800a47c <__NVIC_ClearPendingIRQ+0x38>)
 800a45e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a462:	095b      	lsrs	r3, r3, #5
 800a464:	2001      	movs	r0, #1
 800a466:	fa00 f202 	lsl.w	r2, r0, r2
 800a46a:	3360      	adds	r3, #96	; 0x60
 800a46c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	e000e100 	.word	0xe000e100

0800a480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	6039      	str	r1, [r7, #0]
 800a48a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a48c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a490:	2b00      	cmp	r3, #0
 800a492:	db0a      	blt.n	800a4aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	b2da      	uxtb	r2, r3
 800a498:	490c      	ldr	r1, [pc, #48]	; (800a4cc <__NVIC_SetPriority+0x4c>)
 800a49a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a49e:	0112      	lsls	r2, r2, #4
 800a4a0:	b2d2      	uxtb	r2, r2
 800a4a2:	440b      	add	r3, r1
 800a4a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a4a8:	e00a      	b.n	800a4c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	4908      	ldr	r1, [pc, #32]	; (800a4d0 <__NVIC_SetPriority+0x50>)
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	f003 030f 	and.w	r3, r3, #15
 800a4b6:	3b04      	subs	r3, #4
 800a4b8:	0112      	lsls	r2, r2, #4
 800a4ba:	b2d2      	uxtb	r2, r2
 800a4bc:	440b      	add	r3, r1
 800a4be:	761a      	strb	r2, [r3, #24]
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr
 800a4cc:	e000e100 	.word	0xe000e100
 800a4d0:	e000ed00 	.word	0xe000ed00

0800a4d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b089      	sub	sp, #36	; 0x24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f003 0307 	and.w	r3, r3, #7
 800a4e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	f1c3 0307 	rsb	r3, r3, #7
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	bf28      	it	cs
 800a4f2:	2304      	movcs	r3, #4
 800a4f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	2b06      	cmp	r3, #6
 800a4fc:	d902      	bls.n	800a504 <NVIC_EncodePriority+0x30>
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	3b03      	subs	r3, #3
 800a502:	e000      	b.n	800a506 <NVIC_EncodePriority+0x32>
 800a504:	2300      	movs	r3, #0
 800a506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a508:	f04f 32ff 	mov.w	r2, #4294967295
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	fa02 f303 	lsl.w	r3, r2, r3
 800a512:	43da      	mvns	r2, r3
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	401a      	ands	r2, r3
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a51c:	f04f 31ff 	mov.w	r1, #4294967295
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	fa01 f303 	lsl.w	r3, r1, r3
 800a526:	43d9      	mvns	r1, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a52c:	4313      	orrs	r3, r2
         );
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3724      	adds	r7, #36	; 0x24
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
	...

0800a53c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3b01      	subs	r3, #1
 800a548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a54c:	d301      	bcc.n	800a552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a54e:	2301      	movs	r3, #1
 800a550:	e00f      	b.n	800a572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a552:	4a0a      	ldr	r2, [pc, #40]	; (800a57c <SysTick_Config+0x40>)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3b01      	subs	r3, #1
 800a558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a55a:	210f      	movs	r1, #15
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	f7ff ff8e 	bl	800a480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a564:	4b05      	ldr	r3, [pc, #20]	; (800a57c <SysTick_Config+0x40>)
 800a566:	2200      	movs	r2, #0
 800a568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a56a:	4b04      	ldr	r3, [pc, #16]	; (800a57c <SysTick_Config+0x40>)
 800a56c:	2207      	movs	r2, #7
 800a56e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	e000e010 	.word	0xe000e010

0800a580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff fec5 	bl	800a318 <__NVIC_SetPriorityGrouping>
}
 800a58e:	bf00      	nop
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a596:	b580      	push	{r7, lr}
 800a598:	b086      	sub	sp, #24
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	4603      	mov	r3, r0
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	607a      	str	r2, [r7, #4]
 800a5a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a5a8:	f7ff feda 	bl	800a360 <__NVIC_GetPriorityGrouping>
 800a5ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	68b9      	ldr	r1, [r7, #8]
 800a5b2:	6978      	ldr	r0, [r7, #20]
 800a5b4:	f7ff ff8e 	bl	800a4d4 <NVIC_EncodePriority>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff ff5d 	bl	800a480 <__NVIC_SetPriority>
}
 800a5c6:	bf00      	nop
 800a5c8:	3718      	adds	r7, #24
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b082      	sub	sp, #8
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a5d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7ff fecd 	bl	800a37c <__NVIC_EnableIRQ>
}
 800a5e2:	bf00      	nop
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b082      	sub	sp, #8
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a5f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7ff fedd 	bl	800a3b8 <__NVIC_DisableIRQ>
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff ff94 	bl	800a53c <SysTick_Config>
 800a614:	4603      	mov	r3, r0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b082      	sub	sp, #8
 800a622:	af00      	add	r7, sp, #0
 800a624:	4603      	mov	r3, r0
 800a626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800a628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7ff fee7 	bl	800a400 <__NVIC_GetPendingIRQ>
 800a632:	4603      	mov	r3, r0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800a646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff fefa 	bl	800a444 <__NVIC_ClearPendingIRQ>
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a660:	2300      	movs	r3, #0
 800a662:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a664:	f7ff fe28 	bl	800a2b8 <HAL_GetTick>
 800a668:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e099      	b.n	800a7a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2202      	movs	r2, #2
 800a678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f022 0201 	bic.w	r2, r2, #1
 800a692:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a694:	e00f      	b.n	800a6b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a696:	f7ff fe0f 	bl	800a2b8 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	2b05      	cmp	r3, #5
 800a6a2:	d908      	bls.n	800a6b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2220      	movs	r2, #32
 800a6a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2203      	movs	r2, #3
 800a6ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e078      	b.n	800a7a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0301 	and.w	r3, r3, #1
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e8      	bne.n	800a696 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	4b38      	ldr	r3, [pc, #224]	; (800a7b0 <HAL_DMA_Init+0x158>)
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6a1b      	ldr	r3, [r3, #32]
 800a700:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	4313      	orrs	r3, r2
 800a706:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	d107      	bne.n	800a720 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a718:	4313      	orrs	r3, r2
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f023 0307 	bic.w	r3, r3, #7
 800a736:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	2b04      	cmp	r3, #4
 800a748:	d117      	bne.n	800a77a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	4313      	orrs	r3, r2
 800a752:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00e      	beq.n	800a77a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 fb0f 	bl	800ad80 <DMA_CheckFifoParam>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d008      	beq.n	800a77a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2240      	movs	r2, #64	; 0x40
 800a76c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a776:	2301      	movs	r3, #1
 800a778:	e016      	b.n	800a7a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fac6 	bl	800ad14 <DMA_CalcBaseAndBitshift>
 800a788:	4603      	mov	r3, r0
 800a78a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a790:	223f      	movs	r2, #63	; 0x3f
 800a792:	409a      	lsls	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3718      	adds	r7, #24
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	f010803f 	.word	0xf010803f

0800a7b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d101      	bne.n	800a7da <HAL_DMA_Start_IT+0x26>
 800a7d6:	2302      	movs	r3, #2
 800a7d8:	e040      	b.n	800a85c <HAL_DMA_Start_IT+0xa8>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d12f      	bne.n	800a84e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2202      	movs	r2, #2
 800a7f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	68b9      	ldr	r1, [r7, #8]
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 fa58 	bl	800acb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a80c:	223f      	movs	r2, #63	; 0x3f
 800a80e:	409a      	lsls	r2, r3
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f042 0216 	orr.w	r2, r2, #22
 800a822:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d007      	beq.n	800a83c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f042 0208 	orr.w	r2, r2, #8
 800a83a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f042 0201 	orr.w	r2, r2, #1
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	e005      	b.n	800a85a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a856:	2302      	movs	r3, #2
 800a858:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a85a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a870:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a872:	f7ff fd21 	bl	800a2b8 <HAL_GetTick>
 800a876:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	2b02      	cmp	r3, #2
 800a882:	d008      	beq.n	800a896 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2280      	movs	r2, #128	; 0x80
 800a888:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e052      	b.n	800a93c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f022 0216 	bic.w	r2, r2, #22
 800a8a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	695a      	ldr	r2, [r3, #20]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d103      	bne.n	800a8c6 <HAL_DMA_Abort+0x62>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d007      	beq.n	800a8d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f022 0208 	bic.w	r2, r2, #8
 800a8d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f022 0201 	bic.w	r2, r2, #1
 800a8e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8e6:	e013      	b.n	800a910 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a8e8:	f7ff fce6 	bl	800a2b8 <HAL_GetTick>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	2b05      	cmp	r3, #5
 800a8f4:	d90c      	bls.n	800a910 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2203      	movs	r2, #3
 800a900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e015      	b.n	800a93c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1e4      	bne.n	800a8e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a922:	223f      	movs	r2, #63	; 0x3f
 800a924:	409a      	lsls	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b02      	cmp	r3, #2
 800a956:	d004      	beq.n	800a962 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2280      	movs	r2, #128	; 0x80
 800a95c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e00c      	b.n	800a97c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2205      	movs	r2, #5
 800a966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f022 0201 	bic.w	r2, r2, #1
 800a978:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a990:	2300      	movs	r3, #0
 800a992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a994:	4b92      	ldr	r3, [pc, #584]	; (800abe0 <HAL_DMA_IRQHandler+0x258>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a92      	ldr	r2, [pc, #584]	; (800abe4 <HAL_DMA_IRQHandler+0x25c>)
 800a99a:	fba2 2303 	umull	r2, r3, r2, r3
 800a99e:	0a9b      	lsrs	r3, r3, #10
 800a9a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9b2:	2208      	movs	r2, #8
 800a9b4:	409a      	lsls	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d01a      	beq.n	800a9f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d013      	beq.n	800a9f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 0204 	bic.w	r2, r2, #4
 800a9da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9e0:	2208      	movs	r2, #8
 800a9e2:	409a      	lsls	r2, r3
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ec:	f043 0201 	orr.w	r2, r3, #1
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	409a      	lsls	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4013      	ands	r3, r2
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d012      	beq.n	800aa2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00b      	beq.n	800aa2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa16:	2201      	movs	r2, #1
 800aa18:	409a      	lsls	r2, r3
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa22:	f043 0202 	orr.w	r2, r3, #2
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa2e:	2204      	movs	r2, #4
 800aa30:	409a      	lsls	r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4013      	ands	r3, r2
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d012      	beq.n	800aa60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 0302 	and.w	r3, r3, #2
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00b      	beq.n	800aa60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa4c:	2204      	movs	r2, #4
 800aa4e:	409a      	lsls	r2, r3
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa58:	f043 0204 	orr.w	r2, r3, #4
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa64:	2210      	movs	r2, #16
 800aa66:	409a      	lsls	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d043      	beq.n	800aaf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0308 	and.w	r3, r3, #8
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d03c      	beq.n	800aaf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa82:	2210      	movs	r2, #16
 800aa84:	409a      	lsls	r2, r3
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d018      	beq.n	800aaca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d108      	bne.n	800aab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d024      	beq.n	800aaf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	4798      	blx	r3
 800aab6:	e01f      	b.n	800aaf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d01b      	beq.n	800aaf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	4798      	blx	r3
 800aac8:	e016      	b.n	800aaf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d107      	bne.n	800aae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f022 0208 	bic.w	r2, r2, #8
 800aae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d003      	beq.n	800aaf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aafc:	2220      	movs	r2, #32
 800aafe:	409a      	lsls	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	4013      	ands	r3, r2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 808e 	beq.w	800ac26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f003 0310 	and.w	r3, r3, #16
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f000 8086 	beq.w	800ac26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab1e:	2220      	movs	r2, #32
 800ab20:	409a      	lsls	r2, r3
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	2b05      	cmp	r3, #5
 800ab30:	d136      	bne.n	800aba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f022 0216 	bic.w	r2, r2, #22
 800ab40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	695a      	ldr	r2, [r3, #20]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d103      	bne.n	800ab62 <HAL_DMA_IRQHandler+0x1da>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d007      	beq.n	800ab72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 0208 	bic.w	r2, r2, #8
 800ab70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab76:	223f      	movs	r2, #63	; 0x3f
 800ab78:	409a      	lsls	r2, r3
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d07d      	beq.n	800ac92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	4798      	blx	r3
        }
        return;
 800ab9e:	e078      	b.n	800ac92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d01c      	beq.n	800abe8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d108      	bne.n	800abce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d030      	beq.n	800ac26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	4798      	blx	r3
 800abcc:	e02b      	b.n	800ac26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d027      	beq.n	800ac26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	4798      	blx	r3
 800abde:	e022      	b.n	800ac26 <HAL_DMA_IRQHandler+0x29e>
 800abe0:	20000034 	.word	0x20000034
 800abe4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d10f      	bne.n	800ac16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f022 0210 	bic.w	r2, r2, #16
 800ac04:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d003      	beq.n	800ac26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d032      	beq.n	800ac94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac32:	f003 0301 	and.w	r3, r3, #1
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d022      	beq.n	800ac80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2205      	movs	r2, #5
 800ac3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 0201 	bic.w	r2, r2, #1
 800ac50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	3301      	adds	r3, #1
 800ac56:	60bb      	str	r3, [r7, #8]
 800ac58:	697a      	ldr	r2, [r7, #20]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d307      	bcc.n	800ac6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f003 0301 	and.w	r3, r3, #1
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1f2      	bne.n	800ac52 <HAL_DMA_IRQHandler+0x2ca>
 800ac6c:	e000      	b.n	800ac70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ac6e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d005      	beq.n	800ac94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	4798      	blx	r3
 800ac90:	e000      	b.n	800ac94 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ac92:	bf00      	nop
    }
  }
}
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop

0800ac9c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800acaa:	b2db      	uxtb	r3, r3
}
 800acac:	4618      	mov	r0, r3
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
 800acc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800acd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	2b40      	cmp	r3, #64	; 0x40
 800ace4:	d108      	bne.n	800acf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800acf6:	e007      	b.n	800ad08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	60da      	str	r2, [r3, #12]
}
 800ad08:	bf00      	nop
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	3b10      	subs	r3, #16
 800ad24:	4a14      	ldr	r2, [pc, #80]	; (800ad78 <DMA_CalcBaseAndBitshift+0x64>)
 800ad26:	fba2 2303 	umull	r2, r3, r2, r3
 800ad2a:	091b      	lsrs	r3, r3, #4
 800ad2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ad2e:	4a13      	ldr	r2, [pc, #76]	; (800ad7c <DMA_CalcBaseAndBitshift+0x68>)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	4413      	add	r3, r2
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d909      	bls.n	800ad56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad4a:	f023 0303 	bic.w	r3, r3, #3
 800ad4e:	1d1a      	adds	r2, r3, #4
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	659a      	str	r2, [r3, #88]	; 0x58
 800ad54:	e007      	b.n	800ad66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad5e:	f023 0303 	bic.w	r3, r3, #3
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	aaaaaaab 	.word	0xaaaaaaab
 800ad7c:	080293f4 	.word	0x080293f4

0800ad80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d11f      	bne.n	800adda <DMA_CheckFifoParam+0x5a>
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2b03      	cmp	r3, #3
 800ad9e:	d856      	bhi.n	800ae4e <DMA_CheckFifoParam+0xce>
 800ada0:	a201      	add	r2, pc, #4	; (adr r2, 800ada8 <DMA_CheckFifoParam+0x28>)
 800ada2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada6:	bf00      	nop
 800ada8:	0800adb9 	.word	0x0800adb9
 800adac:	0800adcb 	.word	0x0800adcb
 800adb0:	0800adb9 	.word	0x0800adb9
 800adb4:	0800ae4f 	.word	0x0800ae4f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d046      	beq.n	800ae52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adc8:	e043      	b.n	800ae52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800add2:	d140      	bne.n	800ae56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800add8:	e03d      	b.n	800ae56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ade2:	d121      	bne.n	800ae28 <DMA_CheckFifoParam+0xa8>
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d837      	bhi.n	800ae5a <DMA_CheckFifoParam+0xda>
 800adea:	a201      	add	r2, pc, #4	; (adr r2, 800adf0 <DMA_CheckFifoParam+0x70>)
 800adec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf0:	0800ae01 	.word	0x0800ae01
 800adf4:	0800ae07 	.word	0x0800ae07
 800adf8:	0800ae01 	.word	0x0800ae01
 800adfc:	0800ae19 	.word	0x0800ae19
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	73fb      	strb	r3, [r7, #15]
      break;
 800ae04:	e030      	b.n	800ae68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d025      	beq.n	800ae5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae16:	e022      	b.n	800ae5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae20:	d11f      	bne.n	800ae62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ae26:	e01c      	b.n	800ae62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b02      	cmp	r3, #2
 800ae2c:	d903      	bls.n	800ae36 <DMA_CheckFifoParam+0xb6>
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	2b03      	cmp	r3, #3
 800ae32:	d003      	beq.n	800ae3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ae34:	e018      	b.n	800ae68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	73fb      	strb	r3, [r7, #15]
      break;
 800ae3a:	e015      	b.n	800ae68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00e      	beq.n	800ae66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae4c:	e00b      	b.n	800ae66 <DMA_CheckFifoParam+0xe6>
      break;
 800ae4e:	bf00      	nop
 800ae50:	e00a      	b.n	800ae68 <DMA_CheckFifoParam+0xe8>
      break;
 800ae52:	bf00      	nop
 800ae54:	e008      	b.n	800ae68 <DMA_CheckFifoParam+0xe8>
      break;
 800ae56:	bf00      	nop
 800ae58:	e006      	b.n	800ae68 <DMA_CheckFifoParam+0xe8>
      break;
 800ae5a:	bf00      	nop
 800ae5c:	e004      	b.n	800ae68 <DMA_CheckFifoParam+0xe8>
      break;
 800ae5e:	bf00      	nop
 800ae60:	e002      	b.n	800ae68 <DMA_CheckFifoParam+0xe8>
      break;   
 800ae62:	bf00      	nop
 800ae64:	e000      	b.n	800ae68 <DMA_CheckFifoParam+0xe8>
      break;
 800ae66:	bf00      	nop
    }
  } 
  
  return status; 
 800ae68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3714      	adds	r7, #20
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop

0800ae78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b089      	sub	sp, #36	; 0x24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae8e:	2300      	movs	r3, #0
 800ae90:	61fb      	str	r3, [r7, #28]
 800ae92:	e159      	b.n	800b148 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ae94:	2201      	movs	r2, #1
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	fa02 f303 	lsl.w	r3, r2, r3
 800ae9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	4013      	ands	r3, r2
 800aea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	f040 8148 	bne.w	800b142 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f003 0303 	and.w	r3, r3, #3
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d005      	beq.n	800aeca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d130      	bne.n	800af2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	2203      	movs	r2, #3
 800aed6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeda:	43db      	mvns	r3, r3
 800aedc:	69ba      	ldr	r2, [r7, #24]
 800aede:	4013      	ands	r3, r2
 800aee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	68da      	ldr	r2, [r3, #12]
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	fa02 f303 	lsl.w	r3, r2, r3
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	69ba      	ldr	r2, [r7, #24]
 800aef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800af00:	2201      	movs	r2, #1
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	fa02 f303 	lsl.w	r3, r2, r3
 800af08:	43db      	mvns	r3, r3
 800af0a:	69ba      	ldr	r2, [r7, #24]
 800af0c:	4013      	ands	r3, r2
 800af0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	091b      	lsrs	r3, r3, #4
 800af16:	f003 0201 	and.w	r2, r3, #1
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	fa02 f303 	lsl.w	r3, r2, r3
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	4313      	orrs	r3, r2
 800af24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	69ba      	ldr	r2, [r7, #24]
 800af2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f003 0303 	and.w	r3, r3, #3
 800af34:	2b03      	cmp	r3, #3
 800af36:	d017      	beq.n	800af68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	005b      	lsls	r3, r3, #1
 800af42:	2203      	movs	r2, #3
 800af44:	fa02 f303 	lsl.w	r3, r2, r3
 800af48:	43db      	mvns	r3, r3
 800af4a:	69ba      	ldr	r2, [r7, #24]
 800af4c:	4013      	ands	r3, r2
 800af4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	689a      	ldr	r2, [r3, #8]
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	fa02 f303 	lsl.w	r3, r2, r3
 800af5c:	69ba      	ldr	r2, [r7, #24]
 800af5e:	4313      	orrs	r3, r2
 800af60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	69ba      	ldr	r2, [r7, #24]
 800af66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	f003 0303 	and.w	r3, r3, #3
 800af70:	2b02      	cmp	r3, #2
 800af72:	d123      	bne.n	800afbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	08da      	lsrs	r2, r3, #3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3208      	adds	r2, #8
 800af7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	f003 0307 	and.w	r3, r3, #7
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	220f      	movs	r2, #15
 800af8c:	fa02 f303 	lsl.w	r3, r2, r3
 800af90:	43db      	mvns	r3, r3
 800af92:	69ba      	ldr	r2, [r7, #24]
 800af94:	4013      	ands	r3, r2
 800af96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	691a      	ldr	r2, [r3, #16]
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	f003 0307 	and.w	r3, r3, #7
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	fa02 f303 	lsl.w	r3, r2, r3
 800afa8:	69ba      	ldr	r2, [r7, #24]
 800afaa:	4313      	orrs	r3, r2
 800afac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	08da      	lsrs	r2, r3, #3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3208      	adds	r2, #8
 800afb6:	69b9      	ldr	r1, [r7, #24]
 800afb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	2203      	movs	r2, #3
 800afc8:	fa02 f303 	lsl.w	r3, r2, r3
 800afcc:	43db      	mvns	r3, r3
 800afce:	69ba      	ldr	r2, [r7, #24]
 800afd0:	4013      	ands	r3, r2
 800afd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	f003 0203 	and.w	r2, r3, #3
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	005b      	lsls	r3, r3, #1
 800afe0:	fa02 f303 	lsl.w	r3, r2, r3
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	69ba      	ldr	r2, [r7, #24]
 800afee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 80a2 	beq.w	800b142 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800affe:	2300      	movs	r3, #0
 800b000:	60fb      	str	r3, [r7, #12]
 800b002:	4b57      	ldr	r3, [pc, #348]	; (800b160 <HAL_GPIO_Init+0x2e8>)
 800b004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b006:	4a56      	ldr	r2, [pc, #344]	; (800b160 <HAL_GPIO_Init+0x2e8>)
 800b008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b00c:	6453      	str	r3, [r2, #68]	; 0x44
 800b00e:	4b54      	ldr	r3, [pc, #336]	; (800b160 <HAL_GPIO_Init+0x2e8>)
 800b010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b016:	60fb      	str	r3, [r7, #12]
 800b018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b01a:	4a52      	ldr	r2, [pc, #328]	; (800b164 <HAL_GPIO_Init+0x2ec>)
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	089b      	lsrs	r3, r3, #2
 800b020:	3302      	adds	r3, #2
 800b022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	f003 0303 	and.w	r3, r3, #3
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	220f      	movs	r2, #15
 800b032:	fa02 f303 	lsl.w	r3, r2, r3
 800b036:	43db      	mvns	r3, r3
 800b038:	69ba      	ldr	r2, [r7, #24]
 800b03a:	4013      	ands	r3, r2
 800b03c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a49      	ldr	r2, [pc, #292]	; (800b168 <HAL_GPIO_Init+0x2f0>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d019      	beq.n	800b07a <HAL_GPIO_Init+0x202>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a48      	ldr	r2, [pc, #288]	; (800b16c <HAL_GPIO_Init+0x2f4>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d013      	beq.n	800b076 <HAL_GPIO_Init+0x1fe>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4a47      	ldr	r2, [pc, #284]	; (800b170 <HAL_GPIO_Init+0x2f8>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d00d      	beq.n	800b072 <HAL_GPIO_Init+0x1fa>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a46      	ldr	r2, [pc, #280]	; (800b174 <HAL_GPIO_Init+0x2fc>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d007      	beq.n	800b06e <HAL_GPIO_Init+0x1f6>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a45      	ldr	r2, [pc, #276]	; (800b178 <HAL_GPIO_Init+0x300>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d101      	bne.n	800b06a <HAL_GPIO_Init+0x1f2>
 800b066:	2304      	movs	r3, #4
 800b068:	e008      	b.n	800b07c <HAL_GPIO_Init+0x204>
 800b06a:	2307      	movs	r3, #7
 800b06c:	e006      	b.n	800b07c <HAL_GPIO_Init+0x204>
 800b06e:	2303      	movs	r3, #3
 800b070:	e004      	b.n	800b07c <HAL_GPIO_Init+0x204>
 800b072:	2302      	movs	r3, #2
 800b074:	e002      	b.n	800b07c <HAL_GPIO_Init+0x204>
 800b076:	2301      	movs	r3, #1
 800b078:	e000      	b.n	800b07c <HAL_GPIO_Init+0x204>
 800b07a:	2300      	movs	r3, #0
 800b07c:	69fa      	ldr	r2, [r7, #28]
 800b07e:	f002 0203 	and.w	r2, r2, #3
 800b082:	0092      	lsls	r2, r2, #2
 800b084:	4093      	lsls	r3, r2
 800b086:	69ba      	ldr	r2, [r7, #24]
 800b088:	4313      	orrs	r3, r2
 800b08a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b08c:	4935      	ldr	r1, [pc, #212]	; (800b164 <HAL_GPIO_Init+0x2ec>)
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	089b      	lsrs	r3, r3, #2
 800b092:	3302      	adds	r3, #2
 800b094:	69ba      	ldr	r2, [r7, #24]
 800b096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b09a:	4b38      	ldr	r3, [pc, #224]	; (800b17c <HAL_GPIO_Init+0x304>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	43db      	mvns	r3, r3
 800b0a4:	69ba      	ldr	r2, [r7, #24]
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d003      	beq.n	800b0be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800b0b6:	69ba      	ldr	r2, [r7, #24]
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b0be:	4a2f      	ldr	r2, [pc, #188]	; (800b17c <HAL_GPIO_Init+0x304>)
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b0c4:	4b2d      	ldr	r3, [pc, #180]	; (800b17c <HAL_GPIO_Init+0x304>)
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	43db      	mvns	r3, r3
 800b0ce:	69ba      	ldr	r2, [r7, #24]
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d003      	beq.n	800b0e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800b0e0:	69ba      	ldr	r2, [r7, #24]
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b0e8:	4a24      	ldr	r2, [pc, #144]	; (800b17c <HAL_GPIO_Init+0x304>)
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b0ee:	4b23      	ldr	r3, [pc, #140]	; (800b17c <HAL_GPIO_Init+0x304>)
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	43db      	mvns	r3, r3
 800b0f8:	69ba      	ldr	r2, [r7, #24]
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d003      	beq.n	800b112 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800b10a:	69ba      	ldr	r2, [r7, #24]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	4313      	orrs	r3, r2
 800b110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b112:	4a1a      	ldr	r2, [pc, #104]	; (800b17c <HAL_GPIO_Init+0x304>)
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b118:	4b18      	ldr	r3, [pc, #96]	; (800b17c <HAL_GPIO_Init+0x304>)
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	43db      	mvns	r3, r3
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	4013      	ands	r3, r2
 800b126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d003      	beq.n	800b13c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	4313      	orrs	r3, r2
 800b13a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b13c:	4a0f      	ldr	r2, [pc, #60]	; (800b17c <HAL_GPIO_Init+0x304>)
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	3301      	adds	r3, #1
 800b146:	61fb      	str	r3, [r7, #28]
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	2b0f      	cmp	r3, #15
 800b14c:	f67f aea2 	bls.w	800ae94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b150:	bf00      	nop
 800b152:	bf00      	nop
 800b154:	3724      	adds	r7, #36	; 0x24
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	40023800 	.word	0x40023800
 800b164:	40013800 	.word	0x40013800
 800b168:	40020000 	.word	0x40020000
 800b16c:	40020400 	.word	0x40020400
 800b170:	40020800 	.word	0x40020800
 800b174:	40020c00 	.word	0x40020c00
 800b178:	40021000 	.word	0x40021000
 800b17c:	40013c00 	.word	0x40013c00

0800b180 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	691a      	ldr	r2, [r3, #16]
 800b190:	887b      	ldrh	r3, [r7, #2]
 800b192:	4013      	ands	r3, r2
 800b194:	2b00      	cmp	r3, #0
 800b196:	d002      	beq.n	800b19e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b198:	2301      	movs	r3, #1
 800b19a:	73fb      	strb	r3, [r7, #15]
 800b19c:	e001      	b.n	800b1a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	807b      	strh	r3, [r7, #2]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b1c0:	787b      	ldrb	r3, [r7, #1]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d003      	beq.n	800b1ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b1c6:	887a      	ldrh	r2, [r7, #2]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b1cc:	e003      	b.n	800b1d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b1ce:	887b      	ldrh	r3, [r7, #2]
 800b1d0:	041a      	lsls	r2, r3, #16
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	619a      	str	r2, [r3, #24]
}
 800b1d6:	bf00      	nop
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b085      	sub	sp, #20
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b1f4:	887a      	ldrh	r2, [r7, #2]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	041a      	lsls	r2, r3, #16
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	43d9      	mvns	r1, r3
 800b200:	887b      	ldrh	r3, [r7, #2]
 800b202:	400b      	ands	r3, r1
 800b204:	431a      	orrs	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	619a      	str	r2, [r3, #24]
}
 800b20a:	bf00      	nop
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
	...

0800b218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	4603      	mov	r3, r0
 800b220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b222:	4b08      	ldr	r3, [pc, #32]	; (800b244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b224:	695a      	ldr	r2, [r3, #20]
 800b226:	88fb      	ldrh	r3, [r7, #6]
 800b228:	4013      	ands	r3, r2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d006      	beq.n	800b23c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b22e:	4a05      	ldr	r2, [pc, #20]	; (800b244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b230:	88fb      	ldrh	r3, [r7, #6]
 800b232:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b234:	88fb      	ldrh	r3, [r7, #6]
 800b236:	4618      	mov	r0, r3
 800b238:	f7fa fcca 	bl	8005bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 800b23c:	bf00      	nop
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	40013c00 	.word	0x40013c00

0800b248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e12b      	b.n	800b4b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	d106      	bne.n	800b274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7fa fa76 	bl	8005760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2224      	movs	r2, #36	; 0x24
 800b278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f022 0201 	bic.w	r2, r2, #1
 800b28a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b29a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b2ac:	f003 fcf0 	bl	800ec90 <HAL_RCC_GetPCLK1Freq>
 800b2b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	4a81      	ldr	r2, [pc, #516]	; (800b4bc <HAL_I2C_Init+0x274>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d807      	bhi.n	800b2cc <HAL_I2C_Init+0x84>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4a80      	ldr	r2, [pc, #512]	; (800b4c0 <HAL_I2C_Init+0x278>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	bf94      	ite	ls
 800b2c4:	2301      	movls	r3, #1
 800b2c6:	2300      	movhi	r3, #0
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	e006      	b.n	800b2da <HAL_I2C_Init+0x92>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	4a7d      	ldr	r2, [pc, #500]	; (800b4c4 <HAL_I2C_Init+0x27c>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	bf94      	ite	ls
 800b2d4:	2301      	movls	r3, #1
 800b2d6:	2300      	movhi	r3, #0
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e0e7      	b.n	800b4b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	4a78      	ldr	r2, [pc, #480]	; (800b4c8 <HAL_I2C_Init+0x280>)
 800b2e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ea:	0c9b      	lsrs	r3, r3, #18
 800b2ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	430a      	orrs	r2, r1
 800b300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6a1b      	ldr	r3, [r3, #32]
 800b308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	4a6a      	ldr	r2, [pc, #424]	; (800b4bc <HAL_I2C_Init+0x274>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d802      	bhi.n	800b31c <HAL_I2C_Init+0xd4>
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	3301      	adds	r3, #1
 800b31a:	e009      	b.n	800b330 <HAL_I2C_Init+0xe8>
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b322:	fb02 f303 	mul.w	r3, r2, r3
 800b326:	4a69      	ldr	r2, [pc, #420]	; (800b4cc <HAL_I2C_Init+0x284>)
 800b328:	fba2 2303 	umull	r2, r3, r2, r3
 800b32c:	099b      	lsrs	r3, r3, #6
 800b32e:	3301      	adds	r3, #1
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	6812      	ldr	r2, [r2, #0]
 800b334:	430b      	orrs	r3, r1
 800b336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b342:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	495c      	ldr	r1, [pc, #368]	; (800b4bc <HAL_I2C_Init+0x274>)
 800b34c:	428b      	cmp	r3, r1
 800b34e:	d819      	bhi.n	800b384 <HAL_I2C_Init+0x13c>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	1e59      	subs	r1, r3, #1
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	005b      	lsls	r3, r3, #1
 800b35a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b35e:	1c59      	adds	r1, r3, #1
 800b360:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b364:	400b      	ands	r3, r1
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00a      	beq.n	800b380 <HAL_I2C_Init+0x138>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	1e59      	subs	r1, r3, #1
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	005b      	lsls	r3, r3, #1
 800b374:	fbb1 f3f3 	udiv	r3, r1, r3
 800b378:	3301      	adds	r3, #1
 800b37a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b37e:	e051      	b.n	800b424 <HAL_I2C_Init+0x1dc>
 800b380:	2304      	movs	r3, #4
 800b382:	e04f      	b.n	800b424 <HAL_I2C_Init+0x1dc>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d111      	bne.n	800b3b0 <HAL_I2C_Init+0x168>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	1e58      	subs	r0, r3, #1
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6859      	ldr	r1, [r3, #4]
 800b394:	460b      	mov	r3, r1
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	440b      	add	r3, r1
 800b39a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b39e:	3301      	adds	r3, #1
 800b3a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	bf0c      	ite	eq
 800b3a8:	2301      	moveq	r3, #1
 800b3aa:	2300      	movne	r3, #0
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	e012      	b.n	800b3d6 <HAL_I2C_Init+0x18e>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	1e58      	subs	r0, r3, #1
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6859      	ldr	r1, [r3, #4]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	440b      	add	r3, r1
 800b3be:	0099      	lsls	r1, r3, #2
 800b3c0:	440b      	add	r3, r1
 800b3c2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	bf0c      	ite	eq
 800b3d0:	2301      	moveq	r3, #1
 800b3d2:	2300      	movne	r3, #0
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <HAL_I2C_Init+0x196>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e022      	b.n	800b424 <HAL_I2C_Init+0x1dc>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10e      	bne.n	800b404 <HAL_I2C_Init+0x1bc>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	1e58      	subs	r0, r3, #1
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6859      	ldr	r1, [r3, #4]
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	005b      	lsls	r3, r3, #1
 800b3f2:	440b      	add	r3, r1
 800b3f4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b402:	e00f      	b.n	800b424 <HAL_I2C_Init+0x1dc>
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	1e58      	subs	r0, r3, #1
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6859      	ldr	r1, [r3, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	440b      	add	r3, r1
 800b412:	0099      	lsls	r1, r3, #2
 800b414:	440b      	add	r3, r1
 800b416:	fbb0 f3f3 	udiv	r3, r0, r3
 800b41a:	3301      	adds	r3, #1
 800b41c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b424:	6879      	ldr	r1, [r7, #4]
 800b426:	6809      	ldr	r1, [r1, #0]
 800b428:	4313      	orrs	r3, r2
 800b42a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	69da      	ldr	r2, [r3, #28]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	431a      	orrs	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	430a      	orrs	r2, r1
 800b446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	6911      	ldr	r1, [r2, #16]
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	68d2      	ldr	r2, [r2, #12]
 800b45e:	4311      	orrs	r1, r2
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	6812      	ldr	r2, [r2, #0]
 800b464:	430b      	orrs	r3, r1
 800b466:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	695a      	ldr	r2, [r3, #20]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	431a      	orrs	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	430a      	orrs	r2, r1
 800b482:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f042 0201 	orr.w	r2, r2, #1
 800b492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2220      	movs	r2, #32
 800b49e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	000186a0 	.word	0x000186a0
 800b4c0:	001e847f 	.word	0x001e847f
 800b4c4:	003d08ff 	.word	0x003d08ff
 800b4c8:	431bde83 	.word	0x431bde83
 800b4cc:	10624dd3 	.word	0x10624dd3

0800b4d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b088      	sub	sp, #32
 800b4d4:	af02      	add	r7, sp, #8
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	607a      	str	r2, [r7, #4]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	460b      	mov	r3, r1
 800b4de:	817b      	strh	r3, [r7, #10]
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b4e4:	f7fe fee8 	bl	800a2b8 <HAL_GetTick>
 800b4e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b20      	cmp	r3, #32
 800b4f4:	f040 80e0 	bne.w	800b6b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	2319      	movs	r3, #25
 800b4fe:	2201      	movs	r2, #1
 800b500:	4970      	ldr	r1, [pc, #448]	; (800b6c4 <HAL_I2C_Master_Transmit+0x1f4>)
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f002 fd7a 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b50e:	2302      	movs	r3, #2
 800b510:	e0d3      	b.n	800b6ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d101      	bne.n	800b520 <HAL_I2C_Master_Transmit+0x50>
 800b51c:	2302      	movs	r3, #2
 800b51e:	e0cc      	b.n	800b6ba <HAL_I2C_Master_Transmit+0x1ea>
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 0301 	and.w	r3, r3, #1
 800b532:	2b01      	cmp	r3, #1
 800b534:	d007      	beq.n	800b546 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f042 0201 	orr.w	r2, r2, #1
 800b544:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b554:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2221      	movs	r2, #33	; 0x21
 800b55a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2210      	movs	r2, #16
 800b562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	893a      	ldrh	r2, [r7, #8]
 800b576:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	4a50      	ldr	r2, [pc, #320]	; (800b6c8 <HAL_I2C_Master_Transmit+0x1f8>)
 800b586:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b588:	8979      	ldrh	r1, [r7, #10]
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	6a3a      	ldr	r2, [r7, #32]
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f002 f9be 	bl	800d910 <I2C_MasterRequestWrite>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e08d      	b.n	800b6ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b59e:	2300      	movs	r3, #0
 800b5a0:	613b      	str	r3, [r7, #16]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	695b      	ldr	r3, [r3, #20]
 800b5a8:	613b      	str	r3, [r7, #16]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	613b      	str	r3, [r7, #16]
 800b5b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b5b4:	e066      	b.n	800b684 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5b6:	697a      	ldr	r2, [r7, #20]
 800b5b8:	6a39      	ldr	r1, [r7, #32]
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f002 fdf4 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00d      	beq.n	800b5e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ca:	2b04      	cmp	r3, #4
 800b5cc:	d107      	bne.n	800b5de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e06b      	b.n	800b6ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	781a      	ldrb	r2, [r3, #0]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f2:	1c5a      	adds	r2, r3, #1
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	3b01      	subs	r3, #1
 800b600:	b29a      	uxth	r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b60a:	3b01      	subs	r3, #1
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	f003 0304 	and.w	r3, r3, #4
 800b61c:	2b04      	cmp	r3, #4
 800b61e:	d11b      	bne.n	800b658 <HAL_I2C_Master_Transmit+0x188>
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b624:	2b00      	cmp	r3, #0
 800b626:	d017      	beq.n	800b658 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62c:	781a      	ldrb	r2, [r3, #0]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b638:	1c5a      	adds	r2, r3, #1
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b642:	b29b      	uxth	r3, r3
 800b644:	3b01      	subs	r3, #1
 800b646:	b29a      	uxth	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b650:	3b01      	subs	r3, #1
 800b652:	b29a      	uxth	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	6a39      	ldr	r1, [r7, #32]
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f002 fde4 	bl	800e22a <I2C_WaitOnBTFFlagUntilTimeout>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00d      	beq.n	800b684 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66c:	2b04      	cmp	r3, #4
 800b66e:	d107      	bne.n	800b680 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b67e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	e01a      	b.n	800b6ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d194      	bne.n	800b5b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b69a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2220      	movs	r2, #32
 800b6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	e000      	b.n	800b6ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b6b8:	2302      	movs	r3, #2
  }
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3718      	adds	r7, #24
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	00100002 	.word	0x00100002
 800b6c8:	ffff0000 	.word	0xffff0000

0800b6cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b08c      	sub	sp, #48	; 0x30
 800b6d0:	af02      	add	r7, sp, #8
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	607a      	str	r2, [r7, #4]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	460b      	mov	r3, r1
 800b6da:	817b      	strh	r3, [r7, #10]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b6e0:	f7fe fdea 	bl	800a2b8 <HAL_GetTick>
 800b6e4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b20      	cmp	r3, #32
 800b6f0:	f040 820b 	bne.w	800bb0a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	2319      	movs	r3, #25
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	497c      	ldr	r1, [pc, #496]	; (800b8f0 <HAL_I2C_Master_Receive+0x224>)
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f002 fc7c 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b70a:	2302      	movs	r3, #2
 800b70c:	e1fe      	b.n	800bb0c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b714:	2b01      	cmp	r3, #1
 800b716:	d101      	bne.n	800b71c <HAL_I2C_Master_Receive+0x50>
 800b718:	2302      	movs	r3, #2
 800b71a:	e1f7      	b.n	800bb0c <HAL_I2C_Master_Receive+0x440>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d007      	beq.n	800b742 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f042 0201 	orr.w	r2, r2, #1
 800b740:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b750:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2222      	movs	r2, #34	; 0x22
 800b756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2210      	movs	r2, #16
 800b75e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	893a      	ldrh	r2, [r7, #8]
 800b772:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b778:	b29a      	uxth	r2, r3
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	4a5c      	ldr	r2, [pc, #368]	; (800b8f4 <HAL_I2C_Master_Receive+0x228>)
 800b782:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b784:	8979      	ldrh	r1, [r7, #10]
 800b786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f002 f942 	bl	800da14 <I2C_MasterRequestRead>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	e1b8      	b.n	800bb0c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d113      	bne.n	800b7ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	623b      	str	r3, [r7, #32]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	695b      	ldr	r3, [r3, #20]
 800b7ac:	623b      	str	r3, [r7, #32]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	623b      	str	r3, [r7, #32]
 800b7b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7c6:	601a      	str	r2, [r3, #0]
 800b7c8:	e18c      	b.n	800bae4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d11b      	bne.n	800b80a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	61fb      	str	r3, [r7, #28]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	695b      	ldr	r3, [r3, #20]
 800b7ec:	61fb      	str	r3, [r7, #28]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	61fb      	str	r3, [r7, #28]
 800b7f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	e16c      	b.n	800bae4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d11b      	bne.n	800b84a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b820:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b832:	2300      	movs	r3, #0
 800b834:	61bb      	str	r3, [r7, #24]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	61bb      	str	r3, [r7, #24]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	61bb      	str	r3, [r7, #24]
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	e14c      	b.n	800bae4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b85a:	2300      	movs	r3, #0
 800b85c:	617b      	str	r3, [r7, #20]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	617b      	str	r3, [r7, #20]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b870:	e138      	b.n	800bae4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b876:	2b03      	cmp	r3, #3
 800b878:	f200 80f1 	bhi.w	800ba5e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b880:	2b01      	cmp	r3, #1
 800b882:	d123      	bne.n	800b8cc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f002 fd41 	bl	800e310 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	e139      	b.n	800bb0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	691a      	ldr	r2, [r3, #16]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	b2d2      	uxtb	r2, r2
 800b8a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8aa:	1c5a      	adds	r2, r3, #1
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	b29a      	uxth	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b8ca:	e10b      	b.n	800bae4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d14e      	bne.n	800b972 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8da:	2200      	movs	r2, #0
 800b8dc:	4906      	ldr	r1, [pc, #24]	; (800b8f8 <HAL_I2C_Master_Receive+0x22c>)
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f002 fb8c 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d008      	beq.n	800b8fc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e10e      	b.n	800bb0c <HAL_I2C_Master_Receive+0x440>
 800b8ee:	bf00      	nop
 800b8f0:	00100002 	.word	0x00100002
 800b8f4:	ffff0000 	.word	0xffff0000
 800b8f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b90a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	691a      	ldr	r2, [r3, #16]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b916:	b2d2      	uxtb	r2, r2
 800b918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91e:	1c5a      	adds	r2, r3, #1
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b928:	3b01      	subs	r3, #1
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b934:	b29b      	uxth	r3, r3
 800b936:	3b01      	subs	r3, #1
 800b938:	b29a      	uxth	r2, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	691a      	ldr	r2, [r3, #16]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	b2d2      	uxtb	r2, r2
 800b94a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b950:	1c5a      	adds	r2, r3, #1
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b95a:	3b01      	subs	r3, #1
 800b95c:	b29a      	uxth	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b966:	b29b      	uxth	r3, r3
 800b968:	3b01      	subs	r3, #1
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b970:	e0b8      	b.n	800bae4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b978:	2200      	movs	r2, #0
 800b97a:	4966      	ldr	r1, [pc, #408]	; (800bb14 <HAL_I2C_Master_Receive+0x448>)
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f002 fb3d 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d001      	beq.n	800b98c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b988:	2301      	movs	r3, #1
 800b98a:	e0bf      	b.n	800bb0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b99a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	691a      	ldr	r2, [r3, #16]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a6:	b2d2      	uxtb	r2, r2
 800b9a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ae:	1c5a      	adds	r2, r3, #1
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	494f      	ldr	r1, [pc, #316]	; (800bb14 <HAL_I2C_Master_Receive+0x448>)
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f002 fb0f 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e091      	b.n	800bb0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	691a      	ldr	r2, [r3, #16]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba02:	b2d2      	uxtb	r2, r2
 800ba04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0a:	1c5a      	adds	r2, r3, #1
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba14:	3b01      	subs	r3, #1
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	3b01      	subs	r3, #1
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	691a      	ldr	r2, [r3, #16]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba34:	b2d2      	uxtb	r2, r2
 800ba36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	1c5a      	adds	r2, r3, #1
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba46:	3b01      	subs	r3, #1
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	3b01      	subs	r3, #1
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba5c:	e042      	b.n	800bae4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f002 fc54 	bl	800e310 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d001      	beq.n	800ba72 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e04c      	b.n	800bb0c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	691a      	ldr	r2, [r3, #16]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7c:	b2d2      	uxtb	r2, r2
 800ba7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba84:	1c5a      	adds	r2, r3, #1
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	f003 0304 	and.w	r3, r3, #4
 800baae:	2b04      	cmp	r3, #4
 800bab0:	d118      	bne.n	800bae4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	691a      	ldr	r2, [r3, #16]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babc:	b2d2      	uxtb	r2, r2
 800babe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac4:	1c5a      	adds	r2, r3, #1
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bace:	3b01      	subs	r3, #1
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bada:	b29b      	uxth	r3, r3
 800badc:	3b01      	subs	r3, #1
 800bade:	b29a      	uxth	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f47f aec2 	bne.w	800b872 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2220      	movs	r2, #32
 800baf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e000      	b.n	800bb0c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bb0a:	2302      	movs	r3, #2
  }
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3728      	adds	r7, #40	; 0x28
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	00010004 	.word	0x00010004

0800bb18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b088      	sub	sp, #32
 800bb1c:	af02      	add	r7, sp, #8
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	4608      	mov	r0, r1
 800bb22:	4611      	mov	r1, r2
 800bb24:	461a      	mov	r2, r3
 800bb26:	4603      	mov	r3, r0
 800bb28:	817b      	strh	r3, [r7, #10]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	813b      	strh	r3, [r7, #8]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bb32:	f7fe fbc1 	bl	800a2b8 <HAL_GetTick>
 800bb36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	2b20      	cmp	r3, #32
 800bb42:	f040 80d9 	bne.w	800bcf8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	2319      	movs	r3, #25
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	496d      	ldr	r1, [pc, #436]	; (800bd04 <HAL_I2C_Mem_Write+0x1ec>)
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f002 fa53 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d001      	beq.n	800bb60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	e0cc      	b.n	800bcfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d101      	bne.n	800bb6e <HAL_I2C_Mem_Write+0x56>
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	e0c5      	b.n	800bcfa <HAL_I2C_Mem_Write+0x1e2>
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2201      	movs	r2, #1
 800bb72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 0301 	and.w	r3, r3, #1
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d007      	beq.n	800bb94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f042 0201 	orr.w	r2, r2, #1
 800bb92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bba2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2221      	movs	r2, #33	; 0x21
 800bba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2240      	movs	r2, #64	; 0x40
 800bbb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6a3a      	ldr	r2, [r7, #32]
 800bbbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bbc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4a4d      	ldr	r2, [pc, #308]	; (800bd08 <HAL_I2C_Mem_Write+0x1f0>)
 800bbd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bbd6:	88f8      	ldrh	r0, [r7, #6]
 800bbd8:	893a      	ldrh	r2, [r7, #8]
 800bbda:	8979      	ldrh	r1, [r7, #10]
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	9301      	str	r3, [sp, #4]
 800bbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f001 ffe2 	bl	800dbb0 <I2C_RequestMemoryWrite>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d052      	beq.n	800bc98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e081      	b.n	800bcfa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	f002 fad4 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00d      	beq.n	800bc22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0a:	2b04      	cmp	r3, #4
 800bc0c:	d107      	bne.n	800bc1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e06b      	b.n	800bcfa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc26:	781a      	ldrb	r2, [r3, #0]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc32:	1c5a      	adds	r2, r3, #1
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	b29a      	uxth	r2, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	695b      	ldr	r3, [r3, #20]
 800bc58:	f003 0304 	and.w	r3, r3, #4
 800bc5c:	2b04      	cmp	r3, #4
 800bc5e:	d11b      	bne.n	800bc98 <HAL_I2C_Mem_Write+0x180>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d017      	beq.n	800bc98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6c:	781a      	ldrb	r2, [r3, #0]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	1c5a      	adds	r2, r3, #1
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc82:	3b01      	subs	r3, #1
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	3b01      	subs	r3, #1
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1aa      	bne.n	800bbf6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bca0:	697a      	ldr	r2, [r7, #20]
 800bca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f002 fac0 	bl	800e22a <I2C_WaitOnBTFFlagUntilTimeout>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00d      	beq.n	800bccc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb4:	2b04      	cmp	r3, #4
 800bcb6:	d107      	bne.n	800bcc8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcc6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e016      	b.n	800bcfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2220      	movs	r2, #32
 800bce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	e000      	b.n	800bcfa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800bcf8:	2302      	movs	r3, #2
  }
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	00100002 	.word	0x00100002
 800bd08:	ffff0000 	.word	0xffff0000

0800bd0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b08c      	sub	sp, #48	; 0x30
 800bd10:	af02      	add	r7, sp, #8
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	4608      	mov	r0, r1
 800bd16:	4611      	mov	r1, r2
 800bd18:	461a      	mov	r2, r3
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	817b      	strh	r3, [r7, #10]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	813b      	strh	r3, [r7, #8]
 800bd22:	4613      	mov	r3, r2
 800bd24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bd26:	f7fe fac7 	bl	800a2b8 <HAL_GetTick>
 800bd2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	2b20      	cmp	r3, #32
 800bd36:	f040 8208 	bne.w	800c14a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	2319      	movs	r3, #25
 800bd40:	2201      	movs	r2, #1
 800bd42:	497b      	ldr	r1, [pc, #492]	; (800bf30 <HAL_I2C_Mem_Read+0x224>)
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f002 f959 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800bd50:	2302      	movs	r3, #2
 800bd52:	e1fb      	b.n	800c14c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d101      	bne.n	800bd62 <HAL_I2C_Mem_Read+0x56>
 800bd5e:	2302      	movs	r3, #2
 800bd60:	e1f4      	b.n	800c14c <HAL_I2C_Mem_Read+0x440>
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d007      	beq.n	800bd88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f042 0201 	orr.w	r2, r2, #1
 800bd86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2222      	movs	r2, #34	; 0x22
 800bd9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2240      	movs	r2, #64	; 0x40
 800bda4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800bdb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	4a5b      	ldr	r2, [pc, #364]	; (800bf34 <HAL_I2C_Mem_Read+0x228>)
 800bdc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bdca:	88f8      	ldrh	r0, [r7, #6]
 800bdcc:	893a      	ldrh	r2, [r7, #8]
 800bdce:	8979      	ldrh	r1, [r7, #10]
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	9301      	str	r3, [sp, #4]
 800bdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	4603      	mov	r3, r0
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f001 ff7e 	bl	800dcdc <I2C_RequestMemoryRead>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e1b0      	b.n	800c14c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d113      	bne.n	800be1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	623b      	str	r3, [r7, #32]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	695b      	ldr	r3, [r3, #20]
 800bdfc:	623b      	str	r3, [r7, #32]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	623b      	str	r3, [r7, #32]
 800be06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be16:	601a      	str	r2, [r3, #0]
 800be18:	e184      	b.n	800c124 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d11b      	bne.n	800be5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be32:	2300      	movs	r3, #0
 800be34:	61fb      	str	r3, [r7, #28]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	695b      	ldr	r3, [r3, #20]
 800be3c:	61fb      	str	r3, [r7, #28]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	699b      	ldr	r3, [r3, #24]
 800be44:	61fb      	str	r3, [r7, #28]
 800be46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be56:	601a      	str	r2, [r3, #0]
 800be58:	e164      	b.n	800c124 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d11b      	bne.n	800be9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be82:	2300      	movs	r3, #0
 800be84:	61bb      	str	r3, [r7, #24]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	61bb      	str	r3, [r7, #24]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	699b      	ldr	r3, [r3, #24]
 800be94:	61bb      	str	r3, [r7, #24]
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	e144      	b.n	800c124 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be9a:	2300      	movs	r3, #0
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	617b      	str	r3, [r7, #20]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	617b      	str	r3, [r7, #20]
 800beae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800beb0:	e138      	b.n	800c124 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	f200 80f1 	bhi.w	800c09e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d123      	bne.n	800bf0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bec6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f002 fa21 	bl	800e310 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	e139      	b.n	800c14c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	691a      	ldr	r2, [r3, #16]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	b2d2      	uxtb	r2, r2
 800bee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beea:	1c5a      	adds	r2, r3, #1
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bef4:	3b01      	subs	r3, #1
 800bef6:	b29a      	uxth	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	3b01      	subs	r3, #1
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bf0a:	e10b      	b.n	800c124 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d14e      	bne.n	800bfb2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	4906      	ldr	r1, [pc, #24]	; (800bf38 <HAL_I2C_Mem_Read+0x22c>)
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f002 f86c 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d008      	beq.n	800bf3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e10e      	b.n	800c14c <HAL_I2C_Mem_Read+0x440>
 800bf2e:	bf00      	nop
 800bf30:	00100002 	.word	0x00100002
 800bf34:	ffff0000 	.word	0xffff0000
 800bf38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	691a      	ldr	r2, [r3, #16]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf56:	b2d2      	uxtb	r2, r2
 800bf58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	3b01      	subs	r3, #1
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	691a      	ldr	r2, [r3, #16]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf88:	b2d2      	uxtb	r2, r2
 800bf8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf90:	1c5a      	adds	r2, r3, #1
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	b29a      	uxth	r2, r3
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bfb0:	e0b8      	b.n	800c124 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb8:	2200      	movs	r2, #0
 800bfba:	4966      	ldr	r1, [pc, #408]	; (800c154 <HAL_I2C_Mem_Read+0x448>)
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f002 f81d 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d001      	beq.n	800bfcc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e0bf      	b.n	800c14c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	691a      	ldr	r2, [r3, #16]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe6:	b2d2      	uxtb	r2, r2
 800bfe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bff8:	3b01      	subs	r3, #1
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c004:	b29b      	uxth	r3, r3
 800c006:	3b01      	subs	r3, #1
 800c008:	b29a      	uxth	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c014:	2200      	movs	r2, #0
 800c016:	494f      	ldr	r1, [pc, #316]	; (800c154 <HAL_I2C_Mem_Read+0x448>)
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f001 ffef 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	e091      	b.n	800c14c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	691a      	ldr	r2, [r3, #16]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c042:	b2d2      	uxtb	r2, r2
 800c044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04a:	1c5a      	adds	r2, r3, #1
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c054:	3b01      	subs	r3, #1
 800c056:	b29a      	uxth	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c060:	b29b      	uxth	r3, r3
 800c062:	3b01      	subs	r3, #1
 800c064:	b29a      	uxth	r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	691a      	ldr	r2, [r3, #16]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c074:	b2d2      	uxtb	r2, r2
 800c076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07c:	1c5a      	adds	r2, r3, #1
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c086:	3b01      	subs	r3, #1
 800c088:	b29a      	uxth	r2, r3
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c092:	b29b      	uxth	r3, r3
 800c094:	3b01      	subs	r3, #1
 800c096:	b29a      	uxth	r2, r3
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c09c:	e042      	b.n	800c124 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c09e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f002 f934 	bl	800e310 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e04c      	b.n	800c14c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	691a      	ldr	r2, [r3, #16]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0bc:	b2d2      	uxtb	r2, r2
 800c0be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	695b      	ldr	r3, [r3, #20]
 800c0ea:	f003 0304 	and.w	r3, r3, #4
 800c0ee:	2b04      	cmp	r3, #4
 800c0f0:	d118      	bne.n	800c124 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	691a      	ldr	r2, [r3, #16]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fc:	b2d2      	uxtb	r2, r2
 800c0fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c104:	1c5a      	adds	r2, r3, #1
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c10e:	3b01      	subs	r3, #1
 800c110:	b29a      	uxth	r2, r3
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	3b01      	subs	r3, #1
 800c11e:	b29a      	uxth	r2, r3
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f47f aec2 	bne.w	800beb2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2220      	movs	r2, #32
 800c132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	e000      	b.n	800c14c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c14a:	2302      	movs	r3, #2
  }
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3728      	adds	r7, #40	; 0x28
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	00010004 	.word	0x00010004

0800c158 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b088      	sub	sp, #32
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800c160:	2300      	movs	r3, #0
 800c162:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c170:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c178:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c180:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c182:	7bfb      	ldrb	r3, [r7, #15]
 800c184:	2b10      	cmp	r3, #16
 800c186:	d003      	beq.n	800c190 <HAL_I2C_EV_IRQHandler+0x38>
 800c188:	7bfb      	ldrb	r3, [r7, #15]
 800c18a:	2b40      	cmp	r3, #64	; 0x40
 800c18c:	f040 80c1 	bne.w	800c312 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	699b      	ldr	r3, [r3, #24]
 800c196:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	695b      	ldr	r3, [r3, #20]
 800c19e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	f003 0301 	and.w	r3, r3, #1
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10d      	bne.n	800c1c6 <HAL_I2C_EV_IRQHandler+0x6e>
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800c1b0:	d003      	beq.n	800c1ba <HAL_I2C_EV_IRQHandler+0x62>
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c1b8:	d101      	bne.n	800c1be <HAL_I2C_EV_IRQHandler+0x66>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e000      	b.n	800c1c0 <HAL_I2C_EV_IRQHandler+0x68>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	f000 8132 	beq.w	800c42a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	f003 0301 	and.w	r3, r3, #1
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00c      	beq.n	800c1ea <HAL_I2C_EV_IRQHandler+0x92>
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	0a5b      	lsrs	r3, r3, #9
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d006      	beq.n	800c1ea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f002 f91c 	bl	800e41a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fd79 	bl	800ccda <I2C_Master_SB>
 800c1e8:	e092      	b.n	800c310 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	08db      	lsrs	r3, r3, #3
 800c1ee:	f003 0301 	and.w	r3, r3, #1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d009      	beq.n	800c20a <HAL_I2C_EV_IRQHandler+0xb2>
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	0a5b      	lsrs	r3, r3, #9
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d003      	beq.n	800c20a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fdef 	bl	800cde6 <I2C_Master_ADD10>
 800c208:	e082      	b.n	800c310 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	085b      	lsrs	r3, r3, #1
 800c20e:	f003 0301 	and.w	r3, r3, #1
 800c212:	2b00      	cmp	r3, #0
 800c214:	d009      	beq.n	800c22a <HAL_I2C_EV_IRQHandler+0xd2>
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	0a5b      	lsrs	r3, r3, #9
 800c21a:	f003 0301 	and.w	r3, r3, #1
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d003      	beq.n	800c22a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 fe09 	bl	800ce3a <I2C_Master_ADDR>
 800c228:	e072      	b.n	800c310 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	089b      	lsrs	r3, r3, #2
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	2b00      	cmp	r3, #0
 800c234:	d03b      	beq.n	800c2ae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c244:	f000 80f3 	beq.w	800c42e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	09db      	lsrs	r3, r3, #7
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00f      	beq.n	800c274 <HAL_I2C_EV_IRQHandler+0x11c>
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	0a9b      	lsrs	r3, r3, #10
 800c258:	f003 0301 	and.w	r3, r3, #1
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d009      	beq.n	800c274 <HAL_I2C_EV_IRQHandler+0x11c>
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	089b      	lsrs	r3, r3, #2
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d103      	bne.n	800c274 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f9f3 	bl	800c658 <I2C_MasterTransmit_TXE>
 800c272:	e04d      	b.n	800c310 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	089b      	lsrs	r3, r3, #2
 800c278:	f003 0301 	and.w	r3, r3, #1
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f000 80d6 	beq.w	800c42e <HAL_I2C_EV_IRQHandler+0x2d6>
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	0a5b      	lsrs	r3, r3, #9
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f000 80cf 	beq.w	800c42e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c290:	7bbb      	ldrb	r3, [r7, #14]
 800c292:	2b21      	cmp	r3, #33	; 0x21
 800c294:	d103      	bne.n	800c29e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 fa7a 	bl	800c790 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c29c:	e0c7      	b.n	800c42e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
 800c2a0:	2b40      	cmp	r3, #64	; 0x40
 800c2a2:	f040 80c4 	bne.w	800c42e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fae8 	bl	800c87c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c2ac:	e0bf      	b.n	800c42e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2bc:	f000 80b7 	beq.w	800c42e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	099b      	lsrs	r3, r3, #6
 800c2c4:	f003 0301 	and.w	r3, r3, #1
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00f      	beq.n	800c2ec <HAL_I2C_EV_IRQHandler+0x194>
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	0a9b      	lsrs	r3, r3, #10
 800c2d0:	f003 0301 	and.w	r3, r3, #1
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d009      	beq.n	800c2ec <HAL_I2C_EV_IRQHandler+0x194>
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	089b      	lsrs	r3, r3, #2
 800c2dc:	f003 0301 	and.w	r3, r3, #1
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d103      	bne.n	800c2ec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fb5d 	bl	800c9a4 <I2C_MasterReceive_RXNE>
 800c2ea:	e011      	b.n	800c310 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	089b      	lsrs	r3, r3, #2
 800c2f0:	f003 0301 	and.w	r3, r3, #1
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f000 809a 	beq.w	800c42e <HAL_I2C_EV_IRQHandler+0x2d6>
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	0a5b      	lsrs	r3, r3, #9
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	2b00      	cmp	r3, #0
 800c304:	f000 8093 	beq.w	800c42e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fbfc 	bl	800cb06 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c30e:	e08e      	b.n	800c42e <HAL_I2C_EV_IRQHandler+0x2d6>
 800c310:	e08d      	b.n	800c42e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c316:	2b00      	cmp	r3, #0
 800c318:	d004      	beq.n	800c324 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	695b      	ldr	r3, [r3, #20]
 800c320:	61fb      	str	r3, [r7, #28]
 800c322:	e007      	b.n	800c334 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	695b      	ldr	r3, [r3, #20]
 800c332:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	085b      	lsrs	r3, r3, #1
 800c338:	f003 0301 	and.w	r3, r3, #1
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d012      	beq.n	800c366 <HAL_I2C_EV_IRQHandler+0x20e>
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	0a5b      	lsrs	r3, r3, #9
 800c344:	f003 0301 	and.w	r3, r3, #1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00c      	beq.n	800c366 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c350:	2b00      	cmp	r3, #0
 800c352:	d003      	beq.n	800c35c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	699b      	ldr	r3, [r3, #24]
 800c35a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800c35c:	69b9      	ldr	r1, [r7, #24]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 ffba 	bl	800d2d8 <I2C_Slave_ADDR>
 800c364:	e066      	b.n	800c434 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	091b      	lsrs	r3, r3, #4
 800c36a:	f003 0301 	and.w	r3, r3, #1
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d009      	beq.n	800c386 <HAL_I2C_EV_IRQHandler+0x22e>
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	0a5b      	lsrs	r3, r3, #9
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d003      	beq.n	800c386 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fff4 	bl	800d36c <I2C_Slave_STOPF>
 800c384:	e056      	b.n	800c434 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c386:	7bbb      	ldrb	r3, [r7, #14]
 800c388:	2b21      	cmp	r3, #33	; 0x21
 800c38a:	d002      	beq.n	800c392 <HAL_I2C_EV_IRQHandler+0x23a>
 800c38c:	7bbb      	ldrb	r3, [r7, #14]
 800c38e:	2b29      	cmp	r3, #41	; 0x29
 800c390:	d125      	bne.n	800c3de <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	09db      	lsrs	r3, r3, #7
 800c396:	f003 0301 	and.w	r3, r3, #1
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00f      	beq.n	800c3be <HAL_I2C_EV_IRQHandler+0x266>
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	0a9b      	lsrs	r3, r3, #10
 800c3a2:	f003 0301 	and.w	r3, r3, #1
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d009      	beq.n	800c3be <HAL_I2C_EV_IRQHandler+0x266>
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	089b      	lsrs	r3, r3, #2
 800c3ae:	f003 0301 	and.w	r3, r3, #1
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d103      	bne.n	800c3be <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 fed0 	bl	800d15c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c3bc:	e039      	b.n	800c432 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	089b      	lsrs	r3, r3, #2
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d033      	beq.n	800c432 <HAL_I2C_EV_IRQHandler+0x2da>
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	0a5b      	lsrs	r3, r3, #9
 800c3ce:	f003 0301 	and.w	r3, r3, #1
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d02d      	beq.n	800c432 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fefd 	bl	800d1d6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c3dc:	e029      	b.n	800c432 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	099b      	lsrs	r3, r3, #6
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00f      	beq.n	800c40a <HAL_I2C_EV_IRQHandler+0x2b2>
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	0a9b      	lsrs	r3, r3, #10
 800c3ee:	f003 0301 	and.w	r3, r3, #1
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d009      	beq.n	800c40a <HAL_I2C_EV_IRQHandler+0x2b2>
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	089b      	lsrs	r3, r3, #2
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d103      	bne.n	800c40a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 ff08 	bl	800d218 <I2C_SlaveReceive_RXNE>
 800c408:	e014      	b.n	800c434 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	089b      	lsrs	r3, r3, #2
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00e      	beq.n	800c434 <HAL_I2C_EV_IRQHandler+0x2dc>
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	0a5b      	lsrs	r3, r3, #9
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d008      	beq.n	800c434 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 ff36 	bl	800d294 <I2C_SlaveReceive_BTF>
 800c428:	e004      	b.n	800c434 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800c42a:	bf00      	nop
 800c42c:	e002      	b.n	800c434 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800c42e:	bf00      	nop
 800c430:	e000      	b.n	800c434 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800c432:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800c434:	3720      	adds	r7, #32
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b08a      	sub	sp, #40	; 0x28
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	695b      	ldr	r3, [r3, #20]
 800c448:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800c452:	2300      	movs	r3, #0
 800c454:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c45c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c45e:	6a3b      	ldr	r3, [r7, #32]
 800c460:	0a1b      	lsrs	r3, r3, #8
 800c462:	f003 0301 	and.w	r3, r3, #1
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00e      	beq.n	800c488 <HAL_I2C_ER_IRQHandler+0x4e>
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	0a1b      	lsrs	r3, r3, #8
 800c46e:	f003 0301 	and.w	r3, r3, #1
 800c472:	2b00      	cmp	r3, #0
 800c474:	d008      	beq.n	800c488 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800c476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c478:	f043 0301 	orr.w	r3, r3, #1
 800c47c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c486:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c488:	6a3b      	ldr	r3, [r7, #32]
 800c48a:	0a5b      	lsrs	r3, r3, #9
 800c48c:	f003 0301 	and.w	r3, r3, #1
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00e      	beq.n	800c4b2 <HAL_I2C_ER_IRQHandler+0x78>
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	0a1b      	lsrs	r3, r3, #8
 800c498:	f003 0301 	and.w	r3, r3, #1
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d008      	beq.n	800c4b2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a2:	f043 0302 	orr.w	r3, r3, #2
 800c4a6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800c4b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c4b2:	6a3b      	ldr	r3, [r7, #32]
 800c4b4:	0a9b      	lsrs	r3, r3, #10
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d03f      	beq.n	800c53e <HAL_I2C_ER_IRQHandler+0x104>
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	0a1b      	lsrs	r3, r3, #8
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d039      	beq.n	800c53e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800c4ca:	7efb      	ldrb	r3, [r7, #27]
 800c4cc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4dc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800c4e4:	7ebb      	ldrb	r3, [r7, #26]
 800c4e6:	2b20      	cmp	r3, #32
 800c4e8:	d112      	bne.n	800c510 <HAL_I2C_ER_IRQHandler+0xd6>
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10f      	bne.n	800c510 <HAL_I2C_ER_IRQHandler+0xd6>
 800c4f0:	7cfb      	ldrb	r3, [r7, #19]
 800c4f2:	2b21      	cmp	r3, #33	; 0x21
 800c4f4:	d008      	beq.n	800c508 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800c4f6:	7cfb      	ldrb	r3, [r7, #19]
 800c4f8:	2b29      	cmp	r3, #41	; 0x29
 800c4fa:	d005      	beq.n	800c508 <HAL_I2C_ER_IRQHandler+0xce>
 800c4fc:	7cfb      	ldrb	r3, [r7, #19]
 800c4fe:	2b28      	cmp	r3, #40	; 0x28
 800c500:	d106      	bne.n	800c510 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2b21      	cmp	r3, #33	; 0x21
 800c506:	d103      	bne.n	800c510 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f001 f85f 	bl	800d5cc <I2C_Slave_AF>
 800c50e:	e016      	b.n	800c53e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c518:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	f043 0304 	orr.w	r3, r3, #4
 800c520:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c522:	7efb      	ldrb	r3, [r7, #27]
 800c524:	2b10      	cmp	r3, #16
 800c526:	d002      	beq.n	800c52e <HAL_I2C_ER_IRQHandler+0xf4>
 800c528:	7efb      	ldrb	r3, [r7, #27]
 800c52a:	2b40      	cmp	r3, #64	; 0x40
 800c52c:	d107      	bne.n	800c53e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c53c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c53e:	6a3b      	ldr	r3, [r7, #32]
 800c540:	0adb      	lsrs	r3, r3, #11
 800c542:	f003 0301 	and.w	r3, r3, #1
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00e      	beq.n	800c568 <HAL_I2C_ER_IRQHandler+0x12e>
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	0a1b      	lsrs	r3, r3, #8
 800c54e:	f003 0301 	and.w	r3, r3, #1
 800c552:	2b00      	cmp	r3, #0
 800c554:	d008      	beq.n	800c568 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800c556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c558:	f043 0308 	orr.w	r3, r3, #8
 800c55c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800c566:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d008      	beq.n	800c580 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c574:	431a      	orrs	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f001 f896 	bl	800d6ac <I2C_ITError>
  }
}
 800c580:	bf00      	nop
 800c582:	3728      	adds	r7, #40	; 0x28
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c590:	bf00      	nop
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c5a4:	bf00      	nop
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	70fb      	strb	r3, [r7, #3]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c5e8:	bf00      	nop
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c5fc:	bf00      	nop
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c666:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c66e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c674:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d150      	bne.n	800c720 <I2C_MasterTransmit_TXE+0xc8>
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
 800c680:	2b21      	cmp	r3, #33	; 0x21
 800c682:	d14d      	bne.n	800c720 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	2b08      	cmp	r3, #8
 800c688:	d01d      	beq.n	800c6c6 <I2C_MasterTransmit_TXE+0x6e>
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	2b20      	cmp	r3, #32
 800c68e:	d01a      	beq.n	800c6c6 <I2C_MasterTransmit_TXE+0x6e>
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c696:	d016      	beq.n	800c6c6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c6a6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2211      	movs	r2, #17
 800c6ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2220      	movs	r2, #32
 800c6ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff ff62 	bl	800c588 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c6c4:	e060      	b.n	800c788 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	685a      	ldr	r2, [r3, #4]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c6d4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6e4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2220      	movs	r2, #32
 800c6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	2b40      	cmp	r3, #64	; 0x40
 800c6fe:	d107      	bne.n	800c710 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7ff ff7d 	bl	800c608 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c70e:	e03b      	b.n	800c788 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff ff35 	bl	800c588 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c71e:	e033      	b.n	800c788 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800c720:	7bfb      	ldrb	r3, [r7, #15]
 800c722:	2b21      	cmp	r3, #33	; 0x21
 800c724:	d005      	beq.n	800c732 <I2C_MasterTransmit_TXE+0xda>
 800c726:	7bbb      	ldrb	r3, [r7, #14]
 800c728:	2b40      	cmp	r3, #64	; 0x40
 800c72a:	d12d      	bne.n	800c788 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
 800c72e:	2b22      	cmp	r3, #34	; 0x22
 800c730:	d12a      	bne.n	800c788 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c736:	b29b      	uxth	r3, r3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d108      	bne.n	800c74e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c74a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c74c:	e01c      	b.n	800c788 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c754:	b2db      	uxtb	r3, r3
 800c756:	2b40      	cmp	r3, #64	; 0x40
 800c758:	d103      	bne.n	800c762 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f88e 	bl	800c87c <I2C_MemoryTransmit_TXE_BTF>
}
 800c760:	e012      	b.n	800c788 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c766:	781a      	ldrb	r2, [r3, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	3b01      	subs	r3, #1
 800c780:	b29a      	uxth	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c786:	e7ff      	b.n	800c788 <I2C_MasterTransmit_TXE+0x130>
 800c788:	bf00      	nop
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c79c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b21      	cmp	r3, #33	; 0x21
 800c7a8:	d164      	bne.n	800c874 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d012      	beq.n	800c7da <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b8:	781a      	ldrb	r2, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c4:	1c5a      	adds	r2, r3, #1
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800c7d8:	e04c      	b.n	800c874 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b08      	cmp	r3, #8
 800c7de:	d01d      	beq.n	800c81c <I2C_MasterTransmit_BTF+0x8c>
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2b20      	cmp	r3, #32
 800c7e4:	d01a      	beq.n	800c81c <I2C_MasterTransmit_BTF+0x8c>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c7ec:	d016      	beq.n	800c81c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c7fc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2211      	movs	r2, #17
 800c802:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2220      	movs	r2, #32
 800c810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7ff feb7 	bl	800c588 <HAL_I2C_MasterTxCpltCallback>
}
 800c81a:	e02b      	b.n	800c874 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	685a      	ldr	r2, [r3, #4]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c82a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c83a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2220      	movs	r2, #32
 800c846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b40      	cmp	r3, #64	; 0x40
 800c854:	d107      	bne.n	800c866 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7ff fed2 	bl	800c608 <HAL_I2C_MemTxCpltCallback>
}
 800c864:	e006      	b.n	800c874 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7ff fe8a 	bl	800c588 <HAL_I2C_MasterTxCpltCallback>
}
 800c874:	bf00      	nop
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c88a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c890:	2b00      	cmp	r3, #0
 800c892:	d11d      	bne.n	800c8d0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d10b      	bne.n	800c8b4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8a0:	b2da      	uxtb	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ac:	1c9a      	adds	r2, r3, #2
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800c8b2:	e073      	b.n	800c99c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	121b      	asrs	r3, r3, #8
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8c8:	1c5a      	adds	r2, r3, #1
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c8ce:	e065      	b.n	800c99c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d10b      	bne.n	800c8f0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8e8:	1c5a      	adds	r2, r3, #1
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c8ee:	e055      	b.n	800c99c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d151      	bne.n	800c99c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800c8f8:	7bfb      	ldrb	r3, [r7, #15]
 800c8fa:	2b22      	cmp	r3, #34	; 0x22
 800c8fc:	d10d      	bne.n	800c91a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c90c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c918:	e040      	b.n	800c99c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c91e:	b29b      	uxth	r3, r3
 800c920:	2b00      	cmp	r3, #0
 800c922:	d015      	beq.n	800c950 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800c924:	7bfb      	ldrb	r3, [r7, #15]
 800c926:	2b21      	cmp	r3, #33	; 0x21
 800c928:	d112      	bne.n	800c950 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92e:	781a      	ldrb	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c944:	b29b      	uxth	r3, r3
 800c946:	3b01      	subs	r3, #1
 800c948:	b29a      	uxth	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c94e:	e025      	b.n	800c99c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c954:	b29b      	uxth	r3, r3
 800c956:	2b00      	cmp	r3, #0
 800c958:	d120      	bne.n	800c99c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800c95a:	7bfb      	ldrb	r3, [r7, #15]
 800c95c:	2b21      	cmp	r3, #33	; 0x21
 800c95e:	d11d      	bne.n	800c99c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	685a      	ldr	r2, [r3, #4]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c96e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	681a      	ldr	r2, [r3, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c97e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2220      	movs	r2, #32
 800c98a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7ff fe36 	bl	800c608 <HAL_I2C_MemTxCpltCallback>
}
 800c99c:	bf00      	nop
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	2b22      	cmp	r3, #34	; 0x22
 800c9b6:	f040 80a2 	bne.w	800cafe <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	d921      	bls.n	800ca0c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	691a      	ldr	r2, [r3, #16]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d2:	b2d2      	uxtb	r2, r2
 800c9d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	2b03      	cmp	r3, #3
 800c9f6:	f040 8082 	bne.w	800cafe <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca08:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800ca0a:	e078      	b.n	800cafe <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d074      	beq.n	800cafe <I2C_MasterReceive_RXNE+0x15a>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d002      	beq.n	800ca20 <I2C_MasterReceive_RXNE+0x7c>
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d16e      	bne.n	800cafe <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f001 fc43 	bl	800e2ac <I2C_WaitOnSTOPRequestThroughIT>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d142      	bne.n	800cab2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca3a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ca4a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	691a      	ldr	r2, [r3, #16]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca56:	b2d2      	uxtb	r2, r2
 800ca58:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2220      	movs	r2, #32
 800ca76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	2b40      	cmp	r3, #64	; 0x40
 800ca84:	d10a      	bne.n	800ca9c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f7ff fdc1 	bl	800c61c <HAL_I2C_MemRxCpltCallback>
}
 800ca9a:	e030      	b.n	800cafe <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2212      	movs	r2, #18
 800caa8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7ff fd76 	bl	800c59c <HAL_I2C_MasterRxCpltCallback>
}
 800cab0:	e025      	b.n	800cafe <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	685a      	ldr	r2, [r3, #4]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cac0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	691a      	ldr	r2, [r3, #16]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cacc:	b2d2      	uxtb	r2, r2
 800cace:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad4:	1c5a      	adds	r2, r3, #1
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cade:	b29b      	uxth	r3, r3
 800cae0:	3b01      	subs	r3, #1
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2220      	movs	r2, #32
 800caec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7ff fd99 	bl	800c630 <HAL_I2C_ErrorCallback>
}
 800cafe:	bf00      	nop
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b084      	sub	sp, #16
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb12:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	2b04      	cmp	r3, #4
 800cb1c:	d11b      	bne.n	800cb56 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	685a      	ldr	r2, [r3, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb2c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	691a      	ldr	r2, [r3, #16]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb38:	b2d2      	uxtb	r2, r2
 800cb3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb40:	1c5a      	adds	r2, r3, #1
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	b29a      	uxth	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800cb54:	e0bd      	b.n	800ccd2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	2b03      	cmp	r3, #3
 800cb5e:	d129      	bne.n	800cbb4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	685a      	ldr	r2, [r3, #4]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb6e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2b04      	cmp	r3, #4
 800cb74:	d00a      	beq.n	800cb8c <I2C_MasterReceive_BTF+0x86>
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b02      	cmp	r3, #2
 800cb7a:	d007      	beq.n	800cb8c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb8a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	691a      	ldr	r2, [r3, #16]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb96:	b2d2      	uxtb	r2, r2
 800cb98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb9e:	1c5a      	adds	r2, r3, #1
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800cbb2:	e08e      	b.n	800ccd2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d176      	bne.n	800ccac <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d002      	beq.n	800cbca <I2C_MasterReceive_BTF+0xc4>
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2b10      	cmp	r3, #16
 800cbc8:	d108      	bne.n	800cbdc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbd8:	601a      	str	r2, [r3, #0]
 800cbda:	e019      	b.n	800cc10 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2b04      	cmp	r3, #4
 800cbe0:	d002      	beq.n	800cbe8 <I2C_MasterReceive_BTF+0xe2>
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d108      	bne.n	800cbfa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cbf6:	601a      	str	r2, [r3, #0]
 800cbf8:	e00a      	b.n	800cc10 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2b10      	cmp	r3, #16
 800cbfe:	d007      	beq.n	800cc10 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc0e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	691a      	ldr	r2, [r3, #16]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1a:	b2d2      	uxtb	r2, r2
 800cc1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc22:	1c5a      	adds	r2, r3, #1
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	691a      	ldr	r2, [r3, #16]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc40:	b2d2      	uxtb	r2, r2
 800cc42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	3b01      	subs	r3, #1
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	685a      	ldr	r2, [r3, #4]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800cc6a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2220      	movs	r2, #32
 800cc70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	2b40      	cmp	r3, #64	; 0x40
 800cc7e:	d10a      	bne.n	800cc96 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff fcc4 	bl	800c61c <HAL_I2C_MemRxCpltCallback>
}
 800cc94:	e01d      	b.n	800ccd2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2212      	movs	r2, #18
 800cca2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f7ff fc79 	bl	800c59c <HAL_I2C_MasterRxCpltCallback>
}
 800ccaa:	e012      	b.n	800ccd2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	691a      	ldr	r2, [r3, #16]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb6:	b2d2      	uxtb	r2, r2
 800ccb8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbe:	1c5a      	adds	r2, r3, #1
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	3b01      	subs	r3, #1
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ccd2:	bf00      	nop
 800ccd4:	3710      	adds	r7, #16
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800ccda:	b480      	push	{r7}
 800ccdc:	b083      	sub	sp, #12
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	2b40      	cmp	r3, #64	; 0x40
 800ccec:	d117      	bne.n	800cd1e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d109      	bne.n	800cd0a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cd06:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800cd08:	e067      	b.n	800cdda <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	f043 0301 	orr.w	r3, r3, #1
 800cd14:	b2da      	uxtb	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	611a      	str	r2, [r3, #16]
}
 800cd1c:	e05d      	b.n	800cdda <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	691b      	ldr	r3, [r3, #16]
 800cd22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd26:	d133      	bne.n	800cd90 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	2b21      	cmp	r3, #33	; 0x21
 800cd32:	d109      	bne.n	800cd48 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cd44:	611a      	str	r2, [r3, #16]
 800cd46:	e008      	b.n	800cd5a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	f043 0301 	orr.w	r3, r3, #1
 800cd52:	b2da      	uxtb	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d004      	beq.n	800cd6c <I2C_Master_SB+0x92>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d108      	bne.n	800cd7e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d032      	beq.n	800cdda <I2C_Master_SB+0x100>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d02d      	beq.n	800cdda <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	685a      	ldr	r2, [r3, #4]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd8c:	605a      	str	r2, [r3, #4]
}
 800cd8e:	e024      	b.n	800cdda <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d10e      	bne.n	800cdb6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	11db      	asrs	r3, r3, #7
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	f003 0306 	and.w	r3, r3, #6
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	f063 030f 	orn	r3, r3, #15
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	611a      	str	r2, [r3, #16]
}
 800cdb4:	e011      	b.n	800cdda <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d10d      	bne.n	800cdda <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	11db      	asrs	r3, r3, #7
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	f003 0306 	and.w	r3, r3, #6
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	f063 030e 	orn	r3, r3, #14
 800cdd2:	b2da      	uxtb	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	611a      	str	r2, [r3, #16]
}
 800cdda:	bf00      	nop
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800cde6:	b480      	push	{r7}
 800cde8:	b083      	sub	sp, #12
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d004      	beq.n	800ce0c <I2C_Master_ADD10+0x26>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d108      	bne.n	800ce1e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00c      	beq.n	800ce2e <I2C_Master_ADD10+0x48>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d007      	beq.n	800ce2e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	685a      	ldr	r2, [r3, #4]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce2c:	605a      	str	r2, [r3, #4]
  }
}
 800ce2e:	bf00      	nop
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr

0800ce3a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	b091      	sub	sp, #68	; 0x44
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce50:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce56:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	2b22      	cmp	r3, #34	; 0x22
 800ce62:	f040 8169 	bne.w	800d138 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10f      	bne.n	800ce8e <I2C_Master_ADDR+0x54>
 800ce6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ce72:	2b40      	cmp	r3, #64	; 0x40
 800ce74:	d10b      	bne.n	800ce8e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce76:	2300      	movs	r3, #0
 800ce78:	633b      	str	r3, [r7, #48]	; 0x30
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	633b      	str	r3, [r7, #48]	; 0x30
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	699b      	ldr	r3, [r3, #24]
 800ce88:	633b      	str	r3, [r7, #48]	; 0x30
 800ce8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8c:	e160      	b.n	800d150 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d11d      	bne.n	800ced2 <I2C_Master_ADDR+0x98>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ce9e:	d118      	bne.n	800ced2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cea0:	2300      	movs	r3, #0
 800cea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	695b      	ldr	r3, [r3, #20]
 800ceaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	699b      	ldr	r3, [r3, #24]
 800ceb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ceb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cec4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceca:	1c5a      	adds	r2, r3, #1
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	651a      	str	r2, [r3, #80]	; 0x50
 800ced0:	e13e      	b.n	800d150 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d113      	bne.n	800cf04 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cedc:	2300      	movs	r3, #0
 800cede:	62bb      	str	r3, [r7, #40]	; 0x28
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	695b      	ldr	r3, [r3, #20]
 800cee6:	62bb      	str	r3, [r7, #40]	; 0x28
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	699b      	ldr	r3, [r3, #24]
 800ceee:	62bb      	str	r3, [r7, #40]	; 0x28
 800cef0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf00:	601a      	str	r2, [r3, #0]
 800cf02:	e115      	b.n	800d130 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	f040 808a 	bne.w	800d024 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cf16:	d137      	bne.n	800cf88 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf26:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf36:	d113      	bne.n	800cf60 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf46:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cf48:	2300      	movs	r3, #0
 800cf4a:	627b      	str	r3, [r7, #36]	; 0x24
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	695b      	ldr	r3, [r3, #20]
 800cf52:	627b      	str	r3, [r7, #36]	; 0x24
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	627b      	str	r3, [r7, #36]	; 0x24
 800cf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5e:	e0e7      	b.n	800d130 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cf60:	2300      	movs	r3, #0
 800cf62:	623b      	str	r3, [r7, #32]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	695b      	ldr	r3, [r3, #20]
 800cf6a:	623b      	str	r3, [r7, #32]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	699b      	ldr	r3, [r3, #24]
 800cf72:	623b      	str	r3, [r7, #32]
 800cf74:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	e0d3      	b.n	800d130 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800cf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8a:	2b08      	cmp	r3, #8
 800cf8c:	d02e      	beq.n	800cfec <I2C_Master_ADDR+0x1b2>
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf90:	2b20      	cmp	r3, #32
 800cf92:	d02b      	beq.n	800cfec <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800cf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf96:	2b12      	cmp	r3, #18
 800cf98:	d102      	bne.n	800cfa0 <I2C_Master_ADDR+0x166>
 800cf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d125      	bne.n	800cfec <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa2:	2b04      	cmp	r3, #4
 800cfa4:	d00e      	beq.n	800cfc4 <I2C_Master_ADDR+0x18a>
 800cfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	d00b      	beq.n	800cfc4 <I2C_Master_ADDR+0x18a>
 800cfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfae:	2b10      	cmp	r3, #16
 800cfb0:	d008      	beq.n	800cfc4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfc0:	601a      	str	r2, [r3, #0]
 800cfc2:	e007      	b.n	800cfd4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cfd2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	61fb      	str	r3, [r7, #28]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	695b      	ldr	r3, [r3, #20]
 800cfde:	61fb      	str	r3, [r7, #28]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	699b      	ldr	r3, [r3, #24]
 800cfe6:	61fb      	str	r3, [r7, #28]
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	e0a1      	b.n	800d130 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cffa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cffc:	2300      	movs	r3, #0
 800cffe:	61bb      	str	r3, [r7, #24]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	695b      	ldr	r3, [r3, #20]
 800d006:	61bb      	str	r3, [r7, #24]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	699b      	ldr	r3, [r3, #24]
 800d00e:	61bb      	str	r3, [r7, #24]
 800d010:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	e085      	b.n	800d130 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d028:	b29b      	uxth	r3, r3
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	d14d      	bne.n	800d0ca <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800d02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d030:	2b04      	cmp	r3, #4
 800d032:	d016      	beq.n	800d062 <I2C_Master_ADDR+0x228>
 800d034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d036:	2b02      	cmp	r3, #2
 800d038:	d013      	beq.n	800d062 <I2C_Master_ADDR+0x228>
 800d03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03c:	2b10      	cmp	r3, #16
 800d03e:	d010      	beq.n	800d062 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d04e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	e007      	b.n	800d072 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d070:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d07c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d080:	d117      	bne.n	800d0b2 <I2C_Master_ADDR+0x278>
 800d082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d084:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d088:	d00b      	beq.n	800d0a2 <I2C_Master_ADDR+0x268>
 800d08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d008      	beq.n	800d0a2 <I2C_Master_ADDR+0x268>
 800d090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d092:	2b08      	cmp	r3, #8
 800d094:	d005      	beq.n	800d0a2 <I2C_Master_ADDR+0x268>
 800d096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d098:	2b10      	cmp	r3, #16
 800d09a:	d002      	beq.n	800d0a2 <I2C_Master_ADDR+0x268>
 800d09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09e:	2b20      	cmp	r3, #32
 800d0a0:	d107      	bne.n	800d0b2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d0b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	617b      	str	r3, [r7, #20]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	695b      	ldr	r3, [r3, #20]
 800d0bc:	617b      	str	r3, [r7, #20]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	699b      	ldr	r3, [r3, #24]
 800d0c4:	617b      	str	r3, [r7, #20]
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	e032      	b.n	800d130 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d0d8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0e8:	d117      	bne.n	800d11a <I2C_Master_ADDR+0x2e0>
 800d0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d0f0:	d00b      	beq.n	800d10a <I2C_Master_ADDR+0x2d0>
 800d0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d008      	beq.n	800d10a <I2C_Master_ADDR+0x2d0>
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fa:	2b08      	cmp	r3, #8
 800d0fc:	d005      	beq.n	800d10a <I2C_Master_ADDR+0x2d0>
 800d0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d100:	2b10      	cmp	r3, #16
 800d102:	d002      	beq.n	800d10a <I2C_Master_ADDR+0x2d0>
 800d104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d106:	2b20      	cmp	r3, #32
 800d108:	d107      	bne.n	800d11a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d118:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d11a:	2300      	movs	r3, #0
 800d11c:	613b      	str	r3, [r7, #16]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	695b      	ldr	r3, [r3, #20]
 800d124:	613b      	str	r3, [r7, #16]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	613b      	str	r3, [r7, #16]
 800d12e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800d136:	e00b      	b.n	800d150 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d138:	2300      	movs	r3, #0
 800d13a:	60fb      	str	r3, [r7, #12]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	695b      	ldr	r3, [r3, #20]
 800d142:	60fb      	str	r3, [r7, #12]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	699b      	ldr	r3, [r3, #24]
 800d14a:	60fb      	str	r3, [r7, #12]
 800d14c:	68fb      	ldr	r3, [r7, #12]
}
 800d14e:	e7ff      	b.n	800d150 <I2C_Master_ADDR+0x316>
 800d150:	bf00      	nop
 800d152:	3744      	adds	r7, #68	; 0x44
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d16a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d170:	b29b      	uxth	r3, r3
 800d172:	2b00      	cmp	r3, #0
 800d174:	d02b      	beq.n	800d1ce <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17a:	781a      	ldrb	r2, [r3, #0]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d186:	1c5a      	adds	r2, r3, #1
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d190:	b29b      	uxth	r3, r3
 800d192:	3b01      	subs	r3, #1
 800d194:	b29a      	uxth	r2, r3
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d114      	bne.n	800d1ce <I2C_SlaveTransmit_TXE+0x72>
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
 800d1a6:	2b29      	cmp	r3, #41	; 0x29
 800d1a8:	d111      	bne.n	800d1ce <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	685a      	ldr	r2, [r3, #4]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2221      	movs	r2, #33	; 0x21
 800d1be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2228      	movs	r2, #40	; 0x28
 800d1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7ff f9f1 	bl	800c5b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d1ce:	bf00      	nop
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b083      	sub	sp, #12
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d011      	beq.n	800d20c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ec:	781a      	ldrb	r2, [r3, #0]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f8:	1c5a      	adds	r2, r3, #1
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d202:	b29b      	uxth	r3, r3
 800d204:	3b01      	subs	r3, #1
 800d206:	b29a      	uxth	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800d20c:	bf00      	nop
 800d20e:	370c      	adds	r7, #12
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d226:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d02c      	beq.n	800d28c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	691a      	ldr	r2, [r3, #16]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23c:	b2d2      	uxtb	r2, r2
 800d23e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d244:	1c5a      	adds	r2, r3, #1
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d24e:	b29b      	uxth	r3, r3
 800d250:	3b01      	subs	r3, #1
 800d252:	b29a      	uxth	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d114      	bne.n	800d28c <I2C_SlaveReceive_RXNE+0x74>
 800d262:	7bfb      	ldrb	r3, [r7, #15]
 800d264:	2b2a      	cmp	r3, #42	; 0x2a
 800d266:	d111      	bne.n	800d28c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	685a      	ldr	r2, [r3, #4]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d276:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2222      	movs	r2, #34	; 0x22
 800d27c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2228      	movs	r2, #40	; 0x28
 800d282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7ff f99c 	bl	800c5c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800d28c:	bf00      	nop
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d012      	beq.n	800d2cc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	691a      	ldr	r2, [r3, #16]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b0:	b2d2      	uxtb	r2, r2
 800d2b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b8:	1c5a      	adds	r2, r3, #1
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800d2cc:	bf00      	nop
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d2f2:	2b28      	cmp	r3, #40	; 0x28
 800d2f4:	d127      	bne.n	800d346 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	685a      	ldr	r2, [r3, #4]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d304:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	089b      	lsrs	r3, r3, #2
 800d30a:	f003 0301 	and.w	r3, r3, #1
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d101      	bne.n	800d316 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800d312:	2301      	movs	r3, #1
 800d314:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	09db      	lsrs	r3, r3, #7
 800d31a:	f003 0301 	and.w	r3, r3, #1
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d103      	bne.n	800d32a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	81bb      	strh	r3, [r7, #12]
 800d328:	e002      	b.n	800d330 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	699b      	ldr	r3, [r3, #24]
 800d32e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800d338:	89ba      	ldrh	r2, [r7, #12]
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
 800d33c:	4619      	mov	r1, r3
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff f94a 	bl	800c5d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d344:	e00e      	b.n	800d364 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d346:	2300      	movs	r3, #0
 800d348:	60bb      	str	r3, [r7, #8]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	695b      	ldr	r3, [r3, #20]
 800d350:	60bb      	str	r3, [r7, #8]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	699b      	ldr	r3, [r3, #24]
 800d358:	60bb      	str	r3, [r7, #8]
 800d35a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800d364:	bf00      	nop
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d37a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	685a      	ldr	r2, [r3, #4]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d38a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800d38c:	2300      	movs	r3, #0
 800d38e:	60bb      	str	r3, [r7, #8]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	695b      	ldr	r3, [r3, #20]
 800d396:	60bb      	str	r3, [r7, #8]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f042 0201 	orr.w	r2, r2, #1
 800d3a6:	601a      	str	r2, [r3, #0]
 800d3a8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3b8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3c8:	d172      	bne.n	800d4b0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
 800d3cc:	2b22      	cmp	r3, #34	; 0x22
 800d3ce:	d002      	beq.n	800d3d6 <I2C_Slave_STOPF+0x6a>
 800d3d0:	7bfb      	ldrb	r3, [r7, #15]
 800d3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d3d4:	d135      	bne.n	800d442 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d005      	beq.n	800d3fa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f2:	f043 0204 	orr.w	r2, r3, #4
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	685a      	ldr	r2, [r3, #4]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d408:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fd fc44 	bl	800ac9c <HAL_DMA_GetState>
 800d414:	4603      	mov	r3, r0
 800d416:	2b01      	cmp	r3, #1
 800d418:	d049      	beq.n	800d4ae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41e:	4a69      	ldr	r2, [pc, #420]	; (800d5c4 <I2C_Slave_STOPF+0x258>)
 800d420:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d426:	4618      	mov	r0, r3
 800d428:	f7fd fa8c 	bl	800a944 <HAL_DMA_Abort_IT>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d03d      	beq.n	800d4ae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d43c:	4610      	mov	r0, r2
 800d43e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d440:	e035      	b.n	800d4ae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d454:	b29b      	uxth	r3, r3
 800d456:	2b00      	cmp	r3, #0
 800d458:	d005      	beq.n	800d466 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d45e:	f043 0204 	orr.w	r2, r3, #4
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	685a      	ldr	r2, [r3, #4]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d474:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7fd fc0e 	bl	800ac9c <HAL_DMA_GetState>
 800d480:	4603      	mov	r3, r0
 800d482:	2b01      	cmp	r3, #1
 800d484:	d014      	beq.n	800d4b0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d48a:	4a4e      	ldr	r2, [pc, #312]	; (800d5c4 <I2C_Slave_STOPF+0x258>)
 800d48c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d492:	4618      	mov	r0, r3
 800d494:	f7fd fa56 	bl	800a944 <HAL_DMA_Abort_IT>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d008      	beq.n	800d4b0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d4a8:	4610      	mov	r0, r2
 800d4aa:	4798      	blx	r3
 800d4ac:	e000      	b.n	800d4b0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d4ae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d03e      	beq.n	800d538 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	695b      	ldr	r3, [r3, #20]
 800d4c0:	f003 0304 	and.w	r3, r3, #4
 800d4c4:	2b04      	cmp	r3, #4
 800d4c6:	d112      	bne.n	800d4ee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	691a      	ldr	r2, [r3, #16]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d2:	b2d2      	uxtb	r2, r2
 800d4d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	695b      	ldr	r3, [r3, #20]
 800d4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4f8:	2b40      	cmp	r3, #64	; 0x40
 800d4fa:	d112      	bne.n	800d522 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	691a      	ldr	r2, [r3, #16]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d506:	b2d2      	uxtb	r2, r2
 800d508:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d518:	b29b      	uxth	r3, r3
 800d51a:	3b01      	subs	r3, #1
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d526:	b29b      	uxth	r3, r3
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d005      	beq.n	800d538 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d530:	f043 0204 	orr.w	r2, r3, #4
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d003      	beq.n	800d548 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 f8b3 	bl	800d6ac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800d546:	e039      	b.n	800d5bc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d548:	7bfb      	ldrb	r3, [r7, #15]
 800d54a:	2b2a      	cmp	r3, #42	; 0x2a
 800d54c:	d109      	bne.n	800d562 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2200      	movs	r2, #0
 800d552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2228      	movs	r2, #40	; 0x28
 800d558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f7ff f831 	bl	800c5c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	2b28      	cmp	r3, #40	; 0x28
 800d56c:	d111      	bne.n	800d592 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4a15      	ldr	r2, [pc, #84]	; (800d5c8 <I2C_Slave_STOPF+0x25c>)
 800d572:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2220      	movs	r2, #32
 800d57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2200      	movs	r2, #0
 800d586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f7ff f832 	bl	800c5f4 <HAL_I2C_ListenCpltCallback>
}
 800d590:	e014      	b.n	800d5bc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d596:	2b22      	cmp	r3, #34	; 0x22
 800d598:	d002      	beq.n	800d5a0 <I2C_Slave_STOPF+0x234>
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
 800d59c:	2b22      	cmp	r3, #34	; 0x22
 800d59e:	d10d      	bne.n	800d5bc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2220      	movs	r2, #32
 800d5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff f804 	bl	800c5c4 <HAL_I2C_SlaveRxCpltCallback>
}
 800d5bc:	bf00      	nop
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	0800dead 	.word	0x0800dead
 800d5c8:	ffff0000 	.word	0xffff0000

0800d5cc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5da:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	2b08      	cmp	r3, #8
 800d5e6:	d002      	beq.n	800d5ee <I2C_Slave_AF+0x22>
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	2b20      	cmp	r3, #32
 800d5ec:	d129      	bne.n	800d642 <I2C_Slave_AF+0x76>
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
 800d5f0:	2b28      	cmp	r3, #40	; 0x28
 800d5f2:	d126      	bne.n	800d642 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	4a2c      	ldr	r2, [pc, #176]	; (800d6a8 <I2C_Slave_AF+0xdc>)
 800d5f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	685a      	ldr	r2, [r3, #4]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d608:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d612:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d622:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2220      	movs	r2, #32
 800d62e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7fe ffda 	bl	800c5f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800d640:	e02e      	b.n	800d6a0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d642:	7bfb      	ldrb	r3, [r7, #15]
 800d644:	2b21      	cmp	r3, #33	; 0x21
 800d646:	d126      	bne.n	800d696 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	4a17      	ldr	r2, [pc, #92]	; (800d6a8 <I2C_Slave_AF+0xdc>)
 800d64c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2221      	movs	r2, #33	; 0x21
 800d652:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2220      	movs	r2, #32
 800d658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	685a      	ldr	r2, [r3, #4]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d672:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d67c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d68c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7fe ff8e 	bl	800c5b0 <HAL_I2C_SlaveTxCpltCallback>
}
 800d694:	e004      	b.n	800d6a0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d69e:	615a      	str	r2, [r3, #20]
}
 800d6a0:	bf00      	nop
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	ffff0000 	.word	0xffff0000

0800d6ac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d6c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d6c4:	7bbb      	ldrb	r3, [r7, #14]
 800d6c6:	2b10      	cmp	r3, #16
 800d6c8:	d002      	beq.n	800d6d0 <I2C_ITError+0x24>
 800d6ca:	7bbb      	ldrb	r3, [r7, #14]
 800d6cc:	2b40      	cmp	r3, #64	; 0x40
 800d6ce:	d10a      	bne.n	800d6e6 <I2C_ITError+0x3a>
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
 800d6d2:	2b22      	cmp	r3, #34	; 0x22
 800d6d4:	d107      	bne.n	800d6e6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d6e4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d6e6:	7bfb      	ldrb	r3, [r7, #15]
 800d6e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d6ec:	2b28      	cmp	r3, #40	; 0x28
 800d6ee:	d107      	bne.n	800d700 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2228      	movs	r2, #40	; 0x28
 800d6fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d6fe:	e015      	b.n	800d72c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d70a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d70e:	d00a      	beq.n	800d726 <I2C_ITError+0x7a>
 800d710:	7bfb      	ldrb	r3, [r7, #15]
 800d712:	2b60      	cmp	r3, #96	; 0x60
 800d714:	d007      	beq.n	800d726 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2220      	movs	r2, #32
 800d71a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d73a:	d162      	bne.n	800d802 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d74a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d754:	b2db      	uxtb	r3, r3
 800d756:	2b01      	cmp	r3, #1
 800d758:	d020      	beq.n	800d79c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75e:	4a6a      	ldr	r2, [pc, #424]	; (800d908 <I2C_ITError+0x25c>)
 800d760:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d766:	4618      	mov	r0, r3
 800d768:	f7fd f8ec 	bl	800a944 <HAL_DMA_Abort_IT>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 8089 	beq.w	800d886 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f022 0201 	bic.w	r2, r2, #1
 800d782:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2220      	movs	r2, #32
 800d788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d796:	4610      	mov	r0, r2
 800d798:	4798      	blx	r3
 800d79a:	e074      	b.n	800d886 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a0:	4a59      	ldr	r2, [pc, #356]	; (800d908 <I2C_ITError+0x25c>)
 800d7a2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fd f8cb 	bl	800a944 <HAL_DMA_Abort_IT>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d068      	beq.n	800d886 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	695b      	ldr	r3, [r3, #20]
 800d7ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7be:	2b40      	cmp	r3, #64	; 0x40
 800d7c0:	d10b      	bne.n	800d7da <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	691a      	ldr	r2, [r3, #16]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7cc:	b2d2      	uxtb	r2, r2
 800d7ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d4:	1c5a      	adds	r2, r3, #1
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f022 0201 	bic.w	r2, r2, #1
 800d7e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2220      	movs	r2, #32
 800d7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	4798      	blx	r3
 800d800:	e041      	b.n	800d886 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	2b60      	cmp	r3, #96	; 0x60
 800d80c:	d125      	bne.n	800d85a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2220      	movs	r2, #32
 800d812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	695b      	ldr	r3, [r3, #20]
 800d822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d826:	2b40      	cmp	r3, #64	; 0x40
 800d828:	d10b      	bne.n	800d842 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	691a      	ldr	r2, [r3, #16]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d834:	b2d2      	uxtb	r2, r2
 800d836:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83c:	1c5a      	adds	r2, r3, #1
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f022 0201 	bic.w	r2, r2, #1
 800d850:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7fe fef6 	bl	800c644 <HAL_I2C_AbortCpltCallback>
 800d858:	e015      	b.n	800d886 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	695b      	ldr	r3, [r3, #20]
 800d860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d864:	2b40      	cmp	r3, #64	; 0x40
 800d866:	d10b      	bne.n	800d880 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	691a      	ldr	r2, [r3, #16]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d872:	b2d2      	uxtb	r2, r2
 800d874:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87a:	1c5a      	adds	r2, r3, #1
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7fe fed5 	bl	800c630 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d88a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	2b00      	cmp	r3, #0
 800d894:	d10e      	bne.n	800d8b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d109      	bne.n	800d8b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d104      	bne.n	800d8b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d007      	beq.n	800d8c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	685a      	ldr	r2, [r3, #4]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d8c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d0:	f003 0304 	and.w	r3, r3, #4
 800d8d4:	2b04      	cmp	r3, #4
 800d8d6:	d113      	bne.n	800d900 <I2C_ITError+0x254>
 800d8d8:	7bfb      	ldrb	r3, [r7, #15]
 800d8da:	2b28      	cmp	r3, #40	; 0x28
 800d8dc:	d110      	bne.n	800d900 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	4a0a      	ldr	r2, [pc, #40]	; (800d90c <I2C_ITError+0x260>)
 800d8e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2220      	movs	r2, #32
 800d8ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f7fe fe7a 	bl	800c5f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d900:	bf00      	nop
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	0800dead 	.word	0x0800dead
 800d90c:	ffff0000 	.word	0xffff0000

0800d910 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b088      	sub	sp, #32
 800d914:	af02      	add	r7, sp, #8
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	607a      	str	r2, [r7, #4]
 800d91a:	603b      	str	r3, [r7, #0]
 800d91c:	460b      	mov	r3, r1
 800d91e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d924:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2b08      	cmp	r3, #8
 800d92a:	d006      	beq.n	800d93a <I2C_MasterRequestWrite+0x2a>
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d003      	beq.n	800d93a <I2C_MasterRequestWrite+0x2a>
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d938:	d108      	bne.n	800d94c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d948:	601a      	str	r2, [r3, #0]
 800d94a:	e00b      	b.n	800d964 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d950:	2b12      	cmp	r3, #18
 800d952:	d107      	bne.n	800d964 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d962:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f000 fb43 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00d      	beq.n	800d998 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d98a:	d103      	bne.n	800d994 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d992:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d994:	2303      	movs	r3, #3
 800d996:	e035      	b.n	800da04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	691b      	ldr	r3, [r3, #16]
 800d99c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9a0:	d108      	bne.n	800d9b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d9a2:	897b      	ldrh	r3, [r7, #10]
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d9b0:	611a      	str	r2, [r3, #16]
 800d9b2:	e01b      	b.n	800d9ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d9b4:	897b      	ldrh	r3, [r7, #10]
 800d9b6:	11db      	asrs	r3, r3, #7
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	f003 0306 	and.w	r3, r3, #6
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	f063 030f 	orn	r3, r3, #15
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	490e      	ldr	r1, [pc, #56]	; (800da0c <I2C_MasterRequestWrite+0xfc>)
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	f000 fb69 	bl	800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d001      	beq.n	800d9e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e010      	b.n	800da04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d9e2:	897b      	ldrh	r3, [r7, #10]
 800d9e4:	b2da      	uxtb	r2, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	4907      	ldr	r1, [pc, #28]	; (800da10 <I2C_MasterRequestWrite+0x100>)
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f000 fb59 	bl	800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d001      	beq.n	800da02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d9fe:	2301      	movs	r3, #1
 800da00:	e000      	b.n	800da04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800da02:	2300      	movs	r3, #0
}
 800da04:	4618      	mov	r0, r3
 800da06:	3718      	adds	r7, #24
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	00010008 	.word	0x00010008
 800da10:	00010002 	.word	0x00010002

0800da14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b088      	sub	sp, #32
 800da18:	af02      	add	r7, sp, #8
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	607a      	str	r2, [r7, #4]
 800da1e:	603b      	str	r3, [r7, #0]
 800da20:	460b      	mov	r3, r1
 800da22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	2b08      	cmp	r3, #8
 800da3e:	d006      	beq.n	800da4e <I2C_MasterRequestRead+0x3a>
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	2b01      	cmp	r3, #1
 800da44:	d003      	beq.n	800da4e <I2C_MasterRequestRead+0x3a>
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800da4c:	d108      	bne.n	800da60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da5c:	601a      	str	r2, [r3, #0]
 800da5e:	e00b      	b.n	800da78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da64:	2b11      	cmp	r3, #17
 800da66:	d107      	bne.n	800da78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	9300      	str	r3, [sp, #0]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f000 fab9 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00d      	beq.n	800daac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da9e:	d103      	bne.n	800daa8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800daa8:	2303      	movs	r3, #3
 800daaa:	e079      	b.n	800dba0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	691b      	ldr	r3, [r3, #16]
 800dab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dab4:	d108      	bne.n	800dac8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800dab6:	897b      	ldrh	r3, [r7, #10]
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	f043 0301 	orr.w	r3, r3, #1
 800dabe:	b2da      	uxtb	r2, r3
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	611a      	str	r2, [r3, #16]
 800dac6:	e05f      	b.n	800db88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800dac8:	897b      	ldrh	r3, [r7, #10]
 800daca:	11db      	asrs	r3, r3, #7
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	f003 0306 	and.w	r3, r3, #6
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	f063 030f 	orn	r3, r3, #15
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	4930      	ldr	r1, [pc, #192]	; (800dba8 <I2C_MasterRequestRead+0x194>)
 800dae6:	68f8      	ldr	r0, [r7, #12]
 800dae8:	f000 fadf 	bl	800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d001      	beq.n	800daf6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800daf2:	2301      	movs	r3, #1
 800daf4:	e054      	b.n	800dba0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800daf6:	897b      	ldrh	r3, [r7, #10]
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	4929      	ldr	r1, [pc, #164]	; (800dbac <I2C_MasterRequestRead+0x198>)
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f000 facf 	bl	800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d001      	beq.n	800db16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	e044      	b.n	800dba0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db16:	2300      	movs	r3, #0
 800db18:	613b      	str	r3, [r7, #16]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	695b      	ldr	r3, [r3, #20]
 800db20:	613b      	str	r3, [r7, #16]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	699b      	ldr	r3, [r3, #24]
 800db28:	613b      	str	r3, [r7, #16]
 800db2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	9300      	str	r3, [sp, #0]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f000 fa57 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d00d      	beq.n	800db70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db62:	d103      	bne.n	800db6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db6a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800db6c:	2303      	movs	r3, #3
 800db6e:	e017      	b.n	800dba0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800db70:	897b      	ldrh	r3, [r7, #10]
 800db72:	11db      	asrs	r3, r3, #7
 800db74:	b2db      	uxtb	r3, r3
 800db76:	f003 0306 	and.w	r3, r3, #6
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	f063 030e 	orn	r3, r3, #14
 800db80:	b2da      	uxtb	r2, r3
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	4907      	ldr	r1, [pc, #28]	; (800dbac <I2C_MasterRequestRead+0x198>)
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f000 fa8b 	bl	800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d001      	beq.n	800db9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800db9a:	2301      	movs	r3, #1
 800db9c:	e000      	b.n	800dba0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3718      	adds	r7, #24
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	00010008 	.word	0x00010008
 800dbac:	00010002 	.word	0x00010002

0800dbb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b088      	sub	sp, #32
 800dbb4:	af02      	add	r7, sp, #8
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	4608      	mov	r0, r1
 800dbba:	4611      	mov	r1, r2
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	817b      	strh	r3, [r7, #10]
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	813b      	strh	r3, [r7, #8]
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dbd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	6a3b      	ldr	r3, [r7, #32]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f000 fa08 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00d      	beq.n	800dc0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc00:	d103      	bne.n	800dc0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dc0a:	2303      	movs	r3, #3
 800dc0c:	e05f      	b.n	800dcce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dc0e:	897b      	ldrh	r3, [r7, #10]
 800dc10:	b2db      	uxtb	r3, r3
 800dc12:	461a      	mov	r2, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800dc1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc20:	6a3a      	ldr	r2, [r7, #32]
 800dc22:	492d      	ldr	r1, [pc, #180]	; (800dcd8 <I2C_RequestMemoryWrite+0x128>)
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f000 fa40 	bl	800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d001      	beq.n	800dc34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800dc30:	2301      	movs	r3, #1
 800dc32:	e04c      	b.n	800dcce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc34:	2300      	movs	r3, #0
 800dc36:	617b      	str	r3, [r7, #20]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	695b      	ldr	r3, [r3, #20]
 800dc3e:	617b      	str	r3, [r7, #20]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	617b      	str	r3, [r7, #20]
 800dc48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dc4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc4c:	6a39      	ldr	r1, [r7, #32]
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f000 faaa 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00d      	beq.n	800dc76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc5e:	2b04      	cmp	r3, #4
 800dc60:	d107      	bne.n	800dc72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800dc72:	2301      	movs	r3, #1
 800dc74:	e02b      	b.n	800dcce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800dc76:	88fb      	ldrh	r3, [r7, #6]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d105      	bne.n	800dc88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800dc7c:	893b      	ldrh	r3, [r7, #8]
 800dc7e:	b2da      	uxtb	r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	611a      	str	r2, [r3, #16]
 800dc86:	e021      	b.n	800dccc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800dc88:	893b      	ldrh	r3, [r7, #8]
 800dc8a:	0a1b      	lsrs	r3, r3, #8
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	b2da      	uxtb	r2, r3
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dc96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc98:	6a39      	ldr	r1, [r7, #32]
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f000 fa84 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00d      	beq.n	800dcc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcaa:	2b04      	cmp	r3, #4
 800dcac:	d107      	bne.n	800dcbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dcbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e005      	b.n	800dcce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800dcc2:	893b      	ldrh	r3, [r7, #8]
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3718      	adds	r7, #24
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	00010002 	.word	0x00010002

0800dcdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b088      	sub	sp, #32
 800dce0:	af02      	add	r7, sp, #8
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	4608      	mov	r0, r1
 800dce6:	4611      	mov	r1, r2
 800dce8:	461a      	mov	r2, r3
 800dcea:	4603      	mov	r3, r0
 800dcec:	817b      	strh	r3, [r7, #10]
 800dcee:	460b      	mov	r3, r1
 800dcf0:	813b      	strh	r3, [r7, #8]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dd04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	6a3b      	ldr	r3, [r7, #32]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f000 f96a 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00d      	beq.n	800dd4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd3c:	d103      	bne.n	800dd46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800dd46:	2303      	movs	r3, #3
 800dd48:	e0aa      	b.n	800dea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dd4a:	897b      	ldrh	r3, [r7, #10]
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	461a      	mov	r2, r3
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800dd58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5c:	6a3a      	ldr	r2, [r7, #32]
 800dd5e:	4952      	ldr	r1, [pc, #328]	; (800dea8 <I2C_RequestMemoryRead+0x1cc>)
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f000 f9a2 	bl	800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d001      	beq.n	800dd70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	e097      	b.n	800dea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd70:	2300      	movs	r3, #0
 800dd72:	617b      	str	r3, [r7, #20]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	695b      	ldr	r3, [r3, #20]
 800dd7a:	617b      	str	r3, [r7, #20]
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	699b      	ldr	r3, [r3, #24]
 800dd82:	617b      	str	r3, [r7, #20]
 800dd84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dd86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd88:	6a39      	ldr	r1, [r7, #32]
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f000 fa0c 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00d      	beq.n	800ddb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd9a:	2b04      	cmp	r3, #4
 800dd9c:	d107      	bne.n	800ddae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e076      	b.n	800dea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ddb2:	88fb      	ldrh	r3, [r7, #6]
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d105      	bne.n	800ddc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ddb8:	893b      	ldrh	r3, [r7, #8]
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	611a      	str	r2, [r3, #16]
 800ddc2:	e021      	b.n	800de08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ddc4:	893b      	ldrh	r3, [r7, #8]
 800ddc6:	0a1b      	lsrs	r3, r3, #8
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ddd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddd4:	6a39      	ldr	r1, [r7, #32]
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f000 f9e6 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800dddc:	4603      	mov	r3, r0
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00d      	beq.n	800ddfe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde6:	2b04      	cmp	r3, #4
 800dde8:	d107      	bne.n	800ddfa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e050      	b.n	800dea0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ddfe:	893b      	ldrh	r3, [r7, #8]
 800de00:	b2da      	uxtb	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800de08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de0a:	6a39      	ldr	r1, [r7, #32]
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f000 f9cb 	bl	800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00d      	beq.n	800de34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de1c:	2b04      	cmp	r3, #4
 800de1e:	d107      	bne.n	800de30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800de30:	2301      	movs	r3, #1
 800de32:	e035      	b.n	800dea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800de44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de46:	9300      	str	r3, [sp, #0]
 800de48:	6a3b      	ldr	r3, [r7, #32]
 800de4a:	2200      	movs	r2, #0
 800de4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f000 f8d3 	bl	800dffc <I2C_WaitOnFlagUntilTimeout>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00d      	beq.n	800de78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de6a:	d103      	bne.n	800de74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800de74:	2303      	movs	r3, #3
 800de76:	e013      	b.n	800dea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800de78:	897b      	ldrh	r3, [r7, #10]
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	f043 0301 	orr.w	r3, r3, #1
 800de80:	b2da      	uxtb	r2, r3
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800de88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8a:	6a3a      	ldr	r2, [r7, #32]
 800de8c:	4906      	ldr	r1, [pc, #24]	; (800dea8 <I2C_RequestMemoryRead+0x1cc>)
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f000 f90b 	bl	800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d001      	beq.n	800de9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
 800de9c:	e000      	b.n	800dea0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3718      	adds	r7, #24
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	00010002 	.word	0x00010002

0800deac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800deb4:	2300      	movs	r3, #0
 800deb6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800debc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dec4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800dec6:	4b4b      	ldr	r3, [pc, #300]	; (800dff4 <I2C_DMAAbort+0x148>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	08db      	lsrs	r3, r3, #3
 800decc:	4a4a      	ldr	r2, [pc, #296]	; (800dff8 <I2C_DMAAbort+0x14c>)
 800dece:	fba2 2303 	umull	r2, r3, r2, r3
 800ded2:	0a1a      	lsrs	r2, r3, #8
 800ded4:	4613      	mov	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4413      	add	r3, r2
 800deda:	00da      	lsls	r2, r3, #3
 800dedc:	1ad3      	subs	r3, r2, r3
 800dede:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d106      	bne.n	800def4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deea:	f043 0220 	orr.w	r2, r3, #32
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800def2:	e00a      	b.n	800df0a <I2C_DMAAbort+0x5e>
    }
    count--;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3b01      	subs	r3, #1
 800def8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df08:	d0ea      	beq.n	800dee0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d003      	beq.n	800df1a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df16:	2200      	movs	r2, #0
 800df18:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d003      	beq.n	800df2a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df26:	2200      	movs	r2, #0
 800df28:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df38:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	2200      	movs	r2, #0
 800df3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df44:	2b00      	cmp	r3, #0
 800df46:	d003      	beq.n	800df50 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df4c:	2200      	movs	r2, #0
 800df4e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df54:	2b00      	cmp	r3, #0
 800df56:	d003      	beq.n	800df60 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5c:	2200      	movs	r2, #0
 800df5e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f022 0201 	bic.w	r2, r2, #1
 800df6e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b60      	cmp	r3, #96	; 0x60
 800df7a:	d10e      	bne.n	800df9a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	2220      	movs	r2, #32
 800df80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	2200      	movs	r2, #0
 800df88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	2200      	movs	r2, #0
 800df90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800df92:	6978      	ldr	r0, [r7, #20]
 800df94:	f7fe fb56 	bl	800c644 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800df98:	e027      	b.n	800dfea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800df9a:	7cfb      	ldrb	r3, [r7, #19]
 800df9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dfa0:	2b28      	cmp	r3, #40	; 0x28
 800dfa2:	d117      	bne.n	800dfd4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f042 0201 	orr.w	r2, r2, #1
 800dfb2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dfc2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2228      	movs	r2, #40	; 0x28
 800dfce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800dfd2:	e007      	b.n	800dfe4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	2220      	movs	r2, #32
 800dfd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800dfe4:	6978      	ldr	r0, [r7, #20]
 800dfe6:	f7fe fb23 	bl	800c630 <HAL_I2C_ErrorCallback>
}
 800dfea:	bf00      	nop
 800dfec:	3718      	adds	r7, #24
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	20000034 	.word	0x20000034
 800dff8:	14f8b589 	.word	0x14f8b589

0800dffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	603b      	str	r3, [r7, #0]
 800e008:	4613      	mov	r3, r2
 800e00a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e00c:	e025      	b.n	800e05a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e014:	d021      	beq.n	800e05a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e016:	f7fc f94f 	bl	800a2b8 <HAL_GetTick>
 800e01a:	4602      	mov	r2, r0
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	1ad3      	subs	r3, r2, r3
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	429a      	cmp	r2, r3
 800e024:	d302      	bcc.n	800e02c <I2C_WaitOnFlagUntilTimeout+0x30>
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d116      	bne.n	800e05a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2200      	movs	r2, #0
 800e030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2220      	movs	r2, #32
 800e036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2200      	movs	r2, #0
 800e03e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e046:	f043 0220 	orr.w	r2, r3, #32
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2200      	movs	r2, #0
 800e052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e023      	b.n	800e0a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	0c1b      	lsrs	r3, r3, #16
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	2b01      	cmp	r3, #1
 800e062:	d10d      	bne.n	800e080 <I2C_WaitOnFlagUntilTimeout+0x84>
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	695b      	ldr	r3, [r3, #20]
 800e06a:	43da      	mvns	r2, r3
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	4013      	ands	r3, r2
 800e070:	b29b      	uxth	r3, r3
 800e072:	2b00      	cmp	r3, #0
 800e074:	bf0c      	ite	eq
 800e076:	2301      	moveq	r3, #1
 800e078:	2300      	movne	r3, #0
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	461a      	mov	r2, r3
 800e07e:	e00c      	b.n	800e09a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	699b      	ldr	r3, [r3, #24]
 800e086:	43da      	mvns	r2, r3
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	4013      	ands	r3, r2
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	2b00      	cmp	r3, #0
 800e090:	bf0c      	ite	eq
 800e092:	2301      	moveq	r3, #1
 800e094:	2300      	movne	r3, #0
 800e096:	b2db      	uxtb	r3, r3
 800e098:	461a      	mov	r2, r3
 800e09a:	79fb      	ldrb	r3, [r7, #7]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d0b6      	beq.n	800e00e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b084      	sub	sp, #16
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	60f8      	str	r0, [r7, #12]
 800e0b2:	60b9      	str	r1, [r7, #8]
 800e0b4:	607a      	str	r2, [r7, #4]
 800e0b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e0b8:	e051      	b.n	800e15e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	695b      	ldr	r3, [r3, #20]
 800e0c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e0c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0c8:	d123      	bne.n	800e112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e0d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e0e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2220      	movs	r2, #32
 800e0ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0fe:	f043 0204 	orr.w	r2, r3, #4
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	e046      	b.n	800e1a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e118:	d021      	beq.n	800e15e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e11a:	f7fc f8cd 	bl	800a2b8 <HAL_GetTick>
 800e11e:	4602      	mov	r2, r0
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	1ad3      	subs	r3, r2, r3
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	429a      	cmp	r2, r3
 800e128:	d302      	bcc.n	800e130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d116      	bne.n	800e15e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2200      	movs	r2, #0
 800e134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2220      	movs	r2, #32
 800e13a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2200      	movs	r2, #0
 800e142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e14a:	f043 0220 	orr.w	r2, r3, #32
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2200      	movs	r2, #0
 800e156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e15a:	2301      	movs	r3, #1
 800e15c:	e020      	b.n	800e1a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	0c1b      	lsrs	r3, r3, #16
 800e162:	b2db      	uxtb	r3, r3
 800e164:	2b01      	cmp	r3, #1
 800e166:	d10c      	bne.n	800e182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	695b      	ldr	r3, [r3, #20]
 800e16e:	43da      	mvns	r2, r3
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	4013      	ands	r3, r2
 800e174:	b29b      	uxth	r3, r3
 800e176:	2b00      	cmp	r3, #0
 800e178:	bf14      	ite	ne
 800e17a:	2301      	movne	r3, #1
 800e17c:	2300      	moveq	r3, #0
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	e00b      	b.n	800e19a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	699b      	ldr	r3, [r3, #24]
 800e188:	43da      	mvns	r2, r3
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	4013      	ands	r3, r2
 800e18e:	b29b      	uxth	r3, r3
 800e190:	2b00      	cmp	r3, #0
 800e192:	bf14      	ite	ne
 800e194:	2301      	movne	r3, #1
 800e196:	2300      	moveq	r3, #0
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d18d      	bne.n	800e0ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e1b4:	e02d      	b.n	800e212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f000 f900 	bl	800e3bc <I2C_IsAcknowledgeFailed>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e02d      	b.n	800e222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1cc:	d021      	beq.n	800e212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1ce:	f7fc f873 	bl	800a2b8 <HAL_GetTick>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	1ad3      	subs	r3, r2, r3
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d302      	bcc.n	800e1e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d116      	bne.n	800e212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2220      	movs	r2, #32
 800e1ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1fe:	f043 0220 	orr.w	r2, r3, #32
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	e007      	b.n	800e222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	695b      	ldr	r3, [r3, #20]
 800e218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e21c:	2b80      	cmp	r3, #128	; 0x80
 800e21e:	d1ca      	bne.n	800e1b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e220:	2300      	movs	r3, #0
}
 800e222:	4618      	mov	r0, r3
 800e224:	3710      	adds	r7, #16
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b084      	sub	sp, #16
 800e22e:	af00      	add	r7, sp, #0
 800e230:	60f8      	str	r0, [r7, #12]
 800e232:	60b9      	str	r1, [r7, #8]
 800e234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e236:	e02d      	b.n	800e294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f000 f8bf 	bl	800e3bc <I2C_IsAcknowledgeFailed>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d001      	beq.n	800e248 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e244:	2301      	movs	r3, #1
 800e246:	e02d      	b.n	800e2a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e24e:	d021      	beq.n	800e294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e250:	f7fc f832 	bl	800a2b8 <HAL_GetTick>
 800e254:	4602      	mov	r2, r0
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d302      	bcc.n	800e266 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d116      	bne.n	800e294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2200      	movs	r2, #0
 800e26a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2220      	movs	r2, #32
 800e270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2200      	movs	r2, #0
 800e278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e280:	f043 0220 	orr.w	r2, r3, #32
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e290:	2301      	movs	r3, #1
 800e292:	e007      	b.n	800e2a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	695b      	ldr	r3, [r3, #20]
 800e29a:	f003 0304 	and.w	r3, r3, #4
 800e29e:	2b04      	cmp	r3, #4
 800e2a0:	d1ca      	bne.n	800e238 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3710      	adds	r7, #16
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800e2b8:	4b13      	ldr	r3, [pc, #76]	; (800e308 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	08db      	lsrs	r3, r3, #3
 800e2be:	4a13      	ldr	r2, [pc, #76]	; (800e30c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800e2c0:	fba2 2303 	umull	r2, r3, r2, r3
 800e2c4:	0a1a      	lsrs	r2, r3, #8
 800e2c6:	4613      	mov	r3, r2
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	4413      	add	r3, r2
 800e2cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	3b01      	subs	r3, #1
 800e2d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d107      	bne.n	800e2ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2de:	f043 0220 	orr.w	r2, r3, #32
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e008      	b.n	800e2fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e2f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2f8:	d0e9      	beq.n	800e2ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3714      	adds	r7, #20
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr
 800e308:	20000034 	.word	0x20000034
 800e30c:	14f8b589 	.word	0x14f8b589

0800e310 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e31c:	e042      	b.n	800e3a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	695b      	ldr	r3, [r3, #20]
 800e324:	f003 0310 	and.w	r3, r3, #16
 800e328:	2b10      	cmp	r3, #16
 800e32a:	d119      	bne.n	800e360 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f06f 0210 	mvn.w	r2, #16
 800e334:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2200      	movs	r2, #0
 800e33a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2220      	movs	r2, #32
 800e340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2200      	movs	r2, #0
 800e348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2200      	movs	r2, #0
 800e358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e35c:	2301      	movs	r3, #1
 800e35e:	e029      	b.n	800e3b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e360:	f7fb ffaa 	bl	800a2b8 <HAL_GetTick>
 800e364:	4602      	mov	r2, r0
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	1ad3      	subs	r3, r2, r3
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d302      	bcc.n	800e376 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d116      	bne.n	800e3a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2200      	movs	r2, #0
 800e37a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2220      	movs	r2, #32
 800e380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2200      	movs	r2, #0
 800e388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e390:	f043 0220 	orr.w	r2, r3, #32
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2200      	movs	r2, #0
 800e39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e007      	b.n	800e3b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	695b      	ldr	r3, [r3, #20]
 800e3aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3ae:	2b40      	cmp	r3, #64	; 0x40
 800e3b0:	d1b5      	bne.n	800e31e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3710      	adds	r7, #16
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	695b      	ldr	r3, [r3, #20]
 800e3ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e3ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3d2:	d11b      	bne.n	800e40c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e3dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2220      	movs	r2, #32
 800e3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3f8:	f043 0204 	orr.w	r2, r3, #4
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2200      	movs	r2, #0
 800e404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e408:	2301      	movs	r3, #1
 800e40a:	e000      	b.n	800e40e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	370c      	adds	r7, #12
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800e41a:	b480      	push	{r7}
 800e41c:	b083      	sub	sp, #12
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e426:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e42a:	d103      	bne.n	800e434 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2201      	movs	r2, #1
 800e430:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800e432:	e007      	b.n	800e444 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e438:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e43c:	d102      	bne.n	800e444 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2208      	movs	r2, #8
 800e442:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e444:	bf00      	nop
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b086      	sub	sp, #24
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e45e:	2301      	movs	r3, #1
 800e460:	e264      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 0301 	and.w	r3, r3, #1
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d075      	beq.n	800e55a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e46e:	4ba3      	ldr	r3, [pc, #652]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e470:	689b      	ldr	r3, [r3, #8]
 800e472:	f003 030c 	and.w	r3, r3, #12
 800e476:	2b04      	cmp	r3, #4
 800e478:	d00c      	beq.n	800e494 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e47a:	4ba0      	ldr	r3, [pc, #640]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e47c:	689b      	ldr	r3, [r3, #8]
 800e47e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e482:	2b08      	cmp	r3, #8
 800e484:	d112      	bne.n	800e4ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e486:	4b9d      	ldr	r3, [pc, #628]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e48e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e492:	d10b      	bne.n	800e4ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e494:	4b99      	ldr	r3, [pc, #612]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d05b      	beq.n	800e558 <HAL_RCC_OscConfig+0x108>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d157      	bne.n	800e558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	e23f      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4b4:	d106      	bne.n	800e4c4 <HAL_RCC_OscConfig+0x74>
 800e4b6:	4b91      	ldr	r3, [pc, #580]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a90      	ldr	r2, [pc, #576]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e4bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4c0:	6013      	str	r3, [r2, #0]
 800e4c2:	e01d      	b.n	800e500 <HAL_RCC_OscConfig+0xb0>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e4cc:	d10c      	bne.n	800e4e8 <HAL_RCC_OscConfig+0x98>
 800e4ce:	4b8b      	ldr	r3, [pc, #556]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4a8a      	ldr	r2, [pc, #552]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e4d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e4d8:	6013      	str	r3, [r2, #0]
 800e4da:	4b88      	ldr	r3, [pc, #544]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a87      	ldr	r2, [pc, #540]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e4e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4e4:	6013      	str	r3, [r2, #0]
 800e4e6:	e00b      	b.n	800e500 <HAL_RCC_OscConfig+0xb0>
 800e4e8:	4b84      	ldr	r3, [pc, #528]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a83      	ldr	r2, [pc, #524]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e4ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e4f2:	6013      	str	r3, [r2, #0]
 800e4f4:	4b81      	ldr	r3, [pc, #516]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a80      	ldr	r2, [pc, #512]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e4fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e4fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d013      	beq.n	800e530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e508:	f7fb fed6 	bl	800a2b8 <HAL_GetTick>
 800e50c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e50e:	e008      	b.n	800e522 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e510:	f7fb fed2 	bl	800a2b8 <HAL_GetTick>
 800e514:	4602      	mov	r2, r0
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	1ad3      	subs	r3, r2, r3
 800e51a:	2b64      	cmp	r3, #100	; 0x64
 800e51c:	d901      	bls.n	800e522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e51e:	2303      	movs	r3, #3
 800e520:	e204      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e522:	4b76      	ldr	r3, [pc, #472]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d0f0      	beq.n	800e510 <HAL_RCC_OscConfig+0xc0>
 800e52e:	e014      	b.n	800e55a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e530:	f7fb fec2 	bl	800a2b8 <HAL_GetTick>
 800e534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e536:	e008      	b.n	800e54a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e538:	f7fb febe 	bl	800a2b8 <HAL_GetTick>
 800e53c:	4602      	mov	r2, r0
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	1ad3      	subs	r3, r2, r3
 800e542:	2b64      	cmp	r3, #100	; 0x64
 800e544:	d901      	bls.n	800e54a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e546:	2303      	movs	r3, #3
 800e548:	e1f0      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e54a:	4b6c      	ldr	r3, [pc, #432]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1f0      	bne.n	800e538 <HAL_RCC_OscConfig+0xe8>
 800e556:	e000      	b.n	800e55a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f003 0302 	and.w	r3, r3, #2
 800e562:	2b00      	cmp	r3, #0
 800e564:	d063      	beq.n	800e62e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e566:	4b65      	ldr	r3, [pc, #404]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e568:	689b      	ldr	r3, [r3, #8]
 800e56a:	f003 030c 	and.w	r3, r3, #12
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00b      	beq.n	800e58a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e572:	4b62      	ldr	r3, [pc, #392]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e57a:	2b08      	cmp	r3, #8
 800e57c:	d11c      	bne.n	800e5b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e57e:	4b5f      	ldr	r3, [pc, #380]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e586:	2b00      	cmp	r3, #0
 800e588:	d116      	bne.n	800e5b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e58a:	4b5c      	ldr	r3, [pc, #368]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f003 0302 	and.w	r3, r3, #2
 800e592:	2b00      	cmp	r3, #0
 800e594:	d005      	beq.n	800e5a2 <HAL_RCC_OscConfig+0x152>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d001      	beq.n	800e5a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e1c4      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e5a2:	4b56      	ldr	r3, [pc, #344]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	691b      	ldr	r3, [r3, #16]
 800e5ae:	00db      	lsls	r3, r3, #3
 800e5b0:	4952      	ldr	r1, [pc, #328]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e5b6:	e03a      	b.n	800e62e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d020      	beq.n	800e602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e5c0:	4b4f      	ldr	r3, [pc, #316]	; (800e700 <HAL_RCC_OscConfig+0x2b0>)
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5c6:	f7fb fe77 	bl	800a2b8 <HAL_GetTick>
 800e5ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e5cc:	e008      	b.n	800e5e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e5ce:	f7fb fe73 	bl	800a2b8 <HAL_GetTick>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	2b02      	cmp	r3, #2
 800e5da:	d901      	bls.n	800e5e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e5dc:	2303      	movs	r3, #3
 800e5de:	e1a5      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e5e0:	4b46      	ldr	r3, [pc, #280]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f003 0302 	and.w	r3, r3, #2
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d0f0      	beq.n	800e5ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e5ec:	4b43      	ldr	r3, [pc, #268]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	00db      	lsls	r3, r3, #3
 800e5fa:	4940      	ldr	r1, [pc, #256]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	600b      	str	r3, [r1, #0]
 800e600:	e015      	b.n	800e62e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e602:	4b3f      	ldr	r3, [pc, #252]	; (800e700 <HAL_RCC_OscConfig+0x2b0>)
 800e604:	2200      	movs	r2, #0
 800e606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e608:	f7fb fe56 	bl	800a2b8 <HAL_GetTick>
 800e60c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e60e:	e008      	b.n	800e622 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e610:	f7fb fe52 	bl	800a2b8 <HAL_GetTick>
 800e614:	4602      	mov	r2, r0
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	d901      	bls.n	800e622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e61e:	2303      	movs	r3, #3
 800e620:	e184      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e622:	4b36      	ldr	r3, [pc, #216]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f003 0302 	and.w	r3, r3, #2
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d1f0      	bne.n	800e610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f003 0308 	and.w	r3, r3, #8
 800e636:	2b00      	cmp	r3, #0
 800e638:	d030      	beq.n	800e69c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	695b      	ldr	r3, [r3, #20]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d016      	beq.n	800e670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e642:	4b30      	ldr	r3, [pc, #192]	; (800e704 <HAL_RCC_OscConfig+0x2b4>)
 800e644:	2201      	movs	r2, #1
 800e646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e648:	f7fb fe36 	bl	800a2b8 <HAL_GetTick>
 800e64c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e64e:	e008      	b.n	800e662 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e650:	f7fb fe32 	bl	800a2b8 <HAL_GetTick>
 800e654:	4602      	mov	r2, r0
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	1ad3      	subs	r3, r2, r3
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	d901      	bls.n	800e662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e65e:	2303      	movs	r3, #3
 800e660:	e164      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e662:	4b26      	ldr	r3, [pc, #152]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e666:	f003 0302 	and.w	r3, r3, #2
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d0f0      	beq.n	800e650 <HAL_RCC_OscConfig+0x200>
 800e66e:	e015      	b.n	800e69c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e670:	4b24      	ldr	r3, [pc, #144]	; (800e704 <HAL_RCC_OscConfig+0x2b4>)
 800e672:	2200      	movs	r2, #0
 800e674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e676:	f7fb fe1f 	bl	800a2b8 <HAL_GetTick>
 800e67a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e67c:	e008      	b.n	800e690 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e67e:	f7fb fe1b 	bl	800a2b8 <HAL_GetTick>
 800e682:	4602      	mov	r2, r0
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	1ad3      	subs	r3, r2, r3
 800e688:	2b02      	cmp	r3, #2
 800e68a:	d901      	bls.n	800e690 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e68c:	2303      	movs	r3, #3
 800e68e:	e14d      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e690:	4b1a      	ldr	r3, [pc, #104]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e694:	f003 0302 	and.w	r3, r3, #2
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1f0      	bne.n	800e67e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f003 0304 	and.w	r3, r3, #4
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f000 80a0 	beq.w	800e7ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e6ae:	4b13      	ldr	r3, [pc, #76]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10f      	bne.n	800e6da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	60bb      	str	r3, [r7, #8]
 800e6be:	4b0f      	ldr	r3, [pc, #60]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c2:	4a0e      	ldr	r2, [pc, #56]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e6c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6c8:	6413      	str	r3, [r2, #64]	; 0x40
 800e6ca:	4b0c      	ldr	r3, [pc, #48]	; (800e6fc <HAL_RCC_OscConfig+0x2ac>)
 800e6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e6d2:	60bb      	str	r3, [r7, #8]
 800e6d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e6da:	4b0b      	ldr	r3, [pc, #44]	; (800e708 <HAL_RCC_OscConfig+0x2b8>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d121      	bne.n	800e72a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e6e6:	4b08      	ldr	r3, [pc, #32]	; (800e708 <HAL_RCC_OscConfig+0x2b8>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a07      	ldr	r2, [pc, #28]	; (800e708 <HAL_RCC_OscConfig+0x2b8>)
 800e6ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e6f2:	f7fb fde1 	bl	800a2b8 <HAL_GetTick>
 800e6f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e6f8:	e011      	b.n	800e71e <HAL_RCC_OscConfig+0x2ce>
 800e6fa:	bf00      	nop
 800e6fc:	40023800 	.word	0x40023800
 800e700:	42470000 	.word	0x42470000
 800e704:	42470e80 	.word	0x42470e80
 800e708:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e70c:	f7fb fdd4 	bl	800a2b8 <HAL_GetTick>
 800e710:	4602      	mov	r2, r0
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	1ad3      	subs	r3, r2, r3
 800e716:	2b02      	cmp	r3, #2
 800e718:	d901      	bls.n	800e71e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800e71a:	2303      	movs	r3, #3
 800e71c:	e106      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e71e:	4b85      	ldr	r3, [pc, #532]	; (800e934 <HAL_RCC_OscConfig+0x4e4>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e726:	2b00      	cmp	r3, #0
 800e728:	d0f0      	beq.n	800e70c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	689b      	ldr	r3, [r3, #8]
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d106      	bne.n	800e740 <HAL_RCC_OscConfig+0x2f0>
 800e732:	4b81      	ldr	r3, [pc, #516]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e736:	4a80      	ldr	r2, [pc, #512]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e738:	f043 0301 	orr.w	r3, r3, #1
 800e73c:	6713      	str	r3, [r2, #112]	; 0x70
 800e73e:	e01c      	b.n	800e77a <HAL_RCC_OscConfig+0x32a>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	689b      	ldr	r3, [r3, #8]
 800e744:	2b05      	cmp	r3, #5
 800e746:	d10c      	bne.n	800e762 <HAL_RCC_OscConfig+0x312>
 800e748:	4b7b      	ldr	r3, [pc, #492]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e74a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e74c:	4a7a      	ldr	r2, [pc, #488]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e74e:	f043 0304 	orr.w	r3, r3, #4
 800e752:	6713      	str	r3, [r2, #112]	; 0x70
 800e754:	4b78      	ldr	r3, [pc, #480]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e758:	4a77      	ldr	r2, [pc, #476]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e75a:	f043 0301 	orr.w	r3, r3, #1
 800e75e:	6713      	str	r3, [r2, #112]	; 0x70
 800e760:	e00b      	b.n	800e77a <HAL_RCC_OscConfig+0x32a>
 800e762:	4b75      	ldr	r3, [pc, #468]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e766:	4a74      	ldr	r2, [pc, #464]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e768:	f023 0301 	bic.w	r3, r3, #1
 800e76c:	6713      	str	r3, [r2, #112]	; 0x70
 800e76e:	4b72      	ldr	r3, [pc, #456]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e772:	4a71      	ldr	r2, [pc, #452]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e774:	f023 0304 	bic.w	r3, r3, #4
 800e778:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	689b      	ldr	r3, [r3, #8]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d015      	beq.n	800e7ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e782:	f7fb fd99 	bl	800a2b8 <HAL_GetTick>
 800e786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e788:	e00a      	b.n	800e7a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e78a:	f7fb fd95 	bl	800a2b8 <HAL_GetTick>
 800e78e:	4602      	mov	r2, r0
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	1ad3      	subs	r3, r2, r3
 800e794:	f241 3288 	movw	r2, #5000	; 0x1388
 800e798:	4293      	cmp	r3, r2
 800e79a:	d901      	bls.n	800e7a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800e79c:	2303      	movs	r3, #3
 800e79e:	e0c5      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e7a0:	4b65      	ldr	r3, [pc, #404]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e7a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7a4:	f003 0302 	and.w	r3, r3, #2
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d0ee      	beq.n	800e78a <HAL_RCC_OscConfig+0x33a>
 800e7ac:	e014      	b.n	800e7d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e7ae:	f7fb fd83 	bl	800a2b8 <HAL_GetTick>
 800e7b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e7b4:	e00a      	b.n	800e7cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e7b6:	f7fb fd7f 	bl	800a2b8 <HAL_GetTick>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	1ad3      	subs	r3, r2, r3
 800e7c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d901      	bls.n	800e7cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800e7c8:	2303      	movs	r3, #3
 800e7ca:	e0af      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e7cc:	4b5a      	ldr	r3, [pc, #360]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7d0:	f003 0302 	and.w	r3, r3, #2
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d1ee      	bne.n	800e7b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e7d8:	7dfb      	ldrb	r3, [r7, #23]
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d105      	bne.n	800e7ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e7de:	4b56      	ldr	r3, [pc, #344]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e2:	4a55      	ldr	r2, [pc, #340]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e7e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e7e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	699b      	ldr	r3, [r3, #24]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f000 809b 	beq.w	800e92a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e7f4:	4b50      	ldr	r3, [pc, #320]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e7f6:	689b      	ldr	r3, [r3, #8]
 800e7f8:	f003 030c 	and.w	r3, r3, #12
 800e7fc:	2b08      	cmp	r3, #8
 800e7fe:	d05c      	beq.n	800e8ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	699b      	ldr	r3, [r3, #24]
 800e804:	2b02      	cmp	r3, #2
 800e806:	d141      	bne.n	800e88c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e808:	4b4c      	ldr	r3, [pc, #304]	; (800e93c <HAL_RCC_OscConfig+0x4ec>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e80e:	f7fb fd53 	bl	800a2b8 <HAL_GetTick>
 800e812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e814:	e008      	b.n	800e828 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e816:	f7fb fd4f 	bl	800a2b8 <HAL_GetTick>
 800e81a:	4602      	mov	r2, r0
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	2b02      	cmp	r3, #2
 800e822:	d901      	bls.n	800e828 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800e824:	2303      	movs	r3, #3
 800e826:	e081      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e828:	4b43      	ldr	r3, [pc, #268]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e830:	2b00      	cmp	r3, #0
 800e832:	d1f0      	bne.n	800e816 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	69da      	ldr	r2, [r3, #28]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6a1b      	ldr	r3, [r3, #32]
 800e83c:	431a      	orrs	r2, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e842:	019b      	lsls	r3, r3, #6
 800e844:	431a      	orrs	r2, r3
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e84a:	085b      	lsrs	r3, r3, #1
 800e84c:	3b01      	subs	r3, #1
 800e84e:	041b      	lsls	r3, r3, #16
 800e850:	431a      	orrs	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e856:	061b      	lsls	r3, r3, #24
 800e858:	4937      	ldr	r1, [pc, #220]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e85a:	4313      	orrs	r3, r2
 800e85c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e85e:	4b37      	ldr	r3, [pc, #220]	; (800e93c <HAL_RCC_OscConfig+0x4ec>)
 800e860:	2201      	movs	r2, #1
 800e862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e864:	f7fb fd28 	bl	800a2b8 <HAL_GetTick>
 800e868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e86a:	e008      	b.n	800e87e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e86c:	f7fb fd24 	bl	800a2b8 <HAL_GetTick>
 800e870:	4602      	mov	r2, r0
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	2b02      	cmp	r3, #2
 800e878:	d901      	bls.n	800e87e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800e87a:	2303      	movs	r3, #3
 800e87c:	e056      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e87e:	4b2e      	ldr	r3, [pc, #184]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e886:	2b00      	cmp	r3, #0
 800e888:	d0f0      	beq.n	800e86c <HAL_RCC_OscConfig+0x41c>
 800e88a:	e04e      	b.n	800e92a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e88c:	4b2b      	ldr	r3, [pc, #172]	; (800e93c <HAL_RCC_OscConfig+0x4ec>)
 800e88e:	2200      	movs	r2, #0
 800e890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e892:	f7fb fd11 	bl	800a2b8 <HAL_GetTick>
 800e896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e898:	e008      	b.n	800e8ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e89a:	f7fb fd0d 	bl	800a2b8 <HAL_GetTick>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d901      	bls.n	800e8ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800e8a8:	2303      	movs	r3, #3
 800e8aa:	e03f      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e8ac:	4b22      	ldr	r3, [pc, #136]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1f0      	bne.n	800e89a <HAL_RCC_OscConfig+0x44a>
 800e8b8:	e037      	b.n	800e92a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	699b      	ldr	r3, [r3, #24]
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d101      	bne.n	800e8c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e032      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e8c6:	4b1c      	ldr	r3, [pc, #112]	; (800e938 <HAL_RCC_OscConfig+0x4e8>)
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	699b      	ldr	r3, [r3, #24]
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d028      	beq.n	800e926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d121      	bne.n	800e926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d11a      	bne.n	800e926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e8f0:	68fa      	ldr	r2, [r7, #12]
 800e8f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e8f6:	4013      	ands	r3, r2
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e8fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d111      	bne.n	800e926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e90c:	085b      	lsrs	r3, r3, #1
 800e90e:	3b01      	subs	r3, #1
 800e910:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e912:	429a      	cmp	r2, r3
 800e914:	d107      	bne.n	800e926 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e920:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e922:	429a      	cmp	r2, r3
 800e924:	d001      	beq.n	800e92a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800e926:	2301      	movs	r3, #1
 800e928:	e000      	b.n	800e92c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800e92a:	2300      	movs	r3, #0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	40007000 	.word	0x40007000
 800e938:	40023800 	.word	0x40023800
 800e93c:	42470060 	.word	0x42470060

0800e940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d101      	bne.n	800e954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e950:	2301      	movs	r3, #1
 800e952:	e0cc      	b.n	800eaee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e954:	4b68      	ldr	r3, [pc, #416]	; (800eaf8 <HAL_RCC_ClockConfig+0x1b8>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f003 0307 	and.w	r3, r3, #7
 800e95c:	683a      	ldr	r2, [r7, #0]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d90c      	bls.n	800e97c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e962:	4b65      	ldr	r3, [pc, #404]	; (800eaf8 <HAL_RCC_ClockConfig+0x1b8>)
 800e964:	683a      	ldr	r2, [r7, #0]
 800e966:	b2d2      	uxtb	r2, r2
 800e968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e96a:	4b63      	ldr	r3, [pc, #396]	; (800eaf8 <HAL_RCC_ClockConfig+0x1b8>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f003 0307 	and.w	r3, r3, #7
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	429a      	cmp	r2, r3
 800e976:	d001      	beq.n	800e97c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e978:	2301      	movs	r3, #1
 800e97a:	e0b8      	b.n	800eaee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f003 0302 	and.w	r3, r3, #2
 800e984:	2b00      	cmp	r3, #0
 800e986:	d020      	beq.n	800e9ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f003 0304 	and.w	r3, r3, #4
 800e990:	2b00      	cmp	r3, #0
 800e992:	d005      	beq.n	800e9a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e994:	4b59      	ldr	r3, [pc, #356]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	4a58      	ldr	r2, [pc, #352]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800e99a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e99e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f003 0308 	and.w	r3, r3, #8
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d005      	beq.n	800e9b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e9ac:	4b53      	ldr	r3, [pc, #332]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	4a52      	ldr	r2, [pc, #328]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800e9b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e9b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e9b8:	4b50      	ldr	r3, [pc, #320]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	689b      	ldr	r3, [r3, #8]
 800e9c4:	494d      	ldr	r1, [pc, #308]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f003 0301 	and.w	r3, r3, #1
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d044      	beq.n	800ea60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d107      	bne.n	800e9ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9de:	4b47      	ldr	r3, [pc, #284]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d119      	bne.n	800ea1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e07f      	b.n	800eaee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	2b02      	cmp	r3, #2
 800e9f4:	d003      	beq.n	800e9fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e9fa:	2b03      	cmp	r3, #3
 800e9fc:	d107      	bne.n	800ea0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e9fe:	4b3f      	ldr	r3, [pc, #252]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d109      	bne.n	800ea1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e06f      	b.n	800eaee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea0e:	4b3b      	ldr	r3, [pc, #236]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f003 0302 	and.w	r3, r3, #2
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d101      	bne.n	800ea1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e067      	b.n	800eaee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ea1e:	4b37      	ldr	r3, [pc, #220]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800ea20:	689b      	ldr	r3, [r3, #8]
 800ea22:	f023 0203 	bic.w	r2, r3, #3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	4934      	ldr	r1, [pc, #208]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ea30:	f7fb fc42 	bl	800a2b8 <HAL_GetTick>
 800ea34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea36:	e00a      	b.n	800ea4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ea38:	f7fb fc3e 	bl	800a2b8 <HAL_GetTick>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	1ad3      	subs	r3, r2, r3
 800ea42:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d901      	bls.n	800ea4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ea4a:	2303      	movs	r3, #3
 800ea4c:	e04f      	b.n	800eaee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea4e:	4b2b      	ldr	r3, [pc, #172]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800ea50:	689b      	ldr	r3, [r3, #8]
 800ea52:	f003 020c 	and.w	r2, r3, #12
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d1eb      	bne.n	800ea38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ea60:	4b25      	ldr	r3, [pc, #148]	; (800eaf8 <HAL_RCC_ClockConfig+0x1b8>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f003 0307 	and.w	r3, r3, #7
 800ea68:	683a      	ldr	r2, [r7, #0]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d20c      	bcs.n	800ea88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ea6e:	4b22      	ldr	r3, [pc, #136]	; (800eaf8 <HAL_RCC_ClockConfig+0x1b8>)
 800ea70:	683a      	ldr	r2, [r7, #0]
 800ea72:	b2d2      	uxtb	r2, r2
 800ea74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ea76:	4b20      	ldr	r3, [pc, #128]	; (800eaf8 <HAL_RCC_ClockConfig+0x1b8>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f003 0307 	and.w	r3, r3, #7
 800ea7e:	683a      	ldr	r2, [r7, #0]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d001      	beq.n	800ea88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ea84:	2301      	movs	r3, #1
 800ea86:	e032      	b.n	800eaee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f003 0304 	and.w	r3, r3, #4
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d008      	beq.n	800eaa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ea94:	4b19      	ldr	r3, [pc, #100]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	4916      	ldr	r1, [pc, #88]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f003 0308 	and.w	r3, r3, #8
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d009      	beq.n	800eac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800eab2:	4b12      	ldr	r3, [pc, #72]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800eab4:	689b      	ldr	r3, [r3, #8]
 800eab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	691b      	ldr	r3, [r3, #16]
 800eabe:	00db      	lsls	r3, r3, #3
 800eac0:	490e      	ldr	r1, [pc, #56]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800eac2:	4313      	orrs	r3, r2
 800eac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800eac6:	f000 f821 	bl	800eb0c <HAL_RCC_GetSysClockFreq>
 800eaca:	4602      	mov	r2, r0
 800eacc:	4b0b      	ldr	r3, [pc, #44]	; (800eafc <HAL_RCC_ClockConfig+0x1bc>)
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	091b      	lsrs	r3, r3, #4
 800ead2:	f003 030f 	and.w	r3, r3, #15
 800ead6:	490a      	ldr	r1, [pc, #40]	; (800eb00 <HAL_RCC_ClockConfig+0x1c0>)
 800ead8:	5ccb      	ldrb	r3, [r1, r3]
 800eada:	fa22 f303 	lsr.w	r3, r2, r3
 800eade:	4a09      	ldr	r2, [pc, #36]	; (800eb04 <HAL_RCC_ClockConfig+0x1c4>)
 800eae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800eae2:	4b09      	ldr	r3, [pc, #36]	; (800eb08 <HAL_RCC_ClockConfig+0x1c8>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7fb fba2 	bl	800a230 <HAL_InitTick>

  return HAL_OK;
 800eaec:	2300      	movs	r3, #0
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	40023c00 	.word	0x40023c00
 800eafc:	40023800 	.word	0x40023800
 800eb00:	080269b0 	.word	0x080269b0
 800eb04:	20000034 	.word	0x20000034
 800eb08:	20000038 	.word	0x20000038

0800eb0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eb0c:	b5b0      	push	{r4, r5, r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800eb12:	2100      	movs	r1, #0
 800eb14:	6079      	str	r1, [r7, #4]
 800eb16:	2100      	movs	r1, #0
 800eb18:	60f9      	str	r1, [r7, #12]
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800eb1e:	2100      	movs	r1, #0
 800eb20:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800eb22:	4952      	ldr	r1, [pc, #328]	; (800ec6c <HAL_RCC_GetSysClockFreq+0x160>)
 800eb24:	6889      	ldr	r1, [r1, #8]
 800eb26:	f001 010c 	and.w	r1, r1, #12
 800eb2a:	2908      	cmp	r1, #8
 800eb2c:	d00d      	beq.n	800eb4a <HAL_RCC_GetSysClockFreq+0x3e>
 800eb2e:	2908      	cmp	r1, #8
 800eb30:	f200 8094 	bhi.w	800ec5c <HAL_RCC_GetSysClockFreq+0x150>
 800eb34:	2900      	cmp	r1, #0
 800eb36:	d002      	beq.n	800eb3e <HAL_RCC_GetSysClockFreq+0x32>
 800eb38:	2904      	cmp	r1, #4
 800eb3a:	d003      	beq.n	800eb44 <HAL_RCC_GetSysClockFreq+0x38>
 800eb3c:	e08e      	b.n	800ec5c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800eb3e:	4b4c      	ldr	r3, [pc, #304]	; (800ec70 <HAL_RCC_GetSysClockFreq+0x164>)
 800eb40:	60bb      	str	r3, [r7, #8]
       break;
 800eb42:	e08e      	b.n	800ec62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800eb44:	4b4b      	ldr	r3, [pc, #300]	; (800ec74 <HAL_RCC_GetSysClockFreq+0x168>)
 800eb46:	60bb      	str	r3, [r7, #8]
      break;
 800eb48:	e08b      	b.n	800ec62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800eb4a:	4948      	ldr	r1, [pc, #288]	; (800ec6c <HAL_RCC_GetSysClockFreq+0x160>)
 800eb4c:	6849      	ldr	r1, [r1, #4]
 800eb4e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800eb52:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800eb54:	4945      	ldr	r1, [pc, #276]	; (800ec6c <HAL_RCC_GetSysClockFreq+0x160>)
 800eb56:	6849      	ldr	r1, [r1, #4]
 800eb58:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800eb5c:	2900      	cmp	r1, #0
 800eb5e:	d024      	beq.n	800ebaa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800eb60:	4942      	ldr	r1, [pc, #264]	; (800ec6c <HAL_RCC_GetSysClockFreq+0x160>)
 800eb62:	6849      	ldr	r1, [r1, #4]
 800eb64:	0989      	lsrs	r1, r1, #6
 800eb66:	4608      	mov	r0, r1
 800eb68:	f04f 0100 	mov.w	r1, #0
 800eb6c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800eb70:	f04f 0500 	mov.w	r5, #0
 800eb74:	ea00 0204 	and.w	r2, r0, r4
 800eb78:	ea01 0305 	and.w	r3, r1, r5
 800eb7c:	493d      	ldr	r1, [pc, #244]	; (800ec74 <HAL_RCC_GetSysClockFreq+0x168>)
 800eb7e:	fb01 f003 	mul.w	r0, r1, r3
 800eb82:	2100      	movs	r1, #0
 800eb84:	fb01 f102 	mul.w	r1, r1, r2
 800eb88:	1844      	adds	r4, r0, r1
 800eb8a:	493a      	ldr	r1, [pc, #232]	; (800ec74 <HAL_RCC_GetSysClockFreq+0x168>)
 800eb8c:	fba2 0101 	umull	r0, r1, r2, r1
 800eb90:	1863      	adds	r3, r4, r1
 800eb92:	4619      	mov	r1, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	461a      	mov	r2, r3
 800eb98:	f04f 0300 	mov.w	r3, #0
 800eb9c:	f7f2 f88c 	bl	8000cb8 <__aeabi_uldivmod>
 800eba0:	4602      	mov	r2, r0
 800eba2:	460b      	mov	r3, r1
 800eba4:	4613      	mov	r3, r2
 800eba6:	60fb      	str	r3, [r7, #12]
 800eba8:	e04a      	b.n	800ec40 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ebaa:	4b30      	ldr	r3, [pc, #192]	; (800ec6c <HAL_RCC_GetSysClockFreq+0x160>)
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	099b      	lsrs	r3, r3, #6
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	f04f 0300 	mov.w	r3, #0
 800ebb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ebba:	f04f 0100 	mov.w	r1, #0
 800ebbe:	ea02 0400 	and.w	r4, r2, r0
 800ebc2:	ea03 0501 	and.w	r5, r3, r1
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	4629      	mov	r1, r5
 800ebca:	f04f 0200 	mov.w	r2, #0
 800ebce:	f04f 0300 	mov.w	r3, #0
 800ebd2:	014b      	lsls	r3, r1, #5
 800ebd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ebd8:	0142      	lsls	r2, r0, #5
 800ebda:	4610      	mov	r0, r2
 800ebdc:	4619      	mov	r1, r3
 800ebde:	1b00      	subs	r0, r0, r4
 800ebe0:	eb61 0105 	sbc.w	r1, r1, r5
 800ebe4:	f04f 0200 	mov.w	r2, #0
 800ebe8:	f04f 0300 	mov.w	r3, #0
 800ebec:	018b      	lsls	r3, r1, #6
 800ebee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ebf2:	0182      	lsls	r2, r0, #6
 800ebf4:	1a12      	subs	r2, r2, r0
 800ebf6:	eb63 0301 	sbc.w	r3, r3, r1
 800ebfa:	f04f 0000 	mov.w	r0, #0
 800ebfe:	f04f 0100 	mov.w	r1, #0
 800ec02:	00d9      	lsls	r1, r3, #3
 800ec04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ec08:	00d0      	lsls	r0, r2, #3
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	1912      	adds	r2, r2, r4
 800ec10:	eb45 0303 	adc.w	r3, r5, r3
 800ec14:	f04f 0000 	mov.w	r0, #0
 800ec18:	f04f 0100 	mov.w	r1, #0
 800ec1c:	0299      	lsls	r1, r3, #10
 800ec1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ec22:	0290      	lsls	r0, r2, #10
 800ec24:	4602      	mov	r2, r0
 800ec26:	460b      	mov	r3, r1
 800ec28:	4610      	mov	r0, r2
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	461a      	mov	r2, r3
 800ec30:	f04f 0300 	mov.w	r3, #0
 800ec34:	f7f2 f840 	bl	8000cb8 <__aeabi_uldivmod>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	4613      	mov	r3, r2
 800ec3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ec40:	4b0a      	ldr	r3, [pc, #40]	; (800ec6c <HAL_RCC_GetSysClockFreq+0x160>)
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	0c1b      	lsrs	r3, r3, #16
 800ec46:	f003 0303 	and.w	r3, r3, #3
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	005b      	lsls	r3, r3, #1
 800ec4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec58:	60bb      	str	r3, [r7, #8]
      break;
 800ec5a:	e002      	b.n	800ec62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ec5c:	4b04      	ldr	r3, [pc, #16]	; (800ec70 <HAL_RCC_GetSysClockFreq+0x164>)
 800ec5e:	60bb      	str	r3, [r7, #8]
      break;
 800ec60:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ec62:	68bb      	ldr	r3, [r7, #8]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bdb0      	pop	{r4, r5, r7, pc}
 800ec6c:	40023800 	.word	0x40023800
 800ec70:	00f42400 	.word	0x00f42400
 800ec74:	017d7840 	.word	0x017d7840

0800ec78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ec7c:	4b03      	ldr	r3, [pc, #12]	; (800ec8c <HAL_RCC_GetHCLKFreq+0x14>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr
 800ec8a:	bf00      	nop
 800ec8c:	20000034 	.word	0x20000034

0800ec90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ec94:	f7ff fff0 	bl	800ec78 <HAL_RCC_GetHCLKFreq>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ec9c:	689b      	ldr	r3, [r3, #8]
 800ec9e:	0a9b      	lsrs	r3, r3, #10
 800eca0:	f003 0307 	and.w	r3, r3, #7
 800eca4:	4903      	ldr	r1, [pc, #12]	; (800ecb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800eca6:	5ccb      	ldrb	r3, [r1, r3]
 800eca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	40023800 	.word	0x40023800
 800ecb4:	080269c0 	.word	0x080269c0

0800ecb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ecbc:	f7ff ffdc 	bl	800ec78 <HAL_RCC_GetHCLKFreq>
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	4b05      	ldr	r3, [pc, #20]	; (800ecd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ecc4:	689b      	ldr	r3, [r3, #8]
 800ecc6:	0b5b      	lsrs	r3, r3, #13
 800ecc8:	f003 0307 	and.w	r3, r3, #7
 800eccc:	4903      	ldr	r1, [pc, #12]	; (800ecdc <HAL_RCC_GetPCLK2Freq+0x24>)
 800ecce:	5ccb      	ldrb	r3, [r1, r3]
 800ecd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	40023800 	.word	0x40023800
 800ecdc:	080269c0 	.word	0x080269c0

0800ece0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d101      	bne.n	800ecf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e07b      	b.n	800edea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d108      	bne.n	800ed0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed02:	d009      	beq.n	800ed18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	61da      	str	r2, [r3, #28]
 800ed0a:	e005      	b.n	800ed18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2200      	movs	r2, #0
 800ed16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d106      	bne.n	800ed38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f7fa fb04 	bl	8009340 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2202      	movs	r2, #2
 800ed3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ed60:	431a      	orrs	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed6a:	431a      	orrs	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	691b      	ldr	r3, [r3, #16]
 800ed70:	f003 0302 	and.w	r3, r3, #2
 800ed74:	431a      	orrs	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	695b      	ldr	r3, [r3, #20]
 800ed7a:	f003 0301 	and.w	r3, r3, #1
 800ed7e:	431a      	orrs	r2, r3
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	699b      	ldr	r3, [r3, #24]
 800ed84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ed88:	431a      	orrs	r2, r3
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	69db      	ldr	r3, [r3, #28]
 800ed8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed92:	431a      	orrs	r2, r3
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6a1b      	ldr	r3, [r3, #32]
 800ed98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed9c:	ea42 0103 	orr.w	r1, r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	430a      	orrs	r2, r1
 800edae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	699b      	ldr	r3, [r3, #24]
 800edb4:	0c1b      	lsrs	r3, r3, #16
 800edb6:	f003 0104 	and.w	r1, r3, #4
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edbe:	f003 0210 	and.w	r2, r3, #16
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	430a      	orrs	r2, r1
 800edc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	69da      	ldr	r2, [r3, #28]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800edd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ede8:	2300      	movs	r3, #0
}
 800edea:	4618      	mov	r0, r3
 800edec:	3708      	adds	r7, #8
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b08c      	sub	sp, #48	; 0x30
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	60f8      	str	r0, [r7, #12]
 800edfa:	60b9      	str	r1, [r7, #8]
 800edfc:	607a      	str	r2, [r7, #4]
 800edfe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ee00:	2301      	movs	r3, #1
 800ee02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ee04:	2300      	movs	r3, #0
 800ee06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d101      	bne.n	800ee18 <HAL_SPI_TransmitReceive+0x26>
 800ee14:	2302      	movs	r3, #2
 800ee16:	e18a      	b.n	800f12e <HAL_SPI_TransmitReceive+0x33c>
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee20:	f7fb fa4a 	bl	800a2b8 <HAL_GetTick>
 800ee24:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ee36:	887b      	ldrh	r3, [r7, #2]
 800ee38:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ee3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d00f      	beq.n	800ee62 <HAL_SPI_TransmitReceive+0x70>
 800ee42:	69fb      	ldr	r3, [r7, #28]
 800ee44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee48:	d107      	bne.n	800ee5a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d103      	bne.n	800ee5a <HAL_SPI_TransmitReceive+0x68>
 800ee52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee56:	2b04      	cmp	r3, #4
 800ee58:	d003      	beq.n	800ee62 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ee5a:	2302      	movs	r3, #2
 800ee5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ee60:	e15b      	b.n	800f11a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d005      	beq.n	800ee74 <HAL_SPI_TransmitReceive+0x82>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d002      	beq.n	800ee74 <HAL_SPI_TransmitReceive+0x82>
 800ee6e:	887b      	ldrh	r3, [r7, #2]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d103      	bne.n	800ee7c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ee74:	2301      	movs	r3, #1
 800ee76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ee7a:	e14e      	b.n	800f11a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	2b04      	cmp	r3, #4
 800ee86:	d003      	beq.n	800ee90 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2205      	movs	r2, #5
 800ee8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2200      	movs	r2, #0
 800ee94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	887a      	ldrh	r2, [r7, #2]
 800eea0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	887a      	ldrh	r2, [r7, #2]
 800eea6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	68ba      	ldr	r2, [r7, #8]
 800eeac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	887a      	ldrh	r2, [r7, #2]
 800eeb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	887a      	ldrh	r2, [r7, #2]
 800eeb8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2200      	movs	r2, #0
 800eebe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2200      	movs	r2, #0
 800eec4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eed0:	2b40      	cmp	r3, #64	; 0x40
 800eed2:	d007      	beq.n	800eee4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eee2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eeec:	d178      	bne.n	800efe0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d002      	beq.n	800eefc <HAL_SPI_TransmitReceive+0x10a>
 800eef6:	8b7b      	ldrh	r3, [r7, #26]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d166      	bne.n	800efca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef00:	881a      	ldrh	r2, [r3, #0]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef0c:	1c9a      	adds	r2, r3, #2
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	3b01      	subs	r3, #1
 800ef1a:	b29a      	uxth	r2, r3
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ef20:	e053      	b.n	800efca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	f003 0302 	and.w	r3, r3, #2
 800ef2c:	2b02      	cmp	r3, #2
 800ef2e:	d11b      	bne.n	800ef68 <HAL_SPI_TransmitReceive+0x176>
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d016      	beq.n	800ef68 <HAL_SPI_TransmitReceive+0x176>
 800ef3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d113      	bne.n	800ef68 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef44:	881a      	ldrh	r2, [r3, #0]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef50:	1c9a      	adds	r2, r3, #2
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	3b01      	subs	r3, #1
 800ef5e:	b29a      	uxth	r2, r3
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ef64:	2300      	movs	r3, #0
 800ef66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	f003 0301 	and.w	r3, r3, #1
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d119      	bne.n	800efaa <HAL_SPI_TransmitReceive+0x1b8>
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d014      	beq.n	800efaa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	68da      	ldr	r2, [r3, #12]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef8a:	b292      	uxth	r2, r2
 800ef8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef92:	1c9a      	adds	r2, r3, #2
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	b29a      	uxth	r2, r3
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800efa6:	2301      	movs	r3, #1
 800efa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800efaa:	f7fb f985 	bl	800a2b8 <HAL_GetTick>
 800efae:	4602      	mov	r2, r0
 800efb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d807      	bhi.n	800efca <HAL_SPI_TransmitReceive+0x1d8>
 800efba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efc0:	d003      	beq.n	800efca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800efc2:	2303      	movs	r3, #3
 800efc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800efc8:	e0a7      	b.n	800f11a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800efce:	b29b      	uxth	r3, r3
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d1a6      	bne.n	800ef22 <HAL_SPI_TransmitReceive+0x130>
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efd8:	b29b      	uxth	r3, r3
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d1a1      	bne.n	800ef22 <HAL_SPI_TransmitReceive+0x130>
 800efde:	e07c      	b.n	800f0da <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d002      	beq.n	800efee <HAL_SPI_TransmitReceive+0x1fc>
 800efe8:	8b7b      	ldrh	r3, [r7, #26]
 800efea:	2b01      	cmp	r3, #1
 800efec:	d16b      	bne.n	800f0c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	330c      	adds	r3, #12
 800eff8:	7812      	ldrb	r2, [r2, #0]
 800effa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f000:	1c5a      	adds	r2, r3, #1
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	3b01      	subs	r3, #1
 800f00e:	b29a      	uxth	r2, r3
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f014:	e057      	b.n	800f0c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	f003 0302 	and.w	r3, r3, #2
 800f020:	2b02      	cmp	r3, #2
 800f022:	d11c      	bne.n	800f05e <HAL_SPI_TransmitReceive+0x26c>
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f028:	b29b      	uxth	r3, r3
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d017      	beq.n	800f05e <HAL_SPI_TransmitReceive+0x26c>
 800f02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f030:	2b01      	cmp	r3, #1
 800f032:	d114      	bne.n	800f05e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	330c      	adds	r3, #12
 800f03e:	7812      	ldrb	r2, [r2, #0]
 800f040:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f046:	1c5a      	adds	r2, r3, #1
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f050:	b29b      	uxth	r3, r3
 800f052:	3b01      	subs	r3, #1
 800f054:	b29a      	uxth	r2, r3
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f05a:	2300      	movs	r3, #0
 800f05c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	f003 0301 	and.w	r3, r3, #1
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d119      	bne.n	800f0a0 <HAL_SPI_TransmitReceive+0x2ae>
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f070:	b29b      	uxth	r3, r3
 800f072:	2b00      	cmp	r3, #0
 800f074:	d014      	beq.n	800f0a0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68da      	ldr	r2, [r3, #12]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f080:	b2d2      	uxtb	r2, r2
 800f082:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f088:	1c5a      	adds	r2, r3, #1
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f092:	b29b      	uxth	r3, r3
 800f094:	3b01      	subs	r3, #1
 800f096:	b29a      	uxth	r2, r3
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f09c:	2301      	movs	r3, #1
 800f09e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f0a0:	f7fb f90a 	bl	800a2b8 <HAL_GetTick>
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d803      	bhi.n	800f0b8 <HAL_SPI_TransmitReceive+0x2c6>
 800f0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b6:	d102      	bne.n	800f0be <HAL_SPI_TransmitReceive+0x2cc>
 800f0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d103      	bne.n	800f0c6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f0be:	2303      	movs	r3, #3
 800f0c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f0c4:	e029      	b.n	800f11a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d1a2      	bne.n	800f016 <HAL_SPI_TransmitReceive+0x224>
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d19d      	bne.n	800f016 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f0da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f0de:	68f8      	ldr	r0, [r7, #12]
 800f0e0:	f000 f9d0 	bl	800f484 <SPI_EndRxTxTransaction>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d006      	beq.n	800f0f8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2220      	movs	r2, #32
 800f0f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f0f6:	e010      	b.n	800f11a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d10b      	bne.n	800f118 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f100:	2300      	movs	r3, #0
 800f102:	617b      	str	r3, [r7, #20]
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	617b      	str	r3, [r7, #20]
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	617b      	str	r3, [r7, #20]
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	e000      	b.n	800f11a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f118:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2201      	movs	r2, #1
 800f11e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2200      	movs	r2, #0
 800f126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f12a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3730      	adds	r7, #48	; 0x30
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
	...

0800f138 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b088      	sub	sp, #32
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	689b      	ldr	r3, [r3, #8]
 800f14e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f150:	69bb      	ldr	r3, [r7, #24]
 800f152:	099b      	lsrs	r3, r3, #6
 800f154:	f003 0301 	and.w	r3, r3, #1
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d10f      	bne.n	800f17c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00a      	beq.n	800f17c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	099b      	lsrs	r3, r3, #6
 800f16a:	f003 0301 	and.w	r3, r3, #1
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d004      	beq.n	800f17c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	4798      	blx	r3
    return;
 800f17a:	e0d7      	b.n	800f32c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f17c:	69bb      	ldr	r3, [r7, #24]
 800f17e:	085b      	lsrs	r3, r3, #1
 800f180:	f003 0301 	and.w	r3, r3, #1
 800f184:	2b00      	cmp	r3, #0
 800f186:	d00a      	beq.n	800f19e <HAL_SPI_IRQHandler+0x66>
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	09db      	lsrs	r3, r3, #7
 800f18c:	f003 0301 	and.w	r3, r3, #1
 800f190:	2b00      	cmp	r3, #0
 800f192:	d004      	beq.n	800f19e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	4798      	blx	r3
    return;
 800f19c:	e0c6      	b.n	800f32c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f19e:	69bb      	ldr	r3, [r7, #24]
 800f1a0:	095b      	lsrs	r3, r3, #5
 800f1a2:	f003 0301 	and.w	r3, r3, #1
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d10c      	bne.n	800f1c4 <HAL_SPI_IRQHandler+0x8c>
 800f1aa:	69bb      	ldr	r3, [r7, #24]
 800f1ac:	099b      	lsrs	r3, r3, #6
 800f1ae:	f003 0301 	and.w	r3, r3, #1
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d106      	bne.n	800f1c4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f1b6:	69bb      	ldr	r3, [r7, #24]
 800f1b8:	0a1b      	lsrs	r3, r3, #8
 800f1ba:	f003 0301 	and.w	r3, r3, #1
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	f000 80b4 	beq.w	800f32c <HAL_SPI_IRQHandler+0x1f4>
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	095b      	lsrs	r3, r3, #5
 800f1c8:	f003 0301 	and.w	r3, r3, #1
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	f000 80ad 	beq.w	800f32c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	099b      	lsrs	r3, r3, #6
 800f1d6:	f003 0301 	and.w	r3, r3, #1
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d023      	beq.n	800f226 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	2b03      	cmp	r3, #3
 800f1e8:	d011      	beq.n	800f20e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1ee:	f043 0204 	orr.w	r2, r3, #4
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	617b      	str	r3, [r7, #20]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	617b      	str	r3, [r7, #20]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	689b      	ldr	r3, [r3, #8]
 800f208:	617b      	str	r3, [r7, #20]
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	e00b      	b.n	800f226 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f20e:	2300      	movs	r3, #0
 800f210:	613b      	str	r3, [r7, #16]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	613b      	str	r3, [r7, #16]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	613b      	str	r3, [r7, #16]
 800f222:	693b      	ldr	r3, [r7, #16]
        return;
 800f224:	e082      	b.n	800f32c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f226:	69bb      	ldr	r3, [r7, #24]
 800f228:	095b      	lsrs	r3, r3, #5
 800f22a:	f003 0301 	and.w	r3, r3, #1
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d014      	beq.n	800f25c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f236:	f043 0201 	orr.w	r2, r3, #1
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f23e:	2300      	movs	r3, #0
 800f240:	60fb      	str	r3, [r7, #12]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	689b      	ldr	r3, [r3, #8]
 800f248:	60fb      	str	r3, [r7, #12]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f258:	601a      	str	r2, [r3, #0]
 800f25a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f25c:	69bb      	ldr	r3, [r7, #24]
 800f25e:	0a1b      	lsrs	r3, r3, #8
 800f260:	f003 0301 	and.w	r3, r3, #1
 800f264:	2b00      	cmp	r3, #0
 800f266:	d00c      	beq.n	800f282 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f26c:	f043 0208 	orr.w	r2, r3, #8
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f274:	2300      	movs	r3, #0
 800f276:	60bb      	str	r3, [r7, #8]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	60bb      	str	r3, [r7, #8]
 800f280:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f286:	2b00      	cmp	r3, #0
 800f288:	d04f      	beq.n	800f32a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	685a      	ldr	r2, [r3, #4]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f298:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2201      	movs	r2, #1
 800f29e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	f003 0302 	and.w	r3, r3, #2
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d104      	bne.n	800f2b6 <HAL_SPI_IRQHandler+0x17e>
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	f003 0301 	and.w	r3, r3, #1
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d034      	beq.n	800f320 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	685a      	ldr	r2, [r3, #4]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f022 0203 	bic.w	r2, r2, #3
 800f2c4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d011      	beq.n	800f2f2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2d2:	4a18      	ldr	r2, [pc, #96]	; (800f334 <HAL_SPI_IRQHandler+0x1fc>)
 800f2d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7fb fb32 	bl	800a944 <HAL_DMA_Abort_IT>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d005      	beq.n	800f2f2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d016      	beq.n	800f328 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2fe:	4a0d      	ldr	r2, [pc, #52]	; (800f334 <HAL_SPI_IRQHandler+0x1fc>)
 800f300:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f306:	4618      	mov	r0, r3
 800f308:	f7fb fb1c 	bl	800a944 <HAL_DMA_Abort_IT>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00a      	beq.n	800f328 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f316:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f31e:	e003      	b.n	800f328 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 f809 	bl	800f338 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f326:	e000      	b.n	800f32a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f328:	bf00      	nop
    return;
 800f32a:	bf00      	nop
  }
}
 800f32c:	3720      	adds	r7, #32
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	0800f34d 	.word	0x0800f34d

0800f338 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f340:	bf00      	nop
 800f342:	370c      	adds	r7, #12
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f358:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2200      	movs	r2, #0
 800f35e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2200      	movs	r2, #0
 800f364:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f366:	68f8      	ldr	r0, [r7, #12]
 800f368:	f7ff ffe6 	bl	800f338 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f36c:	bf00      	nop
 800f36e:	3710      	adds	r7, #16
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b088      	sub	sp, #32
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	603b      	str	r3, [r7, #0]
 800f380:	4613      	mov	r3, r2
 800f382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f384:	f7fa ff98 	bl	800a2b8 <HAL_GetTick>
 800f388:	4602      	mov	r2, r0
 800f38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38c:	1a9b      	subs	r3, r3, r2
 800f38e:	683a      	ldr	r2, [r7, #0]
 800f390:	4413      	add	r3, r2
 800f392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f394:	f7fa ff90 	bl	800a2b8 <HAL_GetTick>
 800f398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f39a:	4b39      	ldr	r3, [pc, #228]	; (800f480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	015b      	lsls	r3, r3, #5
 800f3a0:	0d1b      	lsrs	r3, r3, #20
 800f3a2:	69fa      	ldr	r2, [r7, #28]
 800f3a4:	fb02 f303 	mul.w	r3, r2, r3
 800f3a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f3aa:	e054      	b.n	800f456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3b2:	d050      	beq.n	800f456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f3b4:	f7fa ff80 	bl	800a2b8 <HAL_GetTick>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	69bb      	ldr	r3, [r7, #24]
 800f3bc:	1ad3      	subs	r3, r2, r3
 800f3be:	69fa      	ldr	r2, [r7, #28]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d902      	bls.n	800f3ca <SPI_WaitFlagStateUntilTimeout+0x56>
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d13d      	bne.n	800f446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	685a      	ldr	r2, [r3, #4]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f3d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f3e2:	d111      	bne.n	800f408 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	689b      	ldr	r3, [r3, #8]
 800f3e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3ec:	d004      	beq.n	800f3f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3f6:	d107      	bne.n	800f408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f40c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f410:	d10f      	bne.n	800f432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f420:	601a      	str	r2, [r3, #0]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2201      	movs	r2, #1
 800f436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2200      	movs	r2, #0
 800f43e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f442:	2303      	movs	r3, #3
 800f444:	e017      	b.n	800f476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d101      	bne.n	800f450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f44c:	2300      	movs	r3, #0
 800f44e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	3b01      	subs	r3, #1
 800f454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	689a      	ldr	r2, [r3, #8]
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	4013      	ands	r3, r2
 800f460:	68ba      	ldr	r2, [r7, #8]
 800f462:	429a      	cmp	r2, r3
 800f464:	bf0c      	ite	eq
 800f466:	2301      	moveq	r3, #1
 800f468:	2300      	movne	r3, #0
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	461a      	mov	r2, r3
 800f46e:	79fb      	ldrb	r3, [r7, #7]
 800f470:	429a      	cmp	r2, r3
 800f472:	d19b      	bne.n	800f3ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f474:	2300      	movs	r3, #0
}
 800f476:	4618      	mov	r0, r3
 800f478:	3720      	adds	r7, #32
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	20000034 	.word	0x20000034

0800f484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b088      	sub	sp, #32
 800f488:	af02      	add	r7, sp, #8
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f490:	4b1b      	ldr	r3, [pc, #108]	; (800f500 <SPI_EndRxTxTransaction+0x7c>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4a1b      	ldr	r2, [pc, #108]	; (800f504 <SPI_EndRxTxTransaction+0x80>)
 800f496:	fba2 2303 	umull	r2, r3, r2, r3
 800f49a:	0d5b      	lsrs	r3, r3, #21
 800f49c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f4a0:	fb02 f303 	mul.w	r3, r2, r3
 800f4a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f4ae:	d112      	bne.n	800f4d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	9300      	str	r3, [sp, #0]
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2180      	movs	r1, #128	; 0x80
 800f4ba:	68f8      	ldr	r0, [r7, #12]
 800f4bc:	f7ff ff5a 	bl	800f374 <SPI_WaitFlagStateUntilTimeout>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d016      	beq.n	800f4f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4ca:	f043 0220 	orr.w	r2, r3, #32
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f4d2:	2303      	movs	r3, #3
 800f4d4:	e00f      	b.n	800f4f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d00a      	beq.n	800f4f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	3b01      	subs	r3, #1
 800f4e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	689b      	ldr	r3, [r3, #8]
 800f4e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4ec:	2b80      	cmp	r3, #128	; 0x80
 800f4ee:	d0f2      	beq.n	800f4d6 <SPI_EndRxTxTransaction+0x52>
 800f4f0:	e000      	b.n	800f4f4 <SPI_EndRxTxTransaction+0x70>
        break;
 800f4f2:	bf00      	nop
  }

  return HAL_OK;
 800f4f4:	2300      	movs	r3, #0
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3718      	adds	r7, #24
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	20000034 	.word	0x20000034
 800f504:	165e9f81 	.word	0x165e9f81

0800f508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d101      	bne.n	800f51a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f516:	2301      	movs	r3, #1
 800f518:	e041      	b.n	800f59e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f520:	b2db      	uxtb	r3, r3
 800f522:	2b00      	cmp	r3, #0
 800f524:	d106      	bne.n	800f534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2200      	movs	r2, #0
 800f52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7fa fa84 	bl	8009a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2202      	movs	r2, #2
 800f538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	3304      	adds	r3, #4
 800f544:	4619      	mov	r1, r3
 800f546:	4610      	mov	r0, r2
 800f548:	f000 fa96 	bl	800fa78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2201      	movs	r2, #1
 800f550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2201      	movs	r2, #1
 800f558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2201      	movs	r2, #1
 800f560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2201      	movs	r2, #1
 800f568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2201      	movs	r2, #1
 800f570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2201      	movs	r2, #1
 800f578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2201      	movs	r2, #1
 800f588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2201      	movs	r2, #1
 800f590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2201      	movs	r2, #1
 800f598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f59c:	2300      	movs	r3, #0
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3708      	adds	r7, #8
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
	...

0800f5a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b085      	sub	sp, #20
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	d001      	beq.n	800f5c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f5bc:	2301      	movs	r3, #1
 800f5be:	e044      	b.n	800f64a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	68da      	ldr	r2, [r3, #12]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f042 0201 	orr.w	r2, r2, #1
 800f5d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	4a1e      	ldr	r2, [pc, #120]	; (800f658 <HAL_TIM_Base_Start_IT+0xb0>)
 800f5de:	4293      	cmp	r3, r2
 800f5e0:	d018      	beq.n	800f614 <HAL_TIM_Base_Start_IT+0x6c>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5ea:	d013      	beq.n	800f614 <HAL_TIM_Base_Start_IT+0x6c>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	4a1a      	ldr	r2, [pc, #104]	; (800f65c <HAL_TIM_Base_Start_IT+0xb4>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d00e      	beq.n	800f614 <HAL_TIM_Base_Start_IT+0x6c>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	4a19      	ldr	r2, [pc, #100]	; (800f660 <HAL_TIM_Base_Start_IT+0xb8>)
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d009      	beq.n	800f614 <HAL_TIM_Base_Start_IT+0x6c>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	4a17      	ldr	r2, [pc, #92]	; (800f664 <HAL_TIM_Base_Start_IT+0xbc>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d004      	beq.n	800f614 <HAL_TIM_Base_Start_IT+0x6c>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	4a16      	ldr	r2, [pc, #88]	; (800f668 <HAL_TIM_Base_Start_IT+0xc0>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d111      	bne.n	800f638 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	f003 0307 	and.w	r3, r3, #7
 800f61e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2b06      	cmp	r3, #6
 800f624:	d010      	beq.n	800f648 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f042 0201 	orr.w	r2, r2, #1
 800f634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f636:	e007      	b.n	800f648 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f042 0201 	orr.w	r2, r2, #1
 800f646:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f648:	2300      	movs	r3, #0
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3714      	adds	r7, #20
 800f64e:	46bd      	mov	sp, r7
 800f650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f654:	4770      	bx	lr
 800f656:	bf00      	nop
 800f658:	40010000 	.word	0x40010000
 800f65c:	40000400 	.word	0x40000400
 800f660:	40000800 	.word	0x40000800
 800f664:	40000c00 	.word	0x40000c00
 800f668:	40014000 	.word	0x40014000

0800f66c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	68da      	ldr	r2, [r3, #12]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f022 0201 	bic.w	r2, r2, #1
 800f682:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	6a1a      	ldr	r2, [r3, #32]
 800f68a:	f241 1311 	movw	r3, #4369	; 0x1111
 800f68e:	4013      	ands	r3, r2
 800f690:	2b00      	cmp	r3, #0
 800f692:	d10f      	bne.n	800f6b4 <HAL_TIM_Base_Stop_IT+0x48>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	6a1a      	ldr	r2, [r3, #32]
 800f69a:	f240 4344 	movw	r3, #1092	; 0x444
 800f69e:	4013      	ands	r3, r2
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d107      	bne.n	800f6b4 <HAL_TIM_Base_Stop_IT+0x48>
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	681a      	ldr	r2, [r3, #0]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f022 0201 	bic.w	r2, r2, #1
 800f6b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f6bc:	2300      	movs	r3, #0
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	370c      	adds	r7, #12
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b086      	sub	sp, #24
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
 800f6d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d101      	bne.n	800f6de <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f6da:	2301      	movs	r3, #1
 800f6dc:	e097      	b.n	800f80e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d106      	bne.n	800f6f8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f7fa f95c 	bl	80099b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2202      	movs	r2, #2
 800f6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	689b      	ldr	r3, [r3, #8]
 800f706:	687a      	ldr	r2, [r7, #4]
 800f708:	6812      	ldr	r2, [r2, #0]
 800f70a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f70e:	f023 0307 	bic.w	r3, r3, #7
 800f712:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681a      	ldr	r2, [r3, #0]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	3304      	adds	r3, #4
 800f71c:	4619      	mov	r1, r3
 800f71e:	4610      	mov	r0, r2
 800f720:	f000 f9aa 	bl	800fa78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	699b      	ldr	r3, [r3, #24]
 800f732:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	6a1b      	ldr	r3, [r3, #32]
 800f73a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	697a      	ldr	r2, [r7, #20]
 800f742:	4313      	orrs	r3, r2
 800f744:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f74c:	f023 0303 	bic.w	r3, r3, #3
 800f750:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	689a      	ldr	r2, [r3, #8]
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	699b      	ldr	r3, [r3, #24]
 800f75a:	021b      	lsls	r3, r3, #8
 800f75c:	4313      	orrs	r3, r2
 800f75e:	693a      	ldr	r2, [r7, #16]
 800f760:	4313      	orrs	r3, r2
 800f762:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f76a:	f023 030c 	bic.w	r3, r3, #12
 800f76e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f77a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	68da      	ldr	r2, [r3, #12]
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	69db      	ldr	r3, [r3, #28]
 800f784:	021b      	lsls	r3, r3, #8
 800f786:	4313      	orrs	r3, r2
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	4313      	orrs	r3, r2
 800f78c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	691b      	ldr	r3, [r3, #16]
 800f792:	011a      	lsls	r2, r3, #4
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	6a1b      	ldr	r3, [r3, #32]
 800f798:	031b      	lsls	r3, r3, #12
 800f79a:	4313      	orrs	r3, r2
 800f79c:	693a      	ldr	r2, [r7, #16]
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f7a8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f7b0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	685a      	ldr	r2, [r3, #4]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	695b      	ldr	r3, [r3, #20]
 800f7ba:	011b      	lsls	r3, r3, #4
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	697a      	ldr	r2, [r7, #20]
 800f7ca:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	693a      	ldr	r2, [r7, #16]
 800f7d2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	68fa      	ldr	r2, [r7, #12]
 800f7da:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2201      	movs	r2, #1
 800f800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2201      	movs	r2, #1
 800f808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f80c:	2300      	movs	r3, #0
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3718      	adds	r7, #24
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}

0800f816 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f816:	b580      	push	{r7, lr}
 800f818:	b082      	sub	sp, #8
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	691b      	ldr	r3, [r3, #16]
 800f824:	f003 0302 	and.w	r3, r3, #2
 800f828:	2b02      	cmp	r3, #2
 800f82a:	d122      	bne.n	800f872 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	f003 0302 	and.w	r3, r3, #2
 800f836:	2b02      	cmp	r3, #2
 800f838:	d11b      	bne.n	800f872 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f06f 0202 	mvn.w	r2, #2
 800f842:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2201      	movs	r2, #1
 800f848:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	699b      	ldr	r3, [r3, #24]
 800f850:	f003 0303 	and.w	r3, r3, #3
 800f854:	2b00      	cmp	r3, #0
 800f856:	d003      	beq.n	800f860 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 f8ee 	bl	800fa3a <HAL_TIM_IC_CaptureCallback>
 800f85e:	e005      	b.n	800f86c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f000 f8e0 	bl	800fa26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 f8f1 	bl	800fa4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2200      	movs	r2, #0
 800f870:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	691b      	ldr	r3, [r3, #16]
 800f878:	f003 0304 	and.w	r3, r3, #4
 800f87c:	2b04      	cmp	r3, #4
 800f87e:	d122      	bne.n	800f8c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	f003 0304 	and.w	r3, r3, #4
 800f88a:	2b04      	cmp	r3, #4
 800f88c:	d11b      	bne.n	800f8c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f06f 0204 	mvn.w	r2, #4
 800f896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2202      	movs	r2, #2
 800f89c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	699b      	ldr	r3, [r3, #24]
 800f8a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d003      	beq.n	800f8b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f000 f8c4 	bl	800fa3a <HAL_TIM_IC_CaptureCallback>
 800f8b2:	e005      	b.n	800f8c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f000 f8b6 	bl	800fa26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 f8c7 	bl	800fa4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	691b      	ldr	r3, [r3, #16]
 800f8cc:	f003 0308 	and.w	r3, r3, #8
 800f8d0:	2b08      	cmp	r3, #8
 800f8d2:	d122      	bne.n	800f91a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	f003 0308 	and.w	r3, r3, #8
 800f8de:	2b08      	cmp	r3, #8
 800f8e0:	d11b      	bne.n	800f91a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f06f 0208 	mvn.w	r2, #8
 800f8ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2204      	movs	r2, #4
 800f8f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	69db      	ldr	r3, [r3, #28]
 800f8f8:	f003 0303 	and.w	r3, r3, #3
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d003      	beq.n	800f908 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f000 f89a 	bl	800fa3a <HAL_TIM_IC_CaptureCallback>
 800f906:	e005      	b.n	800f914 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 f88c 	bl	800fa26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 f89d 	bl	800fa4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2200      	movs	r2, #0
 800f918:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	691b      	ldr	r3, [r3, #16]
 800f920:	f003 0310 	and.w	r3, r3, #16
 800f924:	2b10      	cmp	r3, #16
 800f926:	d122      	bne.n	800f96e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	f003 0310 	and.w	r3, r3, #16
 800f932:	2b10      	cmp	r3, #16
 800f934:	d11b      	bne.n	800f96e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f06f 0210 	mvn.w	r2, #16
 800f93e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2208      	movs	r2, #8
 800f944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	69db      	ldr	r3, [r3, #28]
 800f94c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f950:	2b00      	cmp	r3, #0
 800f952:	d003      	beq.n	800f95c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 f870 	bl	800fa3a <HAL_TIM_IC_CaptureCallback>
 800f95a:	e005      	b.n	800f968 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f000 f862 	bl	800fa26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 f873 	bl	800fa4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	691b      	ldr	r3, [r3, #16]
 800f974:	f003 0301 	and.w	r3, r3, #1
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d10e      	bne.n	800f99a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	f003 0301 	and.w	r3, r3, #1
 800f986:	2b01      	cmp	r3, #1
 800f988:	d107      	bne.n	800f99a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f06f 0201 	mvn.w	r2, #1
 800f992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f7f6 f8e5 	bl	8005b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	691b      	ldr	r3, [r3, #16]
 800f9a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9a4:	2b80      	cmp	r3, #128	; 0x80
 800f9a6:	d10e      	bne.n	800f9c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	68db      	ldr	r3, [r3, #12]
 800f9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9b2:	2b80      	cmp	r3, #128	; 0x80
 800f9b4:	d107      	bne.n	800f9c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f9be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 f951 	bl	800fc68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9d0:	2b40      	cmp	r3, #64	; 0x40
 800f9d2:	d10e      	bne.n	800f9f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9de:	2b40      	cmp	r3, #64	; 0x40
 800f9e0:	d107      	bne.n	800f9f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f9ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f000 f838 	bl	800fa62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	691b      	ldr	r3, [r3, #16]
 800f9f8:	f003 0320 	and.w	r3, r3, #32
 800f9fc:	2b20      	cmp	r3, #32
 800f9fe:	d10e      	bne.n	800fa1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	68db      	ldr	r3, [r3, #12]
 800fa06:	f003 0320 	and.w	r3, r3, #32
 800fa0a:	2b20      	cmp	r3, #32
 800fa0c:	d107      	bne.n	800fa1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f06f 0220 	mvn.w	r2, #32
 800fa16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f000 f91b 	bl	800fc54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fa1e:	bf00      	nop
 800fa20:	3708      	adds	r7, #8
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fa26:	b480      	push	{r7}
 800fa28:	b083      	sub	sp, #12
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fa2e:	bf00      	nop
 800fa30:	370c      	adds	r7, #12
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr

0800fa3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fa3a:	b480      	push	{r7}
 800fa3c:	b083      	sub	sp, #12
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fa42:	bf00      	nop
 800fa44:	370c      	adds	r7, #12
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr

0800fa4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fa4e:	b480      	push	{r7}
 800fa50:	b083      	sub	sp, #12
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fa56:	bf00      	nop
 800fa58:	370c      	adds	r7, #12
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr

0800fa62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fa62:	b480      	push	{r7}
 800fa64:	b083      	sub	sp, #12
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fa6a:	bf00      	nop
 800fa6c:	370c      	adds	r7, #12
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr
	...

0800fa78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	4a34      	ldr	r2, [pc, #208]	; (800fb5c <TIM_Base_SetConfig+0xe4>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d00f      	beq.n	800fab0 <TIM_Base_SetConfig+0x38>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa96:	d00b      	beq.n	800fab0 <TIM_Base_SetConfig+0x38>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	4a31      	ldr	r2, [pc, #196]	; (800fb60 <TIM_Base_SetConfig+0xe8>)
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d007      	beq.n	800fab0 <TIM_Base_SetConfig+0x38>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4a30      	ldr	r2, [pc, #192]	; (800fb64 <TIM_Base_SetConfig+0xec>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d003      	beq.n	800fab0 <TIM_Base_SetConfig+0x38>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	4a2f      	ldr	r2, [pc, #188]	; (800fb68 <TIM_Base_SetConfig+0xf0>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d108      	bne.n	800fac2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	4313      	orrs	r3, r2
 800fac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4a25      	ldr	r2, [pc, #148]	; (800fb5c <TIM_Base_SetConfig+0xe4>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d01b      	beq.n	800fb02 <TIM_Base_SetConfig+0x8a>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fad0:	d017      	beq.n	800fb02 <TIM_Base_SetConfig+0x8a>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4a22      	ldr	r2, [pc, #136]	; (800fb60 <TIM_Base_SetConfig+0xe8>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d013      	beq.n	800fb02 <TIM_Base_SetConfig+0x8a>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	4a21      	ldr	r2, [pc, #132]	; (800fb64 <TIM_Base_SetConfig+0xec>)
 800fade:	4293      	cmp	r3, r2
 800fae0:	d00f      	beq.n	800fb02 <TIM_Base_SetConfig+0x8a>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4a20      	ldr	r2, [pc, #128]	; (800fb68 <TIM_Base_SetConfig+0xf0>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d00b      	beq.n	800fb02 <TIM_Base_SetConfig+0x8a>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4a1f      	ldr	r2, [pc, #124]	; (800fb6c <TIM_Base_SetConfig+0xf4>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d007      	beq.n	800fb02 <TIM_Base_SetConfig+0x8a>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4a1e      	ldr	r2, [pc, #120]	; (800fb70 <TIM_Base_SetConfig+0xf8>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d003      	beq.n	800fb02 <TIM_Base_SetConfig+0x8a>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4a1d      	ldr	r2, [pc, #116]	; (800fb74 <TIM_Base_SetConfig+0xfc>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d108      	bne.n	800fb14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	68fa      	ldr	r2, [r7, #12]
 800fb10:	4313      	orrs	r3, r2
 800fb12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	695b      	ldr	r3, [r3, #20]
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	68fa      	ldr	r2, [r7, #12]
 800fb26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	689a      	ldr	r2, [r3, #8]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a08      	ldr	r2, [pc, #32]	; (800fb5c <TIM_Base_SetConfig+0xe4>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d103      	bne.n	800fb48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	691a      	ldr	r2, [r3, #16]
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	615a      	str	r2, [r3, #20]
}
 800fb4e:	bf00      	nop
 800fb50:	3714      	adds	r7, #20
 800fb52:	46bd      	mov	sp, r7
 800fb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	40010000 	.word	0x40010000
 800fb60:	40000400 	.word	0x40000400
 800fb64:	40000800 	.word	0x40000800
 800fb68:	40000c00 	.word	0x40000c00
 800fb6c:	40014000 	.word	0x40014000
 800fb70:	40014400 	.word	0x40014400
 800fb74:	40014800 	.word	0x40014800

0800fb78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b085      	sub	sp, #20
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	d101      	bne.n	800fb90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb8c:	2302      	movs	r3, #2
 800fb8e:	e050      	b.n	800fc32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2201      	movs	r2, #1
 800fb94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2202      	movs	r2, #2
 800fb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	68fa      	ldr	r2, [r7, #12]
 800fbc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4a1c      	ldr	r2, [pc, #112]	; (800fc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d018      	beq.n	800fc06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbdc:	d013      	beq.n	800fc06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a18      	ldr	r2, [pc, #96]	; (800fc44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d00e      	beq.n	800fc06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4a16      	ldr	r2, [pc, #88]	; (800fc48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d009      	beq.n	800fc06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4a15      	ldr	r2, [pc, #84]	; (800fc4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d004      	beq.n	800fc06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4a13      	ldr	r2, [pc, #76]	; (800fc50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d10c      	bne.n	800fc20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	68ba      	ldr	r2, [r7, #8]
 800fc14:	4313      	orrs	r3, r2
 800fc16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2201      	movs	r2, #1
 800fc24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3714      	adds	r7, #20
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	40010000 	.word	0x40010000
 800fc44:	40000400 	.word	0x40000400
 800fc48:	40000800 	.word	0x40000800
 800fc4c:	40000c00 	.word	0x40000c00
 800fc50:	40014000 	.word	0x40014000

0800fc54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc5c:	bf00      	nop
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d101      	bne.n	800fc8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e03f      	b.n	800fd0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d106      	bne.n	800fca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f7fa f906 	bl	8009eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2224      	movs	r2, #36	; 0x24
 800fcac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	68da      	ldr	r2, [r3, #12]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fcbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 ff53 	bl	8010b6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	691a      	ldr	r2, [r3, #16]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fcd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	695a      	ldr	r2, [r3, #20]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	68da      	ldr	r2, [r3, #12]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fcf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2220      	movs	r2, #32
 800fd00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2220      	movs	r2, #32
 800fd08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800fd0c:	2300      	movs	r3, #0
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3708      	adds	r7, #8
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
	...

0800fd18 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b08c      	sub	sp, #48	; 0x30
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	60f8      	str	r0, [r7, #12]
 800fd20:	60b9      	str	r1, [r7, #8]
 800fd22:	4613      	mov	r3, r2
 800fd24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	2b20      	cmp	r3, #32
 800fd30:	d165      	bne.n	800fdfe <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d002      	beq.n	800fd3e <HAL_UART_Transmit_DMA+0x26>
 800fd38:	88fb      	ldrh	r3, [r7, #6]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d101      	bne.n	800fd42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	e05e      	b.n	800fe00 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d101      	bne.n	800fd50 <HAL_UART_Transmit_DMA+0x38>
 800fd4c:	2302      	movs	r3, #2
 800fd4e:	e057      	b.n	800fe00 <HAL_UART_Transmit_DMA+0xe8>
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2201      	movs	r2, #1
 800fd54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800fd58:	68ba      	ldr	r2, [r7, #8]
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	88fa      	ldrh	r2, [r7, #6]
 800fd62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	88fa      	ldrh	r2, [r7, #6]
 800fd68:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2221      	movs	r2, #33	; 0x21
 800fd74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd7c:	4a22      	ldr	r2, [pc, #136]	; (800fe08 <HAL_UART_Transmit_DMA+0xf0>)
 800fd7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd84:	4a21      	ldr	r2, [pc, #132]	; (800fe0c <HAL_UART_Transmit_DMA+0xf4>)
 800fd86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd8c:	4a20      	ldr	r2, [pc, #128]	; (800fe10 <HAL_UART_Transmit_DMA+0xf8>)
 800fd8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd94:	2200      	movs	r2, #0
 800fd96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800fd98:	f107 0308 	add.w	r3, r7, #8
 800fd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda4:	6819      	ldr	r1, [r3, #0]
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	3304      	adds	r3, #4
 800fdac:	461a      	mov	r2, r3
 800fdae:	88fb      	ldrh	r3, [r7, #6]
 800fdb0:	f7fa fd00 	bl	800a7b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fdbc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3314      	adds	r3, #20
 800fdcc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdce:	69bb      	ldr	r3, [r7, #24]
 800fdd0:	e853 3f00 	ldrex	r3, [r3]
 800fdd4:	617b      	str	r3, [r7, #20]
   return(result);
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fddc:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	3314      	adds	r3, #20
 800fde4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fde6:	627a      	str	r2, [r7, #36]	; 0x24
 800fde8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdea:	6a39      	ldr	r1, [r7, #32]
 800fdec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdee:	e841 2300 	strex	r3, r2, [r1]
 800fdf2:	61fb      	str	r3, [r7, #28]
   return(result);
 800fdf4:	69fb      	ldr	r3, [r7, #28]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d1e5      	bne.n	800fdc6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	e000      	b.n	800fe00 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800fdfe:	2302      	movs	r3, #2
  }
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3730      	adds	r7, #48	; 0x30
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	0801040d 	.word	0x0801040d
 800fe0c:	080104a7 	.word	0x080104a7
 800fe10:	0801061f 	.word	0x0801061f

0800fe14 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	60b9      	str	r1, [r7, #8]
 800fe1e:	4613      	mov	r3, r2
 800fe20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	2b20      	cmp	r3, #32
 800fe2c:	d11d      	bne.n	800fe6a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d002      	beq.n	800fe3a <HAL_UART_Receive_DMA+0x26>
 800fe34:	88fb      	ldrh	r3, [r7, #6]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d101      	bne.n	800fe3e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	e016      	b.n	800fe6c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d101      	bne.n	800fe4c <HAL_UART_Receive_DMA+0x38>
 800fe48:	2302      	movs	r3, #2
 800fe4a:	e00f      	b.n	800fe6c <HAL_UART_Receive_DMA+0x58>
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2200      	movs	r2, #0
 800fe58:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fe5a:	88fb      	ldrh	r3, [r7, #6]
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	68b9      	ldr	r1, [r7, #8]
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f000 fc27 	bl	80106b4 <UART_Start_Receive_DMA>
 800fe66:	4603      	mov	r3, r0
 800fe68:	e000      	b.n	800fe6c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800fe6a:	2302      	movs	r3, #2
  }
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3710      	adds	r7, #16
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b0ba      	sub	sp, #232	; 0xe8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	68db      	ldr	r3, [r3, #12]
 800fe8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	695b      	ldr	r3, [r3, #20]
 800fe96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800fea0:	2300      	movs	r3, #0
 800fea2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800fea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800feaa:	f003 030f 	and.w	r3, r3, #15
 800feae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800feb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d10f      	bne.n	800feda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800feba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800febe:	f003 0320 	and.w	r3, r3, #32
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d009      	beq.n	800feda <HAL_UART_IRQHandler+0x66>
 800fec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800feca:	f003 0320 	and.w	r3, r3, #32
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d003      	beq.n	800feda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f000 fd8f 	bl	80109f6 <UART_Receive_IT>
      return;
 800fed8:	e256      	b.n	8010388 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800feda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fede:	2b00      	cmp	r3, #0
 800fee0:	f000 80de 	beq.w	80100a0 <HAL_UART_IRQHandler+0x22c>
 800fee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fee8:	f003 0301 	and.w	r3, r3, #1
 800feec:	2b00      	cmp	r3, #0
 800feee:	d106      	bne.n	800fefe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800fef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fef4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	f000 80d1 	beq.w	80100a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800fefe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff02:	f003 0301 	and.w	r3, r3, #1
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d00b      	beq.n	800ff22 <HAL_UART_IRQHandler+0xae>
 800ff0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d005      	beq.n	800ff22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff1a:	f043 0201 	orr.w	r2, r3, #1
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ff22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff26:	f003 0304 	and.w	r3, r3, #4
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d00b      	beq.n	800ff46 <HAL_UART_IRQHandler+0xd2>
 800ff2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff32:	f003 0301 	and.w	r3, r3, #1
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d005      	beq.n	800ff46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff3e:	f043 0202 	orr.w	r2, r3, #2
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ff46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff4a:	f003 0302 	and.w	r3, r3, #2
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d00b      	beq.n	800ff6a <HAL_UART_IRQHandler+0xf6>
 800ff52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff56:	f003 0301 	and.w	r3, r3, #1
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d005      	beq.n	800ff6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff62:	f043 0204 	orr.w	r2, r3, #4
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ff6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff6e:	f003 0308 	and.w	r3, r3, #8
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d011      	beq.n	800ff9a <HAL_UART_IRQHandler+0x126>
 800ff76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff7a:	f003 0320 	and.w	r3, r3, #32
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d105      	bne.n	800ff8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ff82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff86:	f003 0301 	and.w	r3, r3, #1
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d005      	beq.n	800ff9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff92:	f043 0208 	orr.w	r2, r3, #8
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	f000 81ed 	beq.w	801037e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ffa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffa8:	f003 0320 	and.w	r3, r3, #32
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d008      	beq.n	800ffc2 <HAL_UART_IRQHandler+0x14e>
 800ffb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffb4:	f003 0320 	and.w	r3, r3, #32
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d002      	beq.n	800ffc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f000 fd1a 	bl	80109f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	695b      	ldr	r3, [r3, #20]
 800ffc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffcc:	2b40      	cmp	r3, #64	; 0x40
 800ffce:	bf0c      	ite	eq
 800ffd0:	2301      	moveq	r3, #1
 800ffd2:	2300      	movne	r3, #0
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffde:	f003 0308 	and.w	r3, r3, #8
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d103      	bne.n	800ffee <HAL_UART_IRQHandler+0x17a>
 800ffe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d04f      	beq.n	801008e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f000 fc22 	bl	8010838 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	695b      	ldr	r3, [r3, #20]
 800fffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fffe:	2b40      	cmp	r3, #64	; 0x40
 8010000:	d141      	bne.n	8010086 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	3314      	adds	r3, #20
 8010008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801000c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010010:	e853 3f00 	ldrex	r3, [r3]
 8010014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010018:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801001c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	3314      	adds	r3, #20
 801002a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801002e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010036:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801003a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801003e:	e841 2300 	strex	r3, r2, [r1]
 8010042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801004a:	2b00      	cmp	r3, #0
 801004c:	d1d9      	bne.n	8010002 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010052:	2b00      	cmp	r3, #0
 8010054:	d013      	beq.n	801007e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801005a:	4a7d      	ldr	r2, [pc, #500]	; (8010250 <HAL_UART_IRQHandler+0x3dc>)
 801005c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010062:	4618      	mov	r0, r3
 8010064:	f7fa fc6e 	bl	800a944 <HAL_DMA_Abort_IT>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d016      	beq.n	801009c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010078:	4610      	mov	r0, r2
 801007a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801007c:	e00e      	b.n	801009c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f000 f9ae 	bl	80103e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010084:	e00a      	b.n	801009c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f000 f9aa 	bl	80103e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801008c:	e006      	b.n	801009c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f000 f9a6 	bl	80103e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2200      	movs	r2, #0
 8010098:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801009a:	e170      	b.n	801037e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801009c:	bf00      	nop
    return;
 801009e:	e16e      	b.n	801037e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	f040 814a 	bne.w	801033e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80100aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100ae:	f003 0310 	and.w	r3, r3, #16
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	f000 8143 	beq.w	801033e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80100b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100bc:	f003 0310 	and.w	r3, r3, #16
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	f000 813c 	beq.w	801033e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80100c6:	2300      	movs	r3, #0
 80100c8:	60bb      	str	r3, [r7, #8]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	60bb      	str	r3, [r7, #8]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	60bb      	str	r3, [r7, #8]
 80100da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	695b      	ldr	r3, [r3, #20]
 80100e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100e6:	2b40      	cmp	r3, #64	; 0x40
 80100e8:	f040 80b4 	bne.w	8010254 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80100f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f000 8140 	beq.w	8010382 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801010a:	429a      	cmp	r2, r3
 801010c:	f080 8139 	bcs.w	8010382 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010116:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801011c:	69db      	ldr	r3, [r3, #28]
 801011e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010122:	f000 8088 	beq.w	8010236 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	330c      	adds	r3, #12
 801012c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010134:	e853 3f00 	ldrex	r3, [r3]
 8010138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801013c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	330c      	adds	r3, #12
 801014e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010152:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010156:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801015a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801015e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010162:	e841 2300 	strex	r3, r2, [r1]
 8010166:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801016a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801016e:	2b00      	cmp	r3, #0
 8010170:	d1d9      	bne.n	8010126 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	3314      	adds	r3, #20
 8010178:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801017a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801017c:	e853 3f00 	ldrex	r3, [r3]
 8010180:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010184:	f023 0301 	bic.w	r3, r3, #1
 8010188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	3314      	adds	r3, #20
 8010192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010196:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801019a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801019c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801019e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80101a2:	e841 2300 	strex	r3, r2, [r1]
 80101a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80101a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d1e1      	bne.n	8010172 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	3314      	adds	r3, #20
 80101b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101b8:	e853 3f00 	ldrex	r3, [r3]
 80101bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80101be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	3314      	adds	r3, #20
 80101ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80101d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80101d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80101d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80101da:	e841 2300 	strex	r3, r2, [r1]
 80101de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80101e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d1e3      	bne.n	80101ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2220      	movs	r2, #32
 80101ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	330c      	adds	r3, #12
 80101fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101fe:	e853 3f00 	ldrex	r3, [r3]
 8010202:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010206:	f023 0310 	bic.w	r3, r3, #16
 801020a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	330c      	adds	r3, #12
 8010214:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010218:	65ba      	str	r2, [r7, #88]	; 0x58
 801021a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801021c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801021e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010220:	e841 2300 	strex	r3, r2, [r1]
 8010224:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010228:	2b00      	cmp	r3, #0
 801022a:	d1e3      	bne.n	80101f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010230:	4618      	mov	r0, r3
 8010232:	f7fa fb17 	bl	800a864 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801023e:	b29b      	uxth	r3, r3
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	b29b      	uxth	r3, r3
 8010244:	4619      	mov	r1, r3
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 f8d4 	bl	80103f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801024c:	e099      	b.n	8010382 <HAL_UART_IRQHandler+0x50e>
 801024e:	bf00      	nop
 8010250:	080108ff 	.word	0x080108ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801025c:	b29b      	uxth	r3, r3
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010268:	b29b      	uxth	r3, r3
 801026a:	2b00      	cmp	r3, #0
 801026c:	f000 808b 	beq.w	8010386 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8010270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010274:	2b00      	cmp	r3, #0
 8010276:	f000 8086 	beq.w	8010386 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	330c      	adds	r3, #12
 8010280:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010284:	e853 3f00 	ldrex	r3, [r3]
 8010288:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801028a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801028c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010290:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	330c      	adds	r3, #12
 801029a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801029e:	647a      	str	r2, [r7, #68]	; 0x44
 80102a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80102a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80102a6:	e841 2300 	strex	r3, r2, [r1]
 80102aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80102ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1e3      	bne.n	801027a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	3314      	adds	r3, #20
 80102b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102bc:	e853 3f00 	ldrex	r3, [r3]
 80102c0:	623b      	str	r3, [r7, #32]
   return(result);
 80102c2:	6a3b      	ldr	r3, [r7, #32]
 80102c4:	f023 0301 	bic.w	r3, r3, #1
 80102c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	3314      	adds	r3, #20
 80102d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80102d6:	633a      	str	r2, [r7, #48]	; 0x30
 80102d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102de:	e841 2300 	strex	r3, r2, [r1]
 80102e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80102e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d1e3      	bne.n	80102b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2220      	movs	r2, #32
 80102ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2200      	movs	r2, #0
 80102f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	330c      	adds	r3, #12
 80102fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	e853 3f00 	ldrex	r3, [r3]
 8010306:	60fb      	str	r3, [r7, #12]
   return(result);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	f023 0310 	bic.w	r3, r3, #16
 801030e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	330c      	adds	r3, #12
 8010318:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801031c:	61fa      	str	r2, [r7, #28]
 801031e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010320:	69b9      	ldr	r1, [r7, #24]
 8010322:	69fa      	ldr	r2, [r7, #28]
 8010324:	e841 2300 	strex	r3, r2, [r1]
 8010328:	617b      	str	r3, [r7, #20]
   return(result);
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d1e3      	bne.n	80102f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010334:	4619      	mov	r1, r3
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 f85c 	bl	80103f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801033c:	e023      	b.n	8010386 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801033e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010346:	2b00      	cmp	r3, #0
 8010348:	d009      	beq.n	801035e <HAL_UART_IRQHandler+0x4ea>
 801034a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801034e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010352:	2b00      	cmp	r3, #0
 8010354:	d003      	beq.n	801035e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 fae5 	bl	8010926 <UART_Transmit_IT>
    return;
 801035c:	e014      	b.n	8010388 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801035e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00e      	beq.n	8010388 <HAL_UART_IRQHandler+0x514>
 801036a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801036e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010372:	2b00      	cmp	r3, #0
 8010374:	d008      	beq.n	8010388 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f000 fb25 	bl	80109c6 <UART_EndTransmit_IT>
    return;
 801037c:	e004      	b.n	8010388 <HAL_UART_IRQHandler+0x514>
    return;
 801037e:	bf00      	nop
 8010380:	e002      	b.n	8010388 <HAL_UART_IRQHandler+0x514>
      return;
 8010382:	bf00      	nop
 8010384:	e000      	b.n	8010388 <HAL_UART_IRQHandler+0x514>
      return;
 8010386:	bf00      	nop
  }
}
 8010388:	37e8      	adds	r7, #232	; 0xe8
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop

08010390 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010398:	bf00      	nop
 801039a:	370c      	adds	r7, #12
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80103ac:	bf00      	nop
 80103ae:	370c      	adds	r7, #12
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80103c0:	bf00      	nop
 80103c2:	370c      	adds	r7, #12
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80103d4:	bf00      	nop
 80103d6:	370c      	adds	r7, #12
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr

080103e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80103e8:	bf00      	nop
 80103ea:	370c      	adds	r7, #12
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr

080103f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	460b      	mov	r3, r1
 80103fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010400:	bf00      	nop
 8010402:	370c      	adds	r7, #12
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b090      	sub	sp, #64	; 0x40
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010418:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010424:	2b00      	cmp	r3, #0
 8010426:	d137      	bne.n	8010498 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8010428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801042a:	2200      	movs	r2, #0
 801042c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801042e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	3314      	adds	r3, #20
 8010434:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010438:	e853 3f00 	ldrex	r3, [r3]
 801043c:	623b      	str	r3, [r7, #32]
   return(result);
 801043e:	6a3b      	ldr	r3, [r7, #32]
 8010440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010444:	63bb      	str	r3, [r7, #56]	; 0x38
 8010446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	3314      	adds	r3, #20
 801044c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801044e:	633a      	str	r2, [r7, #48]	; 0x30
 8010450:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010456:	e841 2300 	strex	r3, r2, [r1]
 801045a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801045c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1e5      	bne.n	801042e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	330c      	adds	r3, #12
 8010468:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	e853 3f00 	ldrex	r3, [r3]
 8010470:	60fb      	str	r3, [r7, #12]
   return(result);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010478:	637b      	str	r3, [r7, #52]	; 0x34
 801047a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	330c      	adds	r3, #12
 8010480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010482:	61fa      	str	r2, [r7, #28]
 8010484:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010486:	69b9      	ldr	r1, [r7, #24]
 8010488:	69fa      	ldr	r2, [r7, #28]
 801048a:	e841 2300 	strex	r3, r2, [r1]
 801048e:	617b      	str	r3, [r7, #20]
   return(result);
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d1e5      	bne.n	8010462 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010496:	e002      	b.n	801049e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8010498:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801049a:	f7ff ff79 	bl	8010390 <HAL_UART_TxCpltCallback>
}
 801049e:	bf00      	nop
 80104a0:	3740      	adds	r7, #64	; 0x40
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80104a6:	b580      	push	{r7, lr}
 80104a8:	b084      	sub	sp, #16
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f7ff ff75 	bl	80103a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80104ba:	bf00      	nop
 80104bc:	3710      	adds	r7, #16
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}

080104c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80104c2:	b580      	push	{r7, lr}
 80104c4:	b09c      	sub	sp, #112	; 0x70
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d172      	bne.n	80105c4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80104de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104e0:	2200      	movs	r2, #0
 80104e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	330c      	adds	r3, #12
 80104ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104ee:	e853 3f00 	ldrex	r3, [r3]
 80104f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80104f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80104fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	330c      	adds	r3, #12
 8010502:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010504:	65ba      	str	r2, [r7, #88]	; 0x58
 8010506:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010508:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801050a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801050c:	e841 2300 	strex	r3, r2, [r1]
 8010510:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010514:	2b00      	cmp	r3, #0
 8010516:	d1e5      	bne.n	80104e4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	3314      	adds	r3, #20
 801051e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010522:	e853 3f00 	ldrex	r3, [r3]
 8010526:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052a:	f023 0301 	bic.w	r3, r3, #1
 801052e:	667b      	str	r3, [r7, #100]	; 0x64
 8010530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	3314      	adds	r3, #20
 8010536:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010538:	647a      	str	r2, [r7, #68]	; 0x44
 801053a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801053c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801053e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010540:	e841 2300 	strex	r3, r2, [r1]
 8010544:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010548:	2b00      	cmp	r3, #0
 801054a:	d1e5      	bne.n	8010518 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801054c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	3314      	adds	r3, #20
 8010552:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010556:	e853 3f00 	ldrex	r3, [r3]
 801055a:	623b      	str	r3, [r7, #32]
   return(result);
 801055c:	6a3b      	ldr	r3, [r7, #32]
 801055e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010562:	663b      	str	r3, [r7, #96]	; 0x60
 8010564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	3314      	adds	r3, #20
 801056a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801056c:	633a      	str	r2, [r7, #48]	; 0x30
 801056e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010570:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010574:	e841 2300 	strex	r3, r2, [r1]
 8010578:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801057a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801057c:	2b00      	cmp	r3, #0
 801057e:	d1e5      	bne.n	801054c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010582:	2220      	movs	r2, #32
 8010584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801058c:	2b01      	cmp	r3, #1
 801058e:	d119      	bne.n	80105c4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	330c      	adds	r3, #12
 8010596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	e853 3f00 	ldrex	r3, [r3]
 801059e:	60fb      	str	r3, [r7, #12]
   return(result);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f023 0310 	bic.w	r3, r3, #16
 80105a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	330c      	adds	r3, #12
 80105ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80105b0:	61fa      	str	r2, [r7, #28]
 80105b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b4:	69b9      	ldr	r1, [r7, #24]
 80105b6:	69fa      	ldr	r2, [r7, #28]
 80105b8:	e841 2300 	strex	r3, r2, [r1]
 80105bc:	617b      	str	r3, [r7, #20]
   return(result);
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d1e5      	bne.n	8010590 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	d106      	bne.n	80105da <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80105cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80105d0:	4619      	mov	r1, r3
 80105d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80105d4:	f7ff ff0e 	bl	80103f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80105d8:	e002      	b.n	80105e0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80105da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80105dc:	f7ff feec 	bl	80103b8 <HAL_UART_RxCpltCallback>
}
 80105e0:	bf00      	nop
 80105e2:	3770      	adds	r7, #112	; 0x70
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105f4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d108      	bne.n	8010610 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010602:	085b      	lsrs	r3, r3, #1
 8010604:	b29b      	uxth	r3, r3
 8010606:	4619      	mov	r1, r3
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f7ff fef3 	bl	80103f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801060e:	e002      	b.n	8010616 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	f7ff fedb 	bl	80103cc <HAL_UART_RxHalfCpltCallback>
}
 8010616:	bf00      	nop
 8010618:	3710      	adds	r7, #16
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}

0801061e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801061e:	b580      	push	{r7, lr}
 8010620:	b084      	sub	sp, #16
 8010622:	af00      	add	r7, sp, #0
 8010624:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010626:	2300      	movs	r3, #0
 8010628:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801062e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	695b      	ldr	r3, [r3, #20]
 8010636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801063a:	2b80      	cmp	r3, #128	; 0x80
 801063c:	bf0c      	ite	eq
 801063e:	2301      	moveq	r3, #1
 8010640:	2300      	movne	r3, #0
 8010642:	b2db      	uxtb	r3, r3
 8010644:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801064c:	b2db      	uxtb	r3, r3
 801064e:	2b21      	cmp	r3, #33	; 0x21
 8010650:	d108      	bne.n	8010664 <UART_DMAError+0x46>
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d005      	beq.n	8010664 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	2200      	movs	r2, #0
 801065c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801065e:	68b8      	ldr	r0, [r7, #8]
 8010660:	f000 f8c2 	bl	80107e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	695b      	ldr	r3, [r3, #20]
 801066a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801066e:	2b40      	cmp	r3, #64	; 0x40
 8010670:	bf0c      	ite	eq
 8010672:	2301      	moveq	r3, #1
 8010674:	2300      	movne	r3, #0
 8010676:	b2db      	uxtb	r3, r3
 8010678:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010680:	b2db      	uxtb	r3, r3
 8010682:	2b22      	cmp	r3, #34	; 0x22
 8010684:	d108      	bne.n	8010698 <UART_DMAError+0x7a>
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d005      	beq.n	8010698 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	2200      	movs	r2, #0
 8010690:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010692:	68b8      	ldr	r0, [r7, #8]
 8010694:	f000 f8d0 	bl	8010838 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801069c:	f043 0210 	orr.w	r2, r3, #16
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80106a4:	68b8      	ldr	r0, [r7, #8]
 80106a6:	f7ff fe9b 	bl	80103e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80106aa:	bf00      	nop
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
	...

080106b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b098      	sub	sp, #96	; 0x60
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	4613      	mov	r3, r2
 80106c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80106c2:	68ba      	ldr	r2, [r7, #8]
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	88fa      	ldrh	r2, [r7, #6]
 80106cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2200      	movs	r2, #0
 80106d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2222      	movs	r2, #34	; 0x22
 80106d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106e0:	4a3e      	ldr	r2, [pc, #248]	; (80107dc <UART_Start_Receive_DMA+0x128>)
 80106e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106e8:	4a3d      	ldr	r2, [pc, #244]	; (80107e0 <UART_Start_Receive_DMA+0x12c>)
 80106ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106f0:	4a3c      	ldr	r2, [pc, #240]	; (80107e4 <UART_Start_Receive_DMA+0x130>)
 80106f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106f8:	2200      	movs	r2, #0
 80106fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80106fc:	f107 0308 	add.w	r3, r7, #8
 8010700:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	3304      	adds	r3, #4
 801070c:	4619      	mov	r1, r3
 801070e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010710:	681a      	ldr	r2, [r3, #0]
 8010712:	88fb      	ldrh	r3, [r7, #6]
 8010714:	f7fa f84e 	bl	800a7b4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8010718:	2300      	movs	r3, #0
 801071a:	613b      	str	r3, [r7, #16]
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	613b      	str	r3, [r7, #16]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	685b      	ldr	r3, [r3, #4]
 801072a:	613b      	str	r3, [r7, #16]
 801072c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2200      	movs	r2, #0
 8010732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	330c      	adds	r3, #12
 801073c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801073e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010740:	e853 3f00 	ldrex	r3, [r3]
 8010744:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801074c:	65bb      	str	r3, [r7, #88]	; 0x58
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	330c      	adds	r3, #12
 8010754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010756:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010758:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801075a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801075c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801075e:	e841 2300 	strex	r3, r2, [r1]
 8010762:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010766:	2b00      	cmp	r3, #0
 8010768:	d1e5      	bne.n	8010736 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	3314      	adds	r3, #20
 8010770:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010774:	e853 3f00 	ldrex	r3, [r3]
 8010778:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801077a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077c:	f043 0301 	orr.w	r3, r3, #1
 8010780:	657b      	str	r3, [r7, #84]	; 0x54
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	3314      	adds	r3, #20
 8010788:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801078a:	63ba      	str	r2, [r7, #56]	; 0x38
 801078c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801078e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010792:	e841 2300 	strex	r3, r2, [r1]
 8010796:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079a:	2b00      	cmp	r3, #0
 801079c:	d1e5      	bne.n	801076a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	3314      	adds	r3, #20
 80107a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a6:	69bb      	ldr	r3, [r7, #24]
 80107a8:	e853 3f00 	ldrex	r3, [r3]
 80107ac:	617b      	str	r3, [r7, #20]
   return(result);
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107b4:	653b      	str	r3, [r7, #80]	; 0x50
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	3314      	adds	r3, #20
 80107bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80107be:	627a      	str	r2, [r7, #36]	; 0x24
 80107c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c2:	6a39      	ldr	r1, [r7, #32]
 80107c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107c6:	e841 2300 	strex	r3, r2, [r1]
 80107ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80107cc:	69fb      	ldr	r3, [r7, #28]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d1e5      	bne.n	801079e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80107d2:	2300      	movs	r3, #0
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3760      	adds	r7, #96	; 0x60
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	080104c3 	.word	0x080104c3
 80107e0:	080105e9 	.word	0x080105e9
 80107e4:	0801061f 	.word	0x0801061f

080107e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b089      	sub	sp, #36	; 0x24
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	330c      	adds	r3, #12
 80107f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	e853 3f00 	ldrex	r3, [r3]
 80107fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010806:	61fb      	str	r3, [r7, #28]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	330c      	adds	r3, #12
 801080e:	69fa      	ldr	r2, [r7, #28]
 8010810:	61ba      	str	r2, [r7, #24]
 8010812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010814:	6979      	ldr	r1, [r7, #20]
 8010816:	69ba      	ldr	r2, [r7, #24]
 8010818:	e841 2300 	strex	r3, r2, [r1]
 801081c:	613b      	str	r3, [r7, #16]
   return(result);
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d1e5      	bne.n	80107f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2220      	movs	r2, #32
 8010828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801082c:	bf00      	nop
 801082e:	3724      	adds	r7, #36	; 0x24
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr

08010838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010838:	b480      	push	{r7}
 801083a:	b095      	sub	sp, #84	; 0x54
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	330c      	adds	r3, #12
 8010846:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801084a:	e853 3f00 	ldrex	r3, [r3]
 801084e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010852:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	330c      	adds	r3, #12
 801085e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010860:	643a      	str	r2, [r7, #64]	; 0x40
 8010862:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010864:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010866:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010868:	e841 2300 	strex	r3, r2, [r1]
 801086c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801086e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010870:	2b00      	cmp	r3, #0
 8010872:	d1e5      	bne.n	8010840 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	3314      	adds	r3, #20
 801087a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801087c:	6a3b      	ldr	r3, [r7, #32]
 801087e:	e853 3f00 	ldrex	r3, [r3]
 8010882:	61fb      	str	r3, [r7, #28]
   return(result);
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	f023 0301 	bic.w	r3, r3, #1
 801088a:	64bb      	str	r3, [r7, #72]	; 0x48
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	3314      	adds	r3, #20
 8010892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010894:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801089a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801089c:	e841 2300 	strex	r3, r2, [r1]
 80108a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80108a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d1e5      	bne.n	8010874 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d119      	bne.n	80108e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	330c      	adds	r3, #12
 80108b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	e853 3f00 	ldrex	r3, [r3]
 80108be:	60bb      	str	r3, [r7, #8]
   return(result);
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	f023 0310 	bic.w	r3, r3, #16
 80108c6:	647b      	str	r3, [r7, #68]	; 0x44
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	330c      	adds	r3, #12
 80108ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108d0:	61ba      	str	r2, [r7, #24]
 80108d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108d4:	6979      	ldr	r1, [r7, #20]
 80108d6:	69ba      	ldr	r2, [r7, #24]
 80108d8:	e841 2300 	strex	r3, r2, [r1]
 80108dc:	613b      	str	r3, [r7, #16]
   return(result);
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d1e5      	bne.n	80108b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2220      	movs	r2, #32
 80108e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2200      	movs	r2, #0
 80108f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80108f2:	bf00      	nop
 80108f4:	3754      	adds	r7, #84	; 0x54
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr

080108fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80108fe:	b580      	push	{r7, lr}
 8010900:	b084      	sub	sp, #16
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801090a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2200      	movs	r2, #0
 8010910:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2200      	movs	r2, #0
 8010916:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010918:	68f8      	ldr	r0, [r7, #12]
 801091a:	f7ff fd61 	bl	80103e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801091e:	bf00      	nop
 8010920:	3710      	adds	r7, #16
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}

08010926 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010926:	b480      	push	{r7}
 8010928:	b085      	sub	sp, #20
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010934:	b2db      	uxtb	r3, r3
 8010936:	2b21      	cmp	r3, #33	; 0x21
 8010938:	d13e      	bne.n	80109b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	689b      	ldr	r3, [r3, #8]
 801093e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010942:	d114      	bne.n	801096e <UART_Transmit_IT+0x48>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	691b      	ldr	r3, [r3, #16]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d110      	bne.n	801096e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6a1b      	ldr	r3, [r3, #32]
 8010950:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	461a      	mov	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010960:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6a1b      	ldr	r3, [r3, #32]
 8010966:	1c9a      	adds	r2, r3, #2
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	621a      	str	r2, [r3, #32]
 801096c:	e008      	b.n	8010980 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6a1b      	ldr	r3, [r3, #32]
 8010972:	1c59      	adds	r1, r3, #1
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	6211      	str	r1, [r2, #32]
 8010978:	781a      	ldrb	r2, [r3, #0]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010984:	b29b      	uxth	r3, r3
 8010986:	3b01      	subs	r3, #1
 8010988:	b29b      	uxth	r3, r3
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	4619      	mov	r1, r3
 801098e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010990:	2b00      	cmp	r3, #0
 8010992:	d10f      	bne.n	80109b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	68da      	ldr	r2, [r3, #12]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80109a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	68da      	ldr	r2, [r3, #12]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80109b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80109b4:	2300      	movs	r3, #0
 80109b6:	e000      	b.n	80109ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80109b8:	2302      	movs	r3, #2
  }
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3714      	adds	r7, #20
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr

080109c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80109c6:	b580      	push	{r7, lr}
 80109c8:	b082      	sub	sp, #8
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	68da      	ldr	r2, [r3, #12]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80109dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2220      	movs	r2, #32
 80109e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f7ff fcd2 	bl	8010390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80109ec:	2300      	movs	r3, #0
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3708      	adds	r7, #8
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}

080109f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b08c      	sub	sp, #48	; 0x30
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	2b22      	cmp	r3, #34	; 0x22
 8010a08:	f040 80ab 	bne.w	8010b62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	689b      	ldr	r3, [r3, #8]
 8010a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a14:	d117      	bne.n	8010a46 <UART_Receive_IT+0x50>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	691b      	ldr	r3, [r3, #16]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d113      	bne.n	8010a46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a3e:	1c9a      	adds	r2, r3, #2
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	629a      	str	r2, [r3, #40]	; 0x28
 8010a44:	e026      	b.n	8010a94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	689b      	ldr	r3, [r3, #8]
 8010a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a58:	d007      	beq.n	8010a6a <UART_Receive_IT+0x74>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	689b      	ldr	r3, [r3, #8]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d10a      	bne.n	8010a78 <UART_Receive_IT+0x82>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	691b      	ldr	r3, [r3, #16]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d106      	bne.n	8010a78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	685b      	ldr	r3, [r3, #4]
 8010a70:	b2da      	uxtb	r2, r3
 8010a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a74:	701a      	strb	r2, [r3, #0]
 8010a76:	e008      	b.n	8010a8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	b2db      	uxtb	r3, r3
 8010a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a84:	b2da      	uxtb	r2, r3
 8010a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a8e:	1c5a      	adds	r2, r3, #1
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	3b01      	subs	r3, #1
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	687a      	ldr	r2, [r7, #4]
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d15a      	bne.n	8010b5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	68da      	ldr	r2, [r3, #12]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	f022 0220 	bic.w	r2, r2, #32
 8010ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68da      	ldr	r2, [r3, #12]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010ac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	695a      	ldr	r2, [r3, #20]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f022 0201 	bic.w	r2, r2, #1
 8010ad6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2220      	movs	r2, #32
 8010adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d135      	bne.n	8010b54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2200      	movs	r2, #0
 8010aec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	330c      	adds	r3, #12
 8010af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	e853 3f00 	ldrex	r3, [r3]
 8010afc:	613b      	str	r3, [r7, #16]
   return(result);
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	f023 0310 	bic.w	r3, r3, #16
 8010b04:	627b      	str	r3, [r7, #36]	; 0x24
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	330c      	adds	r3, #12
 8010b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b0e:	623a      	str	r2, [r7, #32]
 8010b10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b12:	69f9      	ldr	r1, [r7, #28]
 8010b14:	6a3a      	ldr	r2, [r7, #32]
 8010b16:	e841 2300 	strex	r3, r2, [r1]
 8010b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8010b1c:	69bb      	ldr	r3, [r7, #24]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d1e5      	bne.n	8010aee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f003 0310 	and.w	r3, r3, #16
 8010b2c:	2b10      	cmp	r3, #16
 8010b2e:	d10a      	bne.n	8010b46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010b30:	2300      	movs	r3, #0
 8010b32:	60fb      	str	r3, [r7, #12]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	60fb      	str	r3, [r7, #12]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	60fb      	str	r3, [r7, #12]
 8010b44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f7ff fc51 	bl	80103f4 <HAL_UARTEx_RxEventCallback>
 8010b52:	e002      	b.n	8010b5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f7ff fc2f 	bl	80103b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	e002      	b.n	8010b64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	e000      	b.n	8010b64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8010b62:	2302      	movs	r3, #2
  }
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3730      	adds	r7, #48	; 0x30
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b70:	b09f      	sub	sp, #124	; 0x7c
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	691b      	ldr	r3, [r3, #16]
 8010b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b82:	68d9      	ldr	r1, [r3, #12]
 8010b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	ea40 0301 	orr.w	r3, r0, r1
 8010b8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b90:	689a      	ldr	r2, [r3, #8]
 8010b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b94:	691b      	ldr	r3, [r3, #16]
 8010b96:	431a      	orrs	r2, r3
 8010b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b9a:	695b      	ldr	r3, [r3, #20]
 8010b9c:	431a      	orrs	r2, r3
 8010b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ba0:	69db      	ldr	r3, [r3, #28]
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8010ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8010bb0:	f021 010c 	bic.w	r1, r1, #12
 8010bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010bba:	430b      	orrs	r3, r1
 8010bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	695b      	ldr	r3, [r3, #20]
 8010bc4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bca:	6999      	ldr	r1, [r3, #24]
 8010bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bce:	681a      	ldr	r2, [r3, #0]
 8010bd0:	ea40 0301 	orr.w	r3, r0, r1
 8010bd4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	4bc5      	ldr	r3, [pc, #788]	; (8010ef0 <UART_SetConfig+0x384>)
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d004      	beq.n	8010bea <UART_SetConfig+0x7e>
 8010be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	4bc3      	ldr	r3, [pc, #780]	; (8010ef4 <UART_SetConfig+0x388>)
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d103      	bne.n	8010bf2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010bea:	f7fe f865 	bl	800ecb8 <HAL_RCC_GetPCLK2Freq>
 8010bee:	6778      	str	r0, [r7, #116]	; 0x74
 8010bf0:	e002      	b.n	8010bf8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010bf2:	f7fe f84d 	bl	800ec90 <HAL_RCC_GetPCLK1Freq>
 8010bf6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bfa:	69db      	ldr	r3, [r3, #28]
 8010bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c00:	f040 80b6 	bne.w	8010d70 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c06:	461c      	mov	r4, r3
 8010c08:	f04f 0500 	mov.w	r5, #0
 8010c0c:	4622      	mov	r2, r4
 8010c0e:	462b      	mov	r3, r5
 8010c10:	1891      	adds	r1, r2, r2
 8010c12:	6439      	str	r1, [r7, #64]	; 0x40
 8010c14:	415b      	adcs	r3, r3
 8010c16:	647b      	str	r3, [r7, #68]	; 0x44
 8010c18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010c1c:	1912      	adds	r2, r2, r4
 8010c1e:	eb45 0303 	adc.w	r3, r5, r3
 8010c22:	f04f 0000 	mov.w	r0, #0
 8010c26:	f04f 0100 	mov.w	r1, #0
 8010c2a:	00d9      	lsls	r1, r3, #3
 8010c2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010c30:	00d0      	lsls	r0, r2, #3
 8010c32:	4602      	mov	r2, r0
 8010c34:	460b      	mov	r3, r1
 8010c36:	1911      	adds	r1, r2, r4
 8010c38:	6639      	str	r1, [r7, #96]	; 0x60
 8010c3a:	416b      	adcs	r3, r5
 8010c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8010c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	461a      	mov	r2, r3
 8010c44:	f04f 0300 	mov.w	r3, #0
 8010c48:	1891      	adds	r1, r2, r2
 8010c4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8010c4c:	415b      	adcs	r3, r3
 8010c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010c54:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010c58:	f7f0 f82e 	bl	8000cb8 <__aeabi_uldivmod>
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	460b      	mov	r3, r1
 8010c60:	4ba5      	ldr	r3, [pc, #660]	; (8010ef8 <UART_SetConfig+0x38c>)
 8010c62:	fba3 2302 	umull	r2, r3, r3, r2
 8010c66:	095b      	lsrs	r3, r3, #5
 8010c68:	011e      	lsls	r6, r3, #4
 8010c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c6c:	461c      	mov	r4, r3
 8010c6e:	f04f 0500 	mov.w	r5, #0
 8010c72:	4622      	mov	r2, r4
 8010c74:	462b      	mov	r3, r5
 8010c76:	1891      	adds	r1, r2, r2
 8010c78:	6339      	str	r1, [r7, #48]	; 0x30
 8010c7a:	415b      	adcs	r3, r3
 8010c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8010c7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8010c82:	1912      	adds	r2, r2, r4
 8010c84:	eb45 0303 	adc.w	r3, r5, r3
 8010c88:	f04f 0000 	mov.w	r0, #0
 8010c8c:	f04f 0100 	mov.w	r1, #0
 8010c90:	00d9      	lsls	r1, r3, #3
 8010c92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010c96:	00d0      	lsls	r0, r2, #3
 8010c98:	4602      	mov	r2, r0
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	1911      	adds	r1, r2, r4
 8010c9e:	65b9      	str	r1, [r7, #88]	; 0x58
 8010ca0:	416b      	adcs	r3, r5
 8010ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	461a      	mov	r2, r3
 8010caa:	f04f 0300 	mov.w	r3, #0
 8010cae:	1891      	adds	r1, r2, r2
 8010cb0:	62b9      	str	r1, [r7, #40]	; 0x28
 8010cb2:	415b      	adcs	r3, r3
 8010cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010cba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8010cbe:	f7ef fffb 	bl	8000cb8 <__aeabi_uldivmod>
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	4b8c      	ldr	r3, [pc, #560]	; (8010ef8 <UART_SetConfig+0x38c>)
 8010cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8010ccc:	095b      	lsrs	r3, r3, #5
 8010cce:	2164      	movs	r1, #100	; 0x64
 8010cd0:	fb01 f303 	mul.w	r3, r1, r3
 8010cd4:	1ad3      	subs	r3, r2, r3
 8010cd6:	00db      	lsls	r3, r3, #3
 8010cd8:	3332      	adds	r3, #50	; 0x32
 8010cda:	4a87      	ldr	r2, [pc, #540]	; (8010ef8 <UART_SetConfig+0x38c>)
 8010cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8010ce0:	095b      	lsrs	r3, r3, #5
 8010ce2:	005b      	lsls	r3, r3, #1
 8010ce4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010ce8:	441e      	add	r6, r3
 8010cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010cec:	4618      	mov	r0, r3
 8010cee:	f04f 0100 	mov.w	r1, #0
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	1894      	adds	r4, r2, r2
 8010cf8:	623c      	str	r4, [r7, #32]
 8010cfa:	415b      	adcs	r3, r3
 8010cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8010cfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010d02:	1812      	adds	r2, r2, r0
 8010d04:	eb41 0303 	adc.w	r3, r1, r3
 8010d08:	f04f 0400 	mov.w	r4, #0
 8010d0c:	f04f 0500 	mov.w	r5, #0
 8010d10:	00dd      	lsls	r5, r3, #3
 8010d12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010d16:	00d4      	lsls	r4, r2, #3
 8010d18:	4622      	mov	r2, r4
 8010d1a:	462b      	mov	r3, r5
 8010d1c:	1814      	adds	r4, r2, r0
 8010d1e:	653c      	str	r4, [r7, #80]	; 0x50
 8010d20:	414b      	adcs	r3, r1
 8010d22:	657b      	str	r3, [r7, #84]	; 0x54
 8010d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	461a      	mov	r2, r3
 8010d2a:	f04f 0300 	mov.w	r3, #0
 8010d2e:	1891      	adds	r1, r2, r2
 8010d30:	61b9      	str	r1, [r7, #24]
 8010d32:	415b      	adcs	r3, r3
 8010d34:	61fb      	str	r3, [r7, #28]
 8010d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010d3a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010d3e:	f7ef ffbb 	bl	8000cb8 <__aeabi_uldivmod>
 8010d42:	4602      	mov	r2, r0
 8010d44:	460b      	mov	r3, r1
 8010d46:	4b6c      	ldr	r3, [pc, #432]	; (8010ef8 <UART_SetConfig+0x38c>)
 8010d48:	fba3 1302 	umull	r1, r3, r3, r2
 8010d4c:	095b      	lsrs	r3, r3, #5
 8010d4e:	2164      	movs	r1, #100	; 0x64
 8010d50:	fb01 f303 	mul.w	r3, r1, r3
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	00db      	lsls	r3, r3, #3
 8010d58:	3332      	adds	r3, #50	; 0x32
 8010d5a:	4a67      	ldr	r2, [pc, #412]	; (8010ef8 <UART_SetConfig+0x38c>)
 8010d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8010d60:	095b      	lsrs	r3, r3, #5
 8010d62:	f003 0207 	and.w	r2, r3, #7
 8010d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4432      	add	r2, r6
 8010d6c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010d6e:	e0b9      	b.n	8010ee4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d72:	461c      	mov	r4, r3
 8010d74:	f04f 0500 	mov.w	r5, #0
 8010d78:	4622      	mov	r2, r4
 8010d7a:	462b      	mov	r3, r5
 8010d7c:	1891      	adds	r1, r2, r2
 8010d7e:	6139      	str	r1, [r7, #16]
 8010d80:	415b      	adcs	r3, r3
 8010d82:	617b      	str	r3, [r7, #20]
 8010d84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010d88:	1912      	adds	r2, r2, r4
 8010d8a:	eb45 0303 	adc.w	r3, r5, r3
 8010d8e:	f04f 0000 	mov.w	r0, #0
 8010d92:	f04f 0100 	mov.w	r1, #0
 8010d96:	00d9      	lsls	r1, r3, #3
 8010d98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010d9c:	00d0      	lsls	r0, r2, #3
 8010d9e:	4602      	mov	r2, r0
 8010da0:	460b      	mov	r3, r1
 8010da2:	eb12 0804 	adds.w	r8, r2, r4
 8010da6:	eb43 0905 	adc.w	r9, r3, r5
 8010daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	4618      	mov	r0, r3
 8010db0:	f04f 0100 	mov.w	r1, #0
 8010db4:	f04f 0200 	mov.w	r2, #0
 8010db8:	f04f 0300 	mov.w	r3, #0
 8010dbc:	008b      	lsls	r3, r1, #2
 8010dbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010dc2:	0082      	lsls	r2, r0, #2
 8010dc4:	4640      	mov	r0, r8
 8010dc6:	4649      	mov	r1, r9
 8010dc8:	f7ef ff76 	bl	8000cb8 <__aeabi_uldivmod>
 8010dcc:	4602      	mov	r2, r0
 8010dce:	460b      	mov	r3, r1
 8010dd0:	4b49      	ldr	r3, [pc, #292]	; (8010ef8 <UART_SetConfig+0x38c>)
 8010dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8010dd6:	095b      	lsrs	r3, r3, #5
 8010dd8:	011e      	lsls	r6, r3, #4
 8010dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f04f 0100 	mov.w	r1, #0
 8010de2:	4602      	mov	r2, r0
 8010de4:	460b      	mov	r3, r1
 8010de6:	1894      	adds	r4, r2, r2
 8010de8:	60bc      	str	r4, [r7, #8]
 8010dea:	415b      	adcs	r3, r3
 8010dec:	60fb      	str	r3, [r7, #12]
 8010dee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010df2:	1812      	adds	r2, r2, r0
 8010df4:	eb41 0303 	adc.w	r3, r1, r3
 8010df8:	f04f 0400 	mov.w	r4, #0
 8010dfc:	f04f 0500 	mov.w	r5, #0
 8010e00:	00dd      	lsls	r5, r3, #3
 8010e02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010e06:	00d4      	lsls	r4, r2, #3
 8010e08:	4622      	mov	r2, r4
 8010e0a:	462b      	mov	r3, r5
 8010e0c:	1814      	adds	r4, r2, r0
 8010e0e:	64bc      	str	r4, [r7, #72]	; 0x48
 8010e10:	414b      	adcs	r3, r1
 8010e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f04f 0100 	mov.w	r1, #0
 8010e1e:	f04f 0200 	mov.w	r2, #0
 8010e22:	f04f 0300 	mov.w	r3, #0
 8010e26:	008b      	lsls	r3, r1, #2
 8010e28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010e2c:	0082      	lsls	r2, r0, #2
 8010e2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8010e32:	f7ef ff41 	bl	8000cb8 <__aeabi_uldivmod>
 8010e36:	4602      	mov	r2, r0
 8010e38:	460b      	mov	r3, r1
 8010e3a:	4b2f      	ldr	r3, [pc, #188]	; (8010ef8 <UART_SetConfig+0x38c>)
 8010e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8010e40:	095b      	lsrs	r3, r3, #5
 8010e42:	2164      	movs	r1, #100	; 0x64
 8010e44:	fb01 f303 	mul.w	r3, r1, r3
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	011b      	lsls	r3, r3, #4
 8010e4c:	3332      	adds	r3, #50	; 0x32
 8010e4e:	4a2a      	ldr	r2, [pc, #168]	; (8010ef8 <UART_SetConfig+0x38c>)
 8010e50:	fba2 2303 	umull	r2, r3, r2, r3
 8010e54:	095b      	lsrs	r3, r3, #5
 8010e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e5a:	441e      	add	r6, r3
 8010e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f04f 0100 	mov.w	r1, #0
 8010e64:	4602      	mov	r2, r0
 8010e66:	460b      	mov	r3, r1
 8010e68:	1894      	adds	r4, r2, r2
 8010e6a:	603c      	str	r4, [r7, #0]
 8010e6c:	415b      	adcs	r3, r3
 8010e6e:	607b      	str	r3, [r7, #4]
 8010e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e74:	1812      	adds	r2, r2, r0
 8010e76:	eb41 0303 	adc.w	r3, r1, r3
 8010e7a:	f04f 0400 	mov.w	r4, #0
 8010e7e:	f04f 0500 	mov.w	r5, #0
 8010e82:	00dd      	lsls	r5, r3, #3
 8010e84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010e88:	00d4      	lsls	r4, r2, #3
 8010e8a:	4622      	mov	r2, r4
 8010e8c:	462b      	mov	r3, r5
 8010e8e:	eb12 0a00 	adds.w	sl, r2, r0
 8010e92:	eb43 0b01 	adc.w	fp, r3, r1
 8010e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f04f 0100 	mov.w	r1, #0
 8010ea0:	f04f 0200 	mov.w	r2, #0
 8010ea4:	f04f 0300 	mov.w	r3, #0
 8010ea8:	008b      	lsls	r3, r1, #2
 8010eaa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010eae:	0082      	lsls	r2, r0, #2
 8010eb0:	4650      	mov	r0, sl
 8010eb2:	4659      	mov	r1, fp
 8010eb4:	f7ef ff00 	bl	8000cb8 <__aeabi_uldivmod>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	460b      	mov	r3, r1
 8010ebc:	4b0e      	ldr	r3, [pc, #56]	; (8010ef8 <UART_SetConfig+0x38c>)
 8010ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8010ec2:	095b      	lsrs	r3, r3, #5
 8010ec4:	2164      	movs	r1, #100	; 0x64
 8010ec6:	fb01 f303 	mul.w	r3, r1, r3
 8010eca:	1ad3      	subs	r3, r2, r3
 8010ecc:	011b      	lsls	r3, r3, #4
 8010ece:	3332      	adds	r3, #50	; 0x32
 8010ed0:	4a09      	ldr	r2, [pc, #36]	; (8010ef8 <UART_SetConfig+0x38c>)
 8010ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ed6:	095b      	lsrs	r3, r3, #5
 8010ed8:	f003 020f 	and.w	r2, r3, #15
 8010edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4432      	add	r2, r6
 8010ee2:	609a      	str	r2, [r3, #8]
}
 8010ee4:	bf00      	nop
 8010ee6:	377c      	adds	r7, #124	; 0x7c
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eee:	bf00      	nop
 8010ef0:	40011000 	.word	0x40011000
 8010ef4:	40011400 	.word	0x40011400
 8010ef8:	51eb851f 	.word	0x51eb851f

08010efc <atof>:
 8010efc:	2100      	movs	r1, #0
 8010efe:	f001 bd03 	b.w	8012908 <strtod>

08010f02 <atoi>:
 8010f02:	220a      	movs	r2, #10
 8010f04:	2100      	movs	r1, #0
 8010f06:	f001 bded 	b.w	8012ae4 <strtol>
	...

08010f0c <__errno>:
 8010f0c:	4b01      	ldr	r3, [pc, #4]	; (8010f14 <__errno+0x8>)
 8010f0e:	6818      	ldr	r0, [r3, #0]
 8010f10:	4770      	bx	lr
 8010f12:	bf00      	nop
 8010f14:	20000040 	.word	0x20000040

08010f18 <__libc_init_array>:
 8010f18:	b570      	push	{r4, r5, r6, lr}
 8010f1a:	4d0d      	ldr	r5, [pc, #52]	; (8010f50 <__libc_init_array+0x38>)
 8010f1c:	4c0d      	ldr	r4, [pc, #52]	; (8010f54 <__libc_init_array+0x3c>)
 8010f1e:	1b64      	subs	r4, r4, r5
 8010f20:	10a4      	asrs	r4, r4, #2
 8010f22:	2600      	movs	r6, #0
 8010f24:	42a6      	cmp	r6, r4
 8010f26:	d109      	bne.n	8010f3c <__libc_init_array+0x24>
 8010f28:	4d0b      	ldr	r5, [pc, #44]	; (8010f58 <__libc_init_array+0x40>)
 8010f2a:	4c0c      	ldr	r4, [pc, #48]	; (8010f5c <__libc_init_array+0x44>)
 8010f2c:	f004 fcb6 	bl	801589c <_init>
 8010f30:	1b64      	subs	r4, r4, r5
 8010f32:	10a4      	asrs	r4, r4, #2
 8010f34:	2600      	movs	r6, #0
 8010f36:	42a6      	cmp	r6, r4
 8010f38:	d105      	bne.n	8010f46 <__libc_init_array+0x2e>
 8010f3a:	bd70      	pop	{r4, r5, r6, pc}
 8010f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f40:	4798      	blx	r3
 8010f42:	3601      	adds	r6, #1
 8010f44:	e7ee      	b.n	8010f24 <__libc_init_array+0xc>
 8010f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f4a:	4798      	blx	r3
 8010f4c:	3601      	adds	r6, #1
 8010f4e:	e7f2      	b.n	8010f36 <__libc_init_array+0x1e>
 8010f50:	08029918 	.word	0x08029918
 8010f54:	08029918 	.word	0x08029918
 8010f58:	08029918 	.word	0x08029918
 8010f5c:	0802991c 	.word	0x0802991c

08010f60 <memset>:
 8010f60:	4402      	add	r2, r0
 8010f62:	4603      	mov	r3, r0
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d100      	bne.n	8010f6a <memset+0xa>
 8010f68:	4770      	bx	lr
 8010f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8010f6e:	e7f9      	b.n	8010f64 <memset+0x4>

08010f70 <__cvt>:
 8010f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f74:	ec55 4b10 	vmov	r4, r5, d0
 8010f78:	2d00      	cmp	r5, #0
 8010f7a:	460e      	mov	r6, r1
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	462b      	mov	r3, r5
 8010f80:	bfbb      	ittet	lt
 8010f82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010f86:	461d      	movlt	r5, r3
 8010f88:	2300      	movge	r3, #0
 8010f8a:	232d      	movlt	r3, #45	; 0x2d
 8010f8c:	700b      	strb	r3, [r1, #0]
 8010f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010f94:	4691      	mov	r9, r2
 8010f96:	f023 0820 	bic.w	r8, r3, #32
 8010f9a:	bfbc      	itt	lt
 8010f9c:	4622      	movlt	r2, r4
 8010f9e:	4614      	movlt	r4, r2
 8010fa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010fa4:	d005      	beq.n	8010fb2 <__cvt+0x42>
 8010fa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010faa:	d100      	bne.n	8010fae <__cvt+0x3e>
 8010fac:	3601      	adds	r6, #1
 8010fae:	2102      	movs	r1, #2
 8010fb0:	e000      	b.n	8010fb4 <__cvt+0x44>
 8010fb2:	2103      	movs	r1, #3
 8010fb4:	ab03      	add	r3, sp, #12
 8010fb6:	9301      	str	r3, [sp, #4]
 8010fb8:	ab02      	add	r3, sp, #8
 8010fba:	9300      	str	r3, [sp, #0]
 8010fbc:	ec45 4b10 	vmov	d0, r4, r5
 8010fc0:	4653      	mov	r3, sl
 8010fc2:	4632      	mov	r2, r6
 8010fc4:	f001 fe44 	bl	8012c50 <_dtoa_r>
 8010fc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010fcc:	4607      	mov	r7, r0
 8010fce:	d102      	bne.n	8010fd6 <__cvt+0x66>
 8010fd0:	f019 0f01 	tst.w	r9, #1
 8010fd4:	d022      	beq.n	801101c <__cvt+0xac>
 8010fd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010fda:	eb07 0906 	add.w	r9, r7, r6
 8010fde:	d110      	bne.n	8011002 <__cvt+0x92>
 8010fe0:	783b      	ldrb	r3, [r7, #0]
 8010fe2:	2b30      	cmp	r3, #48	; 0x30
 8010fe4:	d10a      	bne.n	8010ffc <__cvt+0x8c>
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	2300      	movs	r3, #0
 8010fea:	4620      	mov	r0, r4
 8010fec:	4629      	mov	r1, r5
 8010fee:	f7ef fd83 	bl	8000af8 <__aeabi_dcmpeq>
 8010ff2:	b918      	cbnz	r0, 8010ffc <__cvt+0x8c>
 8010ff4:	f1c6 0601 	rsb	r6, r6, #1
 8010ff8:	f8ca 6000 	str.w	r6, [sl]
 8010ffc:	f8da 3000 	ldr.w	r3, [sl]
 8011000:	4499      	add	r9, r3
 8011002:	2200      	movs	r2, #0
 8011004:	2300      	movs	r3, #0
 8011006:	4620      	mov	r0, r4
 8011008:	4629      	mov	r1, r5
 801100a:	f7ef fd75 	bl	8000af8 <__aeabi_dcmpeq>
 801100e:	b108      	cbz	r0, 8011014 <__cvt+0xa4>
 8011010:	f8cd 900c 	str.w	r9, [sp, #12]
 8011014:	2230      	movs	r2, #48	; 0x30
 8011016:	9b03      	ldr	r3, [sp, #12]
 8011018:	454b      	cmp	r3, r9
 801101a:	d307      	bcc.n	801102c <__cvt+0xbc>
 801101c:	9b03      	ldr	r3, [sp, #12]
 801101e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011020:	1bdb      	subs	r3, r3, r7
 8011022:	4638      	mov	r0, r7
 8011024:	6013      	str	r3, [r2, #0]
 8011026:	b004      	add	sp, #16
 8011028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801102c:	1c59      	adds	r1, r3, #1
 801102e:	9103      	str	r1, [sp, #12]
 8011030:	701a      	strb	r2, [r3, #0]
 8011032:	e7f0      	b.n	8011016 <__cvt+0xa6>

08011034 <__exponent>:
 8011034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011036:	4603      	mov	r3, r0
 8011038:	2900      	cmp	r1, #0
 801103a:	bfb8      	it	lt
 801103c:	4249      	neglt	r1, r1
 801103e:	f803 2b02 	strb.w	r2, [r3], #2
 8011042:	bfb4      	ite	lt
 8011044:	222d      	movlt	r2, #45	; 0x2d
 8011046:	222b      	movge	r2, #43	; 0x2b
 8011048:	2909      	cmp	r1, #9
 801104a:	7042      	strb	r2, [r0, #1]
 801104c:	dd2a      	ble.n	80110a4 <__exponent+0x70>
 801104e:	f10d 0407 	add.w	r4, sp, #7
 8011052:	46a4      	mov	ip, r4
 8011054:	270a      	movs	r7, #10
 8011056:	46a6      	mov	lr, r4
 8011058:	460a      	mov	r2, r1
 801105a:	fb91 f6f7 	sdiv	r6, r1, r7
 801105e:	fb07 1516 	mls	r5, r7, r6, r1
 8011062:	3530      	adds	r5, #48	; 0x30
 8011064:	2a63      	cmp	r2, #99	; 0x63
 8011066:	f104 34ff 	add.w	r4, r4, #4294967295
 801106a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801106e:	4631      	mov	r1, r6
 8011070:	dcf1      	bgt.n	8011056 <__exponent+0x22>
 8011072:	3130      	adds	r1, #48	; 0x30
 8011074:	f1ae 0502 	sub.w	r5, lr, #2
 8011078:	f804 1c01 	strb.w	r1, [r4, #-1]
 801107c:	1c44      	adds	r4, r0, #1
 801107e:	4629      	mov	r1, r5
 8011080:	4561      	cmp	r1, ip
 8011082:	d30a      	bcc.n	801109a <__exponent+0x66>
 8011084:	f10d 0209 	add.w	r2, sp, #9
 8011088:	eba2 020e 	sub.w	r2, r2, lr
 801108c:	4565      	cmp	r5, ip
 801108e:	bf88      	it	hi
 8011090:	2200      	movhi	r2, #0
 8011092:	4413      	add	r3, r2
 8011094:	1a18      	subs	r0, r3, r0
 8011096:	b003      	add	sp, #12
 8011098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801109a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801109e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80110a2:	e7ed      	b.n	8011080 <__exponent+0x4c>
 80110a4:	2330      	movs	r3, #48	; 0x30
 80110a6:	3130      	adds	r1, #48	; 0x30
 80110a8:	7083      	strb	r3, [r0, #2]
 80110aa:	70c1      	strb	r1, [r0, #3]
 80110ac:	1d03      	adds	r3, r0, #4
 80110ae:	e7f1      	b.n	8011094 <__exponent+0x60>

080110b0 <_printf_float>:
 80110b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b4:	ed2d 8b02 	vpush	{d8}
 80110b8:	b08d      	sub	sp, #52	; 0x34
 80110ba:	460c      	mov	r4, r1
 80110bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80110c0:	4616      	mov	r6, r2
 80110c2:	461f      	mov	r7, r3
 80110c4:	4605      	mov	r5, r0
 80110c6:	f002 ff31 	bl	8013f2c <_localeconv_r>
 80110ca:	f8d0 a000 	ldr.w	sl, [r0]
 80110ce:	4650      	mov	r0, sl
 80110d0:	f7ef f890 	bl	80001f4 <strlen>
 80110d4:	2300      	movs	r3, #0
 80110d6:	930a      	str	r3, [sp, #40]	; 0x28
 80110d8:	6823      	ldr	r3, [r4, #0]
 80110da:	9305      	str	r3, [sp, #20]
 80110dc:	f8d8 3000 	ldr.w	r3, [r8]
 80110e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80110e4:	3307      	adds	r3, #7
 80110e6:	f023 0307 	bic.w	r3, r3, #7
 80110ea:	f103 0208 	add.w	r2, r3, #8
 80110ee:	f8c8 2000 	str.w	r2, [r8]
 80110f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80110fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80110fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011102:	9307      	str	r3, [sp, #28]
 8011104:	f8cd 8018 	str.w	r8, [sp, #24]
 8011108:	ee08 0a10 	vmov	s16, r0
 801110c:	4b9f      	ldr	r3, [pc, #636]	; (801138c <_printf_float+0x2dc>)
 801110e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011112:	f04f 32ff 	mov.w	r2, #4294967295
 8011116:	f7ef fd21 	bl	8000b5c <__aeabi_dcmpun>
 801111a:	bb88      	cbnz	r0, 8011180 <_printf_float+0xd0>
 801111c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011120:	4b9a      	ldr	r3, [pc, #616]	; (801138c <_printf_float+0x2dc>)
 8011122:	f04f 32ff 	mov.w	r2, #4294967295
 8011126:	f7ef fcfb 	bl	8000b20 <__aeabi_dcmple>
 801112a:	bb48      	cbnz	r0, 8011180 <_printf_float+0xd0>
 801112c:	2200      	movs	r2, #0
 801112e:	2300      	movs	r3, #0
 8011130:	4640      	mov	r0, r8
 8011132:	4649      	mov	r1, r9
 8011134:	f7ef fcea 	bl	8000b0c <__aeabi_dcmplt>
 8011138:	b110      	cbz	r0, 8011140 <_printf_float+0x90>
 801113a:	232d      	movs	r3, #45	; 0x2d
 801113c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011140:	4b93      	ldr	r3, [pc, #588]	; (8011390 <_printf_float+0x2e0>)
 8011142:	4894      	ldr	r0, [pc, #592]	; (8011394 <_printf_float+0x2e4>)
 8011144:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011148:	bf94      	ite	ls
 801114a:	4698      	movls	r8, r3
 801114c:	4680      	movhi	r8, r0
 801114e:	2303      	movs	r3, #3
 8011150:	6123      	str	r3, [r4, #16]
 8011152:	9b05      	ldr	r3, [sp, #20]
 8011154:	f023 0204 	bic.w	r2, r3, #4
 8011158:	6022      	str	r2, [r4, #0]
 801115a:	f04f 0900 	mov.w	r9, #0
 801115e:	9700      	str	r7, [sp, #0]
 8011160:	4633      	mov	r3, r6
 8011162:	aa0b      	add	r2, sp, #44	; 0x2c
 8011164:	4621      	mov	r1, r4
 8011166:	4628      	mov	r0, r5
 8011168:	f000 f9d8 	bl	801151c <_printf_common>
 801116c:	3001      	adds	r0, #1
 801116e:	f040 8090 	bne.w	8011292 <_printf_float+0x1e2>
 8011172:	f04f 30ff 	mov.w	r0, #4294967295
 8011176:	b00d      	add	sp, #52	; 0x34
 8011178:	ecbd 8b02 	vpop	{d8}
 801117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011180:	4642      	mov	r2, r8
 8011182:	464b      	mov	r3, r9
 8011184:	4640      	mov	r0, r8
 8011186:	4649      	mov	r1, r9
 8011188:	f7ef fce8 	bl	8000b5c <__aeabi_dcmpun>
 801118c:	b140      	cbz	r0, 80111a0 <_printf_float+0xf0>
 801118e:	464b      	mov	r3, r9
 8011190:	2b00      	cmp	r3, #0
 8011192:	bfbc      	itt	lt
 8011194:	232d      	movlt	r3, #45	; 0x2d
 8011196:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801119a:	487f      	ldr	r0, [pc, #508]	; (8011398 <_printf_float+0x2e8>)
 801119c:	4b7f      	ldr	r3, [pc, #508]	; (801139c <_printf_float+0x2ec>)
 801119e:	e7d1      	b.n	8011144 <_printf_float+0x94>
 80111a0:	6863      	ldr	r3, [r4, #4]
 80111a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80111a6:	9206      	str	r2, [sp, #24]
 80111a8:	1c5a      	adds	r2, r3, #1
 80111aa:	d13f      	bne.n	801122c <_printf_float+0x17c>
 80111ac:	2306      	movs	r3, #6
 80111ae:	6063      	str	r3, [r4, #4]
 80111b0:	9b05      	ldr	r3, [sp, #20]
 80111b2:	6861      	ldr	r1, [r4, #4]
 80111b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80111b8:	2300      	movs	r3, #0
 80111ba:	9303      	str	r3, [sp, #12]
 80111bc:	ab0a      	add	r3, sp, #40	; 0x28
 80111be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80111c2:	ab09      	add	r3, sp, #36	; 0x24
 80111c4:	ec49 8b10 	vmov	d0, r8, r9
 80111c8:	9300      	str	r3, [sp, #0]
 80111ca:	6022      	str	r2, [r4, #0]
 80111cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80111d0:	4628      	mov	r0, r5
 80111d2:	f7ff fecd 	bl	8010f70 <__cvt>
 80111d6:	9b06      	ldr	r3, [sp, #24]
 80111d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111da:	2b47      	cmp	r3, #71	; 0x47
 80111dc:	4680      	mov	r8, r0
 80111de:	d108      	bne.n	80111f2 <_printf_float+0x142>
 80111e0:	1cc8      	adds	r0, r1, #3
 80111e2:	db02      	blt.n	80111ea <_printf_float+0x13a>
 80111e4:	6863      	ldr	r3, [r4, #4]
 80111e6:	4299      	cmp	r1, r3
 80111e8:	dd41      	ble.n	801126e <_printf_float+0x1be>
 80111ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80111ee:	fa5f fb8b 	uxtb.w	fp, fp
 80111f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80111f6:	d820      	bhi.n	801123a <_printf_float+0x18a>
 80111f8:	3901      	subs	r1, #1
 80111fa:	465a      	mov	r2, fp
 80111fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011200:	9109      	str	r1, [sp, #36]	; 0x24
 8011202:	f7ff ff17 	bl	8011034 <__exponent>
 8011206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011208:	1813      	adds	r3, r2, r0
 801120a:	2a01      	cmp	r2, #1
 801120c:	4681      	mov	r9, r0
 801120e:	6123      	str	r3, [r4, #16]
 8011210:	dc02      	bgt.n	8011218 <_printf_float+0x168>
 8011212:	6822      	ldr	r2, [r4, #0]
 8011214:	07d2      	lsls	r2, r2, #31
 8011216:	d501      	bpl.n	801121c <_printf_float+0x16c>
 8011218:	3301      	adds	r3, #1
 801121a:	6123      	str	r3, [r4, #16]
 801121c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011220:	2b00      	cmp	r3, #0
 8011222:	d09c      	beq.n	801115e <_printf_float+0xae>
 8011224:	232d      	movs	r3, #45	; 0x2d
 8011226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801122a:	e798      	b.n	801115e <_printf_float+0xae>
 801122c:	9a06      	ldr	r2, [sp, #24]
 801122e:	2a47      	cmp	r2, #71	; 0x47
 8011230:	d1be      	bne.n	80111b0 <_printf_float+0x100>
 8011232:	2b00      	cmp	r3, #0
 8011234:	d1bc      	bne.n	80111b0 <_printf_float+0x100>
 8011236:	2301      	movs	r3, #1
 8011238:	e7b9      	b.n	80111ae <_printf_float+0xfe>
 801123a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801123e:	d118      	bne.n	8011272 <_printf_float+0x1c2>
 8011240:	2900      	cmp	r1, #0
 8011242:	6863      	ldr	r3, [r4, #4]
 8011244:	dd0b      	ble.n	801125e <_printf_float+0x1ae>
 8011246:	6121      	str	r1, [r4, #16]
 8011248:	b913      	cbnz	r3, 8011250 <_printf_float+0x1a0>
 801124a:	6822      	ldr	r2, [r4, #0]
 801124c:	07d0      	lsls	r0, r2, #31
 801124e:	d502      	bpl.n	8011256 <_printf_float+0x1a6>
 8011250:	3301      	adds	r3, #1
 8011252:	440b      	add	r3, r1
 8011254:	6123      	str	r3, [r4, #16]
 8011256:	65a1      	str	r1, [r4, #88]	; 0x58
 8011258:	f04f 0900 	mov.w	r9, #0
 801125c:	e7de      	b.n	801121c <_printf_float+0x16c>
 801125e:	b913      	cbnz	r3, 8011266 <_printf_float+0x1b6>
 8011260:	6822      	ldr	r2, [r4, #0]
 8011262:	07d2      	lsls	r2, r2, #31
 8011264:	d501      	bpl.n	801126a <_printf_float+0x1ba>
 8011266:	3302      	adds	r3, #2
 8011268:	e7f4      	b.n	8011254 <_printf_float+0x1a4>
 801126a:	2301      	movs	r3, #1
 801126c:	e7f2      	b.n	8011254 <_printf_float+0x1a4>
 801126e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011274:	4299      	cmp	r1, r3
 8011276:	db05      	blt.n	8011284 <_printf_float+0x1d4>
 8011278:	6823      	ldr	r3, [r4, #0]
 801127a:	6121      	str	r1, [r4, #16]
 801127c:	07d8      	lsls	r0, r3, #31
 801127e:	d5ea      	bpl.n	8011256 <_printf_float+0x1a6>
 8011280:	1c4b      	adds	r3, r1, #1
 8011282:	e7e7      	b.n	8011254 <_printf_float+0x1a4>
 8011284:	2900      	cmp	r1, #0
 8011286:	bfd4      	ite	le
 8011288:	f1c1 0202 	rsble	r2, r1, #2
 801128c:	2201      	movgt	r2, #1
 801128e:	4413      	add	r3, r2
 8011290:	e7e0      	b.n	8011254 <_printf_float+0x1a4>
 8011292:	6823      	ldr	r3, [r4, #0]
 8011294:	055a      	lsls	r2, r3, #21
 8011296:	d407      	bmi.n	80112a8 <_printf_float+0x1f8>
 8011298:	6923      	ldr	r3, [r4, #16]
 801129a:	4642      	mov	r2, r8
 801129c:	4631      	mov	r1, r6
 801129e:	4628      	mov	r0, r5
 80112a0:	47b8      	blx	r7
 80112a2:	3001      	adds	r0, #1
 80112a4:	d12c      	bne.n	8011300 <_printf_float+0x250>
 80112a6:	e764      	b.n	8011172 <_printf_float+0xc2>
 80112a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80112ac:	f240 80e0 	bls.w	8011470 <_printf_float+0x3c0>
 80112b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80112b4:	2200      	movs	r2, #0
 80112b6:	2300      	movs	r3, #0
 80112b8:	f7ef fc1e 	bl	8000af8 <__aeabi_dcmpeq>
 80112bc:	2800      	cmp	r0, #0
 80112be:	d034      	beq.n	801132a <_printf_float+0x27a>
 80112c0:	4a37      	ldr	r2, [pc, #220]	; (80113a0 <_printf_float+0x2f0>)
 80112c2:	2301      	movs	r3, #1
 80112c4:	4631      	mov	r1, r6
 80112c6:	4628      	mov	r0, r5
 80112c8:	47b8      	blx	r7
 80112ca:	3001      	adds	r0, #1
 80112cc:	f43f af51 	beq.w	8011172 <_printf_float+0xc2>
 80112d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80112d4:	429a      	cmp	r2, r3
 80112d6:	db02      	blt.n	80112de <_printf_float+0x22e>
 80112d8:	6823      	ldr	r3, [r4, #0]
 80112da:	07d8      	lsls	r0, r3, #31
 80112dc:	d510      	bpl.n	8011300 <_printf_float+0x250>
 80112de:	ee18 3a10 	vmov	r3, s16
 80112e2:	4652      	mov	r2, sl
 80112e4:	4631      	mov	r1, r6
 80112e6:	4628      	mov	r0, r5
 80112e8:	47b8      	blx	r7
 80112ea:	3001      	adds	r0, #1
 80112ec:	f43f af41 	beq.w	8011172 <_printf_float+0xc2>
 80112f0:	f04f 0800 	mov.w	r8, #0
 80112f4:	f104 091a 	add.w	r9, r4, #26
 80112f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112fa:	3b01      	subs	r3, #1
 80112fc:	4543      	cmp	r3, r8
 80112fe:	dc09      	bgt.n	8011314 <_printf_float+0x264>
 8011300:	6823      	ldr	r3, [r4, #0]
 8011302:	079b      	lsls	r3, r3, #30
 8011304:	f100 8105 	bmi.w	8011512 <_printf_float+0x462>
 8011308:	68e0      	ldr	r0, [r4, #12]
 801130a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801130c:	4298      	cmp	r0, r3
 801130e:	bfb8      	it	lt
 8011310:	4618      	movlt	r0, r3
 8011312:	e730      	b.n	8011176 <_printf_float+0xc6>
 8011314:	2301      	movs	r3, #1
 8011316:	464a      	mov	r2, r9
 8011318:	4631      	mov	r1, r6
 801131a:	4628      	mov	r0, r5
 801131c:	47b8      	blx	r7
 801131e:	3001      	adds	r0, #1
 8011320:	f43f af27 	beq.w	8011172 <_printf_float+0xc2>
 8011324:	f108 0801 	add.w	r8, r8, #1
 8011328:	e7e6      	b.n	80112f8 <_printf_float+0x248>
 801132a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801132c:	2b00      	cmp	r3, #0
 801132e:	dc39      	bgt.n	80113a4 <_printf_float+0x2f4>
 8011330:	4a1b      	ldr	r2, [pc, #108]	; (80113a0 <_printf_float+0x2f0>)
 8011332:	2301      	movs	r3, #1
 8011334:	4631      	mov	r1, r6
 8011336:	4628      	mov	r0, r5
 8011338:	47b8      	blx	r7
 801133a:	3001      	adds	r0, #1
 801133c:	f43f af19 	beq.w	8011172 <_printf_float+0xc2>
 8011340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011344:	4313      	orrs	r3, r2
 8011346:	d102      	bne.n	801134e <_printf_float+0x29e>
 8011348:	6823      	ldr	r3, [r4, #0]
 801134a:	07d9      	lsls	r1, r3, #31
 801134c:	d5d8      	bpl.n	8011300 <_printf_float+0x250>
 801134e:	ee18 3a10 	vmov	r3, s16
 8011352:	4652      	mov	r2, sl
 8011354:	4631      	mov	r1, r6
 8011356:	4628      	mov	r0, r5
 8011358:	47b8      	blx	r7
 801135a:	3001      	adds	r0, #1
 801135c:	f43f af09 	beq.w	8011172 <_printf_float+0xc2>
 8011360:	f04f 0900 	mov.w	r9, #0
 8011364:	f104 0a1a 	add.w	sl, r4, #26
 8011368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801136a:	425b      	negs	r3, r3
 801136c:	454b      	cmp	r3, r9
 801136e:	dc01      	bgt.n	8011374 <_printf_float+0x2c4>
 8011370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011372:	e792      	b.n	801129a <_printf_float+0x1ea>
 8011374:	2301      	movs	r3, #1
 8011376:	4652      	mov	r2, sl
 8011378:	4631      	mov	r1, r6
 801137a:	4628      	mov	r0, r5
 801137c:	47b8      	blx	r7
 801137e:	3001      	adds	r0, #1
 8011380:	f43f aef7 	beq.w	8011172 <_printf_float+0xc2>
 8011384:	f109 0901 	add.w	r9, r9, #1
 8011388:	e7ee      	b.n	8011368 <_printf_float+0x2b8>
 801138a:	bf00      	nop
 801138c:	7fefffff 	.word	0x7fefffff
 8011390:	08029400 	.word	0x08029400
 8011394:	08029404 	.word	0x08029404
 8011398:	0802940c 	.word	0x0802940c
 801139c:	08029408 	.word	0x08029408
 80113a0:	08029410 	.word	0x08029410
 80113a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80113a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80113a8:	429a      	cmp	r2, r3
 80113aa:	bfa8      	it	ge
 80113ac:	461a      	movge	r2, r3
 80113ae:	2a00      	cmp	r2, #0
 80113b0:	4691      	mov	r9, r2
 80113b2:	dc37      	bgt.n	8011424 <_printf_float+0x374>
 80113b4:	f04f 0b00 	mov.w	fp, #0
 80113b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113bc:	f104 021a 	add.w	r2, r4, #26
 80113c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80113c2:	9305      	str	r3, [sp, #20]
 80113c4:	eba3 0309 	sub.w	r3, r3, r9
 80113c8:	455b      	cmp	r3, fp
 80113ca:	dc33      	bgt.n	8011434 <_printf_float+0x384>
 80113cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80113d0:	429a      	cmp	r2, r3
 80113d2:	db3b      	blt.n	801144c <_printf_float+0x39c>
 80113d4:	6823      	ldr	r3, [r4, #0]
 80113d6:	07da      	lsls	r2, r3, #31
 80113d8:	d438      	bmi.n	801144c <_printf_float+0x39c>
 80113da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80113dc:	9b05      	ldr	r3, [sp, #20]
 80113de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80113e0:	1ad3      	subs	r3, r2, r3
 80113e2:	eba2 0901 	sub.w	r9, r2, r1
 80113e6:	4599      	cmp	r9, r3
 80113e8:	bfa8      	it	ge
 80113ea:	4699      	movge	r9, r3
 80113ec:	f1b9 0f00 	cmp.w	r9, #0
 80113f0:	dc35      	bgt.n	801145e <_printf_float+0x3ae>
 80113f2:	f04f 0800 	mov.w	r8, #0
 80113f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113fa:	f104 0a1a 	add.w	sl, r4, #26
 80113fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011402:	1a9b      	subs	r3, r3, r2
 8011404:	eba3 0309 	sub.w	r3, r3, r9
 8011408:	4543      	cmp	r3, r8
 801140a:	f77f af79 	ble.w	8011300 <_printf_float+0x250>
 801140e:	2301      	movs	r3, #1
 8011410:	4652      	mov	r2, sl
 8011412:	4631      	mov	r1, r6
 8011414:	4628      	mov	r0, r5
 8011416:	47b8      	blx	r7
 8011418:	3001      	adds	r0, #1
 801141a:	f43f aeaa 	beq.w	8011172 <_printf_float+0xc2>
 801141e:	f108 0801 	add.w	r8, r8, #1
 8011422:	e7ec      	b.n	80113fe <_printf_float+0x34e>
 8011424:	4613      	mov	r3, r2
 8011426:	4631      	mov	r1, r6
 8011428:	4642      	mov	r2, r8
 801142a:	4628      	mov	r0, r5
 801142c:	47b8      	blx	r7
 801142e:	3001      	adds	r0, #1
 8011430:	d1c0      	bne.n	80113b4 <_printf_float+0x304>
 8011432:	e69e      	b.n	8011172 <_printf_float+0xc2>
 8011434:	2301      	movs	r3, #1
 8011436:	4631      	mov	r1, r6
 8011438:	4628      	mov	r0, r5
 801143a:	9205      	str	r2, [sp, #20]
 801143c:	47b8      	blx	r7
 801143e:	3001      	adds	r0, #1
 8011440:	f43f ae97 	beq.w	8011172 <_printf_float+0xc2>
 8011444:	9a05      	ldr	r2, [sp, #20]
 8011446:	f10b 0b01 	add.w	fp, fp, #1
 801144a:	e7b9      	b.n	80113c0 <_printf_float+0x310>
 801144c:	ee18 3a10 	vmov	r3, s16
 8011450:	4652      	mov	r2, sl
 8011452:	4631      	mov	r1, r6
 8011454:	4628      	mov	r0, r5
 8011456:	47b8      	blx	r7
 8011458:	3001      	adds	r0, #1
 801145a:	d1be      	bne.n	80113da <_printf_float+0x32a>
 801145c:	e689      	b.n	8011172 <_printf_float+0xc2>
 801145e:	9a05      	ldr	r2, [sp, #20]
 8011460:	464b      	mov	r3, r9
 8011462:	4442      	add	r2, r8
 8011464:	4631      	mov	r1, r6
 8011466:	4628      	mov	r0, r5
 8011468:	47b8      	blx	r7
 801146a:	3001      	adds	r0, #1
 801146c:	d1c1      	bne.n	80113f2 <_printf_float+0x342>
 801146e:	e680      	b.n	8011172 <_printf_float+0xc2>
 8011470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011472:	2a01      	cmp	r2, #1
 8011474:	dc01      	bgt.n	801147a <_printf_float+0x3ca>
 8011476:	07db      	lsls	r3, r3, #31
 8011478:	d538      	bpl.n	80114ec <_printf_float+0x43c>
 801147a:	2301      	movs	r3, #1
 801147c:	4642      	mov	r2, r8
 801147e:	4631      	mov	r1, r6
 8011480:	4628      	mov	r0, r5
 8011482:	47b8      	blx	r7
 8011484:	3001      	adds	r0, #1
 8011486:	f43f ae74 	beq.w	8011172 <_printf_float+0xc2>
 801148a:	ee18 3a10 	vmov	r3, s16
 801148e:	4652      	mov	r2, sl
 8011490:	4631      	mov	r1, r6
 8011492:	4628      	mov	r0, r5
 8011494:	47b8      	blx	r7
 8011496:	3001      	adds	r0, #1
 8011498:	f43f ae6b 	beq.w	8011172 <_printf_float+0xc2>
 801149c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80114a0:	2200      	movs	r2, #0
 80114a2:	2300      	movs	r3, #0
 80114a4:	f7ef fb28 	bl	8000af8 <__aeabi_dcmpeq>
 80114a8:	b9d8      	cbnz	r0, 80114e2 <_printf_float+0x432>
 80114aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114ac:	f108 0201 	add.w	r2, r8, #1
 80114b0:	3b01      	subs	r3, #1
 80114b2:	4631      	mov	r1, r6
 80114b4:	4628      	mov	r0, r5
 80114b6:	47b8      	blx	r7
 80114b8:	3001      	adds	r0, #1
 80114ba:	d10e      	bne.n	80114da <_printf_float+0x42a>
 80114bc:	e659      	b.n	8011172 <_printf_float+0xc2>
 80114be:	2301      	movs	r3, #1
 80114c0:	4652      	mov	r2, sl
 80114c2:	4631      	mov	r1, r6
 80114c4:	4628      	mov	r0, r5
 80114c6:	47b8      	blx	r7
 80114c8:	3001      	adds	r0, #1
 80114ca:	f43f ae52 	beq.w	8011172 <_printf_float+0xc2>
 80114ce:	f108 0801 	add.w	r8, r8, #1
 80114d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114d4:	3b01      	subs	r3, #1
 80114d6:	4543      	cmp	r3, r8
 80114d8:	dcf1      	bgt.n	80114be <_printf_float+0x40e>
 80114da:	464b      	mov	r3, r9
 80114dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80114e0:	e6dc      	b.n	801129c <_printf_float+0x1ec>
 80114e2:	f04f 0800 	mov.w	r8, #0
 80114e6:	f104 0a1a 	add.w	sl, r4, #26
 80114ea:	e7f2      	b.n	80114d2 <_printf_float+0x422>
 80114ec:	2301      	movs	r3, #1
 80114ee:	4642      	mov	r2, r8
 80114f0:	e7df      	b.n	80114b2 <_printf_float+0x402>
 80114f2:	2301      	movs	r3, #1
 80114f4:	464a      	mov	r2, r9
 80114f6:	4631      	mov	r1, r6
 80114f8:	4628      	mov	r0, r5
 80114fa:	47b8      	blx	r7
 80114fc:	3001      	adds	r0, #1
 80114fe:	f43f ae38 	beq.w	8011172 <_printf_float+0xc2>
 8011502:	f108 0801 	add.w	r8, r8, #1
 8011506:	68e3      	ldr	r3, [r4, #12]
 8011508:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801150a:	1a5b      	subs	r3, r3, r1
 801150c:	4543      	cmp	r3, r8
 801150e:	dcf0      	bgt.n	80114f2 <_printf_float+0x442>
 8011510:	e6fa      	b.n	8011308 <_printf_float+0x258>
 8011512:	f04f 0800 	mov.w	r8, #0
 8011516:	f104 0919 	add.w	r9, r4, #25
 801151a:	e7f4      	b.n	8011506 <_printf_float+0x456>

0801151c <_printf_common>:
 801151c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011520:	4616      	mov	r6, r2
 8011522:	4699      	mov	r9, r3
 8011524:	688a      	ldr	r2, [r1, #8]
 8011526:	690b      	ldr	r3, [r1, #16]
 8011528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801152c:	4293      	cmp	r3, r2
 801152e:	bfb8      	it	lt
 8011530:	4613      	movlt	r3, r2
 8011532:	6033      	str	r3, [r6, #0]
 8011534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011538:	4607      	mov	r7, r0
 801153a:	460c      	mov	r4, r1
 801153c:	b10a      	cbz	r2, 8011542 <_printf_common+0x26>
 801153e:	3301      	adds	r3, #1
 8011540:	6033      	str	r3, [r6, #0]
 8011542:	6823      	ldr	r3, [r4, #0]
 8011544:	0699      	lsls	r1, r3, #26
 8011546:	bf42      	ittt	mi
 8011548:	6833      	ldrmi	r3, [r6, #0]
 801154a:	3302      	addmi	r3, #2
 801154c:	6033      	strmi	r3, [r6, #0]
 801154e:	6825      	ldr	r5, [r4, #0]
 8011550:	f015 0506 	ands.w	r5, r5, #6
 8011554:	d106      	bne.n	8011564 <_printf_common+0x48>
 8011556:	f104 0a19 	add.w	sl, r4, #25
 801155a:	68e3      	ldr	r3, [r4, #12]
 801155c:	6832      	ldr	r2, [r6, #0]
 801155e:	1a9b      	subs	r3, r3, r2
 8011560:	42ab      	cmp	r3, r5
 8011562:	dc26      	bgt.n	80115b2 <_printf_common+0x96>
 8011564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011568:	1e13      	subs	r3, r2, #0
 801156a:	6822      	ldr	r2, [r4, #0]
 801156c:	bf18      	it	ne
 801156e:	2301      	movne	r3, #1
 8011570:	0692      	lsls	r2, r2, #26
 8011572:	d42b      	bmi.n	80115cc <_printf_common+0xb0>
 8011574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011578:	4649      	mov	r1, r9
 801157a:	4638      	mov	r0, r7
 801157c:	47c0      	blx	r8
 801157e:	3001      	adds	r0, #1
 8011580:	d01e      	beq.n	80115c0 <_printf_common+0xa4>
 8011582:	6823      	ldr	r3, [r4, #0]
 8011584:	68e5      	ldr	r5, [r4, #12]
 8011586:	6832      	ldr	r2, [r6, #0]
 8011588:	f003 0306 	and.w	r3, r3, #6
 801158c:	2b04      	cmp	r3, #4
 801158e:	bf08      	it	eq
 8011590:	1aad      	subeq	r5, r5, r2
 8011592:	68a3      	ldr	r3, [r4, #8]
 8011594:	6922      	ldr	r2, [r4, #16]
 8011596:	bf0c      	ite	eq
 8011598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801159c:	2500      	movne	r5, #0
 801159e:	4293      	cmp	r3, r2
 80115a0:	bfc4      	itt	gt
 80115a2:	1a9b      	subgt	r3, r3, r2
 80115a4:	18ed      	addgt	r5, r5, r3
 80115a6:	2600      	movs	r6, #0
 80115a8:	341a      	adds	r4, #26
 80115aa:	42b5      	cmp	r5, r6
 80115ac:	d11a      	bne.n	80115e4 <_printf_common+0xc8>
 80115ae:	2000      	movs	r0, #0
 80115b0:	e008      	b.n	80115c4 <_printf_common+0xa8>
 80115b2:	2301      	movs	r3, #1
 80115b4:	4652      	mov	r2, sl
 80115b6:	4649      	mov	r1, r9
 80115b8:	4638      	mov	r0, r7
 80115ba:	47c0      	blx	r8
 80115bc:	3001      	adds	r0, #1
 80115be:	d103      	bne.n	80115c8 <_printf_common+0xac>
 80115c0:	f04f 30ff 	mov.w	r0, #4294967295
 80115c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115c8:	3501      	adds	r5, #1
 80115ca:	e7c6      	b.n	801155a <_printf_common+0x3e>
 80115cc:	18e1      	adds	r1, r4, r3
 80115ce:	1c5a      	adds	r2, r3, #1
 80115d0:	2030      	movs	r0, #48	; 0x30
 80115d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80115d6:	4422      	add	r2, r4
 80115d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80115dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80115e0:	3302      	adds	r3, #2
 80115e2:	e7c7      	b.n	8011574 <_printf_common+0x58>
 80115e4:	2301      	movs	r3, #1
 80115e6:	4622      	mov	r2, r4
 80115e8:	4649      	mov	r1, r9
 80115ea:	4638      	mov	r0, r7
 80115ec:	47c0      	blx	r8
 80115ee:	3001      	adds	r0, #1
 80115f0:	d0e6      	beq.n	80115c0 <_printf_common+0xa4>
 80115f2:	3601      	adds	r6, #1
 80115f4:	e7d9      	b.n	80115aa <_printf_common+0x8e>
	...

080115f8 <_printf_i>:
 80115f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115fc:	460c      	mov	r4, r1
 80115fe:	4691      	mov	r9, r2
 8011600:	7e27      	ldrb	r7, [r4, #24]
 8011602:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011604:	2f78      	cmp	r7, #120	; 0x78
 8011606:	4680      	mov	r8, r0
 8011608:	469a      	mov	sl, r3
 801160a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801160e:	d807      	bhi.n	8011620 <_printf_i+0x28>
 8011610:	2f62      	cmp	r7, #98	; 0x62
 8011612:	d80a      	bhi.n	801162a <_printf_i+0x32>
 8011614:	2f00      	cmp	r7, #0
 8011616:	f000 80d8 	beq.w	80117ca <_printf_i+0x1d2>
 801161a:	2f58      	cmp	r7, #88	; 0x58
 801161c:	f000 80a3 	beq.w	8011766 <_printf_i+0x16e>
 8011620:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011628:	e03a      	b.n	80116a0 <_printf_i+0xa8>
 801162a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801162e:	2b15      	cmp	r3, #21
 8011630:	d8f6      	bhi.n	8011620 <_printf_i+0x28>
 8011632:	a001      	add	r0, pc, #4	; (adr r0, 8011638 <_printf_i+0x40>)
 8011634:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011638:	08011691 	.word	0x08011691
 801163c:	080116a5 	.word	0x080116a5
 8011640:	08011621 	.word	0x08011621
 8011644:	08011621 	.word	0x08011621
 8011648:	08011621 	.word	0x08011621
 801164c:	08011621 	.word	0x08011621
 8011650:	080116a5 	.word	0x080116a5
 8011654:	08011621 	.word	0x08011621
 8011658:	08011621 	.word	0x08011621
 801165c:	08011621 	.word	0x08011621
 8011660:	08011621 	.word	0x08011621
 8011664:	080117b1 	.word	0x080117b1
 8011668:	080116d5 	.word	0x080116d5
 801166c:	08011793 	.word	0x08011793
 8011670:	08011621 	.word	0x08011621
 8011674:	08011621 	.word	0x08011621
 8011678:	080117d3 	.word	0x080117d3
 801167c:	08011621 	.word	0x08011621
 8011680:	080116d5 	.word	0x080116d5
 8011684:	08011621 	.word	0x08011621
 8011688:	08011621 	.word	0x08011621
 801168c:	0801179b 	.word	0x0801179b
 8011690:	680b      	ldr	r3, [r1, #0]
 8011692:	1d1a      	adds	r2, r3, #4
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	600a      	str	r2, [r1, #0]
 8011698:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801169c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80116a0:	2301      	movs	r3, #1
 80116a2:	e0a3      	b.n	80117ec <_printf_i+0x1f4>
 80116a4:	6825      	ldr	r5, [r4, #0]
 80116a6:	6808      	ldr	r0, [r1, #0]
 80116a8:	062e      	lsls	r6, r5, #24
 80116aa:	f100 0304 	add.w	r3, r0, #4
 80116ae:	d50a      	bpl.n	80116c6 <_printf_i+0xce>
 80116b0:	6805      	ldr	r5, [r0, #0]
 80116b2:	600b      	str	r3, [r1, #0]
 80116b4:	2d00      	cmp	r5, #0
 80116b6:	da03      	bge.n	80116c0 <_printf_i+0xc8>
 80116b8:	232d      	movs	r3, #45	; 0x2d
 80116ba:	426d      	negs	r5, r5
 80116bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116c0:	485e      	ldr	r0, [pc, #376]	; (801183c <_printf_i+0x244>)
 80116c2:	230a      	movs	r3, #10
 80116c4:	e019      	b.n	80116fa <_printf_i+0x102>
 80116c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80116ca:	6805      	ldr	r5, [r0, #0]
 80116cc:	600b      	str	r3, [r1, #0]
 80116ce:	bf18      	it	ne
 80116d0:	b22d      	sxthne	r5, r5
 80116d2:	e7ef      	b.n	80116b4 <_printf_i+0xbc>
 80116d4:	680b      	ldr	r3, [r1, #0]
 80116d6:	6825      	ldr	r5, [r4, #0]
 80116d8:	1d18      	adds	r0, r3, #4
 80116da:	6008      	str	r0, [r1, #0]
 80116dc:	0628      	lsls	r0, r5, #24
 80116de:	d501      	bpl.n	80116e4 <_printf_i+0xec>
 80116e0:	681d      	ldr	r5, [r3, #0]
 80116e2:	e002      	b.n	80116ea <_printf_i+0xf2>
 80116e4:	0669      	lsls	r1, r5, #25
 80116e6:	d5fb      	bpl.n	80116e0 <_printf_i+0xe8>
 80116e8:	881d      	ldrh	r5, [r3, #0]
 80116ea:	4854      	ldr	r0, [pc, #336]	; (801183c <_printf_i+0x244>)
 80116ec:	2f6f      	cmp	r7, #111	; 0x6f
 80116ee:	bf0c      	ite	eq
 80116f0:	2308      	moveq	r3, #8
 80116f2:	230a      	movne	r3, #10
 80116f4:	2100      	movs	r1, #0
 80116f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80116fa:	6866      	ldr	r6, [r4, #4]
 80116fc:	60a6      	str	r6, [r4, #8]
 80116fe:	2e00      	cmp	r6, #0
 8011700:	bfa2      	ittt	ge
 8011702:	6821      	ldrge	r1, [r4, #0]
 8011704:	f021 0104 	bicge.w	r1, r1, #4
 8011708:	6021      	strge	r1, [r4, #0]
 801170a:	b90d      	cbnz	r5, 8011710 <_printf_i+0x118>
 801170c:	2e00      	cmp	r6, #0
 801170e:	d04d      	beq.n	80117ac <_printf_i+0x1b4>
 8011710:	4616      	mov	r6, r2
 8011712:	fbb5 f1f3 	udiv	r1, r5, r3
 8011716:	fb03 5711 	mls	r7, r3, r1, r5
 801171a:	5dc7      	ldrb	r7, [r0, r7]
 801171c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011720:	462f      	mov	r7, r5
 8011722:	42bb      	cmp	r3, r7
 8011724:	460d      	mov	r5, r1
 8011726:	d9f4      	bls.n	8011712 <_printf_i+0x11a>
 8011728:	2b08      	cmp	r3, #8
 801172a:	d10b      	bne.n	8011744 <_printf_i+0x14c>
 801172c:	6823      	ldr	r3, [r4, #0]
 801172e:	07df      	lsls	r7, r3, #31
 8011730:	d508      	bpl.n	8011744 <_printf_i+0x14c>
 8011732:	6923      	ldr	r3, [r4, #16]
 8011734:	6861      	ldr	r1, [r4, #4]
 8011736:	4299      	cmp	r1, r3
 8011738:	bfde      	ittt	le
 801173a:	2330      	movle	r3, #48	; 0x30
 801173c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011740:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011744:	1b92      	subs	r2, r2, r6
 8011746:	6122      	str	r2, [r4, #16]
 8011748:	f8cd a000 	str.w	sl, [sp]
 801174c:	464b      	mov	r3, r9
 801174e:	aa03      	add	r2, sp, #12
 8011750:	4621      	mov	r1, r4
 8011752:	4640      	mov	r0, r8
 8011754:	f7ff fee2 	bl	801151c <_printf_common>
 8011758:	3001      	adds	r0, #1
 801175a:	d14c      	bne.n	80117f6 <_printf_i+0x1fe>
 801175c:	f04f 30ff 	mov.w	r0, #4294967295
 8011760:	b004      	add	sp, #16
 8011762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011766:	4835      	ldr	r0, [pc, #212]	; (801183c <_printf_i+0x244>)
 8011768:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801176c:	6823      	ldr	r3, [r4, #0]
 801176e:	680e      	ldr	r6, [r1, #0]
 8011770:	061f      	lsls	r7, r3, #24
 8011772:	f856 5b04 	ldr.w	r5, [r6], #4
 8011776:	600e      	str	r6, [r1, #0]
 8011778:	d514      	bpl.n	80117a4 <_printf_i+0x1ac>
 801177a:	07d9      	lsls	r1, r3, #31
 801177c:	bf44      	itt	mi
 801177e:	f043 0320 	orrmi.w	r3, r3, #32
 8011782:	6023      	strmi	r3, [r4, #0]
 8011784:	b91d      	cbnz	r5, 801178e <_printf_i+0x196>
 8011786:	6823      	ldr	r3, [r4, #0]
 8011788:	f023 0320 	bic.w	r3, r3, #32
 801178c:	6023      	str	r3, [r4, #0]
 801178e:	2310      	movs	r3, #16
 8011790:	e7b0      	b.n	80116f4 <_printf_i+0xfc>
 8011792:	6823      	ldr	r3, [r4, #0]
 8011794:	f043 0320 	orr.w	r3, r3, #32
 8011798:	6023      	str	r3, [r4, #0]
 801179a:	2378      	movs	r3, #120	; 0x78
 801179c:	4828      	ldr	r0, [pc, #160]	; (8011840 <_printf_i+0x248>)
 801179e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80117a2:	e7e3      	b.n	801176c <_printf_i+0x174>
 80117a4:	065e      	lsls	r6, r3, #25
 80117a6:	bf48      	it	mi
 80117a8:	b2ad      	uxthmi	r5, r5
 80117aa:	e7e6      	b.n	801177a <_printf_i+0x182>
 80117ac:	4616      	mov	r6, r2
 80117ae:	e7bb      	b.n	8011728 <_printf_i+0x130>
 80117b0:	680b      	ldr	r3, [r1, #0]
 80117b2:	6826      	ldr	r6, [r4, #0]
 80117b4:	6960      	ldr	r0, [r4, #20]
 80117b6:	1d1d      	adds	r5, r3, #4
 80117b8:	600d      	str	r5, [r1, #0]
 80117ba:	0635      	lsls	r5, r6, #24
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	d501      	bpl.n	80117c4 <_printf_i+0x1cc>
 80117c0:	6018      	str	r0, [r3, #0]
 80117c2:	e002      	b.n	80117ca <_printf_i+0x1d2>
 80117c4:	0671      	lsls	r1, r6, #25
 80117c6:	d5fb      	bpl.n	80117c0 <_printf_i+0x1c8>
 80117c8:	8018      	strh	r0, [r3, #0]
 80117ca:	2300      	movs	r3, #0
 80117cc:	6123      	str	r3, [r4, #16]
 80117ce:	4616      	mov	r6, r2
 80117d0:	e7ba      	b.n	8011748 <_printf_i+0x150>
 80117d2:	680b      	ldr	r3, [r1, #0]
 80117d4:	1d1a      	adds	r2, r3, #4
 80117d6:	600a      	str	r2, [r1, #0]
 80117d8:	681e      	ldr	r6, [r3, #0]
 80117da:	6862      	ldr	r2, [r4, #4]
 80117dc:	2100      	movs	r1, #0
 80117de:	4630      	mov	r0, r6
 80117e0:	f7ee fd16 	bl	8000210 <memchr>
 80117e4:	b108      	cbz	r0, 80117ea <_printf_i+0x1f2>
 80117e6:	1b80      	subs	r0, r0, r6
 80117e8:	6060      	str	r0, [r4, #4]
 80117ea:	6863      	ldr	r3, [r4, #4]
 80117ec:	6123      	str	r3, [r4, #16]
 80117ee:	2300      	movs	r3, #0
 80117f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117f4:	e7a8      	b.n	8011748 <_printf_i+0x150>
 80117f6:	6923      	ldr	r3, [r4, #16]
 80117f8:	4632      	mov	r2, r6
 80117fa:	4649      	mov	r1, r9
 80117fc:	4640      	mov	r0, r8
 80117fe:	47d0      	blx	sl
 8011800:	3001      	adds	r0, #1
 8011802:	d0ab      	beq.n	801175c <_printf_i+0x164>
 8011804:	6823      	ldr	r3, [r4, #0]
 8011806:	079b      	lsls	r3, r3, #30
 8011808:	d413      	bmi.n	8011832 <_printf_i+0x23a>
 801180a:	68e0      	ldr	r0, [r4, #12]
 801180c:	9b03      	ldr	r3, [sp, #12]
 801180e:	4298      	cmp	r0, r3
 8011810:	bfb8      	it	lt
 8011812:	4618      	movlt	r0, r3
 8011814:	e7a4      	b.n	8011760 <_printf_i+0x168>
 8011816:	2301      	movs	r3, #1
 8011818:	4632      	mov	r2, r6
 801181a:	4649      	mov	r1, r9
 801181c:	4640      	mov	r0, r8
 801181e:	47d0      	blx	sl
 8011820:	3001      	adds	r0, #1
 8011822:	d09b      	beq.n	801175c <_printf_i+0x164>
 8011824:	3501      	adds	r5, #1
 8011826:	68e3      	ldr	r3, [r4, #12]
 8011828:	9903      	ldr	r1, [sp, #12]
 801182a:	1a5b      	subs	r3, r3, r1
 801182c:	42ab      	cmp	r3, r5
 801182e:	dcf2      	bgt.n	8011816 <_printf_i+0x21e>
 8011830:	e7eb      	b.n	801180a <_printf_i+0x212>
 8011832:	2500      	movs	r5, #0
 8011834:	f104 0619 	add.w	r6, r4, #25
 8011838:	e7f5      	b.n	8011826 <_printf_i+0x22e>
 801183a:	bf00      	nop
 801183c:	08029412 	.word	0x08029412
 8011840:	08029423 	.word	0x08029423

08011844 <_scanf_float>:
 8011844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011848:	b087      	sub	sp, #28
 801184a:	4617      	mov	r7, r2
 801184c:	9303      	str	r3, [sp, #12]
 801184e:	688b      	ldr	r3, [r1, #8]
 8011850:	1e5a      	subs	r2, r3, #1
 8011852:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011856:	bf83      	ittte	hi
 8011858:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801185c:	195b      	addhi	r3, r3, r5
 801185e:	9302      	strhi	r3, [sp, #8]
 8011860:	2300      	movls	r3, #0
 8011862:	bf86      	itte	hi
 8011864:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011868:	608b      	strhi	r3, [r1, #8]
 801186a:	9302      	strls	r3, [sp, #8]
 801186c:	680b      	ldr	r3, [r1, #0]
 801186e:	468b      	mov	fp, r1
 8011870:	2500      	movs	r5, #0
 8011872:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011876:	f84b 3b1c 	str.w	r3, [fp], #28
 801187a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801187e:	4680      	mov	r8, r0
 8011880:	460c      	mov	r4, r1
 8011882:	465e      	mov	r6, fp
 8011884:	46aa      	mov	sl, r5
 8011886:	46a9      	mov	r9, r5
 8011888:	9501      	str	r5, [sp, #4]
 801188a:	68a2      	ldr	r2, [r4, #8]
 801188c:	b152      	cbz	r2, 80118a4 <_scanf_float+0x60>
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	2b4e      	cmp	r3, #78	; 0x4e
 8011894:	d864      	bhi.n	8011960 <_scanf_float+0x11c>
 8011896:	2b40      	cmp	r3, #64	; 0x40
 8011898:	d83c      	bhi.n	8011914 <_scanf_float+0xd0>
 801189a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801189e:	b2c8      	uxtb	r0, r1
 80118a0:	280e      	cmp	r0, #14
 80118a2:	d93a      	bls.n	801191a <_scanf_float+0xd6>
 80118a4:	f1b9 0f00 	cmp.w	r9, #0
 80118a8:	d003      	beq.n	80118b2 <_scanf_float+0x6e>
 80118aa:	6823      	ldr	r3, [r4, #0]
 80118ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80118b0:	6023      	str	r3, [r4, #0]
 80118b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80118b6:	f1ba 0f01 	cmp.w	sl, #1
 80118ba:	f200 8113 	bhi.w	8011ae4 <_scanf_float+0x2a0>
 80118be:	455e      	cmp	r6, fp
 80118c0:	f200 8105 	bhi.w	8011ace <_scanf_float+0x28a>
 80118c4:	2501      	movs	r5, #1
 80118c6:	4628      	mov	r0, r5
 80118c8:	b007      	add	sp, #28
 80118ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80118d2:	2a0d      	cmp	r2, #13
 80118d4:	d8e6      	bhi.n	80118a4 <_scanf_float+0x60>
 80118d6:	a101      	add	r1, pc, #4	; (adr r1, 80118dc <_scanf_float+0x98>)
 80118d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80118dc:	08011a1b 	.word	0x08011a1b
 80118e0:	080118a5 	.word	0x080118a5
 80118e4:	080118a5 	.word	0x080118a5
 80118e8:	080118a5 	.word	0x080118a5
 80118ec:	08011a7b 	.word	0x08011a7b
 80118f0:	08011a53 	.word	0x08011a53
 80118f4:	080118a5 	.word	0x080118a5
 80118f8:	080118a5 	.word	0x080118a5
 80118fc:	08011a29 	.word	0x08011a29
 8011900:	080118a5 	.word	0x080118a5
 8011904:	080118a5 	.word	0x080118a5
 8011908:	080118a5 	.word	0x080118a5
 801190c:	080118a5 	.word	0x080118a5
 8011910:	080119e1 	.word	0x080119e1
 8011914:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011918:	e7db      	b.n	80118d2 <_scanf_float+0x8e>
 801191a:	290e      	cmp	r1, #14
 801191c:	d8c2      	bhi.n	80118a4 <_scanf_float+0x60>
 801191e:	a001      	add	r0, pc, #4	; (adr r0, 8011924 <_scanf_float+0xe0>)
 8011920:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011924:	080119d3 	.word	0x080119d3
 8011928:	080118a5 	.word	0x080118a5
 801192c:	080119d3 	.word	0x080119d3
 8011930:	08011a67 	.word	0x08011a67
 8011934:	080118a5 	.word	0x080118a5
 8011938:	08011981 	.word	0x08011981
 801193c:	080119bd 	.word	0x080119bd
 8011940:	080119bd 	.word	0x080119bd
 8011944:	080119bd 	.word	0x080119bd
 8011948:	080119bd 	.word	0x080119bd
 801194c:	080119bd 	.word	0x080119bd
 8011950:	080119bd 	.word	0x080119bd
 8011954:	080119bd 	.word	0x080119bd
 8011958:	080119bd 	.word	0x080119bd
 801195c:	080119bd 	.word	0x080119bd
 8011960:	2b6e      	cmp	r3, #110	; 0x6e
 8011962:	d809      	bhi.n	8011978 <_scanf_float+0x134>
 8011964:	2b60      	cmp	r3, #96	; 0x60
 8011966:	d8b2      	bhi.n	80118ce <_scanf_float+0x8a>
 8011968:	2b54      	cmp	r3, #84	; 0x54
 801196a:	d077      	beq.n	8011a5c <_scanf_float+0x218>
 801196c:	2b59      	cmp	r3, #89	; 0x59
 801196e:	d199      	bne.n	80118a4 <_scanf_float+0x60>
 8011970:	2d07      	cmp	r5, #7
 8011972:	d197      	bne.n	80118a4 <_scanf_float+0x60>
 8011974:	2508      	movs	r5, #8
 8011976:	e029      	b.n	80119cc <_scanf_float+0x188>
 8011978:	2b74      	cmp	r3, #116	; 0x74
 801197a:	d06f      	beq.n	8011a5c <_scanf_float+0x218>
 801197c:	2b79      	cmp	r3, #121	; 0x79
 801197e:	e7f6      	b.n	801196e <_scanf_float+0x12a>
 8011980:	6821      	ldr	r1, [r4, #0]
 8011982:	05c8      	lsls	r0, r1, #23
 8011984:	d51a      	bpl.n	80119bc <_scanf_float+0x178>
 8011986:	9b02      	ldr	r3, [sp, #8]
 8011988:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801198c:	6021      	str	r1, [r4, #0]
 801198e:	f109 0901 	add.w	r9, r9, #1
 8011992:	b11b      	cbz	r3, 801199c <_scanf_float+0x158>
 8011994:	3b01      	subs	r3, #1
 8011996:	3201      	adds	r2, #1
 8011998:	9302      	str	r3, [sp, #8]
 801199a:	60a2      	str	r2, [r4, #8]
 801199c:	68a3      	ldr	r3, [r4, #8]
 801199e:	3b01      	subs	r3, #1
 80119a0:	60a3      	str	r3, [r4, #8]
 80119a2:	6923      	ldr	r3, [r4, #16]
 80119a4:	3301      	adds	r3, #1
 80119a6:	6123      	str	r3, [r4, #16]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	3b01      	subs	r3, #1
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	607b      	str	r3, [r7, #4]
 80119b0:	f340 8084 	ble.w	8011abc <_scanf_float+0x278>
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	3301      	adds	r3, #1
 80119b8:	603b      	str	r3, [r7, #0]
 80119ba:	e766      	b.n	801188a <_scanf_float+0x46>
 80119bc:	eb1a 0f05 	cmn.w	sl, r5
 80119c0:	f47f af70 	bne.w	80118a4 <_scanf_float+0x60>
 80119c4:	6822      	ldr	r2, [r4, #0]
 80119c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80119ca:	6022      	str	r2, [r4, #0]
 80119cc:	f806 3b01 	strb.w	r3, [r6], #1
 80119d0:	e7e4      	b.n	801199c <_scanf_float+0x158>
 80119d2:	6822      	ldr	r2, [r4, #0]
 80119d4:	0610      	lsls	r0, r2, #24
 80119d6:	f57f af65 	bpl.w	80118a4 <_scanf_float+0x60>
 80119da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80119de:	e7f4      	b.n	80119ca <_scanf_float+0x186>
 80119e0:	f1ba 0f00 	cmp.w	sl, #0
 80119e4:	d10e      	bne.n	8011a04 <_scanf_float+0x1c0>
 80119e6:	f1b9 0f00 	cmp.w	r9, #0
 80119ea:	d10e      	bne.n	8011a0a <_scanf_float+0x1c6>
 80119ec:	6822      	ldr	r2, [r4, #0]
 80119ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80119f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80119f6:	d108      	bne.n	8011a0a <_scanf_float+0x1c6>
 80119f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80119fc:	6022      	str	r2, [r4, #0]
 80119fe:	f04f 0a01 	mov.w	sl, #1
 8011a02:	e7e3      	b.n	80119cc <_scanf_float+0x188>
 8011a04:	f1ba 0f02 	cmp.w	sl, #2
 8011a08:	d055      	beq.n	8011ab6 <_scanf_float+0x272>
 8011a0a:	2d01      	cmp	r5, #1
 8011a0c:	d002      	beq.n	8011a14 <_scanf_float+0x1d0>
 8011a0e:	2d04      	cmp	r5, #4
 8011a10:	f47f af48 	bne.w	80118a4 <_scanf_float+0x60>
 8011a14:	3501      	adds	r5, #1
 8011a16:	b2ed      	uxtb	r5, r5
 8011a18:	e7d8      	b.n	80119cc <_scanf_float+0x188>
 8011a1a:	f1ba 0f01 	cmp.w	sl, #1
 8011a1e:	f47f af41 	bne.w	80118a4 <_scanf_float+0x60>
 8011a22:	f04f 0a02 	mov.w	sl, #2
 8011a26:	e7d1      	b.n	80119cc <_scanf_float+0x188>
 8011a28:	b97d      	cbnz	r5, 8011a4a <_scanf_float+0x206>
 8011a2a:	f1b9 0f00 	cmp.w	r9, #0
 8011a2e:	f47f af3c 	bne.w	80118aa <_scanf_float+0x66>
 8011a32:	6822      	ldr	r2, [r4, #0]
 8011a34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011a38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011a3c:	f47f af39 	bne.w	80118b2 <_scanf_float+0x6e>
 8011a40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011a44:	6022      	str	r2, [r4, #0]
 8011a46:	2501      	movs	r5, #1
 8011a48:	e7c0      	b.n	80119cc <_scanf_float+0x188>
 8011a4a:	2d03      	cmp	r5, #3
 8011a4c:	d0e2      	beq.n	8011a14 <_scanf_float+0x1d0>
 8011a4e:	2d05      	cmp	r5, #5
 8011a50:	e7de      	b.n	8011a10 <_scanf_float+0x1cc>
 8011a52:	2d02      	cmp	r5, #2
 8011a54:	f47f af26 	bne.w	80118a4 <_scanf_float+0x60>
 8011a58:	2503      	movs	r5, #3
 8011a5a:	e7b7      	b.n	80119cc <_scanf_float+0x188>
 8011a5c:	2d06      	cmp	r5, #6
 8011a5e:	f47f af21 	bne.w	80118a4 <_scanf_float+0x60>
 8011a62:	2507      	movs	r5, #7
 8011a64:	e7b2      	b.n	80119cc <_scanf_float+0x188>
 8011a66:	6822      	ldr	r2, [r4, #0]
 8011a68:	0591      	lsls	r1, r2, #22
 8011a6a:	f57f af1b 	bpl.w	80118a4 <_scanf_float+0x60>
 8011a6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011a72:	6022      	str	r2, [r4, #0]
 8011a74:	f8cd 9004 	str.w	r9, [sp, #4]
 8011a78:	e7a8      	b.n	80119cc <_scanf_float+0x188>
 8011a7a:	6822      	ldr	r2, [r4, #0]
 8011a7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011a80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011a84:	d006      	beq.n	8011a94 <_scanf_float+0x250>
 8011a86:	0550      	lsls	r0, r2, #21
 8011a88:	f57f af0c 	bpl.w	80118a4 <_scanf_float+0x60>
 8011a8c:	f1b9 0f00 	cmp.w	r9, #0
 8011a90:	f43f af0f 	beq.w	80118b2 <_scanf_float+0x6e>
 8011a94:	0591      	lsls	r1, r2, #22
 8011a96:	bf58      	it	pl
 8011a98:	9901      	ldrpl	r1, [sp, #4]
 8011a9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011a9e:	bf58      	it	pl
 8011aa0:	eba9 0101 	subpl.w	r1, r9, r1
 8011aa4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011aa8:	bf58      	it	pl
 8011aaa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011aae:	6022      	str	r2, [r4, #0]
 8011ab0:	f04f 0900 	mov.w	r9, #0
 8011ab4:	e78a      	b.n	80119cc <_scanf_float+0x188>
 8011ab6:	f04f 0a03 	mov.w	sl, #3
 8011aba:	e787      	b.n	80119cc <_scanf_float+0x188>
 8011abc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011ac0:	4639      	mov	r1, r7
 8011ac2:	4640      	mov	r0, r8
 8011ac4:	4798      	blx	r3
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	f43f aedf 	beq.w	801188a <_scanf_float+0x46>
 8011acc:	e6ea      	b.n	80118a4 <_scanf_float+0x60>
 8011ace:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011ad2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011ad6:	463a      	mov	r2, r7
 8011ad8:	4640      	mov	r0, r8
 8011ada:	4798      	blx	r3
 8011adc:	6923      	ldr	r3, [r4, #16]
 8011ade:	3b01      	subs	r3, #1
 8011ae0:	6123      	str	r3, [r4, #16]
 8011ae2:	e6ec      	b.n	80118be <_scanf_float+0x7a>
 8011ae4:	1e6b      	subs	r3, r5, #1
 8011ae6:	2b06      	cmp	r3, #6
 8011ae8:	d825      	bhi.n	8011b36 <_scanf_float+0x2f2>
 8011aea:	2d02      	cmp	r5, #2
 8011aec:	d836      	bhi.n	8011b5c <_scanf_float+0x318>
 8011aee:	455e      	cmp	r6, fp
 8011af0:	f67f aee8 	bls.w	80118c4 <_scanf_float+0x80>
 8011af4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011af8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011afc:	463a      	mov	r2, r7
 8011afe:	4640      	mov	r0, r8
 8011b00:	4798      	blx	r3
 8011b02:	6923      	ldr	r3, [r4, #16]
 8011b04:	3b01      	subs	r3, #1
 8011b06:	6123      	str	r3, [r4, #16]
 8011b08:	e7f1      	b.n	8011aee <_scanf_float+0x2aa>
 8011b0a:	9802      	ldr	r0, [sp, #8]
 8011b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011b10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011b14:	9002      	str	r0, [sp, #8]
 8011b16:	463a      	mov	r2, r7
 8011b18:	4640      	mov	r0, r8
 8011b1a:	4798      	blx	r3
 8011b1c:	6923      	ldr	r3, [r4, #16]
 8011b1e:	3b01      	subs	r3, #1
 8011b20:	6123      	str	r3, [r4, #16]
 8011b22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b26:	fa5f fa8a 	uxtb.w	sl, sl
 8011b2a:	f1ba 0f02 	cmp.w	sl, #2
 8011b2e:	d1ec      	bne.n	8011b0a <_scanf_float+0x2c6>
 8011b30:	3d03      	subs	r5, #3
 8011b32:	b2ed      	uxtb	r5, r5
 8011b34:	1b76      	subs	r6, r6, r5
 8011b36:	6823      	ldr	r3, [r4, #0]
 8011b38:	05da      	lsls	r2, r3, #23
 8011b3a:	d52f      	bpl.n	8011b9c <_scanf_float+0x358>
 8011b3c:	055b      	lsls	r3, r3, #21
 8011b3e:	d510      	bpl.n	8011b62 <_scanf_float+0x31e>
 8011b40:	455e      	cmp	r6, fp
 8011b42:	f67f aebf 	bls.w	80118c4 <_scanf_float+0x80>
 8011b46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011b4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b4e:	463a      	mov	r2, r7
 8011b50:	4640      	mov	r0, r8
 8011b52:	4798      	blx	r3
 8011b54:	6923      	ldr	r3, [r4, #16]
 8011b56:	3b01      	subs	r3, #1
 8011b58:	6123      	str	r3, [r4, #16]
 8011b5a:	e7f1      	b.n	8011b40 <_scanf_float+0x2fc>
 8011b5c:	46aa      	mov	sl, r5
 8011b5e:	9602      	str	r6, [sp, #8]
 8011b60:	e7df      	b.n	8011b22 <_scanf_float+0x2de>
 8011b62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011b66:	6923      	ldr	r3, [r4, #16]
 8011b68:	2965      	cmp	r1, #101	; 0x65
 8011b6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8011b6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8011b72:	6123      	str	r3, [r4, #16]
 8011b74:	d00c      	beq.n	8011b90 <_scanf_float+0x34c>
 8011b76:	2945      	cmp	r1, #69	; 0x45
 8011b78:	d00a      	beq.n	8011b90 <_scanf_float+0x34c>
 8011b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011b7e:	463a      	mov	r2, r7
 8011b80:	4640      	mov	r0, r8
 8011b82:	4798      	blx	r3
 8011b84:	6923      	ldr	r3, [r4, #16]
 8011b86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011b8a:	3b01      	subs	r3, #1
 8011b8c:	1eb5      	subs	r5, r6, #2
 8011b8e:	6123      	str	r3, [r4, #16]
 8011b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011b94:	463a      	mov	r2, r7
 8011b96:	4640      	mov	r0, r8
 8011b98:	4798      	blx	r3
 8011b9a:	462e      	mov	r6, r5
 8011b9c:	6825      	ldr	r5, [r4, #0]
 8011b9e:	f015 0510 	ands.w	r5, r5, #16
 8011ba2:	d158      	bne.n	8011c56 <_scanf_float+0x412>
 8011ba4:	7035      	strb	r5, [r6, #0]
 8011ba6:	6823      	ldr	r3, [r4, #0]
 8011ba8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011bb0:	d11c      	bne.n	8011bec <_scanf_float+0x3a8>
 8011bb2:	9b01      	ldr	r3, [sp, #4]
 8011bb4:	454b      	cmp	r3, r9
 8011bb6:	eba3 0209 	sub.w	r2, r3, r9
 8011bba:	d124      	bne.n	8011c06 <_scanf_float+0x3c2>
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	4659      	mov	r1, fp
 8011bc0:	4640      	mov	r0, r8
 8011bc2:	f000 fe9b 	bl	80128fc <_strtod_r>
 8011bc6:	9b03      	ldr	r3, [sp, #12]
 8011bc8:	6821      	ldr	r1, [r4, #0]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	f011 0f02 	tst.w	r1, #2
 8011bd0:	ec57 6b10 	vmov	r6, r7, d0
 8011bd4:	f103 0204 	add.w	r2, r3, #4
 8011bd8:	d020      	beq.n	8011c1c <_scanf_float+0x3d8>
 8011bda:	9903      	ldr	r1, [sp, #12]
 8011bdc:	600a      	str	r2, [r1, #0]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	e9c3 6700 	strd	r6, r7, [r3]
 8011be4:	68e3      	ldr	r3, [r4, #12]
 8011be6:	3301      	adds	r3, #1
 8011be8:	60e3      	str	r3, [r4, #12]
 8011bea:	e66c      	b.n	80118c6 <_scanf_float+0x82>
 8011bec:	9b04      	ldr	r3, [sp, #16]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d0e4      	beq.n	8011bbc <_scanf_float+0x378>
 8011bf2:	9905      	ldr	r1, [sp, #20]
 8011bf4:	230a      	movs	r3, #10
 8011bf6:	462a      	mov	r2, r5
 8011bf8:	3101      	adds	r1, #1
 8011bfa:	4640      	mov	r0, r8
 8011bfc:	f000 ff70 	bl	8012ae0 <_strtol_r>
 8011c00:	9b04      	ldr	r3, [sp, #16]
 8011c02:	9e05      	ldr	r6, [sp, #20]
 8011c04:	1ac2      	subs	r2, r0, r3
 8011c06:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011c0a:	429e      	cmp	r6, r3
 8011c0c:	bf28      	it	cs
 8011c0e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011c12:	4912      	ldr	r1, [pc, #72]	; (8011c5c <_scanf_float+0x418>)
 8011c14:	4630      	mov	r0, r6
 8011c16:	f000 f82b 	bl	8011c70 <siprintf>
 8011c1a:	e7cf      	b.n	8011bbc <_scanf_float+0x378>
 8011c1c:	f011 0f04 	tst.w	r1, #4
 8011c20:	9903      	ldr	r1, [sp, #12]
 8011c22:	600a      	str	r2, [r1, #0]
 8011c24:	d1db      	bne.n	8011bde <_scanf_float+0x39a>
 8011c26:	f8d3 8000 	ldr.w	r8, [r3]
 8011c2a:	ee10 2a10 	vmov	r2, s0
 8011c2e:	ee10 0a10 	vmov	r0, s0
 8011c32:	463b      	mov	r3, r7
 8011c34:	4639      	mov	r1, r7
 8011c36:	f7ee ff91 	bl	8000b5c <__aeabi_dcmpun>
 8011c3a:	b128      	cbz	r0, 8011c48 <_scanf_float+0x404>
 8011c3c:	4808      	ldr	r0, [pc, #32]	; (8011c60 <_scanf_float+0x41c>)
 8011c3e:	f000 f811 	bl	8011c64 <nanf>
 8011c42:	ed88 0a00 	vstr	s0, [r8]
 8011c46:	e7cd      	b.n	8011be4 <_scanf_float+0x3a0>
 8011c48:	4630      	mov	r0, r6
 8011c4a:	4639      	mov	r1, r7
 8011c4c:	f7ee ffe4 	bl	8000c18 <__aeabi_d2f>
 8011c50:	f8c8 0000 	str.w	r0, [r8]
 8011c54:	e7c6      	b.n	8011be4 <_scanf_float+0x3a0>
 8011c56:	2500      	movs	r5, #0
 8011c58:	e635      	b.n	80118c6 <_scanf_float+0x82>
 8011c5a:	bf00      	nop
 8011c5c:	08029434 	.word	0x08029434
 8011c60:	08029543 	.word	0x08029543

08011c64 <nanf>:
 8011c64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011c6c <nanf+0x8>
 8011c68:	4770      	bx	lr
 8011c6a:	bf00      	nop
 8011c6c:	7fc00000 	.word	0x7fc00000

08011c70 <siprintf>:
 8011c70:	b40e      	push	{r1, r2, r3}
 8011c72:	b500      	push	{lr}
 8011c74:	b09c      	sub	sp, #112	; 0x70
 8011c76:	ab1d      	add	r3, sp, #116	; 0x74
 8011c78:	9002      	str	r0, [sp, #8]
 8011c7a:	9006      	str	r0, [sp, #24]
 8011c7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011c80:	4809      	ldr	r0, [pc, #36]	; (8011ca8 <siprintf+0x38>)
 8011c82:	9107      	str	r1, [sp, #28]
 8011c84:	9104      	str	r1, [sp, #16]
 8011c86:	4909      	ldr	r1, [pc, #36]	; (8011cac <siprintf+0x3c>)
 8011c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c8c:	9105      	str	r1, [sp, #20]
 8011c8e:	6800      	ldr	r0, [r0, #0]
 8011c90:	9301      	str	r3, [sp, #4]
 8011c92:	a902      	add	r1, sp, #8
 8011c94:	f002 ff46 	bl	8014b24 <_svfiprintf_r>
 8011c98:	9b02      	ldr	r3, [sp, #8]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	701a      	strb	r2, [r3, #0]
 8011c9e:	b01c      	add	sp, #112	; 0x70
 8011ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ca4:	b003      	add	sp, #12
 8011ca6:	4770      	bx	lr
 8011ca8:	20000040 	.word	0x20000040
 8011cac:	ffff0208 	.word	0xffff0208

08011cb0 <sulp>:
 8011cb0:	b570      	push	{r4, r5, r6, lr}
 8011cb2:	4604      	mov	r4, r0
 8011cb4:	460d      	mov	r5, r1
 8011cb6:	ec45 4b10 	vmov	d0, r4, r5
 8011cba:	4616      	mov	r6, r2
 8011cbc:	f002 fcce 	bl	801465c <__ulp>
 8011cc0:	ec51 0b10 	vmov	r0, r1, d0
 8011cc4:	b17e      	cbz	r6, 8011ce6 <sulp+0x36>
 8011cc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011cca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	dd09      	ble.n	8011ce6 <sulp+0x36>
 8011cd2:	051b      	lsls	r3, r3, #20
 8011cd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011cd8:	2400      	movs	r4, #0
 8011cda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011cde:	4622      	mov	r2, r4
 8011ce0:	462b      	mov	r3, r5
 8011ce2:	f7ee fca1 	bl	8000628 <__aeabi_dmul>
 8011ce6:	bd70      	pop	{r4, r5, r6, pc}

08011ce8 <_strtod_l>:
 8011ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cec:	b0a3      	sub	sp, #140	; 0x8c
 8011cee:	461f      	mov	r7, r3
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	931e      	str	r3, [sp, #120]	; 0x78
 8011cf4:	4ba4      	ldr	r3, [pc, #656]	; (8011f88 <_strtod_l+0x2a0>)
 8011cf6:	9219      	str	r2, [sp, #100]	; 0x64
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	9307      	str	r3, [sp, #28]
 8011cfc:	4604      	mov	r4, r0
 8011cfe:	4618      	mov	r0, r3
 8011d00:	4688      	mov	r8, r1
 8011d02:	f7ee fa77 	bl	80001f4 <strlen>
 8011d06:	f04f 0a00 	mov.w	sl, #0
 8011d0a:	4605      	mov	r5, r0
 8011d0c:	f04f 0b00 	mov.w	fp, #0
 8011d10:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011d14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d16:	781a      	ldrb	r2, [r3, #0]
 8011d18:	2a2b      	cmp	r2, #43	; 0x2b
 8011d1a:	d04c      	beq.n	8011db6 <_strtod_l+0xce>
 8011d1c:	d839      	bhi.n	8011d92 <_strtod_l+0xaa>
 8011d1e:	2a0d      	cmp	r2, #13
 8011d20:	d832      	bhi.n	8011d88 <_strtod_l+0xa0>
 8011d22:	2a08      	cmp	r2, #8
 8011d24:	d832      	bhi.n	8011d8c <_strtod_l+0xa4>
 8011d26:	2a00      	cmp	r2, #0
 8011d28:	d03c      	beq.n	8011da4 <_strtod_l+0xbc>
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	930e      	str	r3, [sp, #56]	; 0x38
 8011d2e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011d30:	7833      	ldrb	r3, [r6, #0]
 8011d32:	2b30      	cmp	r3, #48	; 0x30
 8011d34:	f040 80b4 	bne.w	8011ea0 <_strtod_l+0x1b8>
 8011d38:	7873      	ldrb	r3, [r6, #1]
 8011d3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011d3e:	2b58      	cmp	r3, #88	; 0x58
 8011d40:	d16c      	bne.n	8011e1c <_strtod_l+0x134>
 8011d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d44:	9301      	str	r3, [sp, #4]
 8011d46:	ab1e      	add	r3, sp, #120	; 0x78
 8011d48:	9702      	str	r7, [sp, #8]
 8011d4a:	9300      	str	r3, [sp, #0]
 8011d4c:	4a8f      	ldr	r2, [pc, #572]	; (8011f8c <_strtod_l+0x2a4>)
 8011d4e:	ab1f      	add	r3, sp, #124	; 0x7c
 8011d50:	a91d      	add	r1, sp, #116	; 0x74
 8011d52:	4620      	mov	r0, r4
 8011d54:	f001 fde2 	bl	801391c <__gethex>
 8011d58:	f010 0707 	ands.w	r7, r0, #7
 8011d5c:	4605      	mov	r5, r0
 8011d5e:	d005      	beq.n	8011d6c <_strtod_l+0x84>
 8011d60:	2f06      	cmp	r7, #6
 8011d62:	d12a      	bne.n	8011dba <_strtod_l+0xd2>
 8011d64:	3601      	adds	r6, #1
 8011d66:	2300      	movs	r3, #0
 8011d68:	961d      	str	r6, [sp, #116]	; 0x74
 8011d6a:	930e      	str	r3, [sp, #56]	; 0x38
 8011d6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	f040 8596 	bne.w	80128a0 <_strtod_l+0xbb8>
 8011d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d76:	b1db      	cbz	r3, 8011db0 <_strtod_l+0xc8>
 8011d78:	4652      	mov	r2, sl
 8011d7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011d7e:	ec43 2b10 	vmov	d0, r2, r3
 8011d82:	b023      	add	sp, #140	; 0x8c
 8011d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d88:	2a20      	cmp	r2, #32
 8011d8a:	d1ce      	bne.n	8011d2a <_strtod_l+0x42>
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	931d      	str	r3, [sp, #116]	; 0x74
 8011d90:	e7c0      	b.n	8011d14 <_strtod_l+0x2c>
 8011d92:	2a2d      	cmp	r2, #45	; 0x2d
 8011d94:	d1c9      	bne.n	8011d2a <_strtod_l+0x42>
 8011d96:	2201      	movs	r2, #1
 8011d98:	920e      	str	r2, [sp, #56]	; 0x38
 8011d9a:	1c5a      	adds	r2, r3, #1
 8011d9c:	921d      	str	r2, [sp, #116]	; 0x74
 8011d9e:	785b      	ldrb	r3, [r3, #1]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d1c4      	bne.n	8011d2e <_strtod_l+0x46>
 8011da4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011da6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	f040 8576 	bne.w	801289c <_strtod_l+0xbb4>
 8011db0:	4652      	mov	r2, sl
 8011db2:	465b      	mov	r3, fp
 8011db4:	e7e3      	b.n	8011d7e <_strtod_l+0x96>
 8011db6:	2200      	movs	r2, #0
 8011db8:	e7ee      	b.n	8011d98 <_strtod_l+0xb0>
 8011dba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011dbc:	b13a      	cbz	r2, 8011dce <_strtod_l+0xe6>
 8011dbe:	2135      	movs	r1, #53	; 0x35
 8011dc0:	a820      	add	r0, sp, #128	; 0x80
 8011dc2:	f002 fd56 	bl	8014872 <__copybits>
 8011dc6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f002 f91b 	bl	8014004 <_Bfree>
 8011dce:	3f01      	subs	r7, #1
 8011dd0:	2f05      	cmp	r7, #5
 8011dd2:	d807      	bhi.n	8011de4 <_strtod_l+0xfc>
 8011dd4:	e8df f007 	tbb	[pc, r7]
 8011dd8:	1d180b0e 	.word	0x1d180b0e
 8011ddc:	030e      	.short	0x030e
 8011dde:	f04f 0b00 	mov.w	fp, #0
 8011de2:	46da      	mov	sl, fp
 8011de4:	0728      	lsls	r0, r5, #28
 8011de6:	d5c1      	bpl.n	8011d6c <_strtod_l+0x84>
 8011de8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011dec:	e7be      	b.n	8011d6c <_strtod_l+0x84>
 8011dee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8011df2:	e7f7      	b.n	8011de4 <_strtod_l+0xfc>
 8011df4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011df8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011dfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011dfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011e02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011e06:	e7ed      	b.n	8011de4 <_strtod_l+0xfc>
 8011e08:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011f90 <_strtod_l+0x2a8>
 8011e0c:	f04f 0a00 	mov.w	sl, #0
 8011e10:	e7e8      	b.n	8011de4 <_strtod_l+0xfc>
 8011e12:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011e16:	f04f 3aff 	mov.w	sl, #4294967295
 8011e1a:	e7e3      	b.n	8011de4 <_strtod_l+0xfc>
 8011e1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011e1e:	1c5a      	adds	r2, r3, #1
 8011e20:	921d      	str	r2, [sp, #116]	; 0x74
 8011e22:	785b      	ldrb	r3, [r3, #1]
 8011e24:	2b30      	cmp	r3, #48	; 0x30
 8011e26:	d0f9      	beq.n	8011e1c <_strtod_l+0x134>
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d09f      	beq.n	8011d6c <_strtod_l+0x84>
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	f04f 0900 	mov.w	r9, #0
 8011e32:	9304      	str	r3, [sp, #16]
 8011e34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011e36:	930a      	str	r3, [sp, #40]	; 0x28
 8011e38:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011e3c:	464f      	mov	r7, r9
 8011e3e:	220a      	movs	r2, #10
 8011e40:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011e42:	7806      	ldrb	r6, [r0, #0]
 8011e44:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011e48:	b2d9      	uxtb	r1, r3
 8011e4a:	2909      	cmp	r1, #9
 8011e4c:	d92a      	bls.n	8011ea4 <_strtod_l+0x1bc>
 8011e4e:	9907      	ldr	r1, [sp, #28]
 8011e50:	462a      	mov	r2, r5
 8011e52:	f003 f8d9 	bl	8015008 <strncmp>
 8011e56:	b398      	cbz	r0, 8011ec0 <_strtod_l+0x1d8>
 8011e58:	2000      	movs	r0, #0
 8011e5a:	4633      	mov	r3, r6
 8011e5c:	463d      	mov	r5, r7
 8011e5e:	9007      	str	r0, [sp, #28]
 8011e60:	4602      	mov	r2, r0
 8011e62:	2b65      	cmp	r3, #101	; 0x65
 8011e64:	d001      	beq.n	8011e6a <_strtod_l+0x182>
 8011e66:	2b45      	cmp	r3, #69	; 0x45
 8011e68:	d118      	bne.n	8011e9c <_strtod_l+0x1b4>
 8011e6a:	b91d      	cbnz	r5, 8011e74 <_strtod_l+0x18c>
 8011e6c:	9b04      	ldr	r3, [sp, #16]
 8011e6e:	4303      	orrs	r3, r0
 8011e70:	d098      	beq.n	8011da4 <_strtod_l+0xbc>
 8011e72:	2500      	movs	r5, #0
 8011e74:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011e78:	f108 0301 	add.w	r3, r8, #1
 8011e7c:	931d      	str	r3, [sp, #116]	; 0x74
 8011e7e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011e82:	2b2b      	cmp	r3, #43	; 0x2b
 8011e84:	d075      	beq.n	8011f72 <_strtod_l+0x28a>
 8011e86:	2b2d      	cmp	r3, #45	; 0x2d
 8011e88:	d07b      	beq.n	8011f82 <_strtod_l+0x29a>
 8011e8a:	f04f 0c00 	mov.w	ip, #0
 8011e8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011e92:	2909      	cmp	r1, #9
 8011e94:	f240 8082 	bls.w	8011f9c <_strtod_l+0x2b4>
 8011e98:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011e9c:	2600      	movs	r6, #0
 8011e9e:	e09d      	b.n	8011fdc <_strtod_l+0x2f4>
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	e7c4      	b.n	8011e2e <_strtod_l+0x146>
 8011ea4:	2f08      	cmp	r7, #8
 8011ea6:	bfd8      	it	le
 8011ea8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011eaa:	f100 0001 	add.w	r0, r0, #1
 8011eae:	bfda      	itte	le
 8011eb0:	fb02 3301 	mlale	r3, r2, r1, r3
 8011eb4:	9309      	strle	r3, [sp, #36]	; 0x24
 8011eb6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011eba:	3701      	adds	r7, #1
 8011ebc:	901d      	str	r0, [sp, #116]	; 0x74
 8011ebe:	e7bf      	b.n	8011e40 <_strtod_l+0x158>
 8011ec0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011ec2:	195a      	adds	r2, r3, r5
 8011ec4:	921d      	str	r2, [sp, #116]	; 0x74
 8011ec6:	5d5b      	ldrb	r3, [r3, r5]
 8011ec8:	2f00      	cmp	r7, #0
 8011eca:	d037      	beq.n	8011f3c <_strtod_l+0x254>
 8011ecc:	9007      	str	r0, [sp, #28]
 8011ece:	463d      	mov	r5, r7
 8011ed0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011ed4:	2a09      	cmp	r2, #9
 8011ed6:	d912      	bls.n	8011efe <_strtod_l+0x216>
 8011ed8:	2201      	movs	r2, #1
 8011eda:	e7c2      	b.n	8011e62 <_strtod_l+0x17a>
 8011edc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011ede:	1c5a      	adds	r2, r3, #1
 8011ee0:	921d      	str	r2, [sp, #116]	; 0x74
 8011ee2:	785b      	ldrb	r3, [r3, #1]
 8011ee4:	3001      	adds	r0, #1
 8011ee6:	2b30      	cmp	r3, #48	; 0x30
 8011ee8:	d0f8      	beq.n	8011edc <_strtod_l+0x1f4>
 8011eea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011eee:	2a08      	cmp	r2, #8
 8011ef0:	f200 84db 	bhi.w	80128aa <_strtod_l+0xbc2>
 8011ef4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011ef6:	9007      	str	r0, [sp, #28]
 8011ef8:	2000      	movs	r0, #0
 8011efa:	920a      	str	r2, [sp, #40]	; 0x28
 8011efc:	4605      	mov	r5, r0
 8011efe:	3b30      	subs	r3, #48	; 0x30
 8011f00:	f100 0201 	add.w	r2, r0, #1
 8011f04:	d014      	beq.n	8011f30 <_strtod_l+0x248>
 8011f06:	9907      	ldr	r1, [sp, #28]
 8011f08:	4411      	add	r1, r2
 8011f0a:	9107      	str	r1, [sp, #28]
 8011f0c:	462a      	mov	r2, r5
 8011f0e:	eb00 0e05 	add.w	lr, r0, r5
 8011f12:	210a      	movs	r1, #10
 8011f14:	4572      	cmp	r2, lr
 8011f16:	d113      	bne.n	8011f40 <_strtod_l+0x258>
 8011f18:	182a      	adds	r2, r5, r0
 8011f1a:	2a08      	cmp	r2, #8
 8011f1c:	f105 0501 	add.w	r5, r5, #1
 8011f20:	4405      	add	r5, r0
 8011f22:	dc1c      	bgt.n	8011f5e <_strtod_l+0x276>
 8011f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f26:	220a      	movs	r2, #10
 8011f28:	fb02 3301 	mla	r3, r2, r1, r3
 8011f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8011f2e:	2200      	movs	r2, #0
 8011f30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011f32:	1c59      	adds	r1, r3, #1
 8011f34:	911d      	str	r1, [sp, #116]	; 0x74
 8011f36:	785b      	ldrb	r3, [r3, #1]
 8011f38:	4610      	mov	r0, r2
 8011f3a:	e7c9      	b.n	8011ed0 <_strtod_l+0x1e8>
 8011f3c:	4638      	mov	r0, r7
 8011f3e:	e7d2      	b.n	8011ee6 <_strtod_l+0x1fe>
 8011f40:	2a08      	cmp	r2, #8
 8011f42:	dc04      	bgt.n	8011f4e <_strtod_l+0x266>
 8011f44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011f46:	434e      	muls	r6, r1
 8011f48:	9609      	str	r6, [sp, #36]	; 0x24
 8011f4a:	3201      	adds	r2, #1
 8011f4c:	e7e2      	b.n	8011f14 <_strtod_l+0x22c>
 8011f4e:	f102 0c01 	add.w	ip, r2, #1
 8011f52:	f1bc 0f10 	cmp.w	ip, #16
 8011f56:	bfd8      	it	le
 8011f58:	fb01 f909 	mulle.w	r9, r1, r9
 8011f5c:	e7f5      	b.n	8011f4a <_strtod_l+0x262>
 8011f5e:	2d10      	cmp	r5, #16
 8011f60:	bfdc      	itt	le
 8011f62:	220a      	movle	r2, #10
 8011f64:	fb02 3909 	mlale	r9, r2, r9, r3
 8011f68:	e7e1      	b.n	8011f2e <_strtod_l+0x246>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	9307      	str	r3, [sp, #28]
 8011f6e:	2201      	movs	r2, #1
 8011f70:	e77c      	b.n	8011e6c <_strtod_l+0x184>
 8011f72:	f04f 0c00 	mov.w	ip, #0
 8011f76:	f108 0302 	add.w	r3, r8, #2
 8011f7a:	931d      	str	r3, [sp, #116]	; 0x74
 8011f7c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011f80:	e785      	b.n	8011e8e <_strtod_l+0x1a6>
 8011f82:	f04f 0c01 	mov.w	ip, #1
 8011f86:	e7f6      	b.n	8011f76 <_strtod_l+0x28e>
 8011f88:	0802972c 	.word	0x0802972c
 8011f8c:	0802943c 	.word	0x0802943c
 8011f90:	7ff00000 	.word	0x7ff00000
 8011f94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011f96:	1c59      	adds	r1, r3, #1
 8011f98:	911d      	str	r1, [sp, #116]	; 0x74
 8011f9a:	785b      	ldrb	r3, [r3, #1]
 8011f9c:	2b30      	cmp	r3, #48	; 0x30
 8011f9e:	d0f9      	beq.n	8011f94 <_strtod_l+0x2ac>
 8011fa0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8011fa4:	2908      	cmp	r1, #8
 8011fa6:	f63f af79 	bhi.w	8011e9c <_strtod_l+0x1b4>
 8011faa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011fae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011fb0:	9308      	str	r3, [sp, #32]
 8011fb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011fb4:	1c59      	adds	r1, r3, #1
 8011fb6:	911d      	str	r1, [sp, #116]	; 0x74
 8011fb8:	785b      	ldrb	r3, [r3, #1]
 8011fba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8011fbe:	2e09      	cmp	r6, #9
 8011fc0:	d937      	bls.n	8012032 <_strtod_l+0x34a>
 8011fc2:	9e08      	ldr	r6, [sp, #32]
 8011fc4:	1b89      	subs	r1, r1, r6
 8011fc6:	2908      	cmp	r1, #8
 8011fc8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011fcc:	dc02      	bgt.n	8011fd4 <_strtod_l+0x2ec>
 8011fce:	4576      	cmp	r6, lr
 8011fd0:	bfa8      	it	ge
 8011fd2:	4676      	movge	r6, lr
 8011fd4:	f1bc 0f00 	cmp.w	ip, #0
 8011fd8:	d000      	beq.n	8011fdc <_strtod_l+0x2f4>
 8011fda:	4276      	negs	r6, r6
 8011fdc:	2d00      	cmp	r5, #0
 8011fde:	d14f      	bne.n	8012080 <_strtod_l+0x398>
 8011fe0:	9904      	ldr	r1, [sp, #16]
 8011fe2:	4301      	orrs	r1, r0
 8011fe4:	f47f aec2 	bne.w	8011d6c <_strtod_l+0x84>
 8011fe8:	2a00      	cmp	r2, #0
 8011fea:	f47f aedb 	bne.w	8011da4 <_strtod_l+0xbc>
 8011fee:	2b69      	cmp	r3, #105	; 0x69
 8011ff0:	d027      	beq.n	8012042 <_strtod_l+0x35a>
 8011ff2:	dc24      	bgt.n	801203e <_strtod_l+0x356>
 8011ff4:	2b49      	cmp	r3, #73	; 0x49
 8011ff6:	d024      	beq.n	8012042 <_strtod_l+0x35a>
 8011ff8:	2b4e      	cmp	r3, #78	; 0x4e
 8011ffa:	f47f aed3 	bne.w	8011da4 <_strtod_l+0xbc>
 8011ffe:	499e      	ldr	r1, [pc, #632]	; (8012278 <_strtod_l+0x590>)
 8012000:	a81d      	add	r0, sp, #116	; 0x74
 8012002:	f001 fee3 	bl	8013dcc <__match>
 8012006:	2800      	cmp	r0, #0
 8012008:	f43f aecc 	beq.w	8011da4 <_strtod_l+0xbc>
 801200c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	2b28      	cmp	r3, #40	; 0x28
 8012012:	d12d      	bne.n	8012070 <_strtod_l+0x388>
 8012014:	4999      	ldr	r1, [pc, #612]	; (801227c <_strtod_l+0x594>)
 8012016:	aa20      	add	r2, sp, #128	; 0x80
 8012018:	a81d      	add	r0, sp, #116	; 0x74
 801201a:	f001 feeb 	bl	8013df4 <__hexnan>
 801201e:	2805      	cmp	r0, #5
 8012020:	d126      	bne.n	8012070 <_strtod_l+0x388>
 8012022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012024:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8012028:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801202c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012030:	e69c      	b.n	8011d6c <_strtod_l+0x84>
 8012032:	210a      	movs	r1, #10
 8012034:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012038:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801203c:	e7b9      	b.n	8011fb2 <_strtod_l+0x2ca>
 801203e:	2b6e      	cmp	r3, #110	; 0x6e
 8012040:	e7db      	b.n	8011ffa <_strtod_l+0x312>
 8012042:	498f      	ldr	r1, [pc, #572]	; (8012280 <_strtod_l+0x598>)
 8012044:	a81d      	add	r0, sp, #116	; 0x74
 8012046:	f001 fec1 	bl	8013dcc <__match>
 801204a:	2800      	cmp	r0, #0
 801204c:	f43f aeaa 	beq.w	8011da4 <_strtod_l+0xbc>
 8012050:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012052:	498c      	ldr	r1, [pc, #560]	; (8012284 <_strtod_l+0x59c>)
 8012054:	3b01      	subs	r3, #1
 8012056:	a81d      	add	r0, sp, #116	; 0x74
 8012058:	931d      	str	r3, [sp, #116]	; 0x74
 801205a:	f001 feb7 	bl	8013dcc <__match>
 801205e:	b910      	cbnz	r0, 8012066 <_strtod_l+0x37e>
 8012060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012062:	3301      	adds	r3, #1
 8012064:	931d      	str	r3, [sp, #116]	; 0x74
 8012066:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8012294 <_strtod_l+0x5ac>
 801206a:	f04f 0a00 	mov.w	sl, #0
 801206e:	e67d      	b.n	8011d6c <_strtod_l+0x84>
 8012070:	4885      	ldr	r0, [pc, #532]	; (8012288 <_strtod_l+0x5a0>)
 8012072:	f002 ffb1 	bl	8014fd8 <nan>
 8012076:	ed8d 0b04 	vstr	d0, [sp, #16]
 801207a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801207e:	e675      	b.n	8011d6c <_strtod_l+0x84>
 8012080:	9b07      	ldr	r3, [sp, #28]
 8012082:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012084:	1af3      	subs	r3, r6, r3
 8012086:	2f00      	cmp	r7, #0
 8012088:	bf08      	it	eq
 801208a:	462f      	moveq	r7, r5
 801208c:	2d10      	cmp	r5, #16
 801208e:	9308      	str	r3, [sp, #32]
 8012090:	46a8      	mov	r8, r5
 8012092:	bfa8      	it	ge
 8012094:	f04f 0810 	movge.w	r8, #16
 8012098:	f7ee fa4c 	bl	8000534 <__aeabi_ui2d>
 801209c:	2d09      	cmp	r5, #9
 801209e:	4682      	mov	sl, r0
 80120a0:	468b      	mov	fp, r1
 80120a2:	dd13      	ble.n	80120cc <_strtod_l+0x3e4>
 80120a4:	4b79      	ldr	r3, [pc, #484]	; (801228c <_strtod_l+0x5a4>)
 80120a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80120aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80120ae:	f7ee fabb 	bl	8000628 <__aeabi_dmul>
 80120b2:	4682      	mov	sl, r0
 80120b4:	4648      	mov	r0, r9
 80120b6:	468b      	mov	fp, r1
 80120b8:	f7ee fa3c 	bl	8000534 <__aeabi_ui2d>
 80120bc:	4602      	mov	r2, r0
 80120be:	460b      	mov	r3, r1
 80120c0:	4650      	mov	r0, sl
 80120c2:	4659      	mov	r1, fp
 80120c4:	f7ee f8fa 	bl	80002bc <__adddf3>
 80120c8:	4682      	mov	sl, r0
 80120ca:	468b      	mov	fp, r1
 80120cc:	2d0f      	cmp	r5, #15
 80120ce:	dc38      	bgt.n	8012142 <_strtod_l+0x45a>
 80120d0:	9b08      	ldr	r3, [sp, #32]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	f43f ae4a 	beq.w	8011d6c <_strtod_l+0x84>
 80120d8:	dd24      	ble.n	8012124 <_strtod_l+0x43c>
 80120da:	2b16      	cmp	r3, #22
 80120dc:	dc0b      	bgt.n	80120f6 <_strtod_l+0x40e>
 80120de:	4d6b      	ldr	r5, [pc, #428]	; (801228c <_strtod_l+0x5a4>)
 80120e0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80120e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80120e8:	4652      	mov	r2, sl
 80120ea:	465b      	mov	r3, fp
 80120ec:	f7ee fa9c 	bl	8000628 <__aeabi_dmul>
 80120f0:	4682      	mov	sl, r0
 80120f2:	468b      	mov	fp, r1
 80120f4:	e63a      	b.n	8011d6c <_strtod_l+0x84>
 80120f6:	9a08      	ldr	r2, [sp, #32]
 80120f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80120fc:	4293      	cmp	r3, r2
 80120fe:	db20      	blt.n	8012142 <_strtod_l+0x45a>
 8012100:	4c62      	ldr	r4, [pc, #392]	; (801228c <_strtod_l+0x5a4>)
 8012102:	f1c5 050f 	rsb	r5, r5, #15
 8012106:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801210a:	4652      	mov	r2, sl
 801210c:	465b      	mov	r3, fp
 801210e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012112:	f7ee fa89 	bl	8000628 <__aeabi_dmul>
 8012116:	9b08      	ldr	r3, [sp, #32]
 8012118:	1b5d      	subs	r5, r3, r5
 801211a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801211e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012122:	e7e3      	b.n	80120ec <_strtod_l+0x404>
 8012124:	9b08      	ldr	r3, [sp, #32]
 8012126:	3316      	adds	r3, #22
 8012128:	db0b      	blt.n	8012142 <_strtod_l+0x45a>
 801212a:	9b07      	ldr	r3, [sp, #28]
 801212c:	4a57      	ldr	r2, [pc, #348]	; (801228c <_strtod_l+0x5a4>)
 801212e:	1b9e      	subs	r6, r3, r6
 8012130:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8012134:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012138:	4650      	mov	r0, sl
 801213a:	4659      	mov	r1, fp
 801213c:	f7ee fb9e 	bl	800087c <__aeabi_ddiv>
 8012140:	e7d6      	b.n	80120f0 <_strtod_l+0x408>
 8012142:	9b08      	ldr	r3, [sp, #32]
 8012144:	eba5 0808 	sub.w	r8, r5, r8
 8012148:	4498      	add	r8, r3
 801214a:	f1b8 0f00 	cmp.w	r8, #0
 801214e:	dd71      	ble.n	8012234 <_strtod_l+0x54c>
 8012150:	f018 030f 	ands.w	r3, r8, #15
 8012154:	d00a      	beq.n	801216c <_strtod_l+0x484>
 8012156:	494d      	ldr	r1, [pc, #308]	; (801228c <_strtod_l+0x5a4>)
 8012158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801215c:	4652      	mov	r2, sl
 801215e:	465b      	mov	r3, fp
 8012160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012164:	f7ee fa60 	bl	8000628 <__aeabi_dmul>
 8012168:	4682      	mov	sl, r0
 801216a:	468b      	mov	fp, r1
 801216c:	f038 080f 	bics.w	r8, r8, #15
 8012170:	d04d      	beq.n	801220e <_strtod_l+0x526>
 8012172:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012176:	dd22      	ble.n	80121be <_strtod_l+0x4d6>
 8012178:	2500      	movs	r5, #0
 801217a:	462e      	mov	r6, r5
 801217c:	9509      	str	r5, [sp, #36]	; 0x24
 801217e:	9507      	str	r5, [sp, #28]
 8012180:	2322      	movs	r3, #34	; 0x22
 8012182:	f8df b110 	ldr.w	fp, [pc, #272]	; 8012294 <_strtod_l+0x5ac>
 8012186:	6023      	str	r3, [r4, #0]
 8012188:	f04f 0a00 	mov.w	sl, #0
 801218c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801218e:	2b00      	cmp	r3, #0
 8012190:	f43f adec 	beq.w	8011d6c <_strtod_l+0x84>
 8012194:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012196:	4620      	mov	r0, r4
 8012198:	f001 ff34 	bl	8014004 <_Bfree>
 801219c:	9907      	ldr	r1, [sp, #28]
 801219e:	4620      	mov	r0, r4
 80121a0:	f001 ff30 	bl	8014004 <_Bfree>
 80121a4:	4631      	mov	r1, r6
 80121a6:	4620      	mov	r0, r4
 80121a8:	f001 ff2c 	bl	8014004 <_Bfree>
 80121ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121ae:	4620      	mov	r0, r4
 80121b0:	f001 ff28 	bl	8014004 <_Bfree>
 80121b4:	4629      	mov	r1, r5
 80121b6:	4620      	mov	r0, r4
 80121b8:	f001 ff24 	bl	8014004 <_Bfree>
 80121bc:	e5d6      	b.n	8011d6c <_strtod_l+0x84>
 80121be:	2300      	movs	r3, #0
 80121c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80121c4:	4650      	mov	r0, sl
 80121c6:	4659      	mov	r1, fp
 80121c8:	4699      	mov	r9, r3
 80121ca:	f1b8 0f01 	cmp.w	r8, #1
 80121ce:	dc21      	bgt.n	8012214 <_strtod_l+0x52c>
 80121d0:	b10b      	cbz	r3, 80121d6 <_strtod_l+0x4ee>
 80121d2:	4682      	mov	sl, r0
 80121d4:	468b      	mov	fp, r1
 80121d6:	4b2e      	ldr	r3, [pc, #184]	; (8012290 <_strtod_l+0x5a8>)
 80121d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80121dc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80121e0:	4652      	mov	r2, sl
 80121e2:	465b      	mov	r3, fp
 80121e4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80121e8:	f7ee fa1e 	bl	8000628 <__aeabi_dmul>
 80121ec:	4b29      	ldr	r3, [pc, #164]	; (8012294 <_strtod_l+0x5ac>)
 80121ee:	460a      	mov	r2, r1
 80121f0:	400b      	ands	r3, r1
 80121f2:	4929      	ldr	r1, [pc, #164]	; (8012298 <_strtod_l+0x5b0>)
 80121f4:	428b      	cmp	r3, r1
 80121f6:	4682      	mov	sl, r0
 80121f8:	d8be      	bhi.n	8012178 <_strtod_l+0x490>
 80121fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80121fe:	428b      	cmp	r3, r1
 8012200:	bf86      	itte	hi
 8012202:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801229c <_strtod_l+0x5b4>
 8012206:	f04f 3aff 	movhi.w	sl, #4294967295
 801220a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801220e:	2300      	movs	r3, #0
 8012210:	9304      	str	r3, [sp, #16]
 8012212:	e081      	b.n	8012318 <_strtod_l+0x630>
 8012214:	f018 0f01 	tst.w	r8, #1
 8012218:	d007      	beq.n	801222a <_strtod_l+0x542>
 801221a:	4b1d      	ldr	r3, [pc, #116]	; (8012290 <_strtod_l+0x5a8>)
 801221c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012224:	f7ee fa00 	bl	8000628 <__aeabi_dmul>
 8012228:	2301      	movs	r3, #1
 801222a:	f109 0901 	add.w	r9, r9, #1
 801222e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012232:	e7ca      	b.n	80121ca <_strtod_l+0x4e2>
 8012234:	d0eb      	beq.n	801220e <_strtod_l+0x526>
 8012236:	f1c8 0800 	rsb	r8, r8, #0
 801223a:	f018 020f 	ands.w	r2, r8, #15
 801223e:	d00a      	beq.n	8012256 <_strtod_l+0x56e>
 8012240:	4b12      	ldr	r3, [pc, #72]	; (801228c <_strtod_l+0x5a4>)
 8012242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012246:	4650      	mov	r0, sl
 8012248:	4659      	mov	r1, fp
 801224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224e:	f7ee fb15 	bl	800087c <__aeabi_ddiv>
 8012252:	4682      	mov	sl, r0
 8012254:	468b      	mov	fp, r1
 8012256:	ea5f 1828 	movs.w	r8, r8, asr #4
 801225a:	d0d8      	beq.n	801220e <_strtod_l+0x526>
 801225c:	f1b8 0f1f 	cmp.w	r8, #31
 8012260:	dd1e      	ble.n	80122a0 <_strtod_l+0x5b8>
 8012262:	2500      	movs	r5, #0
 8012264:	462e      	mov	r6, r5
 8012266:	9509      	str	r5, [sp, #36]	; 0x24
 8012268:	9507      	str	r5, [sp, #28]
 801226a:	2322      	movs	r3, #34	; 0x22
 801226c:	f04f 0a00 	mov.w	sl, #0
 8012270:	f04f 0b00 	mov.w	fp, #0
 8012274:	6023      	str	r3, [r4, #0]
 8012276:	e789      	b.n	801218c <_strtod_l+0x4a4>
 8012278:	0802940d 	.word	0x0802940d
 801227c:	08029450 	.word	0x08029450
 8012280:	08029405 	.word	0x08029405
 8012284:	08029648 	.word	0x08029648
 8012288:	08029543 	.word	0x08029543
 801228c:	080297c8 	.word	0x080297c8
 8012290:	080297a0 	.word	0x080297a0
 8012294:	7ff00000 	.word	0x7ff00000
 8012298:	7ca00000 	.word	0x7ca00000
 801229c:	7fefffff 	.word	0x7fefffff
 80122a0:	f018 0310 	ands.w	r3, r8, #16
 80122a4:	bf18      	it	ne
 80122a6:	236a      	movne	r3, #106	; 0x6a
 80122a8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8012660 <_strtod_l+0x978>
 80122ac:	9304      	str	r3, [sp, #16]
 80122ae:	4650      	mov	r0, sl
 80122b0:	4659      	mov	r1, fp
 80122b2:	2300      	movs	r3, #0
 80122b4:	f018 0f01 	tst.w	r8, #1
 80122b8:	d004      	beq.n	80122c4 <_strtod_l+0x5dc>
 80122ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80122be:	f7ee f9b3 	bl	8000628 <__aeabi_dmul>
 80122c2:	2301      	movs	r3, #1
 80122c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80122c8:	f109 0908 	add.w	r9, r9, #8
 80122cc:	d1f2      	bne.n	80122b4 <_strtod_l+0x5cc>
 80122ce:	b10b      	cbz	r3, 80122d4 <_strtod_l+0x5ec>
 80122d0:	4682      	mov	sl, r0
 80122d2:	468b      	mov	fp, r1
 80122d4:	9b04      	ldr	r3, [sp, #16]
 80122d6:	b1bb      	cbz	r3, 8012308 <_strtod_l+0x620>
 80122d8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80122dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	4659      	mov	r1, fp
 80122e4:	dd10      	ble.n	8012308 <_strtod_l+0x620>
 80122e6:	2b1f      	cmp	r3, #31
 80122e8:	f340 8128 	ble.w	801253c <_strtod_l+0x854>
 80122ec:	2b34      	cmp	r3, #52	; 0x34
 80122ee:	bfde      	ittt	le
 80122f0:	3b20      	suble	r3, #32
 80122f2:	f04f 32ff 	movle.w	r2, #4294967295
 80122f6:	fa02 f303 	lslle.w	r3, r2, r3
 80122fa:	f04f 0a00 	mov.w	sl, #0
 80122fe:	bfcc      	ite	gt
 8012300:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012304:	ea03 0b01 	andle.w	fp, r3, r1
 8012308:	2200      	movs	r2, #0
 801230a:	2300      	movs	r3, #0
 801230c:	4650      	mov	r0, sl
 801230e:	4659      	mov	r1, fp
 8012310:	f7ee fbf2 	bl	8000af8 <__aeabi_dcmpeq>
 8012314:	2800      	cmp	r0, #0
 8012316:	d1a4      	bne.n	8012262 <_strtod_l+0x57a>
 8012318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801231a:	9300      	str	r3, [sp, #0]
 801231c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801231e:	462b      	mov	r3, r5
 8012320:	463a      	mov	r2, r7
 8012322:	4620      	mov	r0, r4
 8012324:	f001 feda 	bl	80140dc <__s2b>
 8012328:	9009      	str	r0, [sp, #36]	; 0x24
 801232a:	2800      	cmp	r0, #0
 801232c:	f43f af24 	beq.w	8012178 <_strtod_l+0x490>
 8012330:	9b07      	ldr	r3, [sp, #28]
 8012332:	1b9e      	subs	r6, r3, r6
 8012334:	9b08      	ldr	r3, [sp, #32]
 8012336:	2b00      	cmp	r3, #0
 8012338:	bfb4      	ite	lt
 801233a:	4633      	movlt	r3, r6
 801233c:	2300      	movge	r3, #0
 801233e:	9310      	str	r3, [sp, #64]	; 0x40
 8012340:	9b08      	ldr	r3, [sp, #32]
 8012342:	2500      	movs	r5, #0
 8012344:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012348:	9318      	str	r3, [sp, #96]	; 0x60
 801234a:	462e      	mov	r6, r5
 801234c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801234e:	4620      	mov	r0, r4
 8012350:	6859      	ldr	r1, [r3, #4]
 8012352:	f001 fe17 	bl	8013f84 <_Balloc>
 8012356:	9007      	str	r0, [sp, #28]
 8012358:	2800      	cmp	r0, #0
 801235a:	f43f af11 	beq.w	8012180 <_strtod_l+0x498>
 801235e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012360:	691a      	ldr	r2, [r3, #16]
 8012362:	3202      	adds	r2, #2
 8012364:	f103 010c 	add.w	r1, r3, #12
 8012368:	0092      	lsls	r2, r2, #2
 801236a:	300c      	adds	r0, #12
 801236c:	f001 fdfc 	bl	8013f68 <memcpy>
 8012370:	ec4b ab10 	vmov	d0, sl, fp
 8012374:	aa20      	add	r2, sp, #128	; 0x80
 8012376:	a91f      	add	r1, sp, #124	; 0x7c
 8012378:	4620      	mov	r0, r4
 801237a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801237e:	f002 f9e9 	bl	8014754 <__d2b>
 8012382:	901e      	str	r0, [sp, #120]	; 0x78
 8012384:	2800      	cmp	r0, #0
 8012386:	f43f aefb 	beq.w	8012180 <_strtod_l+0x498>
 801238a:	2101      	movs	r1, #1
 801238c:	4620      	mov	r0, r4
 801238e:	f001 ff3f 	bl	8014210 <__i2b>
 8012392:	4606      	mov	r6, r0
 8012394:	2800      	cmp	r0, #0
 8012396:	f43f aef3 	beq.w	8012180 <_strtod_l+0x498>
 801239a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801239c:	9904      	ldr	r1, [sp, #16]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	bfab      	itete	ge
 80123a2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80123a4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80123a6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80123a8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80123ac:	bfac      	ite	ge
 80123ae:	eb03 0902 	addge.w	r9, r3, r2
 80123b2:	1ad7      	sublt	r7, r2, r3
 80123b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80123b6:	eba3 0801 	sub.w	r8, r3, r1
 80123ba:	4490      	add	r8, r2
 80123bc:	4ba3      	ldr	r3, [pc, #652]	; (801264c <_strtod_l+0x964>)
 80123be:	f108 38ff 	add.w	r8, r8, #4294967295
 80123c2:	4598      	cmp	r8, r3
 80123c4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80123c8:	f280 80cc 	bge.w	8012564 <_strtod_l+0x87c>
 80123cc:	eba3 0308 	sub.w	r3, r3, r8
 80123d0:	2b1f      	cmp	r3, #31
 80123d2:	eba2 0203 	sub.w	r2, r2, r3
 80123d6:	f04f 0101 	mov.w	r1, #1
 80123da:	f300 80b6 	bgt.w	801254a <_strtod_l+0x862>
 80123de:	fa01 f303 	lsl.w	r3, r1, r3
 80123e2:	9311      	str	r3, [sp, #68]	; 0x44
 80123e4:	2300      	movs	r3, #0
 80123e6:	930c      	str	r3, [sp, #48]	; 0x30
 80123e8:	eb09 0802 	add.w	r8, r9, r2
 80123ec:	9b04      	ldr	r3, [sp, #16]
 80123ee:	45c1      	cmp	r9, r8
 80123f0:	4417      	add	r7, r2
 80123f2:	441f      	add	r7, r3
 80123f4:	464b      	mov	r3, r9
 80123f6:	bfa8      	it	ge
 80123f8:	4643      	movge	r3, r8
 80123fa:	42bb      	cmp	r3, r7
 80123fc:	bfa8      	it	ge
 80123fe:	463b      	movge	r3, r7
 8012400:	2b00      	cmp	r3, #0
 8012402:	bfc2      	ittt	gt
 8012404:	eba8 0803 	subgt.w	r8, r8, r3
 8012408:	1aff      	subgt	r7, r7, r3
 801240a:	eba9 0903 	subgt.w	r9, r9, r3
 801240e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012410:	2b00      	cmp	r3, #0
 8012412:	dd17      	ble.n	8012444 <_strtod_l+0x75c>
 8012414:	4631      	mov	r1, r6
 8012416:	461a      	mov	r2, r3
 8012418:	4620      	mov	r0, r4
 801241a:	f001 ffb5 	bl	8014388 <__pow5mult>
 801241e:	4606      	mov	r6, r0
 8012420:	2800      	cmp	r0, #0
 8012422:	f43f aead 	beq.w	8012180 <_strtod_l+0x498>
 8012426:	4601      	mov	r1, r0
 8012428:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801242a:	4620      	mov	r0, r4
 801242c:	f001 ff06 	bl	801423c <__multiply>
 8012430:	900f      	str	r0, [sp, #60]	; 0x3c
 8012432:	2800      	cmp	r0, #0
 8012434:	f43f aea4 	beq.w	8012180 <_strtod_l+0x498>
 8012438:	991e      	ldr	r1, [sp, #120]	; 0x78
 801243a:	4620      	mov	r0, r4
 801243c:	f001 fde2 	bl	8014004 <_Bfree>
 8012440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012442:	931e      	str	r3, [sp, #120]	; 0x78
 8012444:	f1b8 0f00 	cmp.w	r8, #0
 8012448:	f300 8091 	bgt.w	801256e <_strtod_l+0x886>
 801244c:	9b08      	ldr	r3, [sp, #32]
 801244e:	2b00      	cmp	r3, #0
 8012450:	dd08      	ble.n	8012464 <_strtod_l+0x77c>
 8012452:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012454:	9907      	ldr	r1, [sp, #28]
 8012456:	4620      	mov	r0, r4
 8012458:	f001 ff96 	bl	8014388 <__pow5mult>
 801245c:	9007      	str	r0, [sp, #28]
 801245e:	2800      	cmp	r0, #0
 8012460:	f43f ae8e 	beq.w	8012180 <_strtod_l+0x498>
 8012464:	2f00      	cmp	r7, #0
 8012466:	dd08      	ble.n	801247a <_strtod_l+0x792>
 8012468:	9907      	ldr	r1, [sp, #28]
 801246a:	463a      	mov	r2, r7
 801246c:	4620      	mov	r0, r4
 801246e:	f001 ffe5 	bl	801443c <__lshift>
 8012472:	9007      	str	r0, [sp, #28]
 8012474:	2800      	cmp	r0, #0
 8012476:	f43f ae83 	beq.w	8012180 <_strtod_l+0x498>
 801247a:	f1b9 0f00 	cmp.w	r9, #0
 801247e:	dd08      	ble.n	8012492 <_strtod_l+0x7aa>
 8012480:	4631      	mov	r1, r6
 8012482:	464a      	mov	r2, r9
 8012484:	4620      	mov	r0, r4
 8012486:	f001 ffd9 	bl	801443c <__lshift>
 801248a:	4606      	mov	r6, r0
 801248c:	2800      	cmp	r0, #0
 801248e:	f43f ae77 	beq.w	8012180 <_strtod_l+0x498>
 8012492:	9a07      	ldr	r2, [sp, #28]
 8012494:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012496:	4620      	mov	r0, r4
 8012498:	f002 f858 	bl	801454c <__mdiff>
 801249c:	4605      	mov	r5, r0
 801249e:	2800      	cmp	r0, #0
 80124a0:	f43f ae6e 	beq.w	8012180 <_strtod_l+0x498>
 80124a4:	68c3      	ldr	r3, [r0, #12]
 80124a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80124a8:	2300      	movs	r3, #0
 80124aa:	60c3      	str	r3, [r0, #12]
 80124ac:	4631      	mov	r1, r6
 80124ae:	f002 f831 	bl	8014514 <__mcmp>
 80124b2:	2800      	cmp	r0, #0
 80124b4:	da65      	bge.n	8012582 <_strtod_l+0x89a>
 80124b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124b8:	ea53 030a 	orrs.w	r3, r3, sl
 80124bc:	f040 8087 	bne.w	80125ce <_strtod_l+0x8e6>
 80124c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	f040 8082 	bne.w	80125ce <_strtod_l+0x8e6>
 80124ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80124ce:	0d1b      	lsrs	r3, r3, #20
 80124d0:	051b      	lsls	r3, r3, #20
 80124d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80124d6:	d97a      	bls.n	80125ce <_strtod_l+0x8e6>
 80124d8:	696b      	ldr	r3, [r5, #20]
 80124da:	b913      	cbnz	r3, 80124e2 <_strtod_l+0x7fa>
 80124dc:	692b      	ldr	r3, [r5, #16]
 80124de:	2b01      	cmp	r3, #1
 80124e0:	dd75      	ble.n	80125ce <_strtod_l+0x8e6>
 80124e2:	4629      	mov	r1, r5
 80124e4:	2201      	movs	r2, #1
 80124e6:	4620      	mov	r0, r4
 80124e8:	f001 ffa8 	bl	801443c <__lshift>
 80124ec:	4631      	mov	r1, r6
 80124ee:	4605      	mov	r5, r0
 80124f0:	f002 f810 	bl	8014514 <__mcmp>
 80124f4:	2800      	cmp	r0, #0
 80124f6:	dd6a      	ble.n	80125ce <_strtod_l+0x8e6>
 80124f8:	9904      	ldr	r1, [sp, #16]
 80124fa:	4a55      	ldr	r2, [pc, #340]	; (8012650 <_strtod_l+0x968>)
 80124fc:	465b      	mov	r3, fp
 80124fe:	2900      	cmp	r1, #0
 8012500:	f000 8085 	beq.w	801260e <_strtod_l+0x926>
 8012504:	ea02 010b 	and.w	r1, r2, fp
 8012508:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801250c:	dc7f      	bgt.n	801260e <_strtod_l+0x926>
 801250e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012512:	f77f aeaa 	ble.w	801226a <_strtod_l+0x582>
 8012516:	4a4f      	ldr	r2, [pc, #316]	; (8012654 <_strtod_l+0x96c>)
 8012518:	2300      	movs	r3, #0
 801251a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801251e:	4650      	mov	r0, sl
 8012520:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012524:	4659      	mov	r1, fp
 8012526:	f7ee f87f 	bl	8000628 <__aeabi_dmul>
 801252a:	460b      	mov	r3, r1
 801252c:	4303      	orrs	r3, r0
 801252e:	bf08      	it	eq
 8012530:	2322      	moveq	r3, #34	; 0x22
 8012532:	4682      	mov	sl, r0
 8012534:	468b      	mov	fp, r1
 8012536:	bf08      	it	eq
 8012538:	6023      	streq	r3, [r4, #0]
 801253a:	e62b      	b.n	8012194 <_strtod_l+0x4ac>
 801253c:	f04f 32ff 	mov.w	r2, #4294967295
 8012540:	fa02 f303 	lsl.w	r3, r2, r3
 8012544:	ea03 0a0a 	and.w	sl, r3, sl
 8012548:	e6de      	b.n	8012308 <_strtod_l+0x620>
 801254a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801254e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012552:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8012556:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801255a:	fa01 f308 	lsl.w	r3, r1, r8
 801255e:	930c      	str	r3, [sp, #48]	; 0x30
 8012560:	9111      	str	r1, [sp, #68]	; 0x44
 8012562:	e741      	b.n	80123e8 <_strtod_l+0x700>
 8012564:	2300      	movs	r3, #0
 8012566:	930c      	str	r3, [sp, #48]	; 0x30
 8012568:	2301      	movs	r3, #1
 801256a:	9311      	str	r3, [sp, #68]	; 0x44
 801256c:	e73c      	b.n	80123e8 <_strtod_l+0x700>
 801256e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012570:	4642      	mov	r2, r8
 8012572:	4620      	mov	r0, r4
 8012574:	f001 ff62 	bl	801443c <__lshift>
 8012578:	901e      	str	r0, [sp, #120]	; 0x78
 801257a:	2800      	cmp	r0, #0
 801257c:	f47f af66 	bne.w	801244c <_strtod_l+0x764>
 8012580:	e5fe      	b.n	8012180 <_strtod_l+0x498>
 8012582:	465f      	mov	r7, fp
 8012584:	d16e      	bne.n	8012664 <_strtod_l+0x97c>
 8012586:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801258c:	b342      	cbz	r2, 80125e0 <_strtod_l+0x8f8>
 801258e:	4a32      	ldr	r2, [pc, #200]	; (8012658 <_strtod_l+0x970>)
 8012590:	4293      	cmp	r3, r2
 8012592:	d128      	bne.n	80125e6 <_strtod_l+0x8fe>
 8012594:	9b04      	ldr	r3, [sp, #16]
 8012596:	4650      	mov	r0, sl
 8012598:	b1eb      	cbz	r3, 80125d6 <_strtod_l+0x8ee>
 801259a:	4a2d      	ldr	r2, [pc, #180]	; (8012650 <_strtod_l+0x968>)
 801259c:	403a      	ands	r2, r7
 801259e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80125a2:	f04f 31ff 	mov.w	r1, #4294967295
 80125a6:	d819      	bhi.n	80125dc <_strtod_l+0x8f4>
 80125a8:	0d12      	lsrs	r2, r2, #20
 80125aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80125ae:	fa01 f303 	lsl.w	r3, r1, r3
 80125b2:	4298      	cmp	r0, r3
 80125b4:	d117      	bne.n	80125e6 <_strtod_l+0x8fe>
 80125b6:	4b29      	ldr	r3, [pc, #164]	; (801265c <_strtod_l+0x974>)
 80125b8:	429f      	cmp	r7, r3
 80125ba:	d102      	bne.n	80125c2 <_strtod_l+0x8da>
 80125bc:	3001      	adds	r0, #1
 80125be:	f43f addf 	beq.w	8012180 <_strtod_l+0x498>
 80125c2:	4b23      	ldr	r3, [pc, #140]	; (8012650 <_strtod_l+0x968>)
 80125c4:	403b      	ands	r3, r7
 80125c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80125ca:	f04f 0a00 	mov.w	sl, #0
 80125ce:	9b04      	ldr	r3, [sp, #16]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d1a0      	bne.n	8012516 <_strtod_l+0x82e>
 80125d4:	e5de      	b.n	8012194 <_strtod_l+0x4ac>
 80125d6:	f04f 33ff 	mov.w	r3, #4294967295
 80125da:	e7ea      	b.n	80125b2 <_strtod_l+0x8ca>
 80125dc:	460b      	mov	r3, r1
 80125de:	e7e8      	b.n	80125b2 <_strtod_l+0x8ca>
 80125e0:	ea53 030a 	orrs.w	r3, r3, sl
 80125e4:	d088      	beq.n	80124f8 <_strtod_l+0x810>
 80125e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125e8:	b1db      	cbz	r3, 8012622 <_strtod_l+0x93a>
 80125ea:	423b      	tst	r3, r7
 80125ec:	d0ef      	beq.n	80125ce <_strtod_l+0x8e6>
 80125ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125f0:	9a04      	ldr	r2, [sp, #16]
 80125f2:	4650      	mov	r0, sl
 80125f4:	4659      	mov	r1, fp
 80125f6:	b1c3      	cbz	r3, 801262a <_strtod_l+0x942>
 80125f8:	f7ff fb5a 	bl	8011cb0 <sulp>
 80125fc:	4602      	mov	r2, r0
 80125fe:	460b      	mov	r3, r1
 8012600:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012604:	f7ed fe5a 	bl	80002bc <__adddf3>
 8012608:	4682      	mov	sl, r0
 801260a:	468b      	mov	fp, r1
 801260c:	e7df      	b.n	80125ce <_strtod_l+0x8e6>
 801260e:	4013      	ands	r3, r2
 8012610:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012614:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012618:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801261c:	f04f 3aff 	mov.w	sl, #4294967295
 8012620:	e7d5      	b.n	80125ce <_strtod_l+0x8e6>
 8012622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012624:	ea13 0f0a 	tst.w	r3, sl
 8012628:	e7e0      	b.n	80125ec <_strtod_l+0x904>
 801262a:	f7ff fb41 	bl	8011cb0 <sulp>
 801262e:	4602      	mov	r2, r0
 8012630:	460b      	mov	r3, r1
 8012632:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012636:	f7ed fe3f 	bl	80002b8 <__aeabi_dsub>
 801263a:	2200      	movs	r2, #0
 801263c:	2300      	movs	r3, #0
 801263e:	4682      	mov	sl, r0
 8012640:	468b      	mov	fp, r1
 8012642:	f7ee fa59 	bl	8000af8 <__aeabi_dcmpeq>
 8012646:	2800      	cmp	r0, #0
 8012648:	d0c1      	beq.n	80125ce <_strtod_l+0x8e6>
 801264a:	e60e      	b.n	801226a <_strtod_l+0x582>
 801264c:	fffffc02 	.word	0xfffffc02
 8012650:	7ff00000 	.word	0x7ff00000
 8012654:	39500000 	.word	0x39500000
 8012658:	000fffff 	.word	0x000fffff
 801265c:	7fefffff 	.word	0x7fefffff
 8012660:	08029468 	.word	0x08029468
 8012664:	4631      	mov	r1, r6
 8012666:	4628      	mov	r0, r5
 8012668:	f002 f8d0 	bl	801480c <__ratio>
 801266c:	ec59 8b10 	vmov	r8, r9, d0
 8012670:	ee10 0a10 	vmov	r0, s0
 8012674:	2200      	movs	r2, #0
 8012676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801267a:	4649      	mov	r1, r9
 801267c:	f7ee fa50 	bl	8000b20 <__aeabi_dcmple>
 8012680:	2800      	cmp	r0, #0
 8012682:	d07c      	beq.n	801277e <_strtod_l+0xa96>
 8012684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012686:	2b00      	cmp	r3, #0
 8012688:	d04c      	beq.n	8012724 <_strtod_l+0xa3c>
 801268a:	4b95      	ldr	r3, [pc, #596]	; (80128e0 <_strtod_l+0xbf8>)
 801268c:	2200      	movs	r2, #0
 801268e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012692:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80128e0 <_strtod_l+0xbf8>
 8012696:	f04f 0800 	mov.w	r8, #0
 801269a:	4b92      	ldr	r3, [pc, #584]	; (80128e4 <_strtod_l+0xbfc>)
 801269c:	403b      	ands	r3, r7
 801269e:	9311      	str	r3, [sp, #68]	; 0x44
 80126a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80126a2:	4b91      	ldr	r3, [pc, #580]	; (80128e8 <_strtod_l+0xc00>)
 80126a4:	429a      	cmp	r2, r3
 80126a6:	f040 80b2 	bne.w	801280e <_strtod_l+0xb26>
 80126aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80126ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80126b2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80126b6:	ec4b ab10 	vmov	d0, sl, fp
 80126ba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80126be:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80126c2:	f001 ffcb 	bl	801465c <__ulp>
 80126c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80126ca:	ec53 2b10 	vmov	r2, r3, d0
 80126ce:	f7ed ffab 	bl	8000628 <__aeabi_dmul>
 80126d2:	4652      	mov	r2, sl
 80126d4:	465b      	mov	r3, fp
 80126d6:	f7ed fdf1 	bl	80002bc <__adddf3>
 80126da:	460b      	mov	r3, r1
 80126dc:	4981      	ldr	r1, [pc, #516]	; (80128e4 <_strtod_l+0xbfc>)
 80126de:	4a83      	ldr	r2, [pc, #524]	; (80128ec <_strtod_l+0xc04>)
 80126e0:	4019      	ands	r1, r3
 80126e2:	4291      	cmp	r1, r2
 80126e4:	4682      	mov	sl, r0
 80126e6:	d95e      	bls.n	80127a6 <_strtod_l+0xabe>
 80126e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126ea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80126ee:	4293      	cmp	r3, r2
 80126f0:	d103      	bne.n	80126fa <_strtod_l+0xa12>
 80126f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126f4:	3301      	adds	r3, #1
 80126f6:	f43f ad43 	beq.w	8012180 <_strtod_l+0x498>
 80126fa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80128f8 <_strtod_l+0xc10>
 80126fe:	f04f 3aff 	mov.w	sl, #4294967295
 8012702:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012704:	4620      	mov	r0, r4
 8012706:	f001 fc7d 	bl	8014004 <_Bfree>
 801270a:	9907      	ldr	r1, [sp, #28]
 801270c:	4620      	mov	r0, r4
 801270e:	f001 fc79 	bl	8014004 <_Bfree>
 8012712:	4631      	mov	r1, r6
 8012714:	4620      	mov	r0, r4
 8012716:	f001 fc75 	bl	8014004 <_Bfree>
 801271a:	4629      	mov	r1, r5
 801271c:	4620      	mov	r0, r4
 801271e:	f001 fc71 	bl	8014004 <_Bfree>
 8012722:	e613      	b.n	801234c <_strtod_l+0x664>
 8012724:	f1ba 0f00 	cmp.w	sl, #0
 8012728:	d11b      	bne.n	8012762 <_strtod_l+0xa7a>
 801272a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801272e:	b9f3      	cbnz	r3, 801276e <_strtod_l+0xa86>
 8012730:	4b6b      	ldr	r3, [pc, #428]	; (80128e0 <_strtod_l+0xbf8>)
 8012732:	2200      	movs	r2, #0
 8012734:	4640      	mov	r0, r8
 8012736:	4649      	mov	r1, r9
 8012738:	f7ee f9e8 	bl	8000b0c <__aeabi_dcmplt>
 801273c:	b9d0      	cbnz	r0, 8012774 <_strtod_l+0xa8c>
 801273e:	4640      	mov	r0, r8
 8012740:	4649      	mov	r1, r9
 8012742:	4b6b      	ldr	r3, [pc, #428]	; (80128f0 <_strtod_l+0xc08>)
 8012744:	2200      	movs	r2, #0
 8012746:	f7ed ff6f 	bl	8000628 <__aeabi_dmul>
 801274a:	4680      	mov	r8, r0
 801274c:	4689      	mov	r9, r1
 801274e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012752:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8012756:	931b      	str	r3, [sp, #108]	; 0x6c
 8012758:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801275c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012760:	e79b      	b.n	801269a <_strtod_l+0x9b2>
 8012762:	f1ba 0f01 	cmp.w	sl, #1
 8012766:	d102      	bne.n	801276e <_strtod_l+0xa86>
 8012768:	2f00      	cmp	r7, #0
 801276a:	f43f ad7e 	beq.w	801226a <_strtod_l+0x582>
 801276e:	4b61      	ldr	r3, [pc, #388]	; (80128f4 <_strtod_l+0xc0c>)
 8012770:	2200      	movs	r2, #0
 8012772:	e78c      	b.n	801268e <_strtod_l+0x9a6>
 8012774:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80128f0 <_strtod_l+0xc08>
 8012778:	f04f 0800 	mov.w	r8, #0
 801277c:	e7e7      	b.n	801274e <_strtod_l+0xa66>
 801277e:	4b5c      	ldr	r3, [pc, #368]	; (80128f0 <_strtod_l+0xc08>)
 8012780:	4640      	mov	r0, r8
 8012782:	4649      	mov	r1, r9
 8012784:	2200      	movs	r2, #0
 8012786:	f7ed ff4f 	bl	8000628 <__aeabi_dmul>
 801278a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801278c:	4680      	mov	r8, r0
 801278e:	4689      	mov	r9, r1
 8012790:	b933      	cbnz	r3, 80127a0 <_strtod_l+0xab8>
 8012792:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012796:	9012      	str	r0, [sp, #72]	; 0x48
 8012798:	9313      	str	r3, [sp, #76]	; 0x4c
 801279a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801279e:	e7dd      	b.n	801275c <_strtod_l+0xa74>
 80127a0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80127a4:	e7f9      	b.n	801279a <_strtod_l+0xab2>
 80127a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80127aa:	9b04      	ldr	r3, [sp, #16]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d1a8      	bne.n	8012702 <_strtod_l+0xa1a>
 80127b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80127b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80127b6:	0d1b      	lsrs	r3, r3, #20
 80127b8:	051b      	lsls	r3, r3, #20
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d1a1      	bne.n	8012702 <_strtod_l+0xa1a>
 80127be:	4640      	mov	r0, r8
 80127c0:	4649      	mov	r1, r9
 80127c2:	f7ee fa91 	bl	8000ce8 <__aeabi_d2lz>
 80127c6:	f7ed ff01 	bl	80005cc <__aeabi_l2d>
 80127ca:	4602      	mov	r2, r0
 80127cc:	460b      	mov	r3, r1
 80127ce:	4640      	mov	r0, r8
 80127d0:	4649      	mov	r1, r9
 80127d2:	f7ed fd71 	bl	80002b8 <__aeabi_dsub>
 80127d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80127d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80127dc:	ea43 030a 	orr.w	r3, r3, sl
 80127e0:	4313      	orrs	r3, r2
 80127e2:	4680      	mov	r8, r0
 80127e4:	4689      	mov	r9, r1
 80127e6:	d053      	beq.n	8012890 <_strtod_l+0xba8>
 80127e8:	a335      	add	r3, pc, #212	; (adr r3, 80128c0 <_strtod_l+0xbd8>)
 80127ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ee:	f7ee f98d 	bl	8000b0c <__aeabi_dcmplt>
 80127f2:	2800      	cmp	r0, #0
 80127f4:	f47f acce 	bne.w	8012194 <_strtod_l+0x4ac>
 80127f8:	a333      	add	r3, pc, #204	; (adr r3, 80128c8 <_strtod_l+0xbe0>)
 80127fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127fe:	4640      	mov	r0, r8
 8012800:	4649      	mov	r1, r9
 8012802:	f7ee f9a1 	bl	8000b48 <__aeabi_dcmpgt>
 8012806:	2800      	cmp	r0, #0
 8012808:	f43f af7b 	beq.w	8012702 <_strtod_l+0xa1a>
 801280c:	e4c2      	b.n	8012194 <_strtod_l+0x4ac>
 801280e:	9b04      	ldr	r3, [sp, #16]
 8012810:	b333      	cbz	r3, 8012860 <_strtod_l+0xb78>
 8012812:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012814:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012818:	d822      	bhi.n	8012860 <_strtod_l+0xb78>
 801281a:	a32d      	add	r3, pc, #180	; (adr r3, 80128d0 <_strtod_l+0xbe8>)
 801281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012820:	4640      	mov	r0, r8
 8012822:	4649      	mov	r1, r9
 8012824:	f7ee f97c 	bl	8000b20 <__aeabi_dcmple>
 8012828:	b1a0      	cbz	r0, 8012854 <_strtod_l+0xb6c>
 801282a:	4649      	mov	r1, r9
 801282c:	4640      	mov	r0, r8
 801282e:	f7ee f9d3 	bl	8000bd8 <__aeabi_d2uiz>
 8012832:	2801      	cmp	r0, #1
 8012834:	bf38      	it	cc
 8012836:	2001      	movcc	r0, #1
 8012838:	f7ed fe7c 	bl	8000534 <__aeabi_ui2d>
 801283c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801283e:	4680      	mov	r8, r0
 8012840:	4689      	mov	r9, r1
 8012842:	bb13      	cbnz	r3, 801288a <_strtod_l+0xba2>
 8012844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012848:	9014      	str	r0, [sp, #80]	; 0x50
 801284a:	9315      	str	r3, [sp, #84]	; 0x54
 801284c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012850:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012856:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012858:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801285c:	1a9b      	subs	r3, r3, r2
 801285e:	930d      	str	r3, [sp, #52]	; 0x34
 8012860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012864:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012868:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801286c:	f001 fef6 	bl	801465c <__ulp>
 8012870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012874:	ec53 2b10 	vmov	r2, r3, d0
 8012878:	f7ed fed6 	bl	8000628 <__aeabi_dmul>
 801287c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012880:	f7ed fd1c 	bl	80002bc <__adddf3>
 8012884:	4682      	mov	sl, r0
 8012886:	468b      	mov	fp, r1
 8012888:	e78f      	b.n	80127aa <_strtod_l+0xac2>
 801288a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801288e:	e7dd      	b.n	801284c <_strtod_l+0xb64>
 8012890:	a311      	add	r3, pc, #68	; (adr r3, 80128d8 <_strtod_l+0xbf0>)
 8012892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012896:	f7ee f939 	bl	8000b0c <__aeabi_dcmplt>
 801289a:	e7b4      	b.n	8012806 <_strtod_l+0xb1e>
 801289c:	2300      	movs	r3, #0
 801289e:	930e      	str	r3, [sp, #56]	; 0x38
 80128a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80128a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128a4:	6013      	str	r3, [r2, #0]
 80128a6:	f7ff ba65 	b.w	8011d74 <_strtod_l+0x8c>
 80128aa:	2b65      	cmp	r3, #101	; 0x65
 80128ac:	f43f ab5d 	beq.w	8011f6a <_strtod_l+0x282>
 80128b0:	2b45      	cmp	r3, #69	; 0x45
 80128b2:	f43f ab5a 	beq.w	8011f6a <_strtod_l+0x282>
 80128b6:	2201      	movs	r2, #1
 80128b8:	f7ff bb92 	b.w	8011fe0 <_strtod_l+0x2f8>
 80128bc:	f3af 8000 	nop.w
 80128c0:	94a03595 	.word	0x94a03595
 80128c4:	3fdfffff 	.word	0x3fdfffff
 80128c8:	35afe535 	.word	0x35afe535
 80128cc:	3fe00000 	.word	0x3fe00000
 80128d0:	ffc00000 	.word	0xffc00000
 80128d4:	41dfffff 	.word	0x41dfffff
 80128d8:	94a03595 	.word	0x94a03595
 80128dc:	3fcfffff 	.word	0x3fcfffff
 80128e0:	3ff00000 	.word	0x3ff00000
 80128e4:	7ff00000 	.word	0x7ff00000
 80128e8:	7fe00000 	.word	0x7fe00000
 80128ec:	7c9fffff 	.word	0x7c9fffff
 80128f0:	3fe00000 	.word	0x3fe00000
 80128f4:	bff00000 	.word	0xbff00000
 80128f8:	7fefffff 	.word	0x7fefffff

080128fc <_strtod_r>:
 80128fc:	4b01      	ldr	r3, [pc, #4]	; (8012904 <_strtod_r+0x8>)
 80128fe:	f7ff b9f3 	b.w	8011ce8 <_strtod_l>
 8012902:	bf00      	nop
 8012904:	200000a8 	.word	0x200000a8

08012908 <strtod>:
 8012908:	460a      	mov	r2, r1
 801290a:	4601      	mov	r1, r0
 801290c:	4802      	ldr	r0, [pc, #8]	; (8012918 <strtod+0x10>)
 801290e:	4b03      	ldr	r3, [pc, #12]	; (801291c <strtod+0x14>)
 8012910:	6800      	ldr	r0, [r0, #0]
 8012912:	f7ff b9e9 	b.w	8011ce8 <_strtod_l>
 8012916:	bf00      	nop
 8012918:	20000040 	.word	0x20000040
 801291c:	200000a8 	.word	0x200000a8

08012920 <strtok>:
 8012920:	4b16      	ldr	r3, [pc, #88]	; (801297c <strtok+0x5c>)
 8012922:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012924:	681e      	ldr	r6, [r3, #0]
 8012926:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012928:	4605      	mov	r5, r0
 801292a:	b9fc      	cbnz	r4, 801296c <strtok+0x4c>
 801292c:	2050      	movs	r0, #80	; 0x50
 801292e:	9101      	str	r1, [sp, #4]
 8012930:	f001 fb00 	bl	8013f34 <malloc>
 8012934:	9901      	ldr	r1, [sp, #4]
 8012936:	65b0      	str	r0, [r6, #88]	; 0x58
 8012938:	4602      	mov	r2, r0
 801293a:	b920      	cbnz	r0, 8012946 <strtok+0x26>
 801293c:	4b10      	ldr	r3, [pc, #64]	; (8012980 <strtok+0x60>)
 801293e:	4811      	ldr	r0, [pc, #68]	; (8012984 <strtok+0x64>)
 8012940:	2157      	movs	r1, #87	; 0x57
 8012942:	f000 f8d9 	bl	8012af8 <__assert_func>
 8012946:	e9c0 4400 	strd	r4, r4, [r0]
 801294a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801294e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012952:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012956:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801295a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801295e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012962:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012966:	6184      	str	r4, [r0, #24]
 8012968:	7704      	strb	r4, [r0, #28]
 801296a:	6244      	str	r4, [r0, #36]	; 0x24
 801296c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801296e:	2301      	movs	r3, #1
 8012970:	4628      	mov	r0, r5
 8012972:	b002      	add	sp, #8
 8012974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012978:	f000 b806 	b.w	8012988 <__strtok_r>
 801297c:	20000040 	.word	0x20000040
 8012980:	08029490 	.word	0x08029490
 8012984:	080294a7 	.word	0x080294a7

08012988 <__strtok_r>:
 8012988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801298a:	b908      	cbnz	r0, 8012990 <__strtok_r+0x8>
 801298c:	6810      	ldr	r0, [r2, #0]
 801298e:	b188      	cbz	r0, 80129b4 <__strtok_r+0x2c>
 8012990:	4604      	mov	r4, r0
 8012992:	4620      	mov	r0, r4
 8012994:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012998:	460f      	mov	r7, r1
 801299a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801299e:	b91e      	cbnz	r6, 80129a8 <__strtok_r+0x20>
 80129a0:	b965      	cbnz	r5, 80129bc <__strtok_r+0x34>
 80129a2:	6015      	str	r5, [r2, #0]
 80129a4:	4628      	mov	r0, r5
 80129a6:	e005      	b.n	80129b4 <__strtok_r+0x2c>
 80129a8:	42b5      	cmp	r5, r6
 80129aa:	d1f6      	bne.n	801299a <__strtok_r+0x12>
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d1f0      	bne.n	8012992 <__strtok_r+0xa>
 80129b0:	6014      	str	r4, [r2, #0]
 80129b2:	7003      	strb	r3, [r0, #0]
 80129b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129b6:	461c      	mov	r4, r3
 80129b8:	e00c      	b.n	80129d4 <__strtok_r+0x4c>
 80129ba:	b915      	cbnz	r5, 80129c2 <__strtok_r+0x3a>
 80129bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80129c0:	460e      	mov	r6, r1
 80129c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80129c6:	42ab      	cmp	r3, r5
 80129c8:	d1f7      	bne.n	80129ba <__strtok_r+0x32>
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d0f3      	beq.n	80129b6 <__strtok_r+0x2e>
 80129ce:	2300      	movs	r3, #0
 80129d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80129d4:	6014      	str	r4, [r2, #0]
 80129d6:	e7ed      	b.n	80129b4 <__strtok_r+0x2c>

080129d8 <_strtol_l.isra.0>:
 80129d8:	2b01      	cmp	r3, #1
 80129da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129de:	d001      	beq.n	80129e4 <_strtol_l.isra.0+0xc>
 80129e0:	2b24      	cmp	r3, #36	; 0x24
 80129e2:	d906      	bls.n	80129f2 <_strtol_l.isra.0+0x1a>
 80129e4:	f7fe fa92 	bl	8010f0c <__errno>
 80129e8:	2316      	movs	r3, #22
 80129ea:	6003      	str	r3, [r0, #0]
 80129ec:	2000      	movs	r0, #0
 80129ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129f2:	4f3a      	ldr	r7, [pc, #232]	; (8012adc <_strtol_l.isra.0+0x104>)
 80129f4:	468e      	mov	lr, r1
 80129f6:	4676      	mov	r6, lr
 80129f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80129fc:	5de5      	ldrb	r5, [r4, r7]
 80129fe:	f015 0508 	ands.w	r5, r5, #8
 8012a02:	d1f8      	bne.n	80129f6 <_strtol_l.isra.0+0x1e>
 8012a04:	2c2d      	cmp	r4, #45	; 0x2d
 8012a06:	d134      	bne.n	8012a72 <_strtol_l.isra.0+0x9a>
 8012a08:	f89e 4000 	ldrb.w	r4, [lr]
 8012a0c:	f04f 0801 	mov.w	r8, #1
 8012a10:	f106 0e02 	add.w	lr, r6, #2
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d05c      	beq.n	8012ad2 <_strtol_l.isra.0+0xfa>
 8012a18:	2b10      	cmp	r3, #16
 8012a1a:	d10c      	bne.n	8012a36 <_strtol_l.isra.0+0x5e>
 8012a1c:	2c30      	cmp	r4, #48	; 0x30
 8012a1e:	d10a      	bne.n	8012a36 <_strtol_l.isra.0+0x5e>
 8012a20:	f89e 4000 	ldrb.w	r4, [lr]
 8012a24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012a28:	2c58      	cmp	r4, #88	; 0x58
 8012a2a:	d14d      	bne.n	8012ac8 <_strtol_l.isra.0+0xf0>
 8012a2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8012a30:	2310      	movs	r3, #16
 8012a32:	f10e 0e02 	add.w	lr, lr, #2
 8012a36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8012a3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012a3e:	2600      	movs	r6, #0
 8012a40:	fbbc f9f3 	udiv	r9, ip, r3
 8012a44:	4635      	mov	r5, r6
 8012a46:	fb03 ca19 	mls	sl, r3, r9, ip
 8012a4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012a4e:	2f09      	cmp	r7, #9
 8012a50:	d818      	bhi.n	8012a84 <_strtol_l.isra.0+0xac>
 8012a52:	463c      	mov	r4, r7
 8012a54:	42a3      	cmp	r3, r4
 8012a56:	dd24      	ble.n	8012aa2 <_strtol_l.isra.0+0xca>
 8012a58:	2e00      	cmp	r6, #0
 8012a5a:	db1f      	blt.n	8012a9c <_strtol_l.isra.0+0xc4>
 8012a5c:	45a9      	cmp	r9, r5
 8012a5e:	d31d      	bcc.n	8012a9c <_strtol_l.isra.0+0xc4>
 8012a60:	d101      	bne.n	8012a66 <_strtol_l.isra.0+0x8e>
 8012a62:	45a2      	cmp	sl, r4
 8012a64:	db1a      	blt.n	8012a9c <_strtol_l.isra.0+0xc4>
 8012a66:	fb05 4503 	mla	r5, r5, r3, r4
 8012a6a:	2601      	movs	r6, #1
 8012a6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012a70:	e7eb      	b.n	8012a4a <_strtol_l.isra.0+0x72>
 8012a72:	2c2b      	cmp	r4, #43	; 0x2b
 8012a74:	bf08      	it	eq
 8012a76:	f89e 4000 	ldrbeq.w	r4, [lr]
 8012a7a:	46a8      	mov	r8, r5
 8012a7c:	bf08      	it	eq
 8012a7e:	f106 0e02 	addeq.w	lr, r6, #2
 8012a82:	e7c7      	b.n	8012a14 <_strtol_l.isra.0+0x3c>
 8012a84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012a88:	2f19      	cmp	r7, #25
 8012a8a:	d801      	bhi.n	8012a90 <_strtol_l.isra.0+0xb8>
 8012a8c:	3c37      	subs	r4, #55	; 0x37
 8012a8e:	e7e1      	b.n	8012a54 <_strtol_l.isra.0+0x7c>
 8012a90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012a94:	2f19      	cmp	r7, #25
 8012a96:	d804      	bhi.n	8012aa2 <_strtol_l.isra.0+0xca>
 8012a98:	3c57      	subs	r4, #87	; 0x57
 8012a9a:	e7db      	b.n	8012a54 <_strtol_l.isra.0+0x7c>
 8012a9c:	f04f 36ff 	mov.w	r6, #4294967295
 8012aa0:	e7e4      	b.n	8012a6c <_strtol_l.isra.0+0x94>
 8012aa2:	2e00      	cmp	r6, #0
 8012aa4:	da05      	bge.n	8012ab2 <_strtol_l.isra.0+0xda>
 8012aa6:	2322      	movs	r3, #34	; 0x22
 8012aa8:	6003      	str	r3, [r0, #0]
 8012aaa:	4665      	mov	r5, ip
 8012aac:	b942      	cbnz	r2, 8012ac0 <_strtol_l.isra.0+0xe8>
 8012aae:	4628      	mov	r0, r5
 8012ab0:	e79d      	b.n	80129ee <_strtol_l.isra.0+0x16>
 8012ab2:	f1b8 0f00 	cmp.w	r8, #0
 8012ab6:	d000      	beq.n	8012aba <_strtol_l.isra.0+0xe2>
 8012ab8:	426d      	negs	r5, r5
 8012aba:	2a00      	cmp	r2, #0
 8012abc:	d0f7      	beq.n	8012aae <_strtol_l.isra.0+0xd6>
 8012abe:	b10e      	cbz	r6, 8012ac4 <_strtol_l.isra.0+0xec>
 8012ac0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8012ac4:	6011      	str	r1, [r2, #0]
 8012ac6:	e7f2      	b.n	8012aae <_strtol_l.isra.0+0xd6>
 8012ac8:	2430      	movs	r4, #48	; 0x30
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d1b3      	bne.n	8012a36 <_strtol_l.isra.0+0x5e>
 8012ace:	2308      	movs	r3, #8
 8012ad0:	e7b1      	b.n	8012a36 <_strtol_l.isra.0+0x5e>
 8012ad2:	2c30      	cmp	r4, #48	; 0x30
 8012ad4:	d0a4      	beq.n	8012a20 <_strtol_l.isra.0+0x48>
 8012ad6:	230a      	movs	r3, #10
 8012ad8:	e7ad      	b.n	8012a36 <_strtol_l.isra.0+0x5e>
 8012ada:	bf00      	nop
 8012adc:	08029545 	.word	0x08029545

08012ae0 <_strtol_r>:
 8012ae0:	f7ff bf7a 	b.w	80129d8 <_strtol_l.isra.0>

08012ae4 <strtol>:
 8012ae4:	4613      	mov	r3, r2
 8012ae6:	460a      	mov	r2, r1
 8012ae8:	4601      	mov	r1, r0
 8012aea:	4802      	ldr	r0, [pc, #8]	; (8012af4 <strtol+0x10>)
 8012aec:	6800      	ldr	r0, [r0, #0]
 8012aee:	f7ff bf73 	b.w	80129d8 <_strtol_l.isra.0>
 8012af2:	bf00      	nop
 8012af4:	20000040 	.word	0x20000040

08012af8 <__assert_func>:
 8012af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012afa:	4614      	mov	r4, r2
 8012afc:	461a      	mov	r2, r3
 8012afe:	4b09      	ldr	r3, [pc, #36]	; (8012b24 <__assert_func+0x2c>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	4605      	mov	r5, r0
 8012b04:	68d8      	ldr	r0, [r3, #12]
 8012b06:	b14c      	cbz	r4, 8012b1c <__assert_func+0x24>
 8012b08:	4b07      	ldr	r3, [pc, #28]	; (8012b28 <__assert_func+0x30>)
 8012b0a:	9100      	str	r1, [sp, #0]
 8012b0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012b10:	4906      	ldr	r1, [pc, #24]	; (8012b2c <__assert_func+0x34>)
 8012b12:	462b      	mov	r3, r5
 8012b14:	f000 fe88 	bl	8013828 <fiprintf>
 8012b18:	f002 fb56 	bl	80151c8 <abort>
 8012b1c:	4b04      	ldr	r3, [pc, #16]	; (8012b30 <__assert_func+0x38>)
 8012b1e:	461c      	mov	r4, r3
 8012b20:	e7f3      	b.n	8012b0a <__assert_func+0x12>
 8012b22:	bf00      	nop
 8012b24:	20000040 	.word	0x20000040
 8012b28:	08029508 	.word	0x08029508
 8012b2c:	08029515 	.word	0x08029515
 8012b30:	08029543 	.word	0x08029543

08012b34 <quorem>:
 8012b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b38:	6903      	ldr	r3, [r0, #16]
 8012b3a:	690c      	ldr	r4, [r1, #16]
 8012b3c:	42a3      	cmp	r3, r4
 8012b3e:	4607      	mov	r7, r0
 8012b40:	f2c0 8081 	blt.w	8012c46 <quorem+0x112>
 8012b44:	3c01      	subs	r4, #1
 8012b46:	f101 0814 	add.w	r8, r1, #20
 8012b4a:	f100 0514 	add.w	r5, r0, #20
 8012b4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012b52:	9301      	str	r3, [sp, #4]
 8012b54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012b58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012b64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012b68:	fbb2 f6f3 	udiv	r6, r2, r3
 8012b6c:	d331      	bcc.n	8012bd2 <quorem+0x9e>
 8012b6e:	f04f 0e00 	mov.w	lr, #0
 8012b72:	4640      	mov	r0, r8
 8012b74:	46ac      	mov	ip, r5
 8012b76:	46f2      	mov	sl, lr
 8012b78:	f850 2b04 	ldr.w	r2, [r0], #4
 8012b7c:	b293      	uxth	r3, r2
 8012b7e:	fb06 e303 	mla	r3, r6, r3, lr
 8012b82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	ebaa 0303 	sub.w	r3, sl, r3
 8012b8c:	0c12      	lsrs	r2, r2, #16
 8012b8e:	f8dc a000 	ldr.w	sl, [ip]
 8012b92:	fb06 e202 	mla	r2, r6, r2, lr
 8012b96:	fa13 f38a 	uxtah	r3, r3, sl
 8012b9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012b9e:	fa1f fa82 	uxth.w	sl, r2
 8012ba2:	f8dc 2000 	ldr.w	r2, [ip]
 8012ba6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012baa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012bb4:	4581      	cmp	r9, r0
 8012bb6:	f84c 3b04 	str.w	r3, [ip], #4
 8012bba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012bbe:	d2db      	bcs.n	8012b78 <quorem+0x44>
 8012bc0:	f855 300b 	ldr.w	r3, [r5, fp]
 8012bc4:	b92b      	cbnz	r3, 8012bd2 <quorem+0x9e>
 8012bc6:	9b01      	ldr	r3, [sp, #4]
 8012bc8:	3b04      	subs	r3, #4
 8012bca:	429d      	cmp	r5, r3
 8012bcc:	461a      	mov	r2, r3
 8012bce:	d32e      	bcc.n	8012c2e <quorem+0xfa>
 8012bd0:	613c      	str	r4, [r7, #16]
 8012bd2:	4638      	mov	r0, r7
 8012bd4:	f001 fc9e 	bl	8014514 <__mcmp>
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	db24      	blt.n	8012c26 <quorem+0xf2>
 8012bdc:	3601      	adds	r6, #1
 8012bde:	4628      	mov	r0, r5
 8012be0:	f04f 0c00 	mov.w	ip, #0
 8012be4:	f858 2b04 	ldr.w	r2, [r8], #4
 8012be8:	f8d0 e000 	ldr.w	lr, [r0]
 8012bec:	b293      	uxth	r3, r2
 8012bee:	ebac 0303 	sub.w	r3, ip, r3
 8012bf2:	0c12      	lsrs	r2, r2, #16
 8012bf4:	fa13 f38e 	uxtah	r3, r3, lr
 8012bf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012bfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012c00:	b29b      	uxth	r3, r3
 8012c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012c06:	45c1      	cmp	r9, r8
 8012c08:	f840 3b04 	str.w	r3, [r0], #4
 8012c0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012c10:	d2e8      	bcs.n	8012be4 <quorem+0xb0>
 8012c12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c1a:	b922      	cbnz	r2, 8012c26 <quorem+0xf2>
 8012c1c:	3b04      	subs	r3, #4
 8012c1e:	429d      	cmp	r5, r3
 8012c20:	461a      	mov	r2, r3
 8012c22:	d30a      	bcc.n	8012c3a <quorem+0x106>
 8012c24:	613c      	str	r4, [r7, #16]
 8012c26:	4630      	mov	r0, r6
 8012c28:	b003      	add	sp, #12
 8012c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c2e:	6812      	ldr	r2, [r2, #0]
 8012c30:	3b04      	subs	r3, #4
 8012c32:	2a00      	cmp	r2, #0
 8012c34:	d1cc      	bne.n	8012bd0 <quorem+0x9c>
 8012c36:	3c01      	subs	r4, #1
 8012c38:	e7c7      	b.n	8012bca <quorem+0x96>
 8012c3a:	6812      	ldr	r2, [r2, #0]
 8012c3c:	3b04      	subs	r3, #4
 8012c3e:	2a00      	cmp	r2, #0
 8012c40:	d1f0      	bne.n	8012c24 <quorem+0xf0>
 8012c42:	3c01      	subs	r4, #1
 8012c44:	e7eb      	b.n	8012c1e <quorem+0xea>
 8012c46:	2000      	movs	r0, #0
 8012c48:	e7ee      	b.n	8012c28 <quorem+0xf4>
 8012c4a:	0000      	movs	r0, r0
 8012c4c:	0000      	movs	r0, r0
	...

08012c50 <_dtoa_r>:
 8012c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c54:	ed2d 8b02 	vpush	{d8}
 8012c58:	ec57 6b10 	vmov	r6, r7, d0
 8012c5c:	b095      	sub	sp, #84	; 0x54
 8012c5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012c60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012c64:	9105      	str	r1, [sp, #20]
 8012c66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8012c6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c70:	b975      	cbnz	r5, 8012c90 <_dtoa_r+0x40>
 8012c72:	2010      	movs	r0, #16
 8012c74:	f001 f95e 	bl	8013f34 <malloc>
 8012c78:	4602      	mov	r2, r0
 8012c7a:	6260      	str	r0, [r4, #36]	; 0x24
 8012c7c:	b920      	cbnz	r0, 8012c88 <_dtoa_r+0x38>
 8012c7e:	4bb2      	ldr	r3, [pc, #712]	; (8012f48 <_dtoa_r+0x2f8>)
 8012c80:	21ea      	movs	r1, #234	; 0xea
 8012c82:	48b2      	ldr	r0, [pc, #712]	; (8012f4c <_dtoa_r+0x2fc>)
 8012c84:	f7ff ff38 	bl	8012af8 <__assert_func>
 8012c88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012c8c:	6005      	str	r5, [r0, #0]
 8012c8e:	60c5      	str	r5, [r0, #12]
 8012c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c92:	6819      	ldr	r1, [r3, #0]
 8012c94:	b151      	cbz	r1, 8012cac <_dtoa_r+0x5c>
 8012c96:	685a      	ldr	r2, [r3, #4]
 8012c98:	604a      	str	r2, [r1, #4]
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	4093      	lsls	r3, r2
 8012c9e:	608b      	str	r3, [r1, #8]
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	f001 f9af 	bl	8014004 <_Bfree>
 8012ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ca8:	2200      	movs	r2, #0
 8012caa:	601a      	str	r2, [r3, #0]
 8012cac:	1e3b      	subs	r3, r7, #0
 8012cae:	bfb9      	ittee	lt
 8012cb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012cb4:	9303      	strlt	r3, [sp, #12]
 8012cb6:	2300      	movge	r3, #0
 8012cb8:	f8c8 3000 	strge.w	r3, [r8]
 8012cbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012cc0:	4ba3      	ldr	r3, [pc, #652]	; (8012f50 <_dtoa_r+0x300>)
 8012cc2:	bfbc      	itt	lt
 8012cc4:	2201      	movlt	r2, #1
 8012cc6:	f8c8 2000 	strlt.w	r2, [r8]
 8012cca:	ea33 0309 	bics.w	r3, r3, r9
 8012cce:	d11b      	bne.n	8012d08 <_dtoa_r+0xb8>
 8012cd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012cd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8012cd6:	6013      	str	r3, [r2, #0]
 8012cd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012cdc:	4333      	orrs	r3, r6
 8012cde:	f000 857a 	beq.w	80137d6 <_dtoa_r+0xb86>
 8012ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ce4:	b963      	cbnz	r3, 8012d00 <_dtoa_r+0xb0>
 8012ce6:	4b9b      	ldr	r3, [pc, #620]	; (8012f54 <_dtoa_r+0x304>)
 8012ce8:	e024      	b.n	8012d34 <_dtoa_r+0xe4>
 8012cea:	4b9b      	ldr	r3, [pc, #620]	; (8012f58 <_dtoa_r+0x308>)
 8012cec:	9300      	str	r3, [sp, #0]
 8012cee:	3308      	adds	r3, #8
 8012cf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012cf2:	6013      	str	r3, [r2, #0]
 8012cf4:	9800      	ldr	r0, [sp, #0]
 8012cf6:	b015      	add	sp, #84	; 0x54
 8012cf8:	ecbd 8b02 	vpop	{d8}
 8012cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d00:	4b94      	ldr	r3, [pc, #592]	; (8012f54 <_dtoa_r+0x304>)
 8012d02:	9300      	str	r3, [sp, #0]
 8012d04:	3303      	adds	r3, #3
 8012d06:	e7f3      	b.n	8012cf0 <_dtoa_r+0xa0>
 8012d08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	ec51 0b17 	vmov	r0, r1, d7
 8012d12:	2300      	movs	r3, #0
 8012d14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012d18:	f7ed feee 	bl	8000af8 <__aeabi_dcmpeq>
 8012d1c:	4680      	mov	r8, r0
 8012d1e:	b158      	cbz	r0, 8012d38 <_dtoa_r+0xe8>
 8012d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012d22:	2301      	movs	r3, #1
 8012d24:	6013      	str	r3, [r2, #0]
 8012d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	f000 8551 	beq.w	80137d0 <_dtoa_r+0xb80>
 8012d2e:	488b      	ldr	r0, [pc, #556]	; (8012f5c <_dtoa_r+0x30c>)
 8012d30:	6018      	str	r0, [r3, #0]
 8012d32:	1e43      	subs	r3, r0, #1
 8012d34:	9300      	str	r3, [sp, #0]
 8012d36:	e7dd      	b.n	8012cf4 <_dtoa_r+0xa4>
 8012d38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012d3c:	aa12      	add	r2, sp, #72	; 0x48
 8012d3e:	a913      	add	r1, sp, #76	; 0x4c
 8012d40:	4620      	mov	r0, r4
 8012d42:	f001 fd07 	bl	8014754 <__d2b>
 8012d46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012d4a:	4683      	mov	fp, r0
 8012d4c:	2d00      	cmp	r5, #0
 8012d4e:	d07c      	beq.n	8012e4a <_dtoa_r+0x1fa>
 8012d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012d56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012d5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012d62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012d66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012d6a:	4b7d      	ldr	r3, [pc, #500]	; (8012f60 <_dtoa_r+0x310>)
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	4630      	mov	r0, r6
 8012d70:	4639      	mov	r1, r7
 8012d72:	f7ed faa1 	bl	80002b8 <__aeabi_dsub>
 8012d76:	a36e      	add	r3, pc, #440	; (adr r3, 8012f30 <_dtoa_r+0x2e0>)
 8012d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d7c:	f7ed fc54 	bl	8000628 <__aeabi_dmul>
 8012d80:	a36d      	add	r3, pc, #436	; (adr r3, 8012f38 <_dtoa_r+0x2e8>)
 8012d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d86:	f7ed fa99 	bl	80002bc <__adddf3>
 8012d8a:	4606      	mov	r6, r0
 8012d8c:	4628      	mov	r0, r5
 8012d8e:	460f      	mov	r7, r1
 8012d90:	f7ed fbe0 	bl	8000554 <__aeabi_i2d>
 8012d94:	a36a      	add	r3, pc, #424	; (adr r3, 8012f40 <_dtoa_r+0x2f0>)
 8012d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9a:	f7ed fc45 	bl	8000628 <__aeabi_dmul>
 8012d9e:	4602      	mov	r2, r0
 8012da0:	460b      	mov	r3, r1
 8012da2:	4630      	mov	r0, r6
 8012da4:	4639      	mov	r1, r7
 8012da6:	f7ed fa89 	bl	80002bc <__adddf3>
 8012daa:	4606      	mov	r6, r0
 8012dac:	460f      	mov	r7, r1
 8012dae:	f7ed feeb 	bl	8000b88 <__aeabi_d2iz>
 8012db2:	2200      	movs	r2, #0
 8012db4:	4682      	mov	sl, r0
 8012db6:	2300      	movs	r3, #0
 8012db8:	4630      	mov	r0, r6
 8012dba:	4639      	mov	r1, r7
 8012dbc:	f7ed fea6 	bl	8000b0c <__aeabi_dcmplt>
 8012dc0:	b148      	cbz	r0, 8012dd6 <_dtoa_r+0x186>
 8012dc2:	4650      	mov	r0, sl
 8012dc4:	f7ed fbc6 	bl	8000554 <__aeabi_i2d>
 8012dc8:	4632      	mov	r2, r6
 8012dca:	463b      	mov	r3, r7
 8012dcc:	f7ed fe94 	bl	8000af8 <__aeabi_dcmpeq>
 8012dd0:	b908      	cbnz	r0, 8012dd6 <_dtoa_r+0x186>
 8012dd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012dd6:	f1ba 0f16 	cmp.w	sl, #22
 8012dda:	d854      	bhi.n	8012e86 <_dtoa_r+0x236>
 8012ddc:	4b61      	ldr	r3, [pc, #388]	; (8012f64 <_dtoa_r+0x314>)
 8012dde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012dea:	f7ed fe8f 	bl	8000b0c <__aeabi_dcmplt>
 8012dee:	2800      	cmp	r0, #0
 8012df0:	d04b      	beq.n	8012e8a <_dtoa_r+0x23a>
 8012df2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012df6:	2300      	movs	r3, #0
 8012df8:	930e      	str	r3, [sp, #56]	; 0x38
 8012dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012dfc:	1b5d      	subs	r5, r3, r5
 8012dfe:	1e6b      	subs	r3, r5, #1
 8012e00:	9304      	str	r3, [sp, #16]
 8012e02:	bf43      	ittte	mi
 8012e04:	2300      	movmi	r3, #0
 8012e06:	f1c5 0801 	rsbmi	r8, r5, #1
 8012e0a:	9304      	strmi	r3, [sp, #16]
 8012e0c:	f04f 0800 	movpl.w	r8, #0
 8012e10:	f1ba 0f00 	cmp.w	sl, #0
 8012e14:	db3b      	blt.n	8012e8e <_dtoa_r+0x23e>
 8012e16:	9b04      	ldr	r3, [sp, #16]
 8012e18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012e1c:	4453      	add	r3, sl
 8012e1e:	9304      	str	r3, [sp, #16]
 8012e20:	2300      	movs	r3, #0
 8012e22:	9306      	str	r3, [sp, #24]
 8012e24:	9b05      	ldr	r3, [sp, #20]
 8012e26:	2b09      	cmp	r3, #9
 8012e28:	d869      	bhi.n	8012efe <_dtoa_r+0x2ae>
 8012e2a:	2b05      	cmp	r3, #5
 8012e2c:	bfc4      	itt	gt
 8012e2e:	3b04      	subgt	r3, #4
 8012e30:	9305      	strgt	r3, [sp, #20]
 8012e32:	9b05      	ldr	r3, [sp, #20]
 8012e34:	f1a3 0302 	sub.w	r3, r3, #2
 8012e38:	bfcc      	ite	gt
 8012e3a:	2500      	movgt	r5, #0
 8012e3c:	2501      	movle	r5, #1
 8012e3e:	2b03      	cmp	r3, #3
 8012e40:	d869      	bhi.n	8012f16 <_dtoa_r+0x2c6>
 8012e42:	e8df f003 	tbb	[pc, r3]
 8012e46:	4e2c      	.short	0x4e2c
 8012e48:	5a4c      	.short	0x5a4c
 8012e4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012e4e:	441d      	add	r5, r3
 8012e50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012e54:	2b20      	cmp	r3, #32
 8012e56:	bfc1      	itttt	gt
 8012e58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012e5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012e60:	fa09 f303 	lslgt.w	r3, r9, r3
 8012e64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012e68:	bfda      	itte	le
 8012e6a:	f1c3 0320 	rsble	r3, r3, #32
 8012e6e:	fa06 f003 	lslle.w	r0, r6, r3
 8012e72:	4318      	orrgt	r0, r3
 8012e74:	f7ed fb5e 	bl	8000534 <__aeabi_ui2d>
 8012e78:	2301      	movs	r3, #1
 8012e7a:	4606      	mov	r6, r0
 8012e7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012e80:	3d01      	subs	r5, #1
 8012e82:	9310      	str	r3, [sp, #64]	; 0x40
 8012e84:	e771      	b.n	8012d6a <_dtoa_r+0x11a>
 8012e86:	2301      	movs	r3, #1
 8012e88:	e7b6      	b.n	8012df8 <_dtoa_r+0x1a8>
 8012e8a:	900e      	str	r0, [sp, #56]	; 0x38
 8012e8c:	e7b5      	b.n	8012dfa <_dtoa_r+0x1aa>
 8012e8e:	f1ca 0300 	rsb	r3, sl, #0
 8012e92:	9306      	str	r3, [sp, #24]
 8012e94:	2300      	movs	r3, #0
 8012e96:	eba8 080a 	sub.w	r8, r8, sl
 8012e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8012e9c:	e7c2      	b.n	8012e24 <_dtoa_r+0x1d4>
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	9308      	str	r3, [sp, #32]
 8012ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	dc39      	bgt.n	8012f1c <_dtoa_r+0x2cc>
 8012ea8:	f04f 0901 	mov.w	r9, #1
 8012eac:	f8cd 9004 	str.w	r9, [sp, #4]
 8012eb0:	464b      	mov	r3, r9
 8012eb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012eb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012eb8:	2200      	movs	r2, #0
 8012eba:	6042      	str	r2, [r0, #4]
 8012ebc:	2204      	movs	r2, #4
 8012ebe:	f102 0614 	add.w	r6, r2, #20
 8012ec2:	429e      	cmp	r6, r3
 8012ec4:	6841      	ldr	r1, [r0, #4]
 8012ec6:	d92f      	bls.n	8012f28 <_dtoa_r+0x2d8>
 8012ec8:	4620      	mov	r0, r4
 8012eca:	f001 f85b 	bl	8013f84 <_Balloc>
 8012ece:	9000      	str	r0, [sp, #0]
 8012ed0:	2800      	cmp	r0, #0
 8012ed2:	d14b      	bne.n	8012f6c <_dtoa_r+0x31c>
 8012ed4:	4b24      	ldr	r3, [pc, #144]	; (8012f68 <_dtoa_r+0x318>)
 8012ed6:	4602      	mov	r2, r0
 8012ed8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012edc:	e6d1      	b.n	8012c82 <_dtoa_r+0x32>
 8012ede:	2301      	movs	r3, #1
 8012ee0:	e7de      	b.n	8012ea0 <_dtoa_r+0x250>
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	9308      	str	r3, [sp, #32]
 8012ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ee8:	eb0a 0903 	add.w	r9, sl, r3
 8012eec:	f109 0301 	add.w	r3, r9, #1
 8012ef0:	2b01      	cmp	r3, #1
 8012ef2:	9301      	str	r3, [sp, #4]
 8012ef4:	bfb8      	it	lt
 8012ef6:	2301      	movlt	r3, #1
 8012ef8:	e7dd      	b.n	8012eb6 <_dtoa_r+0x266>
 8012efa:	2301      	movs	r3, #1
 8012efc:	e7f2      	b.n	8012ee4 <_dtoa_r+0x294>
 8012efe:	2501      	movs	r5, #1
 8012f00:	2300      	movs	r3, #0
 8012f02:	9305      	str	r3, [sp, #20]
 8012f04:	9508      	str	r5, [sp, #32]
 8012f06:	f04f 39ff 	mov.w	r9, #4294967295
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012f10:	2312      	movs	r3, #18
 8012f12:	9209      	str	r2, [sp, #36]	; 0x24
 8012f14:	e7cf      	b.n	8012eb6 <_dtoa_r+0x266>
 8012f16:	2301      	movs	r3, #1
 8012f18:	9308      	str	r3, [sp, #32]
 8012f1a:	e7f4      	b.n	8012f06 <_dtoa_r+0x2b6>
 8012f1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012f20:	f8cd 9004 	str.w	r9, [sp, #4]
 8012f24:	464b      	mov	r3, r9
 8012f26:	e7c6      	b.n	8012eb6 <_dtoa_r+0x266>
 8012f28:	3101      	adds	r1, #1
 8012f2a:	6041      	str	r1, [r0, #4]
 8012f2c:	0052      	lsls	r2, r2, #1
 8012f2e:	e7c6      	b.n	8012ebe <_dtoa_r+0x26e>
 8012f30:	636f4361 	.word	0x636f4361
 8012f34:	3fd287a7 	.word	0x3fd287a7
 8012f38:	8b60c8b3 	.word	0x8b60c8b3
 8012f3c:	3fc68a28 	.word	0x3fc68a28
 8012f40:	509f79fb 	.word	0x509f79fb
 8012f44:	3fd34413 	.word	0x3fd34413
 8012f48:	08029490 	.word	0x08029490
 8012f4c:	08029652 	.word	0x08029652
 8012f50:	7ff00000 	.word	0x7ff00000
 8012f54:	0802964e 	.word	0x0802964e
 8012f58:	08029645 	.word	0x08029645
 8012f5c:	08029411 	.word	0x08029411
 8012f60:	3ff80000 	.word	0x3ff80000
 8012f64:	080297c8 	.word	0x080297c8
 8012f68:	080296b1 	.word	0x080296b1
 8012f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f6e:	9a00      	ldr	r2, [sp, #0]
 8012f70:	601a      	str	r2, [r3, #0]
 8012f72:	9b01      	ldr	r3, [sp, #4]
 8012f74:	2b0e      	cmp	r3, #14
 8012f76:	f200 80ad 	bhi.w	80130d4 <_dtoa_r+0x484>
 8012f7a:	2d00      	cmp	r5, #0
 8012f7c:	f000 80aa 	beq.w	80130d4 <_dtoa_r+0x484>
 8012f80:	f1ba 0f00 	cmp.w	sl, #0
 8012f84:	dd36      	ble.n	8012ff4 <_dtoa_r+0x3a4>
 8012f86:	4ac3      	ldr	r2, [pc, #780]	; (8013294 <_dtoa_r+0x644>)
 8012f88:	f00a 030f 	and.w	r3, sl, #15
 8012f8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012f90:	ed93 7b00 	vldr	d7, [r3]
 8012f94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012f98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8012f9c:	eeb0 8a47 	vmov.f32	s16, s14
 8012fa0:	eef0 8a67 	vmov.f32	s17, s15
 8012fa4:	d016      	beq.n	8012fd4 <_dtoa_r+0x384>
 8012fa6:	4bbc      	ldr	r3, [pc, #752]	; (8013298 <_dtoa_r+0x648>)
 8012fa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012fac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012fb0:	f7ed fc64 	bl	800087c <__aeabi_ddiv>
 8012fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fb8:	f007 070f 	and.w	r7, r7, #15
 8012fbc:	2503      	movs	r5, #3
 8012fbe:	4eb6      	ldr	r6, [pc, #728]	; (8013298 <_dtoa_r+0x648>)
 8012fc0:	b957      	cbnz	r7, 8012fd8 <_dtoa_r+0x388>
 8012fc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fc6:	ec53 2b18 	vmov	r2, r3, d8
 8012fca:	f7ed fc57 	bl	800087c <__aeabi_ddiv>
 8012fce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fd2:	e029      	b.n	8013028 <_dtoa_r+0x3d8>
 8012fd4:	2502      	movs	r5, #2
 8012fd6:	e7f2      	b.n	8012fbe <_dtoa_r+0x36e>
 8012fd8:	07f9      	lsls	r1, r7, #31
 8012fda:	d508      	bpl.n	8012fee <_dtoa_r+0x39e>
 8012fdc:	ec51 0b18 	vmov	r0, r1, d8
 8012fe0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012fe4:	f7ed fb20 	bl	8000628 <__aeabi_dmul>
 8012fe8:	ec41 0b18 	vmov	d8, r0, r1
 8012fec:	3501      	adds	r5, #1
 8012fee:	107f      	asrs	r7, r7, #1
 8012ff0:	3608      	adds	r6, #8
 8012ff2:	e7e5      	b.n	8012fc0 <_dtoa_r+0x370>
 8012ff4:	f000 80a6 	beq.w	8013144 <_dtoa_r+0x4f4>
 8012ff8:	f1ca 0600 	rsb	r6, sl, #0
 8012ffc:	4ba5      	ldr	r3, [pc, #660]	; (8013294 <_dtoa_r+0x644>)
 8012ffe:	4fa6      	ldr	r7, [pc, #664]	; (8013298 <_dtoa_r+0x648>)
 8013000:	f006 020f 	and.w	r2, r6, #15
 8013004:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013010:	f7ed fb0a 	bl	8000628 <__aeabi_dmul>
 8013014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013018:	1136      	asrs	r6, r6, #4
 801301a:	2300      	movs	r3, #0
 801301c:	2502      	movs	r5, #2
 801301e:	2e00      	cmp	r6, #0
 8013020:	f040 8085 	bne.w	801312e <_dtoa_r+0x4de>
 8013024:	2b00      	cmp	r3, #0
 8013026:	d1d2      	bne.n	8012fce <_dtoa_r+0x37e>
 8013028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801302a:	2b00      	cmp	r3, #0
 801302c:	f000 808c 	beq.w	8013148 <_dtoa_r+0x4f8>
 8013030:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013034:	4b99      	ldr	r3, [pc, #612]	; (801329c <_dtoa_r+0x64c>)
 8013036:	2200      	movs	r2, #0
 8013038:	4630      	mov	r0, r6
 801303a:	4639      	mov	r1, r7
 801303c:	f7ed fd66 	bl	8000b0c <__aeabi_dcmplt>
 8013040:	2800      	cmp	r0, #0
 8013042:	f000 8081 	beq.w	8013148 <_dtoa_r+0x4f8>
 8013046:	9b01      	ldr	r3, [sp, #4]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d07d      	beq.n	8013148 <_dtoa_r+0x4f8>
 801304c:	f1b9 0f00 	cmp.w	r9, #0
 8013050:	dd3c      	ble.n	80130cc <_dtoa_r+0x47c>
 8013052:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013056:	9307      	str	r3, [sp, #28]
 8013058:	2200      	movs	r2, #0
 801305a:	4b91      	ldr	r3, [pc, #580]	; (80132a0 <_dtoa_r+0x650>)
 801305c:	4630      	mov	r0, r6
 801305e:	4639      	mov	r1, r7
 8013060:	f7ed fae2 	bl	8000628 <__aeabi_dmul>
 8013064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013068:	3501      	adds	r5, #1
 801306a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801306e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013072:	4628      	mov	r0, r5
 8013074:	f7ed fa6e 	bl	8000554 <__aeabi_i2d>
 8013078:	4632      	mov	r2, r6
 801307a:	463b      	mov	r3, r7
 801307c:	f7ed fad4 	bl	8000628 <__aeabi_dmul>
 8013080:	4b88      	ldr	r3, [pc, #544]	; (80132a4 <_dtoa_r+0x654>)
 8013082:	2200      	movs	r2, #0
 8013084:	f7ed f91a 	bl	80002bc <__adddf3>
 8013088:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801308c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013090:	9303      	str	r3, [sp, #12]
 8013092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013094:	2b00      	cmp	r3, #0
 8013096:	d15c      	bne.n	8013152 <_dtoa_r+0x502>
 8013098:	4b83      	ldr	r3, [pc, #524]	; (80132a8 <_dtoa_r+0x658>)
 801309a:	2200      	movs	r2, #0
 801309c:	4630      	mov	r0, r6
 801309e:	4639      	mov	r1, r7
 80130a0:	f7ed f90a 	bl	80002b8 <__aeabi_dsub>
 80130a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80130a8:	4606      	mov	r6, r0
 80130aa:	460f      	mov	r7, r1
 80130ac:	f7ed fd4c 	bl	8000b48 <__aeabi_dcmpgt>
 80130b0:	2800      	cmp	r0, #0
 80130b2:	f040 8296 	bne.w	80135e2 <_dtoa_r+0x992>
 80130b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80130ba:	4630      	mov	r0, r6
 80130bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80130c0:	4639      	mov	r1, r7
 80130c2:	f7ed fd23 	bl	8000b0c <__aeabi_dcmplt>
 80130c6:	2800      	cmp	r0, #0
 80130c8:	f040 8288 	bne.w	80135dc <_dtoa_r+0x98c>
 80130cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80130d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80130d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	f2c0 8158 	blt.w	801338c <_dtoa_r+0x73c>
 80130dc:	f1ba 0f0e 	cmp.w	sl, #14
 80130e0:	f300 8154 	bgt.w	801338c <_dtoa_r+0x73c>
 80130e4:	4b6b      	ldr	r3, [pc, #428]	; (8013294 <_dtoa_r+0x644>)
 80130e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80130ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80130ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	f280 80e3 	bge.w	80132bc <_dtoa_r+0x66c>
 80130f6:	9b01      	ldr	r3, [sp, #4]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	f300 80df 	bgt.w	80132bc <_dtoa_r+0x66c>
 80130fe:	f040 826d 	bne.w	80135dc <_dtoa_r+0x98c>
 8013102:	4b69      	ldr	r3, [pc, #420]	; (80132a8 <_dtoa_r+0x658>)
 8013104:	2200      	movs	r2, #0
 8013106:	4640      	mov	r0, r8
 8013108:	4649      	mov	r1, r9
 801310a:	f7ed fa8d 	bl	8000628 <__aeabi_dmul>
 801310e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013112:	f7ed fd0f 	bl	8000b34 <__aeabi_dcmpge>
 8013116:	9e01      	ldr	r6, [sp, #4]
 8013118:	4637      	mov	r7, r6
 801311a:	2800      	cmp	r0, #0
 801311c:	f040 8243 	bne.w	80135a6 <_dtoa_r+0x956>
 8013120:	9d00      	ldr	r5, [sp, #0]
 8013122:	2331      	movs	r3, #49	; 0x31
 8013124:	f805 3b01 	strb.w	r3, [r5], #1
 8013128:	f10a 0a01 	add.w	sl, sl, #1
 801312c:	e23f      	b.n	80135ae <_dtoa_r+0x95e>
 801312e:	07f2      	lsls	r2, r6, #31
 8013130:	d505      	bpl.n	801313e <_dtoa_r+0x4ee>
 8013132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013136:	f7ed fa77 	bl	8000628 <__aeabi_dmul>
 801313a:	3501      	adds	r5, #1
 801313c:	2301      	movs	r3, #1
 801313e:	1076      	asrs	r6, r6, #1
 8013140:	3708      	adds	r7, #8
 8013142:	e76c      	b.n	801301e <_dtoa_r+0x3ce>
 8013144:	2502      	movs	r5, #2
 8013146:	e76f      	b.n	8013028 <_dtoa_r+0x3d8>
 8013148:	9b01      	ldr	r3, [sp, #4]
 801314a:	f8cd a01c 	str.w	sl, [sp, #28]
 801314e:	930c      	str	r3, [sp, #48]	; 0x30
 8013150:	e78d      	b.n	801306e <_dtoa_r+0x41e>
 8013152:	9900      	ldr	r1, [sp, #0]
 8013154:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013158:	4b4e      	ldr	r3, [pc, #312]	; (8013294 <_dtoa_r+0x644>)
 801315a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801315e:	4401      	add	r1, r0
 8013160:	9102      	str	r1, [sp, #8]
 8013162:	9908      	ldr	r1, [sp, #32]
 8013164:	eeb0 8a47 	vmov.f32	s16, s14
 8013168:	eef0 8a67 	vmov.f32	s17, s15
 801316c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013174:	2900      	cmp	r1, #0
 8013176:	d045      	beq.n	8013204 <_dtoa_r+0x5b4>
 8013178:	494c      	ldr	r1, [pc, #304]	; (80132ac <_dtoa_r+0x65c>)
 801317a:	2000      	movs	r0, #0
 801317c:	f7ed fb7e 	bl	800087c <__aeabi_ddiv>
 8013180:	ec53 2b18 	vmov	r2, r3, d8
 8013184:	f7ed f898 	bl	80002b8 <__aeabi_dsub>
 8013188:	9d00      	ldr	r5, [sp, #0]
 801318a:	ec41 0b18 	vmov	d8, r0, r1
 801318e:	4639      	mov	r1, r7
 8013190:	4630      	mov	r0, r6
 8013192:	f7ed fcf9 	bl	8000b88 <__aeabi_d2iz>
 8013196:	900c      	str	r0, [sp, #48]	; 0x30
 8013198:	f7ed f9dc 	bl	8000554 <__aeabi_i2d>
 801319c:	4602      	mov	r2, r0
 801319e:	460b      	mov	r3, r1
 80131a0:	4630      	mov	r0, r6
 80131a2:	4639      	mov	r1, r7
 80131a4:	f7ed f888 	bl	80002b8 <__aeabi_dsub>
 80131a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131aa:	3330      	adds	r3, #48	; 0x30
 80131ac:	f805 3b01 	strb.w	r3, [r5], #1
 80131b0:	ec53 2b18 	vmov	r2, r3, d8
 80131b4:	4606      	mov	r6, r0
 80131b6:	460f      	mov	r7, r1
 80131b8:	f7ed fca8 	bl	8000b0c <__aeabi_dcmplt>
 80131bc:	2800      	cmp	r0, #0
 80131be:	d165      	bne.n	801328c <_dtoa_r+0x63c>
 80131c0:	4632      	mov	r2, r6
 80131c2:	463b      	mov	r3, r7
 80131c4:	4935      	ldr	r1, [pc, #212]	; (801329c <_dtoa_r+0x64c>)
 80131c6:	2000      	movs	r0, #0
 80131c8:	f7ed f876 	bl	80002b8 <__aeabi_dsub>
 80131cc:	ec53 2b18 	vmov	r2, r3, d8
 80131d0:	f7ed fc9c 	bl	8000b0c <__aeabi_dcmplt>
 80131d4:	2800      	cmp	r0, #0
 80131d6:	f040 80b9 	bne.w	801334c <_dtoa_r+0x6fc>
 80131da:	9b02      	ldr	r3, [sp, #8]
 80131dc:	429d      	cmp	r5, r3
 80131de:	f43f af75 	beq.w	80130cc <_dtoa_r+0x47c>
 80131e2:	4b2f      	ldr	r3, [pc, #188]	; (80132a0 <_dtoa_r+0x650>)
 80131e4:	ec51 0b18 	vmov	r0, r1, d8
 80131e8:	2200      	movs	r2, #0
 80131ea:	f7ed fa1d 	bl	8000628 <__aeabi_dmul>
 80131ee:	4b2c      	ldr	r3, [pc, #176]	; (80132a0 <_dtoa_r+0x650>)
 80131f0:	ec41 0b18 	vmov	d8, r0, r1
 80131f4:	2200      	movs	r2, #0
 80131f6:	4630      	mov	r0, r6
 80131f8:	4639      	mov	r1, r7
 80131fa:	f7ed fa15 	bl	8000628 <__aeabi_dmul>
 80131fe:	4606      	mov	r6, r0
 8013200:	460f      	mov	r7, r1
 8013202:	e7c4      	b.n	801318e <_dtoa_r+0x53e>
 8013204:	ec51 0b17 	vmov	r0, r1, d7
 8013208:	f7ed fa0e 	bl	8000628 <__aeabi_dmul>
 801320c:	9b02      	ldr	r3, [sp, #8]
 801320e:	9d00      	ldr	r5, [sp, #0]
 8013210:	930c      	str	r3, [sp, #48]	; 0x30
 8013212:	ec41 0b18 	vmov	d8, r0, r1
 8013216:	4639      	mov	r1, r7
 8013218:	4630      	mov	r0, r6
 801321a:	f7ed fcb5 	bl	8000b88 <__aeabi_d2iz>
 801321e:	9011      	str	r0, [sp, #68]	; 0x44
 8013220:	f7ed f998 	bl	8000554 <__aeabi_i2d>
 8013224:	4602      	mov	r2, r0
 8013226:	460b      	mov	r3, r1
 8013228:	4630      	mov	r0, r6
 801322a:	4639      	mov	r1, r7
 801322c:	f7ed f844 	bl	80002b8 <__aeabi_dsub>
 8013230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013232:	3330      	adds	r3, #48	; 0x30
 8013234:	f805 3b01 	strb.w	r3, [r5], #1
 8013238:	9b02      	ldr	r3, [sp, #8]
 801323a:	429d      	cmp	r5, r3
 801323c:	4606      	mov	r6, r0
 801323e:	460f      	mov	r7, r1
 8013240:	f04f 0200 	mov.w	r2, #0
 8013244:	d134      	bne.n	80132b0 <_dtoa_r+0x660>
 8013246:	4b19      	ldr	r3, [pc, #100]	; (80132ac <_dtoa_r+0x65c>)
 8013248:	ec51 0b18 	vmov	r0, r1, d8
 801324c:	f7ed f836 	bl	80002bc <__adddf3>
 8013250:	4602      	mov	r2, r0
 8013252:	460b      	mov	r3, r1
 8013254:	4630      	mov	r0, r6
 8013256:	4639      	mov	r1, r7
 8013258:	f7ed fc76 	bl	8000b48 <__aeabi_dcmpgt>
 801325c:	2800      	cmp	r0, #0
 801325e:	d175      	bne.n	801334c <_dtoa_r+0x6fc>
 8013260:	ec53 2b18 	vmov	r2, r3, d8
 8013264:	4911      	ldr	r1, [pc, #68]	; (80132ac <_dtoa_r+0x65c>)
 8013266:	2000      	movs	r0, #0
 8013268:	f7ed f826 	bl	80002b8 <__aeabi_dsub>
 801326c:	4602      	mov	r2, r0
 801326e:	460b      	mov	r3, r1
 8013270:	4630      	mov	r0, r6
 8013272:	4639      	mov	r1, r7
 8013274:	f7ed fc4a 	bl	8000b0c <__aeabi_dcmplt>
 8013278:	2800      	cmp	r0, #0
 801327a:	f43f af27 	beq.w	80130cc <_dtoa_r+0x47c>
 801327e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013280:	1e6b      	subs	r3, r5, #1
 8013282:	930c      	str	r3, [sp, #48]	; 0x30
 8013284:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013288:	2b30      	cmp	r3, #48	; 0x30
 801328a:	d0f8      	beq.n	801327e <_dtoa_r+0x62e>
 801328c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013290:	e04a      	b.n	8013328 <_dtoa_r+0x6d8>
 8013292:	bf00      	nop
 8013294:	080297c8 	.word	0x080297c8
 8013298:	080297a0 	.word	0x080297a0
 801329c:	3ff00000 	.word	0x3ff00000
 80132a0:	40240000 	.word	0x40240000
 80132a4:	401c0000 	.word	0x401c0000
 80132a8:	40140000 	.word	0x40140000
 80132ac:	3fe00000 	.word	0x3fe00000
 80132b0:	4baf      	ldr	r3, [pc, #700]	; (8013570 <_dtoa_r+0x920>)
 80132b2:	f7ed f9b9 	bl	8000628 <__aeabi_dmul>
 80132b6:	4606      	mov	r6, r0
 80132b8:	460f      	mov	r7, r1
 80132ba:	e7ac      	b.n	8013216 <_dtoa_r+0x5c6>
 80132bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80132c0:	9d00      	ldr	r5, [sp, #0]
 80132c2:	4642      	mov	r2, r8
 80132c4:	464b      	mov	r3, r9
 80132c6:	4630      	mov	r0, r6
 80132c8:	4639      	mov	r1, r7
 80132ca:	f7ed fad7 	bl	800087c <__aeabi_ddiv>
 80132ce:	f7ed fc5b 	bl	8000b88 <__aeabi_d2iz>
 80132d2:	9002      	str	r0, [sp, #8]
 80132d4:	f7ed f93e 	bl	8000554 <__aeabi_i2d>
 80132d8:	4642      	mov	r2, r8
 80132da:	464b      	mov	r3, r9
 80132dc:	f7ed f9a4 	bl	8000628 <__aeabi_dmul>
 80132e0:	4602      	mov	r2, r0
 80132e2:	460b      	mov	r3, r1
 80132e4:	4630      	mov	r0, r6
 80132e6:	4639      	mov	r1, r7
 80132e8:	f7ec ffe6 	bl	80002b8 <__aeabi_dsub>
 80132ec:	9e02      	ldr	r6, [sp, #8]
 80132ee:	9f01      	ldr	r7, [sp, #4]
 80132f0:	3630      	adds	r6, #48	; 0x30
 80132f2:	f805 6b01 	strb.w	r6, [r5], #1
 80132f6:	9e00      	ldr	r6, [sp, #0]
 80132f8:	1bae      	subs	r6, r5, r6
 80132fa:	42b7      	cmp	r7, r6
 80132fc:	4602      	mov	r2, r0
 80132fe:	460b      	mov	r3, r1
 8013300:	d137      	bne.n	8013372 <_dtoa_r+0x722>
 8013302:	f7ec ffdb 	bl	80002bc <__adddf3>
 8013306:	4642      	mov	r2, r8
 8013308:	464b      	mov	r3, r9
 801330a:	4606      	mov	r6, r0
 801330c:	460f      	mov	r7, r1
 801330e:	f7ed fc1b 	bl	8000b48 <__aeabi_dcmpgt>
 8013312:	b9c8      	cbnz	r0, 8013348 <_dtoa_r+0x6f8>
 8013314:	4642      	mov	r2, r8
 8013316:	464b      	mov	r3, r9
 8013318:	4630      	mov	r0, r6
 801331a:	4639      	mov	r1, r7
 801331c:	f7ed fbec 	bl	8000af8 <__aeabi_dcmpeq>
 8013320:	b110      	cbz	r0, 8013328 <_dtoa_r+0x6d8>
 8013322:	9b02      	ldr	r3, [sp, #8]
 8013324:	07d9      	lsls	r1, r3, #31
 8013326:	d40f      	bmi.n	8013348 <_dtoa_r+0x6f8>
 8013328:	4620      	mov	r0, r4
 801332a:	4659      	mov	r1, fp
 801332c:	f000 fe6a 	bl	8014004 <_Bfree>
 8013330:	2300      	movs	r3, #0
 8013332:	702b      	strb	r3, [r5, #0]
 8013334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013336:	f10a 0001 	add.w	r0, sl, #1
 801333a:	6018      	str	r0, [r3, #0]
 801333c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801333e:	2b00      	cmp	r3, #0
 8013340:	f43f acd8 	beq.w	8012cf4 <_dtoa_r+0xa4>
 8013344:	601d      	str	r5, [r3, #0]
 8013346:	e4d5      	b.n	8012cf4 <_dtoa_r+0xa4>
 8013348:	f8cd a01c 	str.w	sl, [sp, #28]
 801334c:	462b      	mov	r3, r5
 801334e:	461d      	mov	r5, r3
 8013350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013354:	2a39      	cmp	r2, #57	; 0x39
 8013356:	d108      	bne.n	801336a <_dtoa_r+0x71a>
 8013358:	9a00      	ldr	r2, [sp, #0]
 801335a:	429a      	cmp	r2, r3
 801335c:	d1f7      	bne.n	801334e <_dtoa_r+0x6fe>
 801335e:	9a07      	ldr	r2, [sp, #28]
 8013360:	9900      	ldr	r1, [sp, #0]
 8013362:	3201      	adds	r2, #1
 8013364:	9207      	str	r2, [sp, #28]
 8013366:	2230      	movs	r2, #48	; 0x30
 8013368:	700a      	strb	r2, [r1, #0]
 801336a:	781a      	ldrb	r2, [r3, #0]
 801336c:	3201      	adds	r2, #1
 801336e:	701a      	strb	r2, [r3, #0]
 8013370:	e78c      	b.n	801328c <_dtoa_r+0x63c>
 8013372:	4b7f      	ldr	r3, [pc, #508]	; (8013570 <_dtoa_r+0x920>)
 8013374:	2200      	movs	r2, #0
 8013376:	f7ed f957 	bl	8000628 <__aeabi_dmul>
 801337a:	2200      	movs	r2, #0
 801337c:	2300      	movs	r3, #0
 801337e:	4606      	mov	r6, r0
 8013380:	460f      	mov	r7, r1
 8013382:	f7ed fbb9 	bl	8000af8 <__aeabi_dcmpeq>
 8013386:	2800      	cmp	r0, #0
 8013388:	d09b      	beq.n	80132c2 <_dtoa_r+0x672>
 801338a:	e7cd      	b.n	8013328 <_dtoa_r+0x6d8>
 801338c:	9a08      	ldr	r2, [sp, #32]
 801338e:	2a00      	cmp	r2, #0
 8013390:	f000 80c4 	beq.w	801351c <_dtoa_r+0x8cc>
 8013394:	9a05      	ldr	r2, [sp, #20]
 8013396:	2a01      	cmp	r2, #1
 8013398:	f300 80a8 	bgt.w	80134ec <_dtoa_r+0x89c>
 801339c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801339e:	2a00      	cmp	r2, #0
 80133a0:	f000 80a0 	beq.w	80134e4 <_dtoa_r+0x894>
 80133a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80133a8:	9e06      	ldr	r6, [sp, #24]
 80133aa:	4645      	mov	r5, r8
 80133ac:	9a04      	ldr	r2, [sp, #16]
 80133ae:	2101      	movs	r1, #1
 80133b0:	441a      	add	r2, r3
 80133b2:	4620      	mov	r0, r4
 80133b4:	4498      	add	r8, r3
 80133b6:	9204      	str	r2, [sp, #16]
 80133b8:	f000 ff2a 	bl	8014210 <__i2b>
 80133bc:	4607      	mov	r7, r0
 80133be:	2d00      	cmp	r5, #0
 80133c0:	dd0b      	ble.n	80133da <_dtoa_r+0x78a>
 80133c2:	9b04      	ldr	r3, [sp, #16]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	dd08      	ble.n	80133da <_dtoa_r+0x78a>
 80133c8:	42ab      	cmp	r3, r5
 80133ca:	9a04      	ldr	r2, [sp, #16]
 80133cc:	bfa8      	it	ge
 80133ce:	462b      	movge	r3, r5
 80133d0:	eba8 0803 	sub.w	r8, r8, r3
 80133d4:	1aed      	subs	r5, r5, r3
 80133d6:	1ad3      	subs	r3, r2, r3
 80133d8:	9304      	str	r3, [sp, #16]
 80133da:	9b06      	ldr	r3, [sp, #24]
 80133dc:	b1fb      	cbz	r3, 801341e <_dtoa_r+0x7ce>
 80133de:	9b08      	ldr	r3, [sp, #32]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	f000 809f 	beq.w	8013524 <_dtoa_r+0x8d4>
 80133e6:	2e00      	cmp	r6, #0
 80133e8:	dd11      	ble.n	801340e <_dtoa_r+0x7be>
 80133ea:	4639      	mov	r1, r7
 80133ec:	4632      	mov	r2, r6
 80133ee:	4620      	mov	r0, r4
 80133f0:	f000 ffca 	bl	8014388 <__pow5mult>
 80133f4:	465a      	mov	r2, fp
 80133f6:	4601      	mov	r1, r0
 80133f8:	4607      	mov	r7, r0
 80133fa:	4620      	mov	r0, r4
 80133fc:	f000 ff1e 	bl	801423c <__multiply>
 8013400:	4659      	mov	r1, fp
 8013402:	9007      	str	r0, [sp, #28]
 8013404:	4620      	mov	r0, r4
 8013406:	f000 fdfd 	bl	8014004 <_Bfree>
 801340a:	9b07      	ldr	r3, [sp, #28]
 801340c:	469b      	mov	fp, r3
 801340e:	9b06      	ldr	r3, [sp, #24]
 8013410:	1b9a      	subs	r2, r3, r6
 8013412:	d004      	beq.n	801341e <_dtoa_r+0x7ce>
 8013414:	4659      	mov	r1, fp
 8013416:	4620      	mov	r0, r4
 8013418:	f000 ffb6 	bl	8014388 <__pow5mult>
 801341c:	4683      	mov	fp, r0
 801341e:	2101      	movs	r1, #1
 8013420:	4620      	mov	r0, r4
 8013422:	f000 fef5 	bl	8014210 <__i2b>
 8013426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013428:	2b00      	cmp	r3, #0
 801342a:	4606      	mov	r6, r0
 801342c:	dd7c      	ble.n	8013528 <_dtoa_r+0x8d8>
 801342e:	461a      	mov	r2, r3
 8013430:	4601      	mov	r1, r0
 8013432:	4620      	mov	r0, r4
 8013434:	f000 ffa8 	bl	8014388 <__pow5mult>
 8013438:	9b05      	ldr	r3, [sp, #20]
 801343a:	2b01      	cmp	r3, #1
 801343c:	4606      	mov	r6, r0
 801343e:	dd76      	ble.n	801352e <_dtoa_r+0x8de>
 8013440:	2300      	movs	r3, #0
 8013442:	9306      	str	r3, [sp, #24]
 8013444:	6933      	ldr	r3, [r6, #16]
 8013446:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801344a:	6918      	ldr	r0, [r3, #16]
 801344c:	f000 fe90 	bl	8014170 <__hi0bits>
 8013450:	f1c0 0020 	rsb	r0, r0, #32
 8013454:	9b04      	ldr	r3, [sp, #16]
 8013456:	4418      	add	r0, r3
 8013458:	f010 001f 	ands.w	r0, r0, #31
 801345c:	f000 8086 	beq.w	801356c <_dtoa_r+0x91c>
 8013460:	f1c0 0320 	rsb	r3, r0, #32
 8013464:	2b04      	cmp	r3, #4
 8013466:	dd7f      	ble.n	8013568 <_dtoa_r+0x918>
 8013468:	f1c0 001c 	rsb	r0, r0, #28
 801346c:	9b04      	ldr	r3, [sp, #16]
 801346e:	4403      	add	r3, r0
 8013470:	4480      	add	r8, r0
 8013472:	4405      	add	r5, r0
 8013474:	9304      	str	r3, [sp, #16]
 8013476:	f1b8 0f00 	cmp.w	r8, #0
 801347a:	dd05      	ble.n	8013488 <_dtoa_r+0x838>
 801347c:	4659      	mov	r1, fp
 801347e:	4642      	mov	r2, r8
 8013480:	4620      	mov	r0, r4
 8013482:	f000 ffdb 	bl	801443c <__lshift>
 8013486:	4683      	mov	fp, r0
 8013488:	9b04      	ldr	r3, [sp, #16]
 801348a:	2b00      	cmp	r3, #0
 801348c:	dd05      	ble.n	801349a <_dtoa_r+0x84a>
 801348e:	4631      	mov	r1, r6
 8013490:	461a      	mov	r2, r3
 8013492:	4620      	mov	r0, r4
 8013494:	f000 ffd2 	bl	801443c <__lshift>
 8013498:	4606      	mov	r6, r0
 801349a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801349c:	2b00      	cmp	r3, #0
 801349e:	d069      	beq.n	8013574 <_dtoa_r+0x924>
 80134a0:	4631      	mov	r1, r6
 80134a2:	4658      	mov	r0, fp
 80134a4:	f001 f836 	bl	8014514 <__mcmp>
 80134a8:	2800      	cmp	r0, #0
 80134aa:	da63      	bge.n	8013574 <_dtoa_r+0x924>
 80134ac:	2300      	movs	r3, #0
 80134ae:	4659      	mov	r1, fp
 80134b0:	220a      	movs	r2, #10
 80134b2:	4620      	mov	r0, r4
 80134b4:	f000 fdc8 	bl	8014048 <__multadd>
 80134b8:	9b08      	ldr	r3, [sp, #32]
 80134ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80134be:	4683      	mov	fp, r0
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	f000 818f 	beq.w	80137e4 <_dtoa_r+0xb94>
 80134c6:	4639      	mov	r1, r7
 80134c8:	2300      	movs	r3, #0
 80134ca:	220a      	movs	r2, #10
 80134cc:	4620      	mov	r0, r4
 80134ce:	f000 fdbb 	bl	8014048 <__multadd>
 80134d2:	f1b9 0f00 	cmp.w	r9, #0
 80134d6:	4607      	mov	r7, r0
 80134d8:	f300 808e 	bgt.w	80135f8 <_dtoa_r+0x9a8>
 80134dc:	9b05      	ldr	r3, [sp, #20]
 80134de:	2b02      	cmp	r3, #2
 80134e0:	dc50      	bgt.n	8013584 <_dtoa_r+0x934>
 80134e2:	e089      	b.n	80135f8 <_dtoa_r+0x9a8>
 80134e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80134e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80134ea:	e75d      	b.n	80133a8 <_dtoa_r+0x758>
 80134ec:	9b01      	ldr	r3, [sp, #4]
 80134ee:	1e5e      	subs	r6, r3, #1
 80134f0:	9b06      	ldr	r3, [sp, #24]
 80134f2:	42b3      	cmp	r3, r6
 80134f4:	bfbf      	itttt	lt
 80134f6:	9b06      	ldrlt	r3, [sp, #24]
 80134f8:	9606      	strlt	r6, [sp, #24]
 80134fa:	1af2      	sublt	r2, r6, r3
 80134fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80134fe:	bfb6      	itet	lt
 8013500:	189b      	addlt	r3, r3, r2
 8013502:	1b9e      	subge	r6, r3, r6
 8013504:	930d      	strlt	r3, [sp, #52]	; 0x34
 8013506:	9b01      	ldr	r3, [sp, #4]
 8013508:	bfb8      	it	lt
 801350a:	2600      	movlt	r6, #0
 801350c:	2b00      	cmp	r3, #0
 801350e:	bfb5      	itete	lt
 8013510:	eba8 0503 	sublt.w	r5, r8, r3
 8013514:	9b01      	ldrge	r3, [sp, #4]
 8013516:	2300      	movlt	r3, #0
 8013518:	4645      	movge	r5, r8
 801351a:	e747      	b.n	80133ac <_dtoa_r+0x75c>
 801351c:	9e06      	ldr	r6, [sp, #24]
 801351e:	9f08      	ldr	r7, [sp, #32]
 8013520:	4645      	mov	r5, r8
 8013522:	e74c      	b.n	80133be <_dtoa_r+0x76e>
 8013524:	9a06      	ldr	r2, [sp, #24]
 8013526:	e775      	b.n	8013414 <_dtoa_r+0x7c4>
 8013528:	9b05      	ldr	r3, [sp, #20]
 801352a:	2b01      	cmp	r3, #1
 801352c:	dc18      	bgt.n	8013560 <_dtoa_r+0x910>
 801352e:	9b02      	ldr	r3, [sp, #8]
 8013530:	b9b3      	cbnz	r3, 8013560 <_dtoa_r+0x910>
 8013532:	9b03      	ldr	r3, [sp, #12]
 8013534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013538:	b9a3      	cbnz	r3, 8013564 <_dtoa_r+0x914>
 801353a:	9b03      	ldr	r3, [sp, #12]
 801353c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013540:	0d1b      	lsrs	r3, r3, #20
 8013542:	051b      	lsls	r3, r3, #20
 8013544:	b12b      	cbz	r3, 8013552 <_dtoa_r+0x902>
 8013546:	9b04      	ldr	r3, [sp, #16]
 8013548:	3301      	adds	r3, #1
 801354a:	9304      	str	r3, [sp, #16]
 801354c:	f108 0801 	add.w	r8, r8, #1
 8013550:	2301      	movs	r3, #1
 8013552:	9306      	str	r3, [sp, #24]
 8013554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013556:	2b00      	cmp	r3, #0
 8013558:	f47f af74 	bne.w	8013444 <_dtoa_r+0x7f4>
 801355c:	2001      	movs	r0, #1
 801355e:	e779      	b.n	8013454 <_dtoa_r+0x804>
 8013560:	2300      	movs	r3, #0
 8013562:	e7f6      	b.n	8013552 <_dtoa_r+0x902>
 8013564:	9b02      	ldr	r3, [sp, #8]
 8013566:	e7f4      	b.n	8013552 <_dtoa_r+0x902>
 8013568:	d085      	beq.n	8013476 <_dtoa_r+0x826>
 801356a:	4618      	mov	r0, r3
 801356c:	301c      	adds	r0, #28
 801356e:	e77d      	b.n	801346c <_dtoa_r+0x81c>
 8013570:	40240000 	.word	0x40240000
 8013574:	9b01      	ldr	r3, [sp, #4]
 8013576:	2b00      	cmp	r3, #0
 8013578:	dc38      	bgt.n	80135ec <_dtoa_r+0x99c>
 801357a:	9b05      	ldr	r3, [sp, #20]
 801357c:	2b02      	cmp	r3, #2
 801357e:	dd35      	ble.n	80135ec <_dtoa_r+0x99c>
 8013580:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013584:	f1b9 0f00 	cmp.w	r9, #0
 8013588:	d10d      	bne.n	80135a6 <_dtoa_r+0x956>
 801358a:	4631      	mov	r1, r6
 801358c:	464b      	mov	r3, r9
 801358e:	2205      	movs	r2, #5
 8013590:	4620      	mov	r0, r4
 8013592:	f000 fd59 	bl	8014048 <__multadd>
 8013596:	4601      	mov	r1, r0
 8013598:	4606      	mov	r6, r0
 801359a:	4658      	mov	r0, fp
 801359c:	f000 ffba 	bl	8014514 <__mcmp>
 80135a0:	2800      	cmp	r0, #0
 80135a2:	f73f adbd 	bgt.w	8013120 <_dtoa_r+0x4d0>
 80135a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135a8:	9d00      	ldr	r5, [sp, #0]
 80135aa:	ea6f 0a03 	mvn.w	sl, r3
 80135ae:	f04f 0800 	mov.w	r8, #0
 80135b2:	4631      	mov	r1, r6
 80135b4:	4620      	mov	r0, r4
 80135b6:	f000 fd25 	bl	8014004 <_Bfree>
 80135ba:	2f00      	cmp	r7, #0
 80135bc:	f43f aeb4 	beq.w	8013328 <_dtoa_r+0x6d8>
 80135c0:	f1b8 0f00 	cmp.w	r8, #0
 80135c4:	d005      	beq.n	80135d2 <_dtoa_r+0x982>
 80135c6:	45b8      	cmp	r8, r7
 80135c8:	d003      	beq.n	80135d2 <_dtoa_r+0x982>
 80135ca:	4641      	mov	r1, r8
 80135cc:	4620      	mov	r0, r4
 80135ce:	f000 fd19 	bl	8014004 <_Bfree>
 80135d2:	4639      	mov	r1, r7
 80135d4:	4620      	mov	r0, r4
 80135d6:	f000 fd15 	bl	8014004 <_Bfree>
 80135da:	e6a5      	b.n	8013328 <_dtoa_r+0x6d8>
 80135dc:	2600      	movs	r6, #0
 80135de:	4637      	mov	r7, r6
 80135e0:	e7e1      	b.n	80135a6 <_dtoa_r+0x956>
 80135e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80135e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80135e8:	4637      	mov	r7, r6
 80135ea:	e599      	b.n	8013120 <_dtoa_r+0x4d0>
 80135ec:	9b08      	ldr	r3, [sp, #32]
 80135ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	f000 80fd 	beq.w	80137f2 <_dtoa_r+0xba2>
 80135f8:	2d00      	cmp	r5, #0
 80135fa:	dd05      	ble.n	8013608 <_dtoa_r+0x9b8>
 80135fc:	4639      	mov	r1, r7
 80135fe:	462a      	mov	r2, r5
 8013600:	4620      	mov	r0, r4
 8013602:	f000 ff1b 	bl	801443c <__lshift>
 8013606:	4607      	mov	r7, r0
 8013608:	9b06      	ldr	r3, [sp, #24]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d05c      	beq.n	80136c8 <_dtoa_r+0xa78>
 801360e:	6879      	ldr	r1, [r7, #4]
 8013610:	4620      	mov	r0, r4
 8013612:	f000 fcb7 	bl	8013f84 <_Balloc>
 8013616:	4605      	mov	r5, r0
 8013618:	b928      	cbnz	r0, 8013626 <_dtoa_r+0x9d6>
 801361a:	4b80      	ldr	r3, [pc, #512]	; (801381c <_dtoa_r+0xbcc>)
 801361c:	4602      	mov	r2, r0
 801361e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013622:	f7ff bb2e 	b.w	8012c82 <_dtoa_r+0x32>
 8013626:	693a      	ldr	r2, [r7, #16]
 8013628:	3202      	adds	r2, #2
 801362a:	0092      	lsls	r2, r2, #2
 801362c:	f107 010c 	add.w	r1, r7, #12
 8013630:	300c      	adds	r0, #12
 8013632:	f000 fc99 	bl	8013f68 <memcpy>
 8013636:	2201      	movs	r2, #1
 8013638:	4629      	mov	r1, r5
 801363a:	4620      	mov	r0, r4
 801363c:	f000 fefe 	bl	801443c <__lshift>
 8013640:	9b00      	ldr	r3, [sp, #0]
 8013642:	3301      	adds	r3, #1
 8013644:	9301      	str	r3, [sp, #4]
 8013646:	9b00      	ldr	r3, [sp, #0]
 8013648:	444b      	add	r3, r9
 801364a:	9307      	str	r3, [sp, #28]
 801364c:	9b02      	ldr	r3, [sp, #8]
 801364e:	f003 0301 	and.w	r3, r3, #1
 8013652:	46b8      	mov	r8, r7
 8013654:	9306      	str	r3, [sp, #24]
 8013656:	4607      	mov	r7, r0
 8013658:	9b01      	ldr	r3, [sp, #4]
 801365a:	4631      	mov	r1, r6
 801365c:	3b01      	subs	r3, #1
 801365e:	4658      	mov	r0, fp
 8013660:	9302      	str	r3, [sp, #8]
 8013662:	f7ff fa67 	bl	8012b34 <quorem>
 8013666:	4603      	mov	r3, r0
 8013668:	3330      	adds	r3, #48	; 0x30
 801366a:	9004      	str	r0, [sp, #16]
 801366c:	4641      	mov	r1, r8
 801366e:	4658      	mov	r0, fp
 8013670:	9308      	str	r3, [sp, #32]
 8013672:	f000 ff4f 	bl	8014514 <__mcmp>
 8013676:	463a      	mov	r2, r7
 8013678:	4681      	mov	r9, r0
 801367a:	4631      	mov	r1, r6
 801367c:	4620      	mov	r0, r4
 801367e:	f000 ff65 	bl	801454c <__mdiff>
 8013682:	68c2      	ldr	r2, [r0, #12]
 8013684:	9b08      	ldr	r3, [sp, #32]
 8013686:	4605      	mov	r5, r0
 8013688:	bb02      	cbnz	r2, 80136cc <_dtoa_r+0xa7c>
 801368a:	4601      	mov	r1, r0
 801368c:	4658      	mov	r0, fp
 801368e:	f000 ff41 	bl	8014514 <__mcmp>
 8013692:	9b08      	ldr	r3, [sp, #32]
 8013694:	4602      	mov	r2, r0
 8013696:	4629      	mov	r1, r5
 8013698:	4620      	mov	r0, r4
 801369a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801369e:	f000 fcb1 	bl	8014004 <_Bfree>
 80136a2:	9b05      	ldr	r3, [sp, #20]
 80136a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136a6:	9d01      	ldr	r5, [sp, #4]
 80136a8:	ea43 0102 	orr.w	r1, r3, r2
 80136ac:	9b06      	ldr	r3, [sp, #24]
 80136ae:	430b      	orrs	r3, r1
 80136b0:	9b08      	ldr	r3, [sp, #32]
 80136b2:	d10d      	bne.n	80136d0 <_dtoa_r+0xa80>
 80136b4:	2b39      	cmp	r3, #57	; 0x39
 80136b6:	d029      	beq.n	801370c <_dtoa_r+0xabc>
 80136b8:	f1b9 0f00 	cmp.w	r9, #0
 80136bc:	dd01      	ble.n	80136c2 <_dtoa_r+0xa72>
 80136be:	9b04      	ldr	r3, [sp, #16]
 80136c0:	3331      	adds	r3, #49	; 0x31
 80136c2:	9a02      	ldr	r2, [sp, #8]
 80136c4:	7013      	strb	r3, [r2, #0]
 80136c6:	e774      	b.n	80135b2 <_dtoa_r+0x962>
 80136c8:	4638      	mov	r0, r7
 80136ca:	e7b9      	b.n	8013640 <_dtoa_r+0x9f0>
 80136cc:	2201      	movs	r2, #1
 80136ce:	e7e2      	b.n	8013696 <_dtoa_r+0xa46>
 80136d0:	f1b9 0f00 	cmp.w	r9, #0
 80136d4:	db06      	blt.n	80136e4 <_dtoa_r+0xa94>
 80136d6:	9905      	ldr	r1, [sp, #20]
 80136d8:	ea41 0909 	orr.w	r9, r1, r9
 80136dc:	9906      	ldr	r1, [sp, #24]
 80136de:	ea59 0101 	orrs.w	r1, r9, r1
 80136e2:	d120      	bne.n	8013726 <_dtoa_r+0xad6>
 80136e4:	2a00      	cmp	r2, #0
 80136e6:	ddec      	ble.n	80136c2 <_dtoa_r+0xa72>
 80136e8:	4659      	mov	r1, fp
 80136ea:	2201      	movs	r2, #1
 80136ec:	4620      	mov	r0, r4
 80136ee:	9301      	str	r3, [sp, #4]
 80136f0:	f000 fea4 	bl	801443c <__lshift>
 80136f4:	4631      	mov	r1, r6
 80136f6:	4683      	mov	fp, r0
 80136f8:	f000 ff0c 	bl	8014514 <__mcmp>
 80136fc:	2800      	cmp	r0, #0
 80136fe:	9b01      	ldr	r3, [sp, #4]
 8013700:	dc02      	bgt.n	8013708 <_dtoa_r+0xab8>
 8013702:	d1de      	bne.n	80136c2 <_dtoa_r+0xa72>
 8013704:	07da      	lsls	r2, r3, #31
 8013706:	d5dc      	bpl.n	80136c2 <_dtoa_r+0xa72>
 8013708:	2b39      	cmp	r3, #57	; 0x39
 801370a:	d1d8      	bne.n	80136be <_dtoa_r+0xa6e>
 801370c:	9a02      	ldr	r2, [sp, #8]
 801370e:	2339      	movs	r3, #57	; 0x39
 8013710:	7013      	strb	r3, [r2, #0]
 8013712:	462b      	mov	r3, r5
 8013714:	461d      	mov	r5, r3
 8013716:	3b01      	subs	r3, #1
 8013718:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801371c:	2a39      	cmp	r2, #57	; 0x39
 801371e:	d050      	beq.n	80137c2 <_dtoa_r+0xb72>
 8013720:	3201      	adds	r2, #1
 8013722:	701a      	strb	r2, [r3, #0]
 8013724:	e745      	b.n	80135b2 <_dtoa_r+0x962>
 8013726:	2a00      	cmp	r2, #0
 8013728:	dd03      	ble.n	8013732 <_dtoa_r+0xae2>
 801372a:	2b39      	cmp	r3, #57	; 0x39
 801372c:	d0ee      	beq.n	801370c <_dtoa_r+0xabc>
 801372e:	3301      	adds	r3, #1
 8013730:	e7c7      	b.n	80136c2 <_dtoa_r+0xa72>
 8013732:	9a01      	ldr	r2, [sp, #4]
 8013734:	9907      	ldr	r1, [sp, #28]
 8013736:	f802 3c01 	strb.w	r3, [r2, #-1]
 801373a:	428a      	cmp	r2, r1
 801373c:	d02a      	beq.n	8013794 <_dtoa_r+0xb44>
 801373e:	4659      	mov	r1, fp
 8013740:	2300      	movs	r3, #0
 8013742:	220a      	movs	r2, #10
 8013744:	4620      	mov	r0, r4
 8013746:	f000 fc7f 	bl	8014048 <__multadd>
 801374a:	45b8      	cmp	r8, r7
 801374c:	4683      	mov	fp, r0
 801374e:	f04f 0300 	mov.w	r3, #0
 8013752:	f04f 020a 	mov.w	r2, #10
 8013756:	4641      	mov	r1, r8
 8013758:	4620      	mov	r0, r4
 801375a:	d107      	bne.n	801376c <_dtoa_r+0xb1c>
 801375c:	f000 fc74 	bl	8014048 <__multadd>
 8013760:	4680      	mov	r8, r0
 8013762:	4607      	mov	r7, r0
 8013764:	9b01      	ldr	r3, [sp, #4]
 8013766:	3301      	adds	r3, #1
 8013768:	9301      	str	r3, [sp, #4]
 801376a:	e775      	b.n	8013658 <_dtoa_r+0xa08>
 801376c:	f000 fc6c 	bl	8014048 <__multadd>
 8013770:	4639      	mov	r1, r7
 8013772:	4680      	mov	r8, r0
 8013774:	2300      	movs	r3, #0
 8013776:	220a      	movs	r2, #10
 8013778:	4620      	mov	r0, r4
 801377a:	f000 fc65 	bl	8014048 <__multadd>
 801377e:	4607      	mov	r7, r0
 8013780:	e7f0      	b.n	8013764 <_dtoa_r+0xb14>
 8013782:	f1b9 0f00 	cmp.w	r9, #0
 8013786:	9a00      	ldr	r2, [sp, #0]
 8013788:	bfcc      	ite	gt
 801378a:	464d      	movgt	r5, r9
 801378c:	2501      	movle	r5, #1
 801378e:	4415      	add	r5, r2
 8013790:	f04f 0800 	mov.w	r8, #0
 8013794:	4659      	mov	r1, fp
 8013796:	2201      	movs	r2, #1
 8013798:	4620      	mov	r0, r4
 801379a:	9301      	str	r3, [sp, #4]
 801379c:	f000 fe4e 	bl	801443c <__lshift>
 80137a0:	4631      	mov	r1, r6
 80137a2:	4683      	mov	fp, r0
 80137a4:	f000 feb6 	bl	8014514 <__mcmp>
 80137a8:	2800      	cmp	r0, #0
 80137aa:	dcb2      	bgt.n	8013712 <_dtoa_r+0xac2>
 80137ac:	d102      	bne.n	80137b4 <_dtoa_r+0xb64>
 80137ae:	9b01      	ldr	r3, [sp, #4]
 80137b0:	07db      	lsls	r3, r3, #31
 80137b2:	d4ae      	bmi.n	8013712 <_dtoa_r+0xac2>
 80137b4:	462b      	mov	r3, r5
 80137b6:	461d      	mov	r5, r3
 80137b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80137bc:	2a30      	cmp	r2, #48	; 0x30
 80137be:	d0fa      	beq.n	80137b6 <_dtoa_r+0xb66>
 80137c0:	e6f7      	b.n	80135b2 <_dtoa_r+0x962>
 80137c2:	9a00      	ldr	r2, [sp, #0]
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d1a5      	bne.n	8013714 <_dtoa_r+0xac4>
 80137c8:	f10a 0a01 	add.w	sl, sl, #1
 80137cc:	2331      	movs	r3, #49	; 0x31
 80137ce:	e779      	b.n	80136c4 <_dtoa_r+0xa74>
 80137d0:	4b13      	ldr	r3, [pc, #76]	; (8013820 <_dtoa_r+0xbd0>)
 80137d2:	f7ff baaf 	b.w	8012d34 <_dtoa_r+0xe4>
 80137d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137d8:	2b00      	cmp	r3, #0
 80137da:	f47f aa86 	bne.w	8012cea <_dtoa_r+0x9a>
 80137de:	4b11      	ldr	r3, [pc, #68]	; (8013824 <_dtoa_r+0xbd4>)
 80137e0:	f7ff baa8 	b.w	8012d34 <_dtoa_r+0xe4>
 80137e4:	f1b9 0f00 	cmp.w	r9, #0
 80137e8:	dc03      	bgt.n	80137f2 <_dtoa_r+0xba2>
 80137ea:	9b05      	ldr	r3, [sp, #20]
 80137ec:	2b02      	cmp	r3, #2
 80137ee:	f73f aec9 	bgt.w	8013584 <_dtoa_r+0x934>
 80137f2:	9d00      	ldr	r5, [sp, #0]
 80137f4:	4631      	mov	r1, r6
 80137f6:	4658      	mov	r0, fp
 80137f8:	f7ff f99c 	bl	8012b34 <quorem>
 80137fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013800:	f805 3b01 	strb.w	r3, [r5], #1
 8013804:	9a00      	ldr	r2, [sp, #0]
 8013806:	1aaa      	subs	r2, r5, r2
 8013808:	4591      	cmp	r9, r2
 801380a:	ddba      	ble.n	8013782 <_dtoa_r+0xb32>
 801380c:	4659      	mov	r1, fp
 801380e:	2300      	movs	r3, #0
 8013810:	220a      	movs	r2, #10
 8013812:	4620      	mov	r0, r4
 8013814:	f000 fc18 	bl	8014048 <__multadd>
 8013818:	4683      	mov	fp, r0
 801381a:	e7eb      	b.n	80137f4 <_dtoa_r+0xba4>
 801381c:	080296b1 	.word	0x080296b1
 8013820:	08029410 	.word	0x08029410
 8013824:	08029645 	.word	0x08029645

08013828 <fiprintf>:
 8013828:	b40e      	push	{r1, r2, r3}
 801382a:	b503      	push	{r0, r1, lr}
 801382c:	4601      	mov	r1, r0
 801382e:	ab03      	add	r3, sp, #12
 8013830:	4805      	ldr	r0, [pc, #20]	; (8013848 <fiprintf+0x20>)
 8013832:	f853 2b04 	ldr.w	r2, [r3], #4
 8013836:	6800      	ldr	r0, [r0, #0]
 8013838:	9301      	str	r3, [sp, #4]
 801383a:	f001 fa9d 	bl	8014d78 <_vfiprintf_r>
 801383e:	b002      	add	sp, #8
 8013840:	f85d eb04 	ldr.w	lr, [sp], #4
 8013844:	b003      	add	sp, #12
 8013846:	4770      	bx	lr
 8013848:	20000040 	.word	0x20000040

0801384c <rshift>:
 801384c:	6903      	ldr	r3, [r0, #16]
 801384e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013852:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013856:	ea4f 1261 	mov.w	r2, r1, asr #5
 801385a:	f100 0414 	add.w	r4, r0, #20
 801385e:	dd45      	ble.n	80138ec <rshift+0xa0>
 8013860:	f011 011f 	ands.w	r1, r1, #31
 8013864:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013868:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801386c:	d10c      	bne.n	8013888 <rshift+0x3c>
 801386e:	f100 0710 	add.w	r7, r0, #16
 8013872:	4629      	mov	r1, r5
 8013874:	42b1      	cmp	r1, r6
 8013876:	d334      	bcc.n	80138e2 <rshift+0x96>
 8013878:	1a9b      	subs	r3, r3, r2
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	1eea      	subs	r2, r5, #3
 801387e:	4296      	cmp	r6, r2
 8013880:	bf38      	it	cc
 8013882:	2300      	movcc	r3, #0
 8013884:	4423      	add	r3, r4
 8013886:	e015      	b.n	80138b4 <rshift+0x68>
 8013888:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801388c:	f1c1 0820 	rsb	r8, r1, #32
 8013890:	40cf      	lsrs	r7, r1
 8013892:	f105 0e04 	add.w	lr, r5, #4
 8013896:	46a1      	mov	r9, r4
 8013898:	4576      	cmp	r6, lr
 801389a:	46f4      	mov	ip, lr
 801389c:	d815      	bhi.n	80138ca <rshift+0x7e>
 801389e:	1a9b      	subs	r3, r3, r2
 80138a0:	009a      	lsls	r2, r3, #2
 80138a2:	3a04      	subs	r2, #4
 80138a4:	3501      	adds	r5, #1
 80138a6:	42ae      	cmp	r6, r5
 80138a8:	bf38      	it	cc
 80138aa:	2200      	movcc	r2, #0
 80138ac:	18a3      	adds	r3, r4, r2
 80138ae:	50a7      	str	r7, [r4, r2]
 80138b0:	b107      	cbz	r7, 80138b4 <rshift+0x68>
 80138b2:	3304      	adds	r3, #4
 80138b4:	1b1a      	subs	r2, r3, r4
 80138b6:	42a3      	cmp	r3, r4
 80138b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80138bc:	bf08      	it	eq
 80138be:	2300      	moveq	r3, #0
 80138c0:	6102      	str	r2, [r0, #16]
 80138c2:	bf08      	it	eq
 80138c4:	6143      	streq	r3, [r0, #20]
 80138c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138ca:	f8dc c000 	ldr.w	ip, [ip]
 80138ce:	fa0c fc08 	lsl.w	ip, ip, r8
 80138d2:	ea4c 0707 	orr.w	r7, ip, r7
 80138d6:	f849 7b04 	str.w	r7, [r9], #4
 80138da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80138de:	40cf      	lsrs	r7, r1
 80138e0:	e7da      	b.n	8013898 <rshift+0x4c>
 80138e2:	f851 cb04 	ldr.w	ip, [r1], #4
 80138e6:	f847 cf04 	str.w	ip, [r7, #4]!
 80138ea:	e7c3      	b.n	8013874 <rshift+0x28>
 80138ec:	4623      	mov	r3, r4
 80138ee:	e7e1      	b.n	80138b4 <rshift+0x68>

080138f0 <__hexdig_fun>:
 80138f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80138f4:	2b09      	cmp	r3, #9
 80138f6:	d802      	bhi.n	80138fe <__hexdig_fun+0xe>
 80138f8:	3820      	subs	r0, #32
 80138fa:	b2c0      	uxtb	r0, r0
 80138fc:	4770      	bx	lr
 80138fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013902:	2b05      	cmp	r3, #5
 8013904:	d801      	bhi.n	801390a <__hexdig_fun+0x1a>
 8013906:	3847      	subs	r0, #71	; 0x47
 8013908:	e7f7      	b.n	80138fa <__hexdig_fun+0xa>
 801390a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801390e:	2b05      	cmp	r3, #5
 8013910:	d801      	bhi.n	8013916 <__hexdig_fun+0x26>
 8013912:	3827      	subs	r0, #39	; 0x27
 8013914:	e7f1      	b.n	80138fa <__hexdig_fun+0xa>
 8013916:	2000      	movs	r0, #0
 8013918:	4770      	bx	lr
	...

0801391c <__gethex>:
 801391c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013920:	ed2d 8b02 	vpush	{d8}
 8013924:	b089      	sub	sp, #36	; 0x24
 8013926:	ee08 0a10 	vmov	s16, r0
 801392a:	9304      	str	r3, [sp, #16]
 801392c:	4bbc      	ldr	r3, [pc, #752]	; (8013c20 <__gethex+0x304>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	9301      	str	r3, [sp, #4]
 8013932:	4618      	mov	r0, r3
 8013934:	468b      	mov	fp, r1
 8013936:	4690      	mov	r8, r2
 8013938:	f7ec fc5c 	bl	80001f4 <strlen>
 801393c:	9b01      	ldr	r3, [sp, #4]
 801393e:	f8db 2000 	ldr.w	r2, [fp]
 8013942:	4403      	add	r3, r0
 8013944:	4682      	mov	sl, r0
 8013946:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801394a:	9305      	str	r3, [sp, #20]
 801394c:	1c93      	adds	r3, r2, #2
 801394e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013952:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013956:	32fe      	adds	r2, #254	; 0xfe
 8013958:	18d1      	adds	r1, r2, r3
 801395a:	461f      	mov	r7, r3
 801395c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013960:	9100      	str	r1, [sp, #0]
 8013962:	2830      	cmp	r0, #48	; 0x30
 8013964:	d0f8      	beq.n	8013958 <__gethex+0x3c>
 8013966:	f7ff ffc3 	bl	80138f0 <__hexdig_fun>
 801396a:	4604      	mov	r4, r0
 801396c:	2800      	cmp	r0, #0
 801396e:	d13a      	bne.n	80139e6 <__gethex+0xca>
 8013970:	9901      	ldr	r1, [sp, #4]
 8013972:	4652      	mov	r2, sl
 8013974:	4638      	mov	r0, r7
 8013976:	f001 fb47 	bl	8015008 <strncmp>
 801397a:	4605      	mov	r5, r0
 801397c:	2800      	cmp	r0, #0
 801397e:	d168      	bne.n	8013a52 <__gethex+0x136>
 8013980:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013984:	eb07 060a 	add.w	r6, r7, sl
 8013988:	f7ff ffb2 	bl	80138f0 <__hexdig_fun>
 801398c:	2800      	cmp	r0, #0
 801398e:	d062      	beq.n	8013a56 <__gethex+0x13a>
 8013990:	4633      	mov	r3, r6
 8013992:	7818      	ldrb	r0, [r3, #0]
 8013994:	2830      	cmp	r0, #48	; 0x30
 8013996:	461f      	mov	r7, r3
 8013998:	f103 0301 	add.w	r3, r3, #1
 801399c:	d0f9      	beq.n	8013992 <__gethex+0x76>
 801399e:	f7ff ffa7 	bl	80138f0 <__hexdig_fun>
 80139a2:	2301      	movs	r3, #1
 80139a4:	fab0 f480 	clz	r4, r0
 80139a8:	0964      	lsrs	r4, r4, #5
 80139aa:	4635      	mov	r5, r6
 80139ac:	9300      	str	r3, [sp, #0]
 80139ae:	463a      	mov	r2, r7
 80139b0:	4616      	mov	r6, r2
 80139b2:	3201      	adds	r2, #1
 80139b4:	7830      	ldrb	r0, [r6, #0]
 80139b6:	f7ff ff9b 	bl	80138f0 <__hexdig_fun>
 80139ba:	2800      	cmp	r0, #0
 80139bc:	d1f8      	bne.n	80139b0 <__gethex+0x94>
 80139be:	9901      	ldr	r1, [sp, #4]
 80139c0:	4652      	mov	r2, sl
 80139c2:	4630      	mov	r0, r6
 80139c4:	f001 fb20 	bl	8015008 <strncmp>
 80139c8:	b980      	cbnz	r0, 80139ec <__gethex+0xd0>
 80139ca:	b94d      	cbnz	r5, 80139e0 <__gethex+0xc4>
 80139cc:	eb06 050a 	add.w	r5, r6, sl
 80139d0:	462a      	mov	r2, r5
 80139d2:	4616      	mov	r6, r2
 80139d4:	3201      	adds	r2, #1
 80139d6:	7830      	ldrb	r0, [r6, #0]
 80139d8:	f7ff ff8a 	bl	80138f0 <__hexdig_fun>
 80139dc:	2800      	cmp	r0, #0
 80139de:	d1f8      	bne.n	80139d2 <__gethex+0xb6>
 80139e0:	1bad      	subs	r5, r5, r6
 80139e2:	00ad      	lsls	r5, r5, #2
 80139e4:	e004      	b.n	80139f0 <__gethex+0xd4>
 80139e6:	2400      	movs	r4, #0
 80139e8:	4625      	mov	r5, r4
 80139ea:	e7e0      	b.n	80139ae <__gethex+0x92>
 80139ec:	2d00      	cmp	r5, #0
 80139ee:	d1f7      	bne.n	80139e0 <__gethex+0xc4>
 80139f0:	7833      	ldrb	r3, [r6, #0]
 80139f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80139f6:	2b50      	cmp	r3, #80	; 0x50
 80139f8:	d13b      	bne.n	8013a72 <__gethex+0x156>
 80139fa:	7873      	ldrb	r3, [r6, #1]
 80139fc:	2b2b      	cmp	r3, #43	; 0x2b
 80139fe:	d02c      	beq.n	8013a5a <__gethex+0x13e>
 8013a00:	2b2d      	cmp	r3, #45	; 0x2d
 8013a02:	d02e      	beq.n	8013a62 <__gethex+0x146>
 8013a04:	1c71      	adds	r1, r6, #1
 8013a06:	f04f 0900 	mov.w	r9, #0
 8013a0a:	7808      	ldrb	r0, [r1, #0]
 8013a0c:	f7ff ff70 	bl	80138f0 <__hexdig_fun>
 8013a10:	1e43      	subs	r3, r0, #1
 8013a12:	b2db      	uxtb	r3, r3
 8013a14:	2b18      	cmp	r3, #24
 8013a16:	d82c      	bhi.n	8013a72 <__gethex+0x156>
 8013a18:	f1a0 0210 	sub.w	r2, r0, #16
 8013a1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013a20:	f7ff ff66 	bl	80138f0 <__hexdig_fun>
 8013a24:	1e43      	subs	r3, r0, #1
 8013a26:	b2db      	uxtb	r3, r3
 8013a28:	2b18      	cmp	r3, #24
 8013a2a:	d91d      	bls.n	8013a68 <__gethex+0x14c>
 8013a2c:	f1b9 0f00 	cmp.w	r9, #0
 8013a30:	d000      	beq.n	8013a34 <__gethex+0x118>
 8013a32:	4252      	negs	r2, r2
 8013a34:	4415      	add	r5, r2
 8013a36:	f8cb 1000 	str.w	r1, [fp]
 8013a3a:	b1e4      	cbz	r4, 8013a76 <__gethex+0x15a>
 8013a3c:	9b00      	ldr	r3, [sp, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	bf14      	ite	ne
 8013a42:	2700      	movne	r7, #0
 8013a44:	2706      	moveq	r7, #6
 8013a46:	4638      	mov	r0, r7
 8013a48:	b009      	add	sp, #36	; 0x24
 8013a4a:	ecbd 8b02 	vpop	{d8}
 8013a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a52:	463e      	mov	r6, r7
 8013a54:	4625      	mov	r5, r4
 8013a56:	2401      	movs	r4, #1
 8013a58:	e7ca      	b.n	80139f0 <__gethex+0xd4>
 8013a5a:	f04f 0900 	mov.w	r9, #0
 8013a5e:	1cb1      	adds	r1, r6, #2
 8013a60:	e7d3      	b.n	8013a0a <__gethex+0xee>
 8013a62:	f04f 0901 	mov.w	r9, #1
 8013a66:	e7fa      	b.n	8013a5e <__gethex+0x142>
 8013a68:	230a      	movs	r3, #10
 8013a6a:	fb03 0202 	mla	r2, r3, r2, r0
 8013a6e:	3a10      	subs	r2, #16
 8013a70:	e7d4      	b.n	8013a1c <__gethex+0x100>
 8013a72:	4631      	mov	r1, r6
 8013a74:	e7df      	b.n	8013a36 <__gethex+0x11a>
 8013a76:	1bf3      	subs	r3, r6, r7
 8013a78:	3b01      	subs	r3, #1
 8013a7a:	4621      	mov	r1, r4
 8013a7c:	2b07      	cmp	r3, #7
 8013a7e:	dc0b      	bgt.n	8013a98 <__gethex+0x17c>
 8013a80:	ee18 0a10 	vmov	r0, s16
 8013a84:	f000 fa7e 	bl	8013f84 <_Balloc>
 8013a88:	4604      	mov	r4, r0
 8013a8a:	b940      	cbnz	r0, 8013a9e <__gethex+0x182>
 8013a8c:	4b65      	ldr	r3, [pc, #404]	; (8013c24 <__gethex+0x308>)
 8013a8e:	4602      	mov	r2, r0
 8013a90:	21de      	movs	r1, #222	; 0xde
 8013a92:	4865      	ldr	r0, [pc, #404]	; (8013c28 <__gethex+0x30c>)
 8013a94:	f7ff f830 	bl	8012af8 <__assert_func>
 8013a98:	3101      	adds	r1, #1
 8013a9a:	105b      	asrs	r3, r3, #1
 8013a9c:	e7ee      	b.n	8013a7c <__gethex+0x160>
 8013a9e:	f100 0914 	add.w	r9, r0, #20
 8013aa2:	f04f 0b00 	mov.w	fp, #0
 8013aa6:	f1ca 0301 	rsb	r3, sl, #1
 8013aaa:	f8cd 9008 	str.w	r9, [sp, #8]
 8013aae:	f8cd b000 	str.w	fp, [sp]
 8013ab2:	9306      	str	r3, [sp, #24]
 8013ab4:	42b7      	cmp	r7, r6
 8013ab6:	d340      	bcc.n	8013b3a <__gethex+0x21e>
 8013ab8:	9802      	ldr	r0, [sp, #8]
 8013aba:	9b00      	ldr	r3, [sp, #0]
 8013abc:	f840 3b04 	str.w	r3, [r0], #4
 8013ac0:	eba0 0009 	sub.w	r0, r0, r9
 8013ac4:	1080      	asrs	r0, r0, #2
 8013ac6:	0146      	lsls	r6, r0, #5
 8013ac8:	6120      	str	r0, [r4, #16]
 8013aca:	4618      	mov	r0, r3
 8013acc:	f000 fb50 	bl	8014170 <__hi0bits>
 8013ad0:	1a30      	subs	r0, r6, r0
 8013ad2:	f8d8 6000 	ldr.w	r6, [r8]
 8013ad6:	42b0      	cmp	r0, r6
 8013ad8:	dd63      	ble.n	8013ba2 <__gethex+0x286>
 8013ada:	1b87      	subs	r7, r0, r6
 8013adc:	4639      	mov	r1, r7
 8013ade:	4620      	mov	r0, r4
 8013ae0:	f000 feea 	bl	80148b8 <__any_on>
 8013ae4:	4682      	mov	sl, r0
 8013ae6:	b1a8      	cbz	r0, 8013b14 <__gethex+0x1f8>
 8013ae8:	1e7b      	subs	r3, r7, #1
 8013aea:	1159      	asrs	r1, r3, #5
 8013aec:	f003 021f 	and.w	r2, r3, #31
 8013af0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013af4:	f04f 0a01 	mov.w	sl, #1
 8013af8:	fa0a f202 	lsl.w	r2, sl, r2
 8013afc:	420a      	tst	r2, r1
 8013afe:	d009      	beq.n	8013b14 <__gethex+0x1f8>
 8013b00:	4553      	cmp	r3, sl
 8013b02:	dd05      	ble.n	8013b10 <__gethex+0x1f4>
 8013b04:	1eb9      	subs	r1, r7, #2
 8013b06:	4620      	mov	r0, r4
 8013b08:	f000 fed6 	bl	80148b8 <__any_on>
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	d145      	bne.n	8013b9c <__gethex+0x280>
 8013b10:	f04f 0a02 	mov.w	sl, #2
 8013b14:	4639      	mov	r1, r7
 8013b16:	4620      	mov	r0, r4
 8013b18:	f7ff fe98 	bl	801384c <rshift>
 8013b1c:	443d      	add	r5, r7
 8013b1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013b22:	42ab      	cmp	r3, r5
 8013b24:	da4c      	bge.n	8013bc0 <__gethex+0x2a4>
 8013b26:	ee18 0a10 	vmov	r0, s16
 8013b2a:	4621      	mov	r1, r4
 8013b2c:	f000 fa6a 	bl	8014004 <_Bfree>
 8013b30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013b32:	2300      	movs	r3, #0
 8013b34:	6013      	str	r3, [r2, #0]
 8013b36:	27a3      	movs	r7, #163	; 0xa3
 8013b38:	e785      	b.n	8013a46 <__gethex+0x12a>
 8013b3a:	1e73      	subs	r3, r6, #1
 8013b3c:	9a05      	ldr	r2, [sp, #20]
 8013b3e:	9303      	str	r3, [sp, #12]
 8013b40:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013b44:	4293      	cmp	r3, r2
 8013b46:	d019      	beq.n	8013b7c <__gethex+0x260>
 8013b48:	f1bb 0f20 	cmp.w	fp, #32
 8013b4c:	d107      	bne.n	8013b5e <__gethex+0x242>
 8013b4e:	9b02      	ldr	r3, [sp, #8]
 8013b50:	9a00      	ldr	r2, [sp, #0]
 8013b52:	f843 2b04 	str.w	r2, [r3], #4
 8013b56:	9302      	str	r3, [sp, #8]
 8013b58:	2300      	movs	r3, #0
 8013b5a:	9300      	str	r3, [sp, #0]
 8013b5c:	469b      	mov	fp, r3
 8013b5e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013b62:	f7ff fec5 	bl	80138f0 <__hexdig_fun>
 8013b66:	9b00      	ldr	r3, [sp, #0]
 8013b68:	f000 000f 	and.w	r0, r0, #15
 8013b6c:	fa00 f00b 	lsl.w	r0, r0, fp
 8013b70:	4303      	orrs	r3, r0
 8013b72:	9300      	str	r3, [sp, #0]
 8013b74:	f10b 0b04 	add.w	fp, fp, #4
 8013b78:	9b03      	ldr	r3, [sp, #12]
 8013b7a:	e00d      	b.n	8013b98 <__gethex+0x27c>
 8013b7c:	9b03      	ldr	r3, [sp, #12]
 8013b7e:	9a06      	ldr	r2, [sp, #24]
 8013b80:	4413      	add	r3, r2
 8013b82:	42bb      	cmp	r3, r7
 8013b84:	d3e0      	bcc.n	8013b48 <__gethex+0x22c>
 8013b86:	4618      	mov	r0, r3
 8013b88:	9901      	ldr	r1, [sp, #4]
 8013b8a:	9307      	str	r3, [sp, #28]
 8013b8c:	4652      	mov	r2, sl
 8013b8e:	f001 fa3b 	bl	8015008 <strncmp>
 8013b92:	9b07      	ldr	r3, [sp, #28]
 8013b94:	2800      	cmp	r0, #0
 8013b96:	d1d7      	bne.n	8013b48 <__gethex+0x22c>
 8013b98:	461e      	mov	r6, r3
 8013b9a:	e78b      	b.n	8013ab4 <__gethex+0x198>
 8013b9c:	f04f 0a03 	mov.w	sl, #3
 8013ba0:	e7b8      	b.n	8013b14 <__gethex+0x1f8>
 8013ba2:	da0a      	bge.n	8013bba <__gethex+0x29e>
 8013ba4:	1a37      	subs	r7, r6, r0
 8013ba6:	4621      	mov	r1, r4
 8013ba8:	ee18 0a10 	vmov	r0, s16
 8013bac:	463a      	mov	r2, r7
 8013bae:	f000 fc45 	bl	801443c <__lshift>
 8013bb2:	1bed      	subs	r5, r5, r7
 8013bb4:	4604      	mov	r4, r0
 8013bb6:	f100 0914 	add.w	r9, r0, #20
 8013bba:	f04f 0a00 	mov.w	sl, #0
 8013bbe:	e7ae      	b.n	8013b1e <__gethex+0x202>
 8013bc0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013bc4:	42a8      	cmp	r0, r5
 8013bc6:	dd72      	ble.n	8013cae <__gethex+0x392>
 8013bc8:	1b45      	subs	r5, r0, r5
 8013bca:	42ae      	cmp	r6, r5
 8013bcc:	dc36      	bgt.n	8013c3c <__gethex+0x320>
 8013bce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013bd2:	2b02      	cmp	r3, #2
 8013bd4:	d02a      	beq.n	8013c2c <__gethex+0x310>
 8013bd6:	2b03      	cmp	r3, #3
 8013bd8:	d02c      	beq.n	8013c34 <__gethex+0x318>
 8013bda:	2b01      	cmp	r3, #1
 8013bdc:	d115      	bne.n	8013c0a <__gethex+0x2ee>
 8013bde:	42ae      	cmp	r6, r5
 8013be0:	d113      	bne.n	8013c0a <__gethex+0x2ee>
 8013be2:	2e01      	cmp	r6, #1
 8013be4:	d10b      	bne.n	8013bfe <__gethex+0x2e2>
 8013be6:	9a04      	ldr	r2, [sp, #16]
 8013be8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013bec:	6013      	str	r3, [r2, #0]
 8013bee:	2301      	movs	r3, #1
 8013bf0:	6123      	str	r3, [r4, #16]
 8013bf2:	f8c9 3000 	str.w	r3, [r9]
 8013bf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013bf8:	2762      	movs	r7, #98	; 0x62
 8013bfa:	601c      	str	r4, [r3, #0]
 8013bfc:	e723      	b.n	8013a46 <__gethex+0x12a>
 8013bfe:	1e71      	subs	r1, r6, #1
 8013c00:	4620      	mov	r0, r4
 8013c02:	f000 fe59 	bl	80148b8 <__any_on>
 8013c06:	2800      	cmp	r0, #0
 8013c08:	d1ed      	bne.n	8013be6 <__gethex+0x2ca>
 8013c0a:	ee18 0a10 	vmov	r0, s16
 8013c0e:	4621      	mov	r1, r4
 8013c10:	f000 f9f8 	bl	8014004 <_Bfree>
 8013c14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013c16:	2300      	movs	r3, #0
 8013c18:	6013      	str	r3, [r2, #0]
 8013c1a:	2750      	movs	r7, #80	; 0x50
 8013c1c:	e713      	b.n	8013a46 <__gethex+0x12a>
 8013c1e:	bf00      	nop
 8013c20:	0802972c 	.word	0x0802972c
 8013c24:	080296b1 	.word	0x080296b1
 8013c28:	080296c2 	.word	0x080296c2
 8013c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d1eb      	bne.n	8013c0a <__gethex+0x2ee>
 8013c32:	e7d8      	b.n	8013be6 <__gethex+0x2ca>
 8013c34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d1d5      	bne.n	8013be6 <__gethex+0x2ca>
 8013c3a:	e7e6      	b.n	8013c0a <__gethex+0x2ee>
 8013c3c:	1e6f      	subs	r7, r5, #1
 8013c3e:	f1ba 0f00 	cmp.w	sl, #0
 8013c42:	d131      	bne.n	8013ca8 <__gethex+0x38c>
 8013c44:	b127      	cbz	r7, 8013c50 <__gethex+0x334>
 8013c46:	4639      	mov	r1, r7
 8013c48:	4620      	mov	r0, r4
 8013c4a:	f000 fe35 	bl	80148b8 <__any_on>
 8013c4e:	4682      	mov	sl, r0
 8013c50:	117b      	asrs	r3, r7, #5
 8013c52:	2101      	movs	r1, #1
 8013c54:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013c58:	f007 071f 	and.w	r7, r7, #31
 8013c5c:	fa01 f707 	lsl.w	r7, r1, r7
 8013c60:	421f      	tst	r7, r3
 8013c62:	4629      	mov	r1, r5
 8013c64:	4620      	mov	r0, r4
 8013c66:	bf18      	it	ne
 8013c68:	f04a 0a02 	orrne.w	sl, sl, #2
 8013c6c:	1b76      	subs	r6, r6, r5
 8013c6e:	f7ff fded 	bl	801384c <rshift>
 8013c72:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013c76:	2702      	movs	r7, #2
 8013c78:	f1ba 0f00 	cmp.w	sl, #0
 8013c7c:	d048      	beq.n	8013d10 <__gethex+0x3f4>
 8013c7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013c82:	2b02      	cmp	r3, #2
 8013c84:	d015      	beq.n	8013cb2 <__gethex+0x396>
 8013c86:	2b03      	cmp	r3, #3
 8013c88:	d017      	beq.n	8013cba <__gethex+0x39e>
 8013c8a:	2b01      	cmp	r3, #1
 8013c8c:	d109      	bne.n	8013ca2 <__gethex+0x386>
 8013c8e:	f01a 0f02 	tst.w	sl, #2
 8013c92:	d006      	beq.n	8013ca2 <__gethex+0x386>
 8013c94:	f8d9 0000 	ldr.w	r0, [r9]
 8013c98:	ea4a 0a00 	orr.w	sl, sl, r0
 8013c9c:	f01a 0f01 	tst.w	sl, #1
 8013ca0:	d10e      	bne.n	8013cc0 <__gethex+0x3a4>
 8013ca2:	f047 0710 	orr.w	r7, r7, #16
 8013ca6:	e033      	b.n	8013d10 <__gethex+0x3f4>
 8013ca8:	f04f 0a01 	mov.w	sl, #1
 8013cac:	e7d0      	b.n	8013c50 <__gethex+0x334>
 8013cae:	2701      	movs	r7, #1
 8013cb0:	e7e2      	b.n	8013c78 <__gethex+0x35c>
 8013cb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013cb4:	f1c3 0301 	rsb	r3, r3, #1
 8013cb8:	9315      	str	r3, [sp, #84]	; 0x54
 8013cba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d0f0      	beq.n	8013ca2 <__gethex+0x386>
 8013cc0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013cc4:	f104 0314 	add.w	r3, r4, #20
 8013cc8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013ccc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013cd0:	f04f 0c00 	mov.w	ip, #0
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cda:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013cde:	d01c      	beq.n	8013d1a <__gethex+0x3fe>
 8013ce0:	3201      	adds	r2, #1
 8013ce2:	6002      	str	r2, [r0, #0]
 8013ce4:	2f02      	cmp	r7, #2
 8013ce6:	f104 0314 	add.w	r3, r4, #20
 8013cea:	d13f      	bne.n	8013d6c <__gethex+0x450>
 8013cec:	f8d8 2000 	ldr.w	r2, [r8]
 8013cf0:	3a01      	subs	r2, #1
 8013cf2:	42b2      	cmp	r2, r6
 8013cf4:	d10a      	bne.n	8013d0c <__gethex+0x3f0>
 8013cf6:	1171      	asrs	r1, r6, #5
 8013cf8:	2201      	movs	r2, #1
 8013cfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013cfe:	f006 061f 	and.w	r6, r6, #31
 8013d02:	fa02 f606 	lsl.w	r6, r2, r6
 8013d06:	421e      	tst	r6, r3
 8013d08:	bf18      	it	ne
 8013d0a:	4617      	movne	r7, r2
 8013d0c:	f047 0720 	orr.w	r7, r7, #32
 8013d10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013d12:	601c      	str	r4, [r3, #0]
 8013d14:	9b04      	ldr	r3, [sp, #16]
 8013d16:	601d      	str	r5, [r3, #0]
 8013d18:	e695      	b.n	8013a46 <__gethex+0x12a>
 8013d1a:	4299      	cmp	r1, r3
 8013d1c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013d20:	d8d8      	bhi.n	8013cd4 <__gethex+0x3b8>
 8013d22:	68a3      	ldr	r3, [r4, #8]
 8013d24:	459b      	cmp	fp, r3
 8013d26:	db19      	blt.n	8013d5c <__gethex+0x440>
 8013d28:	6861      	ldr	r1, [r4, #4]
 8013d2a:	ee18 0a10 	vmov	r0, s16
 8013d2e:	3101      	adds	r1, #1
 8013d30:	f000 f928 	bl	8013f84 <_Balloc>
 8013d34:	4681      	mov	r9, r0
 8013d36:	b918      	cbnz	r0, 8013d40 <__gethex+0x424>
 8013d38:	4b1a      	ldr	r3, [pc, #104]	; (8013da4 <__gethex+0x488>)
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	2184      	movs	r1, #132	; 0x84
 8013d3e:	e6a8      	b.n	8013a92 <__gethex+0x176>
 8013d40:	6922      	ldr	r2, [r4, #16]
 8013d42:	3202      	adds	r2, #2
 8013d44:	f104 010c 	add.w	r1, r4, #12
 8013d48:	0092      	lsls	r2, r2, #2
 8013d4a:	300c      	adds	r0, #12
 8013d4c:	f000 f90c 	bl	8013f68 <memcpy>
 8013d50:	4621      	mov	r1, r4
 8013d52:	ee18 0a10 	vmov	r0, s16
 8013d56:	f000 f955 	bl	8014004 <_Bfree>
 8013d5a:	464c      	mov	r4, r9
 8013d5c:	6923      	ldr	r3, [r4, #16]
 8013d5e:	1c5a      	adds	r2, r3, #1
 8013d60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013d64:	6122      	str	r2, [r4, #16]
 8013d66:	2201      	movs	r2, #1
 8013d68:	615a      	str	r2, [r3, #20]
 8013d6a:	e7bb      	b.n	8013ce4 <__gethex+0x3c8>
 8013d6c:	6922      	ldr	r2, [r4, #16]
 8013d6e:	455a      	cmp	r2, fp
 8013d70:	dd0b      	ble.n	8013d8a <__gethex+0x46e>
 8013d72:	2101      	movs	r1, #1
 8013d74:	4620      	mov	r0, r4
 8013d76:	f7ff fd69 	bl	801384c <rshift>
 8013d7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d7e:	3501      	adds	r5, #1
 8013d80:	42ab      	cmp	r3, r5
 8013d82:	f6ff aed0 	blt.w	8013b26 <__gethex+0x20a>
 8013d86:	2701      	movs	r7, #1
 8013d88:	e7c0      	b.n	8013d0c <__gethex+0x3f0>
 8013d8a:	f016 061f 	ands.w	r6, r6, #31
 8013d8e:	d0fa      	beq.n	8013d86 <__gethex+0x46a>
 8013d90:	449a      	add	sl, r3
 8013d92:	f1c6 0620 	rsb	r6, r6, #32
 8013d96:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013d9a:	f000 f9e9 	bl	8014170 <__hi0bits>
 8013d9e:	42b0      	cmp	r0, r6
 8013da0:	dbe7      	blt.n	8013d72 <__gethex+0x456>
 8013da2:	e7f0      	b.n	8013d86 <__gethex+0x46a>
 8013da4:	080296b1 	.word	0x080296b1

08013da8 <L_shift>:
 8013da8:	f1c2 0208 	rsb	r2, r2, #8
 8013dac:	0092      	lsls	r2, r2, #2
 8013dae:	b570      	push	{r4, r5, r6, lr}
 8013db0:	f1c2 0620 	rsb	r6, r2, #32
 8013db4:	6843      	ldr	r3, [r0, #4]
 8013db6:	6804      	ldr	r4, [r0, #0]
 8013db8:	fa03 f506 	lsl.w	r5, r3, r6
 8013dbc:	432c      	orrs	r4, r5
 8013dbe:	40d3      	lsrs	r3, r2
 8013dc0:	6004      	str	r4, [r0, #0]
 8013dc2:	f840 3f04 	str.w	r3, [r0, #4]!
 8013dc6:	4288      	cmp	r0, r1
 8013dc8:	d3f4      	bcc.n	8013db4 <L_shift+0xc>
 8013dca:	bd70      	pop	{r4, r5, r6, pc}

08013dcc <__match>:
 8013dcc:	b530      	push	{r4, r5, lr}
 8013dce:	6803      	ldr	r3, [r0, #0]
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013dd6:	b914      	cbnz	r4, 8013dde <__match+0x12>
 8013dd8:	6003      	str	r3, [r0, #0]
 8013dda:	2001      	movs	r0, #1
 8013ddc:	bd30      	pop	{r4, r5, pc}
 8013dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013de2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013de6:	2d19      	cmp	r5, #25
 8013de8:	bf98      	it	ls
 8013dea:	3220      	addls	r2, #32
 8013dec:	42a2      	cmp	r2, r4
 8013dee:	d0f0      	beq.n	8013dd2 <__match+0x6>
 8013df0:	2000      	movs	r0, #0
 8013df2:	e7f3      	b.n	8013ddc <__match+0x10>

08013df4 <__hexnan>:
 8013df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df8:	680b      	ldr	r3, [r1, #0]
 8013dfa:	6801      	ldr	r1, [r0, #0]
 8013dfc:	115e      	asrs	r6, r3, #5
 8013dfe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013e02:	f013 031f 	ands.w	r3, r3, #31
 8013e06:	b087      	sub	sp, #28
 8013e08:	bf18      	it	ne
 8013e0a:	3604      	addne	r6, #4
 8013e0c:	2500      	movs	r5, #0
 8013e0e:	1f37      	subs	r7, r6, #4
 8013e10:	4682      	mov	sl, r0
 8013e12:	4690      	mov	r8, r2
 8013e14:	9301      	str	r3, [sp, #4]
 8013e16:	f846 5c04 	str.w	r5, [r6, #-4]
 8013e1a:	46b9      	mov	r9, r7
 8013e1c:	463c      	mov	r4, r7
 8013e1e:	9502      	str	r5, [sp, #8]
 8013e20:	46ab      	mov	fp, r5
 8013e22:	784a      	ldrb	r2, [r1, #1]
 8013e24:	1c4b      	adds	r3, r1, #1
 8013e26:	9303      	str	r3, [sp, #12]
 8013e28:	b342      	cbz	r2, 8013e7c <__hexnan+0x88>
 8013e2a:	4610      	mov	r0, r2
 8013e2c:	9105      	str	r1, [sp, #20]
 8013e2e:	9204      	str	r2, [sp, #16]
 8013e30:	f7ff fd5e 	bl	80138f0 <__hexdig_fun>
 8013e34:	2800      	cmp	r0, #0
 8013e36:	d14f      	bne.n	8013ed8 <__hexnan+0xe4>
 8013e38:	9a04      	ldr	r2, [sp, #16]
 8013e3a:	9905      	ldr	r1, [sp, #20]
 8013e3c:	2a20      	cmp	r2, #32
 8013e3e:	d818      	bhi.n	8013e72 <__hexnan+0x7e>
 8013e40:	9b02      	ldr	r3, [sp, #8]
 8013e42:	459b      	cmp	fp, r3
 8013e44:	dd13      	ble.n	8013e6e <__hexnan+0x7a>
 8013e46:	454c      	cmp	r4, r9
 8013e48:	d206      	bcs.n	8013e58 <__hexnan+0x64>
 8013e4a:	2d07      	cmp	r5, #7
 8013e4c:	dc04      	bgt.n	8013e58 <__hexnan+0x64>
 8013e4e:	462a      	mov	r2, r5
 8013e50:	4649      	mov	r1, r9
 8013e52:	4620      	mov	r0, r4
 8013e54:	f7ff ffa8 	bl	8013da8 <L_shift>
 8013e58:	4544      	cmp	r4, r8
 8013e5a:	d950      	bls.n	8013efe <__hexnan+0x10a>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	f1a4 0904 	sub.w	r9, r4, #4
 8013e62:	f844 3c04 	str.w	r3, [r4, #-4]
 8013e66:	f8cd b008 	str.w	fp, [sp, #8]
 8013e6a:	464c      	mov	r4, r9
 8013e6c:	461d      	mov	r5, r3
 8013e6e:	9903      	ldr	r1, [sp, #12]
 8013e70:	e7d7      	b.n	8013e22 <__hexnan+0x2e>
 8013e72:	2a29      	cmp	r2, #41	; 0x29
 8013e74:	d156      	bne.n	8013f24 <__hexnan+0x130>
 8013e76:	3102      	adds	r1, #2
 8013e78:	f8ca 1000 	str.w	r1, [sl]
 8013e7c:	f1bb 0f00 	cmp.w	fp, #0
 8013e80:	d050      	beq.n	8013f24 <__hexnan+0x130>
 8013e82:	454c      	cmp	r4, r9
 8013e84:	d206      	bcs.n	8013e94 <__hexnan+0xa0>
 8013e86:	2d07      	cmp	r5, #7
 8013e88:	dc04      	bgt.n	8013e94 <__hexnan+0xa0>
 8013e8a:	462a      	mov	r2, r5
 8013e8c:	4649      	mov	r1, r9
 8013e8e:	4620      	mov	r0, r4
 8013e90:	f7ff ff8a 	bl	8013da8 <L_shift>
 8013e94:	4544      	cmp	r4, r8
 8013e96:	d934      	bls.n	8013f02 <__hexnan+0x10e>
 8013e98:	f1a8 0204 	sub.w	r2, r8, #4
 8013e9c:	4623      	mov	r3, r4
 8013e9e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013ea2:	f842 1f04 	str.w	r1, [r2, #4]!
 8013ea6:	429f      	cmp	r7, r3
 8013ea8:	d2f9      	bcs.n	8013e9e <__hexnan+0xaa>
 8013eaa:	1b3b      	subs	r3, r7, r4
 8013eac:	f023 0303 	bic.w	r3, r3, #3
 8013eb0:	3304      	adds	r3, #4
 8013eb2:	3401      	adds	r4, #1
 8013eb4:	3e03      	subs	r6, #3
 8013eb6:	42b4      	cmp	r4, r6
 8013eb8:	bf88      	it	hi
 8013eba:	2304      	movhi	r3, #4
 8013ebc:	4443      	add	r3, r8
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	f843 2b04 	str.w	r2, [r3], #4
 8013ec4:	429f      	cmp	r7, r3
 8013ec6:	d2fb      	bcs.n	8013ec0 <__hexnan+0xcc>
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	b91b      	cbnz	r3, 8013ed4 <__hexnan+0xe0>
 8013ecc:	4547      	cmp	r7, r8
 8013ece:	d127      	bne.n	8013f20 <__hexnan+0x12c>
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	603b      	str	r3, [r7, #0]
 8013ed4:	2005      	movs	r0, #5
 8013ed6:	e026      	b.n	8013f26 <__hexnan+0x132>
 8013ed8:	3501      	adds	r5, #1
 8013eda:	2d08      	cmp	r5, #8
 8013edc:	f10b 0b01 	add.w	fp, fp, #1
 8013ee0:	dd06      	ble.n	8013ef0 <__hexnan+0xfc>
 8013ee2:	4544      	cmp	r4, r8
 8013ee4:	d9c3      	bls.n	8013e6e <__hexnan+0x7a>
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	f844 3c04 	str.w	r3, [r4, #-4]
 8013eec:	2501      	movs	r5, #1
 8013eee:	3c04      	subs	r4, #4
 8013ef0:	6822      	ldr	r2, [r4, #0]
 8013ef2:	f000 000f 	and.w	r0, r0, #15
 8013ef6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013efa:	6022      	str	r2, [r4, #0]
 8013efc:	e7b7      	b.n	8013e6e <__hexnan+0x7a>
 8013efe:	2508      	movs	r5, #8
 8013f00:	e7b5      	b.n	8013e6e <__hexnan+0x7a>
 8013f02:	9b01      	ldr	r3, [sp, #4]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d0df      	beq.n	8013ec8 <__hexnan+0xd4>
 8013f08:	f04f 32ff 	mov.w	r2, #4294967295
 8013f0c:	f1c3 0320 	rsb	r3, r3, #32
 8013f10:	fa22 f303 	lsr.w	r3, r2, r3
 8013f14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013f18:	401a      	ands	r2, r3
 8013f1a:	f846 2c04 	str.w	r2, [r6, #-4]
 8013f1e:	e7d3      	b.n	8013ec8 <__hexnan+0xd4>
 8013f20:	3f04      	subs	r7, #4
 8013f22:	e7d1      	b.n	8013ec8 <__hexnan+0xd4>
 8013f24:	2004      	movs	r0, #4
 8013f26:	b007      	add	sp, #28
 8013f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f2c <_localeconv_r>:
 8013f2c:	4800      	ldr	r0, [pc, #0]	; (8013f30 <_localeconv_r+0x4>)
 8013f2e:	4770      	bx	lr
 8013f30:	20000198 	.word	0x20000198

08013f34 <malloc>:
 8013f34:	4b02      	ldr	r3, [pc, #8]	; (8013f40 <malloc+0xc>)
 8013f36:	4601      	mov	r1, r0
 8013f38:	6818      	ldr	r0, [r3, #0]
 8013f3a:	f000 bd3d 	b.w	80149b8 <_malloc_r>
 8013f3e:	bf00      	nop
 8013f40:	20000040 	.word	0x20000040

08013f44 <__ascii_mbtowc>:
 8013f44:	b082      	sub	sp, #8
 8013f46:	b901      	cbnz	r1, 8013f4a <__ascii_mbtowc+0x6>
 8013f48:	a901      	add	r1, sp, #4
 8013f4a:	b142      	cbz	r2, 8013f5e <__ascii_mbtowc+0x1a>
 8013f4c:	b14b      	cbz	r3, 8013f62 <__ascii_mbtowc+0x1e>
 8013f4e:	7813      	ldrb	r3, [r2, #0]
 8013f50:	600b      	str	r3, [r1, #0]
 8013f52:	7812      	ldrb	r2, [r2, #0]
 8013f54:	1e10      	subs	r0, r2, #0
 8013f56:	bf18      	it	ne
 8013f58:	2001      	movne	r0, #1
 8013f5a:	b002      	add	sp, #8
 8013f5c:	4770      	bx	lr
 8013f5e:	4610      	mov	r0, r2
 8013f60:	e7fb      	b.n	8013f5a <__ascii_mbtowc+0x16>
 8013f62:	f06f 0001 	mvn.w	r0, #1
 8013f66:	e7f8      	b.n	8013f5a <__ascii_mbtowc+0x16>

08013f68 <memcpy>:
 8013f68:	440a      	add	r2, r1
 8013f6a:	4291      	cmp	r1, r2
 8013f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013f70:	d100      	bne.n	8013f74 <memcpy+0xc>
 8013f72:	4770      	bx	lr
 8013f74:	b510      	push	{r4, lr}
 8013f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f7e:	4291      	cmp	r1, r2
 8013f80:	d1f9      	bne.n	8013f76 <memcpy+0xe>
 8013f82:	bd10      	pop	{r4, pc}

08013f84 <_Balloc>:
 8013f84:	b570      	push	{r4, r5, r6, lr}
 8013f86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013f88:	4604      	mov	r4, r0
 8013f8a:	460d      	mov	r5, r1
 8013f8c:	b976      	cbnz	r6, 8013fac <_Balloc+0x28>
 8013f8e:	2010      	movs	r0, #16
 8013f90:	f7ff ffd0 	bl	8013f34 <malloc>
 8013f94:	4602      	mov	r2, r0
 8013f96:	6260      	str	r0, [r4, #36]	; 0x24
 8013f98:	b920      	cbnz	r0, 8013fa4 <_Balloc+0x20>
 8013f9a:	4b18      	ldr	r3, [pc, #96]	; (8013ffc <_Balloc+0x78>)
 8013f9c:	4818      	ldr	r0, [pc, #96]	; (8014000 <_Balloc+0x7c>)
 8013f9e:	2166      	movs	r1, #102	; 0x66
 8013fa0:	f7fe fdaa 	bl	8012af8 <__assert_func>
 8013fa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013fa8:	6006      	str	r6, [r0, #0]
 8013faa:	60c6      	str	r6, [r0, #12]
 8013fac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013fae:	68f3      	ldr	r3, [r6, #12]
 8013fb0:	b183      	cbz	r3, 8013fd4 <_Balloc+0x50>
 8013fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fb4:	68db      	ldr	r3, [r3, #12]
 8013fb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013fba:	b9b8      	cbnz	r0, 8013fec <_Balloc+0x68>
 8013fbc:	2101      	movs	r1, #1
 8013fbe:	fa01 f605 	lsl.w	r6, r1, r5
 8013fc2:	1d72      	adds	r2, r6, #5
 8013fc4:	0092      	lsls	r2, r2, #2
 8013fc6:	4620      	mov	r0, r4
 8013fc8:	f000 fc97 	bl	80148fa <_calloc_r>
 8013fcc:	b160      	cbz	r0, 8013fe8 <_Balloc+0x64>
 8013fce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013fd2:	e00e      	b.n	8013ff2 <_Balloc+0x6e>
 8013fd4:	2221      	movs	r2, #33	; 0x21
 8013fd6:	2104      	movs	r1, #4
 8013fd8:	4620      	mov	r0, r4
 8013fda:	f000 fc8e 	bl	80148fa <_calloc_r>
 8013fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fe0:	60f0      	str	r0, [r6, #12]
 8013fe2:	68db      	ldr	r3, [r3, #12]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d1e4      	bne.n	8013fb2 <_Balloc+0x2e>
 8013fe8:	2000      	movs	r0, #0
 8013fea:	bd70      	pop	{r4, r5, r6, pc}
 8013fec:	6802      	ldr	r2, [r0, #0]
 8013fee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013ff8:	e7f7      	b.n	8013fea <_Balloc+0x66>
 8013ffa:	bf00      	nop
 8013ffc:	08029490 	.word	0x08029490
 8014000:	08029740 	.word	0x08029740

08014004 <_Bfree>:
 8014004:	b570      	push	{r4, r5, r6, lr}
 8014006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014008:	4605      	mov	r5, r0
 801400a:	460c      	mov	r4, r1
 801400c:	b976      	cbnz	r6, 801402c <_Bfree+0x28>
 801400e:	2010      	movs	r0, #16
 8014010:	f7ff ff90 	bl	8013f34 <malloc>
 8014014:	4602      	mov	r2, r0
 8014016:	6268      	str	r0, [r5, #36]	; 0x24
 8014018:	b920      	cbnz	r0, 8014024 <_Bfree+0x20>
 801401a:	4b09      	ldr	r3, [pc, #36]	; (8014040 <_Bfree+0x3c>)
 801401c:	4809      	ldr	r0, [pc, #36]	; (8014044 <_Bfree+0x40>)
 801401e:	218a      	movs	r1, #138	; 0x8a
 8014020:	f7fe fd6a 	bl	8012af8 <__assert_func>
 8014024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014028:	6006      	str	r6, [r0, #0]
 801402a:	60c6      	str	r6, [r0, #12]
 801402c:	b13c      	cbz	r4, 801403e <_Bfree+0x3a>
 801402e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014030:	6862      	ldr	r2, [r4, #4]
 8014032:	68db      	ldr	r3, [r3, #12]
 8014034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014038:	6021      	str	r1, [r4, #0]
 801403a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801403e:	bd70      	pop	{r4, r5, r6, pc}
 8014040:	08029490 	.word	0x08029490
 8014044:	08029740 	.word	0x08029740

08014048 <__multadd>:
 8014048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801404c:	690e      	ldr	r6, [r1, #16]
 801404e:	4607      	mov	r7, r0
 8014050:	4698      	mov	r8, r3
 8014052:	460c      	mov	r4, r1
 8014054:	f101 0014 	add.w	r0, r1, #20
 8014058:	2300      	movs	r3, #0
 801405a:	6805      	ldr	r5, [r0, #0]
 801405c:	b2a9      	uxth	r1, r5
 801405e:	fb02 8101 	mla	r1, r2, r1, r8
 8014062:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014066:	0c2d      	lsrs	r5, r5, #16
 8014068:	fb02 c505 	mla	r5, r2, r5, ip
 801406c:	b289      	uxth	r1, r1
 801406e:	3301      	adds	r3, #1
 8014070:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014074:	429e      	cmp	r6, r3
 8014076:	f840 1b04 	str.w	r1, [r0], #4
 801407a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801407e:	dcec      	bgt.n	801405a <__multadd+0x12>
 8014080:	f1b8 0f00 	cmp.w	r8, #0
 8014084:	d022      	beq.n	80140cc <__multadd+0x84>
 8014086:	68a3      	ldr	r3, [r4, #8]
 8014088:	42b3      	cmp	r3, r6
 801408a:	dc19      	bgt.n	80140c0 <__multadd+0x78>
 801408c:	6861      	ldr	r1, [r4, #4]
 801408e:	4638      	mov	r0, r7
 8014090:	3101      	adds	r1, #1
 8014092:	f7ff ff77 	bl	8013f84 <_Balloc>
 8014096:	4605      	mov	r5, r0
 8014098:	b928      	cbnz	r0, 80140a6 <__multadd+0x5e>
 801409a:	4602      	mov	r2, r0
 801409c:	4b0d      	ldr	r3, [pc, #52]	; (80140d4 <__multadd+0x8c>)
 801409e:	480e      	ldr	r0, [pc, #56]	; (80140d8 <__multadd+0x90>)
 80140a0:	21b5      	movs	r1, #181	; 0xb5
 80140a2:	f7fe fd29 	bl	8012af8 <__assert_func>
 80140a6:	6922      	ldr	r2, [r4, #16]
 80140a8:	3202      	adds	r2, #2
 80140aa:	f104 010c 	add.w	r1, r4, #12
 80140ae:	0092      	lsls	r2, r2, #2
 80140b0:	300c      	adds	r0, #12
 80140b2:	f7ff ff59 	bl	8013f68 <memcpy>
 80140b6:	4621      	mov	r1, r4
 80140b8:	4638      	mov	r0, r7
 80140ba:	f7ff ffa3 	bl	8014004 <_Bfree>
 80140be:	462c      	mov	r4, r5
 80140c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80140c4:	3601      	adds	r6, #1
 80140c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80140ca:	6126      	str	r6, [r4, #16]
 80140cc:	4620      	mov	r0, r4
 80140ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d2:	bf00      	nop
 80140d4:	080296b1 	.word	0x080296b1
 80140d8:	08029740 	.word	0x08029740

080140dc <__s2b>:
 80140dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140e0:	460c      	mov	r4, r1
 80140e2:	4615      	mov	r5, r2
 80140e4:	461f      	mov	r7, r3
 80140e6:	2209      	movs	r2, #9
 80140e8:	3308      	adds	r3, #8
 80140ea:	4606      	mov	r6, r0
 80140ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80140f0:	2100      	movs	r1, #0
 80140f2:	2201      	movs	r2, #1
 80140f4:	429a      	cmp	r2, r3
 80140f6:	db09      	blt.n	801410c <__s2b+0x30>
 80140f8:	4630      	mov	r0, r6
 80140fa:	f7ff ff43 	bl	8013f84 <_Balloc>
 80140fe:	b940      	cbnz	r0, 8014112 <__s2b+0x36>
 8014100:	4602      	mov	r2, r0
 8014102:	4b19      	ldr	r3, [pc, #100]	; (8014168 <__s2b+0x8c>)
 8014104:	4819      	ldr	r0, [pc, #100]	; (801416c <__s2b+0x90>)
 8014106:	21ce      	movs	r1, #206	; 0xce
 8014108:	f7fe fcf6 	bl	8012af8 <__assert_func>
 801410c:	0052      	lsls	r2, r2, #1
 801410e:	3101      	adds	r1, #1
 8014110:	e7f0      	b.n	80140f4 <__s2b+0x18>
 8014112:	9b08      	ldr	r3, [sp, #32]
 8014114:	6143      	str	r3, [r0, #20]
 8014116:	2d09      	cmp	r5, #9
 8014118:	f04f 0301 	mov.w	r3, #1
 801411c:	6103      	str	r3, [r0, #16]
 801411e:	dd16      	ble.n	801414e <__s2b+0x72>
 8014120:	f104 0909 	add.w	r9, r4, #9
 8014124:	46c8      	mov	r8, r9
 8014126:	442c      	add	r4, r5
 8014128:	f818 3b01 	ldrb.w	r3, [r8], #1
 801412c:	4601      	mov	r1, r0
 801412e:	3b30      	subs	r3, #48	; 0x30
 8014130:	220a      	movs	r2, #10
 8014132:	4630      	mov	r0, r6
 8014134:	f7ff ff88 	bl	8014048 <__multadd>
 8014138:	45a0      	cmp	r8, r4
 801413a:	d1f5      	bne.n	8014128 <__s2b+0x4c>
 801413c:	f1a5 0408 	sub.w	r4, r5, #8
 8014140:	444c      	add	r4, r9
 8014142:	1b2d      	subs	r5, r5, r4
 8014144:	1963      	adds	r3, r4, r5
 8014146:	42bb      	cmp	r3, r7
 8014148:	db04      	blt.n	8014154 <__s2b+0x78>
 801414a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801414e:	340a      	adds	r4, #10
 8014150:	2509      	movs	r5, #9
 8014152:	e7f6      	b.n	8014142 <__s2b+0x66>
 8014154:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014158:	4601      	mov	r1, r0
 801415a:	3b30      	subs	r3, #48	; 0x30
 801415c:	220a      	movs	r2, #10
 801415e:	4630      	mov	r0, r6
 8014160:	f7ff ff72 	bl	8014048 <__multadd>
 8014164:	e7ee      	b.n	8014144 <__s2b+0x68>
 8014166:	bf00      	nop
 8014168:	080296b1 	.word	0x080296b1
 801416c:	08029740 	.word	0x08029740

08014170 <__hi0bits>:
 8014170:	0c03      	lsrs	r3, r0, #16
 8014172:	041b      	lsls	r3, r3, #16
 8014174:	b9d3      	cbnz	r3, 80141ac <__hi0bits+0x3c>
 8014176:	0400      	lsls	r0, r0, #16
 8014178:	2310      	movs	r3, #16
 801417a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801417e:	bf04      	itt	eq
 8014180:	0200      	lsleq	r0, r0, #8
 8014182:	3308      	addeq	r3, #8
 8014184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014188:	bf04      	itt	eq
 801418a:	0100      	lsleq	r0, r0, #4
 801418c:	3304      	addeq	r3, #4
 801418e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014192:	bf04      	itt	eq
 8014194:	0080      	lsleq	r0, r0, #2
 8014196:	3302      	addeq	r3, #2
 8014198:	2800      	cmp	r0, #0
 801419a:	db05      	blt.n	80141a8 <__hi0bits+0x38>
 801419c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80141a0:	f103 0301 	add.w	r3, r3, #1
 80141a4:	bf08      	it	eq
 80141a6:	2320      	moveq	r3, #32
 80141a8:	4618      	mov	r0, r3
 80141aa:	4770      	bx	lr
 80141ac:	2300      	movs	r3, #0
 80141ae:	e7e4      	b.n	801417a <__hi0bits+0xa>

080141b0 <__lo0bits>:
 80141b0:	6803      	ldr	r3, [r0, #0]
 80141b2:	f013 0207 	ands.w	r2, r3, #7
 80141b6:	4601      	mov	r1, r0
 80141b8:	d00b      	beq.n	80141d2 <__lo0bits+0x22>
 80141ba:	07da      	lsls	r2, r3, #31
 80141bc:	d424      	bmi.n	8014208 <__lo0bits+0x58>
 80141be:	0798      	lsls	r0, r3, #30
 80141c0:	bf49      	itett	mi
 80141c2:	085b      	lsrmi	r3, r3, #1
 80141c4:	089b      	lsrpl	r3, r3, #2
 80141c6:	2001      	movmi	r0, #1
 80141c8:	600b      	strmi	r3, [r1, #0]
 80141ca:	bf5c      	itt	pl
 80141cc:	600b      	strpl	r3, [r1, #0]
 80141ce:	2002      	movpl	r0, #2
 80141d0:	4770      	bx	lr
 80141d2:	b298      	uxth	r0, r3
 80141d4:	b9b0      	cbnz	r0, 8014204 <__lo0bits+0x54>
 80141d6:	0c1b      	lsrs	r3, r3, #16
 80141d8:	2010      	movs	r0, #16
 80141da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80141de:	bf04      	itt	eq
 80141e0:	0a1b      	lsreq	r3, r3, #8
 80141e2:	3008      	addeq	r0, #8
 80141e4:	071a      	lsls	r2, r3, #28
 80141e6:	bf04      	itt	eq
 80141e8:	091b      	lsreq	r3, r3, #4
 80141ea:	3004      	addeq	r0, #4
 80141ec:	079a      	lsls	r2, r3, #30
 80141ee:	bf04      	itt	eq
 80141f0:	089b      	lsreq	r3, r3, #2
 80141f2:	3002      	addeq	r0, #2
 80141f4:	07da      	lsls	r2, r3, #31
 80141f6:	d403      	bmi.n	8014200 <__lo0bits+0x50>
 80141f8:	085b      	lsrs	r3, r3, #1
 80141fa:	f100 0001 	add.w	r0, r0, #1
 80141fe:	d005      	beq.n	801420c <__lo0bits+0x5c>
 8014200:	600b      	str	r3, [r1, #0]
 8014202:	4770      	bx	lr
 8014204:	4610      	mov	r0, r2
 8014206:	e7e8      	b.n	80141da <__lo0bits+0x2a>
 8014208:	2000      	movs	r0, #0
 801420a:	4770      	bx	lr
 801420c:	2020      	movs	r0, #32
 801420e:	4770      	bx	lr

08014210 <__i2b>:
 8014210:	b510      	push	{r4, lr}
 8014212:	460c      	mov	r4, r1
 8014214:	2101      	movs	r1, #1
 8014216:	f7ff feb5 	bl	8013f84 <_Balloc>
 801421a:	4602      	mov	r2, r0
 801421c:	b928      	cbnz	r0, 801422a <__i2b+0x1a>
 801421e:	4b05      	ldr	r3, [pc, #20]	; (8014234 <__i2b+0x24>)
 8014220:	4805      	ldr	r0, [pc, #20]	; (8014238 <__i2b+0x28>)
 8014222:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014226:	f7fe fc67 	bl	8012af8 <__assert_func>
 801422a:	2301      	movs	r3, #1
 801422c:	6144      	str	r4, [r0, #20]
 801422e:	6103      	str	r3, [r0, #16]
 8014230:	bd10      	pop	{r4, pc}
 8014232:	bf00      	nop
 8014234:	080296b1 	.word	0x080296b1
 8014238:	08029740 	.word	0x08029740

0801423c <__multiply>:
 801423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014240:	4614      	mov	r4, r2
 8014242:	690a      	ldr	r2, [r1, #16]
 8014244:	6923      	ldr	r3, [r4, #16]
 8014246:	429a      	cmp	r2, r3
 8014248:	bfb8      	it	lt
 801424a:	460b      	movlt	r3, r1
 801424c:	460d      	mov	r5, r1
 801424e:	bfbc      	itt	lt
 8014250:	4625      	movlt	r5, r4
 8014252:	461c      	movlt	r4, r3
 8014254:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014258:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801425c:	68ab      	ldr	r3, [r5, #8]
 801425e:	6869      	ldr	r1, [r5, #4]
 8014260:	eb0a 0709 	add.w	r7, sl, r9
 8014264:	42bb      	cmp	r3, r7
 8014266:	b085      	sub	sp, #20
 8014268:	bfb8      	it	lt
 801426a:	3101      	addlt	r1, #1
 801426c:	f7ff fe8a 	bl	8013f84 <_Balloc>
 8014270:	b930      	cbnz	r0, 8014280 <__multiply+0x44>
 8014272:	4602      	mov	r2, r0
 8014274:	4b42      	ldr	r3, [pc, #264]	; (8014380 <__multiply+0x144>)
 8014276:	4843      	ldr	r0, [pc, #268]	; (8014384 <__multiply+0x148>)
 8014278:	f240 115d 	movw	r1, #349	; 0x15d
 801427c:	f7fe fc3c 	bl	8012af8 <__assert_func>
 8014280:	f100 0614 	add.w	r6, r0, #20
 8014284:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014288:	4633      	mov	r3, r6
 801428a:	2200      	movs	r2, #0
 801428c:	4543      	cmp	r3, r8
 801428e:	d31e      	bcc.n	80142ce <__multiply+0x92>
 8014290:	f105 0c14 	add.w	ip, r5, #20
 8014294:	f104 0314 	add.w	r3, r4, #20
 8014298:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801429c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80142a0:	9202      	str	r2, [sp, #8]
 80142a2:	ebac 0205 	sub.w	r2, ip, r5
 80142a6:	3a15      	subs	r2, #21
 80142a8:	f022 0203 	bic.w	r2, r2, #3
 80142ac:	3204      	adds	r2, #4
 80142ae:	f105 0115 	add.w	r1, r5, #21
 80142b2:	458c      	cmp	ip, r1
 80142b4:	bf38      	it	cc
 80142b6:	2204      	movcc	r2, #4
 80142b8:	9201      	str	r2, [sp, #4]
 80142ba:	9a02      	ldr	r2, [sp, #8]
 80142bc:	9303      	str	r3, [sp, #12]
 80142be:	429a      	cmp	r2, r3
 80142c0:	d808      	bhi.n	80142d4 <__multiply+0x98>
 80142c2:	2f00      	cmp	r7, #0
 80142c4:	dc55      	bgt.n	8014372 <__multiply+0x136>
 80142c6:	6107      	str	r7, [r0, #16]
 80142c8:	b005      	add	sp, #20
 80142ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ce:	f843 2b04 	str.w	r2, [r3], #4
 80142d2:	e7db      	b.n	801428c <__multiply+0x50>
 80142d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80142d8:	f1ba 0f00 	cmp.w	sl, #0
 80142dc:	d020      	beq.n	8014320 <__multiply+0xe4>
 80142de:	f105 0e14 	add.w	lr, r5, #20
 80142e2:	46b1      	mov	r9, r6
 80142e4:	2200      	movs	r2, #0
 80142e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80142ea:	f8d9 b000 	ldr.w	fp, [r9]
 80142ee:	b2a1      	uxth	r1, r4
 80142f0:	fa1f fb8b 	uxth.w	fp, fp
 80142f4:	fb0a b101 	mla	r1, sl, r1, fp
 80142f8:	4411      	add	r1, r2
 80142fa:	f8d9 2000 	ldr.w	r2, [r9]
 80142fe:	0c24      	lsrs	r4, r4, #16
 8014300:	0c12      	lsrs	r2, r2, #16
 8014302:	fb0a 2404 	mla	r4, sl, r4, r2
 8014306:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801430a:	b289      	uxth	r1, r1
 801430c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014310:	45f4      	cmp	ip, lr
 8014312:	f849 1b04 	str.w	r1, [r9], #4
 8014316:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801431a:	d8e4      	bhi.n	80142e6 <__multiply+0xaa>
 801431c:	9901      	ldr	r1, [sp, #4]
 801431e:	5072      	str	r2, [r6, r1]
 8014320:	9a03      	ldr	r2, [sp, #12]
 8014322:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014326:	3304      	adds	r3, #4
 8014328:	f1b9 0f00 	cmp.w	r9, #0
 801432c:	d01f      	beq.n	801436e <__multiply+0x132>
 801432e:	6834      	ldr	r4, [r6, #0]
 8014330:	f105 0114 	add.w	r1, r5, #20
 8014334:	46b6      	mov	lr, r6
 8014336:	f04f 0a00 	mov.w	sl, #0
 801433a:	880a      	ldrh	r2, [r1, #0]
 801433c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014340:	fb09 b202 	mla	r2, r9, r2, fp
 8014344:	4492      	add	sl, r2
 8014346:	b2a4      	uxth	r4, r4
 8014348:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801434c:	f84e 4b04 	str.w	r4, [lr], #4
 8014350:	f851 4b04 	ldr.w	r4, [r1], #4
 8014354:	f8be 2000 	ldrh.w	r2, [lr]
 8014358:	0c24      	lsrs	r4, r4, #16
 801435a:	fb09 2404 	mla	r4, r9, r4, r2
 801435e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014362:	458c      	cmp	ip, r1
 8014364:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014368:	d8e7      	bhi.n	801433a <__multiply+0xfe>
 801436a:	9a01      	ldr	r2, [sp, #4]
 801436c:	50b4      	str	r4, [r6, r2]
 801436e:	3604      	adds	r6, #4
 8014370:	e7a3      	b.n	80142ba <__multiply+0x7e>
 8014372:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014376:	2b00      	cmp	r3, #0
 8014378:	d1a5      	bne.n	80142c6 <__multiply+0x8a>
 801437a:	3f01      	subs	r7, #1
 801437c:	e7a1      	b.n	80142c2 <__multiply+0x86>
 801437e:	bf00      	nop
 8014380:	080296b1 	.word	0x080296b1
 8014384:	08029740 	.word	0x08029740

08014388 <__pow5mult>:
 8014388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801438c:	4615      	mov	r5, r2
 801438e:	f012 0203 	ands.w	r2, r2, #3
 8014392:	4606      	mov	r6, r0
 8014394:	460f      	mov	r7, r1
 8014396:	d007      	beq.n	80143a8 <__pow5mult+0x20>
 8014398:	4c25      	ldr	r4, [pc, #148]	; (8014430 <__pow5mult+0xa8>)
 801439a:	3a01      	subs	r2, #1
 801439c:	2300      	movs	r3, #0
 801439e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80143a2:	f7ff fe51 	bl	8014048 <__multadd>
 80143a6:	4607      	mov	r7, r0
 80143a8:	10ad      	asrs	r5, r5, #2
 80143aa:	d03d      	beq.n	8014428 <__pow5mult+0xa0>
 80143ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80143ae:	b97c      	cbnz	r4, 80143d0 <__pow5mult+0x48>
 80143b0:	2010      	movs	r0, #16
 80143b2:	f7ff fdbf 	bl	8013f34 <malloc>
 80143b6:	4602      	mov	r2, r0
 80143b8:	6270      	str	r0, [r6, #36]	; 0x24
 80143ba:	b928      	cbnz	r0, 80143c8 <__pow5mult+0x40>
 80143bc:	4b1d      	ldr	r3, [pc, #116]	; (8014434 <__pow5mult+0xac>)
 80143be:	481e      	ldr	r0, [pc, #120]	; (8014438 <__pow5mult+0xb0>)
 80143c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80143c4:	f7fe fb98 	bl	8012af8 <__assert_func>
 80143c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80143cc:	6004      	str	r4, [r0, #0]
 80143ce:	60c4      	str	r4, [r0, #12]
 80143d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80143d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80143d8:	b94c      	cbnz	r4, 80143ee <__pow5mult+0x66>
 80143da:	f240 2171 	movw	r1, #625	; 0x271
 80143de:	4630      	mov	r0, r6
 80143e0:	f7ff ff16 	bl	8014210 <__i2b>
 80143e4:	2300      	movs	r3, #0
 80143e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80143ea:	4604      	mov	r4, r0
 80143ec:	6003      	str	r3, [r0, #0]
 80143ee:	f04f 0900 	mov.w	r9, #0
 80143f2:	07eb      	lsls	r3, r5, #31
 80143f4:	d50a      	bpl.n	801440c <__pow5mult+0x84>
 80143f6:	4639      	mov	r1, r7
 80143f8:	4622      	mov	r2, r4
 80143fa:	4630      	mov	r0, r6
 80143fc:	f7ff ff1e 	bl	801423c <__multiply>
 8014400:	4639      	mov	r1, r7
 8014402:	4680      	mov	r8, r0
 8014404:	4630      	mov	r0, r6
 8014406:	f7ff fdfd 	bl	8014004 <_Bfree>
 801440a:	4647      	mov	r7, r8
 801440c:	106d      	asrs	r5, r5, #1
 801440e:	d00b      	beq.n	8014428 <__pow5mult+0xa0>
 8014410:	6820      	ldr	r0, [r4, #0]
 8014412:	b938      	cbnz	r0, 8014424 <__pow5mult+0x9c>
 8014414:	4622      	mov	r2, r4
 8014416:	4621      	mov	r1, r4
 8014418:	4630      	mov	r0, r6
 801441a:	f7ff ff0f 	bl	801423c <__multiply>
 801441e:	6020      	str	r0, [r4, #0]
 8014420:	f8c0 9000 	str.w	r9, [r0]
 8014424:	4604      	mov	r4, r0
 8014426:	e7e4      	b.n	80143f2 <__pow5mult+0x6a>
 8014428:	4638      	mov	r0, r7
 801442a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801442e:	bf00      	nop
 8014430:	08029890 	.word	0x08029890
 8014434:	08029490 	.word	0x08029490
 8014438:	08029740 	.word	0x08029740

0801443c <__lshift>:
 801443c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014440:	460c      	mov	r4, r1
 8014442:	6849      	ldr	r1, [r1, #4]
 8014444:	6923      	ldr	r3, [r4, #16]
 8014446:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801444a:	68a3      	ldr	r3, [r4, #8]
 801444c:	4607      	mov	r7, r0
 801444e:	4691      	mov	r9, r2
 8014450:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014454:	f108 0601 	add.w	r6, r8, #1
 8014458:	42b3      	cmp	r3, r6
 801445a:	db0b      	blt.n	8014474 <__lshift+0x38>
 801445c:	4638      	mov	r0, r7
 801445e:	f7ff fd91 	bl	8013f84 <_Balloc>
 8014462:	4605      	mov	r5, r0
 8014464:	b948      	cbnz	r0, 801447a <__lshift+0x3e>
 8014466:	4602      	mov	r2, r0
 8014468:	4b28      	ldr	r3, [pc, #160]	; (801450c <__lshift+0xd0>)
 801446a:	4829      	ldr	r0, [pc, #164]	; (8014510 <__lshift+0xd4>)
 801446c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014470:	f7fe fb42 	bl	8012af8 <__assert_func>
 8014474:	3101      	adds	r1, #1
 8014476:	005b      	lsls	r3, r3, #1
 8014478:	e7ee      	b.n	8014458 <__lshift+0x1c>
 801447a:	2300      	movs	r3, #0
 801447c:	f100 0114 	add.w	r1, r0, #20
 8014480:	f100 0210 	add.w	r2, r0, #16
 8014484:	4618      	mov	r0, r3
 8014486:	4553      	cmp	r3, sl
 8014488:	db33      	blt.n	80144f2 <__lshift+0xb6>
 801448a:	6920      	ldr	r0, [r4, #16]
 801448c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014490:	f104 0314 	add.w	r3, r4, #20
 8014494:	f019 091f 	ands.w	r9, r9, #31
 8014498:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801449c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80144a0:	d02b      	beq.n	80144fa <__lshift+0xbe>
 80144a2:	f1c9 0e20 	rsb	lr, r9, #32
 80144a6:	468a      	mov	sl, r1
 80144a8:	2200      	movs	r2, #0
 80144aa:	6818      	ldr	r0, [r3, #0]
 80144ac:	fa00 f009 	lsl.w	r0, r0, r9
 80144b0:	4302      	orrs	r2, r0
 80144b2:	f84a 2b04 	str.w	r2, [sl], #4
 80144b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80144ba:	459c      	cmp	ip, r3
 80144bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80144c0:	d8f3      	bhi.n	80144aa <__lshift+0x6e>
 80144c2:	ebac 0304 	sub.w	r3, ip, r4
 80144c6:	3b15      	subs	r3, #21
 80144c8:	f023 0303 	bic.w	r3, r3, #3
 80144cc:	3304      	adds	r3, #4
 80144ce:	f104 0015 	add.w	r0, r4, #21
 80144d2:	4584      	cmp	ip, r0
 80144d4:	bf38      	it	cc
 80144d6:	2304      	movcc	r3, #4
 80144d8:	50ca      	str	r2, [r1, r3]
 80144da:	b10a      	cbz	r2, 80144e0 <__lshift+0xa4>
 80144dc:	f108 0602 	add.w	r6, r8, #2
 80144e0:	3e01      	subs	r6, #1
 80144e2:	4638      	mov	r0, r7
 80144e4:	612e      	str	r6, [r5, #16]
 80144e6:	4621      	mov	r1, r4
 80144e8:	f7ff fd8c 	bl	8014004 <_Bfree>
 80144ec:	4628      	mov	r0, r5
 80144ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80144f6:	3301      	adds	r3, #1
 80144f8:	e7c5      	b.n	8014486 <__lshift+0x4a>
 80144fa:	3904      	subs	r1, #4
 80144fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014500:	f841 2f04 	str.w	r2, [r1, #4]!
 8014504:	459c      	cmp	ip, r3
 8014506:	d8f9      	bhi.n	80144fc <__lshift+0xc0>
 8014508:	e7ea      	b.n	80144e0 <__lshift+0xa4>
 801450a:	bf00      	nop
 801450c:	080296b1 	.word	0x080296b1
 8014510:	08029740 	.word	0x08029740

08014514 <__mcmp>:
 8014514:	b530      	push	{r4, r5, lr}
 8014516:	6902      	ldr	r2, [r0, #16]
 8014518:	690c      	ldr	r4, [r1, #16]
 801451a:	1b12      	subs	r2, r2, r4
 801451c:	d10e      	bne.n	801453c <__mcmp+0x28>
 801451e:	f100 0314 	add.w	r3, r0, #20
 8014522:	3114      	adds	r1, #20
 8014524:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014528:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801452c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014530:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014534:	42a5      	cmp	r5, r4
 8014536:	d003      	beq.n	8014540 <__mcmp+0x2c>
 8014538:	d305      	bcc.n	8014546 <__mcmp+0x32>
 801453a:	2201      	movs	r2, #1
 801453c:	4610      	mov	r0, r2
 801453e:	bd30      	pop	{r4, r5, pc}
 8014540:	4283      	cmp	r3, r0
 8014542:	d3f3      	bcc.n	801452c <__mcmp+0x18>
 8014544:	e7fa      	b.n	801453c <__mcmp+0x28>
 8014546:	f04f 32ff 	mov.w	r2, #4294967295
 801454a:	e7f7      	b.n	801453c <__mcmp+0x28>

0801454c <__mdiff>:
 801454c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014550:	460c      	mov	r4, r1
 8014552:	4606      	mov	r6, r0
 8014554:	4611      	mov	r1, r2
 8014556:	4620      	mov	r0, r4
 8014558:	4617      	mov	r7, r2
 801455a:	f7ff ffdb 	bl	8014514 <__mcmp>
 801455e:	1e05      	subs	r5, r0, #0
 8014560:	d110      	bne.n	8014584 <__mdiff+0x38>
 8014562:	4629      	mov	r1, r5
 8014564:	4630      	mov	r0, r6
 8014566:	f7ff fd0d 	bl	8013f84 <_Balloc>
 801456a:	b930      	cbnz	r0, 801457a <__mdiff+0x2e>
 801456c:	4b39      	ldr	r3, [pc, #228]	; (8014654 <__mdiff+0x108>)
 801456e:	4602      	mov	r2, r0
 8014570:	f240 2132 	movw	r1, #562	; 0x232
 8014574:	4838      	ldr	r0, [pc, #224]	; (8014658 <__mdiff+0x10c>)
 8014576:	f7fe fabf 	bl	8012af8 <__assert_func>
 801457a:	2301      	movs	r3, #1
 801457c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014584:	bfa4      	itt	ge
 8014586:	463b      	movge	r3, r7
 8014588:	4627      	movge	r7, r4
 801458a:	4630      	mov	r0, r6
 801458c:	6879      	ldr	r1, [r7, #4]
 801458e:	bfa6      	itte	ge
 8014590:	461c      	movge	r4, r3
 8014592:	2500      	movge	r5, #0
 8014594:	2501      	movlt	r5, #1
 8014596:	f7ff fcf5 	bl	8013f84 <_Balloc>
 801459a:	b920      	cbnz	r0, 80145a6 <__mdiff+0x5a>
 801459c:	4b2d      	ldr	r3, [pc, #180]	; (8014654 <__mdiff+0x108>)
 801459e:	4602      	mov	r2, r0
 80145a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80145a4:	e7e6      	b.n	8014574 <__mdiff+0x28>
 80145a6:	693e      	ldr	r6, [r7, #16]
 80145a8:	60c5      	str	r5, [r0, #12]
 80145aa:	6925      	ldr	r5, [r4, #16]
 80145ac:	f107 0114 	add.w	r1, r7, #20
 80145b0:	f104 0914 	add.w	r9, r4, #20
 80145b4:	f100 0e14 	add.w	lr, r0, #20
 80145b8:	f107 0210 	add.w	r2, r7, #16
 80145bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80145c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80145c4:	46f2      	mov	sl, lr
 80145c6:	2700      	movs	r7, #0
 80145c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80145cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80145d0:	fa1f f883 	uxth.w	r8, r3
 80145d4:	fa17 f78b 	uxtah	r7, r7, fp
 80145d8:	0c1b      	lsrs	r3, r3, #16
 80145da:	eba7 0808 	sub.w	r8, r7, r8
 80145de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80145e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80145e6:	fa1f f888 	uxth.w	r8, r8
 80145ea:	141f      	asrs	r7, r3, #16
 80145ec:	454d      	cmp	r5, r9
 80145ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80145f2:	f84a 3b04 	str.w	r3, [sl], #4
 80145f6:	d8e7      	bhi.n	80145c8 <__mdiff+0x7c>
 80145f8:	1b2b      	subs	r3, r5, r4
 80145fa:	3b15      	subs	r3, #21
 80145fc:	f023 0303 	bic.w	r3, r3, #3
 8014600:	3304      	adds	r3, #4
 8014602:	3415      	adds	r4, #21
 8014604:	42a5      	cmp	r5, r4
 8014606:	bf38      	it	cc
 8014608:	2304      	movcc	r3, #4
 801460a:	4419      	add	r1, r3
 801460c:	4473      	add	r3, lr
 801460e:	469e      	mov	lr, r3
 8014610:	460d      	mov	r5, r1
 8014612:	4565      	cmp	r5, ip
 8014614:	d30e      	bcc.n	8014634 <__mdiff+0xe8>
 8014616:	f10c 0203 	add.w	r2, ip, #3
 801461a:	1a52      	subs	r2, r2, r1
 801461c:	f022 0203 	bic.w	r2, r2, #3
 8014620:	3903      	subs	r1, #3
 8014622:	458c      	cmp	ip, r1
 8014624:	bf38      	it	cc
 8014626:	2200      	movcc	r2, #0
 8014628:	441a      	add	r2, r3
 801462a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801462e:	b17b      	cbz	r3, 8014650 <__mdiff+0x104>
 8014630:	6106      	str	r6, [r0, #16]
 8014632:	e7a5      	b.n	8014580 <__mdiff+0x34>
 8014634:	f855 8b04 	ldr.w	r8, [r5], #4
 8014638:	fa17 f488 	uxtah	r4, r7, r8
 801463c:	1422      	asrs	r2, r4, #16
 801463e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014642:	b2a4      	uxth	r4, r4
 8014644:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014648:	f84e 4b04 	str.w	r4, [lr], #4
 801464c:	1417      	asrs	r7, r2, #16
 801464e:	e7e0      	b.n	8014612 <__mdiff+0xc6>
 8014650:	3e01      	subs	r6, #1
 8014652:	e7ea      	b.n	801462a <__mdiff+0xde>
 8014654:	080296b1 	.word	0x080296b1
 8014658:	08029740 	.word	0x08029740

0801465c <__ulp>:
 801465c:	b082      	sub	sp, #8
 801465e:	ed8d 0b00 	vstr	d0, [sp]
 8014662:	9b01      	ldr	r3, [sp, #4]
 8014664:	4912      	ldr	r1, [pc, #72]	; (80146b0 <__ulp+0x54>)
 8014666:	4019      	ands	r1, r3
 8014668:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801466c:	2900      	cmp	r1, #0
 801466e:	dd05      	ble.n	801467c <__ulp+0x20>
 8014670:	2200      	movs	r2, #0
 8014672:	460b      	mov	r3, r1
 8014674:	ec43 2b10 	vmov	d0, r2, r3
 8014678:	b002      	add	sp, #8
 801467a:	4770      	bx	lr
 801467c:	4249      	negs	r1, r1
 801467e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8014682:	ea4f 5021 	mov.w	r0, r1, asr #20
 8014686:	f04f 0200 	mov.w	r2, #0
 801468a:	f04f 0300 	mov.w	r3, #0
 801468e:	da04      	bge.n	801469a <__ulp+0x3e>
 8014690:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014694:	fa41 f300 	asr.w	r3, r1, r0
 8014698:	e7ec      	b.n	8014674 <__ulp+0x18>
 801469a:	f1a0 0114 	sub.w	r1, r0, #20
 801469e:	291e      	cmp	r1, #30
 80146a0:	bfda      	itte	le
 80146a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80146a6:	fa20 f101 	lsrle.w	r1, r0, r1
 80146aa:	2101      	movgt	r1, #1
 80146ac:	460a      	mov	r2, r1
 80146ae:	e7e1      	b.n	8014674 <__ulp+0x18>
 80146b0:	7ff00000 	.word	0x7ff00000

080146b4 <__b2d>:
 80146b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146b6:	6905      	ldr	r5, [r0, #16]
 80146b8:	f100 0714 	add.w	r7, r0, #20
 80146bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80146c0:	1f2e      	subs	r6, r5, #4
 80146c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80146c6:	4620      	mov	r0, r4
 80146c8:	f7ff fd52 	bl	8014170 <__hi0bits>
 80146cc:	f1c0 0320 	rsb	r3, r0, #32
 80146d0:	280a      	cmp	r0, #10
 80146d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014750 <__b2d+0x9c>
 80146d6:	600b      	str	r3, [r1, #0]
 80146d8:	dc14      	bgt.n	8014704 <__b2d+0x50>
 80146da:	f1c0 0e0b 	rsb	lr, r0, #11
 80146de:	fa24 f10e 	lsr.w	r1, r4, lr
 80146e2:	42b7      	cmp	r7, r6
 80146e4:	ea41 030c 	orr.w	r3, r1, ip
 80146e8:	bf34      	ite	cc
 80146ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80146ee:	2100      	movcs	r1, #0
 80146f0:	3015      	adds	r0, #21
 80146f2:	fa04 f000 	lsl.w	r0, r4, r0
 80146f6:	fa21 f10e 	lsr.w	r1, r1, lr
 80146fa:	ea40 0201 	orr.w	r2, r0, r1
 80146fe:	ec43 2b10 	vmov	d0, r2, r3
 8014702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014704:	42b7      	cmp	r7, r6
 8014706:	bf3a      	itte	cc
 8014708:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801470c:	f1a5 0608 	subcc.w	r6, r5, #8
 8014710:	2100      	movcs	r1, #0
 8014712:	380b      	subs	r0, #11
 8014714:	d017      	beq.n	8014746 <__b2d+0x92>
 8014716:	f1c0 0c20 	rsb	ip, r0, #32
 801471a:	fa04 f500 	lsl.w	r5, r4, r0
 801471e:	42be      	cmp	r6, r7
 8014720:	fa21 f40c 	lsr.w	r4, r1, ip
 8014724:	ea45 0504 	orr.w	r5, r5, r4
 8014728:	bf8c      	ite	hi
 801472a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801472e:	2400      	movls	r4, #0
 8014730:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014734:	fa01 f000 	lsl.w	r0, r1, r0
 8014738:	fa24 f40c 	lsr.w	r4, r4, ip
 801473c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014740:	ea40 0204 	orr.w	r2, r0, r4
 8014744:	e7db      	b.n	80146fe <__b2d+0x4a>
 8014746:	ea44 030c 	orr.w	r3, r4, ip
 801474a:	460a      	mov	r2, r1
 801474c:	e7d7      	b.n	80146fe <__b2d+0x4a>
 801474e:	bf00      	nop
 8014750:	3ff00000 	.word	0x3ff00000

08014754 <__d2b>:
 8014754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014758:	4689      	mov	r9, r1
 801475a:	2101      	movs	r1, #1
 801475c:	ec57 6b10 	vmov	r6, r7, d0
 8014760:	4690      	mov	r8, r2
 8014762:	f7ff fc0f 	bl	8013f84 <_Balloc>
 8014766:	4604      	mov	r4, r0
 8014768:	b930      	cbnz	r0, 8014778 <__d2b+0x24>
 801476a:	4602      	mov	r2, r0
 801476c:	4b25      	ldr	r3, [pc, #148]	; (8014804 <__d2b+0xb0>)
 801476e:	4826      	ldr	r0, [pc, #152]	; (8014808 <__d2b+0xb4>)
 8014770:	f240 310a 	movw	r1, #778	; 0x30a
 8014774:	f7fe f9c0 	bl	8012af8 <__assert_func>
 8014778:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801477c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014780:	bb35      	cbnz	r5, 80147d0 <__d2b+0x7c>
 8014782:	2e00      	cmp	r6, #0
 8014784:	9301      	str	r3, [sp, #4]
 8014786:	d028      	beq.n	80147da <__d2b+0x86>
 8014788:	4668      	mov	r0, sp
 801478a:	9600      	str	r6, [sp, #0]
 801478c:	f7ff fd10 	bl	80141b0 <__lo0bits>
 8014790:	9900      	ldr	r1, [sp, #0]
 8014792:	b300      	cbz	r0, 80147d6 <__d2b+0x82>
 8014794:	9a01      	ldr	r2, [sp, #4]
 8014796:	f1c0 0320 	rsb	r3, r0, #32
 801479a:	fa02 f303 	lsl.w	r3, r2, r3
 801479e:	430b      	orrs	r3, r1
 80147a0:	40c2      	lsrs	r2, r0
 80147a2:	6163      	str	r3, [r4, #20]
 80147a4:	9201      	str	r2, [sp, #4]
 80147a6:	9b01      	ldr	r3, [sp, #4]
 80147a8:	61a3      	str	r3, [r4, #24]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	bf14      	ite	ne
 80147ae:	2202      	movne	r2, #2
 80147b0:	2201      	moveq	r2, #1
 80147b2:	6122      	str	r2, [r4, #16]
 80147b4:	b1d5      	cbz	r5, 80147ec <__d2b+0x98>
 80147b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80147ba:	4405      	add	r5, r0
 80147bc:	f8c9 5000 	str.w	r5, [r9]
 80147c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80147c4:	f8c8 0000 	str.w	r0, [r8]
 80147c8:	4620      	mov	r0, r4
 80147ca:	b003      	add	sp, #12
 80147cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80147d4:	e7d5      	b.n	8014782 <__d2b+0x2e>
 80147d6:	6161      	str	r1, [r4, #20]
 80147d8:	e7e5      	b.n	80147a6 <__d2b+0x52>
 80147da:	a801      	add	r0, sp, #4
 80147dc:	f7ff fce8 	bl	80141b0 <__lo0bits>
 80147e0:	9b01      	ldr	r3, [sp, #4]
 80147e2:	6163      	str	r3, [r4, #20]
 80147e4:	2201      	movs	r2, #1
 80147e6:	6122      	str	r2, [r4, #16]
 80147e8:	3020      	adds	r0, #32
 80147ea:	e7e3      	b.n	80147b4 <__d2b+0x60>
 80147ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80147f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80147f4:	f8c9 0000 	str.w	r0, [r9]
 80147f8:	6918      	ldr	r0, [r3, #16]
 80147fa:	f7ff fcb9 	bl	8014170 <__hi0bits>
 80147fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014802:	e7df      	b.n	80147c4 <__d2b+0x70>
 8014804:	080296b1 	.word	0x080296b1
 8014808:	08029740 	.word	0x08029740

0801480c <__ratio>:
 801480c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014810:	4688      	mov	r8, r1
 8014812:	4669      	mov	r1, sp
 8014814:	4681      	mov	r9, r0
 8014816:	f7ff ff4d 	bl	80146b4 <__b2d>
 801481a:	a901      	add	r1, sp, #4
 801481c:	4640      	mov	r0, r8
 801481e:	ec55 4b10 	vmov	r4, r5, d0
 8014822:	f7ff ff47 	bl	80146b4 <__b2d>
 8014826:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801482a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801482e:	eba3 0c02 	sub.w	ip, r3, r2
 8014832:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014836:	1a9b      	subs	r3, r3, r2
 8014838:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801483c:	ec51 0b10 	vmov	r0, r1, d0
 8014840:	2b00      	cmp	r3, #0
 8014842:	bfd6      	itet	le
 8014844:	460a      	movle	r2, r1
 8014846:	462a      	movgt	r2, r5
 8014848:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801484c:	468b      	mov	fp, r1
 801484e:	462f      	mov	r7, r5
 8014850:	bfd4      	ite	le
 8014852:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014856:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801485a:	4620      	mov	r0, r4
 801485c:	ee10 2a10 	vmov	r2, s0
 8014860:	465b      	mov	r3, fp
 8014862:	4639      	mov	r1, r7
 8014864:	f7ec f80a 	bl	800087c <__aeabi_ddiv>
 8014868:	ec41 0b10 	vmov	d0, r0, r1
 801486c:	b003      	add	sp, #12
 801486e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014872 <__copybits>:
 8014872:	3901      	subs	r1, #1
 8014874:	b570      	push	{r4, r5, r6, lr}
 8014876:	1149      	asrs	r1, r1, #5
 8014878:	6914      	ldr	r4, [r2, #16]
 801487a:	3101      	adds	r1, #1
 801487c:	f102 0314 	add.w	r3, r2, #20
 8014880:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014884:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014888:	1f05      	subs	r5, r0, #4
 801488a:	42a3      	cmp	r3, r4
 801488c:	d30c      	bcc.n	80148a8 <__copybits+0x36>
 801488e:	1aa3      	subs	r3, r4, r2
 8014890:	3b11      	subs	r3, #17
 8014892:	f023 0303 	bic.w	r3, r3, #3
 8014896:	3211      	adds	r2, #17
 8014898:	42a2      	cmp	r2, r4
 801489a:	bf88      	it	hi
 801489c:	2300      	movhi	r3, #0
 801489e:	4418      	add	r0, r3
 80148a0:	2300      	movs	r3, #0
 80148a2:	4288      	cmp	r0, r1
 80148a4:	d305      	bcc.n	80148b2 <__copybits+0x40>
 80148a6:	bd70      	pop	{r4, r5, r6, pc}
 80148a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80148ac:	f845 6f04 	str.w	r6, [r5, #4]!
 80148b0:	e7eb      	b.n	801488a <__copybits+0x18>
 80148b2:	f840 3b04 	str.w	r3, [r0], #4
 80148b6:	e7f4      	b.n	80148a2 <__copybits+0x30>

080148b8 <__any_on>:
 80148b8:	f100 0214 	add.w	r2, r0, #20
 80148bc:	6900      	ldr	r0, [r0, #16]
 80148be:	114b      	asrs	r3, r1, #5
 80148c0:	4298      	cmp	r0, r3
 80148c2:	b510      	push	{r4, lr}
 80148c4:	db11      	blt.n	80148ea <__any_on+0x32>
 80148c6:	dd0a      	ble.n	80148de <__any_on+0x26>
 80148c8:	f011 011f 	ands.w	r1, r1, #31
 80148cc:	d007      	beq.n	80148de <__any_on+0x26>
 80148ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80148d2:	fa24 f001 	lsr.w	r0, r4, r1
 80148d6:	fa00 f101 	lsl.w	r1, r0, r1
 80148da:	428c      	cmp	r4, r1
 80148dc:	d10b      	bne.n	80148f6 <__any_on+0x3e>
 80148de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80148e2:	4293      	cmp	r3, r2
 80148e4:	d803      	bhi.n	80148ee <__any_on+0x36>
 80148e6:	2000      	movs	r0, #0
 80148e8:	bd10      	pop	{r4, pc}
 80148ea:	4603      	mov	r3, r0
 80148ec:	e7f7      	b.n	80148de <__any_on+0x26>
 80148ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80148f2:	2900      	cmp	r1, #0
 80148f4:	d0f5      	beq.n	80148e2 <__any_on+0x2a>
 80148f6:	2001      	movs	r0, #1
 80148f8:	e7f6      	b.n	80148e8 <__any_on+0x30>

080148fa <_calloc_r>:
 80148fa:	b513      	push	{r0, r1, r4, lr}
 80148fc:	434a      	muls	r2, r1
 80148fe:	4611      	mov	r1, r2
 8014900:	9201      	str	r2, [sp, #4]
 8014902:	f000 f859 	bl	80149b8 <_malloc_r>
 8014906:	4604      	mov	r4, r0
 8014908:	b118      	cbz	r0, 8014912 <_calloc_r+0x18>
 801490a:	9a01      	ldr	r2, [sp, #4]
 801490c:	2100      	movs	r1, #0
 801490e:	f7fc fb27 	bl	8010f60 <memset>
 8014912:	4620      	mov	r0, r4
 8014914:	b002      	add	sp, #8
 8014916:	bd10      	pop	{r4, pc}

08014918 <_free_r>:
 8014918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801491a:	2900      	cmp	r1, #0
 801491c:	d048      	beq.n	80149b0 <_free_r+0x98>
 801491e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014922:	9001      	str	r0, [sp, #4]
 8014924:	2b00      	cmp	r3, #0
 8014926:	f1a1 0404 	sub.w	r4, r1, #4
 801492a:	bfb8      	it	lt
 801492c:	18e4      	addlt	r4, r4, r3
 801492e:	f000 fe8b 	bl	8015648 <__malloc_lock>
 8014932:	4a20      	ldr	r2, [pc, #128]	; (80149b4 <_free_r+0x9c>)
 8014934:	9801      	ldr	r0, [sp, #4]
 8014936:	6813      	ldr	r3, [r2, #0]
 8014938:	4615      	mov	r5, r2
 801493a:	b933      	cbnz	r3, 801494a <_free_r+0x32>
 801493c:	6063      	str	r3, [r4, #4]
 801493e:	6014      	str	r4, [r2, #0]
 8014940:	b003      	add	sp, #12
 8014942:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014946:	f000 be85 	b.w	8015654 <__malloc_unlock>
 801494a:	42a3      	cmp	r3, r4
 801494c:	d90b      	bls.n	8014966 <_free_r+0x4e>
 801494e:	6821      	ldr	r1, [r4, #0]
 8014950:	1862      	adds	r2, r4, r1
 8014952:	4293      	cmp	r3, r2
 8014954:	bf04      	itt	eq
 8014956:	681a      	ldreq	r2, [r3, #0]
 8014958:	685b      	ldreq	r3, [r3, #4]
 801495a:	6063      	str	r3, [r4, #4]
 801495c:	bf04      	itt	eq
 801495e:	1852      	addeq	r2, r2, r1
 8014960:	6022      	streq	r2, [r4, #0]
 8014962:	602c      	str	r4, [r5, #0]
 8014964:	e7ec      	b.n	8014940 <_free_r+0x28>
 8014966:	461a      	mov	r2, r3
 8014968:	685b      	ldr	r3, [r3, #4]
 801496a:	b10b      	cbz	r3, 8014970 <_free_r+0x58>
 801496c:	42a3      	cmp	r3, r4
 801496e:	d9fa      	bls.n	8014966 <_free_r+0x4e>
 8014970:	6811      	ldr	r1, [r2, #0]
 8014972:	1855      	adds	r5, r2, r1
 8014974:	42a5      	cmp	r5, r4
 8014976:	d10b      	bne.n	8014990 <_free_r+0x78>
 8014978:	6824      	ldr	r4, [r4, #0]
 801497a:	4421      	add	r1, r4
 801497c:	1854      	adds	r4, r2, r1
 801497e:	42a3      	cmp	r3, r4
 8014980:	6011      	str	r1, [r2, #0]
 8014982:	d1dd      	bne.n	8014940 <_free_r+0x28>
 8014984:	681c      	ldr	r4, [r3, #0]
 8014986:	685b      	ldr	r3, [r3, #4]
 8014988:	6053      	str	r3, [r2, #4]
 801498a:	4421      	add	r1, r4
 801498c:	6011      	str	r1, [r2, #0]
 801498e:	e7d7      	b.n	8014940 <_free_r+0x28>
 8014990:	d902      	bls.n	8014998 <_free_r+0x80>
 8014992:	230c      	movs	r3, #12
 8014994:	6003      	str	r3, [r0, #0]
 8014996:	e7d3      	b.n	8014940 <_free_r+0x28>
 8014998:	6825      	ldr	r5, [r4, #0]
 801499a:	1961      	adds	r1, r4, r5
 801499c:	428b      	cmp	r3, r1
 801499e:	bf04      	itt	eq
 80149a0:	6819      	ldreq	r1, [r3, #0]
 80149a2:	685b      	ldreq	r3, [r3, #4]
 80149a4:	6063      	str	r3, [r4, #4]
 80149a6:	bf04      	itt	eq
 80149a8:	1949      	addeq	r1, r1, r5
 80149aa:	6021      	streq	r1, [r4, #0]
 80149ac:	6054      	str	r4, [r2, #4]
 80149ae:	e7c7      	b.n	8014940 <_free_r+0x28>
 80149b0:	b003      	add	sp, #12
 80149b2:	bd30      	pop	{r4, r5, pc}
 80149b4:	200002b8 	.word	0x200002b8

080149b8 <_malloc_r>:
 80149b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ba:	1ccd      	adds	r5, r1, #3
 80149bc:	f025 0503 	bic.w	r5, r5, #3
 80149c0:	3508      	adds	r5, #8
 80149c2:	2d0c      	cmp	r5, #12
 80149c4:	bf38      	it	cc
 80149c6:	250c      	movcc	r5, #12
 80149c8:	2d00      	cmp	r5, #0
 80149ca:	4606      	mov	r6, r0
 80149cc:	db01      	blt.n	80149d2 <_malloc_r+0x1a>
 80149ce:	42a9      	cmp	r1, r5
 80149d0:	d903      	bls.n	80149da <_malloc_r+0x22>
 80149d2:	230c      	movs	r3, #12
 80149d4:	6033      	str	r3, [r6, #0]
 80149d6:	2000      	movs	r0, #0
 80149d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149da:	f000 fe35 	bl	8015648 <__malloc_lock>
 80149de:	4921      	ldr	r1, [pc, #132]	; (8014a64 <_malloc_r+0xac>)
 80149e0:	680a      	ldr	r2, [r1, #0]
 80149e2:	4614      	mov	r4, r2
 80149e4:	b99c      	cbnz	r4, 8014a0e <_malloc_r+0x56>
 80149e6:	4f20      	ldr	r7, [pc, #128]	; (8014a68 <_malloc_r+0xb0>)
 80149e8:	683b      	ldr	r3, [r7, #0]
 80149ea:	b923      	cbnz	r3, 80149f6 <_malloc_r+0x3e>
 80149ec:	4621      	mov	r1, r4
 80149ee:	4630      	mov	r0, r6
 80149f0:	f000 fafa 	bl	8014fe8 <_sbrk_r>
 80149f4:	6038      	str	r0, [r7, #0]
 80149f6:	4629      	mov	r1, r5
 80149f8:	4630      	mov	r0, r6
 80149fa:	f000 faf5 	bl	8014fe8 <_sbrk_r>
 80149fe:	1c43      	adds	r3, r0, #1
 8014a00:	d123      	bne.n	8014a4a <_malloc_r+0x92>
 8014a02:	230c      	movs	r3, #12
 8014a04:	6033      	str	r3, [r6, #0]
 8014a06:	4630      	mov	r0, r6
 8014a08:	f000 fe24 	bl	8015654 <__malloc_unlock>
 8014a0c:	e7e3      	b.n	80149d6 <_malloc_r+0x1e>
 8014a0e:	6823      	ldr	r3, [r4, #0]
 8014a10:	1b5b      	subs	r3, r3, r5
 8014a12:	d417      	bmi.n	8014a44 <_malloc_r+0x8c>
 8014a14:	2b0b      	cmp	r3, #11
 8014a16:	d903      	bls.n	8014a20 <_malloc_r+0x68>
 8014a18:	6023      	str	r3, [r4, #0]
 8014a1a:	441c      	add	r4, r3
 8014a1c:	6025      	str	r5, [r4, #0]
 8014a1e:	e004      	b.n	8014a2a <_malloc_r+0x72>
 8014a20:	6863      	ldr	r3, [r4, #4]
 8014a22:	42a2      	cmp	r2, r4
 8014a24:	bf0c      	ite	eq
 8014a26:	600b      	streq	r3, [r1, #0]
 8014a28:	6053      	strne	r3, [r2, #4]
 8014a2a:	4630      	mov	r0, r6
 8014a2c:	f000 fe12 	bl	8015654 <__malloc_unlock>
 8014a30:	f104 000b 	add.w	r0, r4, #11
 8014a34:	1d23      	adds	r3, r4, #4
 8014a36:	f020 0007 	bic.w	r0, r0, #7
 8014a3a:	1ac2      	subs	r2, r0, r3
 8014a3c:	d0cc      	beq.n	80149d8 <_malloc_r+0x20>
 8014a3e:	1a1b      	subs	r3, r3, r0
 8014a40:	50a3      	str	r3, [r4, r2]
 8014a42:	e7c9      	b.n	80149d8 <_malloc_r+0x20>
 8014a44:	4622      	mov	r2, r4
 8014a46:	6864      	ldr	r4, [r4, #4]
 8014a48:	e7cc      	b.n	80149e4 <_malloc_r+0x2c>
 8014a4a:	1cc4      	adds	r4, r0, #3
 8014a4c:	f024 0403 	bic.w	r4, r4, #3
 8014a50:	42a0      	cmp	r0, r4
 8014a52:	d0e3      	beq.n	8014a1c <_malloc_r+0x64>
 8014a54:	1a21      	subs	r1, r4, r0
 8014a56:	4630      	mov	r0, r6
 8014a58:	f000 fac6 	bl	8014fe8 <_sbrk_r>
 8014a5c:	3001      	adds	r0, #1
 8014a5e:	d1dd      	bne.n	8014a1c <_malloc_r+0x64>
 8014a60:	e7cf      	b.n	8014a02 <_malloc_r+0x4a>
 8014a62:	bf00      	nop
 8014a64:	200002b8 	.word	0x200002b8
 8014a68:	200002bc 	.word	0x200002bc

08014a6c <__ssputs_r>:
 8014a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a70:	688e      	ldr	r6, [r1, #8]
 8014a72:	429e      	cmp	r6, r3
 8014a74:	4682      	mov	sl, r0
 8014a76:	460c      	mov	r4, r1
 8014a78:	4690      	mov	r8, r2
 8014a7a:	461f      	mov	r7, r3
 8014a7c:	d838      	bhi.n	8014af0 <__ssputs_r+0x84>
 8014a7e:	898a      	ldrh	r2, [r1, #12]
 8014a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014a84:	d032      	beq.n	8014aec <__ssputs_r+0x80>
 8014a86:	6825      	ldr	r5, [r4, #0]
 8014a88:	6909      	ldr	r1, [r1, #16]
 8014a8a:	eba5 0901 	sub.w	r9, r5, r1
 8014a8e:	6965      	ldr	r5, [r4, #20]
 8014a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a98:	3301      	adds	r3, #1
 8014a9a:	444b      	add	r3, r9
 8014a9c:	106d      	asrs	r5, r5, #1
 8014a9e:	429d      	cmp	r5, r3
 8014aa0:	bf38      	it	cc
 8014aa2:	461d      	movcc	r5, r3
 8014aa4:	0553      	lsls	r3, r2, #21
 8014aa6:	d531      	bpl.n	8014b0c <__ssputs_r+0xa0>
 8014aa8:	4629      	mov	r1, r5
 8014aaa:	f7ff ff85 	bl	80149b8 <_malloc_r>
 8014aae:	4606      	mov	r6, r0
 8014ab0:	b950      	cbnz	r0, 8014ac8 <__ssputs_r+0x5c>
 8014ab2:	230c      	movs	r3, #12
 8014ab4:	f8ca 3000 	str.w	r3, [sl]
 8014ab8:	89a3      	ldrh	r3, [r4, #12]
 8014aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014abe:	81a3      	strh	r3, [r4, #12]
 8014ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8014ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ac8:	6921      	ldr	r1, [r4, #16]
 8014aca:	464a      	mov	r2, r9
 8014acc:	f7ff fa4c 	bl	8013f68 <memcpy>
 8014ad0:	89a3      	ldrh	r3, [r4, #12]
 8014ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ada:	81a3      	strh	r3, [r4, #12]
 8014adc:	6126      	str	r6, [r4, #16]
 8014ade:	6165      	str	r5, [r4, #20]
 8014ae0:	444e      	add	r6, r9
 8014ae2:	eba5 0509 	sub.w	r5, r5, r9
 8014ae6:	6026      	str	r6, [r4, #0]
 8014ae8:	60a5      	str	r5, [r4, #8]
 8014aea:	463e      	mov	r6, r7
 8014aec:	42be      	cmp	r6, r7
 8014aee:	d900      	bls.n	8014af2 <__ssputs_r+0x86>
 8014af0:	463e      	mov	r6, r7
 8014af2:	4632      	mov	r2, r6
 8014af4:	6820      	ldr	r0, [r4, #0]
 8014af6:	4641      	mov	r1, r8
 8014af8:	f000 fd8c 	bl	8015614 <memmove>
 8014afc:	68a3      	ldr	r3, [r4, #8]
 8014afe:	6822      	ldr	r2, [r4, #0]
 8014b00:	1b9b      	subs	r3, r3, r6
 8014b02:	4432      	add	r2, r6
 8014b04:	60a3      	str	r3, [r4, #8]
 8014b06:	6022      	str	r2, [r4, #0]
 8014b08:	2000      	movs	r0, #0
 8014b0a:	e7db      	b.n	8014ac4 <__ssputs_r+0x58>
 8014b0c:	462a      	mov	r2, r5
 8014b0e:	f000 fda7 	bl	8015660 <_realloc_r>
 8014b12:	4606      	mov	r6, r0
 8014b14:	2800      	cmp	r0, #0
 8014b16:	d1e1      	bne.n	8014adc <__ssputs_r+0x70>
 8014b18:	6921      	ldr	r1, [r4, #16]
 8014b1a:	4650      	mov	r0, sl
 8014b1c:	f7ff fefc 	bl	8014918 <_free_r>
 8014b20:	e7c7      	b.n	8014ab2 <__ssputs_r+0x46>
	...

08014b24 <_svfiprintf_r>:
 8014b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b28:	4698      	mov	r8, r3
 8014b2a:	898b      	ldrh	r3, [r1, #12]
 8014b2c:	061b      	lsls	r3, r3, #24
 8014b2e:	b09d      	sub	sp, #116	; 0x74
 8014b30:	4607      	mov	r7, r0
 8014b32:	460d      	mov	r5, r1
 8014b34:	4614      	mov	r4, r2
 8014b36:	d50e      	bpl.n	8014b56 <_svfiprintf_r+0x32>
 8014b38:	690b      	ldr	r3, [r1, #16]
 8014b3a:	b963      	cbnz	r3, 8014b56 <_svfiprintf_r+0x32>
 8014b3c:	2140      	movs	r1, #64	; 0x40
 8014b3e:	f7ff ff3b 	bl	80149b8 <_malloc_r>
 8014b42:	6028      	str	r0, [r5, #0]
 8014b44:	6128      	str	r0, [r5, #16]
 8014b46:	b920      	cbnz	r0, 8014b52 <_svfiprintf_r+0x2e>
 8014b48:	230c      	movs	r3, #12
 8014b4a:	603b      	str	r3, [r7, #0]
 8014b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8014b50:	e0d1      	b.n	8014cf6 <_svfiprintf_r+0x1d2>
 8014b52:	2340      	movs	r3, #64	; 0x40
 8014b54:	616b      	str	r3, [r5, #20]
 8014b56:	2300      	movs	r3, #0
 8014b58:	9309      	str	r3, [sp, #36]	; 0x24
 8014b5a:	2320      	movs	r3, #32
 8014b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b64:	2330      	movs	r3, #48	; 0x30
 8014b66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014d10 <_svfiprintf_r+0x1ec>
 8014b6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b6e:	f04f 0901 	mov.w	r9, #1
 8014b72:	4623      	mov	r3, r4
 8014b74:	469a      	mov	sl, r3
 8014b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b7a:	b10a      	cbz	r2, 8014b80 <_svfiprintf_r+0x5c>
 8014b7c:	2a25      	cmp	r2, #37	; 0x25
 8014b7e:	d1f9      	bne.n	8014b74 <_svfiprintf_r+0x50>
 8014b80:	ebba 0b04 	subs.w	fp, sl, r4
 8014b84:	d00b      	beq.n	8014b9e <_svfiprintf_r+0x7a>
 8014b86:	465b      	mov	r3, fp
 8014b88:	4622      	mov	r2, r4
 8014b8a:	4629      	mov	r1, r5
 8014b8c:	4638      	mov	r0, r7
 8014b8e:	f7ff ff6d 	bl	8014a6c <__ssputs_r>
 8014b92:	3001      	adds	r0, #1
 8014b94:	f000 80aa 	beq.w	8014cec <_svfiprintf_r+0x1c8>
 8014b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b9a:	445a      	add	r2, fp
 8014b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8014b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	f000 80a2 	beq.w	8014cec <_svfiprintf_r+0x1c8>
 8014ba8:	2300      	movs	r3, #0
 8014baa:	f04f 32ff 	mov.w	r2, #4294967295
 8014bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014bb2:	f10a 0a01 	add.w	sl, sl, #1
 8014bb6:	9304      	str	r3, [sp, #16]
 8014bb8:	9307      	str	r3, [sp, #28]
 8014bba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014bbe:	931a      	str	r3, [sp, #104]	; 0x68
 8014bc0:	4654      	mov	r4, sl
 8014bc2:	2205      	movs	r2, #5
 8014bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bc8:	4851      	ldr	r0, [pc, #324]	; (8014d10 <_svfiprintf_r+0x1ec>)
 8014bca:	f7eb fb21 	bl	8000210 <memchr>
 8014bce:	9a04      	ldr	r2, [sp, #16]
 8014bd0:	b9d8      	cbnz	r0, 8014c0a <_svfiprintf_r+0xe6>
 8014bd2:	06d0      	lsls	r0, r2, #27
 8014bd4:	bf44      	itt	mi
 8014bd6:	2320      	movmi	r3, #32
 8014bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014bdc:	0711      	lsls	r1, r2, #28
 8014bde:	bf44      	itt	mi
 8014be0:	232b      	movmi	r3, #43	; 0x2b
 8014be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014be6:	f89a 3000 	ldrb.w	r3, [sl]
 8014bea:	2b2a      	cmp	r3, #42	; 0x2a
 8014bec:	d015      	beq.n	8014c1a <_svfiprintf_r+0xf6>
 8014bee:	9a07      	ldr	r2, [sp, #28]
 8014bf0:	4654      	mov	r4, sl
 8014bf2:	2000      	movs	r0, #0
 8014bf4:	f04f 0c0a 	mov.w	ip, #10
 8014bf8:	4621      	mov	r1, r4
 8014bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bfe:	3b30      	subs	r3, #48	; 0x30
 8014c00:	2b09      	cmp	r3, #9
 8014c02:	d94e      	bls.n	8014ca2 <_svfiprintf_r+0x17e>
 8014c04:	b1b0      	cbz	r0, 8014c34 <_svfiprintf_r+0x110>
 8014c06:	9207      	str	r2, [sp, #28]
 8014c08:	e014      	b.n	8014c34 <_svfiprintf_r+0x110>
 8014c0a:	eba0 0308 	sub.w	r3, r0, r8
 8014c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8014c12:	4313      	orrs	r3, r2
 8014c14:	9304      	str	r3, [sp, #16]
 8014c16:	46a2      	mov	sl, r4
 8014c18:	e7d2      	b.n	8014bc0 <_svfiprintf_r+0x9c>
 8014c1a:	9b03      	ldr	r3, [sp, #12]
 8014c1c:	1d19      	adds	r1, r3, #4
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	9103      	str	r1, [sp, #12]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	bfbb      	ittet	lt
 8014c26:	425b      	neglt	r3, r3
 8014c28:	f042 0202 	orrlt.w	r2, r2, #2
 8014c2c:	9307      	strge	r3, [sp, #28]
 8014c2e:	9307      	strlt	r3, [sp, #28]
 8014c30:	bfb8      	it	lt
 8014c32:	9204      	strlt	r2, [sp, #16]
 8014c34:	7823      	ldrb	r3, [r4, #0]
 8014c36:	2b2e      	cmp	r3, #46	; 0x2e
 8014c38:	d10c      	bne.n	8014c54 <_svfiprintf_r+0x130>
 8014c3a:	7863      	ldrb	r3, [r4, #1]
 8014c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8014c3e:	d135      	bne.n	8014cac <_svfiprintf_r+0x188>
 8014c40:	9b03      	ldr	r3, [sp, #12]
 8014c42:	1d1a      	adds	r2, r3, #4
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	9203      	str	r2, [sp, #12]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	bfb8      	it	lt
 8014c4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014c50:	3402      	adds	r4, #2
 8014c52:	9305      	str	r3, [sp, #20]
 8014c54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014d20 <_svfiprintf_r+0x1fc>
 8014c58:	7821      	ldrb	r1, [r4, #0]
 8014c5a:	2203      	movs	r2, #3
 8014c5c:	4650      	mov	r0, sl
 8014c5e:	f7eb fad7 	bl	8000210 <memchr>
 8014c62:	b140      	cbz	r0, 8014c76 <_svfiprintf_r+0x152>
 8014c64:	2340      	movs	r3, #64	; 0x40
 8014c66:	eba0 000a 	sub.w	r0, r0, sl
 8014c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8014c6e:	9b04      	ldr	r3, [sp, #16]
 8014c70:	4303      	orrs	r3, r0
 8014c72:	3401      	adds	r4, #1
 8014c74:	9304      	str	r3, [sp, #16]
 8014c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c7a:	4826      	ldr	r0, [pc, #152]	; (8014d14 <_svfiprintf_r+0x1f0>)
 8014c7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c80:	2206      	movs	r2, #6
 8014c82:	f7eb fac5 	bl	8000210 <memchr>
 8014c86:	2800      	cmp	r0, #0
 8014c88:	d038      	beq.n	8014cfc <_svfiprintf_r+0x1d8>
 8014c8a:	4b23      	ldr	r3, [pc, #140]	; (8014d18 <_svfiprintf_r+0x1f4>)
 8014c8c:	bb1b      	cbnz	r3, 8014cd6 <_svfiprintf_r+0x1b2>
 8014c8e:	9b03      	ldr	r3, [sp, #12]
 8014c90:	3307      	adds	r3, #7
 8014c92:	f023 0307 	bic.w	r3, r3, #7
 8014c96:	3308      	adds	r3, #8
 8014c98:	9303      	str	r3, [sp, #12]
 8014c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c9c:	4433      	add	r3, r6
 8014c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8014ca0:	e767      	b.n	8014b72 <_svfiprintf_r+0x4e>
 8014ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ca6:	460c      	mov	r4, r1
 8014ca8:	2001      	movs	r0, #1
 8014caa:	e7a5      	b.n	8014bf8 <_svfiprintf_r+0xd4>
 8014cac:	2300      	movs	r3, #0
 8014cae:	3401      	adds	r4, #1
 8014cb0:	9305      	str	r3, [sp, #20]
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	f04f 0c0a 	mov.w	ip, #10
 8014cb8:	4620      	mov	r0, r4
 8014cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014cbe:	3a30      	subs	r2, #48	; 0x30
 8014cc0:	2a09      	cmp	r2, #9
 8014cc2:	d903      	bls.n	8014ccc <_svfiprintf_r+0x1a8>
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d0c5      	beq.n	8014c54 <_svfiprintf_r+0x130>
 8014cc8:	9105      	str	r1, [sp, #20]
 8014cca:	e7c3      	b.n	8014c54 <_svfiprintf_r+0x130>
 8014ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8014cd0:	4604      	mov	r4, r0
 8014cd2:	2301      	movs	r3, #1
 8014cd4:	e7f0      	b.n	8014cb8 <_svfiprintf_r+0x194>
 8014cd6:	ab03      	add	r3, sp, #12
 8014cd8:	9300      	str	r3, [sp, #0]
 8014cda:	462a      	mov	r2, r5
 8014cdc:	4b0f      	ldr	r3, [pc, #60]	; (8014d1c <_svfiprintf_r+0x1f8>)
 8014cde:	a904      	add	r1, sp, #16
 8014ce0:	4638      	mov	r0, r7
 8014ce2:	f7fc f9e5 	bl	80110b0 <_printf_float>
 8014ce6:	1c42      	adds	r2, r0, #1
 8014ce8:	4606      	mov	r6, r0
 8014cea:	d1d6      	bne.n	8014c9a <_svfiprintf_r+0x176>
 8014cec:	89ab      	ldrh	r3, [r5, #12]
 8014cee:	065b      	lsls	r3, r3, #25
 8014cf0:	f53f af2c 	bmi.w	8014b4c <_svfiprintf_r+0x28>
 8014cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cf6:	b01d      	add	sp, #116	; 0x74
 8014cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cfc:	ab03      	add	r3, sp, #12
 8014cfe:	9300      	str	r3, [sp, #0]
 8014d00:	462a      	mov	r2, r5
 8014d02:	4b06      	ldr	r3, [pc, #24]	; (8014d1c <_svfiprintf_r+0x1f8>)
 8014d04:	a904      	add	r1, sp, #16
 8014d06:	4638      	mov	r0, r7
 8014d08:	f7fc fc76 	bl	80115f8 <_printf_i>
 8014d0c:	e7eb      	b.n	8014ce6 <_svfiprintf_r+0x1c2>
 8014d0e:	bf00      	nop
 8014d10:	0802989c 	.word	0x0802989c
 8014d14:	080298a6 	.word	0x080298a6
 8014d18:	080110b1 	.word	0x080110b1
 8014d1c:	08014a6d 	.word	0x08014a6d
 8014d20:	080298a2 	.word	0x080298a2

08014d24 <__sfputc_r>:
 8014d24:	6893      	ldr	r3, [r2, #8]
 8014d26:	3b01      	subs	r3, #1
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	b410      	push	{r4}
 8014d2c:	6093      	str	r3, [r2, #8]
 8014d2e:	da08      	bge.n	8014d42 <__sfputc_r+0x1e>
 8014d30:	6994      	ldr	r4, [r2, #24]
 8014d32:	42a3      	cmp	r3, r4
 8014d34:	db01      	blt.n	8014d3a <__sfputc_r+0x16>
 8014d36:	290a      	cmp	r1, #10
 8014d38:	d103      	bne.n	8014d42 <__sfputc_r+0x1e>
 8014d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d3e:	f000 b975 	b.w	801502c <__swbuf_r>
 8014d42:	6813      	ldr	r3, [r2, #0]
 8014d44:	1c58      	adds	r0, r3, #1
 8014d46:	6010      	str	r0, [r2, #0]
 8014d48:	7019      	strb	r1, [r3, #0]
 8014d4a:	4608      	mov	r0, r1
 8014d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d50:	4770      	bx	lr

08014d52 <__sfputs_r>:
 8014d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d54:	4606      	mov	r6, r0
 8014d56:	460f      	mov	r7, r1
 8014d58:	4614      	mov	r4, r2
 8014d5a:	18d5      	adds	r5, r2, r3
 8014d5c:	42ac      	cmp	r4, r5
 8014d5e:	d101      	bne.n	8014d64 <__sfputs_r+0x12>
 8014d60:	2000      	movs	r0, #0
 8014d62:	e007      	b.n	8014d74 <__sfputs_r+0x22>
 8014d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d68:	463a      	mov	r2, r7
 8014d6a:	4630      	mov	r0, r6
 8014d6c:	f7ff ffda 	bl	8014d24 <__sfputc_r>
 8014d70:	1c43      	adds	r3, r0, #1
 8014d72:	d1f3      	bne.n	8014d5c <__sfputs_r+0xa>
 8014d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d78 <_vfiprintf_r>:
 8014d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d7c:	460d      	mov	r5, r1
 8014d7e:	b09d      	sub	sp, #116	; 0x74
 8014d80:	4614      	mov	r4, r2
 8014d82:	4698      	mov	r8, r3
 8014d84:	4606      	mov	r6, r0
 8014d86:	b118      	cbz	r0, 8014d90 <_vfiprintf_r+0x18>
 8014d88:	6983      	ldr	r3, [r0, #24]
 8014d8a:	b90b      	cbnz	r3, 8014d90 <_vfiprintf_r+0x18>
 8014d8c:	f000 fb3e 	bl	801540c <__sinit>
 8014d90:	4b89      	ldr	r3, [pc, #548]	; (8014fb8 <_vfiprintf_r+0x240>)
 8014d92:	429d      	cmp	r5, r3
 8014d94:	d11b      	bne.n	8014dce <_vfiprintf_r+0x56>
 8014d96:	6875      	ldr	r5, [r6, #4]
 8014d98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d9a:	07d9      	lsls	r1, r3, #31
 8014d9c:	d405      	bmi.n	8014daa <_vfiprintf_r+0x32>
 8014d9e:	89ab      	ldrh	r3, [r5, #12]
 8014da0:	059a      	lsls	r2, r3, #22
 8014da2:	d402      	bmi.n	8014daa <_vfiprintf_r+0x32>
 8014da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014da6:	f000 fbcf 	bl	8015548 <__retarget_lock_acquire_recursive>
 8014daa:	89ab      	ldrh	r3, [r5, #12]
 8014dac:	071b      	lsls	r3, r3, #28
 8014dae:	d501      	bpl.n	8014db4 <_vfiprintf_r+0x3c>
 8014db0:	692b      	ldr	r3, [r5, #16]
 8014db2:	b9eb      	cbnz	r3, 8014df0 <_vfiprintf_r+0x78>
 8014db4:	4629      	mov	r1, r5
 8014db6:	4630      	mov	r0, r6
 8014db8:	f000 f998 	bl	80150ec <__swsetup_r>
 8014dbc:	b1c0      	cbz	r0, 8014df0 <_vfiprintf_r+0x78>
 8014dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014dc0:	07dc      	lsls	r4, r3, #31
 8014dc2:	d50e      	bpl.n	8014de2 <_vfiprintf_r+0x6a>
 8014dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8014dc8:	b01d      	add	sp, #116	; 0x74
 8014dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dce:	4b7b      	ldr	r3, [pc, #492]	; (8014fbc <_vfiprintf_r+0x244>)
 8014dd0:	429d      	cmp	r5, r3
 8014dd2:	d101      	bne.n	8014dd8 <_vfiprintf_r+0x60>
 8014dd4:	68b5      	ldr	r5, [r6, #8]
 8014dd6:	e7df      	b.n	8014d98 <_vfiprintf_r+0x20>
 8014dd8:	4b79      	ldr	r3, [pc, #484]	; (8014fc0 <_vfiprintf_r+0x248>)
 8014dda:	429d      	cmp	r5, r3
 8014ddc:	bf08      	it	eq
 8014dde:	68f5      	ldreq	r5, [r6, #12]
 8014de0:	e7da      	b.n	8014d98 <_vfiprintf_r+0x20>
 8014de2:	89ab      	ldrh	r3, [r5, #12]
 8014de4:	0598      	lsls	r0, r3, #22
 8014de6:	d4ed      	bmi.n	8014dc4 <_vfiprintf_r+0x4c>
 8014de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014dea:	f000 fbae 	bl	801554a <__retarget_lock_release_recursive>
 8014dee:	e7e9      	b.n	8014dc4 <_vfiprintf_r+0x4c>
 8014df0:	2300      	movs	r3, #0
 8014df2:	9309      	str	r3, [sp, #36]	; 0x24
 8014df4:	2320      	movs	r3, #32
 8014df6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014dfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8014dfe:	2330      	movs	r3, #48	; 0x30
 8014e00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014fc4 <_vfiprintf_r+0x24c>
 8014e04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e08:	f04f 0901 	mov.w	r9, #1
 8014e0c:	4623      	mov	r3, r4
 8014e0e:	469a      	mov	sl, r3
 8014e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e14:	b10a      	cbz	r2, 8014e1a <_vfiprintf_r+0xa2>
 8014e16:	2a25      	cmp	r2, #37	; 0x25
 8014e18:	d1f9      	bne.n	8014e0e <_vfiprintf_r+0x96>
 8014e1a:	ebba 0b04 	subs.w	fp, sl, r4
 8014e1e:	d00b      	beq.n	8014e38 <_vfiprintf_r+0xc0>
 8014e20:	465b      	mov	r3, fp
 8014e22:	4622      	mov	r2, r4
 8014e24:	4629      	mov	r1, r5
 8014e26:	4630      	mov	r0, r6
 8014e28:	f7ff ff93 	bl	8014d52 <__sfputs_r>
 8014e2c:	3001      	adds	r0, #1
 8014e2e:	f000 80aa 	beq.w	8014f86 <_vfiprintf_r+0x20e>
 8014e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e34:	445a      	add	r2, fp
 8014e36:	9209      	str	r2, [sp, #36]	; 0x24
 8014e38:	f89a 3000 	ldrb.w	r3, [sl]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	f000 80a2 	beq.w	8014f86 <_vfiprintf_r+0x20e>
 8014e42:	2300      	movs	r3, #0
 8014e44:	f04f 32ff 	mov.w	r2, #4294967295
 8014e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e4c:	f10a 0a01 	add.w	sl, sl, #1
 8014e50:	9304      	str	r3, [sp, #16]
 8014e52:	9307      	str	r3, [sp, #28]
 8014e54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e58:	931a      	str	r3, [sp, #104]	; 0x68
 8014e5a:	4654      	mov	r4, sl
 8014e5c:	2205      	movs	r2, #5
 8014e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e62:	4858      	ldr	r0, [pc, #352]	; (8014fc4 <_vfiprintf_r+0x24c>)
 8014e64:	f7eb f9d4 	bl	8000210 <memchr>
 8014e68:	9a04      	ldr	r2, [sp, #16]
 8014e6a:	b9d8      	cbnz	r0, 8014ea4 <_vfiprintf_r+0x12c>
 8014e6c:	06d1      	lsls	r1, r2, #27
 8014e6e:	bf44      	itt	mi
 8014e70:	2320      	movmi	r3, #32
 8014e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e76:	0713      	lsls	r3, r2, #28
 8014e78:	bf44      	itt	mi
 8014e7a:	232b      	movmi	r3, #43	; 0x2b
 8014e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e80:	f89a 3000 	ldrb.w	r3, [sl]
 8014e84:	2b2a      	cmp	r3, #42	; 0x2a
 8014e86:	d015      	beq.n	8014eb4 <_vfiprintf_r+0x13c>
 8014e88:	9a07      	ldr	r2, [sp, #28]
 8014e8a:	4654      	mov	r4, sl
 8014e8c:	2000      	movs	r0, #0
 8014e8e:	f04f 0c0a 	mov.w	ip, #10
 8014e92:	4621      	mov	r1, r4
 8014e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e98:	3b30      	subs	r3, #48	; 0x30
 8014e9a:	2b09      	cmp	r3, #9
 8014e9c:	d94e      	bls.n	8014f3c <_vfiprintf_r+0x1c4>
 8014e9e:	b1b0      	cbz	r0, 8014ece <_vfiprintf_r+0x156>
 8014ea0:	9207      	str	r2, [sp, #28]
 8014ea2:	e014      	b.n	8014ece <_vfiprintf_r+0x156>
 8014ea4:	eba0 0308 	sub.w	r3, r0, r8
 8014ea8:	fa09 f303 	lsl.w	r3, r9, r3
 8014eac:	4313      	orrs	r3, r2
 8014eae:	9304      	str	r3, [sp, #16]
 8014eb0:	46a2      	mov	sl, r4
 8014eb2:	e7d2      	b.n	8014e5a <_vfiprintf_r+0xe2>
 8014eb4:	9b03      	ldr	r3, [sp, #12]
 8014eb6:	1d19      	adds	r1, r3, #4
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	9103      	str	r1, [sp, #12]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	bfbb      	ittet	lt
 8014ec0:	425b      	neglt	r3, r3
 8014ec2:	f042 0202 	orrlt.w	r2, r2, #2
 8014ec6:	9307      	strge	r3, [sp, #28]
 8014ec8:	9307      	strlt	r3, [sp, #28]
 8014eca:	bfb8      	it	lt
 8014ecc:	9204      	strlt	r2, [sp, #16]
 8014ece:	7823      	ldrb	r3, [r4, #0]
 8014ed0:	2b2e      	cmp	r3, #46	; 0x2e
 8014ed2:	d10c      	bne.n	8014eee <_vfiprintf_r+0x176>
 8014ed4:	7863      	ldrb	r3, [r4, #1]
 8014ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8014ed8:	d135      	bne.n	8014f46 <_vfiprintf_r+0x1ce>
 8014eda:	9b03      	ldr	r3, [sp, #12]
 8014edc:	1d1a      	adds	r2, r3, #4
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	9203      	str	r2, [sp, #12]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	bfb8      	it	lt
 8014ee6:	f04f 33ff 	movlt.w	r3, #4294967295
 8014eea:	3402      	adds	r4, #2
 8014eec:	9305      	str	r3, [sp, #20]
 8014eee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014fd4 <_vfiprintf_r+0x25c>
 8014ef2:	7821      	ldrb	r1, [r4, #0]
 8014ef4:	2203      	movs	r2, #3
 8014ef6:	4650      	mov	r0, sl
 8014ef8:	f7eb f98a 	bl	8000210 <memchr>
 8014efc:	b140      	cbz	r0, 8014f10 <_vfiprintf_r+0x198>
 8014efe:	2340      	movs	r3, #64	; 0x40
 8014f00:	eba0 000a 	sub.w	r0, r0, sl
 8014f04:	fa03 f000 	lsl.w	r0, r3, r0
 8014f08:	9b04      	ldr	r3, [sp, #16]
 8014f0a:	4303      	orrs	r3, r0
 8014f0c:	3401      	adds	r4, #1
 8014f0e:	9304      	str	r3, [sp, #16]
 8014f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f14:	482c      	ldr	r0, [pc, #176]	; (8014fc8 <_vfiprintf_r+0x250>)
 8014f16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f1a:	2206      	movs	r2, #6
 8014f1c:	f7eb f978 	bl	8000210 <memchr>
 8014f20:	2800      	cmp	r0, #0
 8014f22:	d03f      	beq.n	8014fa4 <_vfiprintf_r+0x22c>
 8014f24:	4b29      	ldr	r3, [pc, #164]	; (8014fcc <_vfiprintf_r+0x254>)
 8014f26:	bb1b      	cbnz	r3, 8014f70 <_vfiprintf_r+0x1f8>
 8014f28:	9b03      	ldr	r3, [sp, #12]
 8014f2a:	3307      	adds	r3, #7
 8014f2c:	f023 0307 	bic.w	r3, r3, #7
 8014f30:	3308      	adds	r3, #8
 8014f32:	9303      	str	r3, [sp, #12]
 8014f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f36:	443b      	add	r3, r7
 8014f38:	9309      	str	r3, [sp, #36]	; 0x24
 8014f3a:	e767      	b.n	8014e0c <_vfiprintf_r+0x94>
 8014f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f40:	460c      	mov	r4, r1
 8014f42:	2001      	movs	r0, #1
 8014f44:	e7a5      	b.n	8014e92 <_vfiprintf_r+0x11a>
 8014f46:	2300      	movs	r3, #0
 8014f48:	3401      	adds	r4, #1
 8014f4a:	9305      	str	r3, [sp, #20]
 8014f4c:	4619      	mov	r1, r3
 8014f4e:	f04f 0c0a 	mov.w	ip, #10
 8014f52:	4620      	mov	r0, r4
 8014f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f58:	3a30      	subs	r2, #48	; 0x30
 8014f5a:	2a09      	cmp	r2, #9
 8014f5c:	d903      	bls.n	8014f66 <_vfiprintf_r+0x1ee>
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d0c5      	beq.n	8014eee <_vfiprintf_r+0x176>
 8014f62:	9105      	str	r1, [sp, #20]
 8014f64:	e7c3      	b.n	8014eee <_vfiprintf_r+0x176>
 8014f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f6a:	4604      	mov	r4, r0
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	e7f0      	b.n	8014f52 <_vfiprintf_r+0x1da>
 8014f70:	ab03      	add	r3, sp, #12
 8014f72:	9300      	str	r3, [sp, #0]
 8014f74:	462a      	mov	r2, r5
 8014f76:	4b16      	ldr	r3, [pc, #88]	; (8014fd0 <_vfiprintf_r+0x258>)
 8014f78:	a904      	add	r1, sp, #16
 8014f7a:	4630      	mov	r0, r6
 8014f7c:	f7fc f898 	bl	80110b0 <_printf_float>
 8014f80:	4607      	mov	r7, r0
 8014f82:	1c78      	adds	r0, r7, #1
 8014f84:	d1d6      	bne.n	8014f34 <_vfiprintf_r+0x1bc>
 8014f86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f88:	07d9      	lsls	r1, r3, #31
 8014f8a:	d405      	bmi.n	8014f98 <_vfiprintf_r+0x220>
 8014f8c:	89ab      	ldrh	r3, [r5, #12]
 8014f8e:	059a      	lsls	r2, r3, #22
 8014f90:	d402      	bmi.n	8014f98 <_vfiprintf_r+0x220>
 8014f92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f94:	f000 fad9 	bl	801554a <__retarget_lock_release_recursive>
 8014f98:	89ab      	ldrh	r3, [r5, #12]
 8014f9a:	065b      	lsls	r3, r3, #25
 8014f9c:	f53f af12 	bmi.w	8014dc4 <_vfiprintf_r+0x4c>
 8014fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fa2:	e711      	b.n	8014dc8 <_vfiprintf_r+0x50>
 8014fa4:	ab03      	add	r3, sp, #12
 8014fa6:	9300      	str	r3, [sp, #0]
 8014fa8:	462a      	mov	r2, r5
 8014faa:	4b09      	ldr	r3, [pc, #36]	; (8014fd0 <_vfiprintf_r+0x258>)
 8014fac:	a904      	add	r1, sp, #16
 8014fae:	4630      	mov	r0, r6
 8014fb0:	f7fc fb22 	bl	80115f8 <_printf_i>
 8014fb4:	e7e4      	b.n	8014f80 <_vfiprintf_r+0x208>
 8014fb6:	bf00      	nop
 8014fb8:	080298d0 	.word	0x080298d0
 8014fbc:	080298f0 	.word	0x080298f0
 8014fc0:	080298b0 	.word	0x080298b0
 8014fc4:	0802989c 	.word	0x0802989c
 8014fc8:	080298a6 	.word	0x080298a6
 8014fcc:	080110b1 	.word	0x080110b1
 8014fd0:	08014d53 	.word	0x08014d53
 8014fd4:	080298a2 	.word	0x080298a2

08014fd8 <nan>:
 8014fd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014fe0 <nan+0x8>
 8014fdc:	4770      	bx	lr
 8014fde:	bf00      	nop
 8014fe0:	00000000 	.word	0x00000000
 8014fe4:	7ff80000 	.word	0x7ff80000

08014fe8 <_sbrk_r>:
 8014fe8:	b538      	push	{r3, r4, r5, lr}
 8014fea:	4d06      	ldr	r5, [pc, #24]	; (8015004 <_sbrk_r+0x1c>)
 8014fec:	2300      	movs	r3, #0
 8014fee:	4604      	mov	r4, r0
 8014ff0:	4608      	mov	r0, r1
 8014ff2:	602b      	str	r3, [r5, #0]
 8014ff4:	f7f4 fbf6 	bl	80097e4 <_sbrk>
 8014ff8:	1c43      	adds	r3, r0, #1
 8014ffa:	d102      	bne.n	8015002 <_sbrk_r+0x1a>
 8014ffc:	682b      	ldr	r3, [r5, #0]
 8014ffe:	b103      	cbz	r3, 8015002 <_sbrk_r+0x1a>
 8015000:	6023      	str	r3, [r4, #0]
 8015002:	bd38      	pop	{r3, r4, r5, pc}
 8015004:	20000c80 	.word	0x20000c80

08015008 <strncmp>:
 8015008:	b510      	push	{r4, lr}
 801500a:	b16a      	cbz	r2, 8015028 <strncmp+0x20>
 801500c:	3901      	subs	r1, #1
 801500e:	1884      	adds	r4, r0, r2
 8015010:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015014:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015018:	4293      	cmp	r3, r2
 801501a:	d103      	bne.n	8015024 <strncmp+0x1c>
 801501c:	42a0      	cmp	r0, r4
 801501e:	d001      	beq.n	8015024 <strncmp+0x1c>
 8015020:	2b00      	cmp	r3, #0
 8015022:	d1f5      	bne.n	8015010 <strncmp+0x8>
 8015024:	1a98      	subs	r0, r3, r2
 8015026:	bd10      	pop	{r4, pc}
 8015028:	4610      	mov	r0, r2
 801502a:	e7fc      	b.n	8015026 <strncmp+0x1e>

0801502c <__swbuf_r>:
 801502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801502e:	460e      	mov	r6, r1
 8015030:	4614      	mov	r4, r2
 8015032:	4605      	mov	r5, r0
 8015034:	b118      	cbz	r0, 801503e <__swbuf_r+0x12>
 8015036:	6983      	ldr	r3, [r0, #24]
 8015038:	b90b      	cbnz	r3, 801503e <__swbuf_r+0x12>
 801503a:	f000 f9e7 	bl	801540c <__sinit>
 801503e:	4b21      	ldr	r3, [pc, #132]	; (80150c4 <__swbuf_r+0x98>)
 8015040:	429c      	cmp	r4, r3
 8015042:	d12b      	bne.n	801509c <__swbuf_r+0x70>
 8015044:	686c      	ldr	r4, [r5, #4]
 8015046:	69a3      	ldr	r3, [r4, #24]
 8015048:	60a3      	str	r3, [r4, #8]
 801504a:	89a3      	ldrh	r3, [r4, #12]
 801504c:	071a      	lsls	r2, r3, #28
 801504e:	d52f      	bpl.n	80150b0 <__swbuf_r+0x84>
 8015050:	6923      	ldr	r3, [r4, #16]
 8015052:	b36b      	cbz	r3, 80150b0 <__swbuf_r+0x84>
 8015054:	6923      	ldr	r3, [r4, #16]
 8015056:	6820      	ldr	r0, [r4, #0]
 8015058:	1ac0      	subs	r0, r0, r3
 801505a:	6963      	ldr	r3, [r4, #20]
 801505c:	b2f6      	uxtb	r6, r6
 801505e:	4283      	cmp	r3, r0
 8015060:	4637      	mov	r7, r6
 8015062:	dc04      	bgt.n	801506e <__swbuf_r+0x42>
 8015064:	4621      	mov	r1, r4
 8015066:	4628      	mov	r0, r5
 8015068:	f000 f93c 	bl	80152e4 <_fflush_r>
 801506c:	bb30      	cbnz	r0, 80150bc <__swbuf_r+0x90>
 801506e:	68a3      	ldr	r3, [r4, #8]
 8015070:	3b01      	subs	r3, #1
 8015072:	60a3      	str	r3, [r4, #8]
 8015074:	6823      	ldr	r3, [r4, #0]
 8015076:	1c5a      	adds	r2, r3, #1
 8015078:	6022      	str	r2, [r4, #0]
 801507a:	701e      	strb	r6, [r3, #0]
 801507c:	6963      	ldr	r3, [r4, #20]
 801507e:	3001      	adds	r0, #1
 8015080:	4283      	cmp	r3, r0
 8015082:	d004      	beq.n	801508e <__swbuf_r+0x62>
 8015084:	89a3      	ldrh	r3, [r4, #12]
 8015086:	07db      	lsls	r3, r3, #31
 8015088:	d506      	bpl.n	8015098 <__swbuf_r+0x6c>
 801508a:	2e0a      	cmp	r6, #10
 801508c:	d104      	bne.n	8015098 <__swbuf_r+0x6c>
 801508e:	4621      	mov	r1, r4
 8015090:	4628      	mov	r0, r5
 8015092:	f000 f927 	bl	80152e4 <_fflush_r>
 8015096:	b988      	cbnz	r0, 80150bc <__swbuf_r+0x90>
 8015098:	4638      	mov	r0, r7
 801509a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801509c:	4b0a      	ldr	r3, [pc, #40]	; (80150c8 <__swbuf_r+0x9c>)
 801509e:	429c      	cmp	r4, r3
 80150a0:	d101      	bne.n	80150a6 <__swbuf_r+0x7a>
 80150a2:	68ac      	ldr	r4, [r5, #8]
 80150a4:	e7cf      	b.n	8015046 <__swbuf_r+0x1a>
 80150a6:	4b09      	ldr	r3, [pc, #36]	; (80150cc <__swbuf_r+0xa0>)
 80150a8:	429c      	cmp	r4, r3
 80150aa:	bf08      	it	eq
 80150ac:	68ec      	ldreq	r4, [r5, #12]
 80150ae:	e7ca      	b.n	8015046 <__swbuf_r+0x1a>
 80150b0:	4621      	mov	r1, r4
 80150b2:	4628      	mov	r0, r5
 80150b4:	f000 f81a 	bl	80150ec <__swsetup_r>
 80150b8:	2800      	cmp	r0, #0
 80150ba:	d0cb      	beq.n	8015054 <__swbuf_r+0x28>
 80150bc:	f04f 37ff 	mov.w	r7, #4294967295
 80150c0:	e7ea      	b.n	8015098 <__swbuf_r+0x6c>
 80150c2:	bf00      	nop
 80150c4:	080298d0 	.word	0x080298d0
 80150c8:	080298f0 	.word	0x080298f0
 80150cc:	080298b0 	.word	0x080298b0

080150d0 <__ascii_wctomb>:
 80150d0:	b149      	cbz	r1, 80150e6 <__ascii_wctomb+0x16>
 80150d2:	2aff      	cmp	r2, #255	; 0xff
 80150d4:	bf85      	ittet	hi
 80150d6:	238a      	movhi	r3, #138	; 0x8a
 80150d8:	6003      	strhi	r3, [r0, #0]
 80150da:	700a      	strbls	r2, [r1, #0]
 80150dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80150e0:	bf98      	it	ls
 80150e2:	2001      	movls	r0, #1
 80150e4:	4770      	bx	lr
 80150e6:	4608      	mov	r0, r1
 80150e8:	4770      	bx	lr
	...

080150ec <__swsetup_r>:
 80150ec:	4b32      	ldr	r3, [pc, #200]	; (80151b8 <__swsetup_r+0xcc>)
 80150ee:	b570      	push	{r4, r5, r6, lr}
 80150f0:	681d      	ldr	r5, [r3, #0]
 80150f2:	4606      	mov	r6, r0
 80150f4:	460c      	mov	r4, r1
 80150f6:	b125      	cbz	r5, 8015102 <__swsetup_r+0x16>
 80150f8:	69ab      	ldr	r3, [r5, #24]
 80150fa:	b913      	cbnz	r3, 8015102 <__swsetup_r+0x16>
 80150fc:	4628      	mov	r0, r5
 80150fe:	f000 f985 	bl	801540c <__sinit>
 8015102:	4b2e      	ldr	r3, [pc, #184]	; (80151bc <__swsetup_r+0xd0>)
 8015104:	429c      	cmp	r4, r3
 8015106:	d10f      	bne.n	8015128 <__swsetup_r+0x3c>
 8015108:	686c      	ldr	r4, [r5, #4]
 801510a:	89a3      	ldrh	r3, [r4, #12]
 801510c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015110:	0719      	lsls	r1, r3, #28
 8015112:	d42c      	bmi.n	801516e <__swsetup_r+0x82>
 8015114:	06dd      	lsls	r5, r3, #27
 8015116:	d411      	bmi.n	801513c <__swsetup_r+0x50>
 8015118:	2309      	movs	r3, #9
 801511a:	6033      	str	r3, [r6, #0]
 801511c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015120:	81a3      	strh	r3, [r4, #12]
 8015122:	f04f 30ff 	mov.w	r0, #4294967295
 8015126:	e03e      	b.n	80151a6 <__swsetup_r+0xba>
 8015128:	4b25      	ldr	r3, [pc, #148]	; (80151c0 <__swsetup_r+0xd4>)
 801512a:	429c      	cmp	r4, r3
 801512c:	d101      	bne.n	8015132 <__swsetup_r+0x46>
 801512e:	68ac      	ldr	r4, [r5, #8]
 8015130:	e7eb      	b.n	801510a <__swsetup_r+0x1e>
 8015132:	4b24      	ldr	r3, [pc, #144]	; (80151c4 <__swsetup_r+0xd8>)
 8015134:	429c      	cmp	r4, r3
 8015136:	bf08      	it	eq
 8015138:	68ec      	ldreq	r4, [r5, #12]
 801513a:	e7e6      	b.n	801510a <__swsetup_r+0x1e>
 801513c:	0758      	lsls	r0, r3, #29
 801513e:	d512      	bpl.n	8015166 <__swsetup_r+0x7a>
 8015140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015142:	b141      	cbz	r1, 8015156 <__swsetup_r+0x6a>
 8015144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015148:	4299      	cmp	r1, r3
 801514a:	d002      	beq.n	8015152 <__swsetup_r+0x66>
 801514c:	4630      	mov	r0, r6
 801514e:	f7ff fbe3 	bl	8014918 <_free_r>
 8015152:	2300      	movs	r3, #0
 8015154:	6363      	str	r3, [r4, #52]	; 0x34
 8015156:	89a3      	ldrh	r3, [r4, #12]
 8015158:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801515c:	81a3      	strh	r3, [r4, #12]
 801515e:	2300      	movs	r3, #0
 8015160:	6063      	str	r3, [r4, #4]
 8015162:	6923      	ldr	r3, [r4, #16]
 8015164:	6023      	str	r3, [r4, #0]
 8015166:	89a3      	ldrh	r3, [r4, #12]
 8015168:	f043 0308 	orr.w	r3, r3, #8
 801516c:	81a3      	strh	r3, [r4, #12]
 801516e:	6923      	ldr	r3, [r4, #16]
 8015170:	b94b      	cbnz	r3, 8015186 <__swsetup_r+0x9a>
 8015172:	89a3      	ldrh	r3, [r4, #12]
 8015174:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801517c:	d003      	beq.n	8015186 <__swsetup_r+0x9a>
 801517e:	4621      	mov	r1, r4
 8015180:	4630      	mov	r0, r6
 8015182:	f000 fa07 	bl	8015594 <__smakebuf_r>
 8015186:	89a0      	ldrh	r0, [r4, #12]
 8015188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801518c:	f010 0301 	ands.w	r3, r0, #1
 8015190:	d00a      	beq.n	80151a8 <__swsetup_r+0xbc>
 8015192:	2300      	movs	r3, #0
 8015194:	60a3      	str	r3, [r4, #8]
 8015196:	6963      	ldr	r3, [r4, #20]
 8015198:	425b      	negs	r3, r3
 801519a:	61a3      	str	r3, [r4, #24]
 801519c:	6923      	ldr	r3, [r4, #16]
 801519e:	b943      	cbnz	r3, 80151b2 <__swsetup_r+0xc6>
 80151a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80151a4:	d1ba      	bne.n	801511c <__swsetup_r+0x30>
 80151a6:	bd70      	pop	{r4, r5, r6, pc}
 80151a8:	0781      	lsls	r1, r0, #30
 80151aa:	bf58      	it	pl
 80151ac:	6963      	ldrpl	r3, [r4, #20]
 80151ae:	60a3      	str	r3, [r4, #8]
 80151b0:	e7f4      	b.n	801519c <__swsetup_r+0xb0>
 80151b2:	2000      	movs	r0, #0
 80151b4:	e7f7      	b.n	80151a6 <__swsetup_r+0xba>
 80151b6:	bf00      	nop
 80151b8:	20000040 	.word	0x20000040
 80151bc:	080298d0 	.word	0x080298d0
 80151c0:	080298f0 	.word	0x080298f0
 80151c4:	080298b0 	.word	0x080298b0

080151c8 <abort>:
 80151c8:	b508      	push	{r3, lr}
 80151ca:	2006      	movs	r0, #6
 80151cc:	f000 fa96 	bl	80156fc <raise>
 80151d0:	2001      	movs	r0, #1
 80151d2:	f7f4 fa8f 	bl	80096f4 <_exit>
	...

080151d8 <__sflush_r>:
 80151d8:	898a      	ldrh	r2, [r1, #12]
 80151da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151de:	4605      	mov	r5, r0
 80151e0:	0710      	lsls	r0, r2, #28
 80151e2:	460c      	mov	r4, r1
 80151e4:	d458      	bmi.n	8015298 <__sflush_r+0xc0>
 80151e6:	684b      	ldr	r3, [r1, #4]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	dc05      	bgt.n	80151f8 <__sflush_r+0x20>
 80151ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	dc02      	bgt.n	80151f8 <__sflush_r+0x20>
 80151f2:	2000      	movs	r0, #0
 80151f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151fa:	2e00      	cmp	r6, #0
 80151fc:	d0f9      	beq.n	80151f2 <__sflush_r+0x1a>
 80151fe:	2300      	movs	r3, #0
 8015200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015204:	682f      	ldr	r7, [r5, #0]
 8015206:	602b      	str	r3, [r5, #0]
 8015208:	d032      	beq.n	8015270 <__sflush_r+0x98>
 801520a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801520c:	89a3      	ldrh	r3, [r4, #12]
 801520e:	075a      	lsls	r2, r3, #29
 8015210:	d505      	bpl.n	801521e <__sflush_r+0x46>
 8015212:	6863      	ldr	r3, [r4, #4]
 8015214:	1ac0      	subs	r0, r0, r3
 8015216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015218:	b10b      	cbz	r3, 801521e <__sflush_r+0x46>
 801521a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801521c:	1ac0      	subs	r0, r0, r3
 801521e:	2300      	movs	r3, #0
 8015220:	4602      	mov	r2, r0
 8015222:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015224:	6a21      	ldr	r1, [r4, #32]
 8015226:	4628      	mov	r0, r5
 8015228:	47b0      	blx	r6
 801522a:	1c43      	adds	r3, r0, #1
 801522c:	89a3      	ldrh	r3, [r4, #12]
 801522e:	d106      	bne.n	801523e <__sflush_r+0x66>
 8015230:	6829      	ldr	r1, [r5, #0]
 8015232:	291d      	cmp	r1, #29
 8015234:	d82c      	bhi.n	8015290 <__sflush_r+0xb8>
 8015236:	4a2a      	ldr	r2, [pc, #168]	; (80152e0 <__sflush_r+0x108>)
 8015238:	40ca      	lsrs	r2, r1
 801523a:	07d6      	lsls	r6, r2, #31
 801523c:	d528      	bpl.n	8015290 <__sflush_r+0xb8>
 801523e:	2200      	movs	r2, #0
 8015240:	6062      	str	r2, [r4, #4]
 8015242:	04d9      	lsls	r1, r3, #19
 8015244:	6922      	ldr	r2, [r4, #16]
 8015246:	6022      	str	r2, [r4, #0]
 8015248:	d504      	bpl.n	8015254 <__sflush_r+0x7c>
 801524a:	1c42      	adds	r2, r0, #1
 801524c:	d101      	bne.n	8015252 <__sflush_r+0x7a>
 801524e:	682b      	ldr	r3, [r5, #0]
 8015250:	b903      	cbnz	r3, 8015254 <__sflush_r+0x7c>
 8015252:	6560      	str	r0, [r4, #84]	; 0x54
 8015254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015256:	602f      	str	r7, [r5, #0]
 8015258:	2900      	cmp	r1, #0
 801525a:	d0ca      	beq.n	80151f2 <__sflush_r+0x1a>
 801525c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015260:	4299      	cmp	r1, r3
 8015262:	d002      	beq.n	801526a <__sflush_r+0x92>
 8015264:	4628      	mov	r0, r5
 8015266:	f7ff fb57 	bl	8014918 <_free_r>
 801526a:	2000      	movs	r0, #0
 801526c:	6360      	str	r0, [r4, #52]	; 0x34
 801526e:	e7c1      	b.n	80151f4 <__sflush_r+0x1c>
 8015270:	6a21      	ldr	r1, [r4, #32]
 8015272:	2301      	movs	r3, #1
 8015274:	4628      	mov	r0, r5
 8015276:	47b0      	blx	r6
 8015278:	1c41      	adds	r1, r0, #1
 801527a:	d1c7      	bne.n	801520c <__sflush_r+0x34>
 801527c:	682b      	ldr	r3, [r5, #0]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d0c4      	beq.n	801520c <__sflush_r+0x34>
 8015282:	2b1d      	cmp	r3, #29
 8015284:	d001      	beq.n	801528a <__sflush_r+0xb2>
 8015286:	2b16      	cmp	r3, #22
 8015288:	d101      	bne.n	801528e <__sflush_r+0xb6>
 801528a:	602f      	str	r7, [r5, #0]
 801528c:	e7b1      	b.n	80151f2 <__sflush_r+0x1a>
 801528e:	89a3      	ldrh	r3, [r4, #12]
 8015290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015294:	81a3      	strh	r3, [r4, #12]
 8015296:	e7ad      	b.n	80151f4 <__sflush_r+0x1c>
 8015298:	690f      	ldr	r7, [r1, #16]
 801529a:	2f00      	cmp	r7, #0
 801529c:	d0a9      	beq.n	80151f2 <__sflush_r+0x1a>
 801529e:	0793      	lsls	r3, r2, #30
 80152a0:	680e      	ldr	r6, [r1, #0]
 80152a2:	bf08      	it	eq
 80152a4:	694b      	ldreq	r3, [r1, #20]
 80152a6:	600f      	str	r7, [r1, #0]
 80152a8:	bf18      	it	ne
 80152aa:	2300      	movne	r3, #0
 80152ac:	eba6 0807 	sub.w	r8, r6, r7
 80152b0:	608b      	str	r3, [r1, #8]
 80152b2:	f1b8 0f00 	cmp.w	r8, #0
 80152b6:	dd9c      	ble.n	80151f2 <__sflush_r+0x1a>
 80152b8:	6a21      	ldr	r1, [r4, #32]
 80152ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80152bc:	4643      	mov	r3, r8
 80152be:	463a      	mov	r2, r7
 80152c0:	4628      	mov	r0, r5
 80152c2:	47b0      	blx	r6
 80152c4:	2800      	cmp	r0, #0
 80152c6:	dc06      	bgt.n	80152d6 <__sflush_r+0xfe>
 80152c8:	89a3      	ldrh	r3, [r4, #12]
 80152ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152ce:	81a3      	strh	r3, [r4, #12]
 80152d0:	f04f 30ff 	mov.w	r0, #4294967295
 80152d4:	e78e      	b.n	80151f4 <__sflush_r+0x1c>
 80152d6:	4407      	add	r7, r0
 80152d8:	eba8 0800 	sub.w	r8, r8, r0
 80152dc:	e7e9      	b.n	80152b2 <__sflush_r+0xda>
 80152de:	bf00      	nop
 80152e0:	20400001 	.word	0x20400001

080152e4 <_fflush_r>:
 80152e4:	b538      	push	{r3, r4, r5, lr}
 80152e6:	690b      	ldr	r3, [r1, #16]
 80152e8:	4605      	mov	r5, r0
 80152ea:	460c      	mov	r4, r1
 80152ec:	b913      	cbnz	r3, 80152f4 <_fflush_r+0x10>
 80152ee:	2500      	movs	r5, #0
 80152f0:	4628      	mov	r0, r5
 80152f2:	bd38      	pop	{r3, r4, r5, pc}
 80152f4:	b118      	cbz	r0, 80152fe <_fflush_r+0x1a>
 80152f6:	6983      	ldr	r3, [r0, #24]
 80152f8:	b90b      	cbnz	r3, 80152fe <_fflush_r+0x1a>
 80152fa:	f000 f887 	bl	801540c <__sinit>
 80152fe:	4b14      	ldr	r3, [pc, #80]	; (8015350 <_fflush_r+0x6c>)
 8015300:	429c      	cmp	r4, r3
 8015302:	d11b      	bne.n	801533c <_fflush_r+0x58>
 8015304:	686c      	ldr	r4, [r5, #4]
 8015306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d0ef      	beq.n	80152ee <_fflush_r+0xa>
 801530e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015310:	07d0      	lsls	r0, r2, #31
 8015312:	d404      	bmi.n	801531e <_fflush_r+0x3a>
 8015314:	0599      	lsls	r1, r3, #22
 8015316:	d402      	bmi.n	801531e <_fflush_r+0x3a>
 8015318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801531a:	f000 f915 	bl	8015548 <__retarget_lock_acquire_recursive>
 801531e:	4628      	mov	r0, r5
 8015320:	4621      	mov	r1, r4
 8015322:	f7ff ff59 	bl	80151d8 <__sflush_r>
 8015326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015328:	07da      	lsls	r2, r3, #31
 801532a:	4605      	mov	r5, r0
 801532c:	d4e0      	bmi.n	80152f0 <_fflush_r+0xc>
 801532e:	89a3      	ldrh	r3, [r4, #12]
 8015330:	059b      	lsls	r3, r3, #22
 8015332:	d4dd      	bmi.n	80152f0 <_fflush_r+0xc>
 8015334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015336:	f000 f908 	bl	801554a <__retarget_lock_release_recursive>
 801533a:	e7d9      	b.n	80152f0 <_fflush_r+0xc>
 801533c:	4b05      	ldr	r3, [pc, #20]	; (8015354 <_fflush_r+0x70>)
 801533e:	429c      	cmp	r4, r3
 8015340:	d101      	bne.n	8015346 <_fflush_r+0x62>
 8015342:	68ac      	ldr	r4, [r5, #8]
 8015344:	e7df      	b.n	8015306 <_fflush_r+0x22>
 8015346:	4b04      	ldr	r3, [pc, #16]	; (8015358 <_fflush_r+0x74>)
 8015348:	429c      	cmp	r4, r3
 801534a:	bf08      	it	eq
 801534c:	68ec      	ldreq	r4, [r5, #12]
 801534e:	e7da      	b.n	8015306 <_fflush_r+0x22>
 8015350:	080298d0 	.word	0x080298d0
 8015354:	080298f0 	.word	0x080298f0
 8015358:	080298b0 	.word	0x080298b0

0801535c <std>:
 801535c:	2300      	movs	r3, #0
 801535e:	b510      	push	{r4, lr}
 8015360:	4604      	mov	r4, r0
 8015362:	e9c0 3300 	strd	r3, r3, [r0]
 8015366:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801536a:	6083      	str	r3, [r0, #8]
 801536c:	8181      	strh	r1, [r0, #12]
 801536e:	6643      	str	r3, [r0, #100]	; 0x64
 8015370:	81c2      	strh	r2, [r0, #14]
 8015372:	6183      	str	r3, [r0, #24]
 8015374:	4619      	mov	r1, r3
 8015376:	2208      	movs	r2, #8
 8015378:	305c      	adds	r0, #92	; 0x5c
 801537a:	f7fb fdf1 	bl	8010f60 <memset>
 801537e:	4b05      	ldr	r3, [pc, #20]	; (8015394 <std+0x38>)
 8015380:	6263      	str	r3, [r4, #36]	; 0x24
 8015382:	4b05      	ldr	r3, [pc, #20]	; (8015398 <std+0x3c>)
 8015384:	62a3      	str	r3, [r4, #40]	; 0x28
 8015386:	4b05      	ldr	r3, [pc, #20]	; (801539c <std+0x40>)
 8015388:	62e3      	str	r3, [r4, #44]	; 0x2c
 801538a:	4b05      	ldr	r3, [pc, #20]	; (80153a0 <std+0x44>)
 801538c:	6224      	str	r4, [r4, #32]
 801538e:	6323      	str	r3, [r4, #48]	; 0x30
 8015390:	bd10      	pop	{r4, pc}
 8015392:	bf00      	nop
 8015394:	08015735 	.word	0x08015735
 8015398:	08015757 	.word	0x08015757
 801539c:	0801578f 	.word	0x0801578f
 80153a0:	080157b3 	.word	0x080157b3

080153a4 <_cleanup_r>:
 80153a4:	4901      	ldr	r1, [pc, #4]	; (80153ac <_cleanup_r+0x8>)
 80153a6:	f000 b8af 	b.w	8015508 <_fwalk_reent>
 80153aa:	bf00      	nop
 80153ac:	080152e5 	.word	0x080152e5

080153b0 <__sfmoreglue>:
 80153b0:	b570      	push	{r4, r5, r6, lr}
 80153b2:	1e4a      	subs	r2, r1, #1
 80153b4:	2568      	movs	r5, #104	; 0x68
 80153b6:	4355      	muls	r5, r2
 80153b8:	460e      	mov	r6, r1
 80153ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80153be:	f7ff fafb 	bl	80149b8 <_malloc_r>
 80153c2:	4604      	mov	r4, r0
 80153c4:	b140      	cbz	r0, 80153d8 <__sfmoreglue+0x28>
 80153c6:	2100      	movs	r1, #0
 80153c8:	e9c0 1600 	strd	r1, r6, [r0]
 80153cc:	300c      	adds	r0, #12
 80153ce:	60a0      	str	r0, [r4, #8]
 80153d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80153d4:	f7fb fdc4 	bl	8010f60 <memset>
 80153d8:	4620      	mov	r0, r4
 80153da:	bd70      	pop	{r4, r5, r6, pc}

080153dc <__sfp_lock_acquire>:
 80153dc:	4801      	ldr	r0, [pc, #4]	; (80153e4 <__sfp_lock_acquire+0x8>)
 80153de:	f000 b8b3 	b.w	8015548 <__retarget_lock_acquire_recursive>
 80153e2:	bf00      	nop
 80153e4:	20000c7c 	.word	0x20000c7c

080153e8 <__sfp_lock_release>:
 80153e8:	4801      	ldr	r0, [pc, #4]	; (80153f0 <__sfp_lock_release+0x8>)
 80153ea:	f000 b8ae 	b.w	801554a <__retarget_lock_release_recursive>
 80153ee:	bf00      	nop
 80153f0:	20000c7c 	.word	0x20000c7c

080153f4 <__sinit_lock_acquire>:
 80153f4:	4801      	ldr	r0, [pc, #4]	; (80153fc <__sinit_lock_acquire+0x8>)
 80153f6:	f000 b8a7 	b.w	8015548 <__retarget_lock_acquire_recursive>
 80153fa:	bf00      	nop
 80153fc:	20000c77 	.word	0x20000c77

08015400 <__sinit_lock_release>:
 8015400:	4801      	ldr	r0, [pc, #4]	; (8015408 <__sinit_lock_release+0x8>)
 8015402:	f000 b8a2 	b.w	801554a <__retarget_lock_release_recursive>
 8015406:	bf00      	nop
 8015408:	20000c77 	.word	0x20000c77

0801540c <__sinit>:
 801540c:	b510      	push	{r4, lr}
 801540e:	4604      	mov	r4, r0
 8015410:	f7ff fff0 	bl	80153f4 <__sinit_lock_acquire>
 8015414:	69a3      	ldr	r3, [r4, #24]
 8015416:	b11b      	cbz	r3, 8015420 <__sinit+0x14>
 8015418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801541c:	f7ff bff0 	b.w	8015400 <__sinit_lock_release>
 8015420:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015424:	6523      	str	r3, [r4, #80]	; 0x50
 8015426:	4b13      	ldr	r3, [pc, #76]	; (8015474 <__sinit+0x68>)
 8015428:	4a13      	ldr	r2, [pc, #76]	; (8015478 <__sinit+0x6c>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	62a2      	str	r2, [r4, #40]	; 0x28
 801542e:	42a3      	cmp	r3, r4
 8015430:	bf04      	itt	eq
 8015432:	2301      	moveq	r3, #1
 8015434:	61a3      	streq	r3, [r4, #24]
 8015436:	4620      	mov	r0, r4
 8015438:	f000 f820 	bl	801547c <__sfp>
 801543c:	6060      	str	r0, [r4, #4]
 801543e:	4620      	mov	r0, r4
 8015440:	f000 f81c 	bl	801547c <__sfp>
 8015444:	60a0      	str	r0, [r4, #8]
 8015446:	4620      	mov	r0, r4
 8015448:	f000 f818 	bl	801547c <__sfp>
 801544c:	2200      	movs	r2, #0
 801544e:	60e0      	str	r0, [r4, #12]
 8015450:	2104      	movs	r1, #4
 8015452:	6860      	ldr	r0, [r4, #4]
 8015454:	f7ff ff82 	bl	801535c <std>
 8015458:	68a0      	ldr	r0, [r4, #8]
 801545a:	2201      	movs	r2, #1
 801545c:	2109      	movs	r1, #9
 801545e:	f7ff ff7d 	bl	801535c <std>
 8015462:	68e0      	ldr	r0, [r4, #12]
 8015464:	2202      	movs	r2, #2
 8015466:	2112      	movs	r1, #18
 8015468:	f7ff ff78 	bl	801535c <std>
 801546c:	2301      	movs	r3, #1
 801546e:	61a3      	str	r3, [r4, #24]
 8015470:	e7d2      	b.n	8015418 <__sinit+0xc>
 8015472:	bf00      	nop
 8015474:	080293fc 	.word	0x080293fc
 8015478:	080153a5 	.word	0x080153a5

0801547c <__sfp>:
 801547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801547e:	4607      	mov	r7, r0
 8015480:	f7ff ffac 	bl	80153dc <__sfp_lock_acquire>
 8015484:	4b1e      	ldr	r3, [pc, #120]	; (8015500 <__sfp+0x84>)
 8015486:	681e      	ldr	r6, [r3, #0]
 8015488:	69b3      	ldr	r3, [r6, #24]
 801548a:	b913      	cbnz	r3, 8015492 <__sfp+0x16>
 801548c:	4630      	mov	r0, r6
 801548e:	f7ff ffbd 	bl	801540c <__sinit>
 8015492:	3648      	adds	r6, #72	; 0x48
 8015494:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015498:	3b01      	subs	r3, #1
 801549a:	d503      	bpl.n	80154a4 <__sfp+0x28>
 801549c:	6833      	ldr	r3, [r6, #0]
 801549e:	b30b      	cbz	r3, 80154e4 <__sfp+0x68>
 80154a0:	6836      	ldr	r6, [r6, #0]
 80154a2:	e7f7      	b.n	8015494 <__sfp+0x18>
 80154a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80154a8:	b9d5      	cbnz	r5, 80154e0 <__sfp+0x64>
 80154aa:	4b16      	ldr	r3, [pc, #88]	; (8015504 <__sfp+0x88>)
 80154ac:	60e3      	str	r3, [r4, #12]
 80154ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80154b2:	6665      	str	r5, [r4, #100]	; 0x64
 80154b4:	f000 f847 	bl	8015546 <__retarget_lock_init_recursive>
 80154b8:	f7ff ff96 	bl	80153e8 <__sfp_lock_release>
 80154bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80154c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80154c4:	6025      	str	r5, [r4, #0]
 80154c6:	61a5      	str	r5, [r4, #24]
 80154c8:	2208      	movs	r2, #8
 80154ca:	4629      	mov	r1, r5
 80154cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80154d0:	f7fb fd46 	bl	8010f60 <memset>
 80154d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80154d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80154dc:	4620      	mov	r0, r4
 80154de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154e0:	3468      	adds	r4, #104	; 0x68
 80154e2:	e7d9      	b.n	8015498 <__sfp+0x1c>
 80154e4:	2104      	movs	r1, #4
 80154e6:	4638      	mov	r0, r7
 80154e8:	f7ff ff62 	bl	80153b0 <__sfmoreglue>
 80154ec:	4604      	mov	r4, r0
 80154ee:	6030      	str	r0, [r6, #0]
 80154f0:	2800      	cmp	r0, #0
 80154f2:	d1d5      	bne.n	80154a0 <__sfp+0x24>
 80154f4:	f7ff ff78 	bl	80153e8 <__sfp_lock_release>
 80154f8:	230c      	movs	r3, #12
 80154fa:	603b      	str	r3, [r7, #0]
 80154fc:	e7ee      	b.n	80154dc <__sfp+0x60>
 80154fe:	bf00      	nop
 8015500:	080293fc 	.word	0x080293fc
 8015504:	ffff0001 	.word	0xffff0001

08015508 <_fwalk_reent>:
 8015508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801550c:	4606      	mov	r6, r0
 801550e:	4688      	mov	r8, r1
 8015510:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015514:	2700      	movs	r7, #0
 8015516:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801551a:	f1b9 0901 	subs.w	r9, r9, #1
 801551e:	d505      	bpl.n	801552c <_fwalk_reent+0x24>
 8015520:	6824      	ldr	r4, [r4, #0]
 8015522:	2c00      	cmp	r4, #0
 8015524:	d1f7      	bne.n	8015516 <_fwalk_reent+0xe>
 8015526:	4638      	mov	r0, r7
 8015528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801552c:	89ab      	ldrh	r3, [r5, #12]
 801552e:	2b01      	cmp	r3, #1
 8015530:	d907      	bls.n	8015542 <_fwalk_reent+0x3a>
 8015532:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015536:	3301      	adds	r3, #1
 8015538:	d003      	beq.n	8015542 <_fwalk_reent+0x3a>
 801553a:	4629      	mov	r1, r5
 801553c:	4630      	mov	r0, r6
 801553e:	47c0      	blx	r8
 8015540:	4307      	orrs	r7, r0
 8015542:	3568      	adds	r5, #104	; 0x68
 8015544:	e7e9      	b.n	801551a <_fwalk_reent+0x12>

08015546 <__retarget_lock_init_recursive>:
 8015546:	4770      	bx	lr

08015548 <__retarget_lock_acquire_recursive>:
 8015548:	4770      	bx	lr

0801554a <__retarget_lock_release_recursive>:
 801554a:	4770      	bx	lr

0801554c <__swhatbuf_r>:
 801554c:	b570      	push	{r4, r5, r6, lr}
 801554e:	460e      	mov	r6, r1
 8015550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015554:	2900      	cmp	r1, #0
 8015556:	b096      	sub	sp, #88	; 0x58
 8015558:	4614      	mov	r4, r2
 801555a:	461d      	mov	r5, r3
 801555c:	da07      	bge.n	801556e <__swhatbuf_r+0x22>
 801555e:	2300      	movs	r3, #0
 8015560:	602b      	str	r3, [r5, #0]
 8015562:	89b3      	ldrh	r3, [r6, #12]
 8015564:	061a      	lsls	r2, r3, #24
 8015566:	d410      	bmi.n	801558a <__swhatbuf_r+0x3e>
 8015568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801556c:	e00e      	b.n	801558c <__swhatbuf_r+0x40>
 801556e:	466a      	mov	r2, sp
 8015570:	f000 f946 	bl	8015800 <_fstat_r>
 8015574:	2800      	cmp	r0, #0
 8015576:	dbf2      	blt.n	801555e <__swhatbuf_r+0x12>
 8015578:	9a01      	ldr	r2, [sp, #4]
 801557a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801557e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015582:	425a      	negs	r2, r3
 8015584:	415a      	adcs	r2, r3
 8015586:	602a      	str	r2, [r5, #0]
 8015588:	e7ee      	b.n	8015568 <__swhatbuf_r+0x1c>
 801558a:	2340      	movs	r3, #64	; 0x40
 801558c:	2000      	movs	r0, #0
 801558e:	6023      	str	r3, [r4, #0]
 8015590:	b016      	add	sp, #88	; 0x58
 8015592:	bd70      	pop	{r4, r5, r6, pc}

08015594 <__smakebuf_r>:
 8015594:	898b      	ldrh	r3, [r1, #12]
 8015596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015598:	079d      	lsls	r5, r3, #30
 801559a:	4606      	mov	r6, r0
 801559c:	460c      	mov	r4, r1
 801559e:	d507      	bpl.n	80155b0 <__smakebuf_r+0x1c>
 80155a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80155a4:	6023      	str	r3, [r4, #0]
 80155a6:	6123      	str	r3, [r4, #16]
 80155a8:	2301      	movs	r3, #1
 80155aa:	6163      	str	r3, [r4, #20]
 80155ac:	b002      	add	sp, #8
 80155ae:	bd70      	pop	{r4, r5, r6, pc}
 80155b0:	ab01      	add	r3, sp, #4
 80155b2:	466a      	mov	r2, sp
 80155b4:	f7ff ffca 	bl	801554c <__swhatbuf_r>
 80155b8:	9900      	ldr	r1, [sp, #0]
 80155ba:	4605      	mov	r5, r0
 80155bc:	4630      	mov	r0, r6
 80155be:	f7ff f9fb 	bl	80149b8 <_malloc_r>
 80155c2:	b948      	cbnz	r0, 80155d8 <__smakebuf_r+0x44>
 80155c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155c8:	059a      	lsls	r2, r3, #22
 80155ca:	d4ef      	bmi.n	80155ac <__smakebuf_r+0x18>
 80155cc:	f023 0303 	bic.w	r3, r3, #3
 80155d0:	f043 0302 	orr.w	r3, r3, #2
 80155d4:	81a3      	strh	r3, [r4, #12]
 80155d6:	e7e3      	b.n	80155a0 <__smakebuf_r+0xc>
 80155d8:	4b0d      	ldr	r3, [pc, #52]	; (8015610 <__smakebuf_r+0x7c>)
 80155da:	62b3      	str	r3, [r6, #40]	; 0x28
 80155dc:	89a3      	ldrh	r3, [r4, #12]
 80155de:	6020      	str	r0, [r4, #0]
 80155e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80155e4:	81a3      	strh	r3, [r4, #12]
 80155e6:	9b00      	ldr	r3, [sp, #0]
 80155e8:	6163      	str	r3, [r4, #20]
 80155ea:	9b01      	ldr	r3, [sp, #4]
 80155ec:	6120      	str	r0, [r4, #16]
 80155ee:	b15b      	cbz	r3, 8015608 <__smakebuf_r+0x74>
 80155f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155f4:	4630      	mov	r0, r6
 80155f6:	f000 f915 	bl	8015824 <_isatty_r>
 80155fa:	b128      	cbz	r0, 8015608 <__smakebuf_r+0x74>
 80155fc:	89a3      	ldrh	r3, [r4, #12]
 80155fe:	f023 0303 	bic.w	r3, r3, #3
 8015602:	f043 0301 	orr.w	r3, r3, #1
 8015606:	81a3      	strh	r3, [r4, #12]
 8015608:	89a0      	ldrh	r0, [r4, #12]
 801560a:	4305      	orrs	r5, r0
 801560c:	81a5      	strh	r5, [r4, #12]
 801560e:	e7cd      	b.n	80155ac <__smakebuf_r+0x18>
 8015610:	080153a5 	.word	0x080153a5

08015614 <memmove>:
 8015614:	4288      	cmp	r0, r1
 8015616:	b510      	push	{r4, lr}
 8015618:	eb01 0402 	add.w	r4, r1, r2
 801561c:	d902      	bls.n	8015624 <memmove+0x10>
 801561e:	4284      	cmp	r4, r0
 8015620:	4623      	mov	r3, r4
 8015622:	d807      	bhi.n	8015634 <memmove+0x20>
 8015624:	1e43      	subs	r3, r0, #1
 8015626:	42a1      	cmp	r1, r4
 8015628:	d008      	beq.n	801563c <memmove+0x28>
 801562a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801562e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015632:	e7f8      	b.n	8015626 <memmove+0x12>
 8015634:	4402      	add	r2, r0
 8015636:	4601      	mov	r1, r0
 8015638:	428a      	cmp	r2, r1
 801563a:	d100      	bne.n	801563e <memmove+0x2a>
 801563c:	bd10      	pop	{r4, pc}
 801563e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015646:	e7f7      	b.n	8015638 <memmove+0x24>

08015648 <__malloc_lock>:
 8015648:	4801      	ldr	r0, [pc, #4]	; (8015650 <__malloc_lock+0x8>)
 801564a:	f7ff bf7d 	b.w	8015548 <__retarget_lock_acquire_recursive>
 801564e:	bf00      	nop
 8015650:	20000c78 	.word	0x20000c78

08015654 <__malloc_unlock>:
 8015654:	4801      	ldr	r0, [pc, #4]	; (801565c <__malloc_unlock+0x8>)
 8015656:	f7ff bf78 	b.w	801554a <__retarget_lock_release_recursive>
 801565a:	bf00      	nop
 801565c:	20000c78 	.word	0x20000c78

08015660 <_realloc_r>:
 8015660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015662:	4607      	mov	r7, r0
 8015664:	4614      	mov	r4, r2
 8015666:	460e      	mov	r6, r1
 8015668:	b921      	cbnz	r1, 8015674 <_realloc_r+0x14>
 801566a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801566e:	4611      	mov	r1, r2
 8015670:	f7ff b9a2 	b.w	80149b8 <_malloc_r>
 8015674:	b922      	cbnz	r2, 8015680 <_realloc_r+0x20>
 8015676:	f7ff f94f 	bl	8014918 <_free_r>
 801567a:	4625      	mov	r5, r4
 801567c:	4628      	mov	r0, r5
 801567e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015680:	f000 f8f2 	bl	8015868 <_malloc_usable_size_r>
 8015684:	42a0      	cmp	r0, r4
 8015686:	d20f      	bcs.n	80156a8 <_realloc_r+0x48>
 8015688:	4621      	mov	r1, r4
 801568a:	4638      	mov	r0, r7
 801568c:	f7ff f994 	bl	80149b8 <_malloc_r>
 8015690:	4605      	mov	r5, r0
 8015692:	2800      	cmp	r0, #0
 8015694:	d0f2      	beq.n	801567c <_realloc_r+0x1c>
 8015696:	4631      	mov	r1, r6
 8015698:	4622      	mov	r2, r4
 801569a:	f7fe fc65 	bl	8013f68 <memcpy>
 801569e:	4631      	mov	r1, r6
 80156a0:	4638      	mov	r0, r7
 80156a2:	f7ff f939 	bl	8014918 <_free_r>
 80156a6:	e7e9      	b.n	801567c <_realloc_r+0x1c>
 80156a8:	4635      	mov	r5, r6
 80156aa:	e7e7      	b.n	801567c <_realloc_r+0x1c>

080156ac <_raise_r>:
 80156ac:	291f      	cmp	r1, #31
 80156ae:	b538      	push	{r3, r4, r5, lr}
 80156b0:	4604      	mov	r4, r0
 80156b2:	460d      	mov	r5, r1
 80156b4:	d904      	bls.n	80156c0 <_raise_r+0x14>
 80156b6:	2316      	movs	r3, #22
 80156b8:	6003      	str	r3, [r0, #0]
 80156ba:	f04f 30ff 	mov.w	r0, #4294967295
 80156be:	bd38      	pop	{r3, r4, r5, pc}
 80156c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80156c2:	b112      	cbz	r2, 80156ca <_raise_r+0x1e>
 80156c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80156c8:	b94b      	cbnz	r3, 80156de <_raise_r+0x32>
 80156ca:	4620      	mov	r0, r4
 80156cc:	f000 f830 	bl	8015730 <_getpid_r>
 80156d0:	462a      	mov	r2, r5
 80156d2:	4601      	mov	r1, r0
 80156d4:	4620      	mov	r0, r4
 80156d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156da:	f000 b817 	b.w	801570c <_kill_r>
 80156de:	2b01      	cmp	r3, #1
 80156e0:	d00a      	beq.n	80156f8 <_raise_r+0x4c>
 80156e2:	1c59      	adds	r1, r3, #1
 80156e4:	d103      	bne.n	80156ee <_raise_r+0x42>
 80156e6:	2316      	movs	r3, #22
 80156e8:	6003      	str	r3, [r0, #0]
 80156ea:	2001      	movs	r0, #1
 80156ec:	e7e7      	b.n	80156be <_raise_r+0x12>
 80156ee:	2400      	movs	r4, #0
 80156f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80156f4:	4628      	mov	r0, r5
 80156f6:	4798      	blx	r3
 80156f8:	2000      	movs	r0, #0
 80156fa:	e7e0      	b.n	80156be <_raise_r+0x12>

080156fc <raise>:
 80156fc:	4b02      	ldr	r3, [pc, #8]	; (8015708 <raise+0xc>)
 80156fe:	4601      	mov	r1, r0
 8015700:	6818      	ldr	r0, [r3, #0]
 8015702:	f7ff bfd3 	b.w	80156ac <_raise_r>
 8015706:	bf00      	nop
 8015708:	20000040 	.word	0x20000040

0801570c <_kill_r>:
 801570c:	b538      	push	{r3, r4, r5, lr}
 801570e:	4d07      	ldr	r5, [pc, #28]	; (801572c <_kill_r+0x20>)
 8015710:	2300      	movs	r3, #0
 8015712:	4604      	mov	r4, r0
 8015714:	4608      	mov	r0, r1
 8015716:	4611      	mov	r1, r2
 8015718:	602b      	str	r3, [r5, #0]
 801571a:	f7f3 ffdb 	bl	80096d4 <_kill>
 801571e:	1c43      	adds	r3, r0, #1
 8015720:	d102      	bne.n	8015728 <_kill_r+0x1c>
 8015722:	682b      	ldr	r3, [r5, #0]
 8015724:	b103      	cbz	r3, 8015728 <_kill_r+0x1c>
 8015726:	6023      	str	r3, [r4, #0]
 8015728:	bd38      	pop	{r3, r4, r5, pc}
 801572a:	bf00      	nop
 801572c:	20000c80 	.word	0x20000c80

08015730 <_getpid_r>:
 8015730:	f7f3 bfc8 	b.w	80096c4 <_getpid>

08015734 <__sread>:
 8015734:	b510      	push	{r4, lr}
 8015736:	460c      	mov	r4, r1
 8015738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801573c:	f000 f89c 	bl	8015878 <_read_r>
 8015740:	2800      	cmp	r0, #0
 8015742:	bfab      	itete	ge
 8015744:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015746:	89a3      	ldrhlt	r3, [r4, #12]
 8015748:	181b      	addge	r3, r3, r0
 801574a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801574e:	bfac      	ite	ge
 8015750:	6563      	strge	r3, [r4, #84]	; 0x54
 8015752:	81a3      	strhlt	r3, [r4, #12]
 8015754:	bd10      	pop	{r4, pc}

08015756 <__swrite>:
 8015756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801575a:	461f      	mov	r7, r3
 801575c:	898b      	ldrh	r3, [r1, #12]
 801575e:	05db      	lsls	r3, r3, #23
 8015760:	4605      	mov	r5, r0
 8015762:	460c      	mov	r4, r1
 8015764:	4616      	mov	r6, r2
 8015766:	d505      	bpl.n	8015774 <__swrite+0x1e>
 8015768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801576c:	2302      	movs	r3, #2
 801576e:	2200      	movs	r2, #0
 8015770:	f000 f868 	bl	8015844 <_lseek_r>
 8015774:	89a3      	ldrh	r3, [r4, #12]
 8015776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801577a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801577e:	81a3      	strh	r3, [r4, #12]
 8015780:	4632      	mov	r2, r6
 8015782:	463b      	mov	r3, r7
 8015784:	4628      	mov	r0, r5
 8015786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801578a:	f000 b817 	b.w	80157bc <_write_r>

0801578e <__sseek>:
 801578e:	b510      	push	{r4, lr}
 8015790:	460c      	mov	r4, r1
 8015792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015796:	f000 f855 	bl	8015844 <_lseek_r>
 801579a:	1c43      	adds	r3, r0, #1
 801579c:	89a3      	ldrh	r3, [r4, #12]
 801579e:	bf15      	itete	ne
 80157a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80157a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80157a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80157aa:	81a3      	strheq	r3, [r4, #12]
 80157ac:	bf18      	it	ne
 80157ae:	81a3      	strhne	r3, [r4, #12]
 80157b0:	bd10      	pop	{r4, pc}

080157b2 <__sclose>:
 80157b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157b6:	f000 b813 	b.w	80157e0 <_close_r>
	...

080157bc <_write_r>:
 80157bc:	b538      	push	{r3, r4, r5, lr}
 80157be:	4d07      	ldr	r5, [pc, #28]	; (80157dc <_write_r+0x20>)
 80157c0:	4604      	mov	r4, r0
 80157c2:	4608      	mov	r0, r1
 80157c4:	4611      	mov	r1, r2
 80157c6:	2200      	movs	r2, #0
 80157c8:	602a      	str	r2, [r5, #0]
 80157ca:	461a      	mov	r2, r3
 80157cc:	f7f3 ffb9 	bl	8009742 <_write>
 80157d0:	1c43      	adds	r3, r0, #1
 80157d2:	d102      	bne.n	80157da <_write_r+0x1e>
 80157d4:	682b      	ldr	r3, [r5, #0]
 80157d6:	b103      	cbz	r3, 80157da <_write_r+0x1e>
 80157d8:	6023      	str	r3, [r4, #0]
 80157da:	bd38      	pop	{r3, r4, r5, pc}
 80157dc:	20000c80 	.word	0x20000c80

080157e0 <_close_r>:
 80157e0:	b538      	push	{r3, r4, r5, lr}
 80157e2:	4d06      	ldr	r5, [pc, #24]	; (80157fc <_close_r+0x1c>)
 80157e4:	2300      	movs	r3, #0
 80157e6:	4604      	mov	r4, r0
 80157e8:	4608      	mov	r0, r1
 80157ea:	602b      	str	r3, [r5, #0]
 80157ec:	f7f3 ffc5 	bl	800977a <_close>
 80157f0:	1c43      	adds	r3, r0, #1
 80157f2:	d102      	bne.n	80157fa <_close_r+0x1a>
 80157f4:	682b      	ldr	r3, [r5, #0]
 80157f6:	b103      	cbz	r3, 80157fa <_close_r+0x1a>
 80157f8:	6023      	str	r3, [r4, #0]
 80157fa:	bd38      	pop	{r3, r4, r5, pc}
 80157fc:	20000c80 	.word	0x20000c80

08015800 <_fstat_r>:
 8015800:	b538      	push	{r3, r4, r5, lr}
 8015802:	4d07      	ldr	r5, [pc, #28]	; (8015820 <_fstat_r+0x20>)
 8015804:	2300      	movs	r3, #0
 8015806:	4604      	mov	r4, r0
 8015808:	4608      	mov	r0, r1
 801580a:	4611      	mov	r1, r2
 801580c:	602b      	str	r3, [r5, #0]
 801580e:	f7f3 ffc0 	bl	8009792 <_fstat>
 8015812:	1c43      	adds	r3, r0, #1
 8015814:	d102      	bne.n	801581c <_fstat_r+0x1c>
 8015816:	682b      	ldr	r3, [r5, #0]
 8015818:	b103      	cbz	r3, 801581c <_fstat_r+0x1c>
 801581a:	6023      	str	r3, [r4, #0]
 801581c:	bd38      	pop	{r3, r4, r5, pc}
 801581e:	bf00      	nop
 8015820:	20000c80 	.word	0x20000c80

08015824 <_isatty_r>:
 8015824:	b538      	push	{r3, r4, r5, lr}
 8015826:	4d06      	ldr	r5, [pc, #24]	; (8015840 <_isatty_r+0x1c>)
 8015828:	2300      	movs	r3, #0
 801582a:	4604      	mov	r4, r0
 801582c:	4608      	mov	r0, r1
 801582e:	602b      	str	r3, [r5, #0]
 8015830:	f7f3 ffbf 	bl	80097b2 <_isatty>
 8015834:	1c43      	adds	r3, r0, #1
 8015836:	d102      	bne.n	801583e <_isatty_r+0x1a>
 8015838:	682b      	ldr	r3, [r5, #0]
 801583a:	b103      	cbz	r3, 801583e <_isatty_r+0x1a>
 801583c:	6023      	str	r3, [r4, #0]
 801583e:	bd38      	pop	{r3, r4, r5, pc}
 8015840:	20000c80 	.word	0x20000c80

08015844 <_lseek_r>:
 8015844:	b538      	push	{r3, r4, r5, lr}
 8015846:	4d07      	ldr	r5, [pc, #28]	; (8015864 <_lseek_r+0x20>)
 8015848:	4604      	mov	r4, r0
 801584a:	4608      	mov	r0, r1
 801584c:	4611      	mov	r1, r2
 801584e:	2200      	movs	r2, #0
 8015850:	602a      	str	r2, [r5, #0]
 8015852:	461a      	mov	r2, r3
 8015854:	f7f3 ffb8 	bl	80097c8 <_lseek>
 8015858:	1c43      	adds	r3, r0, #1
 801585a:	d102      	bne.n	8015862 <_lseek_r+0x1e>
 801585c:	682b      	ldr	r3, [r5, #0]
 801585e:	b103      	cbz	r3, 8015862 <_lseek_r+0x1e>
 8015860:	6023      	str	r3, [r4, #0]
 8015862:	bd38      	pop	{r3, r4, r5, pc}
 8015864:	20000c80 	.word	0x20000c80

08015868 <_malloc_usable_size_r>:
 8015868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801586c:	1f18      	subs	r0, r3, #4
 801586e:	2b00      	cmp	r3, #0
 8015870:	bfbc      	itt	lt
 8015872:	580b      	ldrlt	r3, [r1, r0]
 8015874:	18c0      	addlt	r0, r0, r3
 8015876:	4770      	bx	lr

08015878 <_read_r>:
 8015878:	b538      	push	{r3, r4, r5, lr}
 801587a:	4d07      	ldr	r5, [pc, #28]	; (8015898 <_read_r+0x20>)
 801587c:	4604      	mov	r4, r0
 801587e:	4608      	mov	r0, r1
 8015880:	4611      	mov	r1, r2
 8015882:	2200      	movs	r2, #0
 8015884:	602a      	str	r2, [r5, #0]
 8015886:	461a      	mov	r2, r3
 8015888:	f7f3 ff3e 	bl	8009708 <_read>
 801588c:	1c43      	adds	r3, r0, #1
 801588e:	d102      	bne.n	8015896 <_read_r+0x1e>
 8015890:	682b      	ldr	r3, [r5, #0]
 8015892:	b103      	cbz	r3, 8015896 <_read_r+0x1e>
 8015894:	6023      	str	r3, [r4, #0]
 8015896:	bd38      	pop	{r3, r4, r5, pc}
 8015898:	20000c80 	.word	0x20000c80

0801589c <_init>:
 801589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801589e:	bf00      	nop
 80158a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158a2:	bc08      	pop	{r3}
 80158a4:	469e      	mov	lr, r3
 80158a6:	4770      	bx	lr

080158a8 <_fini>:
 80158a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158aa:	bf00      	nop
 80158ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158ae:	bc08      	pop	{r3}
 80158b0:	469e      	mov	lr, r3
 80158b2:	4770      	bx	lr
